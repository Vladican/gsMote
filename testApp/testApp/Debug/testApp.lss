
testApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00802000  00007c70  00007d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002fa5  00802138  00802138  00007e3c  2**0
                  ALLOC
  3 .stab         000029b8  00000000  00000000  00007e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a2d  00000000  00000000  0000a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000400  00000000  00000000  0000b228  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ca49  00000000  00000000  0000b628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002655  00000000  00000000  00018071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005537  00000000  00000000  0001a6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c94  00000000  00000000  0001fc00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004690  00000000  00000000  00021894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008296  00000000  00000000  00025f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0015b166  00000000  00000000  0002e1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c0  00000000  00000000  00189320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      38:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_14>
      3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      40:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__vector_16>
      44:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__vector_17>
      48:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__vector_18>
      4c:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_19>
      50:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__vector_20>
      54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ac:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__vector_43>
      b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     100:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__vector_64>
     104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     134:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_77>
     138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     13c:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_79>
     140:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_80>
     144:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__vector_81>
     148:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__vector_82>
     14c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_83>
     150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a0:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__vector_104>
     1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001e8 <chb_err_init>:
     1e8:	52 41 44 49 4f 20 4e 4f 54 20 49 4e 49 54 49 41     RADIO NOT INITIA
     1f8:	4c 49 5a 45 44 20 50 52 4f 50 45 52 4c 59 0a 00     LIZED PROPERLY..

00000208 <chb_err_overflow>:
     208:	42 55 46 46 45 52 20 46 55 4c 4c 2e 20 54 4f 53     BUFFER FULL. TOS
     218:	53 49 4e 47 20 49 4e 43 4f 4d 49 4e 47 20 44 41     SING INCOMING DA
     228:	54 41 0a 00                                         TA..

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	df e5       	ldi	r29, 0x5F	; 95
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	e0 e7       	ldi	r30, 0x70	; 112
     244:	fc e7       	ldi	r31, 0x7C	; 124
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a8 33       	cpi	r26, 0x38	; 56
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	10 e5       	ldi	r17, 0x50	; 80
     258:	a8 e3       	ldi	r26, 0x38	; 56
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ad 3d       	cpi	r26, 0xDD	; 221
     262:	b1 07       	cpc	r27, r17
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 01 02 	call	0x402	; 0x402 <main>
     26a:	0c 94 36 3e 	jmp	0x7c6c	; 0x7c6c <_exit>

0000026e <__bad_interrupt>:
     26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <StartSerial>:
 * Created: 9/20/2013 9:50:45 AM
 *  Author: Vlad
 */ 
#include "SerialUSB.h"

bool StartSerial(uint32_t BaudRate){
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	6b 01       	movw	r12, r22
     284:	7c 01       	movw	r14, r24
	uint16_t prescaler;
	if(BaudRate <600 || BaudRate >1000000){
     286:	dc 01       	movw	r26, r24
     288:	cb 01       	movw	r24, r22
     28a:	88 55       	subi	r24, 0x58	; 88
     28c:	92 40       	sbci	r25, 0x02	; 2
     28e:	a0 40       	sbci	r26, 0x00	; 0
     290:	b0 40       	sbci	r27, 0x00	; 0
     292:	89 3e       	cpi	r24, 0xE9	; 233
     294:	2f e3       	ldi	r18, 0x3F	; 63
     296:	92 07       	cpc	r25, r18
     298:	2f e0       	ldi	r18, 0x0F	; 15
     29a:	a2 07       	cpc	r26, r18
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	b2 07       	cpc	r27, r18
     2a0:	08 f0       	brcs	.+2      	; 0x2a4 <StartSerial+0x32>
     2a2:	5c c0       	rjmp	.+184    	; 0x35c <StartSerial+0xea>
		//baud rate too fast or too slow
		return false;
	}
	//set F_CPU/F_PER to 32 MHz (default is the 2 MHz RC oscillator)
	set_32MHz();
     2a4:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <set_32MHz>
	//set output on transmit pin
	PORTC.DIRSET = PIN3_bm;
     2a8:	e0 e4       	ldi	r30, 0x40	; 64
     2aa:	f6 e0       	ldi	r31, 0x06	; 6
     2ac:	88 e0       	ldi	r24, 0x08	; 8
     2ae:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = PIN3_bm;
     2b0:	85 83       	std	Z+5, r24	; 0x05
	//set input on receive pin
	PORTC.DIRCLR = PIN2_bm;
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	82 83       	std	Z+2, r24	; 0x02
	//prescalar of 15: baud = F_CPU/((2^bscale)*16*(scaler+1)) = 125000 (almost 128000)
	prescaler = (uint32_t)((((float)F_CPU)/((float)(16*BaudRate)))-1);
     2b6:	cc 0c       	add	r12, r12
     2b8:	dd 1c       	adc	r13, r13
     2ba:	ee 1c       	adc	r14, r14
     2bc:	ff 1c       	adc	r15, r15
     2be:	cc 0c       	add	r12, r12
     2c0:	dd 1c       	adc	r13, r13
     2c2:	ee 1c       	adc	r14, r14
     2c4:	ff 1c       	adc	r15, r15
     2c6:	c7 01       	movw	r24, r14
     2c8:	b6 01       	movw	r22, r12
     2ca:	66 0f       	add	r22, r22
     2cc:	77 1f       	adc	r23, r23
     2ce:	88 1f       	adc	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	66 0f       	add	r22, r22
     2d4:	77 1f       	adc	r23, r23
     2d6:	88 1f       	adc	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	0e 94 84 39 	call	0x7308	; 0x7308 <__floatunsisf>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	74 e2       	ldi	r23, 0x24	; 36
     2e6:	84 ef       	ldi	r24, 0xF4	; 244
     2e8:	9b e4       	ldi	r25, 0x4B	; 75
     2ea:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <__divsf3>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e8       	ldi	r20, 0x80	; 128
     2f4:	5f e3       	ldi	r21, 0x3F	; 63
     2f6:	0e 94 8b 38 	call	0x7116	; 0x7116 <__subsf3>
     2fa:	c6 2f       	mov	r28, r22
     2fc:	d7 2f       	mov	r29, r23
     2fe:	18 2f       	mov	r17, r24
     300:	09 2f       	mov	r16, r25
     302:	86 2f       	mov	r24, r22
     304:	9d 2f       	mov	r25, r29
     306:	a1 2f       	mov	r26, r17
     308:	b0 2f       	mov	r27, r16
     30a:	bc 01       	movw	r22, r24
     30c:	cd 01       	movw	r24, r26
     30e:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__fixunssfsi>
     312:	6b 01       	movw	r12, r22
     314:	7c 01       	movw	r14, r24
	//increment prescaler if truncated part was >= 0.5
	if((((float)F_CPU/((float)(16*BaudRate)))-1)-prescaler >= 0.5) prescaler++;
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 84 39 	call	0x7308	; 0x7308 <__floatunsisf>
     31e:	9b 01       	movw	r18, r22
     320:	ac 01       	movw	r20, r24
     322:	8c 2f       	mov	r24, r28
     324:	9d 2f       	mov	r25, r29
     326:	a1 2f       	mov	r26, r17
     328:	b0 2f       	mov	r27, r16
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	0e 94 8b 38 	call	0x7116	; 0x7116 <__subsf3>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	5f e3       	ldi	r21, 0x3F	; 63
     33a:	0e 94 12 3a 	call	0x7424	; 0x7424 <__gesf2>
     33e:	88 23       	and	r24, r24
     340:	1c f0       	brlt	.+6      	; 0x348 <StartSerial+0xd6>
     342:	08 94       	sec
     344:	c1 1c       	adc	r12, r1
     346:	d1 1c       	adc	r13, r1
	
	USARTC0.BAUDCTRLA = prescaler & 0xFF;
     348:	e0 ea       	ldi	r30, 0xA0	; 160
     34a:	f8 e0       	ldi	r31, 0x08	; 8
     34c:	c6 82       	std	Z+6, r12	; 0x06
	USARTC0.BAUDCTRLB = prescaler >>8;
     34e:	d7 82       	std	Z+7, r13	; 0x07
	//8 data bits no parity 1 stop bit
	USARTC0.CTRLC = 3;
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	85 83       	std	Z+5, r24	; 0x05
	//turn on Rx and Tx for USART
	USARTC0.CTRLB = BIT4_bm | BIT3_bm;
     354:	88 e1       	ldi	r24, 0x18	; 24
     356:	84 83       	std	Z+4, r24	; 0x04
	return true;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	01 c0       	rjmp	.+2      	; 0x35e <StartSerial+0xec>

bool StartSerial(uint32_t BaudRate){
	uint16_t prescaler;
	if(BaudRate <600 || BaudRate >1000000){
		//baud rate too fast or too slow
		return false;
     35c:	80 e0       	ldi	r24, 0x00	; 0
	//8 data bits no parity 1 stop bit
	USARTC0.CTRLC = 3;
	//turn on Rx and Tx for USART
	USARTC0.CTRLB = BIT4_bm | BIT3_bm;
	return true;
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	08 95       	ret

00000370 <SerialWriteByte>:

void SerialWriteByte(uint8_t byte){
	//wait for transmit buffer to become available
	while((USARTC0.STATUS & BIT5_bm) != BIT5_bm){
     370:	e0 ea       	ldi	r30, 0xA0	; 160
     372:	f8 e0       	ldi	r31, 0x08	; 8
     374:	91 81       	ldd	r25, Z+1	; 0x01
     376:	95 ff       	sbrs	r25, 5
     378:	fd cf       	rjmp	.-6      	; 0x374 <SerialWriteByte+0x4>
		//wait
	}
	//send byte
	USARTC0.DATA = byte;
     37a:	80 93 a0 08 	sts	0x08A0, r24
	//wait for transmit to finish
	//while((USARTC0.STATUS & BIT6_bm) != BIT6_bm) {
		//wait
	//}
}
     37e:	08 95       	ret

00000380 <SerialReadByte>:

uint8_t SerialReadByte(){
	uint8_t byte;
	//wait for reception of message
	while ((USARTC0.STATUS & BIT7_bm) != BIT7_bm){
     380:	e0 ea       	ldi	r30, 0xA0	; 160
     382:	f8 e0       	ldi	r31, 0x08	; 8
     384:	81 81       	ldd	r24, Z+1	; 0x01
     386:	88 23       	and	r24, r24
     388:	ec f7       	brge	.-6      	; 0x384 <SerialReadByte+0x4>
		//add timeout logic
	}	
	//read in byte
	byte = USARTC0.DATA;
     38a:	80 91 a0 08 	lds	r24, 0x08A0
	return byte;	
}
     38e:	08 95       	ret

00000390 <SerialWriteBuffer>:

void SerialWriteBuffer(uint8_t* buffer, uint32_t length){
     390:	8f 92       	push	r8
     392:	9f 92       	push	r9
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	6a 01       	movw	r12, r20
     3a6:	7b 01       	movw	r14, r22
	uint32_t i;
	for(i=0;i<length;i++){
     3a8:	41 15       	cp	r20, r1
     3aa:	51 05       	cpc	r21, r1
     3ac:	61 05       	cpc	r22, r1
     3ae:	71 05       	cpc	r23, r1
     3b0:	91 f0       	breq	.+36     	; 0x3d6 <SerialWriteBuffer+0x46>
     3b2:	c8 2f       	mov	r28, r24
     3b4:	d9 2f       	mov	r29, r25
     3b6:	88 24       	eor	r8, r8
     3b8:	99 24       	eor	r9, r9
     3ba:	54 01       	movw	r10, r8
		SerialWriteByte(buffer[i]);
     3bc:	89 91       	ld	r24, Y+
     3be:	0e 94 b8 01 	call	0x370	; 0x370 <SerialWriteByte>
	return byte;	
}

void SerialWriteBuffer(uint8_t* buffer, uint32_t length){
	uint32_t i;
	for(i=0;i<length;i++){
     3c2:	08 94       	sec
     3c4:	81 1c       	adc	r8, r1
     3c6:	91 1c       	adc	r9, r1
     3c8:	a1 1c       	adc	r10, r1
     3ca:	b1 1c       	adc	r11, r1
     3cc:	8c 14       	cp	r8, r12
     3ce:	9d 04       	cpc	r9, r13
     3d0:	ae 04       	cpc	r10, r14
     3d2:	bf 04       	cpc	r11, r15
     3d4:	99 f7       	brne	.-26     	; 0x3bc <SerialWriteBuffer+0x2c>
		SerialWriteByte(buffer[i]);
	}
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	bf 90       	pop	r11
     3e4:	af 90       	pop	r10
     3e6:	9f 90       	pop	r9
     3e8:	8f 90       	pop	r8
     3ea:	08 95       	ret

000003ec <StopSerial>:

void StopSerial(){
	//turn off Rx and Tx for USART
	USARTC0.CTRLB &= ~(BIT4_bm | BIT3_bm);
     3ec:	e0 ea       	ldi	r30, 0xA0	; 160
     3ee:	f8 e0       	ldi	r31, 0x08	; 8
     3f0:	84 81       	ldd	r24, Z+4	; 0x04
     3f2:	87 7e       	andi	r24, 0xE7	; 231
     3f4:	84 83       	std	Z+4, r24	; 0x04
	//clear output pin
	PORTC.OUTCLR = PIN3_bm;
     3f6:	e0 e4       	ldi	r30, 0x40	; 64
     3f8:	f6 e0       	ldi	r31, 0x06	; 6
     3fa:	88 e0       	ldi	r24, 0x08	; 8
     3fc:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN3_bm;
     3fe:	82 83       	std	Z+2, r24	; 0x02
     400:	08 95       	ret

00000402 <main>:
 * Created: 9/22/2013 7:28:35 PM
 *  Author: Vlad
 */ 
#include "E-000001-000009_firmware_rev_1_0.h"

int main(){
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	69 97       	sbiw	r28, 0x19	; 25
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	de bf       	out	0x3e, r29	; 62
	
	uint8_t length;
	uint8_t gain = GAIN_1_gc;
	uint16_t freq = 1000;
	volatile uint32_t samples = 0;
     410:	19 82       	std	Y+1, r1	; 0x01
     412:	1a 82       	std	Y+2, r1	; 0x02
     414:	1b 82       	std	Y+3, r1	; 0x03
     416:	1c 82       	std	Y+4, r1	; 0x04
	DataAvailable = 0;
     418:	10 92 d5 21 	sts	0x21D5, r1
	ADC_Sampling_Finished = 1;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	80 93 cd 50 	sts	0x50CD, r24
	uint8_t RadioMessageBuffer[20];
	set_32MHz();
     422:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <set_32MHz>
	chb_init();
     426:	0e 94 29 16 	call	0x2c52	; 0x2c52 <chb_init>
	chb_set_channel(1);
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	0e 94 8a 19 	call	0x3314	; 0x3314 <chb_set_channel>
	chb_set_short_addr(0x0002);
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 4c 18 	call	0x3098	; 0x3098 <chb_set_short_addr>
	pcb_t* pcb = chb_get_pcb();
     438:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <chb_get_pcb>
     43c:	3c 01       	movw	r6, r24

int main(){
	
	uint8_t length;
	uint8_t gain = GAIN_1_gc;
	uint16_t freq = 1000;
     43e:	0f 2e       	mov	r0, r31
     440:	f8 ee       	ldi	r31, 0xE8	; 232
     442:	4f 2e       	mov	r4, r31
     444:	f3 e0       	ldi	r31, 0x03	; 3
     446:	5f 2e       	mov	r5, r31
     448:	f0 2d       	mov	r31, r0
#include "E-000001-000009_firmware_rev_1_0.h"

int main(){
	
	uint8_t length;
	uint8_t gain = GAIN_1_gc;
     44a:	10 e0       	ldi	r17, 0x00	; 0
				{
				case 'R':
					//collect data if the ADC is not collecting any data right now
					if(ADC_Sampling_Finished){
						//CO_collectADC(ADC_CH_1_gc, gain, freq, 1000,(int32_t*)FRAMReadBuffer);
						CO_collectSeismic1Channel(ADC_CH_8_gc, gain, freq, 6, FALSE, 1, 2, 3, 4, 1000,(int32_t*)FRAMReadBuffer);
     44c:	0f 2e       	mov	r0, r31
     44e:	ff ed       	ldi	r31, 0xDF	; 223
     450:	2f 2e       	mov	r2, r31
     452:	f3 e2       	ldi	r31, 0x23	; 35
     454:	3f 2e       	mov	r3, r31
     456:	f0 2d       	mov	r31, r0
     458:	01 c0       	rjmp	.+2      	; 0x45c <main+0x5a>
					switch(RadioMessageBuffer[1]){
						case 1:
							gain = GAIN_1_gc;
							break;
						case 2:
							gain = GAIN_2_gc;
     45a:	11 e0       	ldi	r17, 0x01	; 1
	chb_init();
	chb_set_channel(1);
	chb_set_short_addr(0x0002);
	pcb_t* pcb = chb_get_pcb();
	while(1){
		if(pcb->data_rcv){
     45c:	f3 01       	movw	r30, r6
     45e:	83 81       	ldd	r24, Z+3	; 0x03
     460:	88 23       	and	r24, r24
     462:	e1 f3       	breq	.-8      	; 0x45c <main+0x5a>
			//read the data
			length = chb_read((chb_rx_data_t*)RadioMessageBuffer);
     464:	ce 01       	movw	r24, r28
     466:	05 96       	adiw	r24, 0x05	; 5
     468:	0e 94 ed 16 	call	0x2dda	; 0x2dda <chb_read>
			
			if(length == 1){
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	b1 f7       	brne	.-20     	; 0x45c <main+0x5a>
				switch ( RadioMessageBuffer[0])
     470:	8d 81       	ldd	r24, Y+5	; 0x05
     472:	82 35       	cpi	r24, 0x52	; 82
     474:	71 f0       	breq	.+28     	; 0x492 <main+0x90>
     476:	83 35       	cpi	r24, 0x53	; 83
     478:	30 f4       	brcc	.+12     	; 0x486 <main+0x84>
     47a:	86 34       	cpi	r24, 0x46	; 70
     47c:	09 f4       	brne	.+2      	; 0x480 <main+0x7e>
     47e:	65 c0       	rjmp	.+202    	; 0x54a <main+0x148>
     480:	87 34       	cpi	r24, 0x47	; 71
     482:	61 f7       	brne	.-40     	; 0x45c <main+0x5a>
     484:	30 c0       	rjmp	.+96     	; 0x4e6 <main+0xe4>
     486:	83 35       	cpi	r24, 0x53	; 83
     488:	09 f4       	brne	.+2      	; 0x48c <main+0x8a>
     48a:	62 c0       	rjmp	.+196    	; 0x550 <main+0x14e>
     48c:	84 35       	cpi	r24, 0x54	; 84
     48e:	31 f7       	brne	.-52     	; 0x45c <main+0x5a>
     490:	67 c0       	rjmp	.+206    	; 0x560 <main+0x15e>
				{
				case 'R':
					//collect data if the ADC is not collecting any data right now
					if(ADC_Sampling_Finished){
     492:	80 91 cd 50 	lds	r24, 0x50CD
     496:	88 23       	and	r24, r24
     498:	09 f3       	breq	.-62     	; 0x45c <main+0x5a>
						//CO_collectADC(ADC_CH_1_gc, gain, freq, 1000,(int32_t*)FRAMReadBuffer);
						CO_collectSeismic1Channel(ADC_CH_8_gc, gain, freq, 6, FALSE, 1, 2, 3, 4, 1000,(int32_t*)FRAMReadBuffer);
     49a:	00 d0       	rcall	.+0      	; 0x49c <main+0x9a>
     49c:	0f 92       	push	r0
     49e:	88 ee       	ldi	r24, 0xE8	; 232
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	ed b7       	in	r30, 0x3d	; 61
     4a4:	fe b7       	in	r31, 0x3e	; 62
     4a6:	81 83       	std	Z+1, r24	; 0x01
     4a8:	92 83       	std	Z+2, r25	; 0x02
     4aa:	23 82       	std	Z+3, r2	; 0x03
     4ac:	34 82       	std	Z+4, r3	; 0x04
     4ae:	87 e0       	ldi	r24, 0x07	; 7
     4b0:	61 2f       	mov	r22, r17
     4b2:	a2 01       	movw	r20, r4
     4b4:	26 e0       	ldi	r18, 0x06	; 6
     4b6:	00 e0       	ldi	r16, 0x00	; 0
     4b8:	ee 24       	eor	r14, r14
     4ba:	ff 24       	eor	r15, r15
     4bc:	e3 94       	inc	r14
     4be:	cc 24       	eor	r12, r12
     4c0:	dd 24       	eor	r13, r13
     4c2:	68 94       	set
     4c4:	c1 f8       	bld	r12, 1
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f3 e0       	ldi	r31, 0x03	; 3
     4ca:	af 2e       	mov	r10, r31
     4cc:	bb 24       	eor	r11, r11
     4ce:	f0 2d       	mov	r31, r0
     4d0:	88 24       	eor	r8, r8
     4d2:	99 24       	eor	r9, r9
     4d4:	68 94       	set
     4d6:	82 f8       	bld	r8, 2
     4d8:	0e 94 57 13 	call	0x26ae	; 0x26ae <CO_collectSeismic1Channel>
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	bb cf       	rjmp	.-138    	; 0x45c <main+0x5a>
					}						
					break;
				case 'G':
					//set gain to what is specified
					switch(RadioMessageBuffer[1]){
     4e6:	8e 81       	ldd	r24, Y+6	; 0x06
     4e8:	88 30       	cpi	r24, 0x08	; 8
     4ea:	d1 f0       	breq	.+52     	; 0x520 <main+0x11e>
     4ec:	89 30       	cpi	r24, 0x09	; 9
     4ee:	40 f4       	brcc	.+16     	; 0x500 <main+0xfe>
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <main+0xf4>
     4f4:	b2 cf       	rjmp	.-156    	; 0x45a <main+0x58>
     4f6:	84 30       	cpi	r24, 0x04	; 4
     4f8:	89 f0       	breq	.+34     	; 0x51c <main+0x11a>
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	d9 f4       	brne	.+54     	; 0x534 <main+0x132>
     4fe:	0c c0       	rjmp	.+24     	; 0x518 <main+0x116>
     500:	80 32       	cpi	r24, 0x20	; 32
     502:	91 f0       	breq	.+36     	; 0x528 <main+0x126>
     504:	81 32       	cpi	r24, 0x21	; 33
     506:	18 f4       	brcc	.+6      	; 0x50e <main+0x10c>
     508:	80 31       	cpi	r24, 0x10	; 16
     50a:	a1 f4       	brne	.+40     	; 0x534 <main+0x132>
     50c:	0b c0       	rjmp	.+22     	; 0x524 <main+0x122>
     50e:	80 34       	cpi	r24, 0x40	; 64
     510:	69 f0       	breq	.+26     	; 0x52c <main+0x12a>
     512:	80 38       	cpi	r24, 0x80	; 128
     514:	79 f4       	brne	.+30     	; 0x534 <main+0x132>
     516:	0c c0       	rjmp	.+24     	; 0x530 <main+0x12e>
						case 1:
							gain = GAIN_1_gc;
     518:	10 e0       	ldi	r17, 0x00	; 0
     51a:	a0 cf       	rjmp	.-192    	; 0x45c <main+0x5a>
							break;
						case 2:
							gain = GAIN_2_gc;
							break;
						case 4:
							gain = GAIN_4_gc;
     51c:	12 e0       	ldi	r17, 0x02	; 2
							break;
     51e:	9e cf       	rjmp	.-196    	; 0x45c <main+0x5a>
						case 8:
							gain = GAIN_8_gc;
     520:	13 e0       	ldi	r17, 0x03	; 3
							break;
     522:	9c cf       	rjmp	.-200    	; 0x45c <main+0x5a>
						case 16:
							gain = GAIN_16_gc;
     524:	14 e0       	ldi	r17, 0x04	; 4
							break;
     526:	9a cf       	rjmp	.-204    	; 0x45c <main+0x5a>
						case 32:
							gain = GAIN_32_gc;
     528:	15 e0       	ldi	r17, 0x05	; 5
							break;
     52a:	98 cf       	rjmp	.-208    	; 0x45c <main+0x5a>
						case 64:
							gain = GAIN_64_gc;
     52c:	16 e0       	ldi	r17, 0x06	; 6
							break;
     52e:	96 cf       	rjmp	.-212    	; 0x45c <main+0x5a>
						case 128:
							gain = GAIN_128_gc;
     530:	17 e0       	ldi	r17, 0x07	; 7
							break;
     532:	94 cf       	rjmp	.-216    	; 0x45c <main+0x5a>
						default:
							chb_write(0x0000,(uint8_t*)"invalid gain",strlen("invalid gain"));
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e2       	ldi	r23, 0x20	; 32
     53c:	2c e0       	ldi	r18, 0x0C	; 12
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <chb_write>
							break;
     548:	89 cf       	rjmp	.-238    	; 0x45c <main+0x5a>
					}					
					break;
				case 'F':
					//set sampling frequency to what is specified
					freq = *(uint16_t*)(RadioMessageBuffer+1);
     54a:	4e 80       	ldd	r4, Y+6	; 0x06
     54c:	5f 80       	ldd	r5, Y+7	; 0x07
					break;
     54e:	86 cf       	rjmp	.-244    	; 0x45c <main+0x5a>
				case 'S':
					//stop the ADC if it is not already
					if(!ADC_Sampling_Finished){
     550:	80 91 cd 50 	lds	r24, 0x50CD
     554:	88 23       	and	r24, r24
     556:	09 f0       	breq	.+2      	; 0x55a <main+0x158>
     558:	81 cf       	rjmp	.-254    	; 0x45c <main+0x5a>
						ADC_Stop_Sampling();
     55a:	0e 94 7e 07 	call	0xefc	; 0xefc <ADC_Stop_Sampling>
     55e:	7e cf       	rjmp	.-260    	; 0x45c <main+0x5a>
					}
					//otherwise, the ADC has finished sampling on its own and the data will be transmitted after this switch statement
					break;
				case 'T':
					if(ADC_Sampling_Finished && DataAvailable){
     560:	80 91 cd 50 	lds	r24, 0x50CD
     564:	88 23       	and	r24, r24
     566:	09 f4       	brne	.+2      	; 0x56a <main+0x168>
     568:	79 cf       	rjmp	.-270    	; 0x45c <main+0x5a>
     56a:	80 91 d5 21 	lds	r24, 0x21D5
     56e:	88 23       	and	r24, r24
     570:	09 f4       	brne	.+2      	; 0x574 <main+0x172>
     572:	74 cf       	rjmp	.-280    	; 0x45c <main+0x5a>
						//get number of data points collected
						samples = ADC_Get_Num_Samples();
     574:	0e 94 9f 07 	call	0xf3e	; 0xf3e <ADC_Get_Num_Samples>
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	89 83       	std	Y+1, r24	; 0x01
     57e:	9a 83       	std	Y+2, r25	; 0x02
     580:	ab 83       	std	Y+3, r26	; 0x03
     582:	bc 83       	std	Y+4, r27	; 0x04
						if(samples > 0){	
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	ab 81       	ldd	r26, Y+3	; 0x03
     58a:	bc 81       	ldd	r27, Y+4	; 0x04
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	a1 05       	cpc	r26, r1
     590:	b1 05       	cpc	r27, r1
     592:	09 f4       	brne	.+2      	; 0x596 <main+0x194>
     594:	50 c0       	rjmp	.+160    	; 0x636 <main+0x234>
							uint8_t NumMessages = ((samples*4)/CHB_MAX_PAYLOAD);
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	9a 81       	ldd	r25, Y+2	; 0x02
     59a:	ab 81       	ldd	r26, Y+3	; 0x03
     59c:	bc 81       	ldd	r27, Y+4	; 0x04
     59e:	bc 01       	movw	r22, r24
     5a0:	cd 01       	movw	r24, r26
     5a2:	66 0f       	add	r22, r22
     5a4:	77 1f       	adc	r23, r23
     5a6:	88 1f       	adc	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	66 0f       	add	r22, r22
     5ac:	77 1f       	adc	r23, r23
     5ae:	88 1f       	adc	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	24 e6       	ldi	r18, 0x64	; 100
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
     5be:	02 2f       	mov	r16, r18
     5c0:	29 8f       	std	Y+25, r18	; 0x19
							if ((samples*4)%CHB_MAX_PAYLOAD > 0) NumMessages++;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	ab 81       	ldd	r26, Y+3	; 0x03
     5c8:	bc 81       	ldd	r27, Y+4	; 0x04
     5ca:	bc 01       	movw	r22, r24
     5cc:	cd 01       	movw	r24, r26
     5ce:	66 0f       	add	r22, r22
     5d0:	77 1f       	adc	r23, r23
     5d2:	88 1f       	adc	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	66 0f       	add	r22, r22
     5d8:	77 1f       	adc	r23, r23
     5da:	88 1f       	adc	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	24 e6       	ldi	r18, 0x64	; 100
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	a1 05       	cpc	r26, r1
     5f2:	b1 05       	cpc	r27, r1
     5f4:	11 f0       	breq	.+4      	; 0x5fa <main+0x1f8>
     5f6:	0f 5f       	subi	r16, 0xFF	; 255
     5f8:	09 8f       	std	Y+25, r16	; 0x19
							//send the number of messages the base station should expect after this message
							chb_write(0x0000,&NumMessages,1);  
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	be 01       	movw	r22, r28
     600:	67 5e       	subi	r22, 0xE7	; 231
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <chb_write>
							//send the data							
							chb_write(0x0000,FRAMReadBuffer,samples*4);					
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	ab 81       	ldd	r26, Y+3	; 0x03
     616:	bc 81       	ldd	r27, Y+4	; 0x04
     618:	9c 01       	movw	r18, r24
     61a:	ad 01       	movw	r20, r26
     61c:	22 0f       	add	r18, r18
     61e:	33 1f       	adc	r19, r19
     620:	44 1f       	adc	r20, r20
     622:	55 1f       	adc	r21, r21
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	44 1f       	adc	r20, r20
     62a:	55 1f       	adc	r21, r21
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	b1 01       	movw	r22, r2
     632:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <chb_write>
						}							
						DataAvailable = 0;
     636:	10 92 d5 21 	sts	0x21D5, r1
     63a:	10 cf       	rjmp	.-480    	; 0x45c <main+0x5a>

0000063c <synch>:
#include "E-000001-000009_firmware_rev_1_0.h"


char buff[8];
//creates a system for syncing ADC sampling with other motes through the base station every SynchPer seconds
void synch(int SynchPer){
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	8c 01       	movw	r16, r24
	moteID = 1;
     644:	c1 e0       	ldi	r28, 0x01	; 1
     646:	c0 93 c8 50 	sts	0x50C8, r28
	RadioMonitorMode = SYNCHED;		//initialize the RadioMonitorMode to synched 
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	80 93 5e 40 	sts	0x405E, r24
	chb_init();
     650:	0e 94 29 16 	call	0x2c52	; 0x2c52 <chb_init>
	chb_set_short_addr(moteID);
     654:	80 91 c8 50 	lds	r24, 0x50C8
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 4c 18 	call	0x3098	; 0x3098 <chb_set_short_addr>
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC1_OVF_gc;	//set overflow of lower 16 bits of the counter as event on channel 1
     65e:	88 ec       	ldi	r24, 0xC8	; 200
     660:	e0 e8       	ldi	r30, 0x80	; 128
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	81 83       	std	Z+1, r24	; 0x01
	TCD1.CTRLA = TC_CLKSEL_EVCH1_gc; //select event channel 1 as input clock to the upper 16 bits of the counter
     666:	e0 e4       	ldi	r30, 0x40	; 64
     668:	f9 e0       	ldi	r31, 0x09	; 9
     66a:	89 e0       	ldi	r24, 0x09	; 9
     66c:	80 83       	st	Z, r24
	TCD1.INTCTRLA = 0x02;	//enable timer overflow interrupt as high priority interrupt
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	86 83       	std	Z+6, r24	; 0x06
	TCD1.PER = SynchPer*500; //upper 16 bits of the 32-bit joint timer
     672:	24 ef       	ldi	r18, 0xF4	; 244
     674:	31 e0       	ldi	r19, 0x01	; 1
     676:	02 9f       	mul	r16, r18
     678:	c0 01       	movw	r24, r0
     67a:	03 9f       	mul	r16, r19
     67c:	90 0d       	add	r25, r0
     67e:	12 9f       	mul	r17, r18
     680:	90 0d       	add	r25, r0
     682:	11 24       	eor	r1, r1
     684:	86 a3       	lds	r24, 0x56
     686:	97 a3       	lds	r25, 0x57
		
	TCC1.PER = 64000;	//64000 cycles of cpu at 32MHz equals one 500 Hz interval
     688:	e0 e4       	ldi	r30, 0x40	; 64
     68a:	f8 e0       	ldi	r31, 0x08	; 8
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	9a ef       	ldi	r25, 0xFA	; 250
     690:	86 a3       	lds	r24, 0x56
     692:	97 a3       	lds	r25, 0x57
	TCC1.INTCTRLA = 0x01;  //enable timer overflow interrupt as medium priority interrupt
     694:	c6 83       	std	Z+6, r28	; 0x06
	TCC1.CTRLA = 0x01;  //start timer with clock precision of cpu clock (32MHz)
     696:	c0 83       	st	Z, r28
	PMIC.CTRL |= ENABLE_ALL_INTERRUPT_LEVELS;
     698:	e0 ea       	ldi	r30, 0xA0	; 160
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	82 81       	ldd	r24, Z+2	; 0x02
     69e:	87 60       	ori	r24, 0x07	; 7
     6a0:	82 83       	std	Z+2, r24	; 0x02
	sei(); //  Enable global interrupts
     6a2:	78 94       	sei
}
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <__vector_83>:

ISR(TCD1_OVF_vect, ISR_NOBLOCK) {
     6ac:	78 94       	sei
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	0b b6       	in	r0, 0x3b	; 59
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	28 97       	sbiw	r28, 0x08	; 8
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	de bf       	out	0x3e, r29	; 62
	TCC1.CTRLA = 0x00; //turn off the counter while synching
     6ea:	10 92 40 08 	sts	0x0840, r1
	TCD1.CTRLA = 0x00;
     6ee:	10 92 40 09 	sts	0x0940, r1
	//TCC1.CTRLFSET = 0x0C;	//reset the value of the counter to 0
	//TCD1.CTRLFSET = 0x0C;
	RadioMonitorMode = TIME_SYNCH;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	80 93 5e 40 	sts	0x405E, r24
	char message[8];
	strcpy(message,"reset");
     6f8:	de 01       	movw	r26, r28
     6fa:	11 96       	adiw	r26, 0x01	; 1
     6fc:	ed e0       	ldi	r30, 0x0D	; 13
     6fe:	f0 e2       	ldi	r31, 0x20	; 32
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	01 90       	ld	r0, Z+
     704:	0d 92       	st	X+, r0
     706:	81 50       	subi	r24, 0x01	; 1
     708:	e1 f7       	brne	.-8      	; 0x702 <__vector_83+0x56>
	itoa((int)(moteID),buff,10);
     70a:	0f ec       	ldi	r16, 0xCF	; 207
     70c:	10 e5       	ldi	r17, 0x50	; 80
     70e:	80 91 c8 50 	lds	r24, 0x50C8
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	b8 01       	movw	r22, r16
     716:	4a e0       	ldi	r20, 0x0A	; 10
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	0e 94 20 3b 	call	0x7640	; 0x7640 <itoa>
	strcat(message,buff);
     71e:	7e 01       	movw	r14, r28
     720:	08 94       	sec
     722:	e1 1c       	adc	r14, r1
     724:	f1 1c       	adc	r15, r1
     726:	c7 01       	movw	r24, r14
     728:	b8 01       	movw	r22, r16
     72a:	0e 94 07 3b 	call	0x760e	; 0x760e <strcat>
	ADC_Pause_Sampling();	//pause the ADC while synching
     72e:	0e 94 c1 07 	call	0xf82	; 0xf82 <ADC_Pause_Sampling>
	chb_write(0x0000,(unsigned char*)message,strlen(message));
     732:	f7 01       	movw	r30, r14
     734:	01 90       	ld	r0, Z+
     736:	00 20       	and	r0, r0
     738:	e9 f7       	brne	.-6      	; 0x734 <__vector_83+0x88>
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	ee 19       	sub	r30, r14
     73e:	ff 09       	sbc	r31, r15
     740:	9f 01       	movw	r18, r30
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	b7 01       	movw	r22, r14
     74c:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <chb_write>
}	
     750:	28 96       	adiw	r28, 0x08	; 8
     752:	cd bf       	out	0x3d, r28	; 61
     754:	de bf       	out	0x3e, r29	; 62
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	ff 91       	pop	r31
     75c:	ef 91       	pop	r30
     75e:	bf 91       	pop	r27
     760:	af 91       	pop	r26
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	7f 91       	pop	r23
     768:	6f 91       	pop	r22
     76a:	5f 91       	pop	r21
     76c:	4f 91       	pop	r20
     76e:	3f 91       	pop	r19
     770:	2f 91       	pop	r18
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	0f 90       	pop	r0
     77c:	0b be       	out	0x3b, r0	; 59
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <set_ampGain>:
 *	All selected op-amps will be set to the same gain value.
 *
 *	\param channel	channel for gain to be set
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 */
void set_ampGain(uint8_t channel, uint8_t gainExponent) {
     788:	cf 93       	push	r28
     78a:	c6 2f       	mov	r28, r22
	
	// set chip select.  note: AD8231 CS is select on low
	PortEx_OUTCLR((1 << channel), PS_BANKA);
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	a9 01       	movw	r20, r18
     792:	02 c0       	rjmp	.+4      	; 0x798 <set_ampGain+0x10>
     794:	44 0f       	add	r20, r20
     796:	55 1f       	adc	r21, r21
     798:	8a 95       	dec	r24
     79a:	e2 f7       	brpl	.-8      	; 0x794 <set_ampGain+0xc>
     79c:	ca 01       	movw	r24, r20
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <PortEx_OUTCLR>
	//setPortEx(~(1 << channel), PS_BANKA);
	// set gain
	// set bit A0
	if(gainExponent & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
     7a4:	c0 ff       	sbrs	r28, 0
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <set_ampGain+0x2a>
     7a8:	80 e4       	ldi	r24, 0x40	; 64
     7aa:	e0 e0       	ldi	r30, 0x00	; 0
     7ac:	f6 e0       	ldi	r31, 0x06	; 6
     7ae:	85 83       	std	Z+5, r24	; 0x05
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <set_ampGain+0x32>
	else {PORTA.OUTCLR = PIN6_bm;}
     7b2:	80 e4       	ldi	r24, 0x40	; 64
     7b4:	e0 e0       	ldi	r30, 0x00	; 0
     7b6:	f6 e0       	ldi	r31, 0x06	; 6
     7b8:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1
	if(gainExponent & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
     7ba:	c1 ff       	sbrs	r28, 1
     7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <set_ampGain+0x40>
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	e0 e2       	ldi	r30, 0x20	; 32
     7c2:	f6 e0       	ldi	r31, 0x06	; 6
     7c4:	85 83       	std	Z+5, r24	; 0x05
     7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <set_ampGain+0x48>
	else {PORTB.OUTCLR = PIN1_bm;}
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	e0 e2       	ldi	r30, 0x20	; 32
     7cc:	f6 e0       	ldi	r31, 0x06	; 6
     7ce:	86 83       	std	Z+6, r24	; 0x06
	// set bit A2
	if(gainExponent & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
     7d0:	c2 ff       	sbrs	r28, 2
     7d2:	05 c0       	rjmp	.+10     	; 0x7de <set_ampGain+0x56>
     7d4:	84 e0       	ldi	r24, 0x04	; 4
     7d6:	e0 e2       	ldi	r30, 0x20	; 32
     7d8:	f6 e0       	ldi	r31, 0x06	; 6
     7da:	85 83       	std	Z+5, r24	; 0x05
     7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <set_ampGain+0x5e>
	else {PORTB.OUTCLR = PIN2_bm;}
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	e0 e2       	ldi	r30, 0x20	; 32
     7e2:	f6 e0       	ldi	r31, 0x06	; 6
     7e4:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e6:	5a e0       	ldi	r21, 0x0A	; 10
     7e8:	5a 95       	dec	r21
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <set_ampGain+0x60>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <set_ampGain+0x66>

	_delay_us(1);

	PortEx_OUTSET(0xFF, PS_BANKA);	// write protect all AD8231 amps
     7ee:	8f ef       	ldi	r24, 0xFF	; 255
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
	//setPortEx(0xFF, PS_BANKA);

}
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <set_filter>:
 *	filterConfig[2]	Channel 3 and 7 mask
 *	filterConfig[3]	Channel 4 and 8 mask
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
*/
void set_filter(uint8_t filterConfig) {
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
	// hack to get ADC to work
	//filterConfig |= 0x0F;

	// boolean flags for upper/lower channels CS
	uint8_t lowerCS = filterConfig & 0x03; 
     7fe:	c8 2f       	mov	r28, r24
     800:	c3 70       	andi	r28, 0x03	; 3
	uint8_t upperCS = filterConfig & 0x0C;
     802:	d8 2f       	mov	r29, r24
     804:	dc 70       	andi	r29, 0x0C	; 12

	// update left and right channel status
	if (filterConfig & (BIT0_bm | BIT2_bm)) channelStatus = 
     806:	28 2f       	mov	r18, r24
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	a9 01       	movw	r20, r18
     80c:	45 70       	andi	r20, 0x05	; 5
     80e:	50 70       	andi	r21, 0x00	; 0
     810:	41 15       	cp	r20, r1
     812:	51 05       	cpc	r21, r1
     814:	49 f0       	breq	.+18     	; 0x828 <set_filter+0x2e>
     816:	90 91 81 50 	lds	r25, 0x5081
     81a:	48 2f       	mov	r20, r24
     81c:	42 95       	swap	r20
     81e:	4f 70       	andi	r20, 0x0F	; 15
     820:	90 7f       	andi	r25, 0xF0	; 240
     822:	94 2b       	or	r25, r20
     824:	90 93 81 50 	sts	0x5081, r25
		(0xF0 & channelStatus) | (filterConfig >> 4);  //right
	if (filterConfig & (BIT1_bm | BIT3_bm)) channelStatus =
     828:	2a 70       	andi	r18, 0x0A	; 10
     82a:	30 70       	andi	r19, 0x00	; 0
     82c:	21 15       	cp	r18, r1
     82e:	31 05       	cpc	r19, r1
     830:	39 f0       	breq	.+14     	; 0x840 <set_filter+0x46>
     832:	90 91 81 50 	lds	r25, 0x5081
     836:	80 7f       	andi	r24, 0xF0	; 240
     838:	9f 70       	andi	r25, 0x0F	; 15
     83a:	89 2b       	or	r24, r25
     83c:	80 93 81 50 	sts	0x5081, r24
		(0xF0 & filterConfig) | (0x0F & channelStatus); //left
		
	SPIInit(SPI_MODE_1_gc);
     840:	84 e0       	ldi	r24, 0x04	; 4
     842:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>

	
	SPIBuffer[0] = channelStatus;
     846:	80 91 81 50 	lds	r24, 0x5081
     84a:	80 93 65 50 	sts	0x5065, r24
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
     84e:	cc 23       	and	r28, r28
     850:	19 f0       	breq	.+6      	; 0x858 <set_filter+0x5e>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <lowerMuxCS>
	if (upperCS) upperMuxCS(TRUE);
     858:	dd 23       	and	r29, r29
     85a:	19 f0       	breq	.+6      	; 0x862 <set_filter+0x68>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	0e 94 56 1d 	call	0x3aac	; 0x3aac <upperMuxCS>

	SPICS(TRUE);
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>

	// Send all logic high to ensure that the SDO line on the chip is
	// left in high Z state after SPI transaction.
	// The t-1 SDI transaction is output on the SDO and the pin left in the configuration.
	// of the last bit
	SPIC.DATA = 0xFF;
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	e0 ec       	ldi	r30, 0xC0	; 192
     86c:	f8 e0       	ldi	r31, 0x08	; 8
     86e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     870:	82 81       	ldd	r24, Z+2	; 0x02
     872:	88 23       	and	r24, r24
     874:	ec f7       	brge	.-6      	; 0x870 <set_filter+0x76>
	SPIBuffer[12] = SPIC.DATA;
     876:	e0 ec       	ldi	r30, 0xC0	; 192
     878:	f8 e0       	ldi	r31, 0x08	; 8
     87a:	83 81       	ldd	r24, Z+3	; 0x03
     87c:	80 93 71 50 	sts	0x5071, r24

	nop();
     880:	00 00       	nop

	SPIC.DATA = SPIBuffer[0];
     882:	a1 e7       	ldi	r26, 0x71	; 113
     884:	b0 e5       	ldi	r27, 0x50	; 80
     886:	1c 97       	sbiw	r26, 0x0c	; 12
     888:	8c 91       	ld	r24, X
     88a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	88 23       	and	r24, r24
     890:	ec f7       	brge	.-6      	; 0x88c <set_filter+0x92>
	SPIBuffer[12] = SPIC.DATA;
     892:	e0 ec       	ldi	r30, 0xC0	; 192
     894:	f8 e0       	ldi	r31, 0x08	; 8
     896:	83 81       	ldd	r24, Z+3	; 0x03
     898:	80 93 71 50 	sts	0x5071, r24
	SPICS(FALSE);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>

	if (lowerCS) lowerMuxCS(FALSE);
     8a2:	cc 23       	and	r28, r28
     8a4:	19 f0       	breq	.+6      	; 0x8ac <set_filter+0xb2>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <lowerMuxCS>
	if (upperCS) upperMuxCS(FALSE);
     8ac:	dd 23       	and	r29, r29
     8ae:	19 f0       	breq	.+6      	; 0x8b6 <set_filter+0xbc>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 56 1d 	call	0x3aac	; 0x3aac <upperMuxCS>
	SPIDisable();
     8b6:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <ADCPower>:
	*avgV = (average * 1000 / 4095) - 50;
	*maxV = (max * 1000 / 4095) - 50;
	*minV = (min * 1000  / 4095) - 50;
}

void ADCPower(uint8_t on) {
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
	
	if (on) {
     8c8:	88 23       	and	r24, r24
     8ca:	09 f4       	brne	.+2      	; 0x8ce <ADCPower+0xe>
     8cc:	46 c0       	rjmp	.+140    	; 0x95a <ADCPower+0x9a>
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	16 e0       	ldi	r17, 0x06	; 6
     8d2:	8e ed       	ldi	r24, 0xDE	; 222
     8d4:	d8 01       	movw	r26, r16
     8d6:	11 96       	adiw	r26, 0x01	; 1
     8d8:	8c 93       	st	X, r24
		PORTB.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     8da:	c0 e2       	ldi	r28, 0x20	; 32
     8dc:	d6 e0       	ldi	r29, 0x06	; 6
     8de:	4e e0       	ldi	r20, 0x0E	; 14
     8e0:	49 83       	std	Y+1, r20	; 0x01
		PORTC.DIRSET = PIN0_bm | PIN1_bm;// VDCA and VDC-2 and MUX-SYNC1
     8e2:	e0 e4       	ldi	r30, 0x40	; 64
     8e4:	f6 e0       	ldi	r31, 0x06	; 6
     8e6:	63 e0       	ldi	r22, 0x03	; 3
     8e8:	61 83       	std	Z+1, r22	; 0x01
		PORTE.DIRSET = PIN4_bm; // MUX-SYNC2
     8ea:	80 e8       	ldi	r24, 0x80	; 128
     8ec:	96 e0       	ldi	r25, 0x06	; 6
     8ee:	50 e1       	ldi	r21, 0x10	; 16
     8f0:	dc 01       	movw	r26, r24
     8f2:	11 96       	adiw	r26, 0x01	; 1
     8f4:	5c 93       	st	X, r21
		PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; // DAC LDAC and CS
     8f6:	20 ea       	ldi	r18, 0xA0	; 160
     8f8:	36 e0       	ldi	r19, 0x06	; 6
     8fa:	d9 01       	movw	r26, r18
     8fc:	11 96       	adiw	r26, 0x01	; 1
     8fe:	4c 93       	st	X, r20

		// high signal to write protect
		PORTA.OUTSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm;; // portEx-CS
     900:	7e e9       	ldi	r23, 0x9E	; 158
     902:	d8 01       	movw	r26, r16
     904:	15 96       	adiw	r26, 0x05	; 5
     906:	7c 93       	st	X, r23
		PORTB.OUTSET = PIN3_bm; // FRAM-CS
     908:	78 e0       	ldi	r23, 0x08	; 8
     90a:	7d 83       	std	Y+5, r23	; 0x05
		PORTC.OUTSET = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     90c:	65 83       	std	Z+5, r22	; 0x05
		PORTE.OUTSET = PIN4_bm; // MUX-SYNC2
     90e:	ec 01       	movw	r28, r24
     910:	5d 83       	std	Y+5, r21	; 0x05
		PORTF.OUTSET = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     912:	d9 01       	movw	r26, r18
     914:	15 96       	adiw	r26, 0x05	; 5
     916:	4c 93       	st	X, r20
		channelStatus = 0x00; // POR to zeros
     918:	10 92 81 50 	sts	0x5081, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	93 ec       	ldi	r25, 0xC3	; 195
     920:	a9 e0       	ldi	r26, 0x09	; 9
     922:	81 50       	subi	r24, 0x01	; 1
     924:	90 40       	sbci	r25, 0x00	; 0
     926:	a0 40       	sbci	r26, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <ADCPower+0x62>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <ADCPower+0x6c>
     92c:	00 00       	nop
		_delay_ms(100);

		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     92e:	80 e4       	ldi	r24, 0x40	; 64
     930:	82 83       	std	Z+2, r24	; 0x02
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     932:	10 92 82 50 	sts	0x5082, r1
     936:	10 92 ce 50 	sts	0x50CE, r1
     93a:	10 92 d6 23 	sts	0x23D6, r1
     93e:	10 92 7a 50 	sts	0x507A, r1
		PortEx_DIRSET(0xFF, PS_BANKA);
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <PortEx_DIRSET>
		PortEx_OUTSET(0xFF, PS_BANKA);  //write protect IN-AMP 1 thru 8
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
		//setPortEx(0xFF, PS_BANKA);
		set_filter(0xFF);  // set filters initially to ensure data out pulled high
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
     958:	32 c0       	rjmp	.+100    	; 0x9be <ADCPower+0xfe>

	} else {
		// low signal for low power
		PORTA.OUTCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and A0
     95a:	00 e0       	ldi	r16, 0x00	; 0
     95c:	16 e0       	ldi	r17, 0x06	; 6
     95e:	7e ed       	ldi	r23, 0xDE	; 222
     960:	d8 01       	movw	r26, r16
     962:	16 96       	adiw	r26, 0x06	; 6
     964:	7c 93       	st	X, r23
		PORTB.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     966:	a0 e2       	ldi	r26, 0x20	; 32
     968:	b6 e0       	ldi	r27, 0x06	; 6
     96a:	4e e0       	ldi	r20, 0x0E	; 14
     96c:	16 96       	adiw	r26, 0x06	; 6
     96e:	4c 93       	st	X, r20
     970:	16 97       	sbiw	r26, 0x06	; 6
		PORTC.OUTCLR = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     972:	20 e4       	ldi	r18, 0x40	; 64
     974:	36 e0       	ldi	r19, 0x06	; 6
     976:	63 e0       	ldi	r22, 0x03	; 3
     978:	e9 01       	movw	r28, r18
     97a:	6e 83       	std	Y+6, r22	; 0x06
		PORTE.OUTCLR = PIN4_bm; // MUX-SYNC2
     97c:	c0 e8       	ldi	r28, 0x80	; 128
     97e:	d6 e0       	ldi	r29, 0x06	; 6
     980:	50 e1       	ldi	r21, 0x10	; 16
     982:	5e 83       	std	Y+6, r21	; 0x06
		PORTF.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     984:	80 ea       	ldi	r24, 0xA0	; 160
     986:	96 e0       	ldi	r25, 0x06	; 6
     988:	fc 01       	movw	r30, r24
     98a:	46 83       	std	Z+6, r20	; 0x06


		PORTA.DIRCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm | PIN6_bm;
     98c:	f8 01       	movw	r30, r16
     98e:	72 83       	std	Z+2, r23	; 0x02
		PORTB.DIRCLR = PIN1_bm | PIN2_bm| PIN3_bm;
     990:	12 96       	adiw	r26, 0x02	; 2
     992:	4c 93       	st	X, r20
		PORTC.DIRCLR = PIN0_bm | PIN1_bm;
     994:	d9 01       	movw	r26, r18
     996:	12 96       	adiw	r26, 0x02	; 2
     998:	6c 93       	st	X, r22
     99a:	12 97       	sbiw	r26, 0x02	; 2
		PORTE.DIRCLR = PIN4_bm;
     99c:	5a 83       	std	Y+2, r21	; 0x02
		PORTF.DIRCLR = PIN1_bm | PIN2_bm | PIN3_bm;
     99e:	ec 01       	movw	r28, r24
     9a0:	4a 83       	std	Y+2, r20	; 0x02
		
		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	12 96       	adiw	r26, 0x02	; 2
     9a6:	8c 93       	st	X, r24
     9a8:	12 97       	sbiw	r26, 0x02	; 2
		
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     9aa:	10 92 82 50 	sts	0x5082, r1
     9ae:	10 92 ce 50 	sts	0x50CE, r1
     9b2:	10 92 d6 23 	sts	0x23D6, r1
     9b6:	10 92 7a 50 	sts	0x507A, r1
		channelStatus = 0x00;
     9ba:	10 92 81 50 	sts	0x5081, r1
		
	}
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <CO_collectBatt>:
	*avgV = (average * 1000 / 4095) - 50;
	*maxV = (max * 1000 / 4095) - 50;
	*minV = (min * 1000  / 4095) - 50;
}

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
     9c8:	4f 92       	push	r4
     9ca:	5f 92       	push	r5
     9cc:	6f 92       	push	r6
     9ce:	7f 92       	push	r7
     9d0:	8f 92       	push	r8
     9d2:	9f 92       	push	r9
     9d4:	af 92       	push	r10
     9d6:	bf 92       	push	r11
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	2b 97       	sbiw	r28, 0x0b	; 11
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	8e 83       	std	Y+6, r24	; 0x06
     9f0:	9f 83       	std	Y+7, r25	; 0x07
     9f2:	68 87       	std	Y+8, r22	; 0x08
     9f4:	79 87       	std	Y+9, r23	; 0x09
     9f6:	4a 87       	std	Y+10, r20	; 0x0a
     9f8:	5b 87       	std	Y+11, r21	; 0x0b
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	PortEx_DIRSET(BIT2_bm, PS_BANKB);
     a00:	84 e0       	ldi	r24, 0x04	; 4
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <PortEx_DIRSET>
	PortEx_OUTSET(BIT2_bm, PS_BANKB); // activate PIO24 (VBATT)
     a08:	84 e0       	ldi	r24, 0x04	; 4
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	33 ec       	ldi	r19, 0xC3	; 195
     a14:	49 e0       	ldi	r20, 0x09	; 9
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	30 40       	sbci	r19, 0x00	; 0
     a1a:	40 40       	sbci	r20, 0x00	; 0
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <CO_collectBatt+0x4e>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <CO_collectBatt+0x58>
     a20:	00 00       	nop
	_delay_ms(100);
	//setPortEx(BIT2_bm, PS_BANKB);
		
	/* Move stored calibration values to ADCB. */
	ADC_CalibrationValues_Load(&ADCB);
     a22:	80 e4       	ldi	r24, 0x40	; 64
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
     a2a:	00 e4       	ldi	r16, 0x40	; 64
     a2c:	12 e0       	ldi	r17, 0x02	; 2
     a2e:	d8 01       	movw	r26, r16
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	8c 91       	ld	r24, X
     a34:	11 97       	sbiw	r26, 0x01	; 1
     a36:	89 7e       	andi	r24, 0xE9	; 233
     a38:	11 96       	adiw	r26, 0x01	; 1
     a3a:	8c 93       	st	X, r24
     a3c:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV32_gc);
     a3e:	14 96       	adiw	r26, 0x04	; 4
     a40:	8c 91       	ld	r24, X
     a42:	14 97       	sbiw	r26, 0x04	; 4
     a44:	88 7f       	andi	r24, 0xF8	; 248
     a46:	83 60       	ori	r24, 0x03	; 3
     a48:	14 96       	adiw	r26, 0x04	; 4
     a4a:	8c 93       	st	X, r24
     a4c:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCB to be 1.0 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_INT1V_gc); 
     a4e:	12 96       	adiw	r26, 0x02	; 2
     a50:	8c 91       	ld	r24, X
     a52:	12 97       	sbiw	r26, 0x02	; 2
     a54:	8f 7c       	andi	r24, 0xCF	; 207
     a56:	12 96       	adiw	r26, 0x02	; 2
     a58:	8c 93       	st	X, r24
     a5a:	12 97       	sbiw	r26, 0x02	; 2

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
     a5c:	0f 2e       	mov	r0, r31
     a5e:	f0 e6       	ldi	r31, 0x60	; 96
     a60:	ef 2e       	mov	r14, r31
     a62:	f2 e0       	ldi	r31, 0x02	; 2
     a64:	ff 2e       	mov	r15, r31
     a66:	f0 2d       	mov	r31, r0
     a68:	f7 01       	movw	r30, r14
     a6a:	80 81       	ld	r24, Z
     a6c:	80 7e       	andi	r24, 0xE0	; 224
     a6e:	81 60       	ori	r24, 0x01	; 1
     a70:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	// Get offset value for ADCB.
   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
     a72:	89 e0       	ldi	r24, 0x09	; 9
     a74:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
     a76:	8c 91       	ld	r24, X
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	8c 93       	st	X, r24
	// Wait until common mode voltage is stable. Default clk is 16MHz
	ADC_Wait_32MHz(&ADCB);
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	0e 94 91 15 	call	0x2b22	; 0x2b22 <ADC_Wait_32MHz>
	offset = ADC_Offset_Get_Unsigned(&ADCB, &ADCB.CH0, false);
     a84:	80 e4       	ldi	r24, 0x40	; 64
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	60 e6       	ldi	r22, 0x60	; 96
     a8a:	72 e0       	ldi	r23, 0x02	; 2
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ADC_Offset_Get_Unsigned>
     a92:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCB);
     a94:	d8 01       	movw	r26, r16
     a96:	8c 91       	ld	r24, X
     a98:	8e 7f       	andi	r24, 0xFE	; 254
     a9a:	8c 93       	st	X, r24
    
	/* Set input to the channels in ADC B */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
     a9c:	f7 01       	movw	r30, r14
     a9e:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0_gc);
     aa0:	13 96       	adiw	r26, 0x03	; 3
     aa2:	8c 91       	ld	r24, X
     aa4:	13 97       	sbiw	r26, 0x03	; 3
     aa6:	8f 73       	andi	r24, 0x3F	; 63
     aa8:	13 96       	adiw	r26, 0x03	; 3
     aaa:	8c 93       	st	X, r24
     aac:	13 97       	sbiw	r26, 0x03	; 3

	/* Enable ADC .*/
	ADC_Enable(&ADCB);
     aae:	8c 91       	ld	r24, X
     ab0:	81 60       	ori	r24, 0x01	; 1
     ab2:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	0e 94 91 15 	call	0x2b22	; 0x2b22 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);
     abc:	d8 01       	movw	r26, r16
     abe:	11 96       	adiw	r26, 0x01	; 1
     ac0:	8c 91       	ld	r24, X
     ac2:	11 97       	sbiw	r26, 0x01	; 1
     ac4:	88 60       	ori	r24, 0x08	; 8
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	8c 93       	st	X, r24
     aca:	ee 24       	eor	r14, r14
     acc:	ff 24       	eor	r15, r15
     ace:	68 94       	set
     ad0:	f2 f8       	bld	r15, 2
	
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
     ad2:	44 24       	eor	r4, r4
     ad4:	55 24       	eor	r5, r5
     ad6:	32 01       	movw	r6, r4
void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e1       	ldi	r19, 0x10	; 16
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	2a 83       	std	Y+2, r18	; 0x02
     ae2:	3b 83       	std	Y+3, r19	; 0x03
     ae4:	4c 83       	std	Y+4, r20	; 0x04
     ae6:	5d 83       	std	Y+5, r21	; 0x05
	*minV = (min * 1000  / 4095) - 50;
}

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
     ae8:	88 24       	eor	r8, r8
     aea:	99 24       	eor	r9, r9
     aec:	54 01       	movw	r10, r8
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCB channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCB.CH0));
     aee:	00 e6       	ldi	r16, 0x60	; 96
     af0:	12 e0       	ldi	r17, 0x02	; 2
     af2:	d8 01       	movw	r26, r16
     af4:	13 96       	adiw	r26, 0x03	; 3
     af6:	8c 91       	ld	r24, X
     af8:	13 97       	sbiw	r26, 0x03	; 3
     afa:	80 ff       	sbrs	r24, 0
     afc:	fa cf       	rjmp	.-12     	; 0xaf2 <CO_collectBatt+0x12a>
		tempResultB = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, offset);
     afe:	69 81       	ldd	r22, Y+1	; 0x01
     b00:	c8 01       	movw	r24, r16
     b02:	0e 94 6d 15 	call	0x2ada	; 0x2ada <ADC_ResultCh_GetWord_Signed>
		sum+=tempResultB;
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	88 0e       	add	r8, r24
     b0c:	99 1e       	adc	r9, r25
     b0e:	aa 1e       	adc	r10, r26
     b10:	bb 1e       	adc	r11, r27
     b12:	48 16       	cp	r4, r24
     b14:	59 06       	cpc	r5, r25
     b16:	6a 06       	cpc	r6, r26
     b18:	7b 06       	cpc	r7, r27
     b1a:	10 f4       	brcc	.+4      	; 0xb20 <CO_collectBatt+0x158>
     b1c:	2c 01       	movw	r4, r24
     b1e:	3d 01       	movw	r6, r26
     b20:	2a 81       	ldd	r18, Y+2	; 0x02
     b22:	3b 81       	ldd	r19, Y+3	; 0x03
     b24:	4c 81       	ldd	r20, Y+4	; 0x04
     b26:	5d 81       	ldd	r21, Y+5	; 0x05
     b28:	82 17       	cp	r24, r18
     b2a:	93 07       	cpc	r25, r19
     b2c:	a4 07       	cpc	r26, r20
     b2e:	b5 07       	cpc	r27, r21
     b30:	20 f4       	brcc	.+8      	; 0xb3a <CO_collectBatt+0x172>
     b32:	8a 83       	std	Y+2, r24	; 0x02
     b34:	9b 83       	std	Y+3, r25	; 0x03
     b36:	ac 83       	std	Y+4, r26	; 0x04
     b38:	bd 83       	std	Y+5, r27	; 0x05
     b3a:	08 94       	sec
     b3c:	e1 08       	sbc	r14, r1
     b3e:	f1 08       	sbc	r15, r1

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);

	/* Store samples.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
     b40:	e1 14       	cp	r14, r1
     b42:	f1 04       	cpc	r15, r1
     b44:	b1 f6       	brne	.-84     	; 0xaf2 <CO_collectBatt+0x12a>
		if (min > tempResultB) { min = tempResultB;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
     b46:	e0 e4       	ldi	r30, 0x40	; 64
     b48:	f2 e0       	ldi	r31, 0x02	; 2
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	87 7f       	andi	r24, 0xF7	; 247
     b4e:	81 83       	std	Z+1, r24	; 0x01
	ADC_Disable(&ADCB);
     b50:	80 81       	ld	r24, Z
     b52:	8e 7f       	andi	r24, 0xFE	; 254
     b54:	80 83       	st	Z, r24

	average = sum / NUM_SAMPLES;
	
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <PortEx_DIRCLR>
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
	ADC_Disable(&ADCB);

	average = sum / NUM_SAMPLES;
     b64:	c5 01       	movw	r24, r10
     b66:	b4 01       	movw	r22, r8
     b68:	05 2e       	mov	r0, r21
     b6a:	5a e0       	ldi	r21, 0x0A	; 10
     b6c:	96 95       	lsr	r25
     b6e:	87 95       	ror	r24
     b70:	77 95       	ror	r23
     b72:	67 95       	ror	r22
     b74:	5a 95       	dec	r21
     b76:	d1 f7       	brne	.-12     	; 0xb6c <CO_collectBatt+0x1a4>
     b78:	50 2d       	mov	r21, r0
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
     b7a:	28 ee       	ldi	r18, 0xE8	; 232
     b7c:	33 e0       	ldi	r19, 0x03	; 3
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
     b86:	0f 2e       	mov	r0, r31
     b88:	ff ef       	ldi	r31, 0xFF	; 255
     b8a:	8f 2e       	mov	r8, r31
     b8c:	ff e0       	ldi	r31, 0x0F	; 15
     b8e:	9f 2e       	mov	r9, r31
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	af 2e       	mov	r10, r31
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	bf 2e       	mov	r11, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	a5 01       	movw	r20, r10
     b9c:	94 01       	movw	r18, r8
     b9e:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
     ba2:	c9 01       	movw	r24, r18
     ba4:	c2 97       	sbiw	r24, 0x32	; 50
     ba6:	ae 81       	ldd	r26, Y+6	; 0x06
     ba8:	bf 81       	ldd	r27, Y+7	; 0x07
     baa:	8d 93       	st	X+, r24
     bac:	9c 93       	st	X, r25
	*maxV = (max * 1000 / 4095) - 50;
     bae:	c3 01       	movw	r24, r6
     bb0:	b2 01       	movw	r22, r4
     bb2:	28 ee       	ldi	r18, 0xE8	; 232
     bb4:	33 e0       	ldi	r19, 0x03	; 3
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
     bbe:	a5 01       	movw	r20, r10
     bc0:	94 01       	movw	r18, r8
     bc2:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
     bc6:	c9 01       	movw	r24, r18
     bc8:	c2 97       	sbiw	r24, 0x32	; 50
     bca:	ea 85       	ldd	r30, Y+10	; 0x0a
     bcc:	fb 85       	ldd	r31, Y+11	; 0x0b
     bce:	80 83       	st	Z, r24
     bd0:	91 83       	std	Z+1, r25	; 0x01
	*minV = (min * 1000  / 4095) - 50;
     bd2:	6a 81       	ldd	r22, Y+2	; 0x02
     bd4:	7b 81       	ldd	r23, Y+3	; 0x03
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	28 ee       	ldi	r18, 0xE8	; 232
     bdc:	33 e0       	ldi	r19, 0x03	; 3
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
     be6:	a5 01       	movw	r20, r10
     be8:	94 01       	movw	r18, r8
     bea:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
     bee:	22 53       	subi	r18, 0x32	; 50
     bf0:	30 40       	sbci	r19, 0x00	; 0
     bf2:	a8 85       	ldd	r26, Y+8	; 0x08
     bf4:	b9 85       	ldd	r27, Y+9	; 0x09
     bf6:	2d 93       	st	X+, r18
     bf8:	3c 93       	st	X, r19
     bfa:	11 97       	sbiw	r26, 0x01	; 1
}
     bfc:	2b 96       	adiw	r28, 0x0b	; 11
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	7f 90       	pop	r7
     c18:	6f 90       	pop	r6
     c1a:	5f 90       	pop	r5
     c1c:	4f 90       	pop	r4
     c1e:	08 95       	ret

00000c20 <CO_collectTemp>:

volatile uint8_t checksumADC[3] = {0};  // checksum for FRAM test
volatile uint8_t checksumFRAM[3] = {0};  // checksum for FRAM test


void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
     c20:	4f 92       	push	r4
     c22:	5f 92       	push	r5
     c24:	6f 92       	push	r6
     c26:	7f 92       	push	r7
     c28:	8f 92       	push	r8
     c2a:	9f 92       	push	r9
     c2c:	af 92       	push	r10
     c2e:	bf 92       	push	r11
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	2b 97       	sbiw	r28, 0x0b	; 11
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	8e 83       	std	Y+6, r24	; 0x06
     c48:	9f 83       	std	Y+7, r25	; 0x07
     c4a:	68 87       	std	Y+8, r22	; 0x08
     c4c:	79 87       	std	Y+9, r23	; 0x09
     c4e:	4a 87       	std	Y+10, r20	; 0x0a
     c50:	5b 87       	std	Y+11, r21	; 0x0b
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>

	/* Move stored calibration values to ADCA. */
	ADC_CalibrationValues_Load(&ADCA);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
     c60:	00 e0       	ldi	r16, 0x00	; 0
     c62:	12 e0       	ldi	r17, 0x02	; 2
     c64:	d8 01       	movw	r26, r16
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	8c 91       	ld	r24, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	89 7e       	andi	r24, 0xE9	; 233
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	8c 93       	st	X, r24
     c72:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV32_gc);
     c74:	14 96       	adiw	r26, 0x04	; 4
     c76:	8c 91       	ld	r24, X
     c78:	14 97       	sbiw	r26, 0x04	; 4
     c7a:	88 7f       	andi	r24, 0xF8	; 248
     c7c:	83 60       	ori	r24, 0x03	; 3
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8c 93       	st	X, r24
     c82:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCA to be 1.0 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_INT1V_gc); 
     c84:	12 96       	adiw	r26, 0x02	; 2
     c86:	8c 91       	ld	r24, X
     c88:	12 97       	sbiw	r26, 0x02	; 2
     c8a:	8f 7c       	andi	r24, 0xCF	; 207
     c8c:	12 96       	adiw	r26, 0x02	; 2
     c8e:	8c 93       	st	X, r24
     c90:	12 97       	sbiw	r26, 0x02	; 2

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     c92:	0f 2e       	mov	r0, r31
     c94:	f0 e2       	ldi	r31, 0x20	; 32
     c96:	ef 2e       	mov	r14, r31
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	ff 2e       	mov	r15, r31
     c9c:	f0 2d       	mov	r31, r0
     c9e:	f7 01       	movw	r30, r14
     ca0:	80 81       	ld	r24, Z
     ca2:	80 7e       	andi	r24, 0xE0	; 224
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	/* Get offset value for ADCA. */
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
     ca8:	89 e0       	ldi	r24, 0x09	; 9
     caa:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
     cac:	8c 91       	ld	r24, X
     cae:	81 60       	ori	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 91 15 	call	0x2b22	; 0x2b22 <ADC_Wait_32MHz>
 	offset = ADC_Offset_Get_Unsigned(&ADCA, &ADCA.CH0, false);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	60 e2       	ldi	r22, 0x20	; 32
     cc0:	72 e0       	ldi	r23, 0x02	; 2
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ADC_Offset_Get_Unsigned>
     cc8:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCA);
     cca:	d8 01       	movw	r26, r16
     ccc:	8c 91       	ld	r24, X
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	8c 93       	st	X, r24
    
	/* Set input to the channels in ADCA */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
     cd2:	f7 01       	movw	r30, r14
     cd4:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
     cd6:	13 96       	adiw	r26, 0x03	; 3
     cd8:	8c 91       	ld	r24, X
     cda:	13 97       	sbiw	r26, 0x03	; 3
     cdc:	8f 73       	andi	r24, 0x3F	; 63
     cde:	13 96       	adiw	r26, 0x03	; 3
     ce0:	8c 93       	st	X, r24
     ce2:	13 97       	sbiw	r26, 0x03	; 3

	/* Enable ADC .*/
	ADC_Enable(&ADCA);
     ce4:	8c 91       	ld	r24, X
     ce6:	81 60       	ori	r24, 0x01	; 1
     ce8:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	0e 94 91 15 	call	0x2b22	; 0x2b22 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
     cf2:	d8 01       	movw	r26, r16
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	8c 91       	ld	r24, X
     cf8:	11 97       	sbiw	r26, 0x01	; 1
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	11 96       	adiw	r26, 0x01	; 1
     cfe:	8c 93       	st	X, r24
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	68 94       	set
     d06:	f2 f8       	bld	r15, 2
	
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
     d08:	44 24       	eor	r4, r4
     d0a:	55 24       	eor	r5, r5
     d0c:	32 01       	movw	r6, r4
void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e1       	ldi	r19, 0x10	; 16
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	2a 83       	std	Y+2, r18	; 0x02
     d18:	3b 83       	std	Y+3, r19	; 0x03
     d1a:	4c 83       	std	Y+4, r20	; 0x04
     d1c:	5d 83       	std	Y+5, r21	; 0x05
volatile uint8_t checksumFRAM[3] = {0};  // checksum for FRAM test


void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
     d1e:	88 24       	eor	r8, r8
     d20:	99 24       	eor	r9, r9
     d22:	54 01       	movw	r10, r8
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
     d24:	00 e2       	ldi	r16, 0x20	; 32
     d26:	12 e0       	ldi	r17, 0x02	; 2
     d28:	d8 01       	movw	r26, r16
     d2a:	13 96       	adiw	r26, 0x03	; 3
     d2c:	8c 91       	ld	r24, X
     d2e:	13 97       	sbiw	r26, 0x03	; 3
     d30:	80 ff       	sbrs	r24, 0
     d32:	fa cf       	rjmp	.-12     	; 0xd28 <CO_collectTemp+0x108>
		tempResult = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
     d34:	69 81       	ldd	r22, Y+1	; 0x01
     d36:	c8 01       	movw	r24, r16
     d38:	0e 94 6d 15 	call	0x2ada	; 0x2ada <ADC_ResultCh_GetWord_Signed>
		sum+=tempResult;
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	88 0e       	add	r8, r24
     d42:	99 1e       	adc	r9, r25
     d44:	aa 1e       	adc	r10, r26
     d46:	bb 1e       	adc	r11, r27
     d48:	48 16       	cp	r4, r24
     d4a:	59 06       	cpc	r5, r25
     d4c:	6a 06       	cpc	r6, r26
     d4e:	7b 06       	cpc	r7, r27
     d50:	10 f4       	brcc	.+4      	; 0xd56 <CO_collectTemp+0x136>
     d52:	2c 01       	movw	r4, r24
     d54:	3d 01       	movw	r6, r26
     d56:	2a 81       	ldd	r18, Y+2	; 0x02
     d58:	3b 81       	ldd	r19, Y+3	; 0x03
     d5a:	4c 81       	ldd	r20, Y+4	; 0x04
     d5c:	5d 81       	ldd	r21, Y+5	; 0x05
     d5e:	82 17       	cp	r24, r18
     d60:	93 07       	cpc	r25, r19
     d62:	a4 07       	cpc	r26, r20
     d64:	b5 07       	cpc	r27, r21
     d66:	20 f4       	brcc	.+8      	; 0xd70 <CO_collectTemp+0x150>
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	9b 83       	std	Y+3, r25	; 0x03
     d6c:	ac 83       	std	Y+4, r26	; 0x04
     d6e:	bd 83       	std	Y+5, r27	; 0x05
     d70:	08 94       	sec
     d72:	e1 08       	sbc	r14, r1
     d74:	f1 08       	sbc	r15, r1

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);

	/* Sample onboard ADC.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
     d76:	e1 14       	cp	r14, r1
     d78:	f1 04       	cpc	r15, r1
     d7a:	b1 f6       	brne	.-84     	; 0xd28 <CO_collectTemp+0x108>
		if (min > tempResult) { min = tempResult;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCA);
     d7c:	e0 e0       	ldi	r30, 0x00	; 0
     d7e:	f2 e0       	ldi	r31, 0x02	; 2
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	81 83       	std	Z+1, r24	; 0x01
	ADC_Pipeline_Flush(&ADCA);
     d86:	80 81       	ld	r24, Z
     d88:	82 60       	ori	r24, 0x02	; 2
     d8a:	80 83       	st	Z, r24
	ADC_Disable(&ADCA);
     d8c:	80 81       	ld	r24, Z
     d8e:	8e 7f       	andi	r24, 0xFE	; 254
     d90:	80 83       	st	Z, r24

	ADCPower(FALSE);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>

	average = sum / NUM_SAMPLES;
     d98:	c5 01       	movw	r24, r10
     d9a:	b4 01       	movw	r22, r8
     d9c:	05 2e       	mov	r0, r21
     d9e:	5a e0       	ldi	r21, 0x0A	; 10
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	77 95       	ror	r23
     da6:	67 95       	ror	r22
     da8:	5a 95       	dec	r21
     daa:	d1 f7       	brne	.-12     	; 0xda0 <CO_collectTemp+0x180>
     dac:	50 2d       	mov	r21, r0

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
     dae:	28 ee       	ldi	r18, 0xE8	; 232
     db0:	33 e0       	ldi	r19, 0x03	; 3
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
     dba:	0f 2e       	mov	r0, r31
     dbc:	ff ef       	ldi	r31, 0xFF	; 255
     dbe:	8f 2e       	mov	r8, r31
     dc0:	ff e0       	ldi	r31, 0x0F	; 15
     dc2:	9f 2e       	mov	r9, r31
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	af 2e       	mov	r10, r31
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	bf 2e       	mov	r11, r31
     dcc:	f0 2d       	mov	r31, r0
     dce:	a5 01       	movw	r20, r10
     dd0:	94 01       	movw	r18, r8
     dd2:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
     dd6:	c9 01       	movw	r24, r18
     dd8:	c2 97       	sbiw	r24, 0x32	; 50
     dda:	ae 81       	ldd	r26, Y+6	; 0x06
     ddc:	bf 81       	ldd	r27, Y+7	; 0x07
     dde:	8d 93       	st	X+, r24
     de0:	9c 93       	st	X, r25
	*maxV = (max * 1000 / 4095) - 50;
     de2:	c3 01       	movw	r24, r6
     de4:	b2 01       	movw	r22, r4
     de6:	28 ee       	ldi	r18, 0xE8	; 232
     de8:	33 e0       	ldi	r19, 0x03	; 3
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
     df2:	a5 01       	movw	r20, r10
     df4:	94 01       	movw	r18, r8
     df6:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
     dfa:	c9 01       	movw	r24, r18
     dfc:	c2 97       	sbiw	r24, 0x32	; 50
     dfe:	ea 85       	ldd	r30, Y+10	; 0x0a
     e00:	fb 85       	ldd	r31, Y+11	; 0x0b
     e02:	80 83       	st	Z, r24
     e04:	91 83       	std	Z+1, r25	; 0x01
	*minV = (min * 1000  / 4095) - 50;
     e06:	6a 81       	ldd	r22, Y+2	; 0x02
     e08:	7b 81       	ldd	r23, Y+3	; 0x03
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	9d 81       	ldd	r25, Y+5	; 0x05
     e0e:	28 ee       	ldi	r18, 0xE8	; 232
     e10:	33 e0       	ldi	r19, 0x03	; 3
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
     e1a:	a5 01       	movw	r20, r10
     e1c:	94 01       	movw	r18, r8
     e1e:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
     e22:	22 53       	subi	r18, 0x32	; 50
     e24:	30 40       	sbci	r19, 0x00	; 0
     e26:	a8 85       	ldd	r26, Y+8	; 0x08
     e28:	b9 85       	ldd	r27, Y+9	; 0x09
     e2a:	2d 93       	st	X+, r18
     e2c:	3c 93       	st	X, r19
     e2e:	11 97       	sbiw	r26, 0x01	; 1
}
     e30:	2b 96       	adiw	r28, 0x0b	; 11
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	8f 90       	pop	r8
     e4a:	7f 90       	pop	r7
     e4c:	6f 90       	pop	r6
     e4e:	5f 90       	pop	r5
     e50:	4f 90       	pop	r4
     e52:	08 95       	ret

00000e54 <enableADCMUX>:
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	
	if(on) {
     e54:	88 23       	and	r24, r24
     e56:	31 f0       	breq	.+12     	; 0xe64 <enableADCMUX+0x10>
		PORTA.DIRSET = PIN5_bm;
     e58:	e0 e0       	ldi	r30, 0x00	; 0
     e5a:	f6 e0       	ldi	r31, 0x06	; 6
     e5c:	80 e2       	ldi	r24, 0x20	; 32
     e5e:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
     e60:	85 83       	std	Z+5, r24	; 0x05
     e62:	08 95       	ret
	} else {
		PORTA.OUTCLR = PIN5_bm;
     e64:	e0 e0       	ldi	r30, 0x00	; 0
     e66:	f6 e0       	ldi	r31, 0x06	; 6
     e68:	80 e2       	ldi	r24, 0x20	; 32
     e6a:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
     e6c:	82 83       	std	Z+2, r24	; 0x02
     e6e:	08 95       	ret

00000e70 <__vector_20>:
	//enableADCMUX(FALSE);
	//ADCPower(FALSE);
}

//triggers when specified number of samples has been collected by ADC
ISR(TCC1_OVF_vect){
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	0b b6       	in	r0, 0x3b	; 59
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31

	// turn off ADC timer(s)
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     e96:	e0 e4       	ldi	r30, 0x40	; 64
     e98:	fa e0       	ldi	r31, 0x0A	; 10
     e9a:	80 81       	ld	r24, Z
     e9c:	80 7f       	andi	r24, 0xF0	; 240
     e9e:	80 83       	st	Z, r24
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     ea0:	a0 e0       	ldi	r26, 0x00	; 0
     ea2:	b8 e0       	ldi	r27, 0x08	; 8
     ea4:	8c 91       	ld	r24, X
     ea6:	80 7f       	andi	r24, 0xF0	; 240
     ea8:	8c 93       	st	X, r24
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     eaa:	a0 e0       	ldi	r26, 0x00	; 0
     eac:	b9 e0       	ldi	r27, 0x09	; 9
     eae:	8c 91       	ld	r24, X
     eb0:	80 7f       	andi	r24, 0xF0	; 240
     eb2:	8c 93       	st	X, r24
	TCC1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     eb4:	80 81       	ld	r24, Z
     eb6:	80 7f       	andi	r24, 0xF0	; 240
     eb8:	80 93 40 08 	sts	0x0840, r24

	//turn off SPI bus and ADC MUX used by ADC
	SPICS(FALSE);
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
     ec2:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	enableADCMUX(FALSE);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 2a 07 	call	0xe54	; 0xe54 <enableADCMUX>
	
	//set a global flag to tell system that all the samples have been collected
	ADC_Sampling_Finished = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 cd 50 	sts	0x50CD, r24
	DataAvailable = 1;
     ed2:	80 93 d5 21 	sts	0x21D5, r24
}
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0b be       	out	0x3b, r0	; 59
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <ADC_Stop_Sampling>:
//turns off ADC timers/counters and spi bus 
//returns number of samples collected by ADC
void ADC_Stop_Sampling(){
	
	// turn off ADC timer(s)
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     efc:	e0 e4       	ldi	r30, 0x40	; 64
     efe:	fa e0       	ldi	r31, 0x0A	; 10
     f00:	80 81       	ld	r24, Z
     f02:	80 7f       	andi	r24, 0xF0	; 240
     f04:	80 83       	st	Z, r24
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     f06:	a0 e0       	ldi	r26, 0x00	; 0
     f08:	b8 e0       	ldi	r27, 0x08	; 8
     f0a:	8c 91       	ld	r24, X
     f0c:	80 7f       	andi	r24, 0xF0	; 240
     f0e:	8c 93       	st	X, r24
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     f10:	a0 e0       	ldi	r26, 0x00	; 0
     f12:	b9 e0       	ldi	r27, 0x09	; 9
     f14:	8c 91       	ld	r24, X
     f16:	80 7f       	andi	r24, 0xF0	; 240
     f18:	8c 93       	st	X, r24
	TCC1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     f1a:	80 81       	ld	r24, Z
     f1c:	80 7f       	andi	r24, 0xF0	; 240
     f1e:	80 93 40 08 	sts	0x0840, r24

	//turn off SPI bus and ADC MUX used by ADC
	SPICS(FALSE);
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
     f28:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	enableADCMUX(FALSE);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 2a 07 	call	0xe54	; 0xe54 <enableADCMUX>
	ADC_Sampling_Finished = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	80 93 cd 50 	sts	0x50CD, r24
	DataAvailable = 1;
     f38:	80 93 d5 21 	sts	0x21D5, r24
}
     f3c:	08 95       	ret

00000f3e <ADC_Get_Num_Samples>:

//returns number of samples collected by last ADC sampling time
uint16_t ADC_Get_Num_Samples(){
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	0f 92       	push	r0
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	
	if(ADC_Sampling_Finished){
     f4a:	80 91 cd 50 	lds	r24, 0x50CD
     f4e:	88 23       	and	r24, r24
     f50:	89 f0       	breq	.+34     	; 0xf74 <ADC_Get_Num_Samples+0x36>
		volatile uint16_t count;
		count = TCC1.CNT;
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f8 e0       	ldi	r31, 0x08	; 8
     f56:	80 a1       	lds	r24, 0x40
     f58:	91 a1       	lds	r25, 0x41
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	9a 83       	std	Y+2, r25	; 0x02
		if(count == 0) count = TCC1.PER;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	21 f4       	brne	.+8      	; 0xf6e <ADC_Get_Num_Samples+0x30>
     f66:	86 a1       	lds	r24, 0x46
     f68:	97 a1       	lds	r25, 0x47
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	9a 83       	std	Y+2, r25	; 0x02
		return count;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <ADC_Get_Num_Samples+0x3a>
	}
	else return 0;		
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <ADC_Pause_Sampling>:

void ADC_Pause_Sampling(){
		//ignore interrupts from the ADC...don't turn it off to avoid the boot up time
	PORTF.INT1MASK = 0x00;
     f82:	e0 ea       	ldi	r30, 0xA0	; 160
     f84:	f6 e0       	ldi	r31, 0x06	; 6
     f86:	13 86       	std	Z+11, r1	; 0x0b
}
     f88:	08 95       	ret

00000f8a <ADC_Resume_Sampling>:

void ADC_Resume_Sampling(){
	//re-enable interrupt on port F which the ADC uses
	PORTF.INT1MASK = PIN0_bm;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	e0 ea       	ldi	r30, 0xA0	; 160
     f8e:	f6 e0       	ldi	r31, 0x06	; 6
     f90:	83 87       	std	Z+11, r24	; 0x0b
}	
     f92:	08 95       	ret

00000f94 <__vector_104>:
// 	}	
// 	}	
// }

//ISR used by CO_collectADC function
ISR(PORTF_INT0_vect) {
     f94:	1f 92       	push	r1
     f96:	0f 92       	push	r0
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	0f 92       	push	r0
     f9c:	0b b6       	in	r0, 0x3b	; 59
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	6f 92       	push	r6
     fa4:	7f 92       	push	r7
     fa6:	8f 92       	push	r8
     fa8:	9f 92       	push	r9
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	2c 97       	sbiw	r28, 0x0c	; 12
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	de bf       	out	0x3e, r29	; 62
	// skip first samples because cannot perform recommended reset
	volatile int32_t currentSample;
	volatile int64_t var;
	if (discardCount < ADC_DISCARD) {
     fe0:	80 91 5d 40 	lds	r24, 0x405D
     fe4:	88 23       	and	r24, r24
     fe6:	8c f0       	brlt	.+34     	; 0x100a <__vector_104+0x76>
		discardCount++;
     fe8:	80 91 5d 40 	lds	r24, 0x405D
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	80 93 5d 40 	sts	0x405D, r24
		if(discardCount == ADC_DISCARD){
     ff2:	80 91 5d 40 	lds	r24, 0x405D
     ff6:	80 38       	cpi	r24, 0x80	; 128
     ff8:	09 f0       	breq	.+2      	; 0xffc <__vector_104+0x68>
     ffa:	b4 c0       	rjmp	.+360    	; 0x1164 <__vector_104+0x1d0>
			//set event system to update counter of number of samples every sample event from now on
			TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
     ffc:	e0 e4       	ldi	r30, 0x40	; 64
     ffe:	f8 e0       	ldi	r31, 0x08	; 8
    1000:	80 81       	ld	r24, Z
    1002:	80 7f       	andi	r24, 0xF0	; 240
    1004:	89 60       	ori	r24, 0x09	; 9
    1006:	80 83       	st	Z, r24
    1008:	ad c0       	rjmp	.+346    	; 0x1164 <__vector_104+0x1d0>
		}
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	e0 ea       	ldi	r30, 0xA0	; 160
    1014:	f6 e0       	ldi	r31, 0x06	; 6
    1016:	86 83       	std	Z+6, r24	; 0x06
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    101c:	e0 ec       	ldi	r30, 0xC0	; 192
    101e:	f8 e0       	ldi	r31, 0x08	; 8
    1020:	5a ea       	ldi	r21, 0xAA	; 170
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
    1022:	25 e6       	ldi	r18, 0x65	; 101
    1024:	30 e5       	ldi	r19, 0x50	; 80
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1026:	53 83       	std	Z+3, r21	; 0x03
			while(!(SPIC.STATUS & SPI_IF_bm));
    1028:	42 81       	ldd	r20, Z+2	; 0x02
    102a:	44 23       	and	r20, r20
    102c:	ec f7       	brge	.-6      	; 0x1028 <__vector_104+0x94>
			SPIBuffer[bufIndex] = SPIC.DATA;
    102e:	43 81       	ldd	r20, Z+3	; 0x03
    1030:	d9 01       	movw	r26, r18
    1032:	a8 0f       	add	r26, r24
    1034:	b9 1f       	adc	r27, r25
    1036:	4c 93       	st	X, r20
    1038:	01 96       	adiw	r24, 0x01	; 1
		}
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	99 f7       	brne	.-26     	; 0x1026 <__vector_104+0x92>
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	e0 ea       	ldi	r30, 0xA0	; 160
    1044:	f6 e0       	ldi	r31, 0x06	; 6
    1046:	85 83       	std	Z+5, r24	; 0x05
		SPICS(FALSE);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>

		// create 32 bits from SPIBuffer[0:2] with sign extension of SPIBuffer[0][7]
		if(SPIBuffer[0] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    104e:	80 91 65 50 	lds	r24, 0x5065
    1052:	88 23       	and	r24, r24
    1054:	1c f4       	brge	.+6      	; 0x105c <__vector_104+0xc8>
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	8c 83       	std	Y+4, r24	; 0x04
    105a:	01 c0       	rjmp	.+2      	; 0x105e <__vector_104+0xca>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    105c:	1c 82       	std	Y+4, r1	; 0x04
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[0];
    105e:	80 91 65 50 	lds	r24, 0x5065
    1062:	8b 83       	std	Y+3, r24	; 0x03
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[1];
    1064:	80 91 66 50 	lds	r24, 0x5066
    1068:	8a 83       	std	Y+2, r24	; 0x02
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[2];
    106a:	80 91 67 50 	lds	r24, 0x5067
    106e:	89 83       	std	Y+1, r24	; 0x01
		
		//ADC_BUFFER[sampleCount] = (int32_t) -((uint64_t)currentSample * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
		var = currentSample;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	ab 81       	ldd	r26, Y+3	; 0x03
    1076:	bc 81       	ldd	r27, Y+4	; 0x04
    1078:	ac 01       	movw	r20, r24
    107a:	bd 01       	movw	r22, r26
    107c:	77 0f       	add	r23, r23
    107e:	44 0b       	sbc	r20, r20
    1080:	54 2f       	mov	r21, r20
    1082:	ba 01       	movw	r22, r20
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	af 83       	std	Y+7, r26	; 0x07
    108a:	b8 87       	std	Y+8, r27	; 0x08
    108c:	49 87       	std	Y+9, r20	; 0x09
    108e:	4a 87       	std	Y+10, r20	; 0x0a
    1090:	4b 87       	std	Y+11, r20	; 0x0b
    1092:	4c 87       	std	Y+12, r20	; 0x0c
		ADC_BUFFER[sampleCount] = (int32_t) -(var * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    1094:	80 90 74 50 	lds	r8, 0x5074
    1098:	90 90 75 50 	lds	r9, 0x5075
    109c:	a0 90 76 50 	lds	r10, 0x5076
    10a0:	b0 90 77 50 	lds	r11, 0x5077
    10a4:	2d 81       	ldd	r18, Y+5	; 0x05
    10a6:	3e 81       	ldd	r19, Y+6	; 0x06
    10a8:	4f 81       	ldd	r20, Y+7	; 0x07
    10aa:	58 85       	ldd	r21, Y+8	; 0x08
    10ac:	69 85       	ldd	r22, Y+9	; 0x09
    10ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    10b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b4:	f4 01       	movw	r30, r8
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	60 90 72 50 	lds	r6, 0x5072
    10c2:	70 90 73 50 	lds	r7, 0x5073
    10c6:	6e 0e       	add	r6, r30
    10c8:	7f 1e       	adc	r7, r31
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f0 ea       	ldi	r31, 0xA0	; 160
    10ce:	af 2e       	mov	r10, r31
    10d0:	f0 2d       	mov	r31, r0
    10d2:	0f 2e       	mov	r0, r31
    10d4:	f5 e2       	ldi	r31, 0x25	; 37
    10d6:	bf 2e       	mov	r11, r31
    10d8:	f0 2d       	mov	r31, r0
    10da:	0f 2e       	mov	r0, r31
    10dc:	f6 e2       	ldi	r31, 0x26	; 38
    10de:	cf 2e       	mov	r12, r31
    10e0:	f0 2d       	mov	r31, r0
    10e2:	dd 24       	eor	r13, r13
    10e4:	ee 24       	eor	r14, r14
    10e6:	ff 24       	eor	r15, r15
    10e8:	00 e0       	ldi	r16, 0x00	; 0
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <__muldi3>
    10f0:	aa 24       	eor	r10, r10
    10f2:	aa 94       	dec	r10
    10f4:	bb 24       	eor	r11, r11
    10f6:	ba 94       	dec	r11
    10f8:	0f 2e       	mov	r0, r31
    10fa:	ff e7       	ldi	r31, 0x7F	; 127
    10fc:	cf 2e       	mov	r12, r31
    10fe:	f0 2d       	mov	r31, r0
    1100:	0e 94 cf 30 	call	0x619e	; 0x619e <__divdi3>
    1104:	01 e0       	ldi	r16, 0x01	; 1
    1106:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__ashldi3>
    110a:	0f 2e       	mov	r0, r31
    110c:	f3 e0       	ldi	r31, 0x03	; 3
    110e:	af 2e       	mov	r10, r31
    1110:	f0 2d       	mov	r31, r0
    1112:	bb 24       	eor	r11, r11
    1114:	cc 24       	eor	r12, r12
    1116:	00 e0       	ldi	r16, 0x00	; 0
    1118:	0e 94 cf 30 	call	0x619e	; 0x619e <__divdi3>
    111c:	82 2e       	mov	r8, r18
    111e:	93 2e       	mov	r9, r19
    1120:	a4 2e       	mov	r10, r20
    1122:	b5 2e       	mov	r11, r21
    1124:	b0 94       	com	r11
    1126:	a0 94       	com	r10
    1128:	90 94       	com	r9
    112a:	80 94       	com	r8
    112c:	81 1c       	adc	r8, r1
    112e:	91 1c       	adc	r9, r1
    1130:	a1 1c       	adc	r10, r1
    1132:	b1 1c       	adc	r11, r1
    1134:	f3 01       	movw	r30, r6
    1136:	80 82       	st	Z, r8
    1138:	91 82       	std	Z+1, r9	; 0x01
    113a:	a2 82       	std	Z+2, r10	; 0x02
    113c:	b3 82       	std	Z+3, r11	; 0x03
		sampleCount++;
    113e:	80 91 74 50 	lds	r24, 0x5074
    1142:	90 91 75 50 	lds	r25, 0x5075
    1146:	a0 91 76 50 	lds	r26, 0x5076
    114a:	b0 91 77 50 	lds	r27, 0x5077
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	a1 1d       	adc	r26, r1
    1152:	b1 1d       	adc	r27, r1
    1154:	80 93 74 50 	sts	0x5074, r24
    1158:	90 93 75 50 	sts	0x5075, r25
    115c:	a0 93 76 50 	sts	0x5076, r26
    1160:	b0 93 77 50 	sts	0x5077, r27
	}
}
    1164:	2c 96       	adiw	r28, 0x0c	; 12
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	bf 91       	pop	r27
    1174:	af 91       	pop	r26
    1176:	9f 91       	pop	r25
    1178:	8f 91       	pop	r24
    117a:	7f 91       	pop	r23
    117c:	6f 91       	pop	r22
    117e:	5f 91       	pop	r21
    1180:	4f 91       	pop	r20
    1182:	3f 91       	pop	r19
    1184:	2f 91       	pop	r18
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	7f 90       	pop	r7
    119c:	6f 90       	pop	r6
    119e:	0f 90       	pop	r0
    11a0:	0b be       	out	0x3b, r0	; 59
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <ACC_DCPassEnable>:

// Enable DC Pass for acc
// Pull PIO27 high to enable
void ACC_DCPassEnable(uint8_t enable) {
	if (enable) {
    11ac:	88 23       	and	r24, r24
    11ae:	49 f0       	breq	.+18     	; 0x11c2 <ACC_DCPassEnable+0x16>
		PortEx_DIRSET(BIT5_bm, PS_BANKB);
    11b0:	80 e2       	ldi	r24, 0x20	; 32
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <PortEx_DIRSET>
		PortEx_OUTSET(BIT5_bm, PS_BANKB);
    11b8:	80 e2       	ldi	r24, 0x20	; 32
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
    11c0:	08 95       	ret
		//setPortEx(BIT5_bm, PS_BANKB);
	} else {
		PortEx_DIRCLR(BIT5_bm, PS_BANKB);
    11c2:	80 e2       	ldi	r24, 0x20	; 32
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <PortEx_DIRCLR>
    11ca:	08 95       	ret

000011cc <__vector_14>:
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	6f 92       	push	r6
    11dc:	7f 92       	push	r7
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	2c 97       	sbiw	r28, 0x0c	; 12
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	de bf       	out	0x3e, r29	; 62
	volatile int64_t sum = 0;
    1218:	19 82       	std	Y+1, r1	; 0x01
    121a:	1a 82       	std	Y+2, r1	; 0x02
    121c:	1b 82       	std	Y+3, r1	; 0x03
    121e:	1c 82       	std	Y+4, r1	; 0x04
    1220:	1d 82       	std	Y+5, r1	; 0x05
    1222:	1e 82       	std	Y+6, r1	; 0x06
    1224:	1f 82       	std	Y+7, r1	; 0x07
    1226:	18 86       	std	Y+8, r1	; 0x08
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    122c:	25 e6       	ldi	r18, 0x65	; 101
    122e:	30 e5       	ldi	r19, 0x50	; 80
    1230:	aa 24       	eor	r10, r10
    1232:	aa 94       	dec	r10
    1234:	ac 01       	movw	r20, r24
    1236:	f9 01       	movw	r30, r18
    1238:	e8 0f       	add	r30, r24
    123a:	f9 1f       	adc	r31, r25
    123c:	60 81       	ld	r22, Z
    123e:	66 23       	and	r22, r22
    1240:	14 f4       	brge	.+4      	; 0x1246 <__vector_14+0x7a>
    1242:	ac 86       	std	Y+12, r10	; 0x0c
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <__vector_14+0x7c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    1246:	1c 86       	std	Y+12, r1	; 0x0c
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    1248:	42 0f       	add	r20, r18
    124a:	53 1f       	adc	r21, r19
    124c:	fa 01       	movw	r30, r20
    124e:	40 81       	ld	r20, Z
    1250:	4b 87       	std	Y+11, r20	; 0x0b
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    1252:	fc 01       	movw	r30, r24
    1254:	31 96       	adiw	r30, 0x01	; 1
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    1256:	e2 0f       	add	r30, r18
    1258:	f3 1f       	adc	r31, r19
    125a:	40 81       	ld	r20, Z
    125c:	4a 87       	std	Y+10, r20	; 0x0a
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    125e:	fc 01       	movw	r30, r24
    1260:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    1262:	e2 0f       	add	r30, r18
    1264:	f3 1f       	adc	r31, r19
    1266:	40 81       	ld	r20, Z
    1268:	49 87       	std	Y+9, r20	; 0x09
		sum += currentSample;
    126a:	49 85       	ldd	r20, Y+9	; 0x09
    126c:	5a 85       	ldd	r21, Y+10	; 0x0a
    126e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1270:	7c 85       	ldd	r23, Y+12	; 0x0c
    1272:	b9 80       	ldd	r11, Y+1	; 0x01
    1274:	ca 80       	ldd	r12, Y+2	; 0x02
    1276:	db 80       	ldd	r13, Y+3	; 0x03
    1278:	ec 80       	ldd	r14, Y+4	; 0x04
    127a:	fd 80       	ldd	r15, Y+5	; 0x05
    127c:	0e 81       	ldd	r16, Y+6	; 0x06
    127e:	1f 81       	ldd	r17, Y+7	; 0x07
    1280:	88 84       	ldd	r8, Y+8	; 0x08
    1282:	b4 2f       	mov	r27, r20
    1284:	a5 2f       	mov	r26, r21
    1286:	f6 2f       	mov	r31, r22
    1288:	e7 2f       	mov	r30, r23
    128a:	77 0f       	add	r23, r23
    128c:	44 0b       	sbc	r20, r20
    128e:	54 2f       	mov	r21, r20
    1290:	ba 01       	movw	r22, r20
    1292:	64 2e       	mov	r6, r20
    1294:	74 2e       	mov	r7, r20
    1296:	94 2e       	mov	r9, r20
    1298:	bb 0e       	add	r11, r27
    129a:	61 e0       	ldi	r22, 0x01	; 1
    129c:	bb 16       	cp	r11, r27
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__vector_14+0xd6>
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	ca 0e       	add	r12, r26
    12a4:	51 e0       	ldi	r21, 0x01	; 1
    12a6:	ca 16       	cp	r12, r26
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <__vector_14+0xe0>
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	a6 2f       	mov	r26, r22
    12ae:	ac 0d       	add	r26, r12
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	ac 15       	cp	r26, r12
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <__vector_14+0xec>
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	56 2b       	or	r21, r22
    12ba:	df 0e       	add	r13, r31
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	df 16       	cp	r13, r31
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <__vector_14+0xf8>
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	f5 2f       	mov	r31, r21
    12c6:	fd 0d       	add	r31, r13
    12c8:	51 e0       	ldi	r21, 0x01	; 1
    12ca:	fd 15       	cp	r31, r13
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__vector_14+0x104>
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	65 2b       	or	r22, r21
    12d2:	ee 0e       	add	r14, r30
    12d4:	51 e0       	ldi	r21, 0x01	; 1
    12d6:	ee 16       	cp	r14, r30
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <__vector_14+0x110>
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	e6 2f       	mov	r30, r22
    12de:	ee 0d       	add	r30, r14
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	ee 15       	cp	r30, r14
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <__vector_14+0x11c>
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	56 2b       	or	r21, r22
    12ea:	f6 0c       	add	r15, r6
    12ec:	71 e0       	ldi	r23, 0x01	; 1
    12ee:	f6 14       	cp	r15, r6
    12f0:	08 f0       	brcs	.+2      	; 0x12f4 <__vector_14+0x128>
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	b5 2f       	mov	r27, r21
    12f6:	bf 0d       	add	r27, r15
    12f8:	51 e0       	ldi	r21, 0x01	; 1
    12fa:	bf 15       	cp	r27, r15
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <__vector_14+0x134>
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	75 2b       	or	r23, r21
    1302:	07 0d       	add	r16, r7
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	07 15       	cp	r16, r7
    1308:	08 f0       	brcs	.+2      	; 0x130c <__vector_14+0x140>
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 0f       	add	r23, r16
    130e:	51 e0       	ldi	r21, 0x01	; 1
    1310:	70 17       	cp	r23, r16
    1312:	08 f0       	brcs	.+2      	; 0x1316 <__vector_14+0x14a>
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	65 2b       	or	r22, r21
    1318:	19 0d       	add	r17, r9
    131a:	51 e0       	ldi	r21, 0x01	; 1
    131c:	19 15       	cp	r17, r9
    131e:	08 f0       	brcs	.+2      	; 0x1322 <__vector_14+0x156>
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	61 0f       	add	r22, r17
    1324:	01 e0       	ldi	r16, 0x01	; 1
    1326:	61 17       	cp	r22, r17
    1328:	08 f0       	brcs	.+2      	; 0x132c <__vector_14+0x160>
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	50 2b       	or	r21, r16
    132e:	48 0d       	add	r20, r8
    1330:	54 0f       	add	r21, r20
    1332:	b9 82       	std	Y+1, r11	; 0x01
    1334:	aa 83       	std	Y+2, r26	; 0x02
    1336:	fb 83       	std	Y+3, r31	; 0x03
    1338:	ec 83       	std	Y+4, r30	; 0x04
    133a:	bd 83       	std	Y+5, r27	; 0x05
    133c:	7e 83       	std	Y+6, r23	; 0x06
    133e:	6f 83       	std	Y+7, r22	; 0x07
    1340:	58 87       	std	Y+8, r21	; 0x08
    1342:	03 96       	adiw	r24, 0x03	; 3
//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
	volatile int64_t sum = 0;
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    1344:	8c 30       	cpi	r24, 0x0C	; 12
    1346:	91 05       	cpc	r25, r1
    1348:	09 f0       	breq	.+2      	; 0x134c <__vector_14+0x180>
    134a:	74 cf       	rjmp	.-280    	; 0x1234 <__vector_14+0x68>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
		
	sum = sum / 4;
    134c:	e9 80       	ldd	r14, Y+1	; 0x01
    134e:	fa 80       	ldd	r15, Y+2	; 0x02
    1350:	0b 81       	ldd	r16, Y+3	; 0x03
    1352:	1c 81       	ldd	r17, Y+4	; 0x04
    1354:	bd 81       	ldd	r27, Y+5	; 0x05
    1356:	ae 81       	ldd	r26, Y+6	; 0x06
    1358:	ff 81       	ldd	r31, Y+7	; 0x07
    135a:	e8 85       	ldd	r30, Y+8	; 0x08
    135c:	2e 2d       	mov	r18, r14
    135e:	3f 2d       	mov	r19, r15
    1360:	40 2f       	mov	r20, r16
    1362:	51 2f       	mov	r21, r17
    1364:	6b 2f       	mov	r22, r27
    1366:	7a 2f       	mov	r23, r26
    1368:	8f 2f       	mov	r24, r31
    136a:	9e 2f       	mov	r25, r30
    136c:	ee 23       	and	r30, r30
    136e:	0c f0       	brlt	.+2      	; 0x1372 <__vector_14+0x1a6>
    1370:	4a c0       	rjmp	.+148    	; 0x1406 <__vector_14+0x23a>
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	e9 0e       	add	r14, r25
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	e2 16       	cp	r14, r18
    137a:	08 f0       	brcs	.+2      	; 0x137e <__vector_14+0x1b2>
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	f3 16       	cp	r15, r19
    1382:	08 f0       	brcs	.+2      	; 0x1386 <__vector_14+0x1ba>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	39 2f       	mov	r19, r25
    1388:	3f 0d       	add	r19, r15
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	3f 15       	cp	r19, r15
    138e:	08 f0       	brcs	.+2      	; 0x1392 <__vector_14+0x1c6>
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	29 2b       	or	r18, r25
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	04 17       	cp	r16, r20
    1398:	08 f0       	brcs	.+2      	; 0x139c <__vector_14+0x1d0>
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	42 2f       	mov	r20, r18
    139e:	40 0f       	add	r20, r16
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	40 17       	cp	r20, r16
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <__vector_14+0x1dc>
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	92 2b       	or	r25, r18
    13aa:	21 e0       	ldi	r18, 0x01	; 1
    13ac:	15 17       	cp	r17, r21
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <__vector_14+0x1e6>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	59 2f       	mov	r21, r25
    13b4:	51 0f       	add	r21, r17
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	51 17       	cp	r21, r17
    13ba:	08 f0       	brcs	.+2      	; 0x13be <__vector_14+0x1f2>
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	29 2b       	or	r18, r25
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	b6 17       	cp	r27, r22
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <__vector_14+0x1fc>
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	62 2f       	mov	r22, r18
    13ca:	6b 0f       	add	r22, r27
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	6b 17       	cp	r22, r27
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__vector_14+0x208>
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	92 2b       	or	r25, r18
    13d6:	21 e0       	ldi	r18, 0x01	; 1
    13d8:	a7 17       	cp	r26, r23
    13da:	08 f0       	brcs	.+2      	; 0x13de <__vector_14+0x212>
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	79 2f       	mov	r23, r25
    13e0:	7a 0f       	add	r23, r26
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	7a 17       	cp	r23, r26
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <__vector_14+0x21e>
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	29 2b       	or	r18, r25
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	f8 17       	cp	r31, r24
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <__vector_14+0x228>
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	82 2f       	mov	r24, r18
    13f6:	8f 0f       	add	r24, r31
    13f8:	21 e0       	ldi	r18, 0x01	; 1
    13fa:	8f 17       	cp	r24, r31
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <__vector_14+0x234>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	92 2b       	or	r25, r18
    1402:	2e 2d       	mov	r18, r14
    1404:	9e 0f       	add	r25, r30
    1406:	02 e0       	ldi	r16, 0x02	; 2
    1408:	0e 94 67 30 	call	0x60ce	; 0x60ce <__ashrdi3>
    140c:	29 83       	std	Y+1, r18	; 0x01
    140e:	3a 83       	std	Y+2, r19	; 0x02
    1410:	4b 83       	std	Y+3, r20	; 0x03
    1412:	5c 83       	std	Y+4, r21	; 0x04
    1414:	6d 83       	std	Y+5, r22	; 0x05
    1416:	7e 83       	std	Y+6, r23	; 0x06
    1418:	8f 83       	std	Y+7, r24	; 0x07
    141a:	98 87       	std	Y+8, r25	; 0x08
	ADC_BUFFER[sampleCount] = (int32_t)(sum * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    141c:	80 90 74 50 	lds	r8, 0x5074
    1420:	90 90 75 50 	lds	r9, 0x5075
    1424:	a0 90 76 50 	lds	r10, 0x5076
    1428:	b0 90 77 50 	lds	r11, 0x5077
    142c:	29 81       	ldd	r18, Y+1	; 0x01
    142e:	3a 81       	ldd	r19, Y+2	; 0x02
    1430:	4b 81       	ldd	r20, Y+3	; 0x03
    1432:	5c 81       	ldd	r21, Y+4	; 0x04
    1434:	6d 81       	ldd	r22, Y+5	; 0x05
    1436:	7e 81       	ldd	r23, Y+6	; 0x06
    1438:	8f 81       	ldd	r24, Y+7	; 0x07
    143a:	98 85       	ldd	r25, Y+8	; 0x08
    143c:	f4 01       	movw	r30, r8
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	80 90 72 50 	lds	r8, 0x5072
    144a:	90 90 73 50 	lds	r9, 0x5073
    144e:	8e 0e       	add	r8, r30
    1450:	9f 1e       	adc	r9, r31
    1452:	0f 2e       	mov	r0, r31
    1454:	f0 ea       	ldi	r31, 0xA0	; 160
    1456:	af 2e       	mov	r10, r31
    1458:	f0 2d       	mov	r31, r0
    145a:	0f 2e       	mov	r0, r31
    145c:	f5 e2       	ldi	r31, 0x25	; 37
    145e:	bf 2e       	mov	r11, r31
    1460:	f0 2d       	mov	r31, r0
    1462:	0f 2e       	mov	r0, r31
    1464:	f6 e2       	ldi	r31, 0x26	; 38
    1466:	cf 2e       	mov	r12, r31
    1468:	f0 2d       	mov	r31, r0
    146a:	dd 24       	eor	r13, r13
    146c:	ee 24       	eor	r14, r14
    146e:	ff 24       	eor	r15, r15
    1470:	00 e0       	ldi	r16, 0x00	; 0
    1472:	10 e0       	ldi	r17, 0x00	; 0
    1474:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <__muldi3>
    1478:	aa 24       	eor	r10, r10
    147a:	aa 94       	dec	r10
    147c:	bb 24       	eor	r11, r11
    147e:	ba 94       	dec	r11
    1480:	0f 2e       	mov	r0, r31
    1482:	ff e7       	ldi	r31, 0x7F	; 127
    1484:	cf 2e       	mov	r12, r31
    1486:	f0 2d       	mov	r31, r0
    1488:	0e 94 cf 30 	call	0x619e	; 0x619e <__divdi3>
    148c:	01 e0       	ldi	r16, 0x01	; 1
    148e:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__ashldi3>
    1492:	0f 2e       	mov	r0, r31
    1494:	f3 e0       	ldi	r31, 0x03	; 3
    1496:	af 2e       	mov	r10, r31
    1498:	f0 2d       	mov	r31, r0
    149a:	bb 24       	eor	r11, r11
    149c:	cc 24       	eor	r12, r12
    149e:	00 e0       	ldi	r16, 0x00	; 0
    14a0:	0e 94 cf 30 	call	0x619e	; 0x619e <__divdi3>
    14a4:	f4 01       	movw	r30, r8
    14a6:	20 83       	st	Z, r18
    14a8:	31 83       	std	Z+1, r19	; 0x01
    14aa:	42 83       	std	Z+2, r20	; 0x02
    14ac:	53 83       	std	Z+3, r21	; 0x03
	sampleCount++;
    14ae:	80 91 74 50 	lds	r24, 0x5074
    14b2:	90 91 75 50 	lds	r25, 0x5075
    14b6:	a0 91 76 50 	lds	r26, 0x5076
    14ba:	b0 91 77 50 	lds	r27, 0x5077
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	a1 1d       	adc	r26, r1
    14c2:	b1 1d       	adc	r27, r1
    14c4:	80 93 74 50 	sts	0x5074, r24
    14c8:	90 93 75 50 	sts	0x5075, r25
    14cc:	a0 93 76 50 	sts	0x5076, r26
    14d0:	b0 93 77 50 	sts	0x5077, r27

}
    14d4:	2c 96       	adiw	r28, 0x0c	; 12
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	bf 90       	pop	r11
    1504:	af 90       	pop	r10
    1506:	9f 90       	pop	r9
    1508:	8f 90       	pop	r8
    150a:	7f 90       	pop	r7
    150c:	6f 90       	pop	r6
    150e:	0f 90       	pop	r0
    1510:	0b be       	out	0x3b, r0	; 59
    1512:	0f 90       	pop	r0
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	0f 90       	pop	r0
    1518:	1f 90       	pop	r1
    151a:	18 95       	reti

0000151c <__vector_77>:
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	0b b6       	in	r0, 0x3b	; 59
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
    152a:	6f 92       	push	r6
    152c:	7f 92       	push	r7
    152e:	8f 92       	push	r8
    1530:	9f 92       	push	r9
    1532:	af 92       	push	r10
    1534:	bf 92       	push	r11
    1536:	cf 92       	push	r12
    1538:	df 92       	push	r13
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	2f 93       	push	r18
    1544:	3f 93       	push	r19
    1546:	4f 93       	push	r20
    1548:	5f 93       	push	r21
    154a:	6f 93       	push	r22
    154c:	7f 93       	push	r23
    154e:	8f 93       	push	r24
    1550:	9f 93       	push	r25
    1552:	af 93       	push	r26
    1554:	bf 93       	push	r27
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	2c 97       	sbiw	r28, 0x0c	; 12
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	de bf       	out	0x3e, r29	; 62

	volatile int64_t sum = 0;
    1568:	19 82       	std	Y+1, r1	; 0x01
    156a:	1a 82       	std	Y+2, r1	; 0x02
    156c:	1b 82       	std	Y+3, r1	; 0x03
    156e:	1c 82       	std	Y+4, r1	; 0x04
    1570:	1d 82       	std	Y+5, r1	; 0x05
    1572:	1e 82       	std	Y+6, r1	; 0x06
    1574:	1f 82       	std	Y+7, r1	; 0x07
    1576:	18 86       	std	Y+8, r1	; 0x08
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    157c:	25 e6       	ldi	r18, 0x65	; 101
    157e:	30 e5       	ldi	r19, 0x50	; 80
    1580:	aa 24       	eor	r10, r10
    1582:	aa 94       	dec	r10
    1584:	ac 01       	movw	r20, r24
    1586:	f9 01       	movw	r30, r18
    1588:	e8 0f       	add	r30, r24
    158a:	f9 1f       	adc	r31, r25
    158c:	60 81       	ld	r22, Z
    158e:	66 23       	and	r22, r22
    1590:	14 f4       	brge	.+4      	; 0x1596 <__vector_77+0x7a>
    1592:	ac 86       	std	Y+12, r10	; 0x0c
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <__vector_77+0x7c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    1596:	1c 86       	std	Y+12, r1	; 0x0c
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    1598:	42 0f       	add	r20, r18
    159a:	53 1f       	adc	r21, r19
    159c:	fa 01       	movw	r30, r20
    159e:	40 81       	ld	r20, Z
    15a0:	4b 87       	std	Y+11, r20	; 0x0b
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    15a2:	fc 01       	movw	r30, r24
    15a4:	31 96       	adiw	r30, 0x01	; 1
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    15a6:	e2 0f       	add	r30, r18
    15a8:	f3 1f       	adc	r31, r19
    15aa:	40 81       	ld	r20, Z
    15ac:	4a 87       	std	Y+10, r20	; 0x0a
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    15ae:	fc 01       	movw	r30, r24
    15b0:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    15b2:	e2 0f       	add	r30, r18
    15b4:	f3 1f       	adc	r31, r19
    15b6:	40 81       	ld	r20, Z
    15b8:	49 87       	std	Y+9, r20	; 0x09
		sum += currentSample;
    15ba:	49 85       	ldd	r20, Y+9	; 0x09
    15bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    15be:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c2:	b9 80       	ldd	r11, Y+1	; 0x01
    15c4:	ca 80       	ldd	r12, Y+2	; 0x02
    15c6:	db 80       	ldd	r13, Y+3	; 0x03
    15c8:	ec 80       	ldd	r14, Y+4	; 0x04
    15ca:	fd 80       	ldd	r15, Y+5	; 0x05
    15cc:	0e 81       	ldd	r16, Y+6	; 0x06
    15ce:	1f 81       	ldd	r17, Y+7	; 0x07
    15d0:	88 84       	ldd	r8, Y+8	; 0x08
    15d2:	b4 2f       	mov	r27, r20
    15d4:	a5 2f       	mov	r26, r21
    15d6:	f6 2f       	mov	r31, r22
    15d8:	e7 2f       	mov	r30, r23
    15da:	77 0f       	add	r23, r23
    15dc:	44 0b       	sbc	r20, r20
    15de:	54 2f       	mov	r21, r20
    15e0:	ba 01       	movw	r22, r20
    15e2:	64 2e       	mov	r6, r20
    15e4:	74 2e       	mov	r7, r20
    15e6:	94 2e       	mov	r9, r20
    15e8:	bb 0e       	add	r11, r27
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	bb 16       	cp	r11, r27
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <__vector_77+0xd6>
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	ca 0e       	add	r12, r26
    15f4:	51 e0       	ldi	r21, 0x01	; 1
    15f6:	ca 16       	cp	r12, r26
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <__vector_77+0xe0>
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	a6 2f       	mov	r26, r22
    15fe:	ac 0d       	add	r26, r12
    1600:	61 e0       	ldi	r22, 0x01	; 1
    1602:	ac 15       	cp	r26, r12
    1604:	08 f0       	brcs	.+2      	; 0x1608 <__vector_77+0xec>
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	56 2b       	or	r21, r22
    160a:	df 0e       	add	r13, r31
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	df 16       	cp	r13, r31
    1610:	08 f0       	brcs	.+2      	; 0x1614 <__vector_77+0xf8>
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	f5 2f       	mov	r31, r21
    1616:	fd 0d       	add	r31, r13
    1618:	51 e0       	ldi	r21, 0x01	; 1
    161a:	fd 15       	cp	r31, r13
    161c:	08 f0       	brcs	.+2      	; 0x1620 <__vector_77+0x104>
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	65 2b       	or	r22, r21
    1622:	ee 0e       	add	r14, r30
    1624:	51 e0       	ldi	r21, 0x01	; 1
    1626:	ee 16       	cp	r14, r30
    1628:	08 f0       	brcs	.+2      	; 0x162c <__vector_77+0x110>
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	e6 2f       	mov	r30, r22
    162e:	ee 0d       	add	r30, r14
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	ee 15       	cp	r30, r14
    1634:	08 f0       	brcs	.+2      	; 0x1638 <__vector_77+0x11c>
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	56 2b       	or	r21, r22
    163a:	f6 0c       	add	r15, r6
    163c:	71 e0       	ldi	r23, 0x01	; 1
    163e:	f6 14       	cp	r15, r6
    1640:	08 f0       	brcs	.+2      	; 0x1644 <__vector_77+0x128>
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	b5 2f       	mov	r27, r21
    1646:	bf 0d       	add	r27, r15
    1648:	51 e0       	ldi	r21, 0x01	; 1
    164a:	bf 15       	cp	r27, r15
    164c:	08 f0       	brcs	.+2      	; 0x1650 <__vector_77+0x134>
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	75 2b       	or	r23, r21
    1652:	07 0d       	add	r16, r7
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	07 15       	cp	r16, r7
    1658:	08 f0       	brcs	.+2      	; 0x165c <__vector_77+0x140>
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	70 0f       	add	r23, r16
    165e:	51 e0       	ldi	r21, 0x01	; 1
    1660:	70 17       	cp	r23, r16
    1662:	08 f0       	brcs	.+2      	; 0x1666 <__vector_77+0x14a>
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	65 2b       	or	r22, r21
    1668:	19 0d       	add	r17, r9
    166a:	51 e0       	ldi	r21, 0x01	; 1
    166c:	19 15       	cp	r17, r9
    166e:	08 f0       	brcs	.+2      	; 0x1672 <__vector_77+0x156>
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	61 0f       	add	r22, r17
    1674:	01 e0       	ldi	r16, 0x01	; 1
    1676:	61 17       	cp	r22, r17
    1678:	08 f0       	brcs	.+2      	; 0x167c <__vector_77+0x160>
    167a:	00 e0       	ldi	r16, 0x00	; 0
    167c:	50 2b       	or	r21, r16
    167e:	48 0d       	add	r20, r8
    1680:	54 0f       	add	r21, r20
    1682:	b9 82       	std	Y+1, r11	; 0x01
    1684:	aa 83       	std	Y+2, r26	; 0x02
    1686:	fb 83       	std	Y+3, r31	; 0x03
    1688:	ec 83       	std	Y+4, r30	; 0x04
    168a:	bd 83       	std	Y+5, r27	; 0x05
    168c:	7e 83       	std	Y+6, r23	; 0x06
    168e:	6f 83       	std	Y+7, r22	; 0x07
    1690:	58 87       	std	Y+8, r21	; 0x08
    1692:	03 96       	adiw	r24, 0x03	; 3
ISR(TCD0_OVF_vect) {

	volatile int64_t sum = 0;
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    1694:	8c 30       	cpi	r24, 0x0C	; 12
    1696:	91 05       	cpc	r25, r1
    1698:	09 f0       	breq	.+2      	; 0x169c <__vector_77+0x180>
    169a:	74 cf       	rjmp	.-280    	; 0x1584 <__vector_77+0x68>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
		
	sum = sum / 4;
    169c:	e9 80       	ldd	r14, Y+1	; 0x01
    169e:	fa 80       	ldd	r15, Y+2	; 0x02
    16a0:	0b 81       	ldd	r16, Y+3	; 0x03
    16a2:	1c 81       	ldd	r17, Y+4	; 0x04
    16a4:	bd 81       	ldd	r27, Y+5	; 0x05
    16a6:	ae 81       	ldd	r26, Y+6	; 0x06
    16a8:	ff 81       	ldd	r31, Y+7	; 0x07
    16aa:	e8 85       	ldd	r30, Y+8	; 0x08
    16ac:	2e 2d       	mov	r18, r14
    16ae:	3f 2d       	mov	r19, r15
    16b0:	40 2f       	mov	r20, r16
    16b2:	51 2f       	mov	r21, r17
    16b4:	6b 2f       	mov	r22, r27
    16b6:	7a 2f       	mov	r23, r26
    16b8:	8f 2f       	mov	r24, r31
    16ba:	9e 2f       	mov	r25, r30
    16bc:	ee 23       	and	r30, r30
    16be:	0c f0       	brlt	.+2      	; 0x16c2 <__vector_77+0x1a6>
    16c0:	4a c0       	rjmp	.+148    	; 0x1756 <__vector_77+0x23a>
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	e9 0e       	add	r14, r25
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	e2 16       	cp	r14, r18
    16ca:	08 f0       	brcs	.+2      	; 0x16ce <__vector_77+0x1b2>
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	21 e0       	ldi	r18, 0x01	; 1
    16d0:	f3 16       	cp	r15, r19
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <__vector_77+0x1ba>
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	39 2f       	mov	r19, r25
    16d8:	3f 0d       	add	r19, r15
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	3f 15       	cp	r19, r15
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <__vector_77+0x1c6>
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	29 2b       	or	r18, r25
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	04 17       	cp	r16, r20
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <__vector_77+0x1d0>
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	42 2f       	mov	r20, r18
    16ee:	40 0f       	add	r20, r16
    16f0:	21 e0       	ldi	r18, 0x01	; 1
    16f2:	40 17       	cp	r20, r16
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <__vector_77+0x1dc>
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	92 2b       	or	r25, r18
    16fa:	21 e0       	ldi	r18, 0x01	; 1
    16fc:	15 17       	cp	r17, r21
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <__vector_77+0x1e6>
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	59 2f       	mov	r21, r25
    1704:	51 0f       	add	r21, r17
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	51 17       	cp	r21, r17
    170a:	08 f0       	brcs	.+2      	; 0x170e <__vector_77+0x1f2>
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	29 2b       	or	r18, r25
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	b6 17       	cp	r27, r22
    1714:	08 f0       	brcs	.+2      	; 0x1718 <__vector_77+0x1fc>
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	62 2f       	mov	r22, r18
    171a:	6b 0f       	add	r22, r27
    171c:	21 e0       	ldi	r18, 0x01	; 1
    171e:	6b 17       	cp	r22, r27
    1720:	08 f0       	brcs	.+2      	; 0x1724 <__vector_77+0x208>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	92 2b       	or	r25, r18
    1726:	21 e0       	ldi	r18, 0x01	; 1
    1728:	a7 17       	cp	r26, r23
    172a:	08 f0       	brcs	.+2      	; 0x172e <__vector_77+0x212>
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	79 2f       	mov	r23, r25
    1730:	7a 0f       	add	r23, r26
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	7a 17       	cp	r23, r26
    1736:	08 f0       	brcs	.+2      	; 0x173a <__vector_77+0x21e>
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	29 2b       	or	r18, r25
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	f8 17       	cp	r31, r24
    1740:	08 f0       	brcs	.+2      	; 0x1744 <__vector_77+0x228>
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	82 2f       	mov	r24, r18
    1746:	8f 0f       	add	r24, r31
    1748:	21 e0       	ldi	r18, 0x01	; 1
    174a:	8f 17       	cp	r24, r31
    174c:	08 f0       	brcs	.+2      	; 0x1750 <__vector_77+0x234>
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	92 2b       	or	r25, r18
    1752:	2e 2d       	mov	r18, r14
    1754:	9e 0f       	add	r25, r30
    1756:	02 e0       	ldi	r16, 0x02	; 2
    1758:	0e 94 67 30 	call	0x60ce	; 0x60ce <__ashrdi3>
    175c:	29 83       	std	Y+1, r18	; 0x01
    175e:	3a 83       	std	Y+2, r19	; 0x02
    1760:	4b 83       	std	Y+3, r20	; 0x03
    1762:	5c 83       	std	Y+4, r21	; 0x04
    1764:	6d 83       	std	Y+5, r22	; 0x05
    1766:	7e 83       	std	Y+6, r23	; 0x06
    1768:	8f 83       	std	Y+7, r24	; 0x07
    176a:	98 87       	std	Y+8, r25	; 0x08
	//get average of the 4 subsamples
	ADC_BUFFER[sampleCount] = (int32_t)(sum * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    176c:	80 90 74 50 	lds	r8, 0x5074
    1770:	90 90 75 50 	lds	r9, 0x5075
    1774:	a0 90 76 50 	lds	r10, 0x5076
    1778:	b0 90 77 50 	lds	r11, 0x5077
    177c:	29 81       	ldd	r18, Y+1	; 0x01
    177e:	3a 81       	ldd	r19, Y+2	; 0x02
    1780:	4b 81       	ldd	r20, Y+3	; 0x03
    1782:	5c 81       	ldd	r21, Y+4	; 0x04
    1784:	6d 81       	ldd	r22, Y+5	; 0x05
    1786:	7e 81       	ldd	r23, Y+6	; 0x06
    1788:	8f 81       	ldd	r24, Y+7	; 0x07
    178a:	98 85       	ldd	r25, Y+8	; 0x08
    178c:	f4 01       	movw	r30, r8
    178e:	ee 0f       	add	r30, r30
    1790:	ff 1f       	adc	r31, r31
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	80 90 72 50 	lds	r8, 0x5072
    179a:	90 90 73 50 	lds	r9, 0x5073
    179e:	8e 0e       	add	r8, r30
    17a0:	9f 1e       	adc	r9, r31
    17a2:	0f 2e       	mov	r0, r31
    17a4:	f0 ea       	ldi	r31, 0xA0	; 160
    17a6:	af 2e       	mov	r10, r31
    17a8:	f0 2d       	mov	r31, r0
    17aa:	0f 2e       	mov	r0, r31
    17ac:	f5 e2       	ldi	r31, 0x25	; 37
    17ae:	bf 2e       	mov	r11, r31
    17b0:	f0 2d       	mov	r31, r0
    17b2:	0f 2e       	mov	r0, r31
    17b4:	f6 e2       	ldi	r31, 0x26	; 38
    17b6:	cf 2e       	mov	r12, r31
    17b8:	f0 2d       	mov	r31, r0
    17ba:	dd 24       	eor	r13, r13
    17bc:	ee 24       	eor	r14, r14
    17be:	ff 24       	eor	r15, r15
    17c0:	00 e0       	ldi	r16, 0x00	; 0
    17c2:	10 e0       	ldi	r17, 0x00	; 0
    17c4:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <__muldi3>
    17c8:	aa 24       	eor	r10, r10
    17ca:	aa 94       	dec	r10
    17cc:	bb 24       	eor	r11, r11
    17ce:	ba 94       	dec	r11
    17d0:	0f 2e       	mov	r0, r31
    17d2:	ff e7       	ldi	r31, 0x7F	; 127
    17d4:	cf 2e       	mov	r12, r31
    17d6:	f0 2d       	mov	r31, r0
    17d8:	0e 94 cf 30 	call	0x619e	; 0x619e <__divdi3>
    17dc:	01 e0       	ldi	r16, 0x01	; 1
    17de:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__ashldi3>
    17e2:	0f 2e       	mov	r0, r31
    17e4:	f3 e0       	ldi	r31, 0x03	; 3
    17e6:	af 2e       	mov	r10, r31
    17e8:	f0 2d       	mov	r31, r0
    17ea:	bb 24       	eor	r11, r11
    17ec:	cc 24       	eor	r12, r12
    17ee:	00 e0       	ldi	r16, 0x00	; 0
    17f0:	0e 94 cf 30 	call	0x619e	; 0x619e <__divdi3>
    17f4:	f4 01       	movw	r30, r8
    17f6:	20 83       	st	Z, r18
    17f8:	31 83       	std	Z+1, r19	; 0x01
    17fa:	42 83       	std	Z+2, r20	; 0x02
    17fc:	53 83       	std	Z+3, r21	; 0x03
	sampleCount++;
    17fe:	80 91 74 50 	lds	r24, 0x5074
    1802:	90 91 75 50 	lds	r25, 0x5075
    1806:	a0 91 76 50 	lds	r26, 0x5076
    180a:	b0 91 77 50 	lds	r27, 0x5077
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	a1 1d       	adc	r26, r1
    1812:	b1 1d       	adc	r27, r1
    1814:	80 93 74 50 	sts	0x5074, r24
    1818:	90 93 75 50 	sts	0x5075, r25
    181c:	a0 93 76 50 	sts	0x5076, r26
    1820:	b0 93 77 50 	sts	0x5077, r27
}
    1824:	2c 96       	adiw	r28, 0x0c	; 12
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	9f 90       	pop	r9
    1858:	8f 90       	pop	r8
    185a:	7f 90       	pop	r7
    185c:	6f 90       	pop	r6
    185e:	0f 90       	pop	r0
    1860:	0b be       	out	0x3b, r0	; 59
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <sampleCurrentChannel>:

//sample an axis of accelerometer with ADC
void sampleCurrentChannel() {
	
	PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    186c:	82 e0       	ldi	r24, 0x02	; 2
    186e:	e0 ea       	ldi	r30, 0xA0	; 160
    1870:	f6 e0       	ldi	r31, 0x06	; 6
    1872:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1874:	8a ea       	ldi	r24, 0xAA	; 170
    1876:	e0 ec       	ldi	r30, 0xC0	; 192
    1878:	f8 e0       	ldi	r31, 0x08	; 8
    187a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	88 23       	and	r24, r24
    1880:	ec f7       	brge	.-6      	; 0x187c <sampleCurrentChannel+0x10>
	SPIBuffer[SPICount] = SPIC.DATA;
    1882:	90 91 c6 50 	lds	r25, 0x50C6
    1886:	e0 ec       	ldi	r30, 0xC0	; 192
    1888:	f8 e0       	ldi	r31, 0x08	; 8
    188a:	83 81       	ldd	r24, Z+3	; 0x03
    188c:	a5 e6       	ldi	r26, 0x65	; 101
    188e:	b0 e5       	ldi	r27, 0x50	; 80
    1890:	a9 0f       	add	r26, r25
    1892:	b1 1d       	adc	r27, r1
    1894:	8c 93       	st	X, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1896:	8a ea       	ldi	r24, 0xAA	; 170
    1898:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	88 23       	and	r24, r24
    189e:	ec f7       	brge	.-6      	; 0x189a <sampleCurrentChannel+0x2e>
	SPIBuffer[SPICount+1] = SPIC.DATA;
    18a0:	a0 91 c6 50 	lds	r26, 0x50C6
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e0 ec       	ldi	r30, 0xC0	; 192
    18a8:	f8 e0       	ldi	r31, 0x08	; 8
    18aa:	83 81       	ldd	r24, Z+3	; 0x03
    18ac:	aa 59       	subi	r26, 0x9A	; 154
    18ae:	bf 4a       	sbci	r27, 0xAF	; 175
    18b0:	8c 93       	st	X, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    18b2:	8a ea       	ldi	r24, 0xAA	; 170
    18b4:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	88 23       	and	r24, r24
    18ba:	ec f7       	brge	.-6      	; 0x18b6 <sampleCurrentChannel+0x4a>
	SPIBuffer[SPICount+2] = SPIC.DATA;
    18bc:	e0 91 c6 50 	lds	r30, 0x50C6
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	a0 ec       	ldi	r26, 0xC0	; 192
    18c4:	b8 e0       	ldi	r27, 0x08	; 8
    18c6:	13 96       	adiw	r26, 0x03	; 3
    18c8:	8c 91       	ld	r24, X
    18ca:	13 97       	sbiw	r26, 0x03	; 3
    18cc:	e9 59       	subi	r30, 0x99	; 153
    18ce:	ff 4a       	sbci	r31, 0xAF	; 175
    18d0:	80 83       	st	Z, r24
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	e0 ea       	ldi	r30, 0xA0	; 160
    18d6:	f6 e0       	ldi	r31, 0x06	; 6
    18d8:	85 83       	std	Z+5, r24	; 0x05
	SPICount +=3;
    18da:	80 91 c6 50 	lds	r24, 0x50C6
    18de:	8d 5f       	subi	r24, 0xFD	; 253
    18e0:	80 93 c6 50 	sts	0x50C6, r24
}
    18e4:	08 95       	ret

000018e6 <__vector_82>:
ISR(TCD0_CCC_vect) {
	sampleCurrentChannel();
}

//final averaging point
ISR(TCD0_CCD_vect) {
    18e6:	1f 92       	push	r1
    18e8:	0f 92       	push	r0
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	0f 92       	push	r0
    18ee:	0b b6       	in	r0, 0x3b	; 59
    18f0:	0f 92       	push	r0
    18f2:	11 24       	eor	r1, r1
    18f4:	2f 93       	push	r18
    18f6:	3f 93       	push	r19
    18f8:	4f 93       	push	r20
    18fa:	5f 93       	push	r21
    18fc:	6f 93       	push	r22
    18fe:	7f 93       	push	r23
    1900:	8f 93       	push	r24
    1902:	9f 93       	push	r25
    1904:	af 93       	push	r26
    1906:	bf 93       	push	r27
    1908:	ef 93       	push	r30
    190a:	ff 93       	push	r31
	sampleCurrentChannel();
    190c:	0e 94 36 0c 	call	0x186c	; 0x186c <sampleCurrentChannel>
	SPICount = 0;
    1910:	10 92 c6 50 	sts	0x50C6, r1
}
    1914:	ff 91       	pop	r31
    1916:	ef 91       	pop	r30
    1918:	bf 91       	pop	r27
    191a:	af 91       	pop	r26
    191c:	9f 91       	pop	r25
    191e:	8f 91       	pop	r24
    1920:	7f 91       	pop	r23
    1922:	6f 91       	pop	r22
    1924:	5f 91       	pop	r21
    1926:	4f 91       	pop	r20
    1928:	3f 91       	pop	r19
    192a:	2f 91       	pop	r18
    192c:	0f 90       	pop	r0
    192e:	0b be       	out	0x3b, r0	; 59
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	0f 90       	pop	r0
    1936:	1f 90       	pop	r1
    1938:	18 95       	reti

0000193a <__vector_81>:
ISR(TCD0_CCB_vect) {
	sampleCurrentChannel();
}

//third averaging point
ISR(TCD0_CCC_vect) {
    193a:	1f 92       	push	r1
    193c:	0f 92       	push	r0
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	0f 92       	push	r0
    1942:	0b b6       	in	r0, 0x3b	; 59
    1944:	0f 92       	push	r0
    1946:	11 24       	eor	r1, r1
    1948:	2f 93       	push	r18
    194a:	3f 93       	push	r19
    194c:	4f 93       	push	r20
    194e:	5f 93       	push	r21
    1950:	6f 93       	push	r22
    1952:	7f 93       	push	r23
    1954:	8f 93       	push	r24
    1956:	9f 93       	push	r25
    1958:	af 93       	push	r26
    195a:	bf 93       	push	r27
    195c:	ef 93       	push	r30
    195e:	ff 93       	push	r31
	sampleCurrentChannel();
    1960:	0e 94 36 0c 	call	0x186c	; 0x186c <sampleCurrentChannel>
}
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0b be       	out	0x3b, r0	; 59
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <__vector_80>:
//first averaging point
ISR(TCD0_CCA_vect) {
	sampleCurrentChannel();
}
//second averaging point
ISR(TCD0_CCB_vect) {
    198a:	1f 92       	push	r1
    198c:	0f 92       	push	r0
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	0f 92       	push	r0
    1992:	0b b6       	in	r0, 0x3b	; 59
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	2f 93       	push	r18
    199a:	3f 93       	push	r19
    199c:	4f 93       	push	r20
    199e:	5f 93       	push	r21
    19a0:	6f 93       	push	r22
    19a2:	7f 93       	push	r23
    19a4:	8f 93       	push	r24
    19a6:	9f 93       	push	r25
    19a8:	af 93       	push	r26
    19aa:	bf 93       	push	r27
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
	sampleCurrentChannel();
    19b0:	0e 94 36 0c 	call	0x186c	; 0x186c <sampleCurrentChannel>
}
    19b4:	ff 91       	pop	r31
    19b6:	ef 91       	pop	r30
    19b8:	bf 91       	pop	r27
    19ba:	af 91       	pop	r26
    19bc:	9f 91       	pop	r25
    19be:	8f 91       	pop	r24
    19c0:	7f 91       	pop	r23
    19c2:	6f 91       	pop	r22
    19c4:	5f 91       	pop	r21
    19c6:	4f 91       	pop	r20
    19c8:	3f 91       	pop	r19
    19ca:	2f 91       	pop	r18
    19cc:	0f 90       	pop	r0
    19ce:	0b be       	out	0x3b, r0	; 59
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <__vector_79>:
// 	enableADCMUX(FALSE);
	
}

//first averaging point
ISR(TCD0_CCA_vect) {
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	0b b6       	in	r0, 0x3b	; 59
    19e4:	0f 92       	push	r0
    19e6:	11 24       	eor	r1, r1
    19e8:	2f 93       	push	r18
    19ea:	3f 93       	push	r19
    19ec:	4f 93       	push	r20
    19ee:	5f 93       	push	r21
    19f0:	6f 93       	push	r22
    19f2:	7f 93       	push	r23
    19f4:	8f 93       	push	r24
    19f6:	9f 93       	push	r25
    19f8:	af 93       	push	r26
    19fa:	bf 93       	push	r27
    19fc:	ef 93       	push	r30
    19fe:	ff 93       	push	r31
	sampleCurrentChannel();
    1a00:	0e 94 36 0c 	call	0x186c	; 0x186c <sampleCurrentChannel>
}
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	0f 90       	pop	r0
    1a1e:	0b be       	out	0x3b, r0	; 59
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <__vector_19>:
ISR(TCC0_CCC_vect) {
	sampleCurrentChannel();
}

//final averaging point. Also change ADC channel to sample the next accelerometer axis
ISR(TCC0_CCD_vect) {
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	0b b6       	in	r0, 0x3b	; 59
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
	sampleCurrentChannel();
    1a50:	0e 94 36 0c 	call	0x186c	; 0x186c <sampleCurrentChannel>
	SPICount = 0;
    1a54:	10 92 c6 50 	sts	0x50C6, r1
	if(PORTB.OUT & PIN1_bm) {
    1a58:	e0 e2       	ldi	r30, 0x20	; 32
    1a5a:	f6 e0       	ldi	r31, 0x06	; 6
    1a5c:	84 81       	ldd	r24, Z+4	; 0x04
    1a5e:	81 ff       	sbrs	r24, 1
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <__vector_19+0x56>
		if (PORTA.OUT & PIN6_bm) PORTB.OUTTGL = PIN1_bm;
    1a62:	e0 e0       	ldi	r30, 0x00	; 0
    1a64:	f6 e0       	ldi	r31, 0x06	; 6
    1a66:	84 81       	ldd	r24, Z+4	; 0x04
    1a68:	86 ff       	sbrs	r24, 6
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <__vector_19+0x4c>
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	e0 e2       	ldi	r30, 0x20	; 32
    1a70:	f6 e0       	ldi	r31, 0x06	; 6
    1a72:	87 83       	std	Z+7, r24	; 0x07
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <__vector_19+0x66>
		else PORTA.OUTTGL = PIN6_bm;
    1a76:	80 e4       	ldi	r24, 0x40	; 64
    1a78:	e0 e0       	ldi	r30, 0x00	; 0
    1a7a:	f6 e0       	ldi	r31, 0x06	; 6
    1a7c:	87 83       	std	Z+7, r24	; 0x07
    1a7e:	08 c0       	rjmp	.+16     	; 0x1a90 <__vector_19+0x66>
	} else {
		PORTA.OUTCLR = PIN6_bm;
    1a80:	80 e4       	ldi	r24, 0x40	; 64
    1a82:	e0 e0       	ldi	r30, 0x00	; 0
    1a84:	f6 e0       	ldi	r31, 0x06	; 6
    1a86:	86 83       	std	Z+6, r24	; 0x06
		PORTB.OUTSET = PIN1_bm;
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	e0 e2       	ldi	r30, 0x20	; 32
    1a8c:	f6 e0       	ldi	r31, 0x06	; 6
    1a8e:	85 83       	std	Z+5, r24	; 0x05
	}
	
}
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0b be       	out	0x3b, r0	; 59
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <__vector_18>:
ISR(TCC0_CCB_vect) {
	sampleCurrentChannel();
}

//third averaging point
ISR(TCC0_CCC_vect) {
    1ab6:	1f 92       	push	r1
    1ab8:	0f 92       	push	r0
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	0f 92       	push	r0
    1abe:	0b b6       	in	r0, 0x3b	; 59
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	2f 93       	push	r18
    1ac6:	3f 93       	push	r19
    1ac8:	4f 93       	push	r20
    1aca:	5f 93       	push	r21
    1acc:	6f 93       	push	r22
    1ace:	7f 93       	push	r23
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	af 93       	push	r26
    1ad6:	bf 93       	push	r27
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
	sampleCurrentChannel();
    1adc:	0e 94 36 0c 	call	0x186c	; 0x186c <sampleCurrentChannel>
}
    1ae0:	ff 91       	pop	r31
    1ae2:	ef 91       	pop	r30
    1ae4:	bf 91       	pop	r27
    1ae6:	af 91       	pop	r26
    1ae8:	9f 91       	pop	r25
    1aea:	8f 91       	pop	r24
    1aec:	7f 91       	pop	r23
    1aee:	6f 91       	pop	r22
    1af0:	5f 91       	pop	r21
    1af2:	4f 91       	pop	r20
    1af4:	3f 91       	pop	r19
    1af6:	2f 91       	pop	r18
    1af8:	0f 90       	pop	r0
    1afa:	0b be       	out	0x3b, r0	; 59
    1afc:	0f 90       	pop	r0
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	0f 90       	pop	r0
    1b02:	1f 90       	pop	r1
    1b04:	18 95       	reti

00001b06 <__vector_17>:
ISR(TCC0_CCA_vect) {
	sampleCurrentChannel();
}

//second averaging point
ISR(TCC0_CCB_vect) {
    1b06:	1f 92       	push	r1
    1b08:	0f 92       	push	r0
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	0f 92       	push	r0
    1b0e:	0b b6       	in	r0, 0x3b	; 59
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	4f 93       	push	r20
    1b1a:	5f 93       	push	r21
    1b1c:	6f 93       	push	r22
    1b1e:	7f 93       	push	r23
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	af 93       	push	r26
    1b26:	bf 93       	push	r27
    1b28:	ef 93       	push	r30
    1b2a:	ff 93       	push	r31
	sampleCurrentChannel();
    1b2c:	0e 94 36 0c 	call	0x186c	; 0x186c <sampleCurrentChannel>
}
    1b30:	ff 91       	pop	r31
    1b32:	ef 91       	pop	r30
    1b34:	bf 91       	pop	r27
    1b36:	af 91       	pop	r26
    1b38:	9f 91       	pop	r25
    1b3a:	8f 91       	pop	r24
    1b3c:	7f 91       	pop	r23
    1b3e:	6f 91       	pop	r22
    1b40:	5f 91       	pop	r21
    1b42:	4f 91       	pop	r20
    1b44:	3f 91       	pop	r19
    1b46:	2f 91       	pop	r18
    1b48:	0f 90       	pop	r0
    1b4a:	0b be       	out	0x3b, r0	; 59
    1b4c:	0f 90       	pop	r0
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	0f 90       	pop	r0
    1b52:	1f 90       	pop	r1
    1b54:	18 95       	reti

00001b56 <__vector_16>:
// 	enableADCMUX(FALSE);
	//ADCPower(FALSE);
}

//first averaging point
ISR(TCC0_CCA_vect) {
    1b56:	1f 92       	push	r1
    1b58:	0f 92       	push	r0
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	0f 92       	push	r0
    1b5e:	0b b6       	in	r0, 0x3b	; 59
    1b60:	0f 92       	push	r0
    1b62:	11 24       	eor	r1, r1
    1b64:	2f 93       	push	r18
    1b66:	3f 93       	push	r19
    1b68:	4f 93       	push	r20
    1b6a:	5f 93       	push	r21
    1b6c:	6f 93       	push	r22
    1b6e:	7f 93       	push	r23
    1b70:	8f 93       	push	r24
    1b72:	9f 93       	push	r25
    1b74:	af 93       	push	r26
    1b76:	bf 93       	push	r27
    1b78:	ef 93       	push	r30
    1b7a:	ff 93       	push	r31
	sampleCurrentChannel();
    1b7c:	0e 94 36 0c 	call	0x186c	; 0x186c <sampleCurrentChannel>
}
    1b80:	ff 91       	pop	r31
    1b82:	ef 91       	pop	r30
    1b84:	bf 91       	pop	r27
    1b86:	af 91       	pop	r26
    1b88:	9f 91       	pop	r25
    1b8a:	8f 91       	pop	r24
    1b8c:	7f 91       	pop	r23
    1b8e:	6f 91       	pop	r22
    1b90:	5f 91       	pop	r21
    1b92:	4f 91       	pop	r20
    1b94:	3f 91       	pop	r19
    1b96:	2f 91       	pop	r18
    1b98:	0f 90       	pop	r0
    1b9a:	0b be       	out	0x3b, r0	; 59
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <writeSE2FRAM>:
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	28 97       	sbiw	r28, 0x08	; 8
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	de bf       	out	0x3e, r29	; 62
	volatile int32_t sum = 0;
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	1a 82       	std	Y+2, r1	; 0x02
    1bbe:	1b 82       	std	Y+3, r1	; 0x03
    1bc0:	1c 82       	std	Y+4, r1	; 0x04
	volatile int32_t currentSample;
	sampleCount++;
    1bc2:	80 91 74 50 	lds	r24, 0x5074
    1bc6:	90 91 75 50 	lds	r25, 0x5075
    1bca:	a0 91 76 50 	lds	r26, 0x5076
    1bce:	b0 91 77 50 	lds	r27, 0x5077
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	a1 1d       	adc	r26, r1
    1bd6:	b1 1d       	adc	r27, r1
    1bd8:	80 93 74 50 	sts	0x5074, r24
    1bdc:	90 93 75 50 	sts	0x5075, r25
    1be0:	a0 93 76 50 	sts	0x5076, r26
    1be4:	b0 93 77 50 	sts	0x5077, r27
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    1be8:	80 ed       	ldi	r24, 0xD0	; 208
    1bea:	80 93 c0 08 	sts	0x08C0, r24
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    1bf2:	05 e6       	ldi	r16, 0x65	; 101
    1bf4:	10 e5       	ldi	r17, 0x50	; 80
    1bf6:	ff 24       	eor	r15, r15
    1bf8:	fa 94       	dec	r15
    1bfa:	c9 01       	movw	r24, r18
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	e2 0f       	add	r30, r18
    1c00:	f3 1f       	adc	r31, r19
    1c02:	40 81       	ld	r20, Z
    1c04:	44 23       	and	r20, r20
    1c06:	14 f4       	brge	.+4      	; 0x1c0c <writeSE2FRAM+0x66>
    1c08:	f8 86       	std	Y+8, r15	; 0x08
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <writeSE2FRAM+0x68>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    1c0c:	18 86       	std	Y+8, r1	; 0x08
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    1c0e:	80 0f       	add	r24, r16
    1c10:	91 1f       	adc	r25, r17
    1c12:	fc 01       	movw	r30, r24
    1c14:	80 81       	ld	r24, Z
    1c16:	8f 83       	std	Y+7, r24	; 0x07
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    1c18:	f9 01       	movw	r30, r18
    1c1a:	31 96       	adiw	r30, 0x01	; 1
	
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    1c1c:	e0 0f       	add	r30, r16
    1c1e:	f1 1f       	adc	r31, r17
    1c20:	80 81       	ld	r24, Z
    1c22:	8e 83       	std	Y+6, r24	; 0x06
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    1c24:	f9 01       	movw	r30, r18
    1c26:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    1c28:	e0 0f       	add	r30, r16
    1c2a:	f1 1f       	adc	r31, r17
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
		sum += currentSample;
    1c30:	49 81       	ldd	r20, Y+1	; 0x01
    1c32:	5a 81       	ldd	r21, Y+2	; 0x02
    1c34:	6b 81       	ldd	r22, Y+3	; 0x03
    1c36:	7c 81       	ldd	r23, Y+4	; 0x04
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	af 81       	ldd	r26, Y+7	; 0x07
    1c3e:	b8 85       	ldd	r27, Y+8	; 0x08
    1c40:	84 0f       	add	r24, r20
    1c42:	95 1f       	adc	r25, r21
    1c44:	a6 1f       	adc	r26, r22
    1c46:	b7 1f       	adc	r27, r23
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	ab 83       	std	Y+3, r26	; 0x03
    1c4e:	bc 83       	std	Y+4, r27	; 0x04
    1c50:	2d 5f       	subi	r18, 0xFD	; 253
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile int32_t currentSample;
	sampleCount++;
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	
	for(uint8_t i = 0; i < 12; i+=3) {
    1c54:	2c 30       	cpi	r18, 0x0C	; 12
    1c56:	31 05       	cpc	r19, r1
    1c58:	81 f6       	brne	.-96     	; 0x1bfa <writeSE2FRAM+0x54>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
	
	sum = sum / 4;
    1c5a:	69 81       	ldd	r22, Y+1	; 0x01
    1c5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	24 e0       	ldi	r18, 0x04	; 4
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__divmodsi4>
    1c6e:	29 83       	std	Y+1, r18	; 0x01
    1c70:	3a 83       	std	Y+2, r19	; 0x02
    1c72:	4b 83       	std	Y+3, r20	; 0x03
    1c74:	5c 83       	std	Y+4, r21	; 0x04
	SPIBuffer[2] = *(((uint8_t*)&sum)+0);
    1c76:	29 81       	ldd	r18, Y+1	; 0x01
    1c78:	87 e6       	ldi	r24, 0x67	; 103
    1c7a:	90 e5       	ldi	r25, 0x50	; 80
    1c7c:	20 93 67 50 	sts	0x5067, r18
	SPIBuffer[1] = *(((uint8_t*)&sum)+1);
    1c80:	2a 81       	ldd	r18, Y+2	; 0x02
    1c82:	fc 01       	movw	r30, r24
    1c84:	31 97       	sbiw	r30, 0x01	; 1
    1c86:	20 83       	st	Z, r18
	SPIBuffer[0] = *(((uint8_t*)&sum)+2);
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	02 97       	sbiw	r24, 0x02	; 2
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	20 83       	st	Z, r18


	
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    1c90:	80 e1       	ldi	r24, 0x10	; 16
    1c92:	e0 e4       	ldi	r30, 0x40	; 64
    1c94:	f6 e0       	ldi	r31, 0x06	; 6
    1c96:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    1c98:	88 e0       	ldi	r24, 0x08	; 8
    1c9a:	e0 e2       	ldi	r30, 0x20	; 32
    1c9c:	f6 e0       	ldi	r31, 0x06	; 6
    1c9e:	86 83       	std	Z+6, r24	; 0x06
	nop();
    1ca0:	00 00       	nop
	SPIC.DATA = FR_WREN;
    1ca2:	86 e0       	ldi	r24, 0x06	; 6
    1ca4:	e0 ec       	ldi	r30, 0xC0	; 192
    1ca6:	f8 e0       	ldi	r31, 0x08	; 8
    1ca8:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	88 23       	and	r24, r24
    1cae:	ec f7       	brge	.-6      	; 0x1caa <writeSE2FRAM+0x104>
	SPIBuffer[12] = SPIC.DATA;
    1cb0:	e0 ec       	ldi	r30, 0xC0	; 192
    1cb2:	f8 e0       	ldi	r31, 0x08	; 8
    1cb4:	83 81       	ldd	r24, Z+3	; 0x03
    1cb6:	80 93 71 50 	sts	0x5071, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
    1cba:	a0 e2       	ldi	r26, 0x20	; 32
    1cbc:	b6 e0       	ldi	r27, 0x06	; 6
    1cbe:	88 e0       	ldi	r24, 0x08	; 8
    1cc0:	15 96       	adiw	r26, 0x05	; 5
    1cc2:	8c 93       	st	X, r24
    1cc4:	15 97       	sbiw	r26, 0x05	; 5
	nop(); // time for CS_FRAM to accept high signal
    1cc6:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    1cc8:	16 96       	adiw	r26, 0x06	; 6
    1cca:	8c 93       	st	X, r24
    1ccc:	16 97       	sbiw	r26, 0x06	; 6
	nop();
    1cce:	00 00       	nop
	SPIC.DATA = FR_WRITE;
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	88 23       	and	r24, r24
    1cd8:	ec f7       	brge	.-6      	; 0x1cd4 <writeSE2FRAM+0x12e>
	SPIBuffer[12] = SPIC.DATA;
    1cda:	e0 ec       	ldi	r30, 0xC0	; 192
    1cdc:	f8 e0       	ldi	r31, 0x08	; 8
    1cde:	83 81       	ldd	r24, Z+3	; 0x03
    1ce0:	80 93 71 50 	sts	0x5071, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    1ce4:	80 91 58 40 	lds	r24, 0x4058
    1ce8:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	88 23       	and	r24, r24
    1cee:	ec f7       	brge	.-6      	; 0x1cea <writeSE2FRAM+0x144>
	SPIBuffer[12] = SPIC.DATA;
    1cf0:	e0 ec       	ldi	r30, 0xC0	; 192
    1cf2:	f8 e0       	ldi	r31, 0x08	; 8
    1cf4:	83 81       	ldd	r24, Z+3	; 0x03
    1cf6:	80 93 71 50 	sts	0x5071, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
    1cfa:	80 91 57 40 	lds	r24, 0x4057
    1cfe:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	88 23       	and	r24, r24
    1d04:	ec f7       	brge	.-6      	; 0x1d00 <writeSE2FRAM+0x15a>
	SPIBuffer[12] = SPIC.DATA;
    1d06:	e0 ec       	ldi	r30, 0xC0	; 192
    1d08:	f8 e0       	ldi	r31, 0x08	; 8
    1d0a:	83 81       	ldd	r24, Z+3	; 0x03
    1d0c:	80 93 71 50 	sts	0x5071, r24
	SPIC.DATA = SPIBuffer[0];
    1d10:	80 91 65 50 	lds	r24, 0x5065
    1d14:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	88 23       	and	r24, r24
    1d1a:	ec f7       	brge	.-6      	; 0x1d16 <writeSE2FRAM+0x170>
	SPIBuffer[12] = SPIC.DATA;
    1d1c:	e0 ec       	ldi	r30, 0xC0	; 192
    1d1e:	f8 e0       	ldi	r31, 0x08	; 8
    1d20:	83 81       	ldd	r24, Z+3	; 0x03
    1d22:	80 93 71 50 	sts	0x5071, r24
	SPIC.DATA = SPIBuffer[1];
    1d26:	80 91 66 50 	lds	r24, 0x5066
    1d2a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	88 23       	and	r24, r24
    1d30:	ec f7       	brge	.-6      	; 0x1d2c <writeSE2FRAM+0x186>
	SPIBuffer[12] = SPIC.DATA;
    1d32:	e0 ec       	ldi	r30, 0xC0	; 192
    1d34:	f8 e0       	ldi	r31, 0x08	; 8
    1d36:	83 81       	ldd	r24, Z+3	; 0x03
    1d38:	80 93 71 50 	sts	0x5071, r24
	SPIC.DATA = SPIBuffer[2];
    1d3c:	80 91 67 50 	lds	r24, 0x5067
    1d40:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	88 23       	and	r24, r24
    1d46:	ec f7       	brge	.-6      	; 0x1d42 <writeSE2FRAM+0x19c>
	SPIBuffer[12] = SPIC.DATA;
    1d48:	a0 ec       	ldi	r26, 0xC0	; 192
    1d4a:	b8 e0       	ldi	r27, 0x08	; 8
    1d4c:	13 96       	adiw	r26, 0x03	; 3
    1d4e:	8c 91       	ld	r24, X
    1d50:	13 97       	sbiw	r26, 0x03	; 3
    1d52:	80 93 71 50 	sts	0x5071, r24
	
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    1d56:	88 e0       	ldi	r24, 0x08	; 8
    1d58:	e0 e2       	ldi	r30, 0x20	; 32
    1d5a:	f6 e0       	ldi	r31, 0x06	; 6
    1d5c:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    1d5e:	e0 e4       	ldi	r30, 0x40	; 64
    1d60:	f6 e0       	ldi	r31, 0x06	; 6
    1d62:	80 e1       	ldi	r24, 0x10	; 16
    1d64:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    1d66:	94 e5       	ldi	r25, 0x54	; 84
    1d68:	9c 93       	st	X, r25
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    1d6a:	86 83       	std	Z+6, r24	; 0x06
	
	FRAMAddress +=3;
    1d6c:	80 91 57 40 	lds	r24, 0x4057
    1d70:	90 91 58 40 	lds	r25, 0x4058
    1d74:	03 96       	adiw	r24, 0x03	; 3
    1d76:	80 93 57 40 	sts	0x4057, r24
    1d7a:	90 93 58 40 	sts	0x4058, r25
	checksumADC[0] += SPIBuffer[0];
    1d7e:	80 91 3b 21 	lds	r24, 0x213B
    1d82:	e5 e6       	ldi	r30, 0x65	; 101
    1d84:	f0 e5       	ldi	r31, 0x50	; 80
    1d86:	90 81       	ld	r25, Z
    1d88:	89 0f       	add	r24, r25
    1d8a:	80 93 3b 21 	sts	0x213B, r24
	checksumADC[1] += SPIBuffer[1];
    1d8e:	80 91 3c 21 	lds	r24, 0x213C
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	89 0f       	add	r24, r25
    1d96:	80 93 3c 21 	sts	0x213C, r24
	checksumADC[2] += SPIBuffer[2];
    1d9a:	80 91 3d 21 	lds	r24, 0x213D
    1d9e:	92 81       	ldd	r25, Z+2	; 0x02
    1da0:	89 0f       	add	r24, r25
    1da2:	80 93 3d 21 	sts	0x213D, r24
}
    1da6:	28 96       	adiw	r28, 0x08	; 8
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	08 95       	ret

00001db8 <calcChecksumFRAM>:

//calcuate checksum for FRAM. Not used
void calcChecksumFRAM() {
    1db8:	2f 92       	push	r2
    1dba:	3f 92       	push	r3
    1dbc:	4f 92       	push	r4
    1dbe:	5f 92       	push	r5
    1dc0:	6f 92       	push	r6
    1dc2:	7f 92       	push	r7
    1dc4:	8f 92       	push	r8
    1dc6:	9f 92       	push	r9
    1dc8:	af 92       	push	r10
    1dca:	bf 92       	push	r11
    1dcc:	cf 92       	push	r12
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <calcChecksumFRAM+0x26>
    1dde:	0f 92       	push	r0
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
    1de4:	eb e9       	ldi	r30, 0x9B	; 155
    1de6:	f0 e5       	ldi	r31, 0x50	; 80
    1de8:	10 92 9b 50 	sts	0x509B, r1
    1dec:	10 92 9c 50 	sts	0x509C, r1
    1df0:	10 92 9d 50 	sts	0x509D, r1
    1df4:	10 92 9e 50 	sts	0x509E, r1
    1df8:	10 92 9f 50 	sts	0x509F, r1
    1dfc:	10 92 a0 50 	sts	0x50A0, r1
    1e00:	10 92 a1 50 	sts	0x50A1, r1
    1e04:	10 92 a2 50 	sts	0x50A2, r1
    1e08:	df 01       	movw	r26, r30
    1e0a:	18 97       	sbiw	r26, 0x08	; 8
    1e0c:	1c 92       	st	X, r1
    1e0e:	11 96       	adiw	r26, 0x01	; 1
    1e10:	1c 92       	st	X, r1
    1e12:	11 97       	sbiw	r26, 0x01	; 1
    1e14:	12 96       	adiw	r26, 0x02	; 2
    1e16:	1c 92       	st	X, r1
    1e18:	12 97       	sbiw	r26, 0x02	; 2
    1e1a:	13 96       	adiw	r26, 0x03	; 3
    1e1c:	1c 92       	st	X, r1
    1e1e:	13 97       	sbiw	r26, 0x03	; 3
    1e20:	14 96       	adiw	r26, 0x04	; 4
    1e22:	1c 92       	st	X, r1
    1e24:	14 97       	sbiw	r26, 0x04	; 4
    1e26:	15 96       	adiw	r26, 0x05	; 5
    1e28:	1c 92       	st	X, r1
    1e2a:	15 97       	sbiw	r26, 0x05	; 5
    1e2c:	16 96       	adiw	r26, 0x06	; 6
    1e2e:	1c 92       	st	X, r1
    1e30:	16 97       	sbiw	r26, 0x06	; 6
    1e32:	17 96       	adiw	r26, 0x07	; 7
    1e34:	1c 92       	st	X, r1
    1e36:	70 97       	sbiw	r30, 0x10	; 16
    1e38:	10 82       	st	Z, r1
    1e3a:	11 82       	std	Z+1, r1	; 0x01
    1e3c:	12 82       	std	Z+2, r1	; 0x02
    1e3e:	13 82       	std	Z+3, r1	; 0x03
    1e40:	14 82       	std	Z+4, r1	; 0x04
    1e42:	15 82       	std	Z+5, r1	; 0x05
    1e44:	16 82       	std	Z+6, r1	; 0x06
    1e46:	17 82       	std	Z+7, r1	; 0x07
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
    1e48:	8a e3       	ldi	r24, 0x3A	; 58
    1e4a:	91 e2       	ldi	r25, 0x21	; 33
    1e4c:	10 92 3a 21 	sts	0x213A, r1
    1e50:	fc 01       	movw	r30, r24
    1e52:	31 97       	sbiw	r30, 0x01	; 1
    1e54:	10 82       	st	Z, r1
    1e56:	02 97       	sbiw	r24, 0x02	; 2
    1e58:	dc 01       	movw	r26, r24
    1e5a:	1c 92       	st	X, r1
	FRAMAddress = FR_BASEADD;
    1e5c:	10 92 57 40 	sts	0x4057, r1
    1e60:	10 92 58 40 	sts	0x4058, r1
    1e64:	e9 e0       	ldi	r30, 0x09	; 9
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	e9 83       	std	Y+1, r30	; 0x01
    1e6a:	fa 83       	std	Y+2, r31	; 0x02
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
			
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    1e6c:	99 24       	eor	r9, r9
    1e6e:	9a 94       	dec	r9
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
			if(k%9 == 8) sumFRAM[2] += *temp64;
    1e70:	0f 2e       	mov	r0, r31
    1e72:	fb e9       	ldi	r31, 0x9B	; 155
    1e74:	ef 2e       	mov	r14, r31
    1e76:	f0 e5       	ldi	r31, 0x50	; 80
    1e78:	ff 2e       	mov	r15, r31
    1e7a:	f0 2d       	mov	r31, r0
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
    1e7c:	0f 2e       	mov	r0, r31
    1e7e:	f3 e9       	ldi	r31, 0x93	; 147
    1e80:	cf 2e       	mov	r12, r31
    1e82:	f0 e5       	ldi	r31, 0x50	; 80
    1e84:	df 2e       	mov	r13, r31
    1e86:	f0 2d       	mov	r31, r0
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    1e88:	0f 2e       	mov	r0, r31
    1e8a:	fb e8       	ldi	r31, 0x8B	; 139
    1e8c:	af 2e       	mov	r10, r31
    1e8e:	f0 e5       	ldi	r31, 0x50	; 80
    1e90:	bf 2e       	mov	r11, r31
    1e92:	f0 2d       	mov	r31, r0
void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
    1e94:	81 e7       	ldi	r24, 0x71	; 113
    1e96:	9c e1       	ldi	r25, 0x1C	; 28
    1e98:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <readFRAM>
		FRAMAddress += FR_READ_BUFFER_SIZE;
    1e9c:	80 91 57 40 	lds	r24, 0x4057
    1ea0:	90 91 58 40 	lds	r25, 0x4058
    1ea4:	8f 58       	subi	r24, 0x8F	; 143
    1ea6:	93 4e       	sbci	r25, 0xE3	; 227
    1ea8:	80 93 57 40 	sts	0x4057, r24
    1eac:	90 93 58 40 	sts	0x4058, r25
    1eb0:	0f ed       	ldi	r16, 0xDF	; 223
    1eb2:	13 e2       	ldi	r17, 0x23	; 35
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    1eb8:	0f 2e       	mov	r0, r31
    1eba:	f9 e0       	ldi	r31, 0x09	; 9
    1ebc:	2f 2e       	mov	r2, r31
    1ebe:	33 24       	eor	r3, r3
    1ec0:	f0 2d       	mov	r31, r0
    1ec2:	8b 83       	std	Y+3, r24	; 0x03
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	63 e0       	ldi	r22, 0x03	; 3
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <__udivmodhi4>
    1ed2:	9c 01       	movw	r18, r24
    1ed4:	e8 e3       	ldi	r30, 0x38	; 56
    1ed6:	f1 e2       	ldi	r31, 0x21	; 33
    1ed8:	e8 0f       	add	r30, r24
    1eda:	f9 1f       	adc	r31, r25
    1edc:	90 81       	ld	r25, Z
	checksumADC[1] += SPIBuffer[1];
	checksumADC[2] += SPIBuffer[2];
}

//calcuate checksum for FRAM. Not used
void calcChecksumFRAM() {
    1ede:	a8 01       	movw	r20, r16
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    1ee0:	d8 01       	movw	r26, r16
    1ee2:	8c 91       	ld	r24, X
    1ee4:	98 0f       	add	r25, r24
    1ee6:	90 83       	st	Z, r25
			
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {
    1ee8:	21 15       	cp	r18, r1
    1eea:	31 05       	cpc	r19, r1
    1eec:	19 f5       	brne	.+70     	; 0x1f34 <calcChecksumFRAM+0x17c>
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    1eee:	88 23       	and	r24, r24
    1ef0:	6c f4       	brge	.+26     	; 0x1f0c <calcChecksumFRAM+0x154>
    1ef2:	e0 91 63 50 	lds	r30, 0x5063
    1ef6:	f0 91 64 50 	lds	r31, 0x5064
    1efa:	10 82       	st	Z, r1
    1efc:	11 82       	std	Z+1, r1	; 0x01
    1efe:	12 82       	std	Z+2, r1	; 0x02
    1f00:	93 82       	std	Z+3, r9	; 0x03
    1f02:	94 82       	std	Z+4, r9	; 0x04
    1f04:	95 82       	std	Z+5, r9	; 0x05
    1f06:	96 82       	std	Z+6, r9	; 0x06
    1f08:	97 82       	std	Z+7, r9	; 0x07
    1f0a:	0c c0       	rjmp	.+24     	; 0x1f24 <calcChecksumFRAM+0x16c>
				else *temp64 = 0x0000000000000000;
    1f0c:	e0 91 63 50 	lds	r30, 0x5063
    1f10:	f0 91 64 50 	lds	r31, 0x5064
    1f14:	10 82       	st	Z, r1
    1f16:	11 82       	std	Z+1, r1	; 0x01
    1f18:	12 82       	std	Z+2, r1	; 0x02
    1f1a:	13 82       	std	Z+3, r1	; 0x03
    1f1c:	14 82       	std	Z+4, r1	; 0x04
    1f1e:	15 82       	std	Z+5, r1	; 0x05
    1f20:	16 82       	std	Z+6, r1	; 0x06
    1f22:	17 82       	std	Z+7, r1	; 0x07
				*(((uint8_t*)temp64) + 2) = FRAMReadBuffer[k];
    1f24:	fa 01       	movw	r30, r20
    1f26:	80 81       	ld	r24, Z
    1f28:	e0 91 63 50 	lds	r30, 0x5063
    1f2c:	f0 91 64 50 	lds	r31, 0x5064
    1f30:	82 83       	std	Z+2, r24	; 0x02
    1f32:	10 c0       	rjmp	.+32     	; 0x1f54 <calcChecksumFRAM+0x19c>
			} else if(k%3 == 1) {
    1f34:	21 30       	cpi	r18, 0x01	; 1
    1f36:	31 05       	cpc	r19, r1
    1f38:	31 f4       	brne	.+12     	; 0x1f46 <calcChecksumFRAM+0x18e>
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
    1f3a:	e0 91 63 50 	lds	r30, 0x5063
    1f3e:	f0 91 64 50 	lds	r31, 0x5064
    1f42:	81 83       	std	Z+1, r24	; 0x01
    1f44:	07 c0       	rjmp	.+14     	; 0x1f54 <calcChecksumFRAM+0x19c>
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
    1f46:	e0 91 63 50 	lds	r30, 0x5063
    1f4a:	f0 91 64 50 	lds	r31, 0x5064
    1f4e:	d8 01       	movw	r26, r16
    1f50:	8c 91       	ld	r24, X
    1f52:	80 83       	st	Z, r24
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	b1 01       	movw	r22, r2
    1f5a:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <__udivmodhi4>
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <calcChecksumFRAM+0x1ae>
    1f64:	76 c0       	rjmp	.+236    	; 0x2052 <calcChecksumFRAM+0x29a>
    1f66:	f5 01       	movw	r30, r10
    1f68:	60 81       	ld	r22, Z
    1f6a:	51 81       	ldd	r21, Z+1	; 0x01
    1f6c:	42 81       	ldd	r20, Z+2	; 0x02
    1f6e:	33 81       	ldd	r19, Z+3	; 0x03
    1f70:	24 81       	ldd	r18, Z+4	; 0x04
    1f72:	95 81       	ldd	r25, Z+5	; 0x05
    1f74:	86 81       	ldd	r24, Z+6	; 0x06
    1f76:	47 80       	ldd	r4, Z+7	; 0x07
    1f78:	e0 91 63 50 	lds	r30, 0x5063
    1f7c:	f0 91 64 50 	lds	r31, 0x5064
    1f80:	70 81       	ld	r23, Z
    1f82:	a1 81       	ldd	r26, Z+1	; 0x01
    1f84:	b2 81       	ldd	r27, Z+2	; 0x02
    1f86:	83 80       	ldd	r8, Z+3	; 0x03
    1f88:	74 80       	ldd	r7, Z+4	; 0x04
    1f8a:	65 80       	ldd	r6, Z+5	; 0x05
    1f8c:	56 80       	ldd	r5, Z+6	; 0x06
    1f8e:	e7 81       	ldd	r30, Z+7	; 0x07
    1f90:	76 0f       	add	r23, r22
    1f92:	f1 e0       	ldi	r31, 0x01	; 1
    1f94:	76 17       	cp	r23, r22
    1f96:	08 f0       	brcs	.+2      	; 0x1f9a <calcChecksumFRAM+0x1e2>
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	a5 0f       	add	r26, r21
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	a5 17       	cp	r26, r21
    1fa0:	08 f0       	brcs	.+2      	; 0x1fa4 <calcChecksumFRAM+0x1ec>
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	fa 0f       	add	r31, r26
    1fa6:	51 e0       	ldi	r21, 0x01	; 1
    1fa8:	fa 17       	cp	r31, r26
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <calcChecksumFRAM+0x1f6>
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	65 2b       	or	r22, r21
    1fb0:	b4 0f       	add	r27, r20
    1fb2:	51 e0       	ldi	r21, 0x01	; 1
    1fb4:	b4 17       	cp	r27, r20
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <calcChecksumFRAM+0x202>
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	6b 0f       	add	r22, r27
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	6b 17       	cp	r22, r27
    1fc0:	08 f0       	brcs	.+2      	; 0x1fc4 <calcChecksumFRAM+0x20c>
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	54 2b       	or	r21, r20
    1fc6:	83 0e       	add	r8, r19
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	83 16       	cp	r8, r19
    1fcc:	08 f0       	brcs	.+2      	; 0x1fd0 <calcChecksumFRAM+0x218>
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	58 0d       	add	r21, r8
    1fd2:	31 e0       	ldi	r19, 0x01	; 1
    1fd4:	58 15       	cp	r21, r8
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <calcChecksumFRAM+0x222>
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	43 2b       	or	r20, r19
    1fdc:	72 0e       	add	r7, r18
    1fde:	31 e0       	ldi	r19, 0x01	; 1
    1fe0:	72 16       	cp	r7, r18
    1fe2:	08 f0       	brcs	.+2      	; 0x1fe6 <calcChecksumFRAM+0x22e>
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	47 0d       	add	r20, r7
    1fe8:	21 e0       	ldi	r18, 0x01	; 1
    1fea:	47 15       	cp	r20, r7
    1fec:	08 f0       	brcs	.+2      	; 0x1ff0 <calcChecksumFRAM+0x238>
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	32 2b       	or	r19, r18
    1ff2:	69 0e       	add	r6, r25
    1ff4:	21 e0       	ldi	r18, 0x01	; 1
    1ff6:	69 16       	cp	r6, r25
    1ff8:	08 f0       	brcs	.+2      	; 0x1ffc <calcChecksumFRAM+0x244>
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	36 0d       	add	r19, r6
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	36 15       	cp	r19, r6
    2002:	08 f0       	brcs	.+2      	; 0x2006 <calcChecksumFRAM+0x24e>
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	29 2b       	or	r18, r25
    2008:	58 0e       	add	r5, r24
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	58 16       	cp	r5, r24
    200e:	08 f0       	brcs	.+2      	; 0x2012 <calcChecksumFRAM+0x25a>
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	25 0d       	add	r18, r5
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	25 15       	cp	r18, r5
    2018:	08 f0       	brcs	.+2      	; 0x201c <calcChecksumFRAM+0x264>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	98 2b       	or	r25, r24
    201e:	e4 0d       	add	r30, r4
    2020:	9e 0f       	add	r25, r30
    2022:	d5 01       	movw	r26, r10
    2024:	7c 93       	st	X, r23
    2026:	11 96       	adiw	r26, 0x01	; 1
    2028:	fc 93       	st	X, r31
    202a:	11 97       	sbiw	r26, 0x01	; 1
    202c:	12 96       	adiw	r26, 0x02	; 2
    202e:	6c 93       	st	X, r22
    2030:	12 97       	sbiw	r26, 0x02	; 2
    2032:	13 96       	adiw	r26, 0x03	; 3
    2034:	5c 93       	st	X, r21
    2036:	13 97       	sbiw	r26, 0x03	; 3
    2038:	14 96       	adiw	r26, 0x04	; 4
    203a:	4c 93       	st	X, r20
    203c:	14 97       	sbiw	r26, 0x04	; 4
    203e:	15 96       	adiw	r26, 0x05	; 5
    2040:	3c 93       	st	X, r19
    2042:	15 97       	sbiw	r26, 0x05	; 5
    2044:	16 96       	adiw	r26, 0x06	; 6
    2046:	2c 93       	st	X, r18
    2048:	16 97       	sbiw	r26, 0x06	; 6
    204a:	17 96       	adiw	r26, 0x07	; 7
    204c:	9c 93       	st	X, r25
    204e:	17 97       	sbiw	r26, 0x07	; 7
    2050:	f3 c0       	rjmp	.+486    	; 0x2238 <calcChecksumFRAM+0x480>
			if(k%9 == 5) sumFRAM[1] += *temp64;
    2052:	85 30       	cpi	r24, 0x05	; 5
    2054:	91 05       	cpc	r25, r1
    2056:	09 f0       	breq	.+2      	; 0x205a <calcChecksumFRAM+0x2a2>
    2058:	76 c0       	rjmp	.+236    	; 0x2146 <calcChecksumFRAM+0x38e>
    205a:	f6 01       	movw	r30, r12
    205c:	60 81       	ld	r22, Z
    205e:	51 81       	ldd	r21, Z+1	; 0x01
    2060:	42 81       	ldd	r20, Z+2	; 0x02
    2062:	33 81       	ldd	r19, Z+3	; 0x03
    2064:	24 81       	ldd	r18, Z+4	; 0x04
    2066:	95 81       	ldd	r25, Z+5	; 0x05
    2068:	86 81       	ldd	r24, Z+6	; 0x06
    206a:	47 80       	ldd	r4, Z+7	; 0x07
    206c:	e0 91 63 50 	lds	r30, 0x5063
    2070:	f0 91 64 50 	lds	r31, 0x5064
    2074:	70 81       	ld	r23, Z
    2076:	a1 81       	ldd	r26, Z+1	; 0x01
    2078:	b2 81       	ldd	r27, Z+2	; 0x02
    207a:	83 80       	ldd	r8, Z+3	; 0x03
    207c:	74 80       	ldd	r7, Z+4	; 0x04
    207e:	65 80       	ldd	r6, Z+5	; 0x05
    2080:	56 80       	ldd	r5, Z+6	; 0x06
    2082:	e7 81       	ldd	r30, Z+7	; 0x07
    2084:	76 0f       	add	r23, r22
    2086:	f1 e0       	ldi	r31, 0x01	; 1
    2088:	76 17       	cp	r23, r22
    208a:	08 f0       	brcs	.+2      	; 0x208e <calcChecksumFRAM+0x2d6>
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	a5 0f       	add	r26, r21
    2090:	61 e0       	ldi	r22, 0x01	; 1
    2092:	a5 17       	cp	r26, r21
    2094:	08 f0       	brcs	.+2      	; 0x2098 <calcChecksumFRAM+0x2e0>
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	fa 0f       	add	r31, r26
    209a:	51 e0       	ldi	r21, 0x01	; 1
    209c:	fa 17       	cp	r31, r26
    209e:	08 f0       	brcs	.+2      	; 0x20a2 <calcChecksumFRAM+0x2ea>
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	65 2b       	or	r22, r21
    20a4:	b4 0f       	add	r27, r20
    20a6:	51 e0       	ldi	r21, 0x01	; 1
    20a8:	b4 17       	cp	r27, r20
    20aa:	08 f0       	brcs	.+2      	; 0x20ae <calcChecksumFRAM+0x2f6>
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	6b 0f       	add	r22, r27
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	6b 17       	cp	r22, r27
    20b4:	08 f0       	brcs	.+2      	; 0x20b8 <calcChecksumFRAM+0x300>
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	54 2b       	or	r21, r20
    20ba:	83 0e       	add	r8, r19
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	83 16       	cp	r8, r19
    20c0:	08 f0       	brcs	.+2      	; 0x20c4 <calcChecksumFRAM+0x30c>
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	58 0d       	add	r21, r8
    20c6:	31 e0       	ldi	r19, 0x01	; 1
    20c8:	58 15       	cp	r21, r8
    20ca:	08 f0       	brcs	.+2      	; 0x20ce <calcChecksumFRAM+0x316>
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	43 2b       	or	r20, r19
    20d0:	72 0e       	add	r7, r18
    20d2:	31 e0       	ldi	r19, 0x01	; 1
    20d4:	72 16       	cp	r7, r18
    20d6:	08 f0       	brcs	.+2      	; 0x20da <calcChecksumFRAM+0x322>
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	47 0d       	add	r20, r7
    20dc:	21 e0       	ldi	r18, 0x01	; 1
    20de:	47 15       	cp	r20, r7
    20e0:	08 f0       	brcs	.+2      	; 0x20e4 <calcChecksumFRAM+0x32c>
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	32 2b       	or	r19, r18
    20e6:	69 0e       	add	r6, r25
    20e8:	21 e0       	ldi	r18, 0x01	; 1
    20ea:	69 16       	cp	r6, r25
    20ec:	08 f0       	brcs	.+2      	; 0x20f0 <calcChecksumFRAM+0x338>
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	36 0d       	add	r19, r6
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	36 15       	cp	r19, r6
    20f6:	08 f0       	brcs	.+2      	; 0x20fa <calcChecksumFRAM+0x342>
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	29 2b       	or	r18, r25
    20fc:	58 0e       	add	r5, r24
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	58 16       	cp	r5, r24
    2102:	08 f0       	brcs	.+2      	; 0x2106 <calcChecksumFRAM+0x34e>
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	25 0d       	add	r18, r5
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	25 15       	cp	r18, r5
    210c:	08 f0       	brcs	.+2      	; 0x2110 <calcChecksumFRAM+0x358>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	98 2b       	or	r25, r24
    2112:	e4 0d       	add	r30, r4
    2114:	9e 0f       	add	r25, r30
    2116:	d6 01       	movw	r26, r12
    2118:	7c 93       	st	X, r23
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	fc 93       	st	X, r31
    211e:	11 97       	sbiw	r26, 0x01	; 1
    2120:	12 96       	adiw	r26, 0x02	; 2
    2122:	6c 93       	st	X, r22
    2124:	12 97       	sbiw	r26, 0x02	; 2
    2126:	13 96       	adiw	r26, 0x03	; 3
    2128:	5c 93       	st	X, r21
    212a:	13 97       	sbiw	r26, 0x03	; 3
    212c:	14 96       	adiw	r26, 0x04	; 4
    212e:	4c 93       	st	X, r20
    2130:	14 97       	sbiw	r26, 0x04	; 4
    2132:	15 96       	adiw	r26, 0x05	; 5
    2134:	3c 93       	st	X, r19
    2136:	15 97       	sbiw	r26, 0x05	; 5
    2138:	16 96       	adiw	r26, 0x06	; 6
    213a:	2c 93       	st	X, r18
    213c:	16 97       	sbiw	r26, 0x06	; 6
    213e:	17 96       	adiw	r26, 0x07	; 7
    2140:	9c 93       	st	X, r25
    2142:	17 97       	sbiw	r26, 0x07	; 7
    2144:	79 c0       	rjmp	.+242    	; 0x2238 <calcChecksumFRAM+0x480>
			if(k%9 == 8) sumFRAM[2] += *temp64;
    2146:	88 30       	cpi	r24, 0x08	; 8
    2148:	91 05       	cpc	r25, r1
    214a:	09 f0       	breq	.+2      	; 0x214e <calcChecksumFRAM+0x396>
    214c:	75 c0       	rjmp	.+234    	; 0x2238 <calcChecksumFRAM+0x480>
    214e:	f7 01       	movw	r30, r14
    2150:	60 81       	ld	r22, Z
    2152:	51 81       	ldd	r21, Z+1	; 0x01
    2154:	42 81       	ldd	r20, Z+2	; 0x02
    2156:	33 81       	ldd	r19, Z+3	; 0x03
    2158:	24 81       	ldd	r18, Z+4	; 0x04
    215a:	95 81       	ldd	r25, Z+5	; 0x05
    215c:	86 81       	ldd	r24, Z+6	; 0x06
    215e:	47 80       	ldd	r4, Z+7	; 0x07
    2160:	e0 91 63 50 	lds	r30, 0x5063
    2164:	f0 91 64 50 	lds	r31, 0x5064
    2168:	70 81       	ld	r23, Z
    216a:	a1 81       	ldd	r26, Z+1	; 0x01
    216c:	b2 81       	ldd	r27, Z+2	; 0x02
    216e:	83 80       	ldd	r8, Z+3	; 0x03
    2170:	74 80       	ldd	r7, Z+4	; 0x04
    2172:	65 80       	ldd	r6, Z+5	; 0x05
    2174:	56 80       	ldd	r5, Z+6	; 0x06
    2176:	e7 81       	ldd	r30, Z+7	; 0x07
    2178:	76 0f       	add	r23, r22
    217a:	f1 e0       	ldi	r31, 0x01	; 1
    217c:	76 17       	cp	r23, r22
    217e:	08 f0       	brcs	.+2      	; 0x2182 <calcChecksumFRAM+0x3ca>
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	a5 0f       	add	r26, r21
    2184:	61 e0       	ldi	r22, 0x01	; 1
    2186:	a5 17       	cp	r26, r21
    2188:	08 f0       	brcs	.+2      	; 0x218c <calcChecksumFRAM+0x3d4>
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	fa 0f       	add	r31, r26
    218e:	51 e0       	ldi	r21, 0x01	; 1
    2190:	fa 17       	cp	r31, r26
    2192:	08 f0       	brcs	.+2      	; 0x2196 <calcChecksumFRAM+0x3de>
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	65 2b       	or	r22, r21
    2198:	b4 0f       	add	r27, r20
    219a:	51 e0       	ldi	r21, 0x01	; 1
    219c:	b4 17       	cp	r27, r20
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <calcChecksumFRAM+0x3ea>
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	6b 0f       	add	r22, r27
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	6b 17       	cp	r22, r27
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <calcChecksumFRAM+0x3f4>
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	54 2b       	or	r21, r20
    21ae:	83 0e       	add	r8, r19
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	83 16       	cp	r8, r19
    21b4:	08 f0       	brcs	.+2      	; 0x21b8 <calcChecksumFRAM+0x400>
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	58 0d       	add	r21, r8
    21ba:	31 e0       	ldi	r19, 0x01	; 1
    21bc:	58 15       	cp	r21, r8
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <calcChecksumFRAM+0x40a>
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	43 2b       	or	r20, r19
    21c4:	72 0e       	add	r7, r18
    21c6:	31 e0       	ldi	r19, 0x01	; 1
    21c8:	72 16       	cp	r7, r18
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <calcChecksumFRAM+0x416>
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	47 0d       	add	r20, r7
    21d0:	21 e0       	ldi	r18, 0x01	; 1
    21d2:	47 15       	cp	r20, r7
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <calcChecksumFRAM+0x420>
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	32 2b       	or	r19, r18
    21da:	69 0e       	add	r6, r25
    21dc:	21 e0       	ldi	r18, 0x01	; 1
    21de:	69 16       	cp	r6, r25
    21e0:	08 f0       	brcs	.+2      	; 0x21e4 <calcChecksumFRAM+0x42c>
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	36 0d       	add	r19, r6
    21e6:	91 e0       	ldi	r25, 0x01	; 1
    21e8:	36 15       	cp	r19, r6
    21ea:	08 f0       	brcs	.+2      	; 0x21ee <calcChecksumFRAM+0x436>
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	29 2b       	or	r18, r25
    21f0:	58 0e       	add	r5, r24
    21f2:	91 e0       	ldi	r25, 0x01	; 1
    21f4:	58 16       	cp	r5, r24
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <calcChecksumFRAM+0x442>
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	25 0d       	add	r18, r5
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	25 15       	cp	r18, r5
    2200:	08 f0       	brcs	.+2      	; 0x2204 <calcChecksumFRAM+0x44c>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	98 2b       	or	r25, r24
    2206:	e4 0d       	add	r30, r4
    2208:	9e 0f       	add	r25, r30
    220a:	d7 01       	movw	r26, r14
    220c:	7c 93       	st	X, r23
    220e:	11 96       	adiw	r26, 0x01	; 1
    2210:	fc 93       	st	X, r31
    2212:	11 97       	sbiw	r26, 0x01	; 1
    2214:	12 96       	adiw	r26, 0x02	; 2
    2216:	6c 93       	st	X, r22
    2218:	12 97       	sbiw	r26, 0x02	; 2
    221a:	13 96       	adiw	r26, 0x03	; 3
    221c:	5c 93       	st	X, r21
    221e:	13 97       	sbiw	r26, 0x03	; 3
    2220:	14 96       	adiw	r26, 0x04	; 4
    2222:	4c 93       	st	X, r20
    2224:	14 97       	sbiw	r26, 0x04	; 4
    2226:	15 96       	adiw	r26, 0x05	; 5
    2228:	3c 93       	st	X, r19
    222a:	15 97       	sbiw	r26, 0x05	; 5
    222c:	16 96       	adiw	r26, 0x06	; 6
    222e:	2c 93       	st	X, r18
    2230:	16 97       	sbiw	r26, 0x06	; 6
    2232:	17 96       	adiw	r26, 0x07	; 7
    2234:	9c 93       	st	X, r25
    2236:	17 97       	sbiw	r26, 0x07	; 7
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    2238:	eb 81       	ldd	r30, Y+3	; 0x03
    223a:	fc 81       	ldd	r31, Y+4	; 0x04
    223c:	31 96       	adiw	r30, 0x01	; 1
    223e:	eb 83       	std	Y+3, r30	; 0x03
    2240:	fc 83       	std	Y+4, r31	; 0x04
    2242:	0f 5f       	subi	r16, 0xFF	; 255
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	2c e1       	ldi	r18, 0x1C	; 28
    2248:	e1 37       	cpi	r30, 0x71	; 113
    224a:	f2 07       	cpc	r31, r18
    224c:	09 f0       	breq	.+2      	; 0x2250 <calcChecksumFRAM+0x498>
    224e:	3b ce       	rjmp	.-906    	; 0x1ec6 <calcChecksumFRAM+0x10e>
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	9a 83       	std	Y+2, r25	; 0x02
//calcuate checksum for FRAM. Not used
void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	09 f0       	breq	.+2      	; 0x2260 <calcChecksumFRAM+0x4a8>
    225e:	1a ce       	rjmp	.-972    	; 0x1e94 <calcChecksumFRAM+0xdc>
			
		}
		
	}
	
}
    2260:	24 96       	adiw	r28, 0x04	; 4
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	bf 90       	pop	r11
    2278:	af 90       	pop	r10
    227a:	9f 90       	pop	r9
    227c:	8f 90       	pop	r8
    227e:	7f 90       	pop	r7
    2280:	6f 90       	pop	r6
    2282:	5f 90       	pop	r5
    2284:	4f 90       	pop	r4
    2286:	3f 90       	pop	r3
    2288:	2f 90       	pop	r2
    228a:	08 95       	ret

0000228c <FRAMWriteKnowns>:

//test function for FRAM
void FRAMWriteKnowns() {
    228c:	2f 92       	push	r2
    228e:	3f 92       	push	r3
    2290:	4f 92       	push	r4
    2292:	5f 92       	push	r5
    2294:	6f 92       	push	r6
    2296:	7f 92       	push	r7
    2298:	8f 92       	push	r8
    229a:	9f 92       	push	r9
    229c:	af 92       	push	r10
    229e:	bf 92       	push	r11
    22a0:	cf 92       	push	r12
    22a2:	df 92       	push	r13
    22a4:	ef 92       	push	r14
    22a6:	ff 92       	push	r15
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
	FRAMAddress = FR_BASEADD;
    22b0:	10 92 57 40 	sts	0x4057, r1
    22b4:	10 92 58 40 	sts	0x4058, r1
	sampleCount = 0;
    22b8:	10 92 74 50 	sts	0x5074, r1
    22bc:	10 92 75 50 	sts	0x5075, r1
    22c0:	10 92 76 50 	sts	0x5076, r1
    22c4:	10 92 77 50 	sts	0x5077, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    22c8:	8d e3       	ldi	r24, 0x3D	; 61
    22ca:	91 e2       	ldi	r25, 0x21	; 33
    22cc:	10 92 3d 21 	sts	0x213D, r1
    22d0:	fc 01       	movw	r30, r24
    22d2:	31 97       	sbiw	r30, 0x01	; 1
    22d4:	10 82       	st	Z, r1
    22d6:	02 97       	sbiw	r24, 0x02	; 2
    22d8:	dc 01       	movw	r26, r24
    22da:	1c 92       	st	X, r1
	
	ADCPower(TRUE);
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	SPIInit(SPI_MODE_1_gc);
    22e2:	84 e0       	ldi	r24, 0x04	; 4
    22e4:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    22e8:	80 ed       	ldi	r24, 0xD0	; 208
    22ea:	80 93 c0 08 	sts	0x08C0, r24
	SPIBuffer[0] = 0x0D;
    22ee:	8d e0       	ldi	r24, 0x0D	; 13
    22f0:	80 93 65 50 	sts	0x5065, r24
	SPIBuffer[1] = 0xF3;
    22f4:	83 ef       	ldi	r24, 0xF3	; 243
    22f6:	80 93 66 50 	sts	0x5066, r24
	SPIBuffer[2] = 0x57;
    22fa:	87 e5       	ldi	r24, 0x57	; 87
    22fc:	80 93 67 50 	sts	0x5067, r24
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    2300:	80 91 74 50 	lds	r24, 0x5074
    2304:	90 91 75 50 	lds	r25, 0x5075
    2308:	a0 91 76 50 	lds	r26, 0x5076
    230c:	b0 91 77 50 	lds	r27, 0x5077
    2310:	83 35       	cpi	r24, 0x53	; 83
    2312:	e5 e5       	ldi	r30, 0x55	; 85
    2314:	9e 07       	cpc	r25, r30
    2316:	e0 e0       	ldi	r30, 0x00	; 0
    2318:	ae 07       	cpc	r26, r30
    231a:	e0 e0       	ldi	r30, 0x00	; 0
    231c:	be 07       	cpc	r27, r30
    231e:	08 f0       	brcs	.+2      	; 0x2322 <FRAMWriteKnowns+0x96>
    2320:	cc c0       	rjmp	.+408    	; 0x24ba <FRAMWriteKnowns+0x22e>
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2322:	0f 2e       	mov	r0, r31
    2324:	f0 e4       	ldi	r31, 0x40	; 64
    2326:	ef 2e       	mov	r14, r31
    2328:	f6 e0       	ldi	r31, 0x06	; 6
    232a:	ff 2e       	mov	r15, r31
    232c:	f0 2d       	mov	r31, r0
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	56 e0       	ldi	r21, 0x06	; 6
    2332:	28 e0       	ldi	r18, 0x08	; 8
		nop();
		SPIC.DATA = FR_WREN;
    2334:	e0 ec       	ldi	r30, 0xC0	; 192
    2336:	f8 e0       	ldi	r31, 0x08	; 8
    2338:	0f 2e       	mov	r0, r31
    233a:	f6 e0       	ldi	r31, 0x06	; 6
    233c:	7f 2e       	mov	r7, r31
    233e:	f0 2d       	mov	r31, r0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
    2340:	c1 e7       	ldi	r28, 0x71	; 113
    2342:	d0 e5       	ldi	r29, 0x50	; 80
		PORTB.OUTSET = PIN3_bm;  // latch opcode
		nop(); // time for CS_FRAM to accept high signal
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
		nop();
		SPIC.DATA = FR_WRITE;
    2344:	66 24       	eor	r6, r6
    2346:	68 94       	set
    2348:	61 f8       	bld	r6, 1
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    234a:	0f 2e       	mov	r0, r31
    234c:	f7 e5       	ldi	r31, 0x57	; 87
    234e:	cf 2e       	mov	r12, r31
    2350:	f0 e4       	ldi	r31, 0x40	; 64
    2352:	df 2e       	mov	r13, r31
    2354:	f0 2d       	mov	r31, r0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[0];
    2356:	8e 01       	movw	r16, r28
    2358:	0c 50       	subi	r16, 0x0C	; 12
    235a:	10 40       	sbci	r17, 0x00	; 0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[1];
    235c:	0f 2e       	mov	r0, r31
    235e:	f5 ef       	ldi	r31, 0xF5	; 245
    2360:	4f 2e       	mov	r4, r31
    2362:	ff ef       	ldi	r31, 0xFF	; 255
    2364:	5f 2e       	mov	r5, r31
    2366:	f0 2d       	mov	r31, r0
    2368:	4c 0e       	add	r4, r28
    236a:	5d 1e       	adc	r5, r29
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[2];
    236c:	0f 2e       	mov	r0, r31
    236e:	f6 ef       	ldi	r31, 0xF6	; 246
    2370:	2f 2e       	mov	r2, r31
    2372:	ff ef       	ldi	r31, 0xFF	; 255
    2374:	3f 2e       	mov	r3, r31
    2376:	f0 2d       	mov	r31, r0
    2378:	2c 0e       	add	r2, r28
    237a:	3d 1e       	adc	r3, r29
		
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
		
		FRAMAddress +=3;
		checksumADC[0] += SPIBuffer[0];
    237c:	6b e3       	ldi	r22, 0x3B	; 59
    237e:	71 e2       	ldi	r23, 0x21	; 33
		checksumADC[1] += SPIBuffer[1];
    2380:	5b 01       	movw	r10, r22
    2382:	08 94       	sec
    2384:	a1 1c       	adc	r10, r1
    2386:	b1 1c       	adc	r11, r1
		checksumADC[2] += SPIBuffer[2];
    2388:	88 24       	eor	r8, r8
    238a:	99 24       	eor	r9, r9
    238c:	68 94       	set
    238e:	81 f8       	bld	r8, 1
    2390:	86 0e       	add	r8, r22
    2392:	97 1e       	adc	r9, r23
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2394:	30 e1       	ldi	r19, 0x10	; 16
    2396:	d7 01       	movw	r26, r14
    2398:	16 96       	adiw	r26, 0x06	; 6
    239a:	3c 93       	st	X, r19
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    239c:	da 01       	movw	r26, r20
    239e:	16 96       	adiw	r26, 0x06	; 6
    23a0:	2c 93       	st	X, r18
    23a2:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    23a4:	00 00       	nop
		SPIC.DATA = FR_WREN;
    23a6:	73 82       	std	Z+3, r7	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	88 23       	and	r24, r24
    23ac:	ec f7       	brge	.-6      	; 0x23a8 <FRAMWriteKnowns+0x11c>
		SPIBuffer[12] = SPIC.DATA;
    23ae:	83 81       	ldd	r24, Z+3	; 0x03
    23b0:	88 83       	st	Y, r24
		PORTB.OUTSET = PIN3_bm;  // latch opcode
    23b2:	da 01       	movw	r26, r20
    23b4:	15 96       	adiw	r26, 0x05	; 5
    23b6:	2c 93       	st	X, r18
    23b8:	15 97       	sbiw	r26, 0x05	; 5
		nop(); // time for CS_FRAM to accept high signal
    23ba:	00 00       	nop
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    23bc:	16 96       	adiw	r26, 0x06	; 6
    23be:	2c 93       	st	X, r18
    23c0:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    23c2:	00 00       	nop
		SPIC.DATA = FR_WRITE;
    23c4:	63 82       	std	Z+3, r6	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	88 23       	and	r24, r24
    23ca:	ec f7       	brge	.-6      	; 0x23c6 <FRAMWriteKnowns+0x13a>
		SPIBuffer[12] = SPIC.DATA;
    23cc:	83 81       	ldd	r24, Z+3	; 0x03
    23ce:	88 83       	st	Y, r24
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    23d0:	d6 01       	movw	r26, r12
    23d2:	11 96       	adiw	r26, 0x01	; 1
    23d4:	8c 91       	ld	r24, X
    23d6:	11 97       	sbiw	r26, 0x01	; 1
    23d8:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	88 23       	and	r24, r24
    23de:	ec f7       	brge	.-6      	; 0x23da <FRAMWriteKnowns+0x14e>
		SPIBuffer[12] = SPIC.DATA;
    23e0:	83 81       	ldd	r24, Z+3	; 0x03
    23e2:	88 83       	st	Y, r24
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
    23e4:	d6 01       	movw	r26, r12
    23e6:	8c 91       	ld	r24, X
    23e8:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	88 23       	and	r24, r24
    23ee:	ec f7       	brge	.-6      	; 0x23ea <FRAMWriteKnowns+0x15e>
		SPIBuffer[12] = SPIC.DATA;
    23f0:	83 81       	ldd	r24, Z+3	; 0x03
    23f2:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[0];
    23f4:	d8 01       	movw	r26, r16
    23f6:	8c 91       	ld	r24, X
    23f8:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	88 23       	and	r24, r24
    23fe:	ec f7       	brge	.-6      	; 0x23fa <FRAMWriteKnowns+0x16e>
		SPIBuffer[12] = SPIC.DATA;
    2400:	83 81       	ldd	r24, Z+3	; 0x03
    2402:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[1];
    2404:	d2 01       	movw	r26, r4
    2406:	8c 91       	ld	r24, X
    2408:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	88 23       	and	r24, r24
    240e:	ec f7       	brge	.-6      	; 0x240a <FRAMWriteKnowns+0x17e>
		SPIBuffer[12] = SPIC.DATA;
    2410:	83 81       	ldd	r24, Z+3	; 0x03
    2412:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[2];
    2414:	d1 01       	movw	r26, r2
    2416:	8c 91       	ld	r24, X
    2418:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	88 23       	and	r24, r24
    241e:	ec f7       	brge	.-6      	; 0x241a <FRAMWriteKnowns+0x18e>
		SPIBuffer[12] = SPIC.DATA;
    2420:	83 81       	ldd	r24, Z+3	; 0x03
    2422:	88 83       	st	Y, r24
		
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    2424:	da 01       	movw	r26, r20
    2426:	15 96       	adiw	r26, 0x05	; 5
    2428:	2c 93       	st	X, r18
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    242a:	30 e1       	ldi	r19, 0x10	; 16
    242c:	d7 01       	movw	r26, r14
    242e:	15 96       	adiw	r26, 0x05	; 5
    2430:	3c 93       	st	X, r19
		
		FRAMAddress +=3;
    2432:	80 91 57 40 	lds	r24, 0x4057
    2436:	90 91 58 40 	lds	r25, 0x4058
    243a:	03 96       	adiw	r24, 0x03	; 3
    243c:	80 93 57 40 	sts	0x4057, r24
    2440:	90 93 58 40 	sts	0x4058, r25
		checksumADC[0] += SPIBuffer[0];
    2444:	db 01       	movw	r26, r22
    2446:	8c 91       	ld	r24, X
    2448:	d8 01       	movw	r26, r16
    244a:	9c 91       	ld	r25, X
    244c:	89 0f       	add	r24, r25
    244e:	db 01       	movw	r26, r22
    2450:	8c 93       	st	X, r24
		checksumADC[1] += SPIBuffer[1];
    2452:	d5 01       	movw	r26, r10
    2454:	8c 91       	ld	r24, X
    2456:	a6 e6       	ldi	r26, 0x66	; 102
    2458:	b0 e5       	ldi	r27, 0x50	; 80
    245a:	9c 91       	ld	r25, X
    245c:	89 0f       	add	r24, r25
    245e:	d5 01       	movw	r26, r10
    2460:	8c 93       	st	X, r24
		checksumADC[2] += SPIBuffer[2];
    2462:	d4 01       	movw	r26, r8
    2464:	8c 91       	ld	r24, X
    2466:	a7 e6       	ldi	r26, 0x67	; 103
    2468:	b0 e5       	ldi	r27, 0x50	; 80
    246a:	9c 91       	ld	r25, X
    246c:	89 0f       	add	r24, r25
    246e:	d4 01       	movw	r26, r8
    2470:	8c 93       	st	X, r24
		
		sampleCount++;
    2472:	80 91 74 50 	lds	r24, 0x5074
    2476:	90 91 75 50 	lds	r25, 0x5075
    247a:	a0 91 76 50 	lds	r26, 0x5076
    247e:	b0 91 77 50 	lds	r27, 0x5077
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	a1 1d       	adc	r26, r1
    2486:	b1 1d       	adc	r27, r1
    2488:	80 93 74 50 	sts	0x5074, r24
    248c:	90 93 75 50 	sts	0x5075, r25
    2490:	a0 93 76 50 	sts	0x5076, r26
    2494:	b0 93 77 50 	sts	0x5077, r27
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    2498:	80 91 74 50 	lds	r24, 0x5074
    249c:	90 91 75 50 	lds	r25, 0x5075
    24a0:	a0 91 76 50 	lds	r26, 0x5076
    24a4:	b0 91 77 50 	lds	r27, 0x5077
    24a8:	83 35       	cpi	r24, 0x53	; 83
    24aa:	35 e5       	ldi	r19, 0x55	; 85
    24ac:	93 07       	cpc	r25, r19
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	a3 07       	cpc	r26, r19
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	b3 07       	cpc	r27, r19
    24b6:	08 f4       	brcc	.+2      	; 0x24ba <FRAMWriteKnowns+0x22e>
    24b8:	6d cf       	rjmp	.-294    	; 0x2394 <FRAMWriteKnowns+0x108>
		checksumADC[2] += SPIBuffer[2];
		
		sampleCount++;
	}
	
	SPIDisable();
    24ba:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	ADCPower(FALSE);
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
}
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
    24d8:	9f 90       	pop	r9
    24da:	8f 90       	pop	r8
    24dc:	7f 90       	pop	r7
    24de:	6f 90       	pop	r6
    24e0:	5f 90       	pop	r5
    24e2:	4f 90       	pop	r4
    24e4:	3f 90       	pop	r3
    24e6:	2f 90       	pop	r2
    24e8:	08 95       	ret

000024ea <setADCInput>:

/*! \brief Sets input channel to AD7767 via the A0, A1, A2 control lines of ADG758
 */
void setADCInput(uint8_t channel) {
	// set bit A0 to LSB
	if(channel & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    24ea:	80 ff       	sbrs	r24, 0
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <setADCInput+0xe>
    24ee:	20 e4       	ldi	r18, 0x40	; 64
    24f0:	e0 e0       	ldi	r30, 0x00	; 0
    24f2:	f6 e0       	ldi	r31, 0x06	; 6
    24f4:	25 83       	std	Z+5, r18	; 0x05
    24f6:	04 c0       	rjmp	.+8      	; 0x2500 <setADCInput+0x16>
	else {PORTA.OUTCLR = PIN6_bm;}
    24f8:	20 e4       	ldi	r18, 0x40	; 64
    24fa:	e0 e0       	ldi	r30, 0x00	; 0
    24fc:	f6 e0       	ldi	r31, 0x06	; 6
    24fe:	26 83       	std	Z+6, r18	; 0x06
	// set bit A1 to second bit
	if(channel & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    2500:	81 ff       	sbrs	r24, 1
    2502:	05 c0       	rjmp	.+10     	; 0x250e <setADCInput+0x24>
    2504:	22 e0       	ldi	r18, 0x02	; 2
    2506:	e0 e2       	ldi	r30, 0x20	; 32
    2508:	f6 e0       	ldi	r31, 0x06	; 6
    250a:	25 83       	std	Z+5, r18	; 0x05
    250c:	04 c0       	rjmp	.+8      	; 0x2516 <setADCInput+0x2c>
	else {PORTB.OUTCLR = PIN1_bm;}
    250e:	22 e0       	ldi	r18, 0x02	; 2
    2510:	e0 e2       	ldi	r30, 0x20	; 32
    2512:	f6 e0       	ldi	r31, 0x06	; 6
    2514:	26 83       	std	Z+6, r18	; 0x06
	// set bit A3 to third bit
	if(channel & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    2516:	82 ff       	sbrs	r24, 2
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <setADCInput+0x3a>
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	e0 e2       	ldi	r30, 0x20	; 32
    251e:	f6 e0       	ldi	r31, 0x06	; 6
    2520:	85 83       	std	Z+5, r24	; 0x05
    2522:	08 95       	ret
	else {PORTB.OUTCLR = PIN2_bm;}
    2524:	84 e0       	ldi	r24, 0x04	; 4
    2526:	e0 e2       	ldi	r30, 0x20	; 32
    2528:	f6 e0       	ldi	r31, 0x06	; 6
    252a:	86 83       	std	Z+6, r24	; 0x06
    252c:	08 95       	ret

0000252e <CO_collectSeismic1Channel_ext>:
	averagingPtB, averagingPtC, averagingPtD, numOfSamples, DataArray);
}

//collect data from 1 axis of accelerometer
void CO_collectSeismic1Channel_ext(uint8_t channel, uint8_t filterConfig, uint8_t gain, uint16_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable, uint16_t averagingPtA, 
								uint16_t averagingPtB, uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray) {
    252e:	2f 92       	push	r2
    2530:	3f 92       	push	r3
    2532:	4f 92       	push	r4
    2534:	5f 92       	push	r5
    2536:	7f 92       	push	r7
    2538:	8f 92       	push	r8
    253a:	9f 92       	push	r9
    253c:	af 92       	push	r10
    253e:	bf 92       	push	r11
    2540:	cf 92       	push	r12
    2542:	df 92       	push	r13
    2544:	ef 92       	push	r14
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	18 2f       	mov	r17, r24
    2556:	76 2e       	mov	r7, r22
    2558:	f4 2e       	mov	r15, r20
    255a:	19 01       	movw	r2, r18
	
	#ifndef F_CPU
	#define F_CPU 32000000UL
	#endif
	
	ADC_BUFFER=DataArray;
    255c:	89 8d       	ldd	r24, Y+25	; 0x19
    255e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2560:	80 93 72 50 	sts	0x5072, r24
    2564:	90 93 73 50 	sts	0x5073, r25
	ADC_Sampling_Finished = 0;
    2568:	10 92 cd 50 	sts	0x50CD, r1
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	
	// Set gains, filters, and input channel
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gain);
    2572:	81 2f       	mov	r24, r17
    2574:	6f 2d       	mov	r22, r15
    2576:	0e 94 c4 03 	call	0x788	; 0x788 <set_ampGain>
	set_filter(filterConfig);
    257a:	87 2d       	mov	r24, r7
    257c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
	ACC_DCPassEnable(DCPassEnable);
    2580:	8e 2d       	mov	r24, r14
    2582:	0e 94 d6 08 	call	0x11ac	; 0x11ac <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    2586:	84 e0       	ldi	r24, 0x04	; 4
    2588:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    258c:	84 e5       	ldi	r24, 0x54	; 84
    258e:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	0e 94 2a 07 	call	0xe54	; 0xe54 <enableADCMUX>
	setADCInput(channel);
    2598:	81 2f       	mov	r24, r17
    259a:	0e 94 75 12 	call	0x24ea	; 0x24ea <setADCInput>
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    259e:	e0 ea       	ldi	r30, 0xA0	; 160
    25a0:	f6 e0       	ldi	r31, 0x06	; 6
    25a2:	22 e0       	ldi	r18, 0x02	; 2
    25a4:	20 8b       	std	Z+16, r18	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    25a6:	77 24       	eor	r7, r7
    25a8:	73 94       	inc	r7
    25aa:	72 82       	std	Z+2, r7	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    25ac:	0f 2e       	mov	r0, r31
    25ae:	f0 e8       	ldi	r31, 0x80	; 128
    25b0:	4f 2e       	mov	r4, r31
    25b2:	f1 e0       	ldi	r31, 0x01	; 1
    25b4:	5f 2e       	mov	r5, r31
    25b6:	f0 2d       	mov	r31, r0
    25b8:	88 e7       	ldi	r24, 0x78	; 120
    25ba:	d2 01       	movw	r26, r4
    25bc:	8c 93       	st	X, r24

	// Configure counter for IO13(PF0) events
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    25be:	e0 e0       	ldi	r30, 0x00	; 0
    25c0:	f9 e0       	ldi	r31, 0x09	; 9
    25c2:	80 ef       	ldi	r24, 0xF0	; 240
    25c4:	81 83       	std	Z+1, r24	; 0x01
	TCD0.CCA = averagingPtA;
    25c6:	c0 a6       	lds	r28, 0xb0
    25c8:	d1 a6       	lds	r29, 0xb1
	TCD0.CCB = averagingPtB;
    25ca:	a2 a6       	lds	r26, 0xb2
    25cc:	b3 a6       	lds	r27, 0xb3
	TCD0.CCC = averagingPtC;
    25ce:	84 a6       	lds	r24, 0xb4
    25d0:	95 a6       	lds	r25, 0xb5
	TCD0.CCD = averagingPtD;
    25d2:	8d 89       	ldd	r24, Y+21	; 0x15
    25d4:	9e 89       	ldd	r25, Y+22	; 0x16
    25d6:	86 a7       	lds	r24, 0x76
    25d8:	97 a7       	lds	r25, 0x77
	TCD0.PER = subsamplesPerSample - 1;
    25da:	80 2f       	mov	r24, r16
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	86 a3       	lds	r24, 0x56
    25e2:	97 a3       	lds	r25, 0x57
	TCD0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    25e4:	26 83       	std	Z+6, r18	; 0x06
	TCD0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	87 83       	std	Z+7, r24	; 0x07
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    25ea:	80 81       	ld	r24, Z
    25ec:	80 7f       	andi	r24, 0xF0	; 240
    25ee:	88 60       	ori	r24, 0x08	; 8
    25f0:	80 83       	st	Z, r24

	//FRAMAddress = FR_BASEADD;
	sampleCount = 0;
    25f2:	10 92 74 50 	sts	0x5074, r1
    25f6:	10 92 75 50 	sts	0x5075, r1
    25fa:	10 92 76 50 	sts	0x5076, r1
    25fe:	10 92 77 50 	sts	0x5077, r1
	SPICount = 0;
    2602:	10 92 c6 50 	sts	0x50C6, r1
	//checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    2606:	e0 ea       	ldi	r30, 0xA0	; 160
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	87 60       	ori	r24, 0x07	; 7
    260e:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2610:	78 94       	sei

	SPICS(TRUE);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    2618:	80 e2       	ldi	r24, 0x20	; 32
    261a:	e0 e8       	ldi	r30, 0x80	; 128
    261c:	f6 e0       	ldi	r31, 0x06	; 6
    261e:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    2620:	00 e4       	ldi	r16, 0x40	; 64
    2622:	1a e0       	ldi	r17, 0x0A	; 10
    2624:	83 e2       	ldi	r24, 0x23	; 35
    2626:	f8 01       	movw	r30, r16
    2628:	81 83       	std	Z+1, r24	; 0x01
	// set period
	//TCE1.PER = (0x20 << subsamplesPerSecond);
	//TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
	TCE1.PER = (F_CPU/16)/subsamplesPerSecond;
    262a:	61 01       	movw	r12, r2
    262c:	ee 24       	eor	r14, r14
    262e:	ff 24       	eor	r15, r15
    2630:	60 e8       	ldi	r22, 0x80	; 128
    2632:	74 e8       	ldi	r23, 0x84	; 132
    2634:	8e e1       	ldi	r24, 0x1E	; 30
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a7 01       	movw	r20, r14
    263a:	96 01       	movw	r18, r12
    263c:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    2640:	d8 01       	movw	r26, r16
    2642:	96 96       	adiw	r26, 0x26	; 38
    2644:	2d 93       	st	X+, r18
    2646:	3c 93       	st	X, r19
    2648:	97 97       	sbiw	r26, 0x27	; 39
	TCE1.CCBBUF = ((F_CPU/16)/subsamplesPerSecond)/2;
    264a:	60 e4       	ldi	r22, 0x40	; 64
    264c:	72 e4       	ldi	r23, 0x42	; 66
    264e:	8f e0       	ldi	r24, 0x0F	; 15
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a7 01       	movw	r20, r14
    2654:	96 01       	movw	r18, r12
    2656:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    265a:	f8 01       	movw	r30, r16
    265c:	22 af       	sts	0x72, r18
    265e:	33 af       	sts	0x73, r19
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	//set the period as number of samples to know when to stop sampling
	TCC1.PER = numOfSamples;
    2660:	e0 e4       	ldi	r30, 0x40	; 64
    2662:	f8 e0       	ldi	r31, 0x08	; 8
    2664:	8f 89       	ldd	r24, Y+23	; 0x17
    2666:	98 8d       	ldd	r25, Y+24	; 0x18
    2668:	86 a3       	lds	r24, 0x56
    266a:	97 a3       	lds	r25, 0x57
	//Configure IO13(PF0) to drive event channel that triggers event every time the 4 samples are collected and averaged
	EVSYS.CH1MUX = EVSYS_CHMUX_TCD0_OVF_gc;
    266c:	80 ed       	ldi	r24, 0xD0	; 208
    266e:	d2 01       	movw	r26, r4
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	8c 93       	st	X, r24
    2674:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    2676:	76 82       	std	Z+6, r7	; 0x06
	//set event system to update counter of number of samples every sample event
	TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
    2678:	80 81       	ld	r24, Z
    267a:	80 7f       	andi	r24, 0xF0	; 240
    267c:	89 60       	ori	r24, 0x09	; 9
    267e:	80 83       	st	Z, r24
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2680:	f8 01       	movw	r30, r16
    2682:	80 81       	ld	r24, Z
    2684:	80 7f       	andi	r24, 0xF0	; 240
    2686:	81 60       	ori	r24, 0x01	; 1
    2688:	80 83       	st	Z, r24
// 
// 	SPICS(FALSE);
// 	SPIDisable();
// 	enableADCMUX(FALSE);
	
}
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	df 90       	pop	r13
    2698:	cf 90       	pop	r12
    269a:	bf 90       	pop	r11
    269c:	af 90       	pop	r10
    269e:	9f 90       	pop	r9
    26a0:	8f 90       	pop	r8
    26a2:	7f 90       	pop	r7
    26a4:	5f 90       	pop	r5
    26a6:	4f 90       	pop	r4
    26a8:	3f 90       	pop	r3
    26aa:	2f 90       	pop	r2
    26ac:	08 95       	ret

000026ae <CO_collectSeismic1Channel>:
	sampleCount++;

}

void CO_collectSeismic1Channel(uint8_t channel, uint8_t gain, uint16_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable, uint16_t averagingPtA,
								uint16_t averagingPtB, uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray) {
    26ae:	2f 92       	push	r2
    26b0:	3f 92       	push	r3
    26b2:	4f 92       	push	r4
    26b4:	5f 92       	push	r5
    26b6:	6f 92       	push	r6
    26b8:	7f 92       	push	r7
    26ba:	8f 92       	push	r8
    26bc:	9f 92       	push	r9
    26be:	af 92       	push	r10
    26c0:	bf 92       	push	r11
    26c2:	cf 92       	push	r12
    26c4:	df 92       	push	r13
    26c6:	ef 92       	push	r14
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	96 2f       	mov	r25, r22
    26d6:	1a 01       	movw	r2, r20
    26d8:	52 2f       	mov	r21, r18
    26da:	70 2f       	mov	r23, r16
    26dc:	d7 01       	movw	r26, r14
    26de:	36 01       	movw	r6, r12
    26e0:	25 01       	movw	r4, r10
	
	CO_collectSeismic1Channel_ext(channel, (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gain, subsamplesPerSecond, subsamplesPerSample, DCPassEnable, averagingPtA,
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <CO_collectSeismic1Channel+0x36>
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <CO_collectSeismic1Channel+0x38>
    26e6:	2d b7       	in	r18, 0x3d	; 61
    26e8:	3e b7       	in	r19, 0x3e	; 62
    26ea:	2f 5f       	subi	r18, 0xFF	; 255
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
    26ee:	ed b7       	in	r30, 0x3d	; 61
    26f0:	fe b7       	in	r31, 0x3e	; 62
    26f2:	81 82       	std	Z+1, r8	; 0x01
    26f4:	92 82       	std	Z+2, r9	; 0x02
    26f6:	8d 88       	ldd	r8, Y+21	; 0x15
    26f8:	9e 88       	ldd	r9, Y+22	; 0x16
    26fa:	f9 01       	movw	r30, r18
    26fc:	82 82       	std	Z+2, r8	; 0x02
    26fe:	93 82       	std	Z+3, r9	; 0x03
    2700:	8f 88       	ldd	r8, Y+23	; 0x17
    2702:	98 8c       	ldd	r9, Y+24	; 0x18
    2704:	84 82       	std	Z+4, r8	; 0x04
    2706:	95 82       	std	Z+5, r9	; 0x05
    2708:	64 ec       	ldi	r22, 0xC4	; 196
    270a:	49 2f       	mov	r20, r25
    270c:	91 01       	movw	r18, r2
    270e:	05 2f       	mov	r16, r21
    2710:	e7 2e       	mov	r14, r23
    2712:	6d 01       	movw	r12, r26
    2714:	53 01       	movw	r10, r6
    2716:	42 01       	movw	r8, r4
    2718:	0e 94 97 12 	call	0x252e	; 0x252e <CO_collectSeismic1Channel_ext>
    271c:	8d b7       	in	r24, 0x3d	; 61
    271e:	9e b7       	in	r25, 0x3e	; 62
    2720:	06 96       	adiw	r24, 0x06	; 6
    2722:	8d bf       	out	0x3d, r24	; 61
    2724:	9e bf       	out	0x3e, r25	; 62
	averagingPtB, averagingPtC, averagingPtD, numOfSamples, DataArray);
}
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	0f 91       	pop	r16
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	df 90       	pop	r13
    2732:	cf 90       	pop	r12
    2734:	bf 90       	pop	r11
    2736:	af 90       	pop	r10
    2738:	9f 90       	pop	r9
    273a:	8f 90       	pop	r8
    273c:	7f 90       	pop	r7
    273e:	6f 90       	pop	r6
    2740:	5f 90       	pop	r5
    2742:	4f 90       	pop	r4
    2744:	3f 90       	pop	r3
    2746:	2f 90       	pop	r2
    2748:	08 95       	ret

0000274a <CO_collectSeismic3Axises_ext>:
	subsamplesPerChannel, DCPassEnable, averagingPtA, averagingPtB,
	averagingPtC, averagingPtD, numOfSamples, DataArray);
}	
void CO_collectSeismic3Axises_ext(uint8_t filterConfig, uint8_t gain[], uint16_t subsamplesPerSecond,
uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray) {
    274a:	2f 92       	push	r2
    274c:	3f 92       	push	r3
    274e:	5f 92       	push	r5
    2750:	6f 92       	push	r6
    2752:	7f 92       	push	r7
    2754:	8f 92       	push	r8
    2756:	9f 92       	push	r9
    2758:	af 92       	push	r10
    275a:	bf 92       	push	r11
    275c:	cf 92       	push	r12
    275e:	df 92       	push	r13
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	0f 92       	push	r0
    276e:	0f 92       	push	r0
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	18 2f       	mov	r17, r24
    2776:	3b 01       	movw	r6, r22
    2778:	49 83       	std	Y+1, r20	; 0x01
    277a:	5a 83       	std	Y+2, r21	; 0x02
    277c:	52 2e       	mov	r5, r18
	
	#ifndef F_CPU
	#define F_CPU 32000000UL
	#endif
	
	ADC_BUFFER = DataArray;
    277e:	89 8d       	ldd	r24, Y+25	; 0x19
    2780:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2782:	80 93 72 50 	sts	0x5072, r24
    2786:	90 93 73 50 	sts	0x5073, r25
	ADC_Sampling_Finished = 0;
    278a:	10 92 cd 50 	sts	0x50CD, r1
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	
	// Set gains, filters, and input channel
	set_ampGain(ADC_CH_6_gc, gain[0]);
    2794:	85 e0       	ldi	r24, 0x05	; 5
    2796:	d3 01       	movw	r26, r6
    2798:	6c 91       	ld	r22, X
    279a:	0e 94 c4 03 	call	0x788	; 0x788 <set_ampGain>
	set_ampGain(ADC_CH_7_gc, gain[1]);
    279e:	86 e0       	ldi	r24, 0x06	; 6
    27a0:	f3 01       	movw	r30, r6
    27a2:	61 81       	ldd	r22, Z+1	; 0x01
    27a4:	0e 94 c4 03 	call	0x788	; 0x788 <set_ampGain>
	set_ampGain(ADC_CH_8_gc, gain[2]);
    27a8:	87 e0       	ldi	r24, 0x07	; 7
    27aa:	d3 01       	movw	r26, r6
    27ac:	12 96       	adiw	r26, 0x02	; 2
    27ae:	6c 91       	ld	r22, X
    27b0:	0e 94 c4 03 	call	0x788	; 0x788 <set_ampGain>
	set_filter(filterConfig);
    27b4:	81 2f       	mov	r24, r17
    27b6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
	ACC_DCPassEnable(DCPassEnable);
    27ba:	80 2f       	mov	r24, r16
    27bc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    27c0:	84 e0       	ldi	r24, 0x04	; 4
    27c2:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    27c6:	84 e5       	ldi	r24, 0x54	; 84
    27c8:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	0e 94 2a 07 	call	0xe54	; 0xe54 <enableADCMUX>
	setADCInput(ADC_CH_6_gc);
    27d2:	85 e0       	ldi	r24, 0x05	; 5
    27d4:	0e 94 75 12 	call	0x24ea	; 0x24ea <setADCInput>
	

	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    27d8:	e0 ea       	ldi	r30, 0xA0	; 160
    27da:	f6 e0       	ldi	r31, 0x06	; 6
    27dc:	22 e0       	ldi	r18, 0x02	; 2
    27de:	20 8b       	std	Z+16, r18	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    27e0:	66 24       	eor	r6, r6
    27e2:	63 94       	inc	r6
    27e4:	62 82       	std	Z+2, r6	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    27e6:	0f 2e       	mov	r0, r31
    27e8:	f0 e8       	ldi	r31, 0x80	; 128
    27ea:	2f 2e       	mov	r2, r31
    27ec:	f1 e0       	ldi	r31, 0x01	; 1
    27ee:	3f 2e       	mov	r3, r31
    27f0:	f0 2d       	mov	r31, r0
    27f2:	88 e7       	ldi	r24, 0x78	; 120
    27f4:	f1 01       	movw	r30, r2
    27f6:	80 83       	st	Z, r24

	// Configure counter for IO13(PF0) events
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    27f8:	e0 e0       	ldi	r30, 0x00	; 0
    27fa:	f8 e0       	ldi	r31, 0x08	; 8
    27fc:	80 ef       	ldi	r24, 0xF0	; 240
    27fe:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CCA = averagingPtA;
    2800:	e0 a6       	lds	r30, 0xb0
    2802:	f1 a6       	lds	r31, 0xb1
	TCC0.CCB = averagingPtB;
    2804:	c2 a6       	lds	r28, 0xb2
    2806:	d3 a6       	lds	r29, 0xb3
	TCC0.CCC = averagingPtC;
    2808:	a4 a6       	lds	r26, 0xb4
    280a:	b5 a6       	lds	r27, 0xb5
	TCC0.CCD = averagingPtD;
    280c:	86 a6       	lds	r24, 0xb6
    280e:	97 a6       	lds	r25, 0xb7
	TCC0.PER = subsamplesPerChannel - 1;
    2810:	85 2d       	mov	r24, r5
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	86 a3       	lds	r24, 0x56
    2818:	97 a3       	lds	r25, 0x57
	TCC0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    281a:	26 83       	std	Z+6, r18	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    2820:	80 81       	ld	r24, Z
    2822:	80 7f       	andi	r24, 0xF0	; 240
    2824:	88 60       	ori	r24, 0x08	; 8
    2826:	80 83       	st	Z, r24

	sampleCount = 0;
    2828:	10 92 74 50 	sts	0x5074, r1
    282c:	10 92 75 50 	sts	0x5075, r1
    2830:	10 92 76 50 	sts	0x5076, r1
    2834:	10 92 77 50 	sts	0x5077, r1
	SPICount = 0;
    2838:	10 92 c6 50 	sts	0x50C6, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    283c:	8d e3       	ldi	r24, 0x3D	; 61
    283e:	91 e2       	ldi	r25, 0x21	; 33
    2840:	10 92 3d 21 	sts	0x213D, r1
    2844:	fc 01       	movw	r30, r24
    2846:	31 97       	sbiw	r30, 0x01	; 1
    2848:	10 82       	st	Z, r1
    284a:	02 97       	sbiw	r24, 0x02	; 2
    284c:	dc 01       	movw	r26, r24
    284e:	1c 92       	st	X, r1

	// Enable interrupts.
	PMIC.CTRL |= (PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm);
    2850:	e0 ea       	ldi	r30, 0xA0	; 160
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	87 60       	ori	r24, 0x07	; 7
    2858:	82 83       	std	Z+2, r24	; 0x02
	sei();
    285a:	78 94       	sei

	SPICS(TRUE);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    2862:	80 e2       	ldi	r24, 0x20	; 32
    2864:	e0 e8       	ldi	r30, 0x80	; 128
    2866:	f6 e0       	ldi	r31, 0x06	; 6
    2868:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    286a:	00 e4       	ldi	r16, 0x40	; 64
    286c:	1a e0       	ldi	r17, 0x0A	; 10
    286e:	83 e2       	ldi	r24, 0x23	; 35
    2870:	f8 01       	movw	r30, r16
    2872:	81 83       	std	Z+1, r24	; 0x01
	// set period of waveform generator and duty cycle (want duty cycle to be half the period to get clean clock signal)
	//TCE1.PER = (0x20 << subsamplesPerSecond);
	TCE1.PER = (F_CPU/16)/subsamplesPerSecond;
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	6c 01       	movw	r12, r24
    287a:	ee 24       	eor	r14, r14
    287c:	ff 24       	eor	r15, r15
    287e:	60 e8       	ldi	r22, 0x80	; 128
    2880:	74 e8       	ldi	r23, 0x84	; 132
    2882:	8e e1       	ldi	r24, 0x1E	; 30
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a7 01       	movw	r20, r14
    2888:	96 01       	movw	r18, r12
    288a:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    288e:	d8 01       	movw	r26, r16
    2890:	96 96       	adiw	r26, 0x26	; 38
    2892:	2d 93       	st	X+, r18
    2894:	3c 93       	st	X, r19
    2896:	97 97       	sbiw	r26, 0x27	; 39
	//TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
	TCE1.CCBBUF = ((F_CPU/16)/subsamplesPerSecond)/2;
    2898:	60 e4       	ldi	r22, 0x40	; 64
    289a:	72 e4       	ldi	r23, 0x42	; 66
    289c:	8f e0       	ldi	r24, 0x0F	; 15
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	a7 01       	movw	r20, r14
    28a2:	96 01       	movw	r18, r12
    28a4:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    28a8:	f8 01       	movw	r30, r16
    28aa:	22 af       	sts	0x72, r18
    28ac:	33 af       	sts	0x73, r19
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	//set the period as number of samples to know when to stop sampling
	TCC1.PER = numOfSamples;
    28ae:	e0 e4       	ldi	r30, 0x40	; 64
    28b0:	f8 e0       	ldi	r31, 0x08	; 8
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	86 a3       	lds	r24, 0x56
    28b8:	97 a3       	lds	r25, 0x57
	//Configure IO13(PF0) to drive event channel that triggers event every time the 4 samples are collected and averaged
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    28ba:	80 ec       	ldi	r24, 0xC0	; 192
    28bc:	d1 01       	movw	r26, r2
    28be:	11 96       	adiw	r26, 0x01	; 1
    28c0:	8c 93       	st	X, r24
    28c2:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    28c4:	66 82       	std	Z+6, r6	; 0x06
	//set event system to update counter of number of samples every sample event
	TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
    28c6:	80 81       	ld	r24, Z
    28c8:	80 7f       	andi	r24, 0xF0	; 240
    28ca:	89 60       	ori	r24, 0x09	; 9
    28cc:	80 83       	st	Z, r24
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    28ce:	f8 01       	movw	r30, r16
    28d0:	80 81       	ld	r24, Z
    28d2:	80 7f       	andi	r24, 0xF0	; 240
    28d4:	81 60       	ori	r24, 0x01	; 1
    28d6:	80 83       	st	Z, r24
// 
// 	SPICS(FALSE);
// 	SPIDisable();
// 	enableADCMUX(FALSE);
	//ADCPower(FALSE);
}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	df 90       	pop	r13
    28ea:	cf 90       	pop	r12
    28ec:	bf 90       	pop	r11
    28ee:	af 90       	pop	r10
    28f0:	9f 90       	pop	r9
    28f2:	8f 90       	pop	r8
    28f4:	7f 90       	pop	r7
    28f6:	6f 90       	pop	r6
    28f8:	5f 90       	pop	r5
    28fa:	3f 90       	pop	r3
    28fc:	2f 90       	pop	r2
    28fe:	08 95       	ret

00002900 <CO_collectSeismic3Axises>:
	ADCPower(FALSE);
	
}*/
void CO_collectSeismic3Axises(uint8_t gain[], uint16_t subsamplesPerSecond,
uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray) {
    2900:	2f 92       	push	r2
    2902:	3f 92       	push	r3
    2904:	4f 92       	push	r4
    2906:	5f 92       	push	r5
    2908:	6f 92       	push	r6
    290a:	7f 92       	push	r7
    290c:	8f 92       	push	r8
    290e:	9f 92       	push	r9
    2910:	af 92       	push	r10
    2912:	bf 92       	push	r11
    2914:	cf 92       	push	r12
    2916:	df 92       	push	r13
    2918:	ef 92       	push	r14
    291a:	ff 92       	push	r15
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	00 d0       	rcall	.+0      	; 0x2926 <CO_collectSeismic3Axises+0x26>
    2926:	0f 92       	push	r0
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	8b 83       	std	Y+3, r24	; 0x03
    292e:	9c 83       	std	Y+4, r25	; 0x04
    2930:	db 01       	movw	r26, r22
    2932:	94 2f       	mov	r25, r20
    2934:	32 2f       	mov	r19, r18
    2936:	38 01       	movw	r6, r16
    2938:	27 01       	movw	r4, r14
    293a:	16 01       	movw	r2, r12
    293c:	a9 82       	std	Y+1, r10	; 0x01
    293e:	ba 82       	std	Y+2, r11	; 0x02
	
	CO_collectSeismic3Axises_ext((uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gain, subsamplesPerSecond,
    2940:	00 d0       	rcall	.+0      	; 0x2942 <CO_collectSeismic3Axises+0x42>
    2942:	0f 92       	push	r0
    2944:	ed b7       	in	r30, 0x3d	; 61
    2946:	fe b7       	in	r31, 0x3e	; 62
    2948:	81 82       	std	Z+1, r8	; 0x01
    294a:	92 82       	std	Z+2, r9	; 0x02
    294c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    294e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2950:	43 83       	std	Z+3, r20	; 0x03
    2952:	54 83       	std	Z+4, r21	; 0x04
    2954:	84 ec       	ldi	r24, 0xC4	; 196
    2956:	6b 81       	ldd	r22, Y+3	; 0x03
    2958:	7c 81       	ldd	r23, Y+4	; 0x04
    295a:	ad 01       	movw	r20, r26
    295c:	29 2f       	mov	r18, r25
    295e:	03 2f       	mov	r16, r19
    2960:	73 01       	movw	r14, r6
    2962:	62 01       	movw	r12, r4
    2964:	51 01       	movw	r10, r2
    2966:	89 80       	ldd	r8, Y+1	; 0x01
    2968:	9a 80       	ldd	r9, Y+2	; 0x02
    296a:	0e 94 a5 13 	call	0x274a	; 0x274a <CO_collectSeismic3Axises_ext>
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
	subsamplesPerChannel, DCPassEnable, averagingPtA, averagingPtB,
	averagingPtC, averagingPtD, numOfSamples, DataArray);
}	
    2976:	24 96       	adiw	r28, 0x04	; 4
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	9f 90       	pop	r9
    2992:	8f 90       	pop	r8
    2994:	7f 90       	pop	r7
    2996:	6f 90       	pop	r6
    2998:	5f 90       	pop	r5
    299a:	4f 90       	pop	r4
    299c:	3f 90       	pop	r3
    299e:	2f 90       	pop	r2
    29a0:	08 95       	ret

000029a2 <CO_collectADC_ext>:
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC_ext(uint8_t channel, uint8_t filterConfig, uint8_t gainExponent, uint16_t SPS, uint16_t numOfSamples, int32_t* DataArray) {
    29a2:	8f 92       	push	r8
    29a4:	9f 92       	push	r9
    29a6:	af 92       	push	r10
    29a8:	bf 92       	push	r11
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	c8 2f       	mov	r28, r24
    29ba:	d6 2e       	mov	r13, r22
    29bc:	d4 2f       	mov	r29, r20
    29be:	59 01       	movw	r10, r18
    29c0:	48 01       	movw	r8, r16
	#ifndef F_CPU
	#define F_CPU 32000000UL
	#endif

	uint16_t period;
	ADC_BUFFER = DataArray;
    29c2:	e0 92 72 50 	sts	0x5072, r14
    29c6:	f0 92 73 50 	sts	0x5073, r15
	ADC_Sampling_Finished = 0;
    29ca:	10 92 cd 50 	sts	0x50CD, r1
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gainExponent);
    29d4:	8c 2f       	mov	r24, r28
    29d6:	6d 2f       	mov	r22, r29
    29d8:	0e 94 c4 03 	call	0x788	; 0x788 <set_ampGain>
	set_filter(filterConfig);
    29dc:	8d 2d       	mov	r24, r13
    29de:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>

	// if acc channel then enable DC Pass 
	// it is assumed that if not using high frequency acc specific function then 
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
    29e2:	8c 2f       	mov	r24, r28
    29e4:	85 50       	subi	r24, 0x05	; 5
    29e6:	83 30       	cpi	r24, 0x03	; 3
    29e8:	18 f4       	brcc	.+6      	; 0x29f0 <CO_collectADC_ext+0x4e>
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	0e 94 d6 08 	call	0x11ac	; 0x11ac <ACC_DCPassEnable>

	enableADCMUX(TRUE);
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	0e 94 2a 07 	call	0xe54	; 0xe54 <enableADCMUX>
	setADCInput(channel);
    29f6:	8c 2f       	mov	r24, r28
    29f8:	0e 94 75 12 	call	0x24ea	; 0x24ea <setADCInput>
	SPIInit(SPI_MODE_1_gc);
    29fc:	84 e0       	ldi	r24, 0x04	; 4
    29fe:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2a02:	84 e5       	ldi	r24, 0x54	; 84
    2a04:	80 93 c0 08 	sts	0x08C0, r24
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.DIRCLR = PIN0_bm;
    2a08:	e0 ea       	ldi	r30, 0xA0	; 160
    2a0a:	f6 e0       	ldi	r31, 0x06	; 6
    2a0c:	dd 24       	eor	r13, r13
    2a0e:	d3 94       	inc	r13
    2a10:	d2 82       	std	Z+2, r13	; 0x02
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.INT0MASK = PIN0_bm;
    2a16:	d2 86       	std	Z+10, r13	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_MED_gc;				
    2a18:	81 87       	std	Z+9, r24	; 0x09

	// Configure clock for AD7767 MCLK for desired sample frequency
	// f_samples = f_MCLK / 16
	// f_MCLK = f_peripheral(2^25Hz) / (f_period + 1Hz)
	// Set IO14 (PE5) to output
	PORTE.DIRSET = PIN5_bm;
    2a1a:	80 e2       	ldi	r24, 0x20	; 32
    2a1c:	e0 e8       	ldi	r30, 0x80	; 128
    2a1e:	f6 e0       	ldi	r31, 0x06	; 6
    2a20:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    2a22:	c0 e4       	ldi	r28, 0x40	; 64
    2a24:	da e0       	ldi	r29, 0x0A	; 10
    2a26:	83 e2       	ldi	r24, 0x23	; 35
    2a28:	89 83       	std	Y+1, r24	; 0x01
	// set period of waveform generator and ccb as duty cycle (want half the period for duty cycle to have good clock signal)
	//period = (1 << (21 - spsExponent)) - 1;
	period = (F_CPU/16)/SPS;
    2a2a:	95 01       	movw	r18, r10
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	60 e8       	ldi	r22, 0x80	; 128
    2a32:	74 e8       	ldi	r23, 0x84	; 132
    2a34:	8e e1       	ldi	r24, 0x1E	; 30
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    2a3c:	89 01       	movw	r16, r18
    2a3e:	9a 01       	movw	r18, r20
    2a40:	c8 01       	movw	r24, r16
	TCE1.PER = period;
    2a42:	0e a3       	lds	r16, 0x5e
    2a44:	1f a3       	lds	r17, 0x5f
	TCE1.CCBBUF = period / 2;
    2a46:	96 95       	lsr	r25
    2a48:	87 95       	ror	r24
    2a4a:	8a af       	sts	0x7a, r24
    2a4c:	9b af       	sts	0x7b, r25
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//set the period as number of samples to know when to stop sampling (and compensate for discarded samples at start of sampling)
	TCC1.PER = numOfSamples;
    2a4e:	e0 e4       	ldi	r30, 0x40	; 64
    2a50:	f8 e0       	ldi	r31, 0x08	; 8
    2a52:	86 a2       	lds	r24, 0x96
    2a54:	97 a2       	lds	r25, 0x97
	//Configure IO13(PF0) to drive event channel that triggers event every time a sample is collected
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    2a56:	88 e7       	ldi	r24, 0x78	; 120
    2a58:	a0 e8       	ldi	r26, 0x80	; 128
    2a5a:	b1 e0       	ldi	r27, 0x01	; 1
    2a5c:	11 96       	adiw	r26, 0x01	; 1
    2a5e:	8c 93       	st	X, r24
    2a60:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    2a62:	d6 82       	std	Z+6, r13	; 0x06
	//TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2a64:	88 81       	ld	r24, Y
    2a66:	80 7f       	andi	r24, 0xF0	; 240
    2a68:	81 60       	ori	r24, 0x01	; 1
    2a6a:	88 83       	st	Y, r24
	
	sampleCount = 0;
    2a6c:	10 92 74 50 	sts	0x5074, r1
    2a70:	10 92 75 50 	sts	0x5075, r1
    2a74:	10 92 76 50 	sts	0x5076, r1
    2a78:	10 92 77 50 	sts	0x5077, r1
	discardCount = 0;
    2a7c:	10 92 5d 40 	sts	0x405D, r1
		
	// Enable interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
    2a80:	e0 ea       	ldi	r30, 0xA0	; 160
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	83 60       	ori	r24, 0x03	; 3
    2a88:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2a8a:	78 94       	sei
	//cli();

	//SPIDisable();	
	//enableADCMUX(FALSE);
	//ADCPower(FALSE);
}
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	bf 90       	pop	r11
    2a9c:	af 90       	pop	r10
    2a9e:	9f 90       	pop	r9
    2aa0:	8f 90       	pop	r8
    2aa2:	08 95       	ret

00002aa4 <CO_collectADC>:
		PORTA.OUTCLR = PIN5_bm;
		PORTA.DIRCLR = PIN5_bm;
	}
}

void CO_collectADC(uint8_t channel, uint8_t gainExponent, uint16_t SPS, uint16_t numOfSamples, int32_t* DataArray) {
    2aa4:	ef 92       	push	r14
    2aa6:	ff 92       	push	r15
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	96 2f       	mov	r25, r22
    2aae:	fa 01       	movw	r30, r20
    2ab0:	d9 01       	movw	r26, r18
    2ab2:	78 01       	movw	r14, r16
	
	CO_collectADC_ext(channel, (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gainExponent, SPS, numOfSamples, DataArray);
    2ab4:	61 ec       	ldi	r22, 0xC1	; 193
    2ab6:	49 2f       	mov	r20, r25
    2ab8:	9f 01       	movw	r18, r30
    2aba:	8d 01       	movw	r16, r26
    2abc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <CO_collectADC_ext>
}
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	08 95       	ret

00002aca <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
    2aca:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    2ad0:	84 81       	ldd	r24, Z+4	; 0x04
    2ad2:	95 81       	ldd	r25, Z+5	; 0x05
    2ad4:	86 1b       	sub	r24, r22
    2ad6:	91 09       	sbc	r25, r1

	return answer;
}
    2ad8:	08 95       	ret

00002ada <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    2ada:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    2ae0:	84 81       	ldd	r24, Z+4	; 0x04
    2ae2:	95 81       	ldd	r25, Z+5	; 0x05
    2ae4:	77 27       	eor	r23, r23
    2ae6:	67 fd       	sbrc	r22, 7
    2ae8:	70 95       	com	r23
    2aea:	86 1b       	sub	r24, r22
    2aec:	97 0b       	sbc	r25, r23

	return answer;
}
    2aee:	08 95       	ret

00002af0 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
    2af0:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    2af6:	84 81       	ldd	r24, Z+4	; 0x04
    2af8:	95 81       	ldd	r25, Z+5	; 0x05
}
    2afa:	08 95       	ret

00002afc <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
    2afc:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
    2b02:	84 81       	ldd	r24, Z+4	; 0x04
}
    2b04:	08 95       	ret

00002b06 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
    2b06:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
    2b0c:	85 81       	ldd	r24, Z+5	; 0x05
}
    2b0e:	08 95       	ret

00002b10 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
    2b10:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    2b12:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
    2b14:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b16:	9a e2       	ldi	r25, 0x2A	; 42
    2b18:	9a 95       	dec	r25
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <ADC_Wait_8MHz+0x8>
    2b1c:	00 c0       	rjmp	.+0      	; 0x2b1e <ADC_Wait_8MHz+0xe>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    2b1e:	84 83       	std	Z+4, r24	; 0x04
}
    2b20:	08 95       	ret

00002b22 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
    2b22:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    2b24:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
    2b26:	91 e0       	ldi	r25, 0x01	; 1
    2b28:	94 83       	std	Z+4, r25	; 0x04
    2b2a:	95 e5       	ldi	r25, 0x55	; 85
    2b2c:	9a 95       	dec	r25
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <ADC_Wait_32MHz+0xa>
    2b30:	00 00       	nop

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    2b32:	84 83       	std	Z+4, r24	; 0x04
}
    2b34:	08 95       	ret

00002b36 <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	eb 01       	movw	r28, r22
    if (oversampling)
    2b44:	44 23       	and	r20, r20
    2b46:	c9 f0       	breq	.+50     	; 0x2b7a <ADC_Offset_Get_Unsigned+0x44>
    2b48:	04 e0       	ldi	r16, 0x04	; 4
    2b4a:	10 e0       	ldi	r17, 0x00	; 0
    2b4c:	ee 24       	eor	r14, r14
    2b4e:	ff 24       	eor	r15, r15
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    2b50:	88 81       	ld	r24, Y
    2b52:	80 68       	ori	r24, 0x80	; 128
    2b54:	88 83       	st	Y, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	80 ff       	sbrs	r24, 0
    2b5a:	fd cf       	rjmp	.-6      	; 0x2b56 <ADC_Offset_Get_Unsigned+0x20>
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	0e 94 65 15 	call	0x2aca	; 0x2aca <ADC_ResultCh_GetWord_Unsigned>
    2b64:	e8 0e       	add	r14, r24
    2b66:	f9 1e       	adc	r15, r25
    2b68:	01 50       	subi	r16, 0x01	; 1
    2b6a:	10 40       	sbci	r17, 0x00	; 0
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
    2b6c:	89 f7       	brne	.-30     	; 0x2b50 <ADC_Offset_Get_Unsigned+0x1a>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
    2b6e:	c7 01       	movw	r24, r14
    2b70:	96 95       	lsr	r25
    2b72:	87 95       	ror	r24
    2b74:	96 95       	lsr	r25
    2b76:	87 95       	ror	r24
    2b78:	09 c0       	rjmp	.+18     	; 0x2b8c <ADC_Offset_Get_Unsigned+0x56>
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    2b7a:	88 81       	ld	r24, Y
    2b7c:	80 68       	ori	r24, 0x80	; 128
    2b7e:	88 83       	st	Y, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	80 ff       	sbrs	r24, 0
    2b84:	fd cf       	rjmp	.-6      	; 0x2b80 <ADC_Offset_Get_Unsigned+0x4a>
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
    2b86:	ce 01       	movw	r24, r28
    2b88:	0e 94 78 15 	call	0x2af0	; 0x2af0 <ADC_ResultCh_GetWord>
      
      return offset;
    }
}
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	08 95       	ret

00002b9a <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	eb 01       	movw	r28, r22
    if (oversampling)
    2ba8:	44 23       	and	r20, r20
    2baa:	e1 f0       	breq	.+56     	; 0x2be4 <ADC_Offset_Get_Signed+0x4a>
    2bac:	04 e0       	ldi	r16, 0x04	; 4
    2bae:	10 e0       	ldi	r17, 0x00	; 0
    2bb0:	ee 24       	eor	r14, r14
    2bb2:	ff 24       	eor	r15, r15
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    2bb4:	88 81       	ld	r24, Y
    2bb6:	80 68       	ori	r24, 0x80	; 128
    2bb8:	88 83       	st	Y, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	80 ff       	sbrs	r24, 0
    2bbe:	fd cf       	rjmp	.-6      	; 0x2bba <ADC_Offset_Get_Signed+0x20>
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <ADC_ResultCh_GetWord_Signed>
    2bc8:	e8 0e       	add	r14, r24
    2bca:	f9 1e       	adc	r15, r25
    2bcc:	01 50       	subi	r16, 0x01	; 1
    2bce:	10 40       	sbci	r17, 0x00	; 0
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
    2bd0:	89 f7       	brne	.-30     	; 0x2bb4 <ADC_Offset_Get_Signed+0x1a>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
    2bd2:	c7 01       	movw	r24, r14
    2bd4:	99 23       	and	r25, r25
    2bd6:	0c f4       	brge	.+2      	; 0x2bda <ADC_Offset_Get_Signed+0x40>
    2bd8:	03 96       	adiw	r24, 0x03	; 3
    2bda:	95 95       	asr	r25
    2bdc:	87 95       	ror	r24
    2bde:	95 95       	asr	r25
    2be0:	87 95       	ror	r24
    2be2:	0a c0       	rjmp	.+20     	; 0x2bf8 <ADC_Offset_Get_Signed+0x5e>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    2be4:	88 81       	ld	r24, Y
    2be6:	80 68       	ori	r24, 0x80	; 128
    2be8:	88 83       	st	Y, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	80 ff       	sbrs	r24, 0
    2bee:	fd cf       	rjmp	.-6      	; 0x2bea <ADC_Offset_Get_Signed+0x50>
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
    2bf4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <ADC_ResultCh_GetWord_Signed>
      
      return offset;
    }
}
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	08 95       	ret

00002c06 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    2c06:	aa ec       	ldi	r26, 0xCA	; 202
    2c08:	b1 e0       	ldi	r27, 0x01	; 1
    2c0a:	92 e0       	ldi	r25, 0x02	; 2
    2c0c:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    2c0e:	e8 2f       	mov	r30, r24
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    2c14:	1c 92       	st	X, r1

	return result;
}
    2c16:	08 95       	ret

00002c18 <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
    2c1e:	82 e0       	ldi	r24, 0x02	; 2
    2c20:	c0 30       	cpi	r28, 0x00	; 0
    2c22:	d8 07       	cpc	r29, r24
    2c24:	59 f4       	brne	.+22     	; 0x2c3c <ADC_CalibrationValues_Load+0x24>
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    2c26:	80 e2       	ldi	r24, 0x20	; 32
    2c28:	0e 94 03 16 	call	0x2c06	; 0x2c06 <SP_ReadCalibrationByte>
    2c2c:	c0 e0       	ldi	r28, 0x00	; 0
    2c2e:	d2 e0       	ldi	r29, 0x02	; 2
    2c30:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    2c32:	81 e2       	ldi	r24, 0x21	; 33
    2c34:	0e 94 03 16 	call	0x2c06	; 0x2c06 <SP_ReadCalibrationByte>
    2c38:	8d 87       	std	Y+13, r24	; 0x0d
    2c3a:	08 c0       	rjmp	.+16     	; 0x2c4c <ADC_CalibrationValues_Load+0x34>
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    2c3c:	84 e2       	ldi	r24, 0x24	; 36
    2c3e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <SP_ReadCalibrationByte>
    2c42:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    2c44:	85 e2       	ldi	r24, 0x25	; 37
    2c46:	0e 94 03 16 	call	0x2c06	; 0x2c06 <SP_ReadCalibrationByte>
    2c4a:	8d 87       	std	Y+13, r24	; 0x0d
	}
}
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	08 95       	ret

00002c52 <chb_init>:

*/
/**************************************************************************/
void chb_init()
{
    memset(&pcb, 0, sizeof(pcb_t));
    2c52:	84 e1       	ldi	r24, 0x14	; 20
    2c54:	ee e3       	ldi	r30, 0x3E	; 62
    2c56:	f1 e2       	ldi	r31, 0x21	; 33
    2c58:	df 01       	movw	r26, r30
    2c5a:	1d 92       	st	X+, r1
    2c5c:	8a 95       	dec	r24
    2c5e:	e9 f7       	brne	.-6      	; 0x2c5a <chb_init+0x8>
    pcb.src_addr = chb_get_short_addr();
    2c60:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <chb_get_short_addr>
    2c64:	80 93 3e 21 	sts	0x213E, r24
    2c68:	90 93 3f 21 	sts	0x213F, r25
    chb_drvr_init();
    2c6c:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <chb_drvr_init>
	//radio_msg_received_int_enable();
}
    2c70:	08 95       	ret

00002c72 <radio_msg_received_int_enable>:

// Configure PE2 to use as proxy interrupt for data being stored in radio buffer
void radio_msg_received_int_enable(){
	PORTE.DIRSET = PIN2_bm;
    2c72:	e0 e8       	ldi	r30, 0x80	; 128
    2c74:	f6 e0       	ldi	r31, 0x06	; 6
    2c76:	84 e0       	ldi	r24, 0x04	; 4
    2c78:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTCLR = PIN2_bm;
    2c7a:	86 83       	std	Z+6, r24	; 0x06
	PORTE.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    2c7c:	92 e0       	ldi	r25, 0x02	; 2
    2c7e:	90 8b       	std	Z+16, r25	; 0x10
	PORTE.INT0MASK = PIN2_bm;
    2c80:	82 87       	std	Z+10, r24	; 0x0a
	PORTE.INTCTRL = PORT_INT0LVL_HI_gc;
    2c82:	83 e0       	ldi	r24, 0x03	; 3
    2c84:	81 87       	std	Z+9, r24	; 0x09
	// Enable low level interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    2c86:	e0 ea       	ldi	r30, 0xA0	; 160
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	84 60       	ori	r24, 0x04	; 4
    2c8e:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2c90:	78 94       	sei
}
    2c92:	08 95       	ret

00002c94 <chb_get_pcb>:
*/
/**************************************************************************/
pcb_t *chb_get_pcb()
{
    return &pcb;
}
    2c94:	8e e3       	ldi	r24, 0x3E	; 62
    2c96:	91 e2       	ldi	r25, 0x21	; 33
    2c98:	08 95       	ret

00002c9a <chb_write>:
/*!

*/
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U32 len)
{
    2c9a:	2f 92       	push	r2
    2c9c:	3f 92       	push	r3
    2c9e:	4f 92       	push	r4
    2ca0:	5f 92       	push	r5
    2ca2:	6f 92       	push	r6
    2ca4:	7f 92       	push	r7
    2ca6:	8f 92       	push	r8
    2ca8:	9f 92       	push	r9
    2caa:	af 92       	push	r10
    2cac:	bf 92       	push	r11
    2cae:	cf 92       	push	r12
    2cb0:	df 92       	push	r13
    2cb2:	ef 92       	push	r14
    2cb4:	ff 92       	push	r15
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	2a 97       	sbiw	r28, 0x0a	; 10
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	2c 01       	movw	r4, r24
    2cca:	1b 01       	movw	r2, r22
    2ccc:	69 01       	movw	r12, r18
    2cce:	7a 01       	movw	r14, r20
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    while (len > 0)
    2cd0:	21 15       	cp	r18, r1
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	41 05       	cpc	r20, r1
    2cd6:	51 05       	cpc	r21, r1
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <chb_write+0x42>
    2cda:	68 c0       	rjmp	.+208    	; 0x2dac <chb_write+0x112>
    U8 status, frm_len, hdr[CHB_HDR_SZ + 1];
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    2cdc:	88 24       	eor	r8, r8
    2cde:	99 24       	eor	r9, r9
    2ce0:	54 01       	movw	r10, r8
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    *hdr_ptr++ = CHB_FCF_BYTE_1;
    2ce2:	08 e9       	ldi	r16, 0x98	; 152

    *hdr_ptr++ = pcb.seq++;
    2ce4:	0f 2e       	mov	r0, r31
    2ce6:	f0 e4       	ldi	r31, 0x40	; 64
    2ce8:	6f 2e       	mov	r6, r31
    2cea:	f1 e2       	ldi	r31, 0x21	; 33
    2cec:	7f 2e       	mov	r7, r31
    2cee:	f0 2d       	mov	r31, r0
	frm_offset = 0;
    while (len > 0)
    {
        // calculate which frame len to use. if greater than max payload, split
        // up operation.
        frm_len = (len > CHB_MAX_PAYLOAD) ? CHB_MAX_PAYLOAD : len;
    2cf0:	1c 2d       	mov	r17, r12
    2cf2:	85 e6       	ldi	r24, 0x65	; 101
    2cf4:	c8 16       	cp	r12, r24
    2cf6:	d1 04       	cpc	r13, r1
    2cf8:	e1 04       	cpc	r14, r1
    2cfa:	f1 04       	cpc	r15, r1
    2cfc:	08 f0       	brcs	.+2      	; 0x2d00 <chb_write+0x66>
    2cfe:	14 e6       	ldi	r17, 0x64	; 100
{
    U8 *hdr_ptr = hdr;

    // calc frame size and put in 0 position of array
    // frame size = hdr sz + payload len + fcs len
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;
    2d00:	81 2f       	mov	r24, r17
    2d02:	85 5f       	subi	r24, 0xF5	; 245
    2d04:	89 83       	std	Y+1, r24	; 0x01

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    2d06:	9f ef       	ldi	r25, 0xFF	; 255
    2d08:	49 16       	cp	r4, r25
    2d0a:	9f ef       	ldi	r25, 0xFF	; 255
    2d0c:	59 06       	cpc	r5, r25
    2d0e:	11 f0       	breq	.+4      	; 0x2d14 <chb_write+0x7a>
    2d10:	81 e6       	ldi	r24, 0x61	; 97
    2d12:	01 c0       	rjmp	.+2      	; 0x2d16 <chb_write+0x7c>
    2d14:	81 e4       	ldi	r24, 0x41	; 65
    2d16:	8a 83       	std	Y+2, r24	; 0x02
    *hdr_ptr++ = CHB_FCF_BYTE_1;
    2d18:	0b 83       	std	Y+3, r16	; 0x03

    *hdr_ptr++ = pcb.seq++;
    2d1a:	f3 01       	movw	r30, r6
    2d1c:	80 81       	ld	r24, Z
    2d1e:	8c 83       	std	Y+4, r24	; 0x04
    2d20:	8f 5f       	subi	r24, 0xFF	; 255
    2d22:	80 83       	st	Z, r24

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
    2d24:	84 e3       	ldi	r24, 0x34	; 52
    2d26:	92 e1       	ldi	r25, 0x12	; 18
    2d28:	8d 83       	std	Y+5, r24	; 0x05
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = addr;
    2d2c:	4f 82       	std	Y+7, r4	; 0x07
    2d2e:	58 86       	std	Y+8, r5	; 0x08
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = pcb.src_addr;
    2d30:	ee e3       	ldi	r30, 0x3E	; 62
    2d32:	f1 e2       	ldi	r31, 0x21	; 33
    2d34:	80 81       	ld	r24, Z
    2d36:	91 81       	ldd	r25, Z+1	; 0x01
    2d38:	89 87       	std	Y+9, r24	; 0x09
    2d3a:	9a 87       	std	Y+10, r25	; 0x0a
		chb_gen_hdr(hdr, addr, frm_len);

        // send data to chip
		//rtry = 0;
		//do{
        status = chb_tx(hdr, data+frm_offset, frm_len);			
    2d3c:	b1 01       	movw	r22, r2
    2d3e:	68 0d       	add	r22, r8
    2d40:	79 1d       	adc	r23, r9
    2d42:	ce 01       	movw	r24, r28
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	41 2f       	mov	r20, r17
    2d48:	0e 94 18 19 	call	0x3230	; 0x3230 <chb_tx>

             switch (status)
    2d4c:	83 30       	cpi	r24, 0x03	; 3
    2d4e:	c9 f0       	breq	.+50     	; 0x2d82 <chb_write+0xe8>
    2d50:	84 30       	cpi	r24, 0x04	; 4
    2d52:	18 f4       	brcc	.+6      	; 0x2d5a <chb_write+0xc0>
    2d54:	81 30       	cpi	r24, 0x01	; 1
    2d56:	e1 f4       	brne	.+56     	; 0x2d90 <chb_write+0xf6>
    2d58:	04 c0       	rjmp	.+8      	; 0x2d62 <chb_write+0xc8>
    2d5a:	85 30       	cpi	r24, 0x05	; 5
    2d5c:	51 f0       	breq	.+20     	; 0x2d72 <chb_write+0xd8>
    2d5e:	80 34       	cpi	r24, 0x40	; 64
    2d60:	b9 f4       	brne	.+46     	; 0x2d90 <chb_write+0xf6>
             {
             case RADIO_SUCCESS:
                  //fall through
             case CHB_SUCCESS_DATA_PENDING:
                 pcb.txd_success++;
    2d62:	e5 e4       	ldi	r30, 0x45	; 69
    2d64:	f1 e2       	ldi	r31, 0x21	; 33
    2d66:	80 81       	ld	r24, Z
    2d68:	91 81       	ldd	r25, Z+1	; 0x01
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	80 83       	st	Z, r24
    2d6e:	91 83       	std	Z+1, r25	; 0x01
                 break;
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <chb_write+0xf6>
 
             case CHB_NO_ACK:
                 pcb.txd_noack++;
    2d72:	e7 e4       	ldi	r30, 0x47	; 71
    2d74:	f1 e2       	ldi	r31, 0x21	; 33
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	01 96       	adiw	r24, 0x01	; 1
    2d7c:	80 83       	st	Z, r24
    2d7e:	91 83       	std	Z+1, r25	; 0x01
				 //rtry++;
                 break;
    2d80:	07 c0       	rjmp	.+14     	; 0x2d90 <chb_write+0xf6>
 
             case CHB_CHANNEL_ACCESS_FAILURE:
                 pcb.txd_channel_fail++;
    2d82:	e9 e4       	ldi	r30, 0x49	; 73
    2d84:	f1 e2       	ldi	r31, 0x21	; 33
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	01 96       	adiw	r24, 0x01	; 1
    2d8c:	80 83       	st	Z, r24
    2d8e:	91 83       	std	Z+1, r25	; 0x01
             }
			//if(rtry>0) _delay_us(10);		//if not successfully sent the first time, wait some time and try again
			//if(rtry==20) return status;;		//after 20 tries give up on sending the message	
		//} while(status != CHB_SUCCESS);			
        // adjust len and restart
		frm_offset += frm_len;
    2d90:	81 2f       	mov	r24, r17
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a0 e0       	ldi	r26, 0x00	; 0
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	88 0e       	add	r8, r24
    2d9a:	99 1e       	adc	r9, r25
    2d9c:	aa 1e       	adc	r10, r26
    2d9e:	bb 1e       	adc	r11, r27
        len = len - frm_len;
    2da0:	c8 1a       	sub	r12, r24
    2da2:	d9 0a       	sbc	r13, r25
    2da4:	ea 0a       	sbc	r14, r26
    2da6:	fb 0a       	sbc	r15, r27
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    while (len > 0)
    2da8:	09 f0       	breq	.+2      	; 0x2dac <chb_write+0x112>
    2daa:	a2 cf       	rjmp	.-188    	; 0x2cf0 <chb_write+0x56>
		frm_offset += frm_len;
        len = len - frm_len;
		//_delay_ms(100);				//wait a little before sending next message
    }
    return CHB_SUCCESS;
}
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	2a 96       	adiw	r28, 0x0a	; 10
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	ff 90       	pop	r15
    2dbe:	ef 90       	pop	r14
    2dc0:	df 90       	pop	r13
    2dc2:	cf 90       	pop	r12
    2dc4:	bf 90       	pop	r11
    2dc6:	af 90       	pop	r10
    2dc8:	9f 90       	pop	r9
    2dca:	8f 90       	pop	r8
    2dcc:	7f 90       	pop	r7
    2dce:	6f 90       	pop	r6
    2dd0:	5f 90       	pop	r5
    2dd2:	4f 90       	pop	r4
    2dd4:	3f 90       	pop	r3
    2dd6:	2f 90       	pop	r2
    2dd8:	08 95       	ret

00002dda <chb_read>:
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
{
    2dda:	df 92       	push	r13
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	7c 01       	movw	r14, r24

    data_ptr = rx->data;

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    2dea:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <chb_buf_read>
    2dee:	d8 2e       	mov	r13, r24
    2df0:	88 23       	and	r24, r24
    2df2:	0c f4       	brge	.+2      	; 0x2df6 <chb_read+0x1c>
    2df4:	46 c0       	rjmp	.+140    	; 0x2e82 <chb_read+0xa8>
    {
        return 0;
    }
    *data_ptr++ = len;
    2df6:	f7 01       	movw	r30, r14
    2df8:	85 83       	std	Z+5, r24	; 0x05

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    2dfa:	88 23       	and	r24, r24
    2dfc:	71 f0       	breq	.+28     	; 0x2e1a <chb_read+0x40>
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    {
        return 0;
    }
    *data_ptr++ = len;
    2dfe:	e7 01       	movw	r28, r14
    2e00:	26 96       	adiw	r28, 0x06	; 6
 
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
    2e02:	87 01       	movw	r16, r14
    2e04:	09 5f       	subi	r16, 0xF9	; 249
    2e06:	1f 4f       	sbci	r17, 0xFF	; 255
    2e08:	81 50       	subi	r24, 0x01	; 1
    2e0a:	08 0f       	add	r16, r24
    2e0c:	11 1d       	adc	r17, r1
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    {
        *data_ptr++ = chb_buf_read();
    2e0e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <chb_buf_read>
    2e12:	89 93       	st	Y+, r24
        return 0;
    }
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    2e14:	c0 17       	cp	r28, r16
    2e16:	d1 07       	cpc	r29, r17
    2e18:	d1 f7       	brne	.-12     	; 0x2e0e <chb_read+0x34>
    // we'll use it as temp storage to parse the frame. then move the frame
    // down so that only the payload will be in the buffer.

    // extract the sequence number
    data_ptr = rx->data + 3;    // location of sequence number
    seq = *data_ptr;
    2e1a:	f7 01       	movw	r30, r14
    2e1c:	c0 85       	ldd	r28, Z+8	; 0x08

    // parse the buffer and extract the dest and src addresses
    data_ptr = rx->data + 6;                // location of dest addr
    rx->dest_addr = *(U16 *)data_ptr;
    2e1e:	83 85       	ldd	r24, Z+11	; 0x0b
    2e20:	94 85       	ldd	r25, Z+12	; 0x0c
    2e22:	83 83       	std	Z+3, r24	; 0x03
    2e24:	94 83       	std	Z+4, r25	; 0x04
    data_ptr += sizeof(U16);
    rx->src_addr = *(U16 *)data_ptr;
    2e26:	85 85       	ldd	r24, Z+13	; 0x0d
    2e28:	96 85       	ldd	r25, Z+14	; 0x0e
    2e2a:	81 83       	std	Z+1, r24	; 0x01
    2e2c:	92 83       	std	Z+2, r25	; 0x02
    data_ptr += sizeof(U16);

    // if the data in the rx buf is 0, then clear the rx_flag. otherwise, keep it raised
    if (!chb_buf_get_len())
    2e2e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <chb_buf_get_len>
    2e32:	88 23       	and	r24, r24
    2e34:	11 f4       	brne	.+4      	; 0x2e3a <chb_read+0x60>
    {
        pcb.data_rcv = false;
    2e36:	10 92 41 21 	sts	0x2141, r1
#else
    // duplicate frame check (dupe check). we want to remove frames that have been already been received since they 
    // are just retries. 
    // note: this dupe check only removes duplicate frames from the previous transfer. if another frame from a different
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    2e3a:	80 91 13 20 	lds	r24, 0x2013
    2e3e:	c8 17       	cp	r28, r24
    2e40:	51 f4       	brne	.+20     	; 0x2e56 <chb_read+0x7c>
    2e42:	f7 01       	movw	r30, r14
    2e44:	21 81       	ldd	r18, Z+1	; 0x01
    2e46:	32 81       	ldd	r19, Z+2	; 0x02
    2e48:	80 91 14 20 	lds	r24, 0x2014
    2e4c:	90 91 15 20 	lds	r25, 0x2015
    2e50:	28 17       	cp	r18, r24
    2e52:	39 07       	cpc	r19, r25
    2e54:	c1 f0       	breq	.+48     	; 0x2e86 <chb_read+0xac>
        // it properly. discard.
        return 0;
    }
    else
    {
        prev_seq = seq;
    2e56:	c0 93 13 20 	sts	0x2013, r28
        prev_src_addr = rx->src_addr;
    2e5a:	f7 01       	movw	r30, r14
    2e5c:	81 81       	ldd	r24, Z+1	; 0x01
    2e5e:	92 81       	ldd	r25, Z+2	; 0x02
    2e60:	80 93 14 20 	sts	0x2014, r24
    2e64:	90 93 15 20 	sts	0x2015, r25
    }

    // move the payload down to the beginning of the data buffer
    //memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	memmove(rx, data_ptr, len - CHB_HDR_SZ);
    2e68:	b7 01       	movw	r22, r14
    2e6a:	61 5f       	subi	r22, 0xF1	; 241
    2e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6e:	4d 2d       	mov	r20, r13
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	49 50       	subi	r20, 0x09	; 9
    2e74:	50 40       	sbci	r21, 0x00	; 0
    2e76:	c7 01       	movw	r24, r14
    2e78:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <memmove>
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
    2e7c:	8d 2d       	mov	r24, r13
    2e7e:	8b 50       	subi	r24, 0x0B	; 11
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <chb_read+0xae>

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    {
        return 0;
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	01 c0       	rjmp	.+2      	; 0x2e88 <chb_read+0xae>
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    {
        // this is a duplicate frame from a retry. the remote node thinks we didn't receive 
        // it properly. discard.
        return 0;
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    //memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	memmove(rx, data_ptr, len - CHB_HDR_SZ);
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
#endif
}
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	ff 90       	pop	r15
    2e92:	ef 90       	pop	r14
    2e94:	df 90       	pop	r13
    2e96:	08 95       	ret

00002e98 <chb_buf_init>:

*/
/**************************************************************************/
void chb_buf_init()
{
    rd_ptr = 0;
    2e98:	10 92 52 21 	sts	0x2152, r1
    wr_ptr = 0;
    2e9c:	10 92 53 21 	sts	0x2153, r1
    len = 0;
    2ea0:	10 92 54 21 	sts	0x2154, r1
}
    2ea4:	08 95       	ret

00002ea6 <chb_buf_write>:

*/
/**************************************************************************/
void chb_buf_write(U8 data)
{
    chb_buf[wr_ptr] = data;
    2ea6:	20 91 53 21 	lds	r18, 0x2153
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	f9 01       	movw	r30, r18
    2eae:	eb 5a       	subi	r30, 0xAB	; 171
    2eb0:	fe 4d       	sbci	r31, 0xDE	; 222
    2eb2:	80 83       	st	Z, r24
    wr_ptr = (wr_ptr + 1) % CHB_BUF_SZ;
    2eb4:	c9 01       	movw	r24, r18
    2eb6:	01 96       	adiw	r24, 0x01	; 1
    2eb8:	60 e8       	ldi	r22, 0x80	; 128
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    2ec0:	80 93 53 21 	sts	0x2153, r24
    len++;
    2ec4:	80 91 54 21 	lds	r24, 0x2154
    2ec8:	8f 5f       	subi	r24, 0xFF	; 255
    2eca:	80 93 54 21 	sts	0x2154, r24
}
    2ece:	08 95       	ret

00002ed0 <chb_buf_read>:
/**************************************************************************/
U8 chb_buf_read()
{
    U8 data;

    data = chb_buf[rd_ptr];
    2ed0:	20 91 52 21 	lds	r18, 0x2152
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	f9 01       	movw	r30, r18
    2ed8:	eb 5a       	subi	r30, 0xAB	; 171
    2eda:	fe 4d       	sbci	r31, 0xDE	; 222
    2edc:	40 81       	ld	r20, Z
    rd_ptr = (rd_ptr + 1) % CHB_BUF_SZ;
    2ede:	2f 5f       	subi	r18, 0xFF	; 255
    2ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee2:	c9 01       	movw	r24, r18
    2ee4:	60 e8       	ldi	r22, 0x80	; 128
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    2eec:	80 93 52 21 	sts	0x2152, r24
    len--;
    2ef0:	80 91 54 21 	lds	r24, 0x2154
    2ef4:	81 50       	subi	r24, 0x01	; 1
    2ef6:	80 93 54 21 	sts	0x2154, r24
    return data;
}
    2efa:	84 2f       	mov	r24, r20
    2efc:	08 95       	ret

00002efe <chb_buf_get_len>:
*/
/**************************************************************************/
U8 chb_buf_get_len()
{
    return len;
}
    2efe:	80 91 54 21 	lds	r24, 0x2154
    2f02:	08 95       	ret

00002f04 <chb_get_ieee_addr>:
/*!

*/
/**************************************************************************/
void chb_get_ieee_addr(U8 *addr)
{
    2f04:	bc 01       	movw	r22, r24
    chb_eeprom_read(CHB_EEPROM_IEEE_ADDR, addr, 8);
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	48 e0       	ldi	r20, 0x08	; 8
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <chb_eeprom_read>
}
    2f12:	08 95       	ret

00002f14 <chb_get_short_addr>:
/*!

*/
/**************************************************************************/
U16 chb_get_short_addr()
{
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	0f 92       	push	r0
    2f1a:	0f 92       	push	r0
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    U8 addr[2];

    chb_eeprom_read(CHB_EEPROM_SHORT_ADDR, addr, 2);
    2f20:	89 e0       	ldi	r24, 0x09	; 9
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	be 01       	movw	r22, r28
    2f26:	6f 5f       	subi	r22, 0xFF	; 255
    2f28:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2a:	42 e0       	ldi	r20, 0x02	; 2
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <chb_eeprom_read>
    return *(U16 *)addr;
}
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	9a 81       	ldd	r25, Y+2	; 0x02
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	08 95       	ret

00002f40 <RadioCS>:
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
}

//select radio SPI on port D with cs
void RadioCS(uint8_t status){
	if (status) PORTD.OUTCLR = PIN4_bm;
    2f40:	88 23       	and	r24, r24
    2f42:	29 f0       	breq	.+10     	; 0x2f4e <RadioCS+0xe>
    2f44:	80 e1       	ldi	r24, 0x10	; 16
    2f46:	e0 e6       	ldi	r30, 0x60	; 96
    2f48:	f6 e0       	ldi	r31, 0x06	; 6
    2f4a:	86 83       	std	Z+6, r24	; 0x06
    2f4c:	08 95       	ret
	else {
		PORTD.OUTSET = PIN4_bm;
    2f4e:	80 e1       	ldi	r24, 0x10	; 16
    2f50:	e0 e6       	ldi	r30, 0x60	; 96
    2f52:	f6 e0       	ldi	r31, 0x06	; 6
    2f54:	85 83       	std	Z+5, r24	; 0x05
    2f56:	08 95       	ret

00002f58 <chb_frame_write>:
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
{
    2f58:	df 92       	push	r13
    2f5a:	ef 92       	push	r14
    2f5c:	ff 92       	push	r15
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	8c 01       	movw	r16, r24
    2f68:	c6 2f       	mov	r28, r22
    2f6a:	7a 01       	movw	r14, r20
    2f6c:	d2 2e       	mov	r13, r18
    U8 i;
	//U8 dummy;
	
    // dont allow transmission longer than max frame size
    if ((hdr_len + data_len) > 127)
    2f6e:	82 2f       	mov	r24, r18
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	86 0f       	add	r24, r22
    2f74:	91 1d       	adc	r25, r1
    2f76:	80 38       	cpi	r24, 0x80	; 128
    2f78:	91 05       	cpc	r25, r1
    2f7a:	8c f5       	brge	.+98     	; 0x2fde <chb_frame_write+0x86>
    {
        return;
    }

    // initiate spi transaction
    CHB_ENTER_CRIT();
    2f7c:	8f b7       	in	r24, 0x3f	; 63
    2f7e:	80 93 56 40 	sts	0x4056, r24
    2f82:	f8 94       	cli
    RadioCS(TRUE); 
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>

    // send fifo write command
    //dummy = SPID_write(CHB_SPI_CMD_FW);
	SPID_write(CHB_SPI_CMD_FW);
    2f8a:	80 e6       	ldi	r24, 0x60	; 96
    2f8c:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    2f90:	cc 23       	and	r28, r28
    2f92:	79 f0       	breq	.+30     	; 0x2fb2 <chb_frame_write+0x5a>
/**************************************************************************/
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
    2f94:	c8 01       	movw	r24, r16
    2f96:	01 96       	adiw	r24, 0x01	; 1
    2f98:	c1 50       	subi	r28, 0x01	; 1
    2f9a:	9c 01       	movw	r18, r24
    2f9c:	2c 0f       	add	r18, r28
    2f9e:	31 1d       	adc	r19, r1
    2fa0:	e9 01       	movw	r28, r18

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    {
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	81 91       	ld	r24, Z+
    2fa6:	8f 01       	movw	r16, r30
    2fa8:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
    // send fifo write command
    //dummy = SPID_write(CHB_SPI_CMD_FW);
	SPID_write(CHB_SPI_CMD_FW);

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    2fac:	0c 17       	cp	r16, r28
    2fae:	1d 07       	cpc	r17, r29
    2fb0:	c1 f7       	brne	.-16     	; 0x2fa2 <chb_frame_write+0x4a>
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    2fb2:	dd 20       	and	r13, r13
    2fb4:	69 f0       	breq	.+26     	; 0x2fd0 <chb_frame_write+0x78>
/**************************************************************************/
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
    2fb6:	e7 01       	movw	r28, r14
    2fb8:	21 96       	adiw	r28, 0x01	; 1
    2fba:	da 94       	dec	r13
    2fbc:	cd 0d       	add	r28, r13
    2fbe:	d1 1d       	adc	r29, r1

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    {
        //dummy = SPID_write(*data++);
		SPID_write(*data++);
    2fc0:	f7 01       	movw	r30, r14
    2fc2:	81 91       	ld	r24, Z+
    2fc4:	7f 01       	movw	r14, r30
    2fc6:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    2fca:	ec 16       	cp	r14, r28
    2fcc:	fd 06       	cpc	r15, r29
    2fce:	c1 f7       	brne	.-16     	; 0x2fc0 <chb_frame_write+0x68>
        //dummy = SPID_write(*data++);
		SPID_write(*data++);
    }

    // terminate spi transaction
    RadioCS(FALSE); 
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>
    CHB_LEAVE_CRIT();
    2fd6:	80 91 56 40 	lds	r24, 0x4056
    2fda:	8f bf       	out	0x3f, r24	; 63
    2fdc:	78 94       	sei
}
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	df 90       	pop	r13
    2fec:	08 95       	ret

00002fee <chb_reg_write>:
/*!

*/
/**************************************************************************/
void chb_reg_write(U8 addr, U8 val)
{
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	d8 2f       	mov	r29, r24
    2ff4:	c6 2f       	mov	r28, r22
    //U8 dummy; 

    /* Add the Register Write command to the address. */
    addr |= 0xC0;

    CHB_ENTER_CRIT();
    2ff6:	8f b7       	in	r24, 0x3f	; 63
    2ff8:	80 93 56 40 	sts	0x4056, r24
    2ffc:	f8 94       	cli
    RadioCS(TRUE);
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>

    /*Send Register address and write register content.*/
    //dummy = SPID_write(addr);
	SPID_write(addr);
    3004:	8d 2f       	mov	r24, r29
    3006:	80 6c       	ori	r24, 0xC0	; 192
    3008:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
    //dummy = SPID_write(val);
	SPID_write(val);
    300c:	8c 2f       	mov	r24, r28
    300e:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>

    RadioCS(FALSE);
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>
    CHB_LEAVE_CRIT();
    3018:	80 91 56 40 	lds	r24, 0x4056
    301c:	8f bf       	out	0x3f, r24	; 63
    301e:	78 94       	sei
}
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	08 95       	ret

00003026 <chb_set_pwr>:
/*!
    Set the power level
*/
/**************************************************************************/
void chb_set_pwr(U8 val)
{
    3026:	68 2f       	mov	r22, r24
    chb_reg_write(PHY_TX_PWR, val);
    3028:	85 e0       	ldi	r24, 0x05	; 5
    302a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <chb_reg_write>
}
    302e:	08 95       	ret

00003030 <chb_reg_write64>:
/*!

*/
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	08 2f       	mov	r16, r24
    U8 i;

    for (i=0; i<8; i++)
    303a:	c6 2f       	mov	r28, r22
    303c:	d7 2f       	mov	r29, r23
    303e:	10 e0       	ldi	r17, 0x00	; 0
    {
        chb_reg_write(addr + i, *(val + i));
    3040:	69 91       	ld	r22, Y+
    3042:	81 2f       	mov	r24, r17
    3044:	80 0f       	add	r24, r16
    3046:	0e 94 f7 17 	call	0x2fee	; 0x2fee <chb_reg_write>
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    U8 i;

    for (i=0; i<8; i++)
    304a:	1f 5f       	subi	r17, 0xFF	; 255
    304c:	18 30       	cpi	r17, 0x08	; 8
    304e:	c1 f7       	brne	.-16     	; 0x3040 <chb_reg_write64+0x10>
    {
        chb_reg_write(addr + i, *(val + i));
    }
}
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	08 95       	ret

0000305a <chb_set_ieee_addr>:
/*! 
 
*/
/**************************************************************************/
void chb_set_ieee_addr(U8 *addr)
{
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	ec 01       	movw	r28, r24
    chb_eeprom_write(CHB_EEPROM_IEEE_ADDR, addr, 8); 
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	be 01       	movw	r22, r28
    3066:	48 e0       	ldi	r20, 0x08	; 8
    3068:	50 e0       	ldi	r21, 0x00	; 0
    306a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <chb_eeprom_write>
    chb_reg_write64(IEEE_ADDR_0, addr); 
    306e:	84 e2       	ldi	r24, 0x24	; 36
    3070:	be 01       	movw	r22, r28
    3072:	0e 94 18 18 	call	0x3030	; 0x3030 <chb_reg_write64>
}
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	08 95       	ret

0000307c <chb_reg_write16>:
/*!

*/
/**************************************************************************/
void chb_reg_write16(U8 addr, U16 val)
{
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	c8 2f       	mov	r28, r24
    3082:	d7 2f       	mov	r29, r23
    U8 i;

    for (i=0; i<2; i++)
    {
        chb_reg_write(addr + i, val >> (8 * i));
    3084:	0e 94 f7 17 	call	0x2fee	; 0x2fee <chb_reg_write>
    3088:	8c 2f       	mov	r24, r28
    308a:	8f 5f       	subi	r24, 0xFF	; 255
    308c:	6d 2f       	mov	r22, r29
    308e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <chb_reg_write>
    }
}
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <chb_set_short_addr>:
/*!

*/
/**************************************************************************/
void chb_set_short_addr(U16 addr)
{
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	0f 92       	push	r0
    30a2:	0f 92       	push	r0
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	9a 83       	std	Y+2, r25	; 0x02
    U8 *addr_ptr = (U8 *)&addr;
    pcb_t *pcb = chb_get_pcb();
    30ac:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <chb_get_pcb>
    30b0:	8c 01       	movw	r16, r24

    chb_eeprom_write(CHB_EEPROM_SHORT_ADDR, addr_ptr, 2);
    30b2:	89 e0       	ldi	r24, 0x09	; 9
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	be 01       	movw	r22, r28
    30b8:	6f 5f       	subi	r22, 0xFF	; 255
    30ba:	7f 4f       	sbci	r23, 0xFF	; 255
    30bc:	42 e0       	ldi	r20, 0x02	; 2
    30be:	50 e0       	ldi	r21, 0x00	; 0
    30c0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <chb_eeprom_write>
    chb_reg_write16(SHORT_ADDR_0, addr);
    30c4:	69 81       	ldd	r22, Y+1	; 0x01
    30c6:	7a 81       	ldd	r23, Y+2	; 0x02
    30c8:	80 e2       	ldi	r24, 0x20	; 32
    30ca:	0e 94 3e 18 	call	0x307c	; 0x307c <chb_reg_write16>
    pcb->src_addr = addr;
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	f8 01       	movw	r30, r16
    30d4:	80 83       	st	Z, r24
    30d6:	91 83       	std	Z+1, r25	; 0x01
}
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	df 91       	pop	r29
    30de:	cf 91       	pop	r28
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	08 95       	ret

000030e6 <chb_reg_read>:
/*!

*/
/**************************************************************************/
U8 chb_reg_read(U8 addr)
{
    30e6:	cf 93       	push	r28
    30e8:	c8 2f       	mov	r28, r24
    U8 val = 0;

    /* Add the register read command to the register address. */
    addr |= 0x80;

    CHB_ENTER_CRIT();
    30ea:	8f b7       	in	r24, 0x3f	; 63
    30ec:	80 93 56 40 	sts	0x4056, r24
    30f0:	f8 94       	cli
    RadioCS(TRUE);
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>

    /*Send Register address and read register content.*/
    val = SPID_write(addr);
    30f8:	8c 2f       	mov	r24, r28
    30fa:	80 68       	ori	r24, 0x80	; 128
    30fc:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
    val = SPID_write(val);
    3100:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
    3104:	c8 2f       	mov	r28, r24

    RadioCS(FALSE);
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>
    CHB_LEAVE_CRIT();
    310c:	80 91 56 40 	lds	r24, 0x4056
    3110:	8f bf       	out	0x3f, r24	; 63
    3112:	78 94       	sei

    return val;
}
    3114:	8c 2f       	mov	r24, r28
    3116:	cf 91       	pop	r28
    3118:	08 95       	ret

0000311a <chb_get_state>:

*/
/**************************************************************************/
static U8 chb_get_state()
{
    return chb_reg_read(TRX_STATUS) & 0x1f;
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
}
    3120:	8f 71       	andi	r24, 0x1F	; 31
    3122:	08 95       	ret

00003124 <chb_reg_read_mod_write>:
/*!

*/
/**************************************************************************/
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    3124:	1f 93       	push	r17
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	c8 2f       	mov	r28, r24
    312c:	16 2f       	mov	r17, r22
    312e:	d4 2f       	mov	r29, r20
    U8 tmp;

    tmp = chb_reg_read(addr);
    3130:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    val &= mask;                // mask off stray bits from val
    tmp &= ~mask;               // mask off bits in reg val
    3134:	6d 2f       	mov	r22, r29
    3136:	60 95       	com	r22
    3138:	68 23       	and	r22, r24
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    U8 tmp;

    tmp = chb_reg_read(addr);
    val &= mask;                // mask off stray bits from val
    313a:	d1 23       	and	r29, r17
    tmp &= ~mask;               // mask off bits in reg val
    tmp |= val;                 // copy val into reg val
    313c:	6d 2b       	or	r22, r29
    chb_reg_write(addr, tmp);   // write back to reg
    313e:	8c 2f       	mov	r24, r28
    3140:	0e 94 f7 17 	call	0x2fee	; 0x2fee <chb_reg_write>
}
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	1f 91       	pop	r17
    314a:	08 95       	ret

0000314c <chb_set_state>:
    for certain operations. Check the datasheet for more details on the state 
    machine and manipulations.
*/
/**************************************************************************/
U8 chb_set_state(U8 state)
{
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	d8 2f       	mov	r29, r24
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    3152:	80 91 64 06 	lds	r24, 0x0664
    3156:	81 fd       	sbrc	r24, 1
    3158:	4b c0       	rjmp	.+150    	; 0x31f0 <chb_set_state+0xa4>
    {
        return RADIO_WRONG_STATE;
    }

    // if we're in a transition state, wait for the state to become stable
    curr_state = chb_get_state();
    315a:	0e 94 8d 18 	call	0x311a	; 0x311a <chb_get_state>
    315e:	c8 2f       	mov	r28, r24
    if ((curr_state == CHB_BUSY_TX_ARET) || (curr_state == CHB_BUSY_RX_AACK) || (curr_state == CHB_BUSY_RX) || (curr_state == CHB_BUSY_TX))
    3160:	81 51       	subi	r24, 0x11	; 17
    3162:	82 30       	cpi	r24, 0x02	; 2
    3164:	20 f0       	brcs	.+8      	; 0x316e <chb_set_state+0x22>
    3166:	c1 30       	cpi	r28, 0x01	; 1
    3168:	11 f0       	breq	.+4      	; 0x316e <chb_set_state+0x22>
    316a:	c2 30       	cpi	r28, 0x02	; 2
    316c:	21 f4       	brne	.+8      	; 0x3176 <chb_set_state+0x2a>
    {
        while (chb_get_state() == curr_state);
    316e:	0e 94 8d 18 	call	0x311a	; 0x311a <chb_get_state>
    3172:	8c 17       	cp	r24, r28
    3174:	e1 f3       	breq	.-8      	; 0x316e <chb_set_state+0x22>
    }

    // At this point it is clear that the requested new_state is:
    // TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
    // we need to handle some special cases before we transition to the new state
    switch (state)
    3176:	d6 31       	cpi	r29, 0x16	; 22
    3178:	f9 f0       	breq	.+62     	; 0x31b8 <chb_set_state+0x6c>
    317a:	d9 31       	cpi	r29, 0x19	; 25
    317c:	89 f0       	breq	.+34     	; 0x31a0 <chb_set_state+0x54>
    317e:	d8 30       	cpi	r29, 0x08	; 8
    3180:	31 f5       	brne	.+76     	; 0x31ce <chb_set_state+0x82>
    {
    case CHB_TRX_OFF:
        /* Go to TRX_OFF from any state. */
        CHB_SLPTR_DISABLE();
    3182:	e4 e6       	ldi	r30, 0x64	; 100
    3184:	f6 e0       	ldi	r31, 0x06	; 6
    3186:	80 81       	ld	r24, Z
    3188:	8d 7f       	andi	r24, 0xFD	; 253
    318a:	80 83       	st	Z, r24
        chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1f);
    318c:	82 e0       	ldi	r24, 0x02	; 2
    318e:	63 e0       	ldi	r22, 0x03	; 3
    3190:	4f e1       	ldi	r20, 0x1F	; 31
    3192:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
    3196:	8a e0       	ldi	r24, 0x0A	; 10
    3198:	8a 95       	dec	r24
    319a:	f1 f7       	brne	.-4      	; 0x3198 <chb_set_state+0x4c>
    319c:	00 c0       	rjmp	.+0      	; 0x319e <chb_set_state+0x52>
    319e:	17 c0       	rjmp	.+46     	; 0x31ce <chb_set_state+0x82>
        _delay_us(TIME_ALL_STATES_TRX_OFF);
        break;

    case CHB_TX_ARET_ON:
        if (curr_state == CHB_RX_AACK_ON)
    31a0:	c6 31       	cpi	r28, 0x16	; 22
    31a2:	a9 f4       	brne	.+42     	; 0x31ce <chb_set_state+0x82>
        {
            /* First do intermediate state transition to PLL_ON, then to TX_ARET_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
    31a4:	82 e0       	ldi	r24, 0x02	; 2
    31a6:	69 e0       	ldi	r22, 0x09	; 9
    31a8:	4f e1       	ldi	r20, 0x1F	; 31
    31aa:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
    31ae:	9a e0       	ldi	r25, 0x0A	; 10
    31b0:	9a 95       	dec	r25
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <chb_set_state+0x64>
    31b4:	00 c0       	rjmp	.+0      	; 0x31b6 <chb_set_state+0x6a>
    31b6:	0b c0       	rjmp	.+22     	; 0x31ce <chb_set_state+0x82>
            _delay_us(TIME_RX_ON_PLL_ON);
        }
        break;

    case CHB_RX_AACK_ON:
        if (curr_state == CHB_TX_ARET_ON)
    31b8:	c9 31       	cpi	r28, 0x19	; 25
    31ba:	49 f4       	brne	.+18     	; 0x31ce <chb_set_state+0x82>
        {
            /* First do intermediate state transition to RX_ON, then to RX_AACK_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	69 e0       	ldi	r22, 0x09	; 9
    31c0:	4f e1       	ldi	r20, 0x1F	; 31
    31c2:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
    31c6:	8a e0       	ldi	r24, 0x0A	; 10
    31c8:	8a 95       	dec	r24
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <chb_set_state+0x7c>
    31cc:	00 c0       	rjmp	.+0      	; 0x31ce <chb_set_state+0x82>
        }
        break;
    }

    /* Now we're okay to transition to any new state. */
    chb_reg_read_mod_write(TRX_STATE, state, 0x1f);
    31ce:	82 e0       	ldi	r24, 0x02	; 2
    31d0:	6d 2f       	mov	r22, r29
    31d2:	4f e1       	ldi	r20, 0x1F	; 31
    31d4:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
    31d8:	8f e6       	ldi	r24, 0x6F	; 111
    31da:	93 e0       	ldi	r25, 0x03	; 3
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <chb_set_state+0x90>
    31e0:	00 c0       	rjmp	.+0      	; 0x31e2 <chb_set_state+0x96>
    31e2:	00 00       	nop

    /* When the PLL is active most states can be reached in 1us. However, from */
    /* TRX_OFF the PLL needs time to activate. */
    _delay_us(TIME_TRX_OFF_PLL_ON);

    if (chb_get_state() == state)
    31e4:	0e 94 8d 18 	call	0x311a	; 0x311a <chb_get_state>
    31e8:	8d 17       	cp	r24, r29
    31ea:	21 f4       	brne	.+8      	; 0x31f4 <chb_set_state+0xa8>
    {
        return RADIO_SUCCESS;
    31ec:	80 e4       	ldi	r24, 0x40	; 64
    31ee:	03 c0       	rjmp	.+6      	; 0x31f6 <chb_set_state+0xaa>
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    {
        return RADIO_WRONG_STATE;
    31f0:	84 e4       	ldi	r24, 0x44	; 68
    31f2:	01 c0       	rjmp	.+2      	; 0x31f6 <chb_set_state+0xaa>

    if (chb_get_state() == state)
    {
        return RADIO_SUCCESS;
    }
    return RADIO_TIMED_OUT;
    31f4:	83 e4       	ldi	r24, 0x43	; 67
}
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	08 95       	ret

000031fc <chb_sleep>:
    Enable or disable the radio's sleep mode.
*/
/**************************************************************************/
void chb_sleep(U8 enb)
{
    if (enb)
    31fc:	88 23       	and	r24, r24
    31fe:	49 f0       	breq	.+18     	; 0x3212 <chb_sleep+0x16>
    {
        // first we need to go to TRX OFF state
        chb_set_state(CHB_TRX_OFF);
    3200:	88 e0       	ldi	r24, 0x08	; 8
    3202:	0e 94 a6 18 	call	0x314c	; 0x314c <chb_set_state>

        // set the SLPTR pin
        CHB_SLPTR_PORT |= _BV(CHB_SLPTR_PIN);
    3206:	e4 e6       	ldi	r30, 0x64	; 100
    3208:	f6 e0       	ldi	r31, 0x06	; 6
    320a:	80 81       	ld	r24, Z
    320c:	82 60       	ori	r24, 0x02	; 2
    320e:	80 83       	st	Z, r24
    3210:	08 95       	ret
    }
    else
    {
        // make sure the SLPTR pin is low first
        CHB_SLPTR_PORT &= ~(_BV(CHB_SLPTR_PIN));
    3212:	e4 e6       	ldi	r30, 0x64	; 100
    3214:	f6 e0       	ldi	r31, 0x06	; 6
    3216:	80 81       	ld	r24, Z
    3218:	8d 7f       	andi	r24, 0xFD	; 253
    321a:	80 83       	st	Z, r24
    321c:	8f e7       	ldi	r24, 0x7F	; 127
    321e:	97 e0       	ldi	r25, 0x07	; 7
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <chb_sleep+0x24>
    3224:	00 c0       	rjmp	.+0      	; 0x3226 <chb_sleep+0x2a>
    3226:	00 00       	nop

        // we need to allow some time for the PLL to lock
        _delay_us(TIME_SLEEP_TO_TRX_OFF);

        // Turn the transceiver back on
        chb_set_state(RX_STATE);
    3228:	86 e1       	ldi	r24, 0x16	; 22
    322a:	0e 94 a6 18 	call	0x314c	; 0x314c <chb_set_state>
    322e:	08 95       	ret

00003230 <chb_tx>:
    Load the data into the fifo, initiate a transmission attempt,
    and return the status of the transmission attempt.
*/
/**************************************************************************/
U8 chb_tx(U8 *hdr, U8 *data, U8 len)
{
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	7c 01       	movw	r14, r24
    3242:	6b 01       	movw	r12, r22
    3244:	04 2f       	mov	r16, r20
    U8 state = chb_get_state();
    3246:	0e 94 8d 18 	call	0x311a	; 0x311a <chb_get_state>
    324a:	18 2f       	mov	r17, r24
    pcb_t *pcb = chb_get_pcb();
    324c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <chb_get_pcb>
    3250:	ec 01       	movw	r28, r24

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    3252:	12 30       	cpi	r17, 0x02	; 2
    3254:	f1 f0       	breq	.+60     	; 0x3292 <chb_tx+0x62>
    3256:	12 31       	cpi	r17, 0x12	; 18
    3258:	f1 f0       	breq	.+60     	; 0x3296 <chb_tx+0x66>
    {
        return RADIO_WRONG_STATE;
    }

    // TODO: check why we need to transition to the off state before we go to tx_aret_on
    chb_set_state(CHB_TRX_OFF);
    325a:	88 e0       	ldi	r24, 0x08	; 8
    325c:	0e 94 a6 18 	call	0x314c	; 0x314c <chb_set_state>
    chb_set_state(CHB_TX_ARET_ON);
    3260:	89 e1       	ldi	r24, 0x19	; 25
    3262:	0e 94 a6 18 	call	0x314c	; 0x314c <chb_set_state>

    // TODO: try and start the frame transmission by writing TX_START command instead of toggling
    // sleep pin...i just feel like it's kind of weird...

    // write frame to buffer. first write header into buffer (add 1 for len byte), then data. 
    chb_frame_write(hdr, CHB_HDR_SZ + 1, data, len);
    3266:	c7 01       	movw	r24, r14
    3268:	6a e0       	ldi	r22, 0x0A	; 10
    326a:	a6 01       	movw	r20, r12
    326c:	20 2f       	mov	r18, r16
    326e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <chb_frame_write>

    //Do frame transmission. 
    chb_reg_read_mod_write(TRX_STATE, CMD_TX_START, 0x1F);
    3272:	82 e0       	ldi	r24, 0x02	; 2
    3274:	62 e0       	ldi	r22, 0x02	; 2
    3276:	4f e1       	ldi	r20, 0x1F	; 31
    3278:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>

    // wait for the transmission to end, signaled by the TRX END flag
    while (!pcb->tx_end);
    327c:	8c 81       	ldd	r24, Y+4	; 0x04
    327e:	88 23       	and	r24, r24
    3280:	e9 f3       	breq	.-6      	; 0x327c <chb_tx+0x4c>
    pcb->tx_end = false;
    3282:	1c 82       	std	Y+4, r1	; 0x04

*/
/**************************************************************************/
static U8 chb_get_status()
{
    return chb_reg_read(TRX_STATE) >> CHB_TRAC_STATUS_POS;
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    328a:	82 95       	swap	r24
    328c:	86 95       	lsr	r24
    328e:	87 70       	andi	r24, 0x07	; 7
    // wait for the transmission to end, signaled by the TRX END flag
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
    3290:	03 c0       	rjmp	.+6      	; 0x3298 <chb_tx+0x68>
    U8 state = chb_get_state();
    pcb_t *pcb = chb_get_pcb();

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    {
        return RADIO_WRONG_STATE;
    3292:	84 e4       	ldi	r24, 0x44	; 68
    3294:	01 c0       	rjmp	.+2      	; 0x3298 <chb_tx+0x68>
    3296:	84 e4       	ldi	r24, 0x44	; 68
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
}
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	df 90       	pop	r13
    32a6:	cf 90       	pop	r12
    32a8:	08 95       	ret

000032aa <chb_set_mode>:
    Set the channel mode, BPSK, OQPSK, etc...
*/
/**************************************************************************/
void chb_set_mode(U8 mode)
{
    switch (mode)
    32aa:	81 30       	cpi	r24, 0x01	; 1
    32ac:	91 f0       	breq	.+36     	; 0x32d2 <chb_set_mode+0x28>
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	28 f0       	brcs	.+10     	; 0x32bc <chb_set_mode+0x12>
    32b2:	82 30       	cpi	r24, 0x02	; 2
    32b4:	c9 f0       	breq	.+50     	; 0x32e8 <chb_set_mode+0x3e>
    32b6:	83 30       	cpi	r24, 0x03	; 3
    32b8:	61 f5       	brne	.+88     	; 0x3312 <chb_set_mode+0x68>
    32ba:	21 c0       	rjmp	.+66     	; 0x32fe <chb_set_mode+0x54>
    {
    case OQPSK_868MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x08, 0x3f);                 // 802.15.4-2006, channel page 2, channel 0 (868 MHz, Europe)
    32bc:	8c e0       	ldi	r24, 0x0C	; 12
    32be:	68 e0       	ldi	r22, 0x08	; 8
    32c0:	4f e3       	ldi	r20, 0x3F	; 63
    32c2:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    32c6:	86 e1       	ldi	r24, 0x16	; 22
    32c8:	62 e0       	ldi	r22, 0x02	; 2
    32ca:	43 e0       	ldi	r20, 0x03	; 3
    32cc:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
        break;
    32d0:	08 95       	ret
    case OQPSK_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);                 // 802.15.4-2006, channel page 2, channels 1-10 (915 MHz, US)
    32d2:	8c e0       	ldi	r24, 0x0C	; 12
    32d4:	6c e0       	ldi	r22, 0x0C	; 12
    32d6:	4f e3       	ldi	r20, 0x3F	; 63
    32d8:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    32dc:	86 e1       	ldi	r24, 0x16	; 22
    32de:	62 e0       	ldi	r22, 0x02	; 2
    32e0:	43 e0       	ldi	r20, 0x03	; 3
    32e2:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
        break;
    32e6:	08 95       	ret
    case OQPSK_780MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x1c, 0x3f);                 // 802.15.4-2006, channel page 5, channel 0-3 (780 MHz, China)
    32e8:	8c e0       	ldi	r24, 0x0C	; 12
    32ea:	6c e1       	ldi	r22, 0x1C	; 28
    32ec:	4f e3       	ldi	r20, 0x3F	; 63
    32ee:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    32f2:	86 e1       	ldi	r24, 0x16	; 22
    32f4:	62 e0       	ldi	r22, 0x02	; 2
    32f6:	43 e0       	ldi	r20, 0x03	; 3
    32f8:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
        break;
    32fc:	08 95       	ret
    case BPSK40_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x00, 0x3f);                 // 802.15.4-2006, BPSK, 40 kbps
    32fe:	8c e0       	ldi	r24, 0x0C	; 12
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	4f e3       	ldi	r20, 0x3F	; 63
    3304:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_BPSK_TX_OFFSET, 0x3);     // this is according to table 7-16 in at86rf212 datasheet
    3308:	86 e1       	ldi	r24, 0x16	; 22
    330a:	63 e0       	ldi	r22, 0x03	; 3
    330c:	43 e0       	ldi	r20, 0x03	; 3
    330e:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
    3312:	08 95       	ret

00003314 <chb_set_channel>:
/*!

*/
/**************************************************************************/
U8 chb_set_channel(U8 channel)
{
    3314:	cf 93       	push	r28
    3316:	c8 2f       	mov	r28, r24
    //    {
    //        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);
    //    }
    //}
        
    chb_reg_read_mod_write(PHY_CC_CCA, channel, 0x1f); 
    3318:	88 e0       	ldi	r24, 0x08	; 8
    331a:	6c 2f       	mov	r22, r28
    331c:	4f e1       	ldi	r20, 0x1F	; 31
    331e:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
#endif

    // add a delay to allow the PLL to lock if in active mode.
    state = chb_get_state();
    3322:	0e 94 8d 18 	call	0x311a	; 0x311a <chb_get_state>
    if ((state == CHB_RX_ON) || (state == CHB_PLL_ON))
    3326:	86 30       	cpi	r24, 0x06	; 6
    3328:	11 f0       	breq	.+4      	; 0x332e <chb_set_channel+0x1a>
    332a:	89 30       	cpi	r24, 0x09	; 9
    332c:	31 f4       	brne	.+12     	; 0x333a <chb_set_channel+0x26>
    332e:	8f e6       	ldi	r24, 0x6F	; 111
    3330:	93 e0       	ldi	r25, 0x03	; 3
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <chb_set_channel+0x1e>
    3336:	00 c0       	rjmp	.+0      	; 0x3338 <chb_set_channel+0x24>
    3338:	00 00       	nop
    {
        _delay_us(TIME_PLL_LOCK_TIME);
    }

    return ((chb_reg_read(PHY_CC_CCA) & 0x1f) == channel) ? RADIO_SUCCESS : RADIO_TIMED_OUT;
    333a:	88 e0       	ldi	r24, 0x08	; 8
    333c:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	8f 71       	andi	r24, 0x1F	; 31
    3344:	90 70       	andi	r25, 0x00	; 0
    3346:	6c 2f       	mov	r22, r28
    3348:	70 e0       	ldi	r23, 0x00	; 0
    334a:	86 17       	cp	r24, r22
    334c:	97 07       	cpc	r25, r23
    334e:	11 f4       	brne	.+4      	; 0x3354 <chb_set_channel+0x40>
    3350:	80 e4       	ldi	r24, 0x40	; 64
    3352:	01 c0       	rjmp	.+2      	; 0x3356 <chb_set_channel+0x42>
    3354:	83 e4       	ldi	r24, 0x43	; 67
}
    3356:	cf 91       	pop	r28
    3358:	08 95       	ret

0000335a <chb_reg_read16>:
/*! 
 
*/
/**************************************************************************/
U16 chb_reg_read16(U8 addr)
{
    335a:	cf 93       	push	r28
    335c:	c8 2f       	mov	r28, r24
    U8 i;
    U16 val = 0;

    for (i=0; i<2; i++)
    {
        addr |= chb_reg_read(addr + i) << (8 * i);
    335e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    3362:	8c 2b       	or	r24, r28
    3364:	8f 5f       	subi	r24, 0xFF	; 255
    3366:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    }
    return val;
}
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	cf 91       	pop	r28
    3370:	08 95       	ret

00003372 <chb_reset>:

*/
/**************************************************************************/
void chb_reset()
{
    CHB_RST_DISABLE();
    3372:	e4 e6       	ldi	r30, 0x64	; 100
    3374:	f6 e0       	ldi	r31, 0x06	; 6
    3376:	80 81       	ld	r24, Z
    3378:	81 60       	ori	r24, 0x01	; 1
    337a:	80 83       	st	Z, r24
    CHB_SLPTR_DISABLE();
    337c:	80 81       	ld	r24, Z
    337e:	8d 7f       	andi	r24, 0xFD	; 253
    3380:	80 83       	st	Z, r24
    3382:	8f ed       	ldi	r24, 0xDF	; 223
    3384:	9b e0       	ldi	r25, 0x0B	; 11
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	f1 f7       	brne	.-4      	; 0x3386 <chb_reset+0x14>
    338a:	00 c0       	rjmp	.+0      	; 0x338c <chb_reset+0x1a>
    338c:	00 00       	nop

    // wait a bit while transceiver wakes up
    _delay_us(TIME_P_ON_TO_CLKM_AVAIL);

    // reset the device
    CHB_RST_ENABLE();
    338e:	80 81       	ld	r24, Z
    3390:	8e 7f       	andi	r24, 0xFE	; 254
    3392:	80 83       	st	Z, r24
    3394:	9a e0       	ldi	r25, 0x0A	; 10
    3396:	9a 95       	dec	r25
    3398:	f1 f7       	brne	.-4      	; 0x3396 <chb_reset+0x24>
    339a:	00 c0       	rjmp	.+0      	; 0x339c <chb_reset+0x2a>
    _delay_us(TIME_RST_PULSE_WIDTH);
    CHB_RST_DISABLE();
    339c:	80 81       	ld	r24, Z
    339e:	81 60       	ori	r24, 0x01	; 1
    33a0:	80 83       	st	Z, r24
    while (1)
    {
        // if you're stuck in this loop, that means that you're not reading
        // the version and part number register correctly. possible that version number
        // changes. if so, update version num in header file
        if ((chb_reg_read(VERSION_NUM) == CHB_AT86RF212_VER_NUM) && (chb_reg_read(PART_NUM) == CHB_AT86RF212_PART_NUM)) 
    33a2:	8d e1       	ldi	r24, 0x1D	; 29
    33a4:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    33a8:	81 30       	cpi	r24, 0x01	; 1
    33aa:	d9 f7       	brne	.-10     	; 0x33a2 <chb_reset+0x30>
    33ac:	8c e1       	ldi	r24, 0x1C	; 28
    33ae:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    33b2:	87 30       	cpi	r24, 0x07	; 7
    33b4:	b1 f7       	brne	.-20     	; 0x33a2 <chb_reset+0x30>
            break;
        }
    }
	

}
    33b6:	08 95       	ret

000033b8 <chb_drvr_init>:
/*!

*/
/**************************************************************************/
void chb_drvr_init()
{
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	ea 97       	sbiw	r28, 0x3a	; 58
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	de bf       	out	0x3e, r29	; 62
    // config SPI for at86rf230 access
    chb_spi_init();
    33ca:	0e 94 0d 1c 	call	0x381a	; 0x381a <chb_spi_init>
	//SPIDInit(SPI_MODE0_bm);
	//RadioCS(FALSE);
    // configure IOs
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    33ce:	e0 e6       	ldi	r30, 0x60	; 96
    33d0:	f6 e0       	ldi	r31, 0x06	; 6
    33d2:	80 81       	ld	r24, Z
    33d4:	82 60       	ori	r24, 0x02	; 2
    33d6:	80 83       	st	Z, r24
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));
    33d8:	80 81       	ld	r24, Z
    33da:	81 60       	ori	r24, 0x01	; 1
    33dc:	80 83       	st	Z, r24
static void chb_radio_init()
{
    U8 ieee_addr[8];

    // reset chip
    chb_reset();
    33de:	0e 94 b9 19 	call	0x3372	; 0x3372 <chb_reset>

    // disable intps while we config the radio
    chb_reg_write(IRQ_MASK, 0);
    33e2:	8e e0       	ldi	r24, 0x0E	; 14
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	0e 94 f7 17 	call	0x2fee	; 0x2fee <chb_reg_write>

    // force transceiver off while we configure the intps
    chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1F);
    33ea:	82 e0       	ldi	r24, 0x02	; 2
    33ec:	63 e0       	ldi	r22, 0x03	; 3
    33ee:	4f e1       	ldi	r20, 0x1F	; 31
    33f0:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>

    // make sure the transceiver is in the off state before proceeding
    while ((chb_reg_read(TRX_STATUS) & 0x1f) != CHB_TRX_OFF);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    33fa:	8f 71       	andi	r24, 0x1F	; 31
    33fc:	88 30       	cpi	r24, 0x08	; 8
    33fe:	d1 f7       	brne	.-12     	; 0x33f4 <chb_drvr_init+0x3c>
    //chb_ret_write(CSMA_SEED0, CHB_CSMA_SEED0);     
    //chb_reg_read_mod_write(PHY_CC_CCA, CHB_CCA_MODE << CHB_CCA_MODE_POS,0x3 << CHB_CCA_MODE_POS);
    //chb_reg_write(CCA_THRES, CHB_CCA_ED_THRES);

    // set frame version that we'll accept
    chb_reg_read_mod_write(CSMA_SEED_1, CHB_FRM_VER << CHB_FVN_POS, 3 << CHB_FVN_POS);
    3400:	8e e2       	ldi	r24, 0x2E	; 46
    3402:	60 e4       	ldi	r22, 0x40	; 64
    3404:	40 ec       	ldi	r20, 0xC0	; 192
    3406:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>

    // set interrupt mask
    // re-enable intps while we config the radio
    chb_reg_write(IRQ_MASK, (1<<IRQ_RX_START) | (1<<IRQ_TRX_END));
    340a:	8e e0       	ldi	r24, 0x0E	; 14
    340c:	6c e0       	ldi	r22, 0x0C	; 12
    340e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <chb_reg_write>

    #if (CHB_PROMISCUOUS == 0)
    // set autocrc mode
    chb_reg_read_mod_write(TRX_CTRL_1, 1 << CHB_AUTO_CRC_POS, 1 << CHB_AUTO_CRC_POS);
    3412:	84 e0       	ldi	r24, 0x04	; 4
    3414:	60 e2       	ldi	r22, 0x20	; 32
    3416:	40 e2       	ldi	r20, 0x20	; 32
    3418:	0e 94 92 18 	call	0x3124	; 0x3124 <chb_reg_read_mod_write>
    #endif

    // set up default phy modulation and data rate - OQPSK, 250 kbps, 915 MHz
    chb_set_mode(CHB_INIT_MODE);
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	0e 94 55 19 	call	0x32aa	; 0x32aa <chb_set_mode>

    chb_set_channel(CHB_CHANNEL);
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	0e 94 8a 19 	call	0x3314	; 0x3314 <chb_set_channel>

    // set fsm state
    // put trx in rx auto ack mode
    chb_set_state(RX_STATE);
    3428:	86 e1       	ldi	r24, 0x16	; 22
    342a:	0e 94 a6 18 	call	0x314c	; 0x314c <chb_set_state>

    // set pan ID
    chb_reg_write16(PAN_ID_0, CHB_PAN_ID);
    342e:	82 e2       	ldi	r24, 0x22	; 34
    3430:	64 e3       	ldi	r22, 0x34	; 52
    3432:	72 e1       	ldi	r23, 0x12	; 18
    3434:	0e 94 3e 18 	call	0x307c	; 0x307c <chb_reg_write16>

    // set short addr
    // NOTE: Possibly get this from EEPROM
    chb_reg_write16(SHORT_ADDR_0, chb_get_short_addr());
    3438:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <chb_get_short_addr>
    343c:	bc 01       	movw	r22, r24
    343e:	80 e2       	ldi	r24, 0x20	; 32
    3440:	0e 94 3e 18 	call	0x307c	; 0x307c <chb_reg_write16>

    // set long addr
    // NOTE: Possibly get this from EEPROM
    chb_get_ieee_addr(ieee_addr);
    3444:	ce 01       	movw	r24, r28
    3446:	01 96       	adiw	r24, 0x01	; 1
    3448:	0e 94 82 17 	call	0x2f04	; 0x2f04 <chb_get_ieee_addr>
    chb_reg_write64(IEEE_ADDR_0, ieee_addr);
    344c:	84 e2       	ldi	r24, 0x24	; 36
    344e:	be 01       	movw	r22, r28
    3450:	6f 5f       	subi	r22, 0xFF	; 255
    3452:	7f 4f       	sbci	r23, 0xFF	; 255
    3454:	0e 94 18 18 	call	0x3030	; 0x3030 <chb_reg_write64>
    // set power to 0 dBm if CC1190 is being used. 
    chb_set_pwr(0x24);   
#endif

    // enable mcu intp pin
    CFG_CHB_INTP_RISE_EDGE();
    3458:	e2 e7       	ldi	r30, 0x72	; 114
    345a:	f6 e0       	ldi	r31, 0x06	; 6
    345c:	80 81       	ld	r24, Z
    345e:	81 60       	ori	r24, 0x01	; 1
    3460:	80 83       	st	Z, r24
    3462:	e9 e6       	ldi	r30, 0x69	; 105
    3464:	f6 e0       	ldi	r31, 0x06	; 6
    3466:	80 81       	ld	r24, Z
    3468:	83 60       	ori	r24, 0x03	; 3
    346a:	80 83       	st	Z, r24
    346c:	ea e6       	ldi	r30, 0x6A	; 106
    346e:	f6 e0       	ldi	r31, 0x06	; 6
    3470:	80 81       	ld	r24, Z
    3472:	84 60       	ori	r24, 0x04	; 4
    3474:	80 83       	st	Z, r24
	PMIC.CTRL |= 0x07;	//enable interrupts on MCU
    3476:	e0 ea       	ldi	r30, 0xA0	; 160
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	87 60       	ori	r24, 0x07	; 7
    347e:	82 83       	std	Z+2, r24	; 0x02

    if (chb_get_state() != RX_STATE)
    3480:	0e 94 8d 18 	call	0x311a	; 0x311a <chb_get_state>
    3484:	86 31       	cpi	r24, 0x16	; 22
    3486:	91 f0       	breq	.+36     	; 0x34ac <chb_drvr_init+0xf4>
    {
        // ERROR occurred initializing the radio. Print out error message.
        char buf[50];

        // grab the error message from flash & print it out
        strcpy_P(buf, chb_err_init);
    3488:	8e 01       	movw	r16, r28
    348a:	07 5f       	subi	r16, 0xF7	; 247
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	c8 01       	movw	r24, r16
    3490:	68 ee       	ldi	r22, 0xE8	; 232
    3492:	71 e0       	ldi	r23, 0x01	; 1
    3494:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <strcpy_P>
        printf(buf);
    3498:	0f 92       	push	r0
    349a:	0f 92       	push	r0
    349c:	ed b7       	in	r30, 0x3d	; 61
    349e:	fe b7       	in	r31, 0x3e	; 62
    34a0:	01 83       	std	Z+1, r16	; 0x01
    34a2:	12 83       	std	Z+2, r17	; 0x02
    34a4:	0e 94 41 3b 	call	0x7682	; 0x7682 <printf>
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));

    // config radio
    chb_radio_init();
}
    34ac:	ea 96       	adiw	r28, 0x3a	; 58
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	08 95       	ret

000034bc <__vector_64>:
/*!

*/
/**************************************************************************/
ISR(CHB_RADIO_IRQ)
{
    34bc:	1f 92       	push	r1
    34be:	0f 92       	push	r0
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	0f 92       	push	r0
    34c4:	0b b6       	in	r0, 0x3b	; 59
    34c6:	0f 92       	push	r0
    34c8:	11 24       	eor	r1, r1
    34ca:	6f 92       	push	r6
    34cc:	7f 92       	push	r7
    34ce:	8f 92       	push	r8
    34d0:	9f 92       	push	r9
    34d2:	af 92       	push	r10
    34d4:	bf 92       	push	r11
    34d6:	df 92       	push	r13
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	2f 93       	push	r18
    34e2:	3f 93       	push	r19
    34e4:	4f 93       	push	r20
    34e6:	5f 93       	push	r21
    34e8:	6f 93       	push	r22
    34ea:	7f 93       	push	r23
    34ec:	8f 93       	push	r24
    34ee:	9f 93       	push	r25
    34f0:	af 93       	push	r26
    34f2:	bf 93       	push	r27
    34f4:	ef 93       	push	r30
    34f6:	ff 93       	push	r31
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	e2 97       	sbiw	r28, 0x32	; 50
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	de bf       	out	0x3e, r29	; 62
    U8 state, intp_src = 0;
	//U8 dummy;
    pcb_t *pcb = chb_get_pcb();
    3506:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <chb_get_pcb>
    350a:	7c 01       	movw	r14, r24

    CHB_ENTER_CRIT();
    350c:	8f b7       	in	r24, 0x3f	; 63
    350e:	80 93 56 40 	sts	0x4056, r24
    3512:	f8 94       	cli

    /*Read Interrupt source.*/
    RadioCS(TRUE);   
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>

    /*Send Register address and read register content.*/
    //dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
	SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    351a:	8f e8       	ldi	r24, 0x8F	; 143
    351c:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
    intp_src = SPID_write(0);
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
    3526:	18 2f       	mov	r17, r24

    RadioCS(FALSE);
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>

    while (intp_src)
    352e:	11 23       	and	r17, r17
    3530:	09 f4       	brne	.+2      	; 0x3534 <__vector_64+0x78>
    3532:	ae c0       	rjmp	.+348    	; 0x3690 <__vector_64+0x1d4>

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
    3534:	aa 24       	eor	r10, r10
    3536:	bb 24       	eor	r11, r11
    3538:	68 94       	set
    353a:	a7 f8       	bld	r10, 7

            // Increment the overflow stat
            pcb->overflow++;

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
    353c:	0f 2e       	mov	r0, r31
    353e:	f8 e0       	ldi	r31, 0x08	; 8
    3540:	8f 2e       	mov	r8, r31
    3542:	f2 e0       	ldi	r31, 0x02	; 2
    3544:	9f 2e       	mov	r9, r31
    3546:	f0 2d       	mov	r31, r0
    RadioCS(FALSE);

    while (intp_src)
    {
        /*Handle the incomming interrupt. Prioritized.*/
        if ((intp_src & CHB_IRQ_RX_START_MASK))
    3548:	12 ff       	sbrs	r17, 2
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <__vector_64+0x94>
        {
            intp_src &= ~CHB_IRQ_RX_START_MASK;
    354c:	1b 7f       	andi	r17, 0xFB	; 251
    354e:	9d c0       	rjmp	.+314    	; 0x368a <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_TRX_END_MASK)
    3550:	13 ff       	sbrs	r17, 3
    3552:	82 c0       	rjmp	.+260    	; 0x3658 <__vector_64+0x19c>
        {
            state = chb_get_state();
    3554:	0e 94 8d 18 	call	0x311a	; 0x311a <chb_get_state>

            if ((state == CHB_RX_ON) || (state == CHB_RX_AACK_ON) || (state == CHB_BUSY_RX_AACK)){
    3558:	86 30       	cpi	r24, 0x06	; 6
    355a:	29 f0       	breq	.+10     	; 0x3566 <__vector_64+0xaa>
    355c:	86 31       	cpi	r24, 0x16	; 22
    355e:	19 f0       	breq	.+6      	; 0x3566 <__vector_64+0xaa>
    3560:	81 31       	cpi	r24, 0x11	; 17
    3562:	09 f0       	breq	.+2      	; 0x3566 <__vector_64+0xaa>
    3564:	6f c0       	rjmp	.+222    	; 0x3644 <__vector_64+0x188>
				//go to TRX_OFF state to avoid data corruption due to reception of another message
				//chb_set_state(CHB_TRX_OFF);
                // get the ed measurement
                pcb->ed = chb_reg_read(PHY_ED_LEVEL);
    3566:	87 e0       	ldi	r24, 0x07	; 7
    3568:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    356c:	f7 01       	movw	r30, r14
    356e:	82 8b       	std	Z+18, r24	; 0x12

                // get the crc
                pcb->crc = (chb_reg_read(PHY_RSSI) & (1<<7)) ? 1 : 0;
    3570:	86 e0       	ldi	r24, 0x06	; 6
    3572:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
    3576:	88 1f       	adc	r24, r24
    3578:	88 27       	eor	r24, r24
    357a:	88 1f       	adc	r24, r24
    357c:	f7 01       	movw	r30, r14
    357e:	83 8b       	std	Z+19, r24	; 0x13

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc){
    3580:	88 23       	and	r24, r24
    3582:	09 f4       	brne	.+2      	; 0x3586 <__vector_64+0xca>
    3584:	62 c0       	rjmp	.+196    	; 0x364a <__vector_64+0x18e>
/**************************************************************************/
static void chb_frame_read()
{
    U8 i, len, data;

    CHB_ENTER_CRIT();
    3586:	8f b7       	in	r24, 0x3f	; 63
    3588:	80 93 56 40 	sts	0x4056, r24
    358c:	f8 94       	cli
    RadioCS(TRUE);
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>

    /*Send frame read command and read the length.*/
    SPID_write(CHB_SPI_CMD_FR);
    3594:	80 e2       	ldi	r24, 0x20	; 32
    3596:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
    len = SPID_write(0);
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
    35a0:	d8 2e       	mov	r13, r24

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    35a2:	83 50       	subi	r24, 0x03	; 3
    35a4:	8d 37       	cpi	r24, 0x7D	; 125
    35a6:	f0 f5       	brcc	.+124    	; 0x3624 <__vector_64+0x168>
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
    35a8:	0e 94 7f 17 	call	0x2efe	; 0x2efe <chb_buf_get_len>
    35ac:	2d 2d       	mov	r18, r13
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	a5 01       	movw	r20, r10
    35b2:	48 1b       	sub	r20, r24
    35b4:	51 09       	sbc	r21, r1
    35b6:	24 17       	cp	r18, r20
    35b8:	35 07       	cpc	r19, r21
    35ba:	7c f4       	brge	.+30     	; 0x35da <__vector_64+0x11e>
        {
            chb_buf_write(len);
    35bc:	8d 2d       	mov	r24, r13
    35be:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <chb_buf_write>
            
            for (i=0; i<len; i++)
    35c2:	dd 20       	and	r13, r13
    35c4:	79 f1       	breq	.+94     	; 0x3624 <__vector_64+0x168>
    35c6:	00 e0       	ldi	r16, 0x00	; 0
            {
                data = SPID_write(0);
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
                chb_buf_write(data);
    35ce:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <chb_buf_write>
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
        {
            chb_buf_write(len);
            
            for (i=0; i<len; i++)
    35d2:	0f 5f       	subi	r16, 0xFF	; 255
    35d4:	0d 15       	cp	r16, r13
    35d6:	c1 f7       	brne	.-16     	; 0x35c8 <__vector_64+0x10c>
    35d8:	25 c0       	rjmp	.+74     	; 0x3624 <__vector_64+0x168>
			//PORTE.OUTCLR = PIN2_bm;
        }
        else
        {
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
    35da:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <chb_get_pcb>
    35de:	3c 01       	movw	r6, r24
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
    35e0:	dd 20       	and	r13, r13
    35e2:	39 f0       	breq	.+14     	; 0x35f2 <__vector_64+0x136>
    35e4:	00 e0       	ldi	r16, 0x00	; 0
            {
                data = SPID_write(0);
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	0e 94 20 1c 	call	0x3840	; 0x3840 <SPID_write>
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
    35ec:	0f 5f       	subi	r16, 0xFF	; 255
    35ee:	0d 15       	cp	r16, r13
    35f0:	d1 f7       	brne	.-12     	; 0x35e6 <__vector_64+0x12a>
            {
                data = SPID_write(0);
            }

            // Increment the overflow stat
            pcb->overflow++;
    35f2:	f3 01       	movw	r30, r6
    35f4:	85 85       	ldd	r24, Z+13	; 0x0d
    35f6:	96 85       	ldd	r25, Z+14	; 0x0e
    35f8:	01 96       	adiw	r24, 0x01	; 1
    35fa:	85 87       	std	Z+13, r24	; 0x0d
    35fc:	96 87       	std	Z+14, r25	; 0x0e

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
    35fe:	ce 01       	movw	r24, r28
    3600:	01 96       	adiw	r24, 0x01	; 1
    3602:	b4 01       	movw	r22, r8
    3604:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <strcpy_P>
            printf(buf);
    3608:	0f 92       	push	r0
    360a:	0f 92       	push	r0
    360c:	41 e0       	ldi	r20, 0x01	; 1
    360e:	50 e0       	ldi	r21, 0x00	; 0
    3610:	4c 0f       	add	r20, r28
    3612:	5d 1f       	adc	r21, r29
    3614:	ed b7       	in	r30, 0x3d	; 61
    3616:	fe b7       	in	r31, 0x3e	; 62
    3618:	41 83       	std	Z+1, r20	; 0x01
    361a:	52 83       	std	Z+2, r21	; 0x02
    361c:	0e 94 41 3b 	call	0x7682	; 0x7682 <printf>
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
        }
    }

    RadioCS(FALSE);
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <RadioCS>
    CHB_LEAVE_CRIT();
    362a:	80 91 56 40 	lds	r24, 0x4056
    362e:	8f bf       	out	0x3f, r24	; 63
    3630:	78 94       	sei

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc){
                    // get the data
                    chb_frame_read();
                    pcb->rcvd_xfers++;
    3632:	f7 01       	movw	r30, r14
    3634:	85 81       	ldd	r24, Z+5	; 0x05
    3636:	96 81       	ldd	r25, Z+6	; 0x06
    3638:	01 96       	adiw	r24, 0x01	; 1
    363a:	85 83       	std	Z+5, r24	; 0x05
    363c:	96 83       	std	Z+6, r25	; 0x06
                    pcb->data_rcv = true;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	83 83       	std	Z+3, r24	; 0x03
    3642:	03 c0       	rjmp	.+6      	; 0x364a <__vector_64+0x18e>
					if(StartOfFreeSpace+128 >= FR_READ_BUFFER_SIZE) StartOfFreeSpace = 0;	//wrap around to the start of the buffer (making circular buffer). This should be avoided as data in the buffer will be overwritten (i.e. lost).
					*/			
                }
            }
            else{
                pcb->tx_end = true;
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	f7 01       	movw	r30, r14
    3648:	84 83       	std	Z+4, r24	; 0x04
            }
            intp_src &= ~CHB_IRQ_TRX_END_MASK;
    364a:	17 7f       	andi	r17, 0xF7	; 247
			//go to receive state
            while (chb_set_state(RX_STATE) != RADIO_SUCCESS);
    364c:	86 e1       	ldi	r24, 0x16	; 22
    364e:	0e 94 a6 18 	call	0x314c	; 0x314c <chb_set_state>
    3652:	80 34       	cpi	r24, 0x40	; 64
    3654:	d9 f7       	brne	.-10     	; 0x364c <__vector_64+0x190>
    3656:	19 c0       	rjmp	.+50     	; 0x368a <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_TRX_UR_MASK)
    3658:	16 ff       	sbrs	r17, 6
    365a:	08 c0       	rjmp	.+16     	; 0x366c <__vector_64+0x1b0>
        {
            intp_src &= ~CHB_IRQ_TRX_UR_MASK;
    365c:	1f 7b       	andi	r17, 0xBF	; 191
            pcb->underrun++;
    365e:	f7 01       	movw	r30, r14
    3660:	87 85       	ldd	r24, Z+15	; 0x0f
    3662:	90 89       	ldd	r25, Z+16	; 0x10
    3664:	01 96       	adiw	r24, 0x01	; 1
    3666:	87 87       	std	Z+15, r24	; 0x0f
    3668:	90 8b       	std	Z+16, r25	; 0x10
    366a:	0f c0       	rjmp	.+30     	; 0x368a <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_PLL_UNLOCK_MASK)
    366c:	11 ff       	sbrs	r17, 1
    366e:	02 c0       	rjmp	.+4      	; 0x3674 <__vector_64+0x1b8>
        {
            intp_src &= ~CHB_IRQ_PLL_UNLOCK_MASK;
    3670:	1d 7f       	andi	r17, 0xFD	; 253
    3672:	0b c0       	rjmp	.+22     	; 0x368a <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_PLL_LOCK_MASK)
    3674:	10 ff       	sbrs	r17, 0
    3676:	02 c0       	rjmp	.+4      	; 0x367c <__vector_64+0x1c0>
        {
            intp_src &= ~CHB_IRQ_PLL_LOCK_MASK;
    3678:	1e 7f       	andi	r17, 0xFE	; 254
    367a:	07 c0       	rjmp	.+14     	; 0x368a <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_BAT_LOW_MASK)
    367c:	11 23       	and	r17, r17
    367e:	2c f4       	brge	.+10     	; 0x368a <__vector_64+0x1ce>
        {
            intp_src &= ~CHB_IRQ_BAT_LOW_MASK;
    3680:	1f 77       	andi	r17, 0x7F	; 127
            pcb->battlow++;
    3682:	f7 01       	movw	r30, r14
    3684:	81 89       	ldd	r24, Z+17	; 0x11
    3686:	8f 5f       	subi	r24, 0xFF	; 255
    3688:	81 8b       	std	Z+17, r24	; 0x11
	SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    intp_src = SPID_write(0);

    RadioCS(FALSE);

    while (intp_src)
    368a:	11 23       	and	r17, r17
    368c:	09 f0       	breq	.+2      	; 0x3690 <__vector_64+0x1d4>
    368e:	5c cf       	rjmp	.-328    	; 0x3548 <__vector_64+0x8c>
        }
        else
        {
        }
    }
    CHB_LEAVE_CRIT();
    3690:	80 91 56 40 	lds	r24, 0x4056
    3694:	8f bf       	out	0x3f, r24	; 63
    3696:	78 94       	sei
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
    3698:	8f e0       	ldi	r24, 0x0F	; 15
    369a:	0e 94 73 18 	call	0x30e6	; 0x30e6 <chb_reg_read>
}
    369e:	e2 96       	adiw	r28, 0x32	; 50
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	ff 91       	pop	r31
    36aa:	ef 91       	pop	r30
    36ac:	bf 91       	pop	r27
    36ae:	af 91       	pop	r26
    36b0:	9f 91       	pop	r25
    36b2:	8f 91       	pop	r24
    36b4:	7f 91       	pop	r23
    36b6:	6f 91       	pop	r22
    36b8:	5f 91       	pop	r21
    36ba:	4f 91       	pop	r20
    36bc:	3f 91       	pop	r19
    36be:	2f 91       	pop	r18
    36c0:	1f 91       	pop	r17
    36c2:	0f 91       	pop	r16
    36c4:	ff 90       	pop	r15
    36c6:	ef 90       	pop	r14
    36c8:	df 90       	pop	r13
    36ca:	bf 90       	pop	r11
    36cc:	af 90       	pop	r10
    36ce:	9f 90       	pop	r9
    36d0:	8f 90       	pop	r8
    36d2:	7f 90       	pop	r7
    36d4:	6f 90       	pop	r6
    36d6:	0f 90       	pop	r0
    36d8:	0b be       	out	0x3b, r0	; 59
    36da:	0f 90       	pop	r0
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	0f 90       	pop	r0
    36e0:	1f 90       	pop	r1
    36e2:	18 95       	reti

000036e4 <chb_eeprom_write>:
/*!

*/
/**************************************************************************/
void chb_eeprom_write(U16 addr, U8 *buf, U16 size)
{
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	8c 01       	movw	r16, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
    36ee:	e0 ec       	ldi	r30, 0xC0	; 192
    36f0:	f1 e0       	ldi	r31, 0x01	; 1
    36f2:	84 85       	ldd	r24, Z+12	; 0x0c
    36f4:	87 7f       	andi	r24, 0xF7	; 247
    36f6:	84 87       	std	Z+12, r24	; 0x0c

    // Write bytes
    for(U8 i=0; i<size; i++)
    36f8:	41 15       	cp	r20, r1
    36fa:	51 05       	cpc	r21, r1
    36fc:	09 f4       	brne	.+2      	; 0x3700 <chb_eeprom_write+0x1c>
    36fe:	50 c0       	rjmp	.+160    	; 0x37a0 <chb_eeprom_write+0xbc>
    3700:	e0 e0       	ldi	r30, 0x00	; 0
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	20 e0       	ldi	r18, 0x00	; 0
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3706:	a0 ec       	ldi	r26, 0xC0	; 192
    3708:	b1 e0       	ldi	r27, 0x01	; 1

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    370a:	d6 e3       	ldi	r29, 0x36	; 54
        NVM_EXEC();
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    370c:	c3 e3       	ldi	r28, 0x33	; 51

    // load the data to write
    NVM.DATA0 = value;

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    370e:	35 e3       	ldi	r19, 0x35	; 53
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
    {
        chb_eep_write_byte(addr+i, buf[i]);
    3710:	cf 01       	movw	r24, r30
    3712:	80 0f       	add	r24, r16
    3714:	91 1f       	adc	r25, r17
    3716:	e6 0f       	add	r30, r22
    3718:	f7 1f       	adc	r31, r23
    371a:	f0 81       	ld	r31, Z
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    371c:	1f 96       	adiw	r26, 0x0f	; 15
    371e:	ec 91       	ld	r30, X
    3720:	1f 97       	sbiw	r26, 0x0f	; 15
    3722:	ee 23       	and	r30, r30
    3724:	dc f3       	brlt	.-10     	; 0x371c <chb_eeprom_write+0x38>

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3726:	1f 96       	adiw	r26, 0x0f	; 15
    3728:	ec 91       	ld	r30, X
    372a:	1f 97       	sbiw	r26, 0x0f	; 15
    372c:	e1 ff       	sbrs	r30, 1
    372e:	11 c0       	rjmp	.+34     	; 0x3752 <chb_eeprom_write+0x6e>
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3730:	1a 96       	adiw	r26, 0x0a	; 10
    3732:	dc 93       	st	X, r29
    3734:	1a 97       	sbiw	r26, 0x0a	; 10
        NVM_EXEC();
    3736:	ef 93       	push	r30
    3738:	ff 93       	push	r31
    373a:	0f 93       	push	r16
    373c:	2f 93       	push	r18
    373e:	eb ec       	ldi	r30, 0xCB	; 203
    3740:	f1 e0       	ldi	r31, 0x01	; 1
    3742:	08 ed       	ldi	r16, 0xD8	; 216
    3744:	21 e0       	ldi	r18, 0x01	; 1
    3746:	04 bf       	out	0x34, r16	; 52
    3748:	20 83       	st	Z, r18
    374a:	2f 91       	pop	r18
    374c:	0f 91       	pop	r16
    374e:	ff 91       	pop	r31
    3750:	ef 91       	pop	r30
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3752:	1a 96       	adiw	r26, 0x0a	; 10
    3754:	cc 93       	st	X, r28
    3756:	1a 97       	sbiw	r26, 0x0a	; 10

    // load the address
    NVM.ADDR0 = addr & 0xFF;
    3758:	8c 93       	st	X, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    375a:	89 2f       	mov	r24, r25
    375c:	8f 71       	andi	r24, 0x1F	; 31
    375e:	11 96       	adiw	r26, 0x01	; 1
    3760:	8c 93       	st	X, r24
    3762:	11 97       	sbiw	r26, 0x01	; 1
    NVM.ADDR2 = 0x00;
    3764:	12 96       	adiw	r26, 0x02	; 2
    3766:	1c 92       	st	X, r1
    3768:	12 97       	sbiw	r26, 0x02	; 2

    // load the data to write
    NVM.DATA0 = value;
    376a:	14 96       	adiw	r26, 0x04	; 4
    376c:	fc 93       	st	X, r31
    376e:	14 97       	sbiw	r26, 0x04	; 4

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3770:	1a 96       	adiw	r26, 0x0a	; 10
    3772:	3c 93       	st	X, r19
    3774:	1a 97       	sbiw	r26, 0x0a	; 10
    NVM_EXEC();
    3776:	ef 93       	push	r30
    3778:	ff 93       	push	r31
    377a:	0f 93       	push	r16
    377c:	2f 93       	push	r18
    377e:	eb ec       	ldi	r30, 0xCB	; 203
    3780:	f1 e0       	ldi	r31, 0x01	; 1
    3782:	08 ed       	ldi	r16, 0xD8	; 216
    3784:	21 e0       	ldi	r18, 0x01	; 1
    3786:	04 bf       	out	0x34, r16	; 52
    3788:	20 83       	st	Z, r18
    378a:	2f 91       	pop	r18
    378c:	0f 91       	pop	r16
    378e:	ff 91       	pop	r31
    3790:	ef 91       	pop	r30
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
    3792:	2f 5f       	subi	r18, 0xFF	; 255
    3794:	e2 2f       	mov	r30, r18
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	e4 17       	cp	r30, r20
    379a:	f5 07       	cpc	r31, r21
    379c:	08 f4       	brcc	.+2      	; 0x37a0 <chb_eeprom_write+0xbc>
    379e:	b8 cf       	rjmp	.-144    	; 0x3710 <chb_eeprom_write+0x2c>
    {
        chb_eep_write_byte(addr+i, buf[i]);
    }
}
    37a0:	df 91       	pop	r29
    37a2:	cf 91       	pop	r28
    37a4:	1f 91       	pop	r17
    37a6:	0f 91       	pop	r16
    37a8:	08 95       	ret

000037aa <chb_eeprom_read>:
/*!

*/
/**************************************************************************/
void chb_eeprom_read(U16 addr, U8 *buf, U16 size)
{
    37aa:	1f 93       	push	r17
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	9c 01       	movw	r18, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
    37b2:	e0 ec       	ldi	r30, 0xC0	; 192
    37b4:	f1 e0       	ldi	r31, 0x01	; 1
    37b6:	84 85       	ldd	r24, Z+12	; 0x0c
    37b8:	87 7f       	andi	r24, 0xF7	; 247
    37ba:	84 87       	std	Z+12, r24	; 0x0c

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    37bc:	41 15       	cp	r20, r1
    37be:	51 05       	cpc	r21, r1
    37c0:	41 f1       	breq	.+80     	; 0x3812 <chb_eeprom_read+0x68>
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	c0 e0       	ldi	r28, 0x00	; 0
    NVM.ADDR0 = addr & 0xFF;
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    NVM.ADDR2 = 0x00;

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    37c8:	d6 e0       	ldi	r29, 0x06	; 6
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
    37ca:	db 01       	movw	r26, r22
    37cc:	a8 0f       	add	r26, r24
    37ce:	b9 1f       	adc	r27, r25
    37d0:	82 0f       	add	r24, r18
    37d2:	93 1f       	adc	r25, r19
*/
/**************************************************************************/
static U8 chb_eep_read_byte(U16 addr)
{
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    37d4:	17 85       	ldd	r17, Z+15	; 0x0f
    37d6:	11 23       	and	r17, r17
    37d8:	ec f3       	brlt	.-6      	; 0x37d4 <chb_eeprom_read+0x2a>

    /* Set address to read from. */
    NVM.ADDR0 = addr & 0xFF;
    37da:	80 83       	st	Z, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    37dc:	89 2f       	mov	r24, r25
    37de:	8f 71       	andi	r24, 0x1F	; 31
    37e0:	81 83       	std	Z+1, r24	; 0x01
    NVM.ADDR2 = 0x00;
    37e2:	12 82       	std	Z+2, r1	; 0x02

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    37e4:	d2 87       	std	Z+10, r29	; 0x0a
    NVM_EXEC();
    37e6:	ef 93       	push	r30
    37e8:	ff 93       	push	r31
    37ea:	0f 93       	push	r16
    37ec:	2f 93       	push	r18
    37ee:	eb ec       	ldi	r30, 0xCB	; 203
    37f0:	f1 e0       	ldi	r31, 0x01	; 1
    37f2:	08 ed       	ldi	r16, 0xD8	; 216
    37f4:	21 e0       	ldi	r18, 0x01	; 1
    37f6:	04 bf       	out	0x34, r16	; 52
    37f8:	20 83       	st	Z, r18
    37fa:	2f 91       	pop	r18
    37fc:	0f 91       	pop	r16
    37fe:	ff 91       	pop	r31
    3800:	ef 91       	pop	r30

    return NVM.DATA0;
    3802:	84 81       	ldd	r24, Z+4	; 0x04
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
    3804:	8c 93       	st	X, r24
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    3806:	cf 5f       	subi	r28, 0xFF	; 255
    3808:	8c 2f       	mov	r24, r28
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	84 17       	cp	r24, r20
    380e:	95 07       	cpc	r25, r21
    3810:	e0 f2       	brcs	.-72     	; 0x37ca <chb_eeprom_read+0x20>
    {
        buf[i] = chb_eep_read_byte(addr+i);
    }
}
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	1f 91       	pop	r17
    3818:	08 95       	ret

0000381a <chb_spi_init>:

void chb_spi_init()
{
    // configure the SPI slave_select, spi clk, and mosi pins as output. the miso pin
    // is cleared since its an input.
    CHB_SPI_DDIR |= (1<<CHB_SSPIN) | (1<<CHB_MOSI) | (1<<CHB_SCK);
    381a:	e0 e6       	ldi	r30, 0x60	; 96
    381c:	f6 e0       	ldi	r31, 0x06	; 6
    381e:	80 81       	ld	r24, Z
    3820:	80 6b       	ori	r24, 0xB0	; 176
    3822:	80 83       	st	Z, r24
    CHB_SPI_PORT |= (1<<CHB_SSPIN);
    3824:	e4 e6       	ldi	r30, 0x64	; 100
    3826:	f6 e0       	ldi	r31, 0x06	; 6
    3828:	80 81       	ld	r24, Z
    382a:	80 61       	ori	r24, 0x10	; 16
    382c:	80 83       	st	Z, r24

    // set to master mode
    // set the clock freq to fck/16
    CHB_CTRL |= (1<<SPI_MASTER_bp) | (1<<SPI_ENABLE_bp) | (1<<SPI_PRESCALER_gp);
    382e:	a0 ec       	ldi	r26, 0xC0	; 192
    3830:	b9 e0       	ldi	r27, 0x09	; 9
    3832:	8c 91       	ld	r24, X
    3834:	81 65       	ori	r24, 0x51	; 81
    3836:	8c 93       	st	X, r24

    // set the slave select to idle
    CHB_SPI_DISABLE();
    3838:	80 81       	ld	r24, Z
    383a:	80 61       	ori	r24, 0x10	; 16
    383c:	80 83       	st	Z, r24
}
    383e:	08 95       	ret

00003840 <SPID_write>:
    data is read byte val.
*/
/**************************************************************************/
uint8_t SPID_write(uint8_t byteToSend){
	uint8_t data;
	SPID.DATA = byteToSend;
    3840:	e0 ec       	ldi	r30, 0xC0	; 192
    3842:	f9 e0       	ldi	r31, 0x09	; 9
    3844:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPID.STATUS & SPI_IF_bm)); //wait for byte to be sent
    3846:	82 81       	ldd	r24, Z+2	; 0x02
    3848:	88 23       	and	r24, r24
    384a:	ec f7       	brge	.-6      	; 0x3846 <SPID_write+0x6>
	data = SPID.DATA; //read SPI data register to reset status flag
    384c:	e0 ec       	ldi	r30, 0xC0	; 192
    384e:	f9 e0       	ldi	r31, 0x09	; 9
    3850:	83 81       	ldd	r24, Z+3	; 0x03
	return data;
    3852:	08 95       	ret

00003854 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3854:	0f 93       	push	r16
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	0f 92       	push	r0
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    3860:	2f b7       	in	r18, 0x3f	; 63
    3862:	29 83       	std	Y+1, r18	; 0x01
    3864:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3866:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3868:	fc 01       	movw	r30, r24
    386a:	08 ed       	ldi	r16, 0xD8	; 216
    386c:	04 bf       	out	0x34, r16	; 52
    386e:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3874:	0f 90       	pop	r0
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	0f 91       	pop	r16
    387c:	08 95       	ret

0000387e <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    387e:	66 23       	and	r22, r22
    3880:	11 f0       	breq	.+4      	; 0x3886 <CLKSYS_XOSC_Config+0x8>
    3882:	90 e2       	ldi	r25, 0x20	; 32
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <CLKSYS_XOSC_Config+0xa>
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	84 2b       	or	r24, r20
    388a:	89 2b       	or	r24, r25
    388c:	e0 e5       	ldi	r30, 0x50	; 80
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    3892:	08 95       	ret

00003894 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
    3894:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    3896:	86 2b       	or	r24, r22
    3898:	e0 e5       	ldi	r30, 0x50	; 80
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	85 83       	std	Z+5, r24	; 0x05
}
    389e:	08 95       	ret

000038a0 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    38a0:	e0 e5       	ldi	r30, 0x50	; 80
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	90 81       	ld	r25, Z
    38a6:	28 2f       	mov	r18, r24
    38a8:	20 95       	com	r18
    38aa:	92 23       	and	r25, r18
    38ac:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    38ae:	90 81       	ld	r25, Z
	return clkEnabled;
}
    38b0:	89 23       	and	r24, r25
    38b2:	08 95       	ret

000038b4 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    38b4:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
    38b6:	81 e4       	ldi	r24, 0x41	; 65
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	0e 94 2a 1c 	call	0x3854	; 0x3854 <CCPWrite>
}
    38be:	08 95       	ret

000038c0 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    38c0:	1f 93       	push	r17
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
    38c6:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    38c8:	c0 e4       	ldi	r28, 0x40	; 64
    38ca:	d0 e0       	ldi	r29, 0x00	; 0
    38cc:	68 81       	ld	r22, Y
    38ce:	68 7f       	andi	r22, 0xF8	; 248
    38d0:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    38d2:	80 e4       	ldi	r24, 0x40	; 64
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	0e 94 2a 1c 	call	0x3854	; 0x3854 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    38da:	88 81       	ld	r24, Y
	return clkCtrl;
}
    38dc:	81 23       	and	r24, r17
    38de:	df 91       	pop	r29
    38e0:	cf 91       	pop	r28
    38e2:	1f 91       	pop	r17
    38e4:	08 95       	ret

000038e6 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    38e6:	e0 e4       	ldi	r30, 0x40	; 64
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	93 81       	ldd	r25, Z+3	; 0x03
    38ec:	91 7f       	andi	r25, 0xF1	; 241
    38ee:	91 60       	ori	r25, 0x01	; 1
    38f0:	89 2b       	or	r24, r25
    38f2:	83 83       	std	Z+3, r24	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    38f4:	08 95       	ret

000038f6 <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    38f6:	e0 e5       	ldi	r30, 0x50	; 80
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	26 81       	ldd	r18, Z+6	; 0x06
    38fc:	98 2f       	mov	r25, r24
    38fe:	38 2f       	mov	r19, r24
    3900:	30 95       	com	r19
    3902:	23 23       	and	r18, r19
    3904:	66 23       	and	r22, r22
    3906:	09 f4       	brne	.+2      	; 0x390a <CLKSYS_AutoCalibration_Enable+0x14>
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	92 2b       	or	r25, r18
    390c:	e0 e5       	ldi	r30, 0x50	; 80
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    3912:	81 30       	cpi	r24, 0x01	; 1
    3914:	31 f4       	brne	.+12     	; 0x3922 <CLKSYS_AutoCalibration_Enable+0x2c>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    3916:	e8 e6       	ldi	r30, 0x68	; 104
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	81 60       	ori	r24, 0x01	; 1
    391e:	80 83       	st	Z, r24
    3920:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    3922:	82 30       	cpi	r24, 0x02	; 2
    3924:	29 f4       	brne	.+10     	; 0x3930 <CLKSYS_AutoCalibration_Enable+0x3a>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    3926:	e0 e6       	ldi	r30, 0x60	; 96
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	81 60       	ori	r24, 0x01	; 1
    392e:	80 83       	st	Z, r24
    3930:	08 95       	ret

00003932 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
    3932:	83 e5       	ldi	r24, 0x53	; 83
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	63 e0       	ldi	r22, 0x03	; 3
    3938:	0e 94 2a 1c 	call	0x3854	; 0x3854 <CCPWrite>
}
    393c:	08 95       	ret

0000393e <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
    393e:	82 e4       	ldi	r24, 0x42	; 66
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	61 e0       	ldi	r22, 0x01	; 1
    3944:	0e 94 2a 1c 	call	0x3854	; 0x3854 <CCPWrite>
}
    3948:	08 95       	ret

0000394a <setXOSC_32MHz>:
//  - SFLX02-A03 does contain the crystal
// The high frequency crystal is required to clock the ADC without jitter

void setXOSC_32MHz() {
	// configure the crystal to match the chip 
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc,
    394a:	80 ec       	ldi	r24, 0xC0	; 192
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	4b e0       	ldi	r20, 0x0B	; 11
    3950:	0e 94 3f 1c 	call	0x387e	; 0x387e <CLKSYS_XOSC_Config>
		                    false,
		                    OSC_XOSCSEL_XTAL_16KCLK_gc );
	CLKSYS_Enable(OSC_XOSCEN_bm);
    3954:	e0 e5       	ldi	r30, 0x50	; 80
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	80 81       	ld	r24, Z
    395a:	88 60       	ori	r24, 0x08	; 8
    395c:	80 83       	st	Z, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    395e:	81 81       	ldd	r24, Z+1	; 0x01
    3960:	83 ff       	sbrs	r24, 3
    3962:	fd cf       	rjmp	.-6      	; 0x395e <setXOSC_32MHz+0x14>
	// configure PLL to use the crystal and turn on
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
    3964:	80 ec       	ldi	r24, 0xC0	; 192
    3966:	62 e0       	ldi	r22, 0x02	; 2
    3968:	0e 94 4a 1c 	call	0x3894	; 0x3894 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    396c:	e0 e5       	ldi	r30, 0x50	; 80
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	80 61       	ori	r24, 0x10	; 16
    3974:	80 83       	st	Z, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    3976:	81 81       	ldd	r24, Z+1	; 0x01
    3978:	84 ff       	sbrs	r24, 4
    397a:	fd cf       	rjmp	.-6      	; 0x3976 <setXOSC_32MHz+0x2c>
	// set as system clock and disable unused RC oscillator
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    397c:	84 e0       	ldi	r24, 0x04	; 4
    397e:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <CLKSYS_Disable>
}
    3988:	08 95       	ret

0000398a <set_16MHz>:

// produces consistent but inaccurate clock period.
void set_16MHz() {
	// select 32MHz Oscillator and prescale by 1/2
	CLKSYS_Enable(OSC_RC32MEN_bm);
    398a:	e0 e5       	ldi	r30, 0x50	; 80
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
    3990:	82 60       	ori	r24, 0x02	; 2
    3992:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	61 e0       	ldi	r22, 0x01	; 1
    3998:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
    399c:	e0 e5       	ldi	r30, 0x50	; 80
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	81 81       	ldd	r24, Z+1	; 0x01
    39a2:	81 ff       	sbrs	r24, 1
    39a4:	fd cf       	rjmp	.-6      	; 0x39a0 <set_16MHz+0x16>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <CLKSYS_Disable>
	
}
    39b2:	08 95       	ret

000039b4 <set_32MHz>:

// produces consistent but inaccurate clock period.
void set_32MHz() {
	#define F_CPU 32000000UL
	// select 32MHz Oscillator and prescale by 1
	CLKSYS_Enable(OSC_RC32MEN_bm);
    39b4:	e0 e5       	ldi	r30, 0x50	; 80
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	82 60       	ori	r24, 0x02	; 2
    39bc:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	60 e0       	ldi	r22, 0x00	; 0
    39c2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
    39c6:	e0 e5       	ldi	r30, 0x50	; 80
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	81 81       	ldd	r24, Z+1	; 0x01
    39cc:	81 ff       	sbrs	r24, 1
    39ce:	fd cf       	rjmp	.-6      	; 0x39ca <set_32MHz+0x16>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <CLKSYS_Disable>
	
}
    39dc:	08 95       	ret

000039de <portExCS>:


void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
    39de:	88 23       	and	r24, r24
    39e0:	29 f0       	breq	.+10     	; 0x39ec <portExCS+0xe>
    39e2:	88 e0       	ldi	r24, 0x08	; 8
    39e4:	e0 e0       	ldi	r30, 0x00	; 0
    39e6:	f6 e0       	ldi	r31, 0x06	; 6
    39e8:	86 83       	std	Z+6, r24	; 0x06
    39ea:	04 c0       	rjmp	.+8      	; 0x39f4 <portExCS+0x16>
	else {
		PORTA.OUTSET = PIN3_bm;
    39ec:	88 e0       	ldi	r24, 0x08	; 8
    39ee:	e0 e0       	ldi	r30, 0x00	; 0
    39f0:	f6 e0       	ldi	r31, 0x06	; 6
    39f2:	85 83       	std	Z+5, r24	; 0x05
    39f4:	8a e6       	ldi	r24, 0x6A	; 106
    39f6:	8a 95       	dec	r24
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <portExCS+0x18>
    39fa:	00 c0       	rjmp	.+0      	; 0x39fc <portExCS+0x1e>
	}
	_delay_us(10);
}
    39fc:	08 95       	ret

000039fe <Ext1Power>:
*/


void Ext1Power(uint8_t on) {
	
	if (on) {
    39fe:	88 23       	and	r24, r24
    3a00:	79 f0       	breq	.+30     	; 0x3a20 <Ext1Power+0x22>
		PORTF.DIRSET = PIN5_bm;
    3a02:	e0 ea       	ldi	r30, 0xA0	; 160
    3a04:	f6 e0       	ldi	r31, 0x06	; 6
    3a06:	80 e2       	ldi	r24, 0x20	; 32
    3a08:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN5_bm;
    3a0a:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a0c:	8f ef       	ldi	r24, 0xFF	; 255
    3a0e:	93 ec       	ldi	r25, 0xC3	; 195
    3a10:	a9 e0       	ldi	r26, 0x09	; 9
    3a12:	81 50       	subi	r24, 0x01	; 1
    3a14:	90 40       	sbci	r25, 0x00	; 0
    3a16:	a0 40       	sbci	r26, 0x00	; 0
    3a18:	e1 f7       	brne	.-8      	; 0x3a12 <Ext1Power+0x14>
    3a1a:	00 c0       	rjmp	.+0      	; 0x3a1c <Ext1Power+0x1e>
    3a1c:	00 00       	nop
    3a1e:	08 95       	ret
		//PortEx_DIRSET(PIN3_bm, PS_BANKB);
		//PortEx_OUTSET(PIN3_bm, PS_BANKB);  //write protect SDHC
		_delay_ms(100);
		
	} else {
		PORTF.OUTCLR = PIN5_bm;
    3a20:	e0 ea       	ldi	r30, 0xA0	; 160
    3a22:	f6 e0       	ldi	r31, 0x06	; 6
    3a24:	80 e2       	ldi	r24, 0x20	; 32
    3a26:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN5_bm;
    3a28:	82 83       	std	Z+2, r24	; 0x02
    3a2a:	08 95       	ret

00003a2c <Ext2Power>:
	}
}

void Ext2Power(uint8_t on) {
	
	if (on) {
    3a2c:	88 23       	and	r24, r24
    3a2e:	79 f0       	breq	.+30     	; 0x3a4e <Ext2Power+0x22>
		PORTF.DIRSET = PIN6_bm;
    3a30:	e0 ea       	ldi	r30, 0xA0	; 160
    3a32:	f6 e0       	ldi	r31, 0x06	; 6
    3a34:	80 e4       	ldi	r24, 0x40	; 64
    3a36:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN6_bm;
    3a38:	85 83       	std	Z+5, r24	; 0x05
    3a3a:	8f ef       	ldi	r24, 0xFF	; 255
    3a3c:	93 ec       	ldi	r25, 0xC3	; 195
    3a3e:	a9 e0       	ldi	r26, 0x09	; 9
    3a40:	81 50       	subi	r24, 0x01	; 1
    3a42:	90 40       	sbci	r25, 0x00	; 0
    3a44:	a0 40       	sbci	r26, 0x00	; 0
    3a46:	e1 f7       	brne	.-8      	; 0x3a40 <Ext2Power+0x14>
    3a48:	00 c0       	rjmp	.+0      	; 0x3a4a <Ext2Power+0x1e>
    3a4a:	00 00       	nop
    3a4c:	08 95       	ret
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN6_bm;
    3a4e:	e0 ea       	ldi	r30, 0xA0	; 160
    3a50:	f6 e0       	ldi	r31, 0x06	; 6
    3a52:	80 e4       	ldi	r24, 0x40	; 64
    3a54:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN6_bm;
    3a56:	82 83       	std	Z+2, r24	; 0x02
    3a58:	08 95       	ret

00003a5a <HVPower>:
	}
}

void HVPower(uint8_t on) {
	
	if (on) {
    3a5a:	88 23       	and	r24, r24
    3a5c:	79 f0       	breq	.+30     	; 0x3a7c <HVPower+0x22>
		PORTF.DIRSET = PIN7_bm;
    3a5e:	e0 ea       	ldi	r30, 0xA0	; 160
    3a60:	f6 e0       	ldi	r31, 0x06	; 6
    3a62:	80 e8       	ldi	r24, 0x80	; 128
    3a64:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN7_bm;
    3a66:	85 83       	std	Z+5, r24	; 0x05
    3a68:	8f ef       	ldi	r24, 0xFF	; 255
    3a6a:	93 ec       	ldi	r25, 0xC3	; 195
    3a6c:	a9 e0       	ldi	r26, 0x09	; 9
    3a6e:	81 50       	subi	r24, 0x01	; 1
    3a70:	90 40       	sbci	r25, 0x00	; 0
    3a72:	a0 40       	sbci	r26, 0x00	; 0
    3a74:	e1 f7       	brne	.-8      	; 0x3a6e <HVPower+0x14>
    3a76:	00 c0       	rjmp	.+0      	; 0x3a78 <HVPower+0x1e>
    3a78:	00 00       	nop
    3a7a:	05 c0       	rjmp	.+10     	; 0x3a86 <HVPower+0x2c>
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN7_bm;
    3a7c:	e0 ea       	ldi	r30, 0xA0	; 160
    3a7e:	f6 e0       	ldi	r31, 0x06	; 6
    3a80:	80 e8       	ldi	r24, 0x80	; 128
    3a82:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN7_bm;
    3a84:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a86:	af e3       	ldi	r26, 0x3F	; 63
    3a88:	bf e1       	ldi	r27, 0x1F	; 31
    3a8a:	11 97       	sbiw	r26, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <HVPower+0x30>
    3a8e:	00 c0       	rjmp	.+0      	; 0x3a90 <HVPower+0x36>
    3a90:	00 00       	nop
	}
	_delay_us(1000);
}
    3a92:	08 95       	ret

00003a94 <lowerMuxCS>:


void lowerMuxCS(uint8_t write) {
	
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
    3a94:	88 23       	and	r24, r24
    3a96:	29 f0       	breq	.+10     	; 0x3aa2 <lowerMuxCS+0xe>
    3a98:	80 e1       	ldi	r24, 0x10	; 16
    3a9a:	e0 e8       	ldi	r30, 0x80	; 128
    3a9c:	f6 e0       	ldi	r31, 0x06	; 6
    3a9e:	86 83       	std	Z+6, r24	; 0x06
    3aa0:	08 95       	ret
	else PORTE.OUTSET = PIN4_bm;
    3aa2:	80 e1       	ldi	r24, 0x10	; 16
    3aa4:	e0 e8       	ldi	r30, 0x80	; 128
    3aa6:	f6 e0       	ldi	r31, 0x06	; 6
    3aa8:	85 83       	std	Z+5, r24	; 0x05
    3aaa:	08 95       	ret

00003aac <upperMuxCS>:
}

void upperMuxCS(uint8_t write) {
	
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
    3aac:	88 23       	and	r24, r24
    3aae:	29 f0       	breq	.+10     	; 0x3aba <upperMuxCS+0xe>
    3ab0:	82 e0       	ldi	r24, 0x02	; 2
    3ab2:	e0 e4       	ldi	r30, 0x40	; 64
    3ab4:	f6 e0       	ldi	r31, 0x06	; 6
    3ab6:	86 83       	std	Z+6, r24	; 0x06
    3ab8:	08 95       	ret
	else PORTC.OUTSET = PIN1_bm;
    3aba:	82 e0       	ldi	r24, 0x02	; 2
    3abc:	e0 e4       	ldi	r30, 0x40	; 64
    3abe:	f6 e0       	ldi	r31, 0x06	; 6
    3ac0:	85 83       	std	Z+5, r24	; 0x05
    3ac2:	08 95       	ret

00003ac4 <SPIInit>:
}

void SPIInit(uint8_t mode) {
	
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
    3ac4:	e0 e4       	ldi	r30, 0x40	; 64
    3ac6:	f6 e0       	ldi	r31, 0x06	; 6
    3ac8:	90 e1       	ldi	r25, 0x10	; 16
    3aca:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
    3acc:	28 e3       	ldi	r18, 0x38	; 56
    3ace:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
    3ad0:	95 83       	std	Z+5, r25	; 0x05

	// init SPI
	SPIC.CTRL =	SPI_PRESCALER |  // set clock speed
    3ad2:	81 65       	ori	r24, 0x51	; 81
    3ad4:	a0 ec       	ldi	r26, 0xC0	; 192
    3ad6:	b8 e0       	ldi	r27, 0x08	; 8
    3ad8:	8c 93       	st	X, r24
	            0x00 |  // set data order msb first
	            SPI_MASTER_bm | // set SPI master
	            mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    3ada:	11 96       	adiw	r26, 0x01	; 1
    3adc:	1c 92       	st	X, r1
    3ade:	11 97       	sbiw	r26, 0x01	; 1

 	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
    3ae0:	80 ea       	ldi	r24, 0xA0	; 160
    3ae2:	81 83       	std	Z+1, r24	; 0x01

	
}
    3ae4:	08 95       	ret

00003ae6 <SPIInit2>:

//use this if using a prescalar
void SPIInit2(uint8_t mode, uint8_t prescalar) {
	
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
    3ae6:	e0 e4       	ldi	r30, 0x40	; 64
    3ae8:	f6 e0       	ldi	r31, 0x06	; 6
    3aea:	90 e1       	ldi	r25, 0x10	; 16
    3aec:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
    3aee:	28 e3       	ldi	r18, 0x38	; 56
    3af0:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
    3af2:	95 83       	std	Z+5, r25	; 0x05
	

	// init SPI
	SPIC.CTRL =	prescalar |  // set clock speed
    3af4:	80 65       	ori	r24, 0x50	; 80
    3af6:	68 2b       	or	r22, r24
    3af8:	a0 ec       	ldi	r26, 0xC0	; 192
    3afa:	b8 e0       	ldi	r27, 0x08	; 8
    3afc:	6c 93       	st	X, r22
	0x00 |  // set data order msb first
	SPI_MASTER_bm | // set SPI master
	mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    3afe:	11 96       	adiw	r26, 0x01	; 1
    3b00:	1c 92       	st	X, r1
    3b02:	11 97       	sbiw	r26, 0x01	; 1

	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
    3b04:	80 ea       	ldi	r24, 0xA0	; 160
    3b06:	81 83       	std	Z+1, r24	; 0x01
}
    3b08:	08 95       	ret

00003b0a <SPICS>:

void SPICS(uint8_t enable) {
	
	if (enable) PORTC.OUTCLR = PIN4_bm;
    3b0a:	88 23       	and	r24, r24
    3b0c:	29 f0       	breq	.+10     	; 0x3b18 <SPICS+0xe>
    3b0e:	80 e1       	ldi	r24, 0x10	; 16
    3b10:	e0 e4       	ldi	r30, 0x40	; 64
    3b12:	f6 e0       	ldi	r31, 0x06	; 6
    3b14:	86 83       	std	Z+6, r24	; 0x06
    3b16:	08 95       	ret
	else {
		PORTC.OUTSET = PIN4_bm;
    3b18:	80 e1       	ldi	r24, 0x10	; 16
    3b1a:	e0 e4       	ldi	r30, 0x40	; 64
    3b1c:	f6 e0       	ldi	r31, 0x06	; 6
    3b1e:	85 83       	std	Z+5, r24	; 0x05
    3b20:	08 95       	ret

00003b22 <SPIDisable>:
	}	
}

void SPIDisable() {
	
	PORTC.OUTSET = PIN4_bm;
    3b22:	e0 e4       	ldi	r30, 0x40	; 64
    3b24:	f6 e0       	ldi	r31, 0x06	; 6
    3b26:	80 e1       	ldi	r24, 0x10	; 16
    3b28:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
    3b2a:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
    3b2e:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
    3b30:	80 eb       	ldi	r24, 0xB0	; 176
    3b32:	82 83       	std	Z+2, r24	; 0x02

}
    3b34:	08 95       	ret

00003b36 <PortEx_OUTCLR>:
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	c8 2f       	mov	r28, r24
    3b3c:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	portExCS(TRUE);
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	0e 94 ef 1c 	call	0x39de	; 0x39de <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
    3b50:	dd 23       	and	r29, r29
    3b52:	89 f0       	breq	.+34     	; 0x3b76 <PortEx_OUTCLR+0x40>
    3b54:	80 91 d6 23 	lds	r24, 0x23D6
    3b58:	c0 95       	com	r28
    3b5a:	c8 23       	and	r28, r24
    3b5c:	c0 93 d6 23 	sts	0x23D6, r28
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
	
	SPIBuffer[0] = PS_WRITE;
    3b60:	80 e4       	ldi	r24, 0x40	; 64
    3b62:	80 93 65 50 	sts	0x5065, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
    3b66:	84 e1       	ldi	r24, 0x14	; 20
    3b68:	80 93 66 50 	sts	0x5066, r24
		SPIBuffer[2] = bankA_OUT;
    3b6c:	80 91 d6 23 	lds	r24, 0x23D6
    3b70:	80 93 67 50 	sts	0x5067, r24
    3b74:	10 c0       	rjmp	.+32     	; 0x3b96 <PortEx_OUTCLR+0x60>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
    3b76:	80 91 82 50 	lds	r24, 0x5082
    3b7a:	c0 95       	com	r28
    3b7c:	c8 23       	and	r28, r24
    3b7e:	c0 93 82 50 	sts	0x5082, r28
	
	SPIBuffer[0] = PS_WRITE;
    3b82:	80 e4       	ldi	r24, 0x40	; 64
    3b84:	80 93 65 50 	sts	0x5065, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
		SPIBuffer[2] = bankA_OUT;
	} else {
		SPIBuffer[1]=PS_OLATB;
    3b88:	85 e1       	ldi	r24, 0x15	; 21
    3b8a:	80 93 66 50 	sts	0x5066, r24
		SPIBuffer[2] = bankB_OUT; 
    3b8e:	80 91 82 50 	lds	r24, 0x5082
    3b92:	80 93 67 50 	sts	0x5067, r24
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    3b9a:	25 e6       	ldi	r18, 0x65	; 101
    3b9c:	30 e5       	ldi	r19, 0x50	; 80
    3b9e:	a0 ec       	ldi	r26, 0xC0	; 192
    3ba0:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
    3ba2:	c1 e7       	ldi	r28, 0x71	; 113
    3ba4:	d0 e5       	ldi	r29, 0x50	; 80
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    3ba6:	f9 01       	movw	r30, r18
    3ba8:	e8 0f       	add	r30, r24
    3baa:	f9 1f       	adc	r31, r25
    3bac:	40 81       	ld	r20, Z
    3bae:	13 96       	adiw	r26, 0x03	; 3
    3bb0:	4c 93       	st	X, r20
    3bb2:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    3bb4:	12 96       	adiw	r26, 0x02	; 2
    3bb6:	4c 91       	ld	r20, X
    3bb8:	12 97       	sbiw	r26, 0x02	; 2
    3bba:	44 23       	and	r20, r20
    3bbc:	dc f7       	brge	.-10     	; 0x3bb4 <PortEx_OUTCLR+0x7e>
		SPIBuffer[12] = SPIC.DATA;
    3bbe:	13 96       	adiw	r26, 0x03	; 3
    3bc0:	4c 91       	ld	r20, X
    3bc2:	13 97       	sbiw	r26, 0x03	; 3
    3bc4:	48 83       	st	Y, r20
    3bc6:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    3bc8:	83 30       	cpi	r24, 0x03	; 3
    3bca:	91 05       	cpc	r25, r1
    3bcc:	61 f7       	brne	.-40     	; 0x3ba6 <PortEx_OUTCLR+0x70>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	portExCS(FALSE);
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	0e 94 ef 1c 	call	0x39de	; 0x39de <portExCS>
	SPIDisable();
    3bda:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
}
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	08 95       	ret

00003be4 <PortEx_OUTSET>:
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	c8 2f       	mov	r28, r24
    3bea:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	portExCS(TRUE);
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	0e 94 ef 1c 	call	0x39de	; 0x39de <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
    3bfe:	dd 23       	and	r29, r29
    3c00:	81 f0       	breq	.+32     	; 0x3c22 <PortEx_OUTSET+0x3e>
    3c02:	80 91 d6 23 	lds	r24, 0x23D6
    3c06:	c8 2b       	or	r28, r24
    3c08:	c0 93 d6 23 	sts	0x23D6, r28
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
	
	SPIBuffer[0] = PS_WRITE;
    3c0c:	80 e4       	ldi	r24, 0x40	; 64
    3c0e:	80 93 65 50 	sts	0x5065, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
    3c12:	84 e1       	ldi	r24, 0x14	; 20
    3c14:	80 93 66 50 	sts	0x5066, r24
		SPIBuffer[2] = bankA_OUT;
    3c18:	80 91 d6 23 	lds	r24, 0x23D6
    3c1c:	80 93 67 50 	sts	0x5067, r24
    3c20:	0f c0       	rjmp	.+30     	; 0x3c40 <PortEx_OUTSET+0x5c>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
    3c22:	80 91 82 50 	lds	r24, 0x5082
    3c26:	c8 2b       	or	r28, r24
    3c28:	c0 93 82 50 	sts	0x5082, r28
	
	SPIBuffer[0] = PS_WRITE;
    3c2c:	80 e4       	ldi	r24, 0x40	; 64
    3c2e:	80 93 65 50 	sts	0x5065, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
		SPIBuffer[2] = bankA_OUT;
	} else {
		SPIBuffer[1]=PS_OLATB;
    3c32:	85 e1       	ldi	r24, 0x15	; 21
    3c34:	80 93 66 50 	sts	0x5066, r24
		SPIBuffer[2] = bankB_OUT; 
    3c38:	80 91 82 50 	lds	r24, 0x5082
    3c3c:	80 93 67 50 	sts	0x5067, r24
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    3c44:	25 e6       	ldi	r18, 0x65	; 101
    3c46:	30 e5       	ldi	r19, 0x50	; 80
    3c48:	a0 ec       	ldi	r26, 0xC0	; 192
    3c4a:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
    3c4c:	c1 e7       	ldi	r28, 0x71	; 113
    3c4e:	d0 e5       	ldi	r29, 0x50	; 80
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    3c50:	f9 01       	movw	r30, r18
    3c52:	e8 0f       	add	r30, r24
    3c54:	f9 1f       	adc	r31, r25
    3c56:	40 81       	ld	r20, Z
    3c58:	13 96       	adiw	r26, 0x03	; 3
    3c5a:	4c 93       	st	X, r20
    3c5c:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    3c5e:	12 96       	adiw	r26, 0x02	; 2
    3c60:	4c 91       	ld	r20, X
    3c62:	12 97       	sbiw	r26, 0x02	; 2
    3c64:	44 23       	and	r20, r20
    3c66:	dc f7       	brge	.-10     	; 0x3c5e <PortEx_OUTSET+0x7a>
		SPIBuffer[12] = SPIC.DATA;
    3c68:	13 96       	adiw	r26, 0x03	; 3
    3c6a:	4c 91       	ld	r20, X
    3c6c:	13 97       	sbiw	r26, 0x03	; 3
    3c6e:	48 83       	st	Y, r20
    3c70:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    3c72:	83 30       	cpi	r24, 0x03	; 3
    3c74:	91 05       	cpc	r25, r1
    3c76:	61 f7       	brne	.-40     	; 0x3c50 <PortEx_OUTSET+0x6c>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	portExCS(FALSE);
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	0e 94 ef 1c 	call	0x39de	; 0x39de <portExCS>
	SPIDisable();
    3c84:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
}
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	08 95       	ret

00003c8e <PortEx_DIRCLR>:
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	c8 2f       	mov	r28, r24
    3c94:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	portExCS(TRUE);
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	0e 94 ef 1c 	call	0x39de	; 0x39de <portExCS>
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
    3ca8:	dd 23       	and	r29, r29
    3caa:	89 f0       	breq	.+34     	; 0x3cce <PortEx_DIRCLR+0x40>
    3cac:	80 91 7a 50 	lds	r24, 0x507A
    3cb0:	80 95       	com	r24
    3cb2:	c8 23       	and	r28, r24
    3cb4:	c0 93 7a 50 	sts	0x507A, r28
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
	
	SPIBuffer[0] = PS_WRITE;
    3cb8:	80 e4       	ldi	r24, 0x40	; 64
    3cba:	80 93 65 50 	sts	0x5065, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
    3cbe:	10 92 66 50 	sts	0x5066, r1
		SPIBuffer[2] = ~bankA_DIR; 
    3cc2:	80 91 7a 50 	lds	r24, 0x507A
    3cc6:	80 95       	com	r24
    3cc8:	80 93 67 50 	sts	0x5067, r24
    3ccc:	11 c0       	rjmp	.+34     	; 0x3cf0 <PortEx_DIRCLR+0x62>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
    3cce:	80 91 ce 50 	lds	r24, 0x50CE
    3cd2:	80 95       	com	r24
    3cd4:	c8 23       	and	r28, r24
    3cd6:	c0 93 ce 50 	sts	0x50CE, r28
	
	SPIBuffer[0] = PS_WRITE;
    3cda:	80 e4       	ldi	r24, 0x40	; 64
    3cdc:	80 93 65 50 	sts	0x5065, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
		SPIBuffer[2] = ~bankA_DIR; 
	} else {
		SPIBuffer[1]=PS_IODIRB;
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	80 93 66 50 	sts	0x5066, r24
		SPIBuffer[2] = ~bankB_DIR;
    3ce6:	80 91 ce 50 	lds	r24, 0x50CE
    3cea:	80 95       	com	r24
    3cec:	80 93 67 50 	sts	0x5067, r24
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    3cf4:	25 e6       	ldi	r18, 0x65	; 101
    3cf6:	30 e5       	ldi	r19, 0x50	; 80
    3cf8:	a0 ec       	ldi	r26, 0xC0	; 192
    3cfa:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
    3cfc:	c1 e7       	ldi	r28, 0x71	; 113
    3cfe:	d0 e5       	ldi	r29, 0x50	; 80
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    3d00:	f9 01       	movw	r30, r18
    3d02:	e8 0f       	add	r30, r24
    3d04:	f9 1f       	adc	r31, r25
    3d06:	40 81       	ld	r20, Z
    3d08:	13 96       	adiw	r26, 0x03	; 3
    3d0a:	4c 93       	st	X, r20
    3d0c:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    3d0e:	12 96       	adiw	r26, 0x02	; 2
    3d10:	4c 91       	ld	r20, X
    3d12:	12 97       	sbiw	r26, 0x02	; 2
    3d14:	44 23       	and	r20, r20
    3d16:	dc f7       	brge	.-10     	; 0x3d0e <PortEx_DIRCLR+0x80>
		SPIBuffer[12] = SPIC.DATA;
    3d18:	13 96       	adiw	r26, 0x03	; 3
    3d1a:	4c 91       	ld	r20, X
    3d1c:	13 97       	sbiw	r26, 0x03	; 3
    3d1e:	48 83       	st	Y, r20
    3d20:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    3d22:	83 30       	cpi	r24, 0x03	; 3
    3d24:	91 05       	cpc	r25, r1
    3d26:	61 f7       	brne	.-40     	; 0x3d00 <PortEx_DIRCLR+0x72>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	portExCS(FALSE);
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	0e 94 ef 1c 	call	0x39de	; 0x39de <portExCS>
	SPIDisable();
    3d34:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	08 95       	ret

00003d3e <PortEx_DIRSET>:
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	c8 2f       	mov	r28, r24
    3d44:	d6 2f       	mov	r29, r22
	SPIInit(PS_SPI_MODE);
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	portExCS(TRUE);
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	0e 94 ef 1c 	call	0x39de	; 0x39de <portExCS>

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
    3d58:	dd 23       	and	r29, r29
    3d5a:	81 f0       	breq	.+32     	; 0x3d7c <PortEx_DIRSET+0x3e>
    3d5c:	80 91 7a 50 	lds	r24, 0x507A
    3d60:	c8 2b       	or	r28, r24
    3d62:	c0 93 7a 50 	sts	0x507A, r28
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
	
	SPIBuffer[0] = PS_WRITE;
    3d66:	80 e4       	ldi	r24, 0x40	; 64
    3d68:	80 93 65 50 	sts	0x5065, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
    3d6c:	10 92 66 50 	sts	0x5066, r1
		SPIBuffer[2] = ~bankA_DIR; 
    3d70:	80 91 7a 50 	lds	r24, 0x507A
    3d74:	80 95       	com	r24
    3d76:	80 93 67 50 	sts	0x5067, r24
    3d7a:	10 c0       	rjmp	.+32     	; 0x3d9c <PortEx_DIRSET+0x5e>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
    3d7c:	80 91 ce 50 	lds	r24, 0x50CE
    3d80:	c8 2b       	or	r28, r24
    3d82:	c0 93 ce 50 	sts	0x50CE, r28
	
	SPIBuffer[0] = PS_WRITE;
    3d86:	80 e4       	ldi	r24, 0x40	; 64
    3d88:	80 93 65 50 	sts	0x5065, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
		SPIBuffer[2] = ~bankA_DIR; 
	} else {
		SPIBuffer[1]=PS_IODIRB;
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	80 93 66 50 	sts	0x5066, r24
		SPIBuffer[2] = ~bankB_DIR;
    3d92:	80 91 ce 50 	lds	r24, 0x50CE
    3d96:	80 95       	com	r24
    3d98:	80 93 67 50 	sts	0x5067, r24
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    3da0:	25 e6       	ldi	r18, 0x65	; 101
    3da2:	30 e5       	ldi	r19, 0x50	; 80
    3da4:	a0 ec       	ldi	r26, 0xC0	; 192
    3da6:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
    3da8:	c1 e7       	ldi	r28, 0x71	; 113
    3daa:	d0 e5       	ldi	r29, 0x50	; 80
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    3dac:	f9 01       	movw	r30, r18
    3dae:	e8 0f       	add	r30, r24
    3db0:	f9 1f       	adc	r31, r25
    3db2:	40 81       	ld	r20, Z
    3db4:	13 96       	adiw	r26, 0x03	; 3
    3db6:	4c 93       	st	X, r20
    3db8:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
    3dba:	12 96       	adiw	r26, 0x02	; 2
    3dbc:	4c 91       	ld	r20, X
    3dbe:	12 97       	sbiw	r26, 0x02	; 2
    3dc0:	44 23       	and	r20, r20
    3dc2:	dc f7       	brge	.-10     	; 0x3dba <PortEx_DIRSET+0x7c>
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
    3dc4:	13 96       	adiw	r26, 0x03	; 3
    3dc6:	4c 91       	ld	r20, X
    3dc8:	13 97       	sbiw	r26, 0x03	; 3
    3dca:	48 83       	st	Y, r20
    3dcc:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    3dce:	83 30       	cpi	r24, 0x03	; 3
    3dd0:	91 05       	cpc	r25, r1
    3dd2:	61 f7       	brne	.-40     	; 0x3dac <PortEx_DIRSET+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
	}

	portExCS(FALSE);
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	0e 94 ef 1c 	call	0x39de	; 0x39de <portExCS>
	SPICS(FALSE);
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    3de0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>


}
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	08 95       	ret

00003dea <readFRAM>:

}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes) {
    3dea:	0f 93       	push	r16
    3dec:	1f 93       	push	r17
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	8c 01       	movw	r16, r24
	
	SPIInit(SPI_MODE_0_gc);
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    3dfa:	c0 ec       	ldi	r28, 0xC0	; 192
    3dfc:	d8 e0       	ldi	r29, 0x08	; 8
    3dfe:	80 ed       	ldi	r24, 0xD0	; 208
    3e00:	88 83       	st	Y, r24
	SPICS(TRUE);
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    3e08:	88 e0       	ldi	r24, 0x08	; 8
    3e0a:	e0 e2       	ldi	r30, 0x20	; 32
    3e0c:	f6 e0       	ldi	r31, 0x06	; 6
    3e0e:	86 83       	std	Z+6, r24	; 0x06
	nop();
    3e10:	00 00       	nop
								
	SPIC.DATA = FR_READ;
    3e12:	83 e0       	ldi	r24, 0x03	; 3
    3e14:	8b 83       	std	Y+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    3e16:	e0 ec       	ldi	r30, 0xC0	; 192
    3e18:	f8 e0       	ldi	r31, 0x08	; 8
    3e1a:	82 81       	ldd	r24, Z+2	; 0x02
    3e1c:	88 23       	and	r24, r24
    3e1e:	ec f7       	brge	.-6      	; 0x3e1a <readFRAM+0x30>
	SPIBuffer[12] = SPIC.DATA;
    3e20:	e0 ec       	ldi	r30, 0xC0	; 192
    3e22:	f8 e0       	ldi	r31, 0x08	; 8
    3e24:	83 81       	ldd	r24, Z+3	; 0x03
    3e26:	80 93 71 50 	sts	0x5071, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 1);;
    3e2a:	80 91 58 40 	lds	r24, 0x4058
    3e2e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    3e30:	82 81       	ldd	r24, Z+2	; 0x02
    3e32:	88 23       	and	r24, r24
    3e34:	ec f7       	brge	.-6      	; 0x3e30 <readFRAM+0x46>
	SPIBuffer[12] = SPIC.DATA;
    3e36:	e0 ec       	ldi	r30, 0xC0	; 192
    3e38:	f8 e0       	ldi	r31, 0x08	; 8
    3e3a:	83 81       	ldd	r24, Z+3	; 0x03
    3e3c:	80 93 71 50 	sts	0x5071, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
    3e40:	80 91 57 40 	lds	r24, 0x4057
    3e44:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    3e46:	82 81       	ldd	r24, Z+2	; 0x02
    3e48:	88 23       	and	r24, r24
    3e4a:	ec f7       	brge	.-6      	; 0x3e46 <readFRAM+0x5c>
	SPIBuffer[12] = SPIC.DATA;
    3e4c:	e0 ec       	ldi	r30, 0xC0	; 192
    3e4e:	f8 e0       	ldi	r31, 0x08	; 8
    3e50:	83 81       	ldd	r24, Z+3	; 0x03
    3e52:	80 93 71 50 	sts	0x5071, r24
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    3e56:	01 15       	cp	r16, r1
    3e58:	11 05       	cpc	r17, r1
    3e5a:	b1 f0       	breq	.+44     	; 0x3e88 <readFRAM+0x9e>
    3e5c:	ef ed       	ldi	r30, 0xDF	; 223
    3e5e:	f3 e2       	ldi	r31, 0x23	; 35

}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes) {
    3e60:	0e 0f       	add	r16, r30
    3e62:	1f 1f       	adc	r17, r31
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
		SPIC.DATA = 0xAA;
    3e64:	a0 ec       	ldi	r26, 0xC0	; 192
    3e66:	b8 e0       	ldi	r27, 0x08	; 8
    3e68:	9a ea       	ldi	r25, 0xAA	; 170
    3e6a:	13 96       	adiw	r26, 0x03	; 3
    3e6c:	9c 93       	st	X, r25
    3e6e:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    3e70:	12 96       	adiw	r26, 0x02	; 2
    3e72:	8c 91       	ld	r24, X
    3e74:	12 97       	sbiw	r26, 0x02	; 2
    3e76:	88 23       	and	r24, r24
    3e78:	dc f7       	brge	.-10     	; 0x3e70 <readFRAM+0x86>
		FRAMReadBuffer[i] = SPIC.DATA;
    3e7a:	13 96       	adiw	r26, 0x03	; 3
    3e7c:	8c 91       	ld	r24, X
    3e7e:	13 97       	sbiw	r26, 0x03	; 3
    3e80:	81 93       	st	Z+, r24
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    3e82:	e0 17       	cp	r30, r16
    3e84:	f1 07       	cpc	r31, r17
    3e86:	89 f7       	brne	.-30     	; 0x3e6a <readFRAM+0x80>
		SPIC.DATA = 0xAA;
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
	}

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
    3e88:	88 e0       	ldi	r24, 0x08	; 8
    3e8a:	e0 e2       	ldi	r30, 0x20	; 32
    3e8c:	f6 e0       	ldi	r31, 0x06	; 6
    3e8e:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    3e96:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>

}
    3e9a:	df 91       	pop	r29
    3e9c:	cf 91       	pop	r28
    3e9e:	1f 91       	pop	r17
    3ea0:	0f 91       	pop	r16
    3ea2:	08 95       	ret

00003ea4 <FRAMTest3Channel>:
//test 3 channel sampling of accelerometer. OBSOLETE
void FRAMTest3Channel(void) {
	//uint8_t gains[3] = { GAIN_1_gc, GAIN_1_gc, GAIN_1_gc };
			
	//CO_collectSeismic3Channel(FILTER_CH_2AND6_bm | FILTER_CH_3AND7_bm |	FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,	gains, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
    3eaa:	8f ec       	ldi	r24, 0xCF	; 207
    3eac:	97 e0       	ldi	r25, 0x07	; 7
    3eae:	01 97       	sbiw	r24, 0x01	; 1
    3eb0:	f1 f7       	brne	.-4      	; 0x3eae <FRAMTest3Channel+0xa>
    3eb2:	00 c0       	rjmp	.+0      	; 0x3eb4 <FRAMTest3Channel+0x10>
    3eb4:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    3eb6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <calcChecksumFRAM>

	ADCPower(FALSE);
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	
}
    3ec0:	08 95       	ret

00003ec2 <FRAMTest1Channel>:
//test 1 channel sampling of accelerometer. OBSOLETE
void FRAMTest1Channel(void) {

	//CO_collectSeismic1Channel(ADC_CH_8_gc, FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc, GAIN_1_gc, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
    3ec8:	8f ec       	ldi	r24, 0xCF	; 207
    3eca:	97 e0       	ldi	r25, 0x07	; 7
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <FRAMTest1Channel+0xa>
    3ed0:	00 c0       	rjmp	.+0      	; 0x3ed2 <FRAMTest1Channel+0x10>
    3ed2:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    3ed4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <calcChecksumFRAM>

	ADCPower(FALSE);
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>

}
    3ede:	08 95       	ret

00003ee0 <FRAMWriteKnownsCheck>:


void FRAMWriteKnownsCheck() {
	
	FRAMWriteKnowns();
    3ee0:	0e 94 46 11 	call	0x228c	; 0x228c <FRAMWriteKnowns>
	ADCPower(TRUE);
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
    3eea:	8f ec       	ldi	r24, 0xCF	; 207
    3eec:	97 e0       	ldi	r25, 0x07	; 7
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	f1 f7       	brne	.-4      	; 0x3eee <FRAMWriteKnownsCheck+0xe>
    3ef2:	00 c0       	rjmp	.+0      	; 0x3ef4 <FRAMWriteKnownsCheck+0x14>
    3ef4:	00 00       	nop

	_delay_us(250);
	calcChecksumFRAM();
    3ef6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <calcChecksumFRAM>

	ADCPower(FALSE);
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>

}
    3f00:	08 95       	ret

00003f02 <checkMote>:

//random function for testing stuff	
void checkMote(){
	
	ADCPower(TRUE);
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	Ext1Power(TRUE);
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Ext1Power>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3f0e:	8f ef       	ldi	r24, 0xFF	; 255
    3f10:	93 ec       	ldi	r25, 0xC3	; 195
    3f12:	a9 e0       	ldi	r26, 0x09	; 9
    3f14:	81 50       	subi	r24, 0x01	; 1
    3f16:	90 40       	sbci	r25, 0x00	; 0
    3f18:	a0 40       	sbci	r26, 0x00	; 0
    3f1a:	e1 f7       	brne	.-8      	; 0x3f14 <checkMote+0x12>
    3f1c:	00 c0       	rjmp	.+0      	; 0x3f1e <checkMote+0x1c>
    3f1e:	00 00       	nop
	_delay_ms(100);
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS	
    3f20:	88 e0       	ldi	r24, 0x08	; 8
    3f22:	60 e0       	ldi	r22, 0x00	; 0
    3f24:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <PortEx_DIRSET>
	while(1){
		PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    3f28:	88 e0       	ldi	r24, 0x08	; 8
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
    3f30:	8a ea       	ldi	r24, 0xAA	; 170
    3f32:	96 ee       	ldi	r25, 0xE6	; 230
    3f34:	a6 e9       	ldi	r26, 0x96	; 150
    3f36:	b1 e0       	ldi	r27, 0x01	; 1
    3f38:	81 50       	subi	r24, 0x01	; 1
    3f3a:	90 40       	sbci	r25, 0x00	; 0
    3f3c:	a0 40       	sbci	r26, 0x00	; 0
    3f3e:	b0 40       	sbci	r27, 0x00	; 0
    3f40:	d9 f7       	brne	.-10     	; 0x3f38 <checkMote+0x36>
    3f42:	00 00       	nop
		_delay_ms(5000);
		PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    3f44:	88 e0       	ldi	r24, 0x08	; 8
    3f46:	60 e0       	ldi	r22, 0x00	; 0
    3f48:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <PortEx_OUTCLR>
    3f4c:	8a ea       	ldi	r24, 0xAA	; 170
    3f4e:	96 ee       	ldi	r25, 0xE6	; 230
    3f50:	a6 e9       	ldi	r26, 0x96	; 150
    3f52:	b1 e0       	ldi	r27, 0x01	; 1
    3f54:	81 50       	subi	r24, 0x01	; 1
    3f56:	90 40       	sbci	r25, 0x00	; 0
    3f58:	a0 40       	sbci	r26, 0x00	; 0
    3f5a:	b0 40       	sbci	r27, 0x00	; 0
    3f5c:	d9 f7       	brne	.-10     	; 0x3f54 <checkMote+0x52>
    3f5e:	00 00       	nop
    3f60:	e3 cf       	rjmp	.-58     	; 0x3f28 <checkMote+0x26>

00003f62 <SD_write_and_read_knowns>:
		_delay_ms(5000);
	}
}

//command to check reading and writing to sd card
void SD_write_and_read_knowns(){
    3f62:	0f 93       	push	r16
    3f64:	1f 93       	push	r17
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
	
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
	SD_write_block(20,FRAMReadBuffer,24);	//write those values to the card
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
	SD_read_block(20,FRAMReadBuffer);	//read into the FRAM buffer from the SD card
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = i%100;	//write 1250 values to the FRAM buffer	
    3f6a:	0f ed       	ldi	r16, 0xDF	; 223
    3f6c:	13 e2       	ldi	r17, 0x23	; 35
		_delay_ms(5000);
	}
}

//command to check reading and writing to sd card
void SD_write_and_read_knowns(){
    3f6e:	f8 01       	movw	r30, r16
    3f70:	80 e0       	ldi	r24, 0x00	; 0
	
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
    3f72:	81 93       	st	Z+, r24
    3f74:	8f 5f       	subi	r24, 0xFF	; 255
    3f76:	88 31       	cpi	r24, 0x18	; 24
    3f78:	e1 f7       	brne	.-8      	; 0x3f72 <SD_write_and_read_knowns+0x10>
	SD_write_block(20,FRAMReadBuffer,24);	//write those values to the card
    3f7a:	cf ed       	ldi	r28, 0xDF	; 223
    3f7c:	d3 e2       	ldi	r29, 0x23	; 35
    3f7e:	64 e1       	ldi	r22, 0x14	; 20
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	ae 01       	movw	r20, r28
    3f88:	28 e1       	ldi	r18, 0x18	; 24
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	0e 94 df 2b 	call	0x57be	; 0x57be <SD_write_block>
		_delay_ms(5000);
	}
}

//command to check reading and writing to sd card
void SD_write_and_read_knowns(){
    3f90:	68 96       	adiw	r28, 0x18	; 24
    3f92:	f8 01       	movw	r30, r16
	
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
	SD_write_block(20,FRAMReadBuffer,24);	//write those values to the card
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
    3f94:	11 92       	st	Z+, r1
    3f96:	ec 17       	cp	r30, r28
    3f98:	fd 07       	cpc	r31, r29
    3f9a:	e1 f7       	brne	.-8      	; 0x3f94 <SD_write_and_read_knowns+0x32>
	SD_read_block(20,FRAMReadBuffer);	//read into the FRAM buffer from the SD card
    3f9c:	64 e1       	ldi	r22, 0x14	; 20
    3f9e:	70 e0       	ldi	r23, 0x00	; 0
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	4f ed       	ldi	r20, 0xDF	; 223
    3fa6:	53 e2       	ldi	r21, 0x23	; 35
    3fa8:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>
    3fac:	f8 01       	movw	r30, r16
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = i%100;	//write 1250 values to the FRAM buffer	
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	c4 e6       	ldi	r28, 0x64	; 100
    3fb4:	d0 e0       	ldi	r29, 0x00	; 0
    3fb6:	c9 01       	movw	r24, r18
    3fb8:	be 01       	movw	r22, r28
    3fba:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    3fbe:	81 93       	st	Z+, r24
    3fc0:	2f 5f       	subi	r18, 0xFF	; 255
    3fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc4:	84 e0       	ldi	r24, 0x04	; 4
    3fc6:	22 3e       	cpi	r18, 0xE2	; 226
    3fc8:	38 07       	cpc	r19, r24
    3fca:	a9 f7       	brne	.-22     	; 0x3fb6 <SD_write_and_read_knowns+0x54>
	SD_write_multiple_blocks(80,FRAMReadBuffer,1250);	//write those values to sd card
    3fcc:	60 e5       	ldi	r22, 0x50	; 80
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	4f ed       	ldi	r20, 0xDF	; 223
    3fd6:	53 e2       	ldi	r21, 0x23	; 35
    3fd8:	22 ee       	ldi	r18, 0xE2	; 226
    3fda:	34 e0       	ldi	r19, 0x04	; 4
    3fdc:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <SD_write_multiple_blocks>
		_delay_ms(5000);
	}
}

//command to check reading and writing to sd card
void SD_write_and_read_knowns(){
    3fe0:	81 ec       	ldi	r24, 0xC1	; 193
    3fe2:	98 e2       	ldi	r25, 0x28	; 40
	SD_write_block(20,FRAMReadBuffer,24);	//write those values to the card
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
	SD_read_block(20,FRAMReadBuffer);	//read into the FRAM buffer from the SD card
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = i%100;	//write 1250 values to the FRAM buffer	
	SD_write_multiple_blocks(80,FRAMReadBuffer,1250);	//write those values to sd card
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = 0;	//clear FRAM buffer
    3fe4:	f8 01       	movw	r30, r16
    3fe6:	11 92       	st	Z+, r1
    3fe8:	8f 01       	movw	r16, r30
    3fea:	e8 17       	cp	r30, r24
    3fec:	f9 07       	cpc	r31, r25
    3fee:	d1 f7       	brne	.-12     	; 0x3fe4 <SD_write_and_read_knowns+0x82>
	SD_read_multiple_blocks(80,FRAMReadBuffer,3);	//read in 3 blocks of data from the memory card
    3ff0:	60 e5       	ldi	r22, 0x50	; 80
    3ff2:	70 e0       	ldi	r23, 0x00	; 0
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	4f ed       	ldi	r20, 0xDF	; 223
    3ffa:	53 e2       	ldi	r21, 0x23	; 35
    3ffc:	23 e0       	ldi	r18, 0x03	; 3
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	0e 94 55 2e 	call	0x5caa	; 0x5caa <SD_read_multiple_blocks>
}
    4004:	df 91       	pop	r29
    4006:	cf 91       	pop	r28
    4008:	1f 91       	pop	r17
    400a:	0f 91       	pop	r16
    400c:	08 95       	ret

0000400e <SD_write_and_read_knowns_FAT>:

//check writing and reading to file on sd card
void SD_write_and_read_knowns_FAT(){
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	0f ed       	ldi	r16, 0xDF	; 223
    4018:	13 e2       	ldi	r17, 0x23	; 35
    401a:	f8 01       	movw	r30, r16
    401c:	80 e0       	ldi	r24, 0x00	; 0
	
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
    401e:	81 93       	st	Z+, r24
    4020:	8f 5f       	subi	r24, 0xFF	; 255
    4022:	88 31       	cpi	r24, 0x18	; 24
    4024:	e1 f7       	brne	.-8      	; 0x401e <SD_write_and_read_knowns_FAT+0x10>
	error = writeFile((unsigned char*)"testing",FRAMReadBuffer,512);
    4026:	cf ed       	ldi	r28, 0xDF	; 223
    4028:	d3 e2       	ldi	r29, 0x23	; 35
    402a:	86 e1       	ldi	r24, 0x16	; 22
    402c:	90 e2       	ldi	r25, 0x20	; 32
    402e:	be 01       	movw	r22, r28
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	32 e0       	ldi	r19, 0x02	; 2
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <writeFile>
    403c:	80 93 a3 50 	sts	0x50A3, r24
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = 0;	//clear FRAM buffer
	SD_read_multiple_blocks(80,FRAMReadBuffer,3);	//read in 3 blocks of data from the memory card
}

//check writing and reading to file on sd card
void SD_write_and_read_knowns_FAT(){
    4040:	68 96       	adiw	r28, 0x18	; 24
	
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
	error = writeFile((unsigned char*)"testing",FRAMReadBuffer,512);
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
    4042:	f8 01       	movw	r30, r16
    4044:	11 92       	st	Z+, r1
    4046:	8f 01       	movw	r16, r30
    4048:	ec 17       	cp	r30, r28
    404a:	fd 07       	cpc	r31, r29
    404c:	d1 f7       	brne	.-12     	; 0x4042 <SD_write_and_read_knowns_FAT+0x34>
	error = readFile(READ,(unsigned char*)"testing");		//read the data into the buffer from file
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	66 e1       	ldi	r22, 0x16	; 22
    4052:	70 e2       	ldi	r23, 0x20	; 32
    4054:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <readFile>
    4058:	80 93 a3 50 	sts	0x50A3, r24
}
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	1f 91       	pop	r17
    4062:	0f 91       	pop	r16
    4064:	08 95       	ret

00004066 <chibi_test_radio>:


//function for testing radio transmission
void chibi_test_radio(){
		
	chb_init();
    4066:	0e 94 29 16 	call	0x2c52	; 0x2c52 <chb_init>
	chb_set_short_addr(0x0002);
    406a:	82 e0       	ldi	r24, 0x02	; 2
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 4c 18 	call	0x3098	; 0x3098 <chb_set_short_addr>
	while(1) nop();								//comment this line if testing transmission
    4072:	00 00       	nop
    4074:	fe cf       	rjmp	.-4      	; 0x4072 <chibi_test_radio+0xc>

00004076 <TestCard>:
	chb_read(FRAMReadBuffer);
	*/
}

//another testing function for sd card
void TestCard(){
    4076:	cf 93       	push	r28
    4078:	df 93       	push	r29
	
	SD_init();
    407a:	0e 94 05 2b 	call	0x560a	; 0x560a <SD_init>
	getBootSectorData();
    407e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <getBootSectorData>
    4082:	ef ed       	ldi	r30, 0xDF	; 223
    4084:	f3 e2       	ldi	r31, 0x23	; 35
	for (int i=0;i<512;i++) FRAMReadBuffer[i] = i%121;
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	c9 e7       	ldi	r28, 0x79	; 121
    408c:	d0 e0       	ldi	r29, 0x00	; 0
    408e:	c9 01       	movw	r24, r18
    4090:	be 01       	movw	r22, r28
    4092:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    4096:	81 93       	st	Z+, r24
    4098:	2f 5f       	subi	r18, 0xFF	; 255
    409a:	3f 4f       	sbci	r19, 0xFF	; 255
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	20 30       	cpi	r18, 0x00	; 0
    40a0:	38 07       	cpc	r19, r24
    40a2:	a9 f7       	brne	.-22     	; 0x408e <TestCard+0x18>
//for (int i=0;i<1;i++) {
	//FRAMReadBuffer[0] = i; 
	writeFile((unsigned char*)"testing",FRAMReadBuffer,512);//}
    40a4:	86 e1       	ldi	r24, 0x16	; 22
    40a6:	90 e2       	ldi	r25, 0x20	; 32
    40a8:	6f ed       	ldi	r22, 0xDF	; 223
    40aa:	73 e2       	ldi	r23, 0x23	; 35
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	32 e0       	ldi	r19, 0x02	; 2
    40b0:	40 e0       	ldi	r20, 0x00	; 0
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <writeFile>
	nop();
    40b8:	00 00       	nop
}
    40ba:	df 91       	pop	r29
    40bc:	cf 91       	pop	r28
    40be:	08 95       	ret

000040c0 <__vector_43>:

//interrupt service routine for handling received data over radio. Gets called when data received by the mote. Has cases for synching right now.
ISR(PORTE_INT0_vect){
    40c0:	1f 92       	push	r1
    40c2:	0f 92       	push	r0
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	0f 92       	push	r0
    40c8:	0b b6       	in	r0, 0x3b	; 59
    40ca:	0f 92       	push	r0
    40cc:	11 24       	eor	r1, r1
    40ce:	2f 93       	push	r18
    40d0:	3f 93       	push	r19
    40d2:	4f 93       	push	r20
    40d4:	5f 93       	push	r21
    40d6:	6f 93       	push	r22
    40d8:	7f 93       	push	r23
    40da:	8f 93       	push	r24
    40dc:	9f 93       	push	r25
    40de:	af 93       	push	r26
    40e0:	bf 93       	push	r27
    40e2:	ef 93       	push	r30
    40e4:	ff 93       	push	r31
	
	chb_rx_data_t* msg = NULL;
	switch (RadioMonitorMode) {
    40e6:	80 91 5e 40 	lds	r24, 0x405E
    40ea:	81 30       	cpi	r24, 0x01	; 1
    40ec:	21 f0       	breq	.+8      	; 0x40f6 <__vector_43+0x36>
    40ee:	82 30       	cpi	r24, 0x02	; 2
    40f0:	09 f0       	breq	.+2      	; 0x40f4 <__vector_43+0x34>
    40f2:	72 c0       	rjmp	.+228    	; 0x41d8 <__vector_43+0x118>
    40f4:	55 c0       	rjmp	.+170    	; 0x41a0 <__vector_43+0xe0>
		//case for reading sensor data - done by basestation
		case DATA_GATHERING:
			//check contents of the message first and if it is a synch message, increment MotesReadyToSynch variable
			chb_read(msg);
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	0e 94 ed 16 	call	0x2dda	; 0x2dda <chb_read>
			if(!strncmp((const char*)(msg->data),"reset",5)){
    40fe:	85 e0       	ldi	r24, 0x05	; 5
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	6e e1       	ldi	r22, 0x1E	; 30
    4104:	70 e2       	ldi	r23, 0x20	; 32
    4106:	45 e0       	ldi	r20, 0x05	; 5
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	0e 94 12 3b 	call	0x7624	; 0x7624 <strncmp>
    410e:	28 2f       	mov	r18, r24
    4110:	39 2f       	mov	r19, r25
    4112:	21 15       	cp	r18, r1
    4114:	31 05       	cpc	r19, r1
    4116:	51 f4       	brne	.+20     	; 0x412c <__vector_43+0x6c>
				MotesReadyToSynch++;
    4118:	80 91 78 50 	lds	r24, 0x5078
    411c:	90 91 79 50 	lds	r25, 0x5079
    4120:	01 96       	adiw	r24, 0x01	; 1
    4122:	80 93 78 50 	sts	0x5078, r24
    4126:	90 93 79 50 	sts	0x5079, r25
    412a:	56 c0       	rjmp	.+172    	; 0x41d8 <__vector_43+0x118>
    412c:	e5 e0       	ldi	r30, 0x05	; 5
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	af ed       	ldi	r26, 0xDF	; 223
    4132:	b3 e2       	ldi	r27, 0x23	; 35
			}
			//otherwise, store the message contents in the FRAM buffer
			else{		
				for(uint32_t i=0;i<128;i++)	FRAMReadBuffer[i] = msg->data[i];		//copy the message to the FRAM buffer	
    4134:	81 91       	ld	r24, Z+
    4136:	8d 93       	st	X+, r24
    4138:	e5 38       	cpi	r30, 0x85	; 133
    413a:	f1 05       	cpc	r31, r1
    413c:	d9 f7       	brne	.-10     	; 0x4134 <__vector_43+0x74>
				StartOfFreeSpace += 128;	//increment start of free space in FRAM buffer
    413e:	80 91 c2 50 	lds	r24, 0x50C2
    4142:	90 91 c3 50 	lds	r25, 0x50C3
    4146:	a0 91 c4 50 	lds	r26, 0x50C4
    414a:	b0 91 c5 50 	lds	r27, 0x50C5
    414e:	80 58       	subi	r24, 0x80	; 128
    4150:	9f 4f       	sbci	r25, 0xFF	; 255
    4152:	af 4f       	sbci	r26, 0xFF	; 255
    4154:	bf 4f       	sbci	r27, 0xFF	; 255
    4156:	80 93 c2 50 	sts	0x50C2, r24
    415a:	90 93 c3 50 	sts	0x50C3, r25
    415e:	a0 93 c4 50 	sts	0x50C4, r26
    4162:	b0 93 c5 50 	sts	0x50C5, r27
			//wrap around to the start of the buffer (making circular buffer). This should be avoided as data in the buffer will be overwritten (i.e. lost).
				if(StartOfFreeSpace+128 >= FR_READ_BUFFER_SIZE) StartOfFreeSpace = 0;
    4166:	80 91 c2 50 	lds	r24, 0x50C2
    416a:	90 91 c3 50 	lds	r25, 0x50C3
    416e:	a0 91 c4 50 	lds	r26, 0x50C4
    4172:	b0 91 c5 50 	lds	r27, 0x50C5
    4176:	80 58       	subi	r24, 0x80	; 128
    4178:	9f 4f       	sbci	r25, 0xFF	; 255
    417a:	af 4f       	sbci	r26, 0xFF	; 255
    417c:	bf 4f       	sbci	r27, 0xFF	; 255
    417e:	81 37       	cpi	r24, 0x71	; 113
    4180:	2c e1       	ldi	r18, 0x1C	; 28
    4182:	92 07       	cpc	r25, r18
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	a2 07       	cpc	r26, r18
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	b2 07       	cpc	r27, r18
    418c:	28 f1       	brcs	.+74     	; 0x41d8 <__vector_43+0x118>
    418e:	10 92 c2 50 	sts	0x50C2, r1
    4192:	10 92 c3 50 	sts	0x50C3, r1
    4196:	10 92 c4 50 	sts	0x50C4, r1
    419a:	10 92 c5 50 	sts	0x50C5, r1
    419e:	1c c0       	rjmp	.+56     	; 0x41d8 <__vector_43+0x118>
			}			
			break;
		//case for synching sampling with basestation
		case TIME_SYNCH:
			chb_read(msg);
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0e 94 ed 16 	call	0x2dda	; 0x2dda <chb_read>
			if(!strncmp((const char*)(msg->data),"start sampling",14)){	//if basestation synch response message received, do the following
    41a8:	85 e0       	ldi	r24, 0x05	; 5
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	64 e2       	ldi	r22, 0x24	; 36
    41ae:	70 e2       	ldi	r23, 0x20	; 32
    41b0:	4e e0       	ldi	r20, 0x0E	; 14
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	0e 94 12 3b 	call	0x7624	; 0x7624 <strncmp>
    41b8:	28 2f       	mov	r18, r24
    41ba:	39 2f       	mov	r19, r25
    41bc:	21 15       	cp	r18, r1
    41be:	31 05       	cpc	r19, r1
    41c0:	59 f4       	brne	.+22     	; 0x41d8 <__vector_43+0x118>
				RadioMonitorMode = SYNCHED;
    41c2:	83 e0       	ldi	r24, 0x03	; 3
    41c4:	80 93 5e 40 	sts	0x405E, r24
				TCD1.CTRLA = TC_CLKSEL_EVCH1_gc;	//restart the synch timers
    41c8:	89 e0       	ldi	r24, 0x09	; 9
    41ca:	80 93 40 09 	sts	0x0940, r24
				TCC1.CTRLA = 0x01;  
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	80 93 40 08 	sts	0x0840, r24
				ADC_Resume_Sampling();	//resume sampling with the adc
    41d4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ADC_Resume_Sampling>
			}
			break;
		default:
			break;
	}
}
    41d8:	ff 91       	pop	r31
    41da:	ef 91       	pop	r30
    41dc:	bf 91       	pop	r27
    41de:	af 91       	pop	r26
    41e0:	9f 91       	pop	r25
    41e2:	8f 91       	pop	r24
    41e4:	7f 91       	pop	r23
    41e6:	6f 91       	pop	r22
    41e8:	5f 91       	pop	r21
    41ea:	4f 91       	pop	r20
    41ec:	3f 91       	pop	r19
    41ee:	2f 91       	pop	r18
    41f0:	0f 90       	pop	r0
    41f2:	0b be       	out	0x3b, r0	; 59
    41f4:	0f 90       	pop	r0
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	0f 90       	pop	r0
    41fa:	1f 90       	pop	r1
    41fc:	18 95       	reti

000041fe <DeciToString>:

void DeciToString(int32_t* DecimalArray, uint32_t length, char* ReturnString){
    41fe:	2f 92       	push	r2
    4200:	3f 92       	push	r3
    4202:	4f 92       	push	r4
    4204:	5f 92       	push	r5
    4206:	6f 92       	push	r6
    4208:	7f 92       	push	r7
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	64 97       	sbiw	r28, 0x14	; 20
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	2a 01       	movw	r4, r20
    422e:	3b 01       	movw	r6, r22
    4230:	89 01       	movw	r16, r18
	char b[20];
	//int written;
	uint32_t i;
	ReturnString[0] = 0;
    4232:	f9 01       	movw	r30, r18
    4234:	10 82       	st	Z, r1
	for(i=0;i<length;i++){
    4236:	41 15       	cp	r20, r1
    4238:	51 05       	cpc	r21, r1
    423a:	61 05       	cpc	r22, r1
    423c:	71 05       	cpc	r23, r1
    423e:	09 f4       	brne	.+2      	; 0x4242 <DeciToString+0x44>
    4240:	4d c0       	rjmp	.+154    	; 0x42dc <DeciToString+0xde>
    4242:	88 2e       	mov	r8, r24
    4244:	99 2e       	mov	r9, r25
    4246:	cc 24       	eor	r12, r12
    4248:	dd 24       	eor	r13, r13
    424a:	76 01       	movw	r14, r12
		//written = sprintf(b,"%ld",DecimalArray[i]);
		sprintf(b,"%ld",DecimalArray[i]);
    424c:	5e 01       	movw	r10, r28
    424e:	08 94       	sec
    4250:	a1 1c       	adc	r10, r1
    4252:	b1 1c       	adc	r11, r1
    4254:	0f 2e       	mov	r0, r31
    4256:	f3 e3       	ldi	r31, 0x33	; 51
    4258:	2f 2e       	mov	r2, r31
    425a:	f0 e2       	ldi	r31, 0x20	; 32
    425c:	3f 2e       	mov	r3, r31
    425e:	f0 2d       	mov	r31, r0
    4260:	f4 01       	movw	r30, r8
    4262:	81 91       	ld	r24, Z+
    4264:	91 91       	ld	r25, Z+
    4266:	a1 91       	ld	r26, Z+
    4268:	b1 91       	ld	r27, Z+
    426a:	4f 01       	movw	r8, r30
    426c:	2d b7       	in	r18, 0x3d	; 61
    426e:	3e b7       	in	r19, 0x3e	; 62
    4270:	28 50       	subi	r18, 0x08	; 8
    4272:	30 40       	sbci	r19, 0x00	; 0
    4274:	2d bf       	out	0x3d, r18	; 61
    4276:	3e bf       	out	0x3e, r19	; 62
    4278:	2f 5f       	subi	r18, 0xFF	; 255
    427a:	3f 4f       	sbci	r19, 0xFF	; 255
    427c:	ed b7       	in	r30, 0x3d	; 61
    427e:	fe b7       	in	r31, 0x3e	; 62
    4280:	a1 82       	std	Z+1, r10	; 0x01
    4282:	b2 82       	std	Z+2, r11	; 0x02
    4284:	f9 01       	movw	r30, r18
    4286:	22 82       	std	Z+2, r2	; 0x02
    4288:	33 82       	std	Z+3, r3	; 0x03
    428a:	84 83       	std	Z+4, r24	; 0x04
    428c:	95 83       	std	Z+5, r25	; 0x05
    428e:	a6 83       	std	Z+6, r26	; 0x06
    4290:	b7 83       	std	Z+7, r27	; 0x07
    4292:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <sprintf>
		strcat(ReturnString,b);
    4296:	2d b7       	in	r18, 0x3d	; 61
    4298:	3e b7       	in	r19, 0x3e	; 62
    429a:	28 5f       	subi	r18, 0xF8	; 248
    429c:	3f 4f       	sbci	r19, 0xFF	; 255
    429e:	2d bf       	out	0x3d, r18	; 61
    42a0:	3e bf       	out	0x3e, r19	; 62
    42a2:	c8 01       	movw	r24, r16
    42a4:	b5 01       	movw	r22, r10
    42a6:	0e 94 07 3b 	call	0x760e	; 0x760e <strcat>
		//add a space between each value
		strcat(ReturnString,"\n");
    42aa:	a0 2f       	mov	r26, r16
    42ac:	b1 2f       	mov	r27, r17
    42ae:	fd 01       	movw	r30, r26
    42b0:	01 90       	ld	r0, Z+
    42b2:	00 20       	and	r0, r0
    42b4:	e9 f7       	brne	.-6      	; 0x42b0 <DeciToString+0xb2>
    42b6:	31 97       	sbiw	r30, 0x01	; 1
    42b8:	ea 1b       	sub	r30, r26
    42ba:	fb 0b       	sbc	r31, r27
    42bc:	e0 0f       	add	r30, r16
    42be:	f1 1f       	adc	r31, r17
    42c0:	8a e0       	ldi	r24, 0x0A	; 10
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	80 83       	st	Z, r24
    42c6:	91 83       	std	Z+1, r25	; 0x01
void DeciToString(int32_t* DecimalArray, uint32_t length, char* ReturnString){
	char b[20];
	//int written;
	uint32_t i;
	ReturnString[0] = 0;
	for(i=0;i<length;i++){
    42c8:	08 94       	sec
    42ca:	c1 1c       	adc	r12, r1
    42cc:	d1 1c       	adc	r13, r1
    42ce:	e1 1c       	adc	r14, r1
    42d0:	f1 1c       	adc	r15, r1
    42d2:	c4 14       	cp	r12, r4
    42d4:	d5 04       	cpc	r13, r5
    42d6:	e6 04       	cpc	r14, r6
    42d8:	f7 04       	cpc	r15, r7
    42da:	11 f6       	brne	.-124    	; 0x4260 <DeciToString+0x62>
		sprintf(b,"%ld",DecimalArray[i]);
		strcat(ReturnString,b);
		//add a space between each value
		strcat(ReturnString,"\n");
	}		
    42dc:	64 96       	adiw	r28, 0x14	; 20
    42de:	cd bf       	out	0x3d, r28	; 61
    42e0:	de bf       	out	0x3e, r29	; 62
    42e2:	df 91       	pop	r29
    42e4:	cf 91       	pop	r28
    42e6:	1f 91       	pop	r17
    42e8:	0f 91       	pop	r16
    42ea:	ff 90       	pop	r15
    42ec:	ef 90       	pop	r14
    42ee:	df 90       	pop	r13
    42f0:	cf 90       	pop	r12
    42f2:	bf 90       	pop	r11
    42f4:	af 90       	pop	r10
    42f6:	9f 90       	pop	r9
    42f8:	8f 90       	pop	r8
    42fa:	7f 90       	pop	r7
    42fc:	6f 90       	pop	r6
    42fe:	5f 90       	pop	r5
    4300:	4f 90       	pop	r4
    4302:	3f 90       	pop	r3
    4304:	2f 90       	pop	r2
    4306:	08 95       	ret

00004308 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    4308:	cf 92       	push	r12
    430a:	df 92       	push	r13
    430c:	ef 92       	push	r14
    430e:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    4310:	20 91 7b 50 	lds	r18, 0x507B
    4314:	30 91 7c 50 	lds	r19, 0x507C
    4318:	c0 90 db 23 	lds	r12, 0x23DB
    431c:	d0 90 dc 23 	lds	r13, 0x23DC
    4320:	e0 90 dd 23 	lds	r14, 0x23DD
    4324:	f0 90 de 23 	lds	r15, 0x23DE
    4328:	62 50       	subi	r22, 0x02	; 2
    432a:	70 40       	sbci	r23, 0x00	; 0
    432c:	80 40       	sbci	r24, 0x00	; 0
    432e:	90 40       	sbci	r25, 0x00	; 0
    4330:	40 e0       	ldi	r20, 0x00	; 0
    4332:	50 e0       	ldi	r21, 0x00	; 0
    4334:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	c8 0e       	add	r12, r24
    433e:	d9 1e       	adc	r13, r25
    4340:	ea 1e       	adc	r14, r26
    4342:	fb 1e       	adc	r15, r27
}
    4344:	6c 2d       	mov	r22, r12
    4346:	7d 2d       	mov	r23, r13
    4348:	8e 2d       	mov	r24, r14
    434a:	9f 2d       	mov	r25, r15
    434c:	ff 90       	pop	r15
    434e:	ef 90       	pop	r14
    4350:	df 90       	pop	r13
    4352:	cf 90       	pop	r12
    4354:	08 95       	ret

00004356 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    4356:	3f 92       	push	r3
    4358:	4f 92       	push	r4
    435a:	5f 92       	push	r5
    435c:	6f 92       	push	r6
    435e:	7f 92       	push	r7
    4360:	8f 92       	push	r8
    4362:	9f 92       	push	r9
    4364:	af 92       	push	r10
    4366:	bf 92       	push	r11
    4368:	cf 92       	push	r12
    436a:	df 92       	push	r13
    436c:	ef 92       	push	r14
    436e:	ff 92       	push	r15
    4370:	0f 93       	push	r16
    4372:	1f 93       	push	r17
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	00 d0       	rcall	.+0      	; 0x437a <getSetNextCluster+0x24>
    437a:	0f 92       	push	r0
    437c:	cd b7       	in	r28, 0x3d	; 61
    437e:	de b7       	in	r29, 0x3e	; 62
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	34 2e       	mov	r3, r20
    4386:	09 83       	std	Y+1, r16	; 0x01
    4388:	1a 83       	std	Y+2, r17	; 0x02
    438a:	2b 83       	std	Y+3, r18	; 0x03
    438c:	3c 83       	std	Y+4, r19	; 0x04
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
//unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    438e:	80 90 83 50 	lds	r8, 0x5083
    4392:	90 90 84 50 	lds	r9, 0x5084
    4396:	2c 01       	movw	r4, r24
    4398:	3d 01       	movw	r6, r26
    439a:	44 0c       	add	r4, r4
    439c:	55 1c       	adc	r5, r5
    439e:	66 1c       	adc	r6, r6
    43a0:	77 1c       	adc	r7, r7
    43a2:	44 0c       	add	r4, r4
    43a4:	55 1c       	adc	r5, r5
    43a6:	66 1c       	adc	r6, r6
    43a8:	77 1c       	adc	r7, r7
    43aa:	20 91 54 40 	lds	r18, 0x4054
    43ae:	30 91 55 40 	lds	r19, 0x4055
    43b2:	aa 24       	eor	r10, r10
    43b4:	bb 24       	eor	r11, r11
    43b6:	80 91 7d 50 	lds	r24, 0x507D
    43ba:	90 91 7e 50 	lds	r25, 0x507E
    43be:	a0 91 7f 50 	lds	r26, 0x507F
    43c2:	b0 91 80 50 	lds	r27, 0x5080
    43c6:	88 0e       	add	r8, r24
    43c8:	99 1e       	adc	r9, r25
    43ca:	aa 1e       	adc	r10, r26
    43cc:	bb 1e       	adc	r11, r27
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	c3 01       	movw	r24, r6
    43d4:	b2 01       	movw	r22, r4
    43d6:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    43da:	69 01       	movw	r12, r18
    43dc:	7a 01       	movw	r14, r20
    43de:	c8 0c       	add	r12, r8
    43e0:	d9 1c       	adc	r13, r9
    43e2:	ea 1c       	adc	r14, r10
    43e4:	fb 1c       	adc	r15, r11

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    43e6:	00 91 54 40 	lds	r16, 0x4054
    43ea:	10 91 55 40 	lds	r17, 0x4055

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);
    43ee:	c7 01       	movw	r24, r14
    43f0:	b6 01       	movw	r22, r12
    43f2:	46 ed       	ldi	r20, 0xD6	; 214
    43f4:	51 e2       	ldi	r21, 0x21	; 33
    43f6:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    43fa:	98 01       	movw	r18, r16
    43fc:	40 e0       	ldi	r20, 0x00	; 0
    43fe:	50 e0       	ldi	r21, 0x00	; 0
    4400:	c3 01       	movw	r24, r6
    4402:	b2 01       	movw	r22, r4
    4404:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &SDBuffer[FATEntryOffset];
    4408:	6a 52       	subi	r22, 0x2A	; 42
    440a:	7e 4d       	sbci	r23, 0xDE	; 222

if(get_set == GET)
    440c:	33 20       	and	r3, r3
    440e:	41 f4       	brne	.+16     	; 0x4420 <getSetNextCluster+0xca>
  return ((*FATEntryValue) & 0x0fffffff);
    4410:	db 01       	movw	r26, r22
    4412:	0d 91       	ld	r16, X+
    4414:	1d 91       	ld	r17, X+
    4416:	2d 91       	ld	r18, X+
    4418:	3c 91       	ld	r19, X
    441a:	13 97       	sbiw	r26, 0x03	; 3
    441c:	3f 70       	andi	r19, 0x0F	; 15
    441e:	14 c0       	rjmp	.+40     	; 0x4448 <getSetNextCluster+0xf2>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    4420:	89 81       	ldd	r24, Y+1	; 0x01
    4422:	9a 81       	ldd	r25, Y+2	; 0x02
    4424:	ab 81       	ldd	r26, Y+3	; 0x03
    4426:	bc 81       	ldd	r27, Y+4	; 0x04
    4428:	fb 01       	movw	r30, r22
    442a:	80 83       	st	Z, r24
    442c:	91 83       	std	Z+1, r25	; 0x01
    442e:	a2 83       	std	Z+2, r26	; 0x02
    4430:	b3 83       	std	Z+3, r27	; 0x03

SD_write_block(FATEntrySector,SDBuffer,512);
    4432:	c7 01       	movw	r24, r14
    4434:	b6 01       	movw	r22, r12
    4436:	46 ed       	ldi	r20, 0xD6	; 214
    4438:	51 e2       	ldi	r21, 0x21	; 33
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	32 e0       	ldi	r19, 0x02	; 2
    443e:	0e 94 df 2b 	call	0x57be	; 0x57be <SD_write_block>

return (0);
    4442:	00 e0       	ldi	r16, 0x00	; 0
    4444:	10 e0       	ldi	r17, 0x00	; 0
    4446:	98 01       	movw	r18, r16
}
    4448:	60 2f       	mov	r22, r16
    444a:	71 2f       	mov	r23, r17
    444c:	82 2f       	mov	r24, r18
    444e:	93 2f       	mov	r25, r19
    4450:	24 96       	adiw	r28, 0x04	; 4
    4452:	cd bf       	out	0x3d, r28	; 61
    4454:	de bf       	out	0x3e, r29	; 62
    4456:	df 91       	pop	r29
    4458:	cf 91       	pop	r28
    445a:	1f 91       	pop	r17
    445c:	0f 91       	pop	r16
    445e:	ff 90       	pop	r15
    4460:	ef 90       	pop	r14
    4462:	df 90       	pop	r13
    4464:	cf 90       	pop	r12
    4466:	bf 90       	pop	r11
    4468:	af 90       	pop	r10
    446a:	9f 90       	pop	r9
    446c:	8f 90       	pop	r8
    446e:	7f 90       	pop	r7
    4470:	6f 90       	pop	r6
    4472:	5f 90       	pop	r5
    4474:	4f 90       	pop	r4
    4476:	3f 90       	pop	r3
    4478:	08 95       	ret

0000447a <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    447a:	cf 92       	push	r12
    447c:	df 92       	push	r13
    447e:	ef 92       	push	r14
    4480:	ff 92       	push	r15
    4482:	0f 93       	push	r16
    4484:	1f 93       	push	r17
    4486:	cf 93       	push	r28
    4488:	c8 2f       	mov	r28, r24
    448a:	06 2f       	mov	r16, r22
    448c:	69 01       	movw	r12, r18
    448e:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;

SD_read_block(unusedSectors + 1,SDBuffer);
    4490:	80 91 7d 50 	lds	r24, 0x507D
    4494:	90 91 7e 50 	lds	r25, 0x507E
    4498:	a0 91 7f 50 	lds	r26, 0x507F
    449c:	b0 91 80 50 	lds	r27, 0x5080
    44a0:	bc 01       	movw	r22, r24
    44a2:	cd 01       	movw	r24, r26
    44a4:	6f 5f       	subi	r22, 0xFF	; 255
    44a6:	7f 4f       	sbci	r23, 0xFF	; 255
    44a8:	8f 4f       	sbci	r24, 0xFF	; 255
    44aa:	9f 4f       	sbci	r25, 0xFF	; 255
    44ac:	46 ed       	ldi	r20, 0xD6	; 214
    44ae:	51 e2       	ldi	r21, 0x21	; 33
    44b0:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    44b4:	80 91 d6 21 	lds	r24, 0x21D6
    44b8:	90 91 d7 21 	lds	r25, 0x21D7
    44bc:	a0 91 d8 21 	lds	r26, 0x21D8
    44c0:	b0 91 d9 21 	lds	r27, 0x21D9
    44c4:	82 35       	cpi	r24, 0x52	; 82
    44c6:	22 e5       	ldi	r18, 0x52	; 82
    44c8:	92 07       	cpc	r25, r18
    44ca:	21 e6       	ldi	r18, 0x61	; 97
    44cc:	a2 07       	cpc	r26, r18
    44ce:	21 e4       	ldi	r18, 0x41	; 65
    44d0:	b2 07       	cpc	r27, r18
    44d2:	09 f0       	breq	.+2      	; 0x44d6 <getSetFreeCluster+0x5c>
    44d4:	63 c0       	rjmp	.+198    	; 0x459c <getSetFreeCluster+0x122>
    44d6:	80 91 ba 23 	lds	r24, 0x23BA
    44da:	90 91 bb 23 	lds	r25, 0x23BB
    44de:	a0 91 bc 23 	lds	r26, 0x23BC
    44e2:	b0 91 bd 23 	lds	r27, 0x23BD
    44e6:	82 37       	cpi	r24, 0x72	; 114
    44e8:	22 e7       	ldi	r18, 0x72	; 114
    44ea:	92 07       	cpc	r25, r18
    44ec:	21 e4       	ldi	r18, 0x41	; 65
    44ee:	a2 07       	cpc	r26, r18
    44f0:	21 e6       	ldi	r18, 0x61	; 97
    44f2:	b2 07       	cpc	r27, r18
    44f4:	09 f0       	breq	.+2      	; 0x44f8 <getSetFreeCluster+0x7e>
    44f6:	56 c0       	rjmp	.+172    	; 0x45a4 <getSetFreeCluster+0x12a>
    44f8:	80 91 d2 23 	lds	r24, 0x23D2
    44fc:	90 91 d3 23 	lds	r25, 0x23D3
    4500:	a0 91 d4 23 	lds	r26, 0x23D4
    4504:	b0 91 d5 23 	lds	r27, 0x23D5
    4508:	80 30       	cpi	r24, 0x00	; 0
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	92 07       	cpc	r25, r18
    450e:	25 e5       	ldi	r18, 0x55	; 85
    4510:	a2 07       	cpc	r26, r18
    4512:	2a ea       	ldi	r18, 0xAA	; 170
    4514:	b2 07       	cpc	r27, r18
    4516:	09 f0       	breq	.+2      	; 0x451a <getSetFreeCluster+0xa0>
    4518:	49 c0       	rjmp	.+146    	; 0x45ac <getSetFreeCluster+0x132>
  return 0xffffffff;

 if(get_set == GET)
    451a:	00 23       	and	r16, r16
    451c:	a1 f4       	brne	.+40     	; 0x4546 <getSetFreeCluster+0xcc>
 {
   if(totOrNext == TOTAL_FREE)
    451e:	c1 30       	cpi	r28, 0x01	; 1
    4520:	49 f4       	brne	.+18     	; 0x4534 <getSetFreeCluster+0xba>
      return(FS->freeClusterCount);
    4522:	00 91 be 23 	lds	r16, 0x23BE
    4526:	10 91 bf 23 	lds	r17, 0x23BF
    452a:	20 91 c0 23 	lds	r18, 0x23C0
    452e:	30 91 c1 23 	lds	r19, 0x23C1
    4532:	3f c0       	rjmp	.+126    	; 0x45b2 <getSetFreeCluster+0x138>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    4534:	00 91 c2 23 	lds	r16, 0x23C2
    4538:	10 91 c3 23 	lds	r17, 0x23C3
    453c:	20 91 c4 23 	lds	r18, 0x23C4
    4540:	30 91 c5 23 	lds	r19, 0x23C5
    4544:	36 c0       	rjmp	.+108    	; 0x45b2 <getSetFreeCluster+0x138>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    4546:	c1 30       	cpi	r28, 0x01	; 1
    4548:	49 f4       	brne	.+18     	; 0x455c <getSetFreeCluster+0xe2>
      FS->freeClusterCount = FSEntry;
    454a:	c0 92 be 23 	sts	0x23BE, r12
    454e:	d0 92 bf 23 	sts	0x23BF, r13
    4552:	e0 92 c0 23 	sts	0x23C0, r14
    4556:	f0 92 c1 23 	sts	0x23C1, r15
    455a:	08 c0       	rjmp	.+16     	; 0x456c <getSetFreeCluster+0xf2>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    455c:	c0 92 c2 23 	sts	0x23C2, r12
    4560:	d0 92 c3 23 	sts	0x23C3, r13
    4564:	e0 92 c4 23 	sts	0x23C4, r14
    4568:	f0 92 c5 23 	sts	0x23C5, r15
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
    456c:	80 91 7d 50 	lds	r24, 0x507D
    4570:	90 91 7e 50 	lds	r25, 0x507E
    4574:	a0 91 7f 50 	lds	r26, 0x507F
    4578:	b0 91 80 50 	lds	r27, 0x5080
    457c:	bc 01       	movw	r22, r24
    457e:	cd 01       	movw	r24, r26
    4580:	6f 5f       	subi	r22, 0xFF	; 255
    4582:	7f 4f       	sbci	r23, 0xFF	; 255
    4584:	8f 4f       	sbci	r24, 0xFF	; 255
    4586:	9f 4f       	sbci	r25, 0xFF	; 255
    4588:	46 ed       	ldi	r20, 0xD6	; 214
    458a:	51 e2       	ldi	r21, 0x21	; 33
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	32 e0       	ldi	r19, 0x02	; 2
    4590:	0e 94 df 2b 	call	0x57be	; 0x57be <SD_write_block>
 }
 return 0xffffffff;
    4594:	0f ef       	ldi	r16, 0xFF	; 255
    4596:	1f ef       	ldi	r17, 0xFF	; 255
    4598:	98 01       	movw	r18, r16
    459a:	0b c0       	rjmp	.+22     	; 0x45b2 <getSetFreeCluster+0x138>
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;

SD_read_block(unusedSectors + 1,SDBuffer);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
    459c:	0f ef       	ldi	r16, 0xFF	; 255
    459e:	1f ef       	ldi	r17, 0xFF	; 255
    45a0:	98 01       	movw	r18, r16
    45a2:	07 c0       	rjmp	.+14     	; 0x45b2 <getSetFreeCluster+0x138>
    45a4:	0f ef       	ldi	r16, 0xFF	; 255
    45a6:	1f ef       	ldi	r17, 0xFF	; 255
    45a8:	98 01       	movw	r18, r16
    45aa:	03 c0       	rjmp	.+6      	; 0x45b2 <getSetFreeCluster+0x138>
    45ac:	0f ef       	ldi	r16, 0xFF	; 255
    45ae:	1f ef       	ldi	r17, 0xFF	; 255
    45b0:	98 01       	movw	r18, r16
	  FS->nextFreeCluster = FSEntry;
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
 }
 return 0xffffffff;
}
    45b2:	60 2f       	mov	r22, r16
    45b4:	71 2f       	mov	r23, r17
    45b6:	82 2f       	mov	r24, r18
    45b8:	93 2f       	mov	r25, r19
    45ba:	cf 91       	pop	r28
    45bc:	1f 91       	pop	r17
    45be:	0f 91       	pop	r16
    45c0:	ff 90       	pop	r15
    45c2:	ef 90       	pop	r14
    45c4:	df 90       	pop	r13
    45c6:	cf 90       	pop	r12
    45c8:	08 95       	ret

000045ca <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    45ca:	ef 92       	push	r14
    45cc:	ff 92       	push	r15
    45ce:	0f 93       	push	r16
    45d0:	1f 93       	push	r17
    45d2:	cf 93       	push	r28
    45d4:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    45d6:	10 92 7d 50 	sts	0x507D, r1
    45da:	10 92 7e 50 	sts	0x507E, r1
    45de:	10 92 7f 50 	sts	0x507F, r1
    45e2:	10 92 80 50 	sts	0x5080, r1

SD_read_block(0,SDBuffer);
    45e6:	60 e0       	ldi	r22, 0x00	; 0
    45e8:	70 e0       	ldi	r23, 0x00	; 0
    45ea:	cb 01       	movw	r24, r22
    45ec:	46 ed       	ldi	r20, 0xD6	; 214
    45ee:	51 e2       	ldi	r21, 0x21	; 33
    45f0:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>
bpb = (struct BS_Structure *)SDBuffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    45f4:	80 91 d6 21 	lds	r24, 0x21D6
    45f8:	89 3e       	cpi	r24, 0xE9	; 233
    45fa:	31 f1       	breq	.+76     	; 0x4648 <getBootSectorData+0x7e>
    45fc:	8b 3e       	cpi	r24, 0xEB	; 235
    45fe:	21 f1       	breq	.+72     	; 0x4648 <getBootSectorData+0x7e>
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    4600:	80 91 d4 23 	lds	r24, 0x23D4
    4604:	90 91 d5 23 	lds	r25, 0x23D5
    4608:	2a ea       	ldi	r18, 0xAA	; 170
    460a:	85 35       	cpi	r24, 0x55	; 85
    460c:	92 07       	cpc	r25, r18
    460e:	09 f0       	breq	.+2      	; 0x4612 <getBootSectorData+0x48>
    4610:	b7 c0       	rjmp	.+366    	; 0x4780 <getBootSectorData+0x1b6>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    4612:	60 91 9c 23 	lds	r22, 0x239C
    4616:	70 91 9d 23 	lds	r23, 0x239D
    461a:	80 91 9e 23 	lds	r24, 0x239E
    461e:	90 91 9f 23 	lds	r25, 0x239F
    4622:	60 93 7d 50 	sts	0x507D, r22
    4626:	70 93 7e 50 	sts	0x507E, r23
    462a:	80 93 7f 50 	sts	0x507F, r24
    462e:	90 93 80 50 	sts	0x5080, r25
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
    4632:	46 ed       	ldi	r20, 0xD6	; 214
    4634:	51 e2       	ldi	r21, 0x21	; 33
    4636:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    463a:	80 91 d6 21 	lds	r24, 0x21D6
    463e:	89 3e       	cpi	r24, 0xE9	; 233
    4640:	19 f0       	breq	.+6      	; 0x4648 <getBootSectorData+0x7e>
    4642:	8b 3e       	cpi	r24, 0xEB	; 235
    4644:	09 f0       	breq	.+2      	; 0x4648 <getBootSectorData+0x7e>
    4646:	9e c0       	rjmp	.+316    	; 0x4784 <getBootSectorData+0x1ba>
}

bytesPerSector = bpb->bytesPerSector;
    4648:	80 91 e1 21 	lds	r24, 0x21E1
    464c:	90 91 e2 21 	lds	r25, 0x21E2
    4650:	80 93 54 40 	sts	0x4054, r24
    4654:	90 93 55 40 	sts	0x4055, r25
sectorPerCluster = bpb->sectorPerCluster;
    4658:	80 91 e3 21 	lds	r24, 0x21E3
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	80 93 7b 50 	sts	0x507B, r24
    4662:	90 93 7c 50 	sts	0x507C, r25
reservedSectorCount = bpb->reservedSectorCount;
    4666:	e0 90 e4 21 	lds	r14, 0x21E4
    466a:	f0 90 e5 21 	lds	r15, 0x21E5
    466e:	e0 92 83 50 	sts	0x5083, r14
    4672:	f0 92 84 50 	sts	0x5084, r15
rootCluster = bpb->rootCluster;
    4676:	80 91 02 22 	lds	r24, 0x2202
    467a:	90 91 03 22 	lds	r25, 0x2203
    467e:	a0 91 04 22 	lds	r26, 0x2204
    4682:	b0 91 05 22 	lds	r27, 0x2205
    4686:	80 93 5f 40 	sts	0x405F, r24
    468a:	90 93 60 40 	sts	0x4060, r25
    468e:	a0 93 61 40 	sts	0x4061, r26
    4692:	b0 93 62 40 	sts	0x4062, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    4696:	c0 91 83 50 	lds	r28, 0x5083
    469a:	d0 91 84 50 	lds	r29, 0x5084
    469e:	60 91 e6 21 	lds	r22, 0x21E6
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	20 91 fa 21 	lds	r18, 0x21FA
    46ac:	30 91 fb 21 	lds	r19, 0x21FB
    46b0:	40 91 fc 21 	lds	r20, 0x21FC
    46b4:	50 91 fd 21 	lds	r21, 0x21FD
    46b8:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    46bc:	8b 01       	movw	r16, r22
    46be:	9c 01       	movw	r18, r24
    46c0:	ae 01       	movw	r20, r28
    46c2:	60 e0       	ldi	r22, 0x00	; 0
    46c4:	70 e0       	ldi	r23, 0x00	; 0
    46c6:	80 91 f2 21 	lds	r24, 0x21F2
    46ca:	90 91 f3 21 	lds	r25, 0x21F3
    46ce:	a0 91 f4 21 	lds	r26, 0x21F4
    46d2:	b0 91 f5 21 	lds	r27, 0x21F5
    46d6:	84 0f       	add	r24, r20
    46d8:	95 1f       	adc	r25, r21
    46da:	a6 1f       	adc	r26, r22
    46dc:	b7 1f       	adc	r27, r23
    46de:	80 0f       	add	r24, r16
    46e0:	91 1f       	adc	r25, r17
    46e2:	a2 1f       	adc	r26, r18
    46e4:	b3 1f       	adc	r27, r19
    46e6:	80 93 db 23 	sts	0x23DB, r24
    46ea:	90 93 dc 23 	sts	0x23DC, r25
    46ee:	a0 93 dd 23 	sts	0x23DD, r26
    46f2:	b0 93 de 23 	sts	0x23DE, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    46f6:	e0 91 7b 50 	lds	r30, 0x507B
    46fa:	f0 91 7c 50 	lds	r31, 0x507C
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
    46fe:	c7 01       	movw	r24, r14
    4700:	a0 e0       	ldi	r26, 0x00	; 0
    4702:	b0 e0       	ldi	r27, 0x00	; 0
    4704:	40 91 f6 21 	lds	r20, 0x21F6
    4708:	50 91 f7 21 	lds	r21, 0x21F7
    470c:	60 91 f8 21 	lds	r22, 0x21F8
    4710:	70 91 f9 21 	lds	r23, 0x21F9
    4714:	48 1b       	sub	r20, r24
    4716:	59 0b       	sbc	r21, r25
    4718:	6a 0b       	sbc	r22, r26
    471a:	7b 0b       	sbc	r23, r27
sectorPerCluster = bpb->sectorPerCluster;
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
    471c:	cb 01       	movw	r24, r22
    471e:	ba 01       	movw	r22, r20
    4720:	60 1b       	sub	r22, r16
    4722:	71 0b       	sbc	r23, r17
    4724:	82 0b       	sbc	r24, r18
    4726:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    4728:	9f 01       	movw	r18, r30
    472a:	40 e0       	ldi	r20, 0x00	; 0
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    4732:	20 93 59 40 	sts	0x4059, r18
    4736:	30 93 5a 40 	sts	0x405A, r19
    473a:	40 93 5b 40 	sts	0x405B, r20
    473e:	50 93 5c 40 	sts	0x405C, r21


if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	60 e0       	ldi	r22, 0x00	; 0
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	a9 01       	movw	r20, r18
    474c:	0e 94 3d 22 	call	0x447a	; 0x447a <getSetFreeCluster>
    4750:	ab 01       	movw	r20, r22
    4752:	bc 01       	movw	r22, r24
    4754:	80 91 59 40 	lds	r24, 0x4059
    4758:	90 91 5a 40 	lds	r25, 0x405A
    475c:	a0 91 5b 40 	lds	r26, 0x405B
    4760:	b0 91 5c 40 	lds	r27, 0x405C
    4764:	84 17       	cp	r24, r20
    4766:	95 07       	cpc	r25, r21
    4768:	a6 07       	cpc	r26, r22
    476a:	b7 07       	cpc	r27, r23
    476c:	20 f4       	brcc	.+8      	; 0x4776 <getBootSectorData+0x1ac>
     freeClusterCountUpdated = 0;
    476e:	10 92 c7 50 	sts	0x50C7, r1
else
	 freeClusterCountUpdated = 1;
return 0;
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	08 c0       	rjmp	.+16     	; 0x4786 <getBootSectorData+0x1bc>


if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	80 93 c7 50 	sts	0x50C7, r24
return 0;
    477c:	80 e0       	ldi	r24, 0x00	; 0
    477e:	03 c0       	rjmp	.+6      	; 0x4786 <getBootSectorData+0x1bc>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    4780:	81 e0       	ldi	r24, 0x01	; 1
    4782:	01 c0       	rjmp	.+2      	; 0x4786 <getBootSectorData+0x1bc>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    4784:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
    4786:	df 91       	pop	r29
    4788:	cf 91       	pop	r28
    478a:	1f 91       	pop	r17
    478c:	0f 91       	pop	r16
    478e:	ff 90       	pop	r15
    4790:	ef 90       	pop	r14
    4792:	08 95       	ret

00004794 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    4794:	0f 93       	push	r16
    4796:	1f 93       	push	r17
    4798:	cf 93       	push	r28
    479a:	df 93       	push	r29
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	2b 97       	sbiw	r28, 0x0b	; 11
    47a2:	cd bf       	out	0x3d, r28	; 61
    47a4:	de bf       	out	0x3e, r29	; 62
    47a6:	78 2f       	mov	r23, r24
    47a8:	69 2f       	mov	r22, r25
unsigned char fileNameFAT[11];
unsigned char j, k;

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
    47aa:	e8 2f       	mov	r30, r24
    47ac:	f9 2f       	mov	r31, r25
    47ae:	df 01       	movw	r26, r30
    47b0:	0d 90       	ld	r0, X+
    47b2:	00 20       	and	r0, r0
    47b4:	e9 f7       	brne	.-6      	; 0x47b0 <convertFileName+0x1c>
    47b6:	11 97       	sbiw	r26, 0x01	; 1
    47b8:	ae 1b       	sub	r26, r30
    47ba:	bf 0b       	sbc	r27, r31
    47bc:	a0 31       	cpi	r26, 0x10	; 16
    47be:	b1 05       	cpc	r27, r1
    47c0:	08 f0       	brcs	.+2      	; 0x47c4 <convertFileName+0x30>
    47c2:	9c c0       	rjmp	.+312    	; 0x48fc <convertFileName+0x168>
    47c4:	28 2f       	mov	r18, r24
    47c6:	39 2f       	mov	r19, r25
    47c8:	03 eb       	ldi	r16, 0xB3	; 179
    47ca:	10 e5       	ldi	r17, 0x50	; 80
    47cc:	a8 01       	movw	r20, r16
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	07 c0       	rjmp	.+14     	; 0x47e2 <convertFileName+0x4e>
int i=0;
for(; i < strlen((const char*)fileName); i++){
	Filename[i] = fileName[i];
    47d4:	d9 01       	movw	r26, r18
    47d6:	ed 91       	ld	r30, X+
    47d8:	9d 01       	movw	r18, r26
    47da:	da 01       	movw	r26, r20
    47dc:	ed 93       	st	X+, r30
    47de:	ad 01       	movw	r20, r26

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
int i=0;
for(; i < strlen((const char*)fileName); i++){
    47e0:	01 96       	adiw	r24, 0x01	; 1
    47e2:	a7 2f       	mov	r26, r23
    47e4:	b6 2f       	mov	r27, r22
    47e6:	fd 01       	movw	r30, r26
    47e8:	01 90       	ld	r0, Z+
    47ea:	00 20       	and	r0, r0
    47ec:	e9 f7       	brne	.-6      	; 0x47e8 <convertFileName+0x54>
    47ee:	31 97       	sbiw	r30, 0x01	; 1
    47f0:	ea 1b       	sub	r30, r26
    47f2:	fb 0b       	sbc	r31, r27
    47f4:	8e 17       	cp	r24, r30
    47f6:	9f 07       	cpc	r25, r31
    47f8:	68 f3       	brcs	.-38     	; 0x47d4 <convertFileName+0x40>
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';
    47fa:	8f 30       	cpi	r24, 0x0F	; 15
    47fc:	91 05       	cpc	r25, r1
    47fe:	54 f4       	brge	.+20     	; 0x4814 <convertFileName+0x80>
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    4800:	fc 01       	movw	r30, r24
    4802:	ed 54       	subi	r30, 0x4D	; 77
    4804:	ff 4a       	sbci	r31, 0xAF	; 175
    4806:	82 ec       	ldi	r24, 0xC2	; 194
    4808:	90 e5       	ldi	r25, 0x50	; 80
if(strlen((const char*)fileName) > 15) return 1;
int i=0;
for(; i < strlen((const char*)fileName); i++){
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';
    480a:	20 e2       	ldi	r18, 0x20	; 32
    480c:	21 93       	st	Z+, r18
    480e:	e8 17       	cp	r30, r24
    4810:	f9 07       	cpc	r31, r25
    4812:	e1 f7       	brne	.-8      	; 0x480c <convertFileName+0x78>


for(j=0; j<12; j++)
if(Filename[j] == '.') break;
    4814:	80 91 b3 50 	lds	r24, 0x50B3
    4818:	8e 32       	cpi	r24, 0x2E	; 46
    481a:	91 f0       	breq	.+36     	; 0x4840 <convertFileName+0xac>
    481c:	e4 eb       	ldi	r30, 0xB4	; 180
    481e:	f0 e5       	ldi	r31, 0x50	; 80
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
    4820:	21 e0       	ldi	r18, 0x01	; 1
if(Filename[j] == '.') break;
    4822:	81 91       	ld	r24, Z+
    4824:	8e 32       	cpi	r24, 0x2E	; 46
    4826:	21 f0       	breq	.+8      	; 0x4830 <convertFileName+0x9c>
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
    4828:	2f 5f       	subi	r18, 0xFF	; 255
    482a:	2c 30       	cpi	r18, 0x0C	; 12
    482c:	d1 f7       	brne	.-12     	; 0x4822 <convertFileName+0x8e>
    482e:	05 c0       	rjmp	.+10     	; 0x483a <convertFileName+0xa6>
if(Filename[j] == '.') break;

if(j>8 && j<12) {//Invalid fileName
    4830:	82 2f       	mov	r24, r18
    4832:	89 50       	subi	r24, 0x09	; 9
    4834:	83 30       	cpi	r24, 0x03	; 3
    4836:	08 f4       	brcc	.+2      	; 0x483a <convertFileName+0xa6>
    4838:	63 c0       	rjmp	.+198    	; 0x4900 <convertFileName+0x16c>
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    483a:	22 23       	and	r18, r18
    483c:	29 f4       	brne	.+10     	; 0x4848 <convertFileName+0xb4>
    483e:	01 c0       	rjmp	.+2      	; 0x4842 <convertFileName+0xae>
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
if(Filename[j] == '.') break;
    4840:	20 e0       	ldi	r18, 0x00	; 0
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    4842:	82 2f       	mov	r24, r18

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    4844:	90 e2       	ldi	r25, 0x20	; 32
    4846:	10 c0       	rjmp	.+32     	; 0x4868 <convertFileName+0xd4>

if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    4848:	de 01       	movw	r26, r28
    484a:	11 96       	adiw	r26, 0x01	; 1
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    484c:	82 2f       	mov	r24, r18
    484e:	81 50       	subi	r24, 0x01	; 1
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	8c 54       	subi	r24, 0x4C	; 76
    4854:	9f 4a       	sbci	r25, 0xAF	; 175
    4856:	f8 01       	movw	r30, r16
if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];
    4858:	31 91       	ld	r19, Z+
    485a:	3d 93       	st	X+, r19

if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    485c:	e8 17       	cp	r30, r24
    485e:	f9 07       	cpc	r31, r25
    4860:	d9 f7       	brne	.-10     	; 0x4858 <convertFileName+0xc4>
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    4862:	28 30       	cpi	r18, 0x08	; 8
    4864:	70 f3       	brcs	.-36     	; 0x4842 <convertFileName+0xae>
    4866:	0a c0       	rjmp	.+20     	; 0x487c <convertFileName+0xe8>
  fileNameFAT[k] = ' ';
    4868:	e1 e0       	ldi	r30, 0x01	; 1
    486a:	f0 e0       	ldi	r31, 0x00	; 0
    486c:	ec 0f       	add	r30, r28
    486e:	fd 1f       	adc	r31, r29
    4870:	e8 0f       	add	r30, r24
    4872:	f1 1d       	adc	r31, r1
    4874:	90 83       	st	Z, r25
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    4876:	8f 5f       	subi	r24, 0xFF	; 255
    4878:	88 30       	cpi	r24, 0x08	; 8
    487a:	b0 f3       	brcs	.-20     	; 0x4868 <convertFileName+0xd4>
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
    487c:	2c 30       	cpi	r18, 0x0C	; 12
    487e:	09 f0       	breq	.+2      	; 0x4882 <convertFileName+0xee>
    4880:	2f 5f       	subi	r18, 0xFF	; 255
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    4882:	38 e0       	ldi	r19, 0x08	; 8
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    4884:	83 eb       	ldi	r24, 0xB3	; 179
    4886:	90 e5       	ldi	r25, 0x50	; 80
    4888:	fc 01       	movw	r30, r24
    488a:	e2 0f       	add	r30, r18
    488c:	f1 1d       	adc	r31, r1
    488e:	40 81       	ld	r20, Z
    4890:	44 23       	and	r20, r20
    4892:	19 f4       	brne	.+6      	; 0x489a <convertFileName+0x106>
    fileNameFAT[k] = Filename[j++];
  else //filling extension trail with blanks
    while(k<11)
    4894:	3b 30       	cpi	r19, 0x0B	; 11
    4896:	50 f0       	brcs	.+20     	; 0x48ac <convertFileName+0x118>
    4898:	15 c0       	rjmp	.+42     	; 0x48c4 <convertFileName+0x130>

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    fileNameFAT[k] = Filename[j++];
    489a:	e1 e0       	ldi	r30, 0x01	; 1
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	ec 0f       	add	r30, r28
    48a0:	fd 1f       	adc	r31, r29
    48a2:	e3 0f       	add	r30, r19
    48a4:	f1 1d       	adc	r31, r1
    48a6:	40 83       	st	Z, r20
    48a8:	2f 5f       	subi	r18, 0xFF	; 255
    48aa:	0c c0       	rjmp	.+24     	; 0x48c4 <convertFileName+0x130>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    48ac:	80 e2       	ldi	r24, 0x20	; 32
    48ae:	e1 e0       	ldi	r30, 0x01	; 1
    48b0:	f0 e0       	ldi	r31, 0x00	; 0
    48b2:	ec 0f       	add	r30, r28
    48b4:	fd 1f       	adc	r31, r29
    48b6:	e3 0f       	add	r30, r19
    48b8:	f1 1d       	adc	r31, r1
    48ba:	80 83       	st	Z, r24
    48bc:	3f 5f       	subi	r19, 0xFF	; 255
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    fileNameFAT[k] = Filename[j++];
  else //filling extension trail with blanks
    while(k<11)
    48be:	3b 30       	cpi	r19, 0x0B	; 11
    48c0:	b1 f7       	brne	.-20     	; 0x48ae <convertFileName+0x11a>
    48c2:	03 c0       	rjmp	.+6      	; 0x48ca <convertFileName+0x136>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
    48c4:	3f 5f       	subi	r19, 0xFF	; 255
    48c6:	3b 30       	cpi	r19, 0x0B	; 11
    48c8:	f8 f2       	brcs	.-66     	; 0x4888 <convertFileName+0xf4>
    48ca:	de 01       	movw	r26, r28
    48cc:	11 96       	adiw	r26, 0x01	; 1
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    48ce:	ce 01       	movw	r24, r28
    48d0:	0c 96       	adiw	r24, 0x0c	; 12
    48d2:	fd 01       	movw	r30, r26
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    48d4:	20 81       	ld	r18, Z
    48d6:	32 2f       	mov	r19, r18
    48d8:	31 56       	subi	r19, 0x61	; 97
    48da:	3a 31       	cpi	r19, 0x1A	; 26
    48dc:	10 f4       	brcc	.+4      	; 0x48e2 <convertFileName+0x14e>
    fileNameFAT[j] -= 0x20;
    48de:	20 52       	subi	r18, 0x20	; 32
    48e0:	20 83       	st	Z, r18
    48e2:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    48e4:	e8 17       	cp	r30, r24
    48e6:	f9 07       	cpc	r31, r25
    48e8:	a9 f7       	brne	.-22     	; 0x48d4 <convertFileName+0x140>
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  Filename[j] = fileNameFAT[j];
    48ea:	2d 91       	ld	r18, X+
    48ec:	f8 01       	movw	r30, r16
    48ee:	21 93       	st	Z+, r18
    48f0:	8f 01       	movw	r16, r30

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    48f2:	a8 17       	cp	r26, r24
    48f4:	b9 07       	cpc	r27, r25
    48f6:	c9 f7       	brne	.-14     	; 0x48ea <convertFileName+0x156>
  Filename[j] = fileNameFAT[j];

return 0;
    48f8:	80 e0       	ldi	r24, 0x00	; 0
    48fa:	03 c0       	rjmp	.+6      	; 0x4902 <convertFileName+0x16e>
unsigned char fileNameFAT[11];
unsigned char j, k;

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	01 c0       	rjmp	.+2      	; 0x4902 <convertFileName+0x16e>

for(j=0; j<12; j++)
if(Filename[j] == '.') break;

if(j>8 && j<12) {//Invalid fileName
	return 1;}
    4900:	81 e0       	ldi	r24, 0x01	; 1

for(j=0; j<11; j++)
  Filename[j] = fileNameFAT[j];

return 0;
}
    4902:	2b 96       	adiw	r28, 0x0b	; 11
    4904:	cd bf       	out	0x3d, r28	; 61
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	1f 91       	pop	r17
    490e:	0f 91       	pop	r16
    4910:	08 95       	ret

00004912 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    4912:	4f 92       	push	r4
    4914:	5f 92       	push	r5
    4916:	6f 92       	push	r6
    4918:	7f 92       	push	r7
    491a:	8f 92       	push	r8
    491c:	9f 92       	push	r9
    491e:	af 92       	push	r10
    4920:	bf 92       	push	r11
    4922:	cf 92       	push	r12
    4924:	df 92       	push	r13
    4926:	ef 92       	push	r14
    4928:	ff 92       	push	r15
    492a:	cf 93       	push	r28
    492c:	df 93       	push	r29
    492e:	2b 01       	movw	r4, r22
    4930:	3c 01       	movw	r6, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    4932:	20 e8       	ldi	r18, 0x80	; 128
    4934:	3f ef       	ldi	r19, 0xFF	; 255
    4936:	4f ef       	ldi	r20, 0xFF	; 255
    4938:	5f ef       	ldi	r21, 0xFF	; 255
    493a:	42 22       	and	r4, r18
    493c:	53 22       	and	r5, r19
    493e:	64 22       	and	r6, r20
    4940:	75 22       	and	r7, r21
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    4942:	80 91 59 40 	lds	r24, 0x4059
    4946:	90 91 5a 40 	lds	r25, 0x405A
    494a:	a0 91 5b 40 	lds	r26, 0x405B
    494e:	b0 91 5c 40 	lds	r27, 0x405C
    4952:	48 16       	cp	r4, r24
    4954:	59 06       	cpc	r5, r25
    4956:	6a 06       	cpc	r6, r26
    4958:	7b 06       	cpc	r7, r27
    495a:	08 f0       	brcs	.+2      	; 0x495e <searchNextFreeCluster+0x4c>
    495c:	77 c0       	rjmp	.+238    	; 0x4a4c <searchNextFreeCluster+0x13a>
    495e:	53 01       	movw	r10, r6
    4960:	42 01       	movw	r8, r4
    4962:	88 0c       	add	r8, r8
    4964:	99 1c       	adc	r9, r9
    4966:	aa 1c       	adc	r10, r10
    4968:	bb 1c       	adc	r11, r11
    496a:	88 0c       	add	r8, r8
    496c:	99 1c       	adc	r9, r9
    496e:	aa 1c       	adc	r10, r10
    4970:	bb 1c       	adc	r11, r11
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
    4972:	c6 ed       	ldi	r28, 0xD6	; 214
    4974:	d1 e2       	ldi	r29, 0x21	; 33
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    4976:	c0 90 83 50 	lds	r12, 0x5083
    497a:	d0 90 84 50 	lds	r13, 0x5084
    497e:	20 91 54 40 	lds	r18, 0x4054
    4982:	30 91 55 40 	lds	r19, 0x4055
    4986:	ee 24       	eor	r14, r14
    4988:	ff 24       	eor	r15, r15
    498a:	80 91 7d 50 	lds	r24, 0x507D
    498e:	90 91 7e 50 	lds	r25, 0x507E
    4992:	a0 91 7f 50 	lds	r26, 0x507F
    4996:	b0 91 80 50 	lds	r27, 0x5080
    499a:	c8 0e       	add	r12, r24
    499c:	d9 1e       	adc	r13, r25
    499e:	ea 1e       	adc	r14, r26
    49a0:	fb 1e       	adc	r15, r27
    49a2:	40 e0       	ldi	r20, 0x00	; 0
    49a4:	50 e0       	ldi	r21, 0x00	; 0
    49a6:	c5 01       	movw	r24, r10
    49a8:	b4 01       	movw	r22, r8
    49aa:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    49ae:	c7 01       	movw	r24, r14
    49b0:	b6 01       	movw	r22, r12
    49b2:	62 0f       	add	r22, r18
    49b4:	73 1f       	adc	r23, r19
    49b6:	84 1f       	adc	r24, r20
    49b8:	95 1f       	adc	r25, r21
      SD_read_block(sector,SDBuffer);
    49ba:	ae 01       	movw	r20, r28
    49bc:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    49c0:	88 81       	ld	r24, Y
    49c2:	99 81       	ldd	r25, Y+1	; 0x01
    49c4:	aa 81       	ldd	r26, Y+2	; 0x02
    49c6:	bb 81       	ldd	r27, Y+3	; 0x03
    49c8:	bf 70       	andi	r27, 0x0F	; 15
    49ca:	00 97       	sbiw	r24, 0x00	; 0
    49cc:	a1 05       	cpc	r26, r1
    49ce:	b1 05       	cpc	r27, r1
    49d0:	99 f0       	breq	.+38     	; 0x49f8 <searchNextFreeCluster+0xe6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    49d2:	21 e0       	ldi	r18, 0x01	; 1
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
    49d4:	e2 2f       	mov	r30, r18
    49d6:	f0 e0       	ldi	r31, 0x00	; 0
    49d8:	ee 0f       	add	r30, r30
    49da:	ff 1f       	adc	r31, r31
    49dc:	ee 0f       	add	r30, r30
    49de:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
    49e0:	ea 52       	subi	r30, 0x2A	; 42
    49e2:	fe 4d       	sbci	r31, 0xDE	; 222
    49e4:	80 81       	ld	r24, Z
    49e6:	91 81       	ldd	r25, Z+1	; 0x01
    49e8:	a2 81       	ldd	r26, Z+2	; 0x02
    49ea:	b3 81       	ldd	r27, Z+3	; 0x03
    49ec:	bf 70       	andi	r27, 0x0F	; 15
    49ee:	00 97       	sbiw	r24, 0x00	; 0
    49f0:	a1 05       	cpc	r26, r1
    49f2:	b1 05       	cpc	r27, r1
    49f4:	39 f4       	brne	.+14     	; 0x4a04 <searchNextFreeCluster+0xf2>
    49f6:	01 c0       	rjmp	.+2      	; 0x49fa <searchNextFreeCluster+0xe8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    49f8:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
    49fa:	42 0e       	add	r4, r18
    49fc:	51 1c       	adc	r5, r1
    49fe:	61 1c       	adc	r6, r1
    4a00:	71 1c       	adc	r7, r1
    4a02:	27 c0       	rjmp	.+78     	; 0x4a52 <searchNextFreeCluster+0x140>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    4a04:	2f 5f       	subi	r18, 0xFF	; 255
    4a06:	32 f7       	brpl	.-52     	; 0x49d4 <searchNextFreeCluster+0xc2>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    4a08:	80 e8       	ldi	r24, 0x80	; 128
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	a0 e0       	ldi	r26, 0x00	; 0
    4a0e:	b0 e0       	ldi	r27, 0x00	; 0
    4a10:	48 0e       	add	r4, r24
    4a12:	59 1e       	adc	r5, r25
    4a14:	6a 1e       	adc	r6, r26
    4a16:	7b 1e       	adc	r7, r27
    4a18:	80 91 59 40 	lds	r24, 0x4059
    4a1c:	90 91 5a 40 	lds	r25, 0x405A
    4a20:	a0 91 5b 40 	lds	r26, 0x405B
    4a24:	b0 91 5c 40 	lds	r27, 0x405C
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	32 e0       	ldi	r19, 0x02	; 2
    4a2c:	40 e0       	ldi	r20, 0x00	; 0
    4a2e:	50 e0       	ldi	r21, 0x00	; 0
    4a30:	82 0e       	add	r8, r18
    4a32:	93 1e       	adc	r9, r19
    4a34:	a4 1e       	adc	r10, r20
    4a36:	b5 1e       	adc	r11, r21
    4a38:	48 16       	cp	r4, r24
    4a3a:	59 06       	cpc	r5, r25
    4a3c:	6a 06       	cpc	r6, r26
    4a3e:	7b 06       	cpc	r7, r27
    4a40:	08 f4       	brcc	.+2      	; 0x4a44 <searchNextFreeCluster+0x132>
    4a42:	99 cf       	rjmp	.-206    	; 0x4976 <searchNextFreeCluster+0x64>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
    4a44:	44 24       	eor	r4, r4
    4a46:	55 24       	eor	r5, r5
    4a48:	32 01       	movw	r6, r4
    4a4a:	03 c0       	rjmp	.+6      	; 0x4a52 <searchNextFreeCluster+0x140>
    4a4c:	44 24       	eor	r4, r4
    4a4e:	55 24       	eor	r5, r5
    4a50:	32 01       	movw	r6, r4
}
    4a52:	64 2d       	mov	r22, r4
    4a54:	75 2d       	mov	r23, r5
    4a56:	86 2d       	mov	r24, r6
    4a58:	97 2d       	mov	r25, r7
    4a5a:	df 91       	pop	r29
    4a5c:	cf 91       	pop	r28
    4a5e:	ff 90       	pop	r15
    4a60:	ef 90       	pop	r14
    4a62:	df 90       	pop	r13
    4a64:	cf 90       	pop	r12
    4a66:	bf 90       	pop	r11
    4a68:	af 90       	pop	r10
    4a6a:	9f 90       	pop	r9
    4a6c:	8f 90       	pop	r8
    4a6e:	7f 90       	pop	r7
    4a70:	6f 90       	pop	r6
    4a72:	5f 90       	pop	r5
    4a74:	4f 90       	pop	r4
    4a76:	08 95       	ret

00004a78 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    4a78:	cf 92       	push	r12
    4a7a:	df 92       	push	r13
    4a7c:	ef 92       	push	r14
    4a7e:	ff 92       	push	r15
    4a80:	cf 93       	push	r28
    4a82:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    4a84:	db 01       	movw	r26, r22
    4a86:	ca 01       	movw	r24, r20
    4a88:	91 70       	andi	r25, 0x01	; 1
    4a8a:	a0 70       	andi	r26, 0x00	; 0
    4a8c:	b0 70       	andi	r27, 0x00	; 0
    4a8e:	00 97       	sbiw	r24, 0x00	; 0
    4a90:	a1 05       	cpc	r26, r1
    4a92:	b1 05       	cpc	r27, r1
    4a94:	51 f4       	brne	.+20     	; 0x4aaa <freeMemoryUpdate+0x32>
    4a96:	03 2e       	mov	r0, r19
    4a98:	39 e0       	ldi	r19, 0x09	; 9
    4a9a:	76 95       	lsr	r23
    4a9c:	67 95       	ror	r22
    4a9e:	57 95       	ror	r21
    4aa0:	47 95       	ror	r20
    4aa2:	3a 95       	dec	r19
    4aa4:	d1 f7       	brne	.-12     	; 0x4a9a <freeMemoryUpdate+0x22>
    4aa6:	30 2d       	mov	r19, r0
    4aa8:	0d c0       	rjmp	.+26     	; 0x4ac4 <freeMemoryUpdate+0x4c>
  else size = (size / 512) +1;
    4aaa:	03 2e       	mov	r0, r19
    4aac:	39 e0       	ldi	r19, 0x09	; 9
    4aae:	76 95       	lsr	r23
    4ab0:	67 95       	ror	r22
    4ab2:	57 95       	ror	r21
    4ab4:	47 95       	ror	r20
    4ab6:	3a 95       	dec	r19
    4ab8:	d1 f7       	brne	.-12     	; 0x4aae <freeMemoryUpdate+0x36>
    4aba:	30 2d       	mov	r19, r0
    4abc:	4f 5f       	subi	r20, 0xFF	; 255
    4abe:	5f 4f       	sbci	r21, 0xFF	; 255
    4ac0:	6f 4f       	sbci	r22, 0xFF	; 255
    4ac2:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
    4ac4:	db 01       	movw	r26, r22
    4ac6:	ca 01       	movw	r24, r20
    4ac8:	87 70       	andi	r24, 0x07	; 7
    4aca:	90 70       	andi	r25, 0x00	; 0
    4acc:	a0 70       	andi	r26, 0x00	; 0
    4ace:	b0 70       	andi	r27, 0x00	; 0
    4ad0:	00 97       	sbiw	r24, 0x00	; 0
    4ad2:	a1 05       	cpc	r26, r1
    4ad4:	b1 05       	cpc	r27, r1
    4ad6:	59 f4       	brne	.+22     	; 0x4aee <freeMemoryUpdate+0x76>
    4ad8:	6a 01       	movw	r12, r20
    4ada:	7b 01       	movw	r14, r22
    4adc:	68 94       	set
    4ade:	12 f8       	bld	r1, 2
    4ae0:	f6 94       	lsr	r15
    4ae2:	e7 94       	ror	r14
    4ae4:	d7 94       	ror	r13
    4ae6:	c7 94       	ror	r12
    4ae8:	16 94       	lsr	r1
    4aea:	d1 f7       	brne	.-12     	; 0x4ae0 <freeMemoryUpdate+0x68>
    4aec:	0f c0       	rjmp	.+30     	; 0x4b0c <freeMemoryUpdate+0x94>
  else size = (size / 8) +1;
    4aee:	6a 01       	movw	r12, r20
    4af0:	7b 01       	movw	r14, r22
    4af2:	68 94       	set
    4af4:	12 f8       	bld	r1, 2
    4af6:	f6 94       	lsr	r15
    4af8:	e7 94       	ror	r14
    4afa:	d7 94       	ror	r13
    4afc:	c7 94       	ror	r12
    4afe:	16 94       	lsr	r1
    4b00:	d1 f7       	brne	.-12     	; 0x4af6 <freeMemoryUpdate+0x7e>
    4b02:	08 94       	sec
    4b04:	c1 1c       	adc	r12, r1
    4b06:	d1 1c       	adc	r13, r1
    4b08:	e1 1c       	adc	r14, r1
    4b0a:	f1 1c       	adc	r15, r1

  if(freeClusterCountUpdated)
    4b0c:	80 91 c7 50 	lds	r24, 0x50C7
    4b10:	88 23       	and	r24, r24
    4b12:	d1 f0       	breq	.+52     	; 0x4b48 <freeMemoryUpdate+0xd0>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	60 e0       	ldi	r22, 0x00	; 0
    4b18:	20 e0       	ldi	r18, 0x00	; 0
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	a9 01       	movw	r20, r18
    4b1e:	0e 94 3d 22 	call	0x447a	; 0x447a <getSetFreeCluster>
	if(flag == ADD)
    4b22:	cc 23       	and	r28, r28
    4b24:	39 f4       	brne	.+14     	; 0x4b34 <freeMemoryUpdate+0xbc>
  	   freeClusters = freeClusters + size;
    4b26:	9b 01       	movw	r18, r22
    4b28:	ac 01       	movw	r20, r24
    4b2a:	2c 0d       	add	r18, r12
    4b2c:	3d 1d       	adc	r19, r13
    4b2e:	4e 1d       	adc	r20, r14
    4b30:	5f 1d       	adc	r21, r15
    4b32:	06 c0       	rjmp	.+12     	; 0x4b40 <freeMemoryUpdate+0xc8>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    4b34:	9b 01       	movw	r18, r22
    4b36:	ac 01       	movw	r20, r24
    4b38:	2c 19       	sub	r18, r12
    4b3a:	3d 09       	sbc	r19, r13
    4b3c:	4e 09       	sbc	r20, r14
    4b3e:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    4b40:	81 e0       	ldi	r24, 0x01	; 1
    4b42:	61 e0       	ldi	r22, 0x01	; 1
    4b44:	0e 94 3d 22 	call	0x447a	; 0x447a <getSetFreeCluster>
  }
}
    4b48:	cf 91       	pop	r28
    4b4a:	ff 90       	pop	r15
    4b4c:	ef 90       	pop	r14
    4b4e:	df 90       	pop	r13
    4b50:	cf 90       	pop	r12
    4b52:	08 95       	ret

00004b54 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    4b54:	2f 92       	push	r2
    4b56:	3f 92       	push	r3
    4b58:	4f 92       	push	r4
    4b5a:	5f 92       	push	r5
    4b5c:	6f 92       	push	r6
    4b5e:	7f 92       	push	r7
    4b60:	8f 92       	push	r8
    4b62:	9f 92       	push	r9
    4b64:	af 92       	push	r10
    4b66:	bf 92       	push	r11
    4b68:	cf 92       	push	r12
    4b6a:	df 92       	push	r13
    4b6c:	ef 92       	push	r14
    4b6e:	ff 92       	push	r15
    4b70:	0f 93       	push	r16
    4b72:	1f 93       	push	r17
    4b74:	cf 93       	push	r28
    4b76:	df 93       	push	r29
    4b78:	cd b7       	in	r28, 0x3d	; 61
    4b7a:	de b7       	in	r29, 0x3e	; 62
    4b7c:	2c 97       	sbiw	r28, 0x0c	; 12
    4b7e:	cd bf       	out	0x3d, r28	; 61
    4b80:	de bf       	out	0x3e, r29	; 62
    4b82:	88 2e       	mov	r8, r24
    4b84:	7b 01       	movw	r14, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    4b86:	80 91 5f 40 	lds	r24, 0x405F
    4b8a:	90 91 60 40 	lds	r25, 0x4060
    4b8e:	a0 91 61 40 	lds	r26, 0x4061
    4b92:	b0 91 62 40 	lds	r27, 0x4062
    4b96:	89 87       	std	Y+9, r24	; 0x09
    4b98:	9a 87       	std	Y+10, r25	; 0x0a
    4b9a:	ab 87       	std	Y+11, r26	; 0x0b
    4b9c:	bc 87       	std	Y+12, r27	; 0x0c
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4b9e:	0f 2e       	mov	r0, r31
    4ba0:	f6 ed       	ldi	r31, 0xD6	; 214
    4ba2:	2f 2e       	mov	r2, r31
    4ba4:	f1 e2       	ldi	r31, 0x21	; 33
    4ba6:	3f 2e       	mov	r3, r31
    4ba8:	f0 2d       	mov	r31, r0
		{
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    4baa:	c8 2c       	mov	r12, r8
    4bac:	ca 94       	dec	r12
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4bae:	d2 2c       	mov	r13, r2
    4bb0:	93 2c       	mov	r9, r3
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    4bb2:	5b 01       	movw	r10, r22
    4bb4:	08 94       	sec
    4bb6:	a1 1c       	adc	r10, r1
    4bb8:	b1 1c       	adc	r11, r1

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    4bba:	69 85       	ldd	r22, Y+9	; 0x09
    4bbc:	7a 85       	ldd	r23, Y+10	; 0x0a
    4bbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bc2:	0e 94 84 21 	call	0x4308	; 0x4308 <getFirstSector>
    4bc6:	6d 83       	std	Y+5, r22	; 0x05
    4bc8:	7e 83       	std	Y+6, r23	; 0x06
    4bca:	8f 83       	std	Y+7, r24	; 0x07
    4bcc:	98 87       	std	Y+8, r25	; 0x08

   for(sector = 0; sector < sectorPerCluster; sector++)
    4bce:	80 91 7b 50 	lds	r24, 0x507B
    4bd2:	90 91 7c 50 	lds	r25, 0x507C
    4bd6:	00 97       	sbiw	r24, 0x00	; 0
    4bd8:	09 f4       	brne	.+2      	; 0x4bdc <findFiles+0x88>
    4bda:	13 c1       	rjmp	.+550    	; 0x4e02 <findFiles+0x2ae>
    4bdc:	44 24       	eor	r4, r4
    4bde:	55 24       	eor	r5, r5
    4be0:	32 01       	movw	r6, r4
    4be2:	1c 2d       	mov	r17, r12
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4be4:	8d 81       	ldd	r24, Y+5	; 0x05
    4be6:	9e 81       	ldd	r25, Y+6	; 0x06
    4be8:	af 81       	ldd	r26, Y+7	; 0x07
    4bea:	b8 85       	ldd	r27, Y+8	; 0x08
    4bec:	84 0d       	add	r24, r4
    4bee:	95 1d       	adc	r25, r5
    4bf0:	a6 1d       	adc	r26, r6
    4bf2:	b7 1d       	adc	r27, r7
    4bf4:	89 83       	std	Y+1, r24	; 0x01
    4bf6:	9a 83       	std	Y+2, r25	; 0x02
    4bf8:	ab 83       	std	Y+3, r26	; 0x03
    4bfa:	bc 83       	std	Y+4, r27	; 0x04
    4bfc:	bc 01       	movw	r22, r24
    4bfe:	cd 01       	movw	r24, r26
    4c00:	4d 2d       	mov	r20, r13
    4c02:	59 2d       	mov	r21, r9
    4c04:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    4c08:	80 91 54 40 	lds	r24, 0x4054
    4c0c:	90 91 55 40 	lds	r25, 0x4055
    4c10:	00 97       	sbiw	r24, 0x00	; 0
    4c12:	09 f4       	brne	.+2      	; 0x4c16 <findFiles+0xc2>
    4c14:	e4 c0       	rjmp	.+456    	; 0x4dde <findFiles+0x28a>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    4c16:	d1 01       	movw	r26, r2
    4c18:	8c 91       	ld	r24, X
    4c1a:	88 23       	and	r24, r24
    4c1c:	09 f4       	brne	.+2      	; 0x4c20 <findFiles+0xcc>
    4c1e:	10 c1       	rjmp	.+544    	; 0x4e40 <findFiles+0x2ec>
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    4c20:	4d 2d       	mov	r20, r13
    4c22:	59 2d       	mov	r21, r9
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	08 c0       	rjmp	.+16     	; 0x4c3a <findFiles+0xe6>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    4c2a:	a9 01       	movw	r20, r18
    4c2c:	4a 52       	subi	r20, 0x2A	; 42
    4c2e:	5e 4d       	sbci	r21, 0xDE	; 222

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    4c30:	fa 01       	movw	r30, r20
    4c32:	80 81       	ld	r24, Z
    4c34:	88 23       	and	r24, r24
    4c36:	09 f4       	brne	.+2      	; 0x4c3a <findFiles+0xe6>
    4c38:	06 c1       	rjmp	.+524    	; 0x4e46 <findFiles+0x2f2>
		{
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    4c3a:	85 3e       	cpi	r24, 0xE5	; 229
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <findFiles+0xec>
    4c3e:	c5 c0       	rjmp	.+394    	; 0x4dca <findFiles+0x276>
    4c40:	da 01       	movw	r26, r20
    4c42:	1b 96       	adiw	r26, 0x0b	; 11
    4c44:	8c 91       	ld	r24, X
    4c46:	1b 97       	sbiw	r26, 0x0b	; 11
    4c48:	8f 30       	cpi	r24, 0x0F	; 15
    4c4a:	09 f4       	brne	.+2      	; 0x4c4e <findFiles+0xfa>
    4c4c:	be c0       	rjmp	.+380    	; 0x4dca <findFiles+0x276>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    4c4e:	12 30       	cpi	r17, 0x02	; 2
    4c50:	08 f0       	brcs	.+2      	; 0x4c54 <findFiles+0x100>
    4c52:	fc c0       	rjmp	.+504    	; 0x4e4c <findFiles+0x2f8>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    4c54:	9c 91       	ld	r25, X
    4c56:	f7 01       	movw	r30, r14
    4c58:	80 81       	ld	r24, Z
    4c5a:	98 17       	cp	r25, r24
    4c5c:	09 f0       	breq	.+2      	; 0x4c60 <findFiles+0x10c>
    4c5e:	b5 c0       	rjmp	.+362    	; 0x4dca <findFiles+0x276>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    4c60:	fa 01       	movw	r30, r20
    4c62:	31 96       	adiw	r30, 0x01	; 1
    4c64:	d5 01       	movw	r26, r10
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	ba 01       	movw	r22, r20
            if(dir->name[j] != fileName[j]) break;
    4c6a:	41 91       	ld	r20, Z+
    4c6c:	9d 91       	ld	r25, X+
    4c6e:	49 17       	cp	r20, r25
    4c70:	31 f4       	brne	.+12     	; 0x4c7e <findFiles+0x12a>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    4c72:	8f 5f       	subi	r24, 0xFF	; 255
    4c74:	8b 30       	cpi	r24, 0x0B	; 11
    4c76:	c9 f7       	brne	.-14     	; 0x4c6a <findFiles+0x116>
    4c78:	8b 01       	movw	r16, r22
    4c7a:	6b 01       	movw	r12, r22
    4c7c:	05 c0       	rjmp	.+10     	; 0x4c88 <findFiles+0x134>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    4c7e:	8b 30       	cpi	r24, 0x0B	; 11
    4c80:	09 f0       	breq	.+2      	; 0x4c84 <findFiles+0x130>
    4c82:	a3 c0       	rjmp	.+326    	; 0x4dca <findFiles+0x276>
    4c84:	8b 01       	movw	r16, r22
    4c86:	6b 01       	movw	r12, r22
			{
			  if(flag == GET_FILE)
    4c88:	f1 e0       	ldi	r31, 0x01	; 1
    4c8a:	8f 16       	cp	r8, r31
    4c8c:	09 f0       	breq	.+2      	; 0x4c90 <findFiles+0x13c>
    4c8e:	41 c0       	rjmp	.+130    	; 0x4d12 <findFiles+0x1be>
              {
			    appendFileSector = firstSector + sector;
    4c90:	89 81       	ldd	r24, Y+1	; 0x01
    4c92:	9a 81       	ldd	r25, Y+2	; 0x02
    4c94:	ab 81       	ldd	r26, Y+3	; 0x03
    4c96:	bc 81       	ldd	r27, Y+4	; 0x04
    4c98:	80 93 c9 50 	sts	0x50C9, r24
    4c9c:	90 93 ca 50 	sts	0x50CA, r25
    4ca0:	a0 93 cb 50 	sts	0x50CB, r26
    4ca4:	b0 93 cc 50 	sts	0x50CC, r27
				appendFileLocation = i;
    4ca8:	c9 01       	movw	r24, r18
    4caa:	a0 e0       	ldi	r26, 0x00	; 0
    4cac:	b0 e0       	ldi	r27, 0x00	; 0
    4cae:	80 93 d7 23 	sts	0x23D7, r24
    4cb2:	90 93 d8 23 	sts	0x23D8, r25
    4cb6:	a0 93 d9 23 	sts	0x23D9, r26
    4cba:	b0 93 da 23 	sts	0x23DA, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    4cbe:	d6 01       	movw	r26, r12
    4cc0:	54 96       	adiw	r26, 0x14	; 20
    4cc2:	4d 91       	ld	r20, X+
    4cc4:	5c 91       	ld	r21, X
    4cc6:	55 97       	sbiw	r26, 0x15	; 21
    4cc8:	60 e0       	ldi	r22, 0x00	; 0
    4cca:	70 e0       	ldi	r23, 0x00	; 0
    4ccc:	ba 01       	movw	r22, r20
    4cce:	55 27       	eor	r21, r21
    4cd0:	44 27       	eor	r20, r20
    4cd2:	5a 96       	adiw	r26, 0x1a	; 26
    4cd4:	8d 91       	ld	r24, X+
    4cd6:	9c 91       	ld	r25, X
    4cd8:	5b 97       	sbiw	r26, 0x1b	; 27
    4cda:	a0 e0       	ldi	r26, 0x00	; 0
    4cdc:	b0 e0       	ldi	r27, 0x00	; 0
    4cde:	84 2b       	or	r24, r20
    4ce0:	95 2b       	or	r25, r21
    4ce2:	a6 2b       	or	r26, r22
    4ce4:	b7 2b       	or	r27, r23
    4ce6:	80 93 87 50 	sts	0x5087, r24
    4cea:	90 93 88 50 	sts	0x5088, r25
    4cee:	a0 93 89 50 	sts	0x5089, r26
    4cf2:	b0 93 8a 50 	sts	0x508A, r27
				fileSize = dir->fileSize;
    4cf6:	f6 01       	movw	r30, r12
    4cf8:	84 8d       	ldd	r24, Z+28	; 0x1c
    4cfa:	95 8d       	ldd	r25, Z+29	; 0x1d
    4cfc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4cfe:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4d00:	80 93 50 40 	sts	0x4050, r24
    4d04:	90 93 51 40 	sts	0x4051, r25
    4d08:	a0 93 52 40 	sts	0x4052, r26
    4d0c:	b0 93 53 40 	sts	0x4053, r27
			    return (dir);
    4d10:	a5 c0       	rjmp	.+330    	; 0x4e5c <findFiles+0x308>
			  }	
			  else    //when flag = DELETE
			  {
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    4d12:	d6 01       	movw	r26, r12
    4d14:	54 96       	adiw	r26, 0x14	; 20
    4d16:	8d 91       	ld	r24, X+
    4d18:	9c 91       	ld	r25, X
    4d1a:	55 97       	sbiw	r26, 0x15	; 21
    4d1c:	a0 e0       	ldi	r26, 0x00	; 0
    4d1e:	b0 e0       	ldi	r27, 0x00	; 0
    4d20:	3c 01       	movw	r6, r24
    4d22:	55 24       	eor	r5, r5
    4d24:	44 24       	eor	r4, r4
    4d26:	f6 01       	movw	r30, r12
    4d28:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d2a:	93 8d       	ldd	r25, Z+27	; 0x1b
    4d2c:	a0 e0       	ldi	r26, 0x00	; 0
    4d2e:	b0 e0       	ldi	r27, 0x00	; 0
    4d30:	48 2a       	or	r4, r24
    4d32:	59 2a       	or	r5, r25
    4d34:	6a 2a       	or	r6, r26
    4d36:	7b 2a       	or	r7, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    4d38:	85 ee       	ldi	r24, 0xE5	; 229
    4d3a:	80 83       	st	Z, r24
				 SD_write_block (firstSector+sector,SDBuffer,512);
    4d3c:	69 81       	ldd	r22, Y+1	; 0x01
    4d3e:	7a 81       	ldd	r23, Y+2	; 0x02
    4d40:	8b 81       	ldd	r24, Y+3	; 0x03
    4d42:	9c 81       	ldd	r25, Y+4	; 0x04
    4d44:	46 ed       	ldi	r20, 0xD6	; 214
    4d46:	51 e2       	ldi	r21, 0x21	; 33
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	32 e0       	ldi	r19, 0x02	; 2
    4d4c:	0e 94 df 2b 	call	0x57be	; 0x57be <SD_write_block>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    4d50:	d6 01       	movw	r26, r12
    4d52:	5c 96       	adiw	r26, 0x1c	; 28
    4d54:	4d 91       	ld	r20, X+
    4d56:	5d 91       	ld	r21, X+
    4d58:	6d 91       	ld	r22, X+
    4d5a:	7c 91       	ld	r23, X
    4d5c:	5f 97       	sbiw	r26, 0x1f	; 31
    4d5e:	80 e0       	ldi	r24, 0x00	; 0
    4d60:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    4d64:	82 e0       	ldi	r24, 0x02	; 2
    4d66:	60 e0       	ldi	r22, 0x00	; 0
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	a9 01       	movw	r20, r18
    4d6e:	0e 94 3d 22 	call	0x447a	; 0x447a <getSetFreeCluster>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
				 if(firstCluster < cluster)
    4d76:	48 16       	cp	r4, r24
    4d78:	59 06       	cpc	r5, r25
    4d7a:	6a 06       	cpc	r6, r26
    4d7c:	7b 06       	cpc	r7, r27
    4d7e:	30 f4       	brcc	.+12     	; 0x4d8c <findFiles+0x238>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    4d80:	82 e0       	ldi	r24, 0x02	; 2
    4d82:	61 e0       	ldi	r22, 0x01	; 1
    4d84:	a3 01       	movw	r20, r6
    4d86:	92 01       	movw	r18, r4
    4d88:	0e 94 3d 22 	call	0x447a	; 0x447a <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    4d8c:	c3 01       	movw	r24, r6
    4d8e:	b2 01       	movw	r22, r4
    4d90:	40 e0       	ldi	r20, 0x00	; 0
    4d92:	00 e0       	ldi	r16, 0x00	; 0
    4d94:	10 e0       	ldi	r17, 0x00	; 0
    4d96:	98 01       	movw	r18, r16
    4d98:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
    4d9c:	6b 01       	movw	r12, r22
    4d9e:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    4da0:	c3 01       	movw	r24, r6
    4da2:	b2 01       	movw	r22, r4
    4da4:	41 e0       	ldi	r20, 0x01	; 1
    4da6:	00 e0       	ldi	r16, 0x00	; 0
    4da8:	10 e0       	ldi	r17, 0x00	; 0
    4daa:	98 01       	movw	r18, r16
    4dac:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    4db0:	b7 ef       	ldi	r27, 0xF7	; 247
    4db2:	cb 16       	cp	r12, r27
    4db4:	bf ef       	ldi	r27, 0xFF	; 255
    4db6:	db 06       	cpc	r13, r27
    4db8:	bf ef       	ldi	r27, 0xFF	; 255
    4dba:	eb 06       	cpc	r14, r27
    4dbc:	bf e0       	ldi	r27, 0x0F	; 15
    4dbe:	fb 06       	cpc	r15, r27
    4dc0:	08 f0       	brcs	.+2      	; 0x4dc4 <findFiles+0x270>
    4dc2:	47 c0       	rjmp	.+142    	; 0x4e52 <findFiles+0x2fe>
					   {//file deleted
						   return 0;}
					firstCluster = nextCluster;
    4dc4:	26 01       	movw	r4, r12
    4dc6:	37 01       	movw	r6, r14
    4dc8:	e1 cf       	rjmp	.-62     	; 0x4d8c <findFiles+0x238>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    4dca:	20 5e       	subi	r18, 0xE0	; 224
    4dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4dce:	80 91 54 40 	lds	r24, 0x4054
    4dd2:	90 91 55 40 	lds	r25, 0x4055
    4dd6:	28 17       	cp	r18, r24
    4dd8:	39 07       	cpc	r19, r25
    4dda:	08 f4       	brcc	.+2      	; 0x4dde <findFiles+0x28a>
    4ddc:	26 cf       	rjmp	.-436    	; 0x4c2a <findFiles+0xd6>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    4dde:	08 94       	sec
    4de0:	41 1c       	adc	r4, r1
    4de2:	51 1c       	adc	r5, r1
    4de4:	61 1c       	adc	r6, r1
    4de6:	71 1c       	adc	r7, r1
    4de8:	80 91 7b 50 	lds	r24, 0x507B
    4dec:	90 91 7c 50 	lds	r25, 0x507C
    4df0:	a0 e0       	ldi	r26, 0x00	; 0
    4df2:	b0 e0       	ldi	r27, 0x00	; 0
    4df4:	48 16       	cp	r4, r24
    4df6:	59 06       	cpc	r5, r25
    4df8:	6a 06       	cpc	r6, r26
    4dfa:	7b 06       	cpc	r7, r27
    4dfc:	08 f4       	brcc	.+2      	; 0x4e00 <findFiles+0x2ac>
    4dfe:	f2 ce       	rjmp	.-540    	; 0x4be4 <findFiles+0x90>
    4e00:	c1 2e       	mov	r12, r17
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    4e02:	69 85       	ldd	r22, Y+9	; 0x09
    4e04:	7a 85       	ldd	r23, Y+10	; 0x0a
    4e06:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e08:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e0a:	40 e0       	ldi	r20, 0x00	; 0
    4e0c:	00 e0       	ldi	r16, 0x00	; 0
    4e0e:	10 e0       	ldi	r17, 0x00	; 0
    4e10:	98 01       	movw	r18, r16
    4e12:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
    4e16:	69 87       	std	Y+9, r22	; 0x09
    4e18:	7a 87       	std	Y+10, r23	; 0x0a
    4e1a:	8b 87       	std	Y+11, r24	; 0x0b
    4e1c:	9c 87       	std	Y+12, r25	; 0x0c

   if(cluster > 0x0ffffff6)
    4e1e:	67 3f       	cpi	r22, 0xF7	; 247
    4e20:	ef ef       	ldi	r30, 0xFF	; 255
    4e22:	7e 07       	cpc	r23, r30
    4e24:	ef ef       	ldi	r30, 0xFF	; 255
    4e26:	8e 07       	cpc	r24, r30
    4e28:	ef e0       	ldi	r30, 0x0F	; 15
    4e2a:	9e 07       	cpc	r25, r30
    4e2c:	a8 f4       	brcc	.+42     	; 0x4e58 <findFiles+0x304>
   	 return 0;
   if(cluster == 0) 
    4e2e:	61 15       	cp	r22, r1
    4e30:	71 05       	cpc	r23, r1
    4e32:	81 05       	cpc	r24, r1
    4e34:	91 05       	cpc	r25, r1
    4e36:	09 f0       	breq	.+2      	; 0x4e3a <findFiles+0x2e6>
    4e38:	c0 ce       	rjmp	.-640    	; 0x4bba <findFiles+0x66>
   {//error in getting cluster
	   return 0;}
    4e3a:	00 e0       	ldi	r16, 0x00	; 0
    4e3c:	10 e0       	ldi	r17, 0x00	; 0
    4e3e:	0e c0       	rjmp	.+28     	; 0x4e5c <findFiles+0x308>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  return 0;   
    4e40:	00 e0       	ldi	r16, 0x00	; 0
    4e42:	10 e0       	ldi	r17, 0x00	; 0
    4e44:	0b c0       	rjmp	.+22     	; 0x4e5c <findFiles+0x308>
    4e46:	00 e0       	ldi	r16, 0x00	; 0
    4e48:	10 e0       	ldi	r17, 0x00	; 0
    4e4a:	08 c0       	rjmp	.+16     	; 0x4e5c <findFiles+0x308>
			  }
            }
          }
          else  //invalid flag
		  {
			  return 0;
    4e4c:	00 e0       	ldi	r16, 0x00	; 0
    4e4e:	10 e0       	ldi	r17, 0x00	; 0
    4e50:	05 c0       	rjmp	.+10     	; 0x4e5c <findFiles+0x308>
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {//file deleted
						   return 0;}
    4e52:	00 e0       	ldi	r16, 0x00	; 0
    4e54:	10 e0       	ldi	r17, 0x00	; 0
    4e56:	02 c0       	rjmp	.+4      	; 0x4e5c <findFiles+0x308>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    4e58:	00 e0       	ldi	r16, 0x00	; 0
    4e5a:	10 e0       	ldi	r17, 0x00	; 0
   if(cluster == 0) 
   {//error in getting cluster
	   return 0;}
 }
return 0;
}
    4e5c:	80 2f       	mov	r24, r16
    4e5e:	91 2f       	mov	r25, r17
    4e60:	2c 96       	adiw	r28, 0x0c	; 12
    4e62:	cd bf       	out	0x3d, r28	; 61
    4e64:	de bf       	out	0x3e, r29	; 62
    4e66:	df 91       	pop	r29
    4e68:	cf 91       	pop	r28
    4e6a:	1f 91       	pop	r17
    4e6c:	0f 91       	pop	r16
    4e6e:	ff 90       	pop	r15
    4e70:	ef 90       	pop	r14
    4e72:	df 90       	pop	r13
    4e74:	cf 90       	pop	r12
    4e76:	bf 90       	pop	r11
    4e78:	af 90       	pop	r10
    4e7a:	9f 90       	pop	r9
    4e7c:	8f 90       	pop	r8
    4e7e:	7f 90       	pop	r7
    4e80:	6f 90       	pop	r6
    4e82:	5f 90       	pop	r5
    4e84:	4f 90       	pop	r4
    4e86:	3f 90       	pop	r3
    4e88:	2f 90       	pop	r2
    4e8a:	08 95       	ret

00004e8c <deleteFile>:
//********************************************************************
void deleteFile (unsigned char *fileName)
{
  unsigned char error;

  error = convertFileName (fileName);
    4e8c:	0e 94 ca 23 	call	0x4794	; 0x4794 <convertFileName>
  if(error) return;
    4e90:	88 23       	and	r24, r24
    4e92:	29 f4       	brne	.+10     	; 0x4e9e <deleteFile+0x12>

  findFiles (DELETE, Filename);
    4e94:	82 e0       	ldi	r24, 0x02	; 2
    4e96:	63 eb       	ldi	r22, 0xB3	; 179
    4e98:	70 e5       	ldi	r23, 0x50	; 80
    4e9a:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <findFiles>
    4e9e:	08 95       	ret

00004ea0 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    4ea0:	4f 92       	push	r4
    4ea2:	5f 92       	push	r5
    4ea4:	6f 92       	push	r6
    4ea6:	7f 92       	push	r7
    4ea8:	af 92       	push	r10
    4eaa:	bf 92       	push	r11
    4eac:	cf 92       	push	r12
    4eae:	df 92       	push	r13
    4eb0:	ef 92       	push	r14
    4eb2:	ff 92       	push	r15
    4eb4:	0f 93       	push	r16
    4eb6:	1f 93       	push	r17
    4eb8:	cf 93       	push	r28
    4eba:	c8 2f       	mov	r28, r24
    4ebc:	cb 01       	movw	r24, r22
unsigned long cluster, firstSector;
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    4ebe:	0e 94 ca 23 	call	0x4794	; 0x4794 <convertFileName>
if(error) return 2;
    4ec2:	88 23       	and	r24, r24
    4ec4:	09 f0       	breq	.+2      	; 0x4ec8 <readFile+0x28>
    4ec6:	57 c0       	rjmp	.+174    	; 0x4f76 <readFile+0xd6>

dir = findFiles (GET_FILE, Filename); //get the file location
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	63 eb       	ldi	r22, 0xB3	; 179
    4ecc:	70 e5       	ldi	r23, 0x50	; 80
    4ece:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <findFiles>
    4ed2:	fc 01       	movw	r30, r24
if(dir == 0) 
    4ed4:	00 97       	sbiw	r24, 0x00	; 0
    4ed6:	31 f4       	brne	.+12     	; 0x4ee4 <readFile+0x44>
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	cc 23       	and	r28, r28
    4edc:	09 f4       	brne	.+2      	; 0x4ee0 <readFile+0x40>
    4ede:	4e c0       	rjmp	.+156    	; 0x4f7c <readFile+0xdc>
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    4ee2:	4c c0       	rjmp	.+152    	; 0x4f7c <readFile+0xdc>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    4ee4:	c1 30       	cpi	r28, 0x01	; 1
    4ee6:	09 f4       	brne	.+2      	; 0x4eea <readFile+0x4a>
    4ee8:	48 c0       	rjmp	.+144    	; 0x4f7a <readFile+0xda>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    4eea:	44 88       	ldd	r4, Z+20	; 0x14
    4eec:	55 88       	ldd	r5, Z+21	; 0x15
    4eee:	66 24       	eor	r6, r6
    4ef0:	77 24       	eor	r7, r7
    4ef2:	32 01       	movw	r6, r4
    4ef4:	55 24       	eor	r5, r5
    4ef6:	44 24       	eor	r4, r4
    4ef8:	82 8d       	ldd	r24, Z+26	; 0x1a
    4efa:	93 8d       	ldd	r25, Z+27	; 0x1b
    4efc:	a0 e0       	ldi	r26, 0x00	; 0
    4efe:	b0 e0       	ldi	r27, 0x00	; 0
    4f00:	48 2a       	or	r4, r24
    4f02:	59 2a       	or	r5, r25
    4f04:	6a 2a       	or	r6, r26
    4f06:	7b 2a       	or	r7, r27
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    4f08:	0f 2e       	mov	r0, r31
    4f0a:	ff ed       	ldi	r31, 0xDF	; 223
    4f0c:	af 2e       	mov	r10, r31
    4f0e:	f3 e2       	ldi	r31, 0x23	; 35
    4f10:	bf 2e       	mov	r11, r31
    4f12:	f0 2d       	mov	r31, r0
//fileSize = dir->fileSize;


while(1)
{
  firstSector = getFirstSector (cluster);
    4f14:	c3 01       	movw	r24, r6
    4f16:	b2 01       	movw	r22, r4
    4f18:	0e 94 84 21 	call	0x4308	; 0x4308 <getFirstSector>
    4f1c:	6b 01       	movw	r12, r22
    4f1e:	7c 01       	movw	r14, r24

  for(j=0; j<sectorPerCluster; j++)
    4f20:	80 91 7b 50 	lds	r24, 0x507B
    4f24:	90 91 7c 50 	lds	r25, 0x507C
    4f28:	00 97       	sbiw	r24, 0x00	; 0
    4f2a:	a1 f0       	breq	.+40     	; 0x4f54 <readFile+0xb4>
    4f2c:	c0 e0       	ldi	r28, 0x00	; 0
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    4f2e:	c7 01       	movw	r24, r14
    4f30:	b6 01       	movw	r22, r12
    4f32:	6c 0f       	add	r22, r28
    4f34:	71 1d       	adc	r23, r1
    4f36:	81 1d       	adc	r24, r1
    4f38:	91 1d       	adc	r25, r1
    4f3a:	a5 01       	movw	r20, r10
    4f3c:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    4f40:	cf 5f       	subi	r28, 0xFF	; 255
    4f42:	80 91 7b 50 	lds	r24, 0x507B
    4f46:	90 91 7c 50 	lds	r25, 0x507C
    4f4a:	2c 2f       	mov	r18, r28
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	28 17       	cp	r18, r24
    4f50:	39 07       	cpc	r19, r25
    4f52:	68 f3       	brcs	.-38     	; 0x4f2e <readFile+0x8e>
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
	*/
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    4f54:	c3 01       	movw	r24, r6
    4f56:	b2 01       	movw	r22, r4
    4f58:	40 e0       	ldi	r20, 0x00	; 0
    4f5a:	00 e0       	ldi	r16, 0x00	; 0
    4f5c:	10 e0       	ldi	r17, 0x00	; 0
    4f5e:	98 01       	movw	r18, r16
    4f60:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
    4f64:	2b 01       	movw	r4, r22
    4f66:	3c 01       	movw	r6, r24
  if(cluster == 0) {//Error in getting cluster
    4f68:	61 15       	cp	r22, r1
    4f6a:	71 05       	cpc	r23, r1
    4f6c:	81 05       	cpc	r24, r1
    4f6e:	91 05       	cpc	r25, r1
    4f70:	89 f6       	brne	.-94     	; 0x4f14 <readFile+0x74>
	  return 0;}
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	03 c0       	rjmp	.+6      	; 0x4f7c <readFile+0xdc>
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    4f76:	82 e0       	ldi	r24, 0x02	; 2
    4f78:	01 c0       	rjmp	.+2      	; 0x4f7c <readFile+0xdc>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {//Error in getting cluster
	  return 0;}
}
return 0;
}
    4f7c:	cf 91       	pop	r28
    4f7e:	1f 91       	pop	r17
    4f80:	0f 91       	pop	r16
    4f82:	ff 90       	pop	r15
    4f84:	ef 90       	pop	r14
    4f86:	df 90       	pop	r13
    4f88:	cf 90       	pop	r12
    4f8a:	bf 90       	pop	r11
    4f8c:	af 90       	pop	r10
    4f8e:	7f 90       	pop	r7
    4f90:	6f 90       	pop	r6
    4f92:	5f 90       	pop	r5
    4f94:	4f 90       	pop	r4
    4f96:	08 95       	ret

00004f98 <writeFile>:
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
    4f98:	2f 92       	push	r2
    4f9a:	3f 92       	push	r3
    4f9c:	4f 92       	push	r4
    4f9e:	5f 92       	push	r5
    4fa0:	6f 92       	push	r6
    4fa2:	7f 92       	push	r7
    4fa4:	8f 92       	push	r8
    4fa6:	9f 92       	push	r9
    4fa8:	af 92       	push	r10
    4faa:	bf 92       	push	r11
    4fac:	cf 92       	push	r12
    4fae:	df 92       	push	r13
    4fb0:	ef 92       	push	r14
    4fb2:	ff 92       	push	r15
    4fb4:	0f 93       	push	r16
    4fb6:	1f 93       	push	r17
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
    4fc0:	60 97       	sbiw	r28, 0x10	; 16
    4fc2:	cd bf       	out	0x3d, r28	; 61
    4fc4:	de bf       	out	0x3e, r29	; 62
    4fc6:	fc 01       	movw	r30, r24
    4fc8:	6d 83       	std	Y+5, r22	; 0x05
    4fca:	7e 83       	std	Y+6, r23	; 0x06
    4fcc:	49 01       	movw	r8, r18
    4fce:	5a 01       	movw	r10, r20
unsigned int firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;


j = readFile (VERIFY, fileName);
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	bf 01       	movw	r22, r30
    4fd4:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <readFile>

if(j == 1) 
    4fd8:	81 30       	cpi	r24, 0x01	; 1
    4fda:	09 f0       	breq	.+2      	; 0x4fde <writeFile+0x46>
    4fdc:	7b c0       	rjmp	.+246    	; 0x50d4 <writeFile+0x13c>
{
  //File already exists, appending data
  appendFile = 1;
  //set cluster to write to as the first cluster of the file
  cluster = appendStartCluster;
    4fde:	00 91 87 50 	lds	r16, 0x5087
    4fe2:	10 91 88 50 	lds	r17, 0x5088
    4fe6:	20 91 89 50 	lds	r18, 0x5089
    4fea:	30 91 8a 50 	lds	r19, 0x508A
    4fee:	09 83       	std	Y+1, r16	; 0x01
    4ff0:	1a 83       	std	Y+2, r17	; 0x02
    4ff2:	2b 83       	std	Y+3, r18	; 0x03
    4ff4:	3c 83       	std	Y+4, r19	; 0x04
  clusterCount=0;
    4ff6:	cc 24       	eor	r12, r12
    4ff8:	dd 24       	eor	r13, r13
    4ffa:	76 01       	movw	r14, r12
    4ffc:	24 01       	movw	r4, r8
    4ffe:	35 01       	movw	r6, r10
    5000:	48 01       	movw	r8, r16
    5002:	59 01       	movw	r10, r18
  //iterate through the clusters in the file until the last incomplete cluster is found and set that to cluster
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    5004:	c5 01       	movw	r24, r10
    5006:	b4 01       	movw	r22, r8
    5008:	40 e0       	ldi	r20, 0x00	; 0
    500a:	00 e0       	ldi	r16, 0x00	; 0
    500c:	10 e0       	ldi	r17, 0x00	; 0
    500e:	98 01       	movw	r18, r16
    5010:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
    5014:	dc 01       	movw	r26, r24
    5016:	cb 01       	movw	r24, r22
    if(nextCluster == EOF) break;
    5018:	8f 3f       	cpi	r24, 0xFF	; 255
    501a:	1f ef       	ldi	r17, 0xFF	; 255
    501c:	91 07       	cpc	r25, r17
    501e:	1f ef       	ldi	r17, 0xFF	; 255
    5020:	a1 07       	cpc	r26, r17
    5022:	1f ef       	ldi	r17, 0xFF	; 255
    5024:	b1 07       	cpc	r27, r17
    5026:	41 f0       	breq	.+16     	; 0x5038 <writeFile+0xa0>
	cluster = nextCluster;
	clusterCount++;
    5028:	08 94       	sec
    502a:	c1 1c       	adc	r12, r1
    502c:	d1 1c       	adc	r13, r1
    502e:	e1 1c       	adc	r14, r1
    5030:	f1 1c       	adc	r15, r1
  //iterate through the clusters in the file until the last incomplete cluster is found and set that to cluster
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    5032:	4c 01       	movw	r8, r24
    5034:	5d 01       	movw	r10, r26
	clusterCount++;
  }
    5036:	e6 cf       	rjmp	.-52     	; 0x5004 <writeFile+0x6c>
    5038:	89 82       	std	Y+1, r8	; 0x01
    503a:	9a 82       	std	Y+2, r9	; 0x02
    503c:	ab 82       	std	Y+3, r10	; 0x03
    503e:	bc 82       	std	Y+4, r11	; 0x04
    5040:	53 01       	movw	r10, r6
    5042:	42 01       	movw	r8, r4
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    5044:	20 91 7b 50 	lds	r18, 0x507B
    5048:	30 91 7c 50 	lds	r19, 0x507C
    504c:	80 91 54 40 	lds	r24, 0x4054
    5050:	90 91 55 40 	lds	r25, 0x4055
    5054:	60 90 54 40 	lds	r6, 0x4054
    5058:	70 90 55 40 	lds	r7, 0x4055
    505c:	bc 01       	movw	r22, r24
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	40 e0       	ldi	r20, 0x00	; 0
    5064:	50 e0       	ldi	r21, 0x00	; 0
    5066:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    506a:	a7 01       	movw	r20, r14
    506c:	96 01       	movw	r18, r12
    506e:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    5072:	dc 01       	movw	r26, r24
    5074:	cb 01       	movw	r24, r22
    5076:	40 91 50 40 	lds	r20, 0x4050
    507a:	50 91 51 40 	lds	r21, 0x4051
    507e:	60 91 52 40 	lds	r22, 0x4052
    5082:	70 91 53 40 	lds	r23, 0x4053
    5086:	8a 01       	movw	r16, r20
    5088:	9b 01       	movw	r18, r22
    508a:	08 1b       	sub	r16, r24
    508c:	19 0b       	sbc	r17, r25
    508e:	2a 0b       	sbc	r18, r26
    5090:	3b 0b       	sbc	r19, r27
    5092:	c9 01       	movw	r24, r18
    5094:	b8 01       	movw	r22, r16
    5096:	93 01       	movw	r18, r6
    5098:	40 e0       	ldi	r20, 0x00	; 0
    509a:	50 e0       	ldi	r21, 0x00	; 0
    509c:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    50a0:	02 2f       	mov	r16, r18

//start writing data here

if(start){
  start = 0;
  startBlock = getFirstSector (cluster) + sector;
    50a2:	69 81       	ldd	r22, Y+1	; 0x01
    50a4:	7a 81       	ldd	r23, Y+2	; 0x02
    50a6:	8b 81       	ldd	r24, Y+3	; 0x03
    50a8:	9c 81       	ldd	r25, Y+4	; 0x04
    50aa:	0e 94 84 21 	call	0x4308	; 0x4308 <getFirstSector>
    50ae:	dc 01       	movw	r26, r24
    50b0:	cb 01       	movw	r24, r22
    50b2:	20 2e       	mov	r2, r16
    50b4:	33 24       	eor	r3, r3
    50b6:	28 0e       	add	r2, r24
    50b8:	39 1e       	adc	r3, r25
  SD_read_block (startBlock,SDBuffer);
    50ba:	b1 01       	movw	r22, r2
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	46 ed       	ldi	r20, 0xD6	; 214
    50c2:	51 e2       	ldi	r21, 0x21	; 33
    50c4:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
//unsigned char error, data;
unsigned int firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
    50c8:	1f 86       	std	Y+15, r1	; 0x0f
    50ca:	18 8a       	std	Y+16, r1	; 0x10
    50cc:	19 86       	std	Y+9, r1	; 0x09
    50ce:	1a 86       	std	Y+10, r1	; 0x0a
	cluster = nextCluster;
	clusterCount++;
  }
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    50d0:	11 e0       	ldi	r17, 0x01	; 1
    50d2:	4c c0       	rjmp	.+152    	; 0x516c <writeFile+0x1d4>
}
else if(j == 2) 
    50d4:	82 30       	cpi	r24, 0x02	; 2
    50d6:	09 f4       	brne	.+2      	; 0x50da <writeFile+0x142>
    50d8:	0c c2       	rjmp	.+1048   	; 0x54f2 <writeFile+0x55a>

else
{
 //Creating File

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    50da:	82 e0       	ldi	r24, 0x02	; 2
    50dc:	60 e0       	ldi	r22, 0x00	; 0
    50de:	20 e0       	ldi	r18, 0x00	; 0
    50e0:	30 e0       	ldi	r19, 0x00	; 0
    50e2:	a9 01       	movw	r20, r18
    50e4:	0e 94 3d 22 	call	0x447a	; 0x447a <getSetFreeCluster>
  if(cluster > totalClusters)
    50e8:	00 91 59 40 	lds	r16, 0x4059
    50ec:	10 91 5a 40 	lds	r17, 0x405A
    50f0:	20 91 5b 40 	lds	r18, 0x405B
    50f4:	30 91 5c 40 	lds	r19, 0x405C
    50f8:	06 17       	cp	r16, r22
    50fa:	17 07       	cpc	r17, r23
    50fc:	28 07       	cpc	r18, r24
    50fe:	39 07       	cpc	r19, r25
    5100:	40 f4       	brcc	.+16     	; 0x5112 <writeFile+0x17a>
     cluster = rootCluster;
    5102:	60 91 5f 40 	lds	r22, 0x405F
    5106:	70 91 60 40 	lds	r23, 0x4060
    510a:	80 91 61 40 	lds	r24, 0x4061
    510e:	90 91 62 40 	lds	r25, 0x4062

  cluster = searchNextFreeCluster(cluster);
    5112:	0e 94 89 24 	call	0x4912	; 0x4912 <searchNextFreeCluster>
    5116:	69 83       	std	Y+1, r22	; 0x01
    5118:	7a 83       	std	Y+2, r23	; 0x02
    511a:	8b 83       	std	Y+3, r24	; 0x03
    511c:	9c 83       	std	Y+4, r25	; 0x04
   if(cluster == 0)
    511e:	61 15       	cp	r22, r1
    5120:	71 05       	cpc	r23, r1
    5122:	81 05       	cpc	r24, r1
    5124:	91 05       	cpc	r25, r1
    5126:	09 f4       	brne	.+2      	; 0x512a <writeFile+0x192>
    5128:	e6 c1       	rjmp	.+972    	; 0x54f6 <writeFile+0x55e>
   {
	   // No free cluster!
	  return 2;
   }
  getSetNextCluster(cluster, SET, EOF);   //set last cluster of the file, marked EOF
    512a:	41 e0       	ldi	r20, 0x01	; 1
    512c:	0f ef       	ldi	r16, 0xFF	; 255
    512e:	1f ef       	ldi	r17, 0xFF	; 255
    5130:	98 01       	movw	r18, r16
    5132:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    5136:	2b 81       	ldd	r18, Y+3	; 0x03
    5138:	3c 81       	ldd	r19, Y+4	; 0x04
    513a:	29 87       	std	Y+9, r18	; 0x09
    513c:	3a 87       	std	Y+10, r19	; 0x0a
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    513e:	89 81       	ldd	r24, Y+1	; 0x01
    5140:	9a 81       	ldd	r25, Y+2	; 0x02
    5142:	8f 87       	std	Y+15, r24	; 0x0f
    5144:	98 8b       	std	Y+16, r25	; 0x10
  fileSize = 0;
    5146:	10 92 50 40 	sts	0x4050, r1
    514a:	10 92 51 40 	sts	0x4051, r1
    514e:	10 92 52 40 	sts	0x4052, r1
    5152:	10 92 53 40 	sts	0x4053, r1
  startBlock = getFirstSector (cluster) + sector;
  SD_read_block (startBlock,SDBuffer);
  j = sector;
}
else{
  startBlock = getFirstSector (cluster);
    5156:	69 81       	ldd	r22, Y+1	; 0x01
    5158:	7a 81       	ldd	r23, Y+2	; 0x02
    515a:	8b 81       	ldd	r24, Y+3	; 0x03
    515c:	9c 81       	ldd	r25, Y+4	; 0x04
    515e:	0e 94 84 21 	call	0x4308	; 0x4308 <getFirstSector>
    5162:	dc 01       	movw	r26, r24
    5164:	cb 01       	movw	r24, r22
    5166:	1c 01       	movw	r2, r24
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    5168:	10 e0       	ldi	r17, 0x00	; 0
  SD_read_block (startBlock,SDBuffer);
  j = sector;
}
else{
  startBlock = getFirstSector (cluster);
  j=0;
    516a:	00 e0       	ldi	r16, 0x00	; 0
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
    516c:	81 14       	cp	r8, r1
    516e:	91 04       	cpc	r9, r1
    5170:	a1 04       	cpc	r10, r1
    5172:	b1 04       	cpc	r11, r1
    5174:	09 f4       	brne	.+2      	; 0x5178 <writeFile+0x1e0>
    5176:	8d c0       	rjmp	.+282    	; 0x5292 <writeFile+0x2fa>
    5178:	44 24       	eor	r4, r4
    517a:	55 24       	eor	r5, r5
    517c:	32 01       	movw	r6, r4
	//write 1 sector (512 bytes) to the cluster and increase file size by 512 bytes
	if(lengthOfData >= 512 ){
		 writtenData += 512;
		 dataToWrite = 512;
    517e:	c0 2e       	mov	r12, r16
    5180:	1b 87       	std	Y+11, r17	; 0x0b
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
	//write 1 sector (512 bytes) to the cluster and increase file size by 512 bytes
	if(lengthOfData >= 512 ){
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	89 16       	cp	r8, r25
    5186:	92 e0       	ldi	r25, 0x02	; 2
    5188:	99 06       	cpc	r9, r25
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	a9 06       	cpc	r10, r25
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	b9 06       	cpc	r11, r25
    5192:	88 f0       	brcs	.+34     	; 0x51b6 <writeFile+0x21e>
		 writtenData += 512;
    5194:	00 e0       	ldi	r16, 0x00	; 0
    5196:	12 e0       	ldi	r17, 0x02	; 2
    5198:	20 e0       	ldi	r18, 0x00	; 0
    519a:	30 e0       	ldi	r19, 0x00	; 0
    519c:	40 0e       	add	r4, r16
    519e:	51 1e       	adc	r5, r17
    51a0:	62 1e       	adc	r6, r18
    51a2:	73 1e       	adc	r7, r19
		 dataToWrite = 512;
		 lengthOfData -= 512;
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	9e ef       	ldi	r25, 0xFE	; 254
    51a8:	af ef       	ldi	r26, 0xFF	; 255
    51aa:	bf ef       	ldi	r27, 0xFF	; 255
    51ac:	88 0e       	add	r8, r24
    51ae:	99 1e       	adc	r9, r25
    51b0:	aa 1e       	adc	r10, r26
    51b2:	bb 1e       	adc	r11, r27
    51b4:	0c c0       	rjmp	.+24     	; 0x51ce <writeFile+0x236>
	}
	else{
		writtenData += lengthOfData;
    51b6:	48 0c       	add	r4, r8
    51b8:	59 1c       	adc	r5, r9
    51ba:	6a 1c       	adc	r6, r10
    51bc:	7b 1c       	adc	r7, r11
		dataToWrite = lengthOfData%512;
    51be:	95 01       	movw	r18, r10
    51c0:	84 01       	movw	r16, r8
    51c2:	11 70       	andi	r17, 0x01	; 1
    51c4:	20 70       	andi	r18, 0x00	; 0
    51c6:	30 70       	andi	r19, 0x00	; 0
		lengthOfData = 0;
    51c8:	88 24       	eor	r8, r8
    51ca:	99 24       	eor	r9, r9
    51cc:	54 01       	movw	r10, r8
	}		   
	fileSize += 512;	//always increment size of file by 512 to avoid losing data when appending to the file. Otherwise if there is data in an unfilled sector it will be overwritten.
    51ce:	80 91 50 40 	lds	r24, 0x4050
    51d2:	90 91 51 40 	lds	r25, 0x4051
    51d6:	a0 91 52 40 	lds	r26, 0x4052
    51da:	b0 91 53 40 	lds	r27, 0x4053
    51de:	80 50       	subi	r24, 0x00	; 0
    51e0:	9e 4f       	sbci	r25, 0xFE	; 254
    51e2:	af 4f       	sbci	r26, 0xFF	; 255
    51e4:	bf 4f       	sbci	r27, 0xFF	; 255
    51e6:	80 93 50 40 	sts	0x4050, r24
    51ea:	90 93 51 40 	sts	0x4051, r25
    51ee:	a0 93 52 40 	sts	0x4052, r26
    51f2:	b0 93 53 40 	sts	0x4053, r27
	SD_write_block (startBlock,dataArray+writtenData-dataToWrite,dataToWrite);
    51f6:	b1 01       	movw	r22, r2
    51f8:	80 e0       	ldi	r24, 0x00	; 0
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	a2 01       	movw	r20, r4
    51fe:	40 1b       	sub	r20, r16
    5200:	51 0b       	sbc	r21, r17
    5202:	ad 81       	ldd	r26, Y+5	; 0x05
    5204:	be 81       	ldd	r27, Y+6	; 0x06
    5206:	4a 0f       	add	r20, r26
    5208:	5b 1f       	adc	r21, r27
    520a:	98 01       	movw	r18, r16
    520c:	0e 94 df 2b 	call	0x57be	; 0x57be <SD_write_block>
	j++;
    5210:	c3 94       	inc	r12
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
    5212:	20 91 7b 50 	lds	r18, 0x507B
    5216:	30 91 7c 50 	lds	r19, 0x507C
    521a:	8c 2d       	mov	r24, r12
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	82 17       	cp	r24, r18
    5220:	93 07       	cpc	r25, r19
    5222:	29 f5       	brne	.+74     	; 0x526e <writeFile+0x2d6>
		j = 0; 
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    5224:	69 81       	ldd	r22, Y+1	; 0x01
    5226:	7a 81       	ldd	r23, Y+2	; 0x02
    5228:	8b 81       	ldd	r24, Y+3	; 0x03
    522a:	9c 81       	ldd	r25, Y+4	; 0x04
    522c:	0e 94 89 24 	call	0x4912	; 0x4912 <searchNextFreeCluster>
    5230:	6b 01       	movw	r12, r22
    5232:	7c 01       	movw	r14, r24
		if(cluster == 0){
    5234:	61 15       	cp	r22, r1
    5236:	71 05       	cpc	r23, r1
    5238:	81 05       	cpc	r24, r1
    523a:	91 05       	cpc	r25, r1
    523c:	09 f4       	brne	.+2      	; 0x5240 <writeFile+0x2a8>
    523e:	5d c1       	rjmp	.+698    	; 0x54fa <writeFile+0x562>
		  //No free cluster!
		  return 2;
	   }
		getSetNextCluster(prevCluster, SET, cluster);
    5240:	69 81       	ldd	r22, Y+1	; 0x01
    5242:	7a 81       	ldd	r23, Y+2	; 0x02
    5244:	8b 81       	ldd	r24, Y+3	; 0x03
    5246:	9c 81       	ldd	r25, Y+4	; 0x04
    5248:	41 e0       	ldi	r20, 0x01	; 1
    524a:	97 01       	movw	r18, r14
    524c:	86 01       	movw	r16, r12
    524e:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    5252:	c7 01       	movw	r24, r14
    5254:	b6 01       	movw	r22, r12
    5256:	41 e0       	ldi	r20, 0x01	; 1
    5258:	0f ef       	ldi	r16, 0xFF	; 255
    525a:	1f ef       	ldi	r17, 0xFF	; 255
    525c:	98 01       	movw	r18, r16
    525e:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
		j = 0; 
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    5262:	c9 82       	std	Y+1, r12	; 0x01
    5264:	da 82       	std	Y+2, r13	; 0x02
    5266:	eb 82       	std	Y+3, r14	; 0x03
    5268:	fc 82       	std	Y+4, r15	; 0x04
	fileSize += 512;	//always increment size of file by 512 to avoid losing data when appending to the file. Otherwise if there is data in an unfilled sector it will be overwritten.
	SD_write_block (startBlock,dataArray+writtenData-dataToWrite,dataToWrite);
	j++;
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
		j = 0; 
    526a:	cc 24       	eor	r12, r12
    526c:	03 c0       	rjmp	.+6      	; 0x5274 <writeFile+0x2dc>
	   }
		getSetNextCluster(prevCluster, SET, cluster);
		getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
	}
	//otherwise increment the sector offset 
	else startBlock++;       
    526e:	08 94       	sec
    5270:	21 1c       	adc	r2, r1
    5272:	31 1c       	adc	r3, r1
	getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    5274:	82 e0       	ldi	r24, 0x02	; 2
    5276:	61 e0       	ldi	r22, 0x01	; 1
    5278:	29 81       	ldd	r18, Y+1	; 0x01
    527a:	3a 81       	ldd	r19, Y+2	; 0x02
    527c:	4b 81       	ldd	r20, Y+3	; 0x03
    527e:	5c 81       	ldd	r21, Y+4	; 0x04
    5280:	0e 94 3d 22 	call	0x447a	; 0x447a <getSetFreeCluster>
  startBlock = getFirstSector (cluster);
  j=0;
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
    5284:	81 14       	cp	r8, r1
    5286:	91 04       	cpc	r9, r1
    5288:	a1 04       	cpc	r10, r1
    528a:	b1 04       	cpc	r11, r1
    528c:	09 f0       	breq	.+2      	; 0x5290 <writeFile+0x2f8>
    528e:	79 cf       	rjmp	.-270    	; 0x5182 <writeFile+0x1ea>
    5290:	1b 85       	ldd	r17, Y+11	; 0x0b
	//otherwise increment the sector offset 
	else startBlock++;       
	getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
}

if(appendFile)  //executes this loop if file is to be appended (updates file information and reduce count of free memory)
    5292:	11 23       	and	r17, r17
    5294:	09 f4       	brne	.+2      	; 0x5298 <writeFile+0x300>
    5296:	3f c0       	rjmp	.+126    	; 0x5316 <writeFile+0x37e>
{
  SD_read_block (appendFileSector,SDBuffer);    
    5298:	60 91 c9 50 	lds	r22, 0x50C9
    529c:	70 91 ca 50 	lds	r23, 0x50CA
    52a0:	80 91 cb 50 	lds	r24, 0x50CB
    52a4:	90 91 cc 50 	lds	r25, 0x50CC
    52a8:	06 ed       	ldi	r16, 0xD6	; 214
    52aa:	11 e2       	ldi	r17, 0x21	; 33
    52ac:	a8 01       	movw	r20, r16
    52ae:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>
  dir = (struct dir_Structure *) &SDBuffer[appendFileLocation]; 
    52b2:	e0 91 d7 23 	lds	r30, 0x23D7
    52b6:	f0 91 d8 23 	lds	r31, 0x23D8
    52ba:	e0 0f       	add	r30, r16
    52bc:	f1 1f       	adc	r31, r17

  dir->lastAccessDate = 0;   //date of last access ignored
    52be:	12 8a       	std	Z+18, r1	; 0x12
    52c0:	13 8a       	std	Z+19, r1	; 0x13
  //dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
  //dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
  extraMemory = fileSize - dir->fileSize;
    52c2:	80 91 50 40 	lds	r24, 0x4050
    52c6:	90 91 51 40 	lds	r25, 0x4051
    52ca:	a0 91 52 40 	lds	r26, 0x4052
    52ce:	b0 91 53 40 	lds	r27, 0x4053
    52d2:	44 8d       	ldd	r20, Z+28	; 0x1c
    52d4:	55 8d       	ldd	r21, Z+29	; 0x1d
    52d6:	66 8d       	ldd	r22, Z+30	; 0x1e
    52d8:	77 8d       	ldd	r23, Z+31	; 0x1f
    52da:	6c 01       	movw	r12, r24
    52dc:	7d 01       	movw	r14, r26
    52de:	c4 1a       	sub	r12, r20
    52e0:	d5 0a       	sbc	r13, r21
    52e2:	e6 0a       	sbc	r14, r22
    52e4:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    52e6:	84 8f       	std	Z+28, r24	; 0x1c
    52e8:	95 8f       	std	Z+29, r25	; 0x1d
    52ea:	a6 8f       	std	Z+30, r26	; 0x1e
    52ec:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_write_block (appendFileSector,SDBuffer,512);
    52ee:	60 91 c9 50 	lds	r22, 0x50C9
    52f2:	70 91 ca 50 	lds	r23, 0x50CA
    52f6:	80 91 cb 50 	lds	r24, 0x50CB
    52fa:	90 91 cc 50 	lds	r25, 0x50CC
    52fe:	a8 01       	movw	r20, r16
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	32 e0       	ldi	r19, 0x02	; 2
    5304:	0e 94 df 2b 	call	0x57be	; 0x57be <SD_write_block>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    5308:	81 e0       	ldi	r24, 0x01	; 1
    530a:	b7 01       	movw	r22, r14
    530c:	a6 01       	movw	r20, r12
    530e:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <freeMemoryUpdate>

 //File appended!
  return 0;
    5312:	80 e0       	ldi	r24, 0x00	; 0
    5314:	f9 c0       	rjmp	.+498    	; 0x5508 <writeFile+0x570>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    5316:	00 91 5f 40 	lds	r16, 0x405F
    531a:	10 91 60 40 	lds	r17, 0x4060
    531e:	20 91 61 40 	lds	r18, 0x4061
    5322:	30 91 62 40 	lds	r19, 0x4062
    5326:	0b 87       	std	Y+11, r16	; 0x0b
    5328:	1c 87       	std	Y+12, r17	; 0x0c
    532a:	2d 87       	std	Y+13, r18	; 0x0d
    532c:	3e 87       	std	Y+14, r19	; 0x0e
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    532e:	77 24       	eor	r7, r7
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    5330:	83 eb       	ldi	r24, 0xB3	; 179
    5332:	90 e5       	ldi	r25, 0x50	; 80
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
    5334:	0f 2e       	mov	r0, r31
    5336:	fb e0       	ldi	r31, 0x0B	; 11
    5338:	af 2e       	mov	r10, r31
    533a:	bb 24       	eor	r11, r11
    533c:	f0 2d       	mov	r31, r0
    533e:	a8 0e       	add	r10, r24
    5340:	b9 1e       	adc	r11, r25

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = Filename[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    5342:	88 24       	eor	r8, r8
    5344:	68 94       	set
    5346:	85 f8       	bld	r8, 5
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    5348:	0f 2e       	mov	r0, r31
    534a:	f6 ed       	ldi	r31, 0xD6	; 214
    534c:	4f 2e       	mov	r4, r31
    534e:	f1 e2       	ldi	r31, 0x21	; 33
    5350:	5f 2e       	mov	r5, r31
    5352:	f0 2d       	mov	r31, r0
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    5354:	28 2e       	mov	r2, r24
    5356:	99 2e       	mov	r9, r25
    5358:	37 2c       	mov	r3, r7
    535a:	6f 84       	ldd	r6, Y+15	; 0x0f
    535c:	78 88       	ldd	r7, Y+16	; 0x10
    535e:	04 c0       	rjmp	.+8      	; 0x5368 <writeFile+0x3d0>
   }
   if(cluster == 0) {//Error in getting cluster 
	   return 4;
	}
   
   prevCluster = cluster;
    5360:	cb 86       	std	Y+11, r12	; 0x0b
    5362:	dc 86       	std	Y+12, r13	; 0x0c
    5364:	ed 86       	std	Y+13, r14	; 0x0d
    5366:	fe 86       	std	Y+14, r15	; 0x0e

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    5368:	6b 85       	ldd	r22, Y+11	; 0x0b
    536a:	7c 85       	ldd	r23, Y+12	; 0x0c
    536c:	8d 85       	ldd	r24, Y+13	; 0x0d
    536e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5370:	0e 94 84 21 	call	0x4308	; 0x4308 <getFirstSector>
    5374:	6d 83       	std	Y+5, r22	; 0x05
    5376:	7e 83       	std	Y+6, r23	; 0x06
    5378:	8f 83       	std	Y+7, r24	; 0x07
    537a:	98 87       	std	Y+8, r25	; 0x08

   for(sector = 0; sector < sectorPerCluster; sector++)
    537c:	80 91 7b 50 	lds	r24, 0x507B
    5380:	90 91 7c 50 	lds	r25, 0x507C
    5384:	00 97       	sbiw	r24, 0x00	; 0
    5386:	09 f4       	brne	.+2      	; 0x538a <writeFile+0x3f2>
    5388:	77 c0       	rjmp	.+238    	; 0x5478 <writeFile+0x4e0>
    538a:	19 82       	std	Y+1, r1	; 0x01
   {
     SD_read_block (firstSector + sector,SDBuffer);
    538c:	cd 80       	ldd	r12, Y+5	; 0x05
    538e:	de 80       	ldd	r13, Y+6	; 0x06
    5390:	ef 80       	ldd	r14, Y+7	; 0x07
    5392:	f8 84       	ldd	r15, Y+8	; 0x08
    5394:	19 81       	ldd	r17, Y+1	; 0x01
    5396:	c1 0e       	add	r12, r17
    5398:	d1 1c       	adc	r13, r1
    539a:	e1 1c       	adc	r14, r1
    539c:	f1 1c       	adc	r15, r1
    539e:	c7 01       	movw	r24, r14
    53a0:	b6 01       	movw	r22, r12
    53a2:	a2 01       	movw	r20, r4
    53a4:	0e 94 94 2c 	call	0x5928	; 0x5928 <SD_read_block>
	

     for(int i=0; i<bytesPerSector; i+=32)
    53a8:	80 91 54 40 	lds	r24, 0x4054
    53ac:	90 91 55 40 	lds	r25, 0x4055
    53b0:	00 97       	sbiw	r24, 0x00	; 0
    53b2:	09 f4       	brne	.+2      	; 0x53b6 <writeFile+0x41e>
    53b4:	54 c0       	rjmp	.+168    	; 0x545e <writeFile+0x4c6>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    53b6:	33 20       	and	r3, r3
    53b8:	09 f0       	breq	.+2      	; 0x53bc <writeFile+0x424>
    53ba:	a1 c0       	rjmp	.+322    	; 0x54fe <writeFile+0x566>
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    53bc:	a2 01       	movw	r20, r4
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
    53be:	00 e0       	ldi	r16, 0x00	; 0
    53c0:	10 e0       	ldi	r17, 0x00	; 0
    53c2:	06 c0       	rjmp	.+12     	; 0x53d0 <writeFile+0x438>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    53c4:	a8 01       	movw	r20, r16
    53c6:	4a 52       	subi	r20, 0x2A	; 42
    53c8:	5e 4d       	sbci	r21, 0xDE	; 222
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    53ca:	22 23       	and	r18, r18
    53cc:	09 f0       	breq	.+2      	; 0x53d0 <writeFile+0x438>
    53ce:	99 c0       	rjmp	.+306    	; 0x5502 <writeFile+0x56a>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    53d0:	da 01       	movw	r26, r20
    53d2:	8c 91       	ld	r24, X
    53d4:	88 23       	and	r24, r24
    53d6:	21 f4       	brne	.+8      	; 0x53e0 <writeFile+0x448>
    53d8:	e2 2d       	mov	r30, r2
    53da:	f9 2d       	mov	r31, r9
    53dc:	da 01       	movw	r26, r20
    53de:	04 c0       	rjmp	.+8      	; 0x53e8 <writeFile+0x450>
    53e0:	85 3e       	cpi	r24, 0xE5	; 229
    53e2:	d1 f3       	breq	.-12     	; 0x53d8 <writeFile+0x440>
    53e4:	23 2d       	mov	r18, r3
    53e6:	30 c0       	rjmp	.+96     	; 0x5448 <writeFile+0x4b0>
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = Filename[j];
    53e8:	81 91       	ld	r24, Z+
    53ea:	8d 93       	st	X+, r24
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    53ec:	ea 15       	cp	r30, r10
    53ee:	fb 05       	cpc	r31, r11
    53f0:	d9 f7       	brne	.-10     	; 0x53e8 <writeFile+0x450>
  			dir->name[j] = Filename[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    53f2:	fa 01       	movw	r30, r20
    53f4:	83 86       	std	Z+11, r8	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    53f6:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    53f8:	15 86       	std	Z+13, r1	; 0x0d
		  //dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
    53fa:	12 8a       	std	Z+18, r1	; 0x12
    53fc:	13 8a       	std	Z+19, r1	; 0x13
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
    53fe:	29 85       	ldd	r18, Y+9	; 0x09
    5400:	3a 85       	ldd	r19, Y+10	; 0x0a
    5402:	24 8b       	std	Z+20, r18	; 0x14
    5404:	35 8b       	std	Z+21, r19	; 0x15
		  dir->firstClusterLO = firstClusterLow;
    5406:	62 8e       	std	Z+26, r6	; 0x1a
    5408:	73 8e       	std	Z+27, r7	; 0x1b
		  dir->fileSize = fileSize;
    540a:	80 91 50 40 	lds	r24, 0x4050
    540e:	90 91 51 40 	lds	r25, 0x4051
    5412:	a0 91 52 40 	lds	r26, 0x4052
    5416:	b0 91 53 40 	lds	r27, 0x4053
    541a:	84 8f       	std	Z+28, r24	; 0x1c
    541c:	95 8f       	std	Z+29, r25	; 0x1d
    541e:	a6 8f       	std	Z+30, r26	; 0x1e
    5420:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_write_block (firstSector + sector,SDBuffer,512);
    5422:	c7 01       	movw	r24, r14
    5424:	b6 01       	movw	r22, r12
    5426:	a2 01       	movw	r20, r4
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	32 e0       	ldi	r19, 0x02	; 2
    542c:	0e 94 df 2b 	call	0x57be	; 0x57be <SD_write_block>
		  fileCreatedFlag = 1;

		  //File Created!

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    5430:	40 91 50 40 	lds	r20, 0x4050
    5434:	50 91 51 40 	lds	r21, 0x4051
    5438:	60 91 52 40 	lds	r22, 0x4052
    543c:	70 91 53 40 	lds	r23, 0x4053
    5440:	81 e0       	ldi	r24, 0x01	; 1
    5442:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_write_block (firstSector + sector,SDBuffer,512);
		  fileCreatedFlag = 1;
    5446:	21 e0       	ldi	r18, 0x01	; 1
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
    5448:	00 5e       	subi	r16, 0xE0	; 224
    544a:	1f 4f       	sbci	r17, 0xFF	; 255
    544c:	80 91 54 40 	lds	r24, 0x4054
    5450:	90 91 55 40 	lds	r25, 0x4055
    5454:	08 17       	cp	r16, r24
    5456:	19 07       	cpc	r17, r25
    5458:	08 f4       	brcc	.+2      	; 0x545c <writeFile+0x4c4>
    545a:	b4 cf       	rjmp	.-152    	; 0x53c4 <writeFile+0x42c>
    545c:	32 2e       	mov	r3, r18

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    545e:	09 81       	ldd	r16, Y+1	; 0x01
    5460:	0f 5f       	subi	r16, 0xFF	; 255
    5462:	09 83       	std	Y+1, r16	; 0x01
    5464:	20 91 7b 50 	lds	r18, 0x507B
    5468:	30 91 7c 50 	lds	r19, 0x507C
    546c:	80 2f       	mov	r24, r16
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	82 17       	cp	r24, r18
    5472:	93 07       	cpc	r25, r19
    5474:	08 f4       	brcc	.+2      	; 0x5478 <writeFile+0x4e0>
    5476:	8a cf       	rjmp	.-236    	; 0x538c <writeFile+0x3f4>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    5478:	6b 85       	ldd	r22, Y+11	; 0x0b
    547a:	7c 85       	ldd	r23, Y+12	; 0x0c
    547c:	8d 85       	ldd	r24, Y+13	; 0x0d
    547e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5480:	40 e0       	ldi	r20, 0x00	; 0
    5482:	00 e0       	ldi	r16, 0x00	; 0
    5484:	10 e0       	ldi	r17, 0x00	; 0
    5486:	98 01       	movw	r18, r16
    5488:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
    548c:	6b 01       	movw	r12, r22
    548e:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    5490:	67 3f       	cpi	r22, 0xF7	; 247
    5492:	1f ef       	ldi	r17, 0xFF	; 255
    5494:	71 07       	cpc	r23, r17
    5496:	1f ef       	ldi	r17, 0xFF	; 255
    5498:	81 07       	cpc	r24, r17
    549a:	1f e0       	ldi	r17, 0x0F	; 15
    549c:	91 07       	cpc	r25, r17
    549e:	08 f1       	brcs	.+66     	; 0x54e2 <writeFile+0x54a>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    54a0:	6f 3f       	cpi	r22, 0xFF	; 255
    54a2:	2f ef       	ldi	r18, 0xFF	; 255
    54a4:	72 07       	cpc	r23, r18
    54a6:	2f ef       	ldi	r18, 0xFF	; 255
    54a8:	82 07       	cpc	r24, r18
    54aa:	2f ef       	ldi	r18, 0xFF	; 255
    54ac:	92 07       	cpc	r25, r18
    54ae:	59 f5       	brne	.+86     	; 0x5506 <writeFile+0x56e>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    54b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    54b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    54b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54b8:	0e 94 89 24 	call	0x4912	; 0x4912 <searchNextFreeCluster>
    54bc:	6b 01       	movw	r12, r22
    54be:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    54c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    54c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    54c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54c8:	41 e0       	ldi	r20, 0x01	; 1
    54ca:	97 01       	movw	r18, r14
    54cc:	86 01       	movw	r16, r12
    54ce:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    54d2:	c7 01       	movw	r24, r14
    54d4:	b6 01       	movw	r22, r12
    54d6:	41 e0       	ldi	r20, 0x01	; 1
    54d8:	0f ef       	ldi	r16, 0xFF	; 255
    54da:	1f ef       	ldi	r17, 0xFF	; 255
    54dc:	98 01       	movw	r18, r16
    54de:	0e 94 ab 21 	call	0x4356	; 0x4356 <getSetNextCluster>
      {	
	    //End of Cluster Chain 
	    return 3;
      }
   }
   if(cluster == 0) {//Error in getting cluster 
    54e2:	c1 14       	cp	r12, r1
    54e4:	d1 04       	cpc	r13, r1
    54e6:	e1 04       	cpc	r14, r1
    54e8:	f1 04       	cpc	r15, r1
    54ea:	09 f0       	breq	.+2      	; 0x54ee <writeFile+0x556>
    54ec:	39 cf       	rjmp	.-398    	; 0x5360 <writeFile+0x3c8>
	   return 4;
    54ee:	84 e0       	ldi	r24, 0x04	; 4
    54f0:	0b c0       	rjmp	.+22     	; 0x5508 <writeFile+0x570>
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
   return 1; //invalid file name
    54f2:	81 e0       	ldi	r24, 0x01	; 1
    54f4:	09 c0       	rjmp	.+18     	; 0x5508 <writeFile+0x570>

  cluster = searchNextFreeCluster(cluster);
   if(cluster == 0)
   {
	   // No free cluster!
	  return 2;
    54f6:	82 e0       	ldi	r24, 0x02	; 2
    54f8:	07 c0       	rjmp	.+14     	; 0x5508 <writeFile+0x570>
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
		if(cluster == 0){
		  //No free cluster!
		  return 2;
    54fa:	82 e0       	ldi	r24, 0x02	; 2
    54fc:	05 c0       	rjmp	.+10     	; 0x5508 <writeFile+0x570>
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    54fe:	80 e0       	ldi	r24, 0x00	; 0
    5500:	03 c0       	rjmp	.+6      	; 0x5508 <writeFile+0x570>
    5502:	80 e0       	ldi	r24, 0x00	; 0
    5504:	01 c0       	rjmp	.+2      	; 0x5508 <writeFile+0x570>
      } 

      else
      {	
	    //End of Cluster Chain 
	    return 3;
    5506:	83 e0       	ldi	r24, 0x03	; 3
   
   prevCluster = cluster;
 }
 
 return 0;
}
    5508:	60 96       	adiw	r28, 0x10	; 16
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	de bf       	out	0x3e, r29	; 62
    550e:	df 91       	pop	r29
    5510:	cf 91       	pop	r28
    5512:	1f 91       	pop	r17
    5514:	0f 91       	pop	r16
    5516:	ff 90       	pop	r15
    5518:	ef 90       	pop	r14
    551a:	df 90       	pop	r13
    551c:	cf 90       	pop	r12
    551e:	bf 90       	pop	r11
    5520:	af 90       	pop	r10
    5522:	9f 90       	pop	r9
    5524:	8f 90       	pop	r8
    5526:	7f 90       	pop	r7
    5528:	6f 90       	pop	r6
    552a:	5f 90       	pop	r5
    552c:	4f 90       	pop	r4
    552e:	3f 90       	pop	r3
    5530:	2f 90       	pop	r2
    5532:	08 95       	ret

00005534 <SPI_write>:
}	

//the following command writes/reads a byte via spi
uint8_t SPI_write(uint8_t byteToSend){
	uint8_t data;
	SPIC.DATA = byteToSend;
    5534:	e0 ec       	ldi	r30, 0xC0	; 192
    5536:	f8 e0       	ldi	r31, 0x08	; 8
    5538:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    553a:	82 81       	ldd	r24, Z+2	; 0x02
    553c:	88 23       	and	r24, r24
    553e:	ec f7       	brge	.-6      	; 0x553a <SPI_write+0x6>
	data = SPIC.DATA; //read SPI data register to reset status flag
    5540:	e0 ec       	ldi	r30, 0xC0	; 192
    5542:	f8 e0       	ldi	r31, 0x08	; 8
    5544:	83 81       	ldd	r24, Z+3	; 0x03
	return data;
}
    5546:	08 95       	ret

00005548 <SD_command>:
//the following command writes a command to the sd card and returns a response (if any) or 0xFF if no response
uint8_t SD_command(uint8_t cmd, uint32_t arg, uint8_t crc, int read) {
    5548:	8f 92       	push	r8
    554a:	9f 92       	push	r9
    554c:	af 92       	push	r10
    554e:	bf 92       	push	r11
    5550:	cf 92       	push	r12
    5552:	df 92       	push	r13
    5554:	ef 92       	push	r14
    5556:	ff 92       	push	r15
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	84 2e       	mov	r8, r20
    5562:	a5 2e       	mov	r10, r21
    5564:	c6 2e       	mov	r12, r22
    5566:	c7 2f       	mov	r28, r23
    5568:	d2 2f       	mov	r29, r18
    556a:	78 01       	movw	r14, r16
	
	SPI_write(SDHC_COMMAND_START | cmd);
    556c:	80 64       	ori	r24, 0x40	; 64
    556e:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
	SPI_write(arg>>24 & LSBYTE_MASK);
    5572:	8c 2f       	mov	r24, r28
    5574:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
	SPI_write(arg>>16 & LSBYTE_MASK);
    5578:	8c 2d       	mov	r24, r12
    557a:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
	SPI_write(arg>>8 & LSBYTE_MASK);
    557e:	8a 2d       	mov	r24, r10
    5580:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
	SPI_write(arg & LSBYTE_MASK);
    5584:	88 2d       	mov	r24, r8
    5586:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
	SPI_write(crc);
    558a:	8d 2f       	mov	r24, r29
    558c:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
	
	for(int i=0; i<read; i++){
    5590:	10 16       	cp	r1, r16
    5592:	11 06       	cpc	r1, r17
    5594:	64 f5       	brge	.+88     	; 0x55ee <SD_command+0xa6>
    5596:	00 e0       	ldi	r16, 0x00	; 0
    5598:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(SDHC_DUMMY_BYTE);
    559a:	0f 2e       	mov	r0, r31
    559c:	fd e0       	ldi	r31, 0x0D	; 13
    559e:	cf 2e       	mov	r12, r31
    55a0:	dd 24       	eor	r13, r13
    55a2:	f0 2d       	mov	r31, r0
    55a4:	0f 2e       	mov	r0, r31
    55a6:	f6 ea       	ldi	r31, 0xA6	; 166
    55a8:	af 2e       	mov	r10, r31
    55aa:	f0 e5       	ldi	r31, 0x50	; 80
    55ac:	bf 2e       	mov	r11, r31
    55ae:	f0 2d       	mov	r31, r0
    55b0:	c8 01       	movw	r24, r16
    55b2:	b6 01       	movw	r22, r12
    55b4:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    55b8:	ec 01       	movw	r28, r24
    55ba:	8f ef       	ldi	r24, 0xFF	; 255
    55bc:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    55c0:	f5 01       	movw	r30, r10
    55c2:	ec 0f       	add	r30, r28
    55c4:	fd 1f       	adc	r31, r29
    55c6:	80 83       	st	Z, r24
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
    55c8:	80 81       	ld	r24, Z
    55ca:	8f 3f       	cpi	r24, 0xFF	; 255
    55cc:	49 f0       	breq	.+18     	; 0x55e0 <SD_command+0x98>
			Buffer[1] = Buffer[i%13];
    55ce:	fe 01       	movw	r30, r28
    55d0:	ea 55       	subi	r30, 0x5A	; 90
    55d2:	ff 4a       	sbci	r31, 0xAF	; 175
    55d4:	80 81       	ld	r24, Z
    55d6:	80 93 a7 50 	sts	0x50A7, r24
			return Buffer[1];
    55da:	80 91 a7 50 	lds	r24, 0x50A7
    55de:	08 c0       	rjmp	.+16     	; 0x55f0 <SD_command+0xa8>
	SPI_write(arg>>16 & LSBYTE_MASK);
	SPI_write(arg>>8 & LSBYTE_MASK);
	SPI_write(arg & LSBYTE_MASK);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    55e0:	0f 5f       	subi	r16, 0xFF	; 255
    55e2:	1f 4f       	sbci	r17, 0xFF	; 255
    55e4:	0e 15       	cp	r16, r14
    55e6:	1f 05       	cpc	r17, r15
    55e8:	19 f7       	brne	.-58     	; 0x55b0 <SD_command+0x68>
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
			Buffer[1] = Buffer[i%13];
			return Buffer[1];
		}
	}
	return SDHC_DUMMY_BYTE;
    55ea:	8f ef       	ldi	r24, 0xFF	; 255
    55ec:	01 c0       	rjmp	.+2      	; 0x55f0 <SD_command+0xa8>
    55ee:	8f ef       	ldi	r24, 0xFF	; 255
}
    55f0:	df 91       	pop	r29
    55f2:	cf 91       	pop	r28
    55f4:	1f 91       	pop	r17
    55f6:	0f 91       	pop	r16
    55f8:	ff 90       	pop	r15
    55fa:	ef 90       	pop	r14
    55fc:	df 90       	pop	r13
    55fe:	cf 90       	pop	r12
    5600:	bf 90       	pop	r11
    5602:	af 90       	pop	r10
    5604:	9f 90       	pop	r9
    5606:	8f 90       	pop	r8
    5608:	08 95       	ret

0000560a <SD_init>:
# include "SD_Card.h"

//the following function turns on power to the sd card and port expander and initializes the sdhc card in spi mode
//returns 0 if successful or 1 if not
uint8_t SD_init(void){
    560a:	ff 92       	push	r15
    560c:	0f 93       	push	r16
    560e:	1f 93       	push	r17
    5610:	cf 93       	push	r28
    5612:	df 93       	push	r29
	ADCPower(TRUE);				//power up portEX
    5614:	81 e0       	ldi	r24, 0x01	; 1
    5616:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	Ext1Power(TRUE);			//power up SD card
    561a:	81 e0       	ldi	r24, 0x01	; 1
    561c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Ext1Power>
    5620:	8f ef       	ldi	r24, 0xFF	; 255
    5622:	93 ec       	ldi	r25, 0xC3	; 195
    5624:	a9 e0       	ldi	r26, 0x09	; 9
    5626:	81 50       	subi	r24, 0x01	; 1
    5628:	90 40       	sbci	r25, 0x00	; 0
    562a:	a0 40       	sbci	r26, 0x00	; 0
    562c:	e1 f7       	brne	.-8      	; 0x5626 <SD_init+0x1c>
    562e:	00 c0       	rjmp	.+0      	; 0x5630 <SD_init+0x26>
    5630:	00 00       	nop
	_delay_ms(100);				//wait for bootup
	uint8_t errorCode = 0;

	
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS	
    5632:	88 e0       	ldi	r24, 0x08	; 8
    5634:	60 e0       	ldi	r22, 0x00	; 0
    5636:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    563a:	88 e0       	ldi	r24, 0x08	; 8
    563c:	60 e0       	ldi	r22, 0x00	; 0
    563e:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    5642:	80 e0       	ldi	r24, 0x00	; 0
    5644:	63 e0       	ldi	r22, 0x03	; 3
    5646:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <SPIInit2>
	SPICS(TRUE);
    564a:	81 e0       	ldi	r24, 0x01	; 1
    564c:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
    5650:	8a e0       	ldi	r24, 0x0A	; 10
    5652:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i=0; i<10; i++){		// idle for 10 bytes / 80 clocks
		SPIC.DATA=SDHC_DUMMY_BYTE;
    5654:	e0 ec       	ldi	r30, 0xC0	; 192
    5656:	f8 e0       	ldi	r31, 0x08	; 8
    5658:	3f ef       	ldi	r19, 0xFF	; 255
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
    565a:	a2 eb       	ldi	r26, 0xB2	; 178
    565c:	b0 e5       	ldi	r27, 0x50	; 80

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	for(int i=0; i<10; i++){		// idle for 10 bytes / 80 clocks
		SPIC.DATA=SDHC_DUMMY_BYTE;
    565e:	33 83       	std	Z+3, r19	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    5660:	22 81       	ldd	r18, Z+2	; 0x02
    5662:	22 23       	and	r18, r18
    5664:	ec f7       	brge	.-6      	; 0x5660 <SD_init+0x56>
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
    5666:	23 81       	ldd	r18, Z+3	; 0x03
    5668:	2c 93       	st	X, r18
    566a:	01 97       	sbiw	r24, 0x01	; 1
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	for(int i=0; i<10; i++){		// idle for 10 bytes / 80 clocks
    566c:	c1 f7       	brne	.-16     	; 0x565e <SD_init+0x54>
		SPIC.DATA=SDHC_DUMMY_BYTE;
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
	}
	
	SPICS(FALSE);
    566e:	80 e0       	ldi	r24, 0x00	; 0
    5670:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    5674:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	

	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5678:	88 e0       	ldi	r24, 0x08	; 8
    567a:	60 e0       	ldi	r22, 0x00	; 0
    567c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <PortEx_OUTCLR>
	
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	63 e0       	ldi	r22, 0x03	; 3
    5684:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <SPIInit2>
	SPICS(TRUE);
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
    568e:	cb e0       	ldi	r28, 0x0B	; 11
    5690:	d0 e0       	ldi	r29, 0x00	; 0
    5692:	02 c0       	rjmp	.+4      	; 0x5698 <SD_init+0x8e>
    5694:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {												//try command 10 times before timing out
    5696:	69 f0       	breq	.+26     	; 0x56b2 <SD_init+0xa8>

	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
    5698:	80 e0       	ldi	r24, 0x00	; 0
    569a:	40 e0       	ldi	r20, 0x00	; 0
    569c:	50 e0       	ldi	r21, 0x00	; 0
    569e:	ba 01       	movw	r22, r20
    56a0:	25 e9       	ldi	r18, 0x95	; 149
    56a2:	08 e0       	ldi	r16, 0x08	; 8
    56a4:	10 e0       	ldi	r17, 0x00	; 0
    56a6:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
    56aa:	81 30       	cpi	r24, 0x01	; 1
    56ac:	99 f7       	brne	.-26     	; 0x5694 <SD_init+0x8a>
//returns 0 if successful or 1 if not
uint8_t SD_init(void){
	ADCPower(TRUE);				//power up portEX
	Ext1Power(TRUE);			//power up SD card
	_delay_ms(100);				//wait for bootup
	uint8_t errorCode = 0;
    56ae:	ff 24       	eor	r15, r15
    56b0:	02 c0       	rjmp	.+4      	; 0x56b6 <SD_init+0xac>
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
		if (i >= 10) {												//try command 10 times before timing out
			//there was no response to the first command
			errorCode = 1;
    56b2:	ff 24       	eor	r15, r15
    56b4:	f3 94       	inc	r15
    56b6:	8f ef       	ldi	r24, 0xFF	; 255
    56b8:	93 ec       	ldi	r25, 0xC3	; 195
    56ba:	a9 e0       	ldi	r26, 0x09	; 9
    56bc:	81 50       	subi	r24, 0x01	; 1
    56be:	90 40       	sbci	r25, 0x00	; 0
    56c0:	a0 40       	sbci	r26, 0x00	; 0
    56c2:	e1 f7       	brne	.-8      	; 0x56bc <SD_init+0xb2>
    56c4:	00 c0       	rjmp	.+0      	; 0x56c6 <SD_init+0xbc>
    56c6:	00 00       	nop
			break;
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    56c8:	cb e0       	ldi	r28, 0x0B	; 11
    56ca:	d0 e0       	ldi	r29, 0x00	; 0
    56cc:	02 c0       	rjmp	.+4      	; 0x56d2 <SD_init+0xc8>
    56ce:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    56d0:	69 f0       	breq	.+26     	; 0x56ec <SD_init+0xe2>
			break;
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    56d2:	88 e0       	ldi	r24, 0x08	; 8
    56d4:	4a ea       	ldi	r20, 0xAA	; 170
    56d6:	51 e0       	ldi	r21, 0x01	; 1
    56d8:	60 e0       	ldi	r22, 0x00	; 0
    56da:	70 e0       	ldi	r23, 0x00	; 0
    56dc:	27 e8       	ldi	r18, 0x87	; 135
    56de:	08 e0       	ldi	r16, 0x08	; 8
    56e0:	10 e0       	ldi	r17, 0x00	; 0
    56e2:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
    56e6:	81 30       	cpi	r24, 0x01	; 1
    56e8:	91 f7       	brne	.-28     	; 0x56ce <SD_init+0xc4>
    56ea:	02 c0       	rjmp	.+4      	; 0x56f0 <SD_init+0xe6>
		if (i >= 10) {
			//there was no response to the command
			errorCode = 1;
    56ec:	ff 24       	eor	r15, r15
    56ee:	f3 94       	inc	r15
    56f0:	c2 e0       	ldi	r28, 0x02	; 2
    56f2:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}			
	}		
	for(int i=0;i<4;i++){
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
    56f4:	06 ea       	ldi	r16, 0xA6	; 166
    56f6:	10 e5       	ldi	r17, 0x50	; 80
    56f8:	8f ef       	ldi	r24, 0xFF	; 255
    56fa:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    56fe:	f8 01       	movw	r30, r16
    5700:	ec 0f       	add	r30, r28
    5702:	fd 1f       	adc	r31, r29
    5704:	80 83       	st	Z, r24
    5706:	21 96       	adiw	r28, 0x01	; 1
			//there was no response to the command
			errorCode = 1;
			break;
		}			
	}		
	for(int i=0;i<4;i++){
    5708:	c6 30       	cpi	r28, 0x06	; 6
    570a:	d1 05       	cpc	r29, r1
    570c:	a9 f7       	brne	.-22     	; 0x56f8 <SD_init+0xee>
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if((Buffer[4] != 0x01) || (Buffer[5] != 0xAA)){			//check that the response is the same as the argument sent in
    570e:	80 91 aa 50 	lds	r24, 0x50AA
    5712:	81 30       	cpi	r24, 0x01	; 1
    5714:	29 f4       	brne	.+10     	; 0x5720 <SD_init+0x116>
    5716:	80 91 ab 50 	lds	r24, 0x50AB
    571a:	8a 3a       	cpi	r24, 0xAA	; 170
    571c:	21 f4       	brne	.+8      	; 0x5726 <SD_init+0x11c>
    571e:	05 c0       	rjmp	.+10     	; 0x572a <SD_init+0x120>
		//broken card or voltage out of operating range bounds
		errorCode = 1;
    5720:	ff 24       	eor	r15, r15
    5722:	f3 94       	inc	r15
    5724:	02 c0       	rjmp	.+4      	; 0x572a <SD_init+0x120>
    5726:	ff 24       	eor	r15, r15
    5728:	f3 94       	inc	r15
	}
	//send second initialization command
	do{
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
	} while(Buffer[1]!= 0x00);
    572a:	c7 ea       	ldi	r28, 0xA7	; 167
    572c:	d0 e5       	ldi	r29, 0x50	; 80
		//broken card or voltage out of operating range bounds
		errorCode = 1;
	}
	//send second initialization command
	do{
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
    572e:	87 e3       	ldi	r24, 0x37	; 55
    5730:	40 e0       	ldi	r20, 0x00	; 0
    5732:	50 e0       	ldi	r21, 0x00	; 0
    5734:	ba 01       	movw	r22, r20
    5736:	2f ef       	ldi	r18, 0xFF	; 255
    5738:	08 e0       	ldi	r16, 0x08	; 8
    573a:	10 e0       	ldi	r17, 0x00	; 0
    573c:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	40 e0       	ldi	r20, 0x00	; 0
    5744:	50 e0       	ldi	r21, 0x00	; 0
    5746:	60 e0       	ldi	r22, 0x00	; 0
    5748:	70 e4       	ldi	r23, 0x40	; 64
    574a:	2f ef       	ldi	r18, 0xFF	; 255
    574c:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
	} while(Buffer[1]!= 0x00);
    5750:	88 81       	ld	r24, Y
    5752:	88 23       	and	r24, r24
    5754:	61 f7       	brne	.-40     	; 0x572e <SD_init+0x124>
    5756:	cb e0       	ldi	r28, 0x0B	; 11
    5758:	d0 e0       	ldi	r29, 0x00	; 0
    575a:	02 c0       	rjmp	.+4      	; 0x5760 <SD_init+0x156>
    575c:	21 97       	sbiw	r28, 0x01	; 1
	
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//check OCR register
		if (i >= 10) {
    575e:	61 f0       	breq	.+24     	; 0x5778 <SD_init+0x16e>
	do{
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
	} while(Buffer[1]!= 0x00);
	
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//check OCR register
    5760:	8a e3       	ldi	r24, 0x3A	; 58
    5762:	40 e0       	ldi	r20, 0x00	; 0
    5764:	50 e0       	ldi	r21, 0x00	; 0
    5766:	ba 01       	movw	r22, r20
    5768:	2f ef       	ldi	r18, 0xFF	; 255
    576a:	08 e0       	ldi	r16, 0x08	; 8
    576c:	10 e0       	ldi	r17, 0x00	; 0
    576e:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
    5772:	88 23       	and	r24, r24
    5774:	99 f7       	brne	.-26     	; 0x575c <SD_init+0x152>
    5776:	02 c0       	rjmp	.+4      	; 0x577c <SD_init+0x172>
		if (i >= 10) {
			//there was no response to the command
			errorCode = 1;
    5778:	ff 24       	eor	r15, r15
    577a:	f3 94       	inc	r15
			break;
		}
	}		
	for (int i=0;i<4;i++){
    577c:	c0 e0       	ldi	r28, 0x00	; 0
    577e:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
    5780:	06 ea       	ldi	r16, 0xA6	; 166
    5782:	10 e5       	ldi	r17, 0x50	; 80
    5784:	8f ef       	ldi	r24, 0xFF	; 255
    5786:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    578a:	f8 01       	movw	r30, r16
    578c:	ec 0f       	add	r30, r28
    578e:	fd 1f       	adc	r31, r29
    5790:	80 83       	st	Z, r24
			//there was no response to the command
			errorCode = 1;
			break;
		}
	}		
	for (int i=0;i<4;i++){
    5792:	21 96       	adiw	r28, 0x01	; 1
    5794:	c4 30       	cpi	r28, 0x04	; 4
    5796:	d1 05       	cpc	r29, r1
    5798:	a9 f7       	brne	.-22     	; 0x5784 <SD_init+0x17a>
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if (Buffer[0] & 0x40){
    579a:	80 91 a6 50 	lds	r24, 0x50A6
		//the card is addressed in 512 byte sectors
	}
	SPICS(FALSE);
    579e:	80 e0       	ldi	r24, 0x00	; 0
    57a0:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    57a4:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    57a8:	88 e0       	ldi	r24, 0x08	; 8
    57aa:	60 e0       	ldi	r22, 0x00	; 0
    57ac:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
	return errorCode;	
}	
    57b0:	8f 2d       	mov	r24, r15
    57b2:	df 91       	pop	r29
    57b4:	cf 91       	pop	r28
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	ff 90       	pop	r15
    57bc:	08 95       	ret

000057be <SD_write_block>:
	}
	return SDHC_DUMMY_BYTE;
}

//the following command writes one sector to the sdhc card
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
    57be:	6f 92       	push	r6
    57c0:	7f 92       	push	r7
    57c2:	8f 92       	push	r8
    57c4:	9f 92       	push	r9
    57c6:	af 92       	push	r10
    57c8:	bf 92       	push	r11
    57ca:	cf 92       	push	r12
    57cc:	df 92       	push	r13
    57ce:	ef 92       	push	r14
    57d0:	ff 92       	push	r15
    57d2:	0f 93       	push	r16
    57d4:	1f 93       	push	r17
    57d6:	cf 93       	push	r28
    57d8:	df 93       	push	r29
    57da:	4b 01       	movw	r8, r22
    57dc:	5c 01       	movw	r10, r24
    57de:	74 2e       	mov	r7, r20
    57e0:	65 2e       	mov	r6, r21
    57e2:	69 01       	movw	r12, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    57e4:	88 e0       	ldi	r24, 0x08	; 8
    57e6:	60 e0       	ldi	r22, 0x00	; 0
    57e8:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    57f2:	81 e0       	ldi	r24, 0x01	; 1
    57f4:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
    57f8:	80 e0       	ldi	r24, 0x00	; 0
    57fa:	92 e0       	ldi	r25, 0x02	; 2
    57fc:	7c 01       	movw	r14, r24
    57fe:	ec 18       	sub	r14, r12
    5800:	fd 08       	sbc	r15, r13
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    5802:	80 e0       	ldi	r24, 0x00	; 0
    5804:	e8 16       	cp	r14, r24
    5806:	82 e0       	ldi	r24, 0x02	; 2
    5808:	f8 06       	cpc	r15, r24
    580a:	11 f4       	brne	.+4      	; 0x5810 <SD_write_block+0x52>
    580c:	ee 24       	eor	r14, r14
    580e:	ff 24       	eor	r15, r15
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    5810:	cb e0       	ldi	r28, 0x0B	; 11
    5812:	d0 e0       	ldi	r29, 0x00	; 0
    5814:	03 c0       	rjmp	.+6      	; 0x581c <SD_write_block+0x5e>
    5816:	21 97       	sbiw	r28, 0x01	; 1
	if (i >= 10) {
    5818:	09 f4       	brne	.+2      	; 0x581c <SD_write_block+0x5e>
    581a:	ff cf       	rjmp	.-2      	; 0x581a <SD_write_block+0x5c>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    581c:	88 e1       	ldi	r24, 0x18	; 24
    581e:	b5 01       	movw	r22, r10
    5820:	a4 01       	movw	r20, r8
    5822:	2f ef       	ldi	r18, 0xFF	; 255
    5824:	08 e0       	ldi	r16, 0x08	; 8
    5826:	10 e0       	ldi	r17, 0x00	; 0
    5828:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
    582c:	88 23       	and	r24, r24
    582e:	99 f7       	brne	.-26     	; 0x5816 <SD_write_block+0x58>
	if (i >= 10) {
		//there was no response to the command
		while(1);
	}
}
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
    5830:	8f ef       	ldi	r24, 0xFF	; 255
    5832:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5836:	80 93 a6 50 	sts	0x50A6, r24
SPI_write(SDHC_DATA_TOKEN);	//send data token
    583a:	8e ef       	ldi	r24, 0xFE	; 254
    583c:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    5840:	1c 14       	cp	r1, r12
    5842:	1d 04       	cpc	r1, r13
    5844:	bc f4       	brge	.+46     	; 0x5874 <SD_write_block+0xb6>
    5846:	87 2c       	mov	r8, r7
    5848:	96 2c       	mov	r9, r6
    584a:	00 e0       	ldi	r16, 0x00	; 0
    584c:	10 e0       	ldi	r17, 0x00	; 0
Buffer[i%13] = SPI_write(data[i]);
    584e:	c8 01       	movw	r24, r16
    5850:	6d e0       	ldi	r22, 0x0D	; 13
    5852:	70 e0       	ldi	r23, 0x00	; 0
    5854:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    5858:	ec 01       	movw	r28, r24
    585a:	f4 01       	movw	r30, r8
    585c:	81 91       	ld	r24, Z+
    585e:	4f 01       	movw	r8, r30
    5860:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5864:	ca 55       	subi	r28, 0x5A	; 90
    5866:	df 4a       	sbci	r29, 0xAF	; 175
    5868:	88 83       	st	Y, r24
		while(1);
	}
}
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
SPI_write(SDHC_DATA_TOKEN);	//send data token
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    586a:	0f 5f       	subi	r16, 0xFF	; 255
    586c:	1f 4f       	sbci	r17, 0xFF	; 255
    586e:	0c 15       	cp	r16, r12
    5870:	1d 05       	cpc	r17, r13
    5872:	69 f7       	brne	.-38     	; 0x584e <SD_write_block+0x90>
Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    5874:	1e 14       	cp	r1, r14
    5876:	1f 04       	cpc	r1, r15
    5878:	ec f4       	brge	.+58     	; 0x58b4 <SD_write_block+0xf6>
    587a:	00 e0       	ldi	r16, 0x00	; 0
    587c:	10 e0       	ldi	r17, 0x00	; 0
	Buffer[i%13] = SPI_write(FILLER_BYTE);
    587e:	0f 2e       	mov	r0, r31
    5880:	fd e0       	ldi	r31, 0x0D	; 13
    5882:	cf 2e       	mov	r12, r31
    5884:	dd 24       	eor	r13, r13
    5886:	f0 2d       	mov	r31, r0
    5888:	0f 2e       	mov	r0, r31
    588a:	f6 ea       	ldi	r31, 0xA6	; 166
    588c:	8f 2e       	mov	r8, r31
    588e:	f0 e5       	ldi	r31, 0x50	; 80
    5890:	9f 2e       	mov	r9, r31
    5892:	f0 2d       	mov	r31, r0
    5894:	c8 01       	movw	r24, r16
    5896:	b6 01       	movw	r22, r12
    5898:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    589c:	ec 01       	movw	r28, r24
    589e:	80 e0       	ldi	r24, 0x00	; 0
    58a0:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    58a4:	c8 0d       	add	r28, r8
    58a6:	d9 1d       	adc	r29, r9
    58a8:	88 83       	st	Y, r24
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
SPI_write(SDHC_DATA_TOKEN);	//send data token
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    58aa:	0f 5f       	subi	r16, 0xFF	; 255
    58ac:	1f 4f       	sbci	r17, 0xFF	; 255
    58ae:	0e 15       	cp	r16, r14
    58b0:	1f 05       	cpc	r17, r15
    58b2:	81 f7       	brne	.-32     	; 0x5894 <SD_write_block+0xd6>
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
    58b4:	8f ef       	ldi	r24, 0xFF	; 255
    58b6:	80 93 a6 50 	sts	0x50A6, r24
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    58ba:	c0 e0       	ldi	r28, 0x00	; 0
    58bc:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
    58be:	06 ea       	ldi	r16, 0xA6	; 166
    58c0:	10 e5       	ldi	r17, 0x50	; 80
    58c2:	8f ef       	ldi	r24, 0xFF	; 255
    58c4:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    58c8:	f8 01       	movw	r30, r16
    58ca:	80 83       	st	Z, r24
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    58cc:	21 96       	adiw	r28, 0x01	; 1
    58ce:	c2 30       	cpi	r28, 0x02	; 2
    58d0:	d1 05       	cpc	r29, r1
    58d2:	bc f3       	brlt	.-18     	; 0x58c2 <SD_write_block+0x104>
    58d4:	80 81       	ld	r24, Z
    58d6:	8f 3f       	cpi	r24, 0xFF	; 255
    58d8:	a1 f3       	breq	.-24     	; 0x58c2 <SD_write_block+0x104>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
	}
	if ((Buffer[0] & SDHC_RESPONSE_STATUS_MASK) == 0x02){
    58da:	80 91 a6 50 	lds	r24, 0x50A6
		//data was written successfully
	}
	while(Buffer[0] != SDHC_DUMMY_BYTE) Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to finish internal processes
    58de:	80 91 a6 50 	lds	r24, 0x50A6
    58e2:	8f 3f       	cpi	r24, 0xFF	; 255
    58e4:	49 f0       	breq	.+18     	; 0x58f8 <SD_write_block+0x13a>
    58e6:	c6 ea       	ldi	r28, 0xA6	; 166
    58e8:	d0 e5       	ldi	r29, 0x50	; 80
    58ea:	8f ef       	ldi	r24, 0xFF	; 255
    58ec:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    58f0:	88 83       	st	Y, r24
    58f2:	88 81       	ld	r24, Y
    58f4:	8f 3f       	cpi	r24, 0xFF	; 255
    58f6:	c9 f7       	brne	.-14     	; 0x58ea <SD_write_block+0x12c>
	SPICS(FALSE);
    58f8:	80 e0       	ldi	r24, 0x00	; 0
    58fa:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    58fe:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high	
    5902:	88 e0       	ldi	r24, 0x08	; 8
    5904:	60 e0       	ldi	r22, 0x00	; 0
    5906:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
}
    590a:	df 91       	pop	r29
    590c:	cf 91       	pop	r28
    590e:	1f 91       	pop	r17
    5910:	0f 91       	pop	r16
    5912:	ff 90       	pop	r15
    5914:	ef 90       	pop	r14
    5916:	df 90       	pop	r13
    5918:	cf 90       	pop	r12
    591a:	bf 90       	pop	r11
    591c:	af 90       	pop	r10
    591e:	9f 90       	pop	r9
    5920:	8f 90       	pop	r8
    5922:	7f 90       	pop	r7
    5924:	6f 90       	pop	r6
    5926:	08 95       	ret

00005928 <SD_read_block>:

//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
    5928:	af 92       	push	r10
    592a:	bf 92       	push	r11
    592c:	cf 92       	push	r12
    592e:	df 92       	push	r13
    5930:	ef 92       	push	r14
    5932:	ff 92       	push	r15
    5934:	0f 93       	push	r16
    5936:	1f 93       	push	r17
    5938:	cf 93       	push	r28
    593a:	df 93       	push	r29
    593c:	6b 01       	movw	r12, r22
    593e:	7c 01       	movw	r14, r24
    5940:	b4 2e       	mov	r11, r20
    5942:	a5 2e       	mov	r10, r21
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5944:	88 e0       	ldi	r24, 0x08	; 8
    5946:	60 e0       	ldi	r22, 0x00	; 0
    5948:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    5958:	cb e0       	ldi	r28, 0x0B	; 11
    595a:	d0 e0       	ldi	r29, 0x00	; 0
    595c:	03 c0       	rjmp	.+6      	; 0x5964 <SD_read_block+0x3c>
    595e:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    5960:	09 f4       	brne	.+2      	; 0x5964 <SD_read_block+0x3c>
    5962:	ff cf       	rjmp	.-2      	; 0x5962 <SD_read_block+0x3a>
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    5964:	81 e1       	ldi	r24, 0x11	; 17
    5966:	b7 01       	movw	r22, r14
    5968:	a6 01       	movw	r20, r12
    596a:	2f ef       	ldi	r18, 0xFF	; 255
    596c:	08 e0       	ldi	r16, 0x08	; 8
    596e:	10 e0       	ldi	r17, 0x00	; 0
    5970:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
    5974:	88 23       	and	r24, r24
    5976:	99 f7       	brne	.-26     	; 0x595e <SD_read_block+0x36>
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
    5978:	80 91 a6 50 	lds	r24, 0x50A6
    597c:	8e 3f       	cpi	r24, 0xFE	; 254
    597e:	49 f0       	breq	.+18     	; 0x5992 <SD_read_block+0x6a>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
    5980:	c6 ea       	ldi	r28, 0xA6	; 166
    5982:	d0 e5       	ldi	r29, 0x50	; 80
    5984:	8f ef       	ldi	r24, 0xFF	; 255
    5986:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    598a:	88 83       	st	Y, r24
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
    598c:	88 81       	ld	r24, Y
    598e:	8e 3f       	cpi	r24, 0xFE	; 254
    5990:	c9 f7       	brne	.-14     	; 0x5984 <SD_read_block+0x5c>
    5992:	0b 2d       	mov	r16, r11
    5994:	1a 2d       	mov	r17, r10
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    5996:	c0 e0       	ldi	r28, 0x00	; 0
    5998:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    599a:	8f ef       	ldi	r24, 0xFF	; 255
    599c:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    59a0:	f8 01       	movw	r30, r16
    59a2:	81 93       	st	Z+, r24
    59a4:	8f 01       	movw	r16, r30
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    59a6:	21 96       	adiw	r28, 0x01	; 1
    59a8:	f2 e0       	ldi	r31, 0x02	; 2
    59aa:	c0 30       	cpi	r28, 0x00	; 0
    59ac:	df 07       	cpc	r29, r31
    59ae:	a9 f7       	brne	.-22     	; 0x599a <SD_read_block+0x72>
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
    59b0:	10 92 b2 50 	sts	0x50B2, r1
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    59b4:	80 91 b2 50 	lds	r24, 0x50B2
    59b8:	8f 3f       	cpi	r24, 0xFF	; 255
    59ba:	49 f0       	breq	.+18     	; 0x59ce <SD_read_block+0xa6>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
    59bc:	c2 eb       	ldi	r28, 0xB2	; 178
    59be:	d0 e5       	ldi	r29, 0x50	; 80
    59c0:	8f ef       	ldi	r24, 0xFF	; 255
    59c2:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    59c6:	88 83       	st	Y, r24
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    59c8:	88 81       	ld	r24, Y
    59ca:	8f 3f       	cpi	r24, 0xFF	; 255
    59cc:	c9 f7       	brne	.-14     	; 0x59c0 <SD_read_block+0x98>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
	}

	SPICS(FALSE);
    59ce:	80 e0       	ldi	r24, 0x00	; 0
    59d0:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    59d4:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    59d8:	88 e0       	ldi	r24, 0x08	; 8
    59da:	60 e0       	ldi	r22, 0x00	; 0
    59dc:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
}
    59e0:	df 91       	pop	r29
    59e2:	cf 91       	pop	r28
    59e4:	1f 91       	pop	r17
    59e6:	0f 91       	pop	r16
    59e8:	ff 90       	pop	r15
    59ea:	ef 90       	pop	r14
    59ec:	df 90       	pop	r13
    59ee:	cf 90       	pop	r12
    59f0:	bf 90       	pop	r11
    59f2:	af 90       	pop	r10
    59f4:	08 95       	ret

000059f6 <SD_write_multiple_blocks>:

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    59f6:	2f 92       	push	r2
    59f8:	3f 92       	push	r3
    59fa:	4f 92       	push	r4
    59fc:	5f 92       	push	r5
    59fe:	6f 92       	push	r6
    5a00:	7f 92       	push	r7
    5a02:	8f 92       	push	r8
    5a04:	9f 92       	push	r9
    5a06:	af 92       	push	r10
    5a08:	bf 92       	push	r11
    5a0a:	cf 92       	push	r12
    5a0c:	df 92       	push	r13
    5a0e:	ef 92       	push	r14
    5a10:	ff 92       	push	r15
    5a12:	0f 93       	push	r16
    5a14:	1f 93       	push	r17
    5a16:	cf 93       	push	r28
    5a18:	df 93       	push	r29
    5a1a:	cd b7       	in	r28, 0x3d	; 61
    5a1c:	de b7       	in	r29, 0x3e	; 62
    5a1e:	2a 97       	sbiw	r28, 0x0a	; 10
    5a20:	cd bf       	out	0x3d, r28	; 61
    5a22:	de bf       	out	0x3e, r29	; 62
    5a24:	6b 01       	movw	r12, r22
    5a26:	7c 01       	movw	r14, r24
    5a28:	4f 83       	std	Y+7, r20	; 0x07
    5a2a:	58 87       	std	Y+8, r21	; 0x08
    5a2c:	89 01       	movw	r16, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5a2e:	88 e0       	ldi	r24, 0x08	; 8
    5a30:	60 e0       	ldi	r22, 0x00	; 0
    5a32:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    5a3c:	81 e0       	ldi	r24, 0x01	; 1
    5a3e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
    5a42:	c8 01       	movw	r24, r16
    5a44:	11 23       	and	r17, r17
    5a46:	14 f4       	brge	.+4      	; 0x5a4c <SD_write_multiple_blocks+0x56>
    5a48:	81 50       	subi	r24, 0x01	; 1
    5a4a:	9e 4f       	sbci	r25, 0xFE	; 254
    5a4c:	9c 01       	movw	r18, r24
    5a4e:	23 2f       	mov	r18, r19
    5a50:	33 0f       	add	r19, r19
    5a52:	33 0b       	sbc	r19, r19
    5a54:	25 95       	asr	r18
    5a56:	2b 83       	std	Y+3, r18	; 0x03
    5a58:	3c 83       	std	Y+4, r19	; 0x04
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
    5a5a:	20 e0       	ldi	r18, 0x00	; 0
    5a5c:	32 e0       	ldi	r19, 0x02	; 2
    5a5e:	c8 01       	movw	r24, r16
    5a60:	b9 01       	movw	r22, r18
    5a62:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    5a66:	29 01       	movw	r4, r18
    5a68:	48 1a       	sub	r4, r24
    5a6a:	59 0a       	sbc	r5, r25
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    5a6c:	30 e0       	ldi	r19, 0x00	; 0
    5a6e:	43 16       	cp	r4, r19
    5a70:	32 e0       	ldi	r19, 0x02	; 2
    5a72:	53 06       	cpc	r5, r19
    5a74:	31 f0       	breq	.+12     	; 0x5a82 <SD_write_multiple_blocks+0x8c>
	else numSectors++;
    5a76:	8b 81       	ldd	r24, Y+3	; 0x03
    5a78:	9c 81       	ldd	r25, Y+4	; 0x04
    5a7a:	01 96       	adiw	r24, 0x01	; 1
    5a7c:	8b 83       	std	Y+3, r24	; 0x03
    5a7e:	9c 83       	std	Y+4, r25	; 0x04
    5a80:	02 c0       	rjmp	.+4      	; 0x5a86 <SD_write_multiple_blocks+0x90>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    5a82:	44 24       	eor	r4, r4
    5a84:	55 24       	eor	r5, r5
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
    5a86:	89 e1       	ldi	r24, 0x19	; 25
    5a88:	b7 01       	movw	r22, r14
    5a8a:	a6 01       	movw	r20, r12
    5a8c:	2f ef       	ldi	r18, 0xFF	; 255
    5a8e:	08 e0       	ldi	r16, 0x08	; 8
    5a90:	10 e0       	ldi	r17, 0x00	; 0
    5a92:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
    5a96:	88 23       	and	r24, r24
    5a98:	b1 f7       	brne	.-20     	; 0x5a86 <SD_write_multiple_blocks+0x90>
	for (int j=0;j<numSectors;j++){
    5a9a:	eb 81       	ldd	r30, Y+3	; 0x03
    5a9c:	fc 81       	ldd	r31, Y+4	; 0x04
    5a9e:	1e 16       	cp	r1, r30
    5aa0:	1f 06       	cpc	r1, r31
    5aa2:	0c f0       	brlt	.+2      	; 0x5aa6 <SD_write_multiple_blocks+0xb0>
    5aa4:	ac c0       	rjmp	.+344    	; 0x5bfe <SD_write_multiple_blocks+0x208>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    5aa6:	31 97       	sbiw	r30, 0x01	; 1
    5aa8:	ed 83       	std	Y+5, r30	; 0x05
    5aaa:	fe 83       	std	Y+6, r31	; 0x06
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    5aac:	9f 01       	movw	r18, r30
    5aae:	32 2f       	mov	r19, r18
    5ab0:	22 27       	eor	r18, r18
    5ab2:	33 0f       	add	r19, r19
    5ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ab6:	98 85       	ldd	r25, Y+8	; 0x08
    5ab8:	89 83       	std	Y+1, r24	; 0x01
    5aba:	9a 83       	std	Y+2, r25	; 0x02
    5abc:	66 24       	eor	r6, r6
    5abe:	77 24       	eor	r7, r7
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    5ac0:	0f 2e       	mov	r0, r31
    5ac2:	f7 ea       	ldi	r31, 0xA7	; 167
    5ac4:	8f 2e       	mov	r8, r31
    5ac6:	f0 e5       	ldi	r31, 0x50	; 80
    5ac8:	9f 2e       	mov	r9, r31
    5aca:	f0 2d       	mov	r31, r0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    5acc:	0f 2e       	mov	r0, r31
    5ace:	fc e0       	ldi	r31, 0x0C	; 12
    5ad0:	cf 2e       	mov	r12, r31
    5ad2:	dd 24       	eor	r13, r13
    5ad4:	f0 2d       	mov	r31, r0
    5ad6:	0f 2e       	mov	r0, r31
    5ad8:	f6 ea       	ldi	r31, 0xA6	; 166
    5ada:	af 2e       	mov	r10, r31
    5adc:	f0 e5       	ldi	r31, 0x50	; 80
    5ade:	bf 2e       	mov	r11, r31
    5ae0:	f0 2d       	mov	r31, r0
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    5ae2:	80 e0       	ldi	r24, 0x00	; 0
    5ae4:	92 e0       	ldi	r25, 0x02	; 2
    5ae6:	1c 01       	movw	r2, r24
    5ae8:	24 18       	sub	r2, r4
    5aea:	35 08       	sbc	r3, r5
	SPIDisable();
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
}

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    5aec:	ef 81       	ldd	r30, Y+7	; 0x07
    5aee:	f8 85       	ldd	r31, Y+8	; 0x08
    5af0:	e2 0f       	add	r30, r18
    5af2:	f3 1f       	adc	r31, r19
    5af4:	ef 83       	std	Y+7, r30	; 0x07
    5af6:	f8 87       	std	Y+8, r31	; 0x08
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    5af8:	8f ef       	ldi	r24, 0xFF	; 255
    5afa:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5afe:	f4 01       	movw	r30, r8
    5b00:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
    5b02:	8c ef       	ldi	r24, 0xFC	; 252
    5b04:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5b08:	f4 01       	movw	r30, r8
    5b0a:	80 83       	st	Z, r24
		if(j == (numSectors-1)){
    5b0c:	2d 81       	ldd	r18, Y+5	; 0x05
    5b0e:	3e 81       	ldd	r19, Y+6	; 0x06
    5b10:	26 15       	cp	r18, r6
    5b12:	37 05       	cpc	r19, r7
    5b14:	09 f0       	breq	.+2      	; 0x5b18 <SD_write_multiple_blocks+0x122>
    5b16:	41 c0       	rjmp	.+130    	; 0x5b9a <SD_write_multiple_blocks+0x1a4>
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    5b18:	12 14       	cp	r1, r2
    5b1a:	13 04       	cpc	r1, r3
    5b1c:	cc f4       	brge	.+50     	; 0x5b50 <SD_write_multiple_blocks+0x15a>
	SPIDisable();
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
}

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    5b1e:	ef 80       	ldd	r14, Y+7	; 0x07
    5b20:	f8 84       	ldd	r15, Y+8	; 0x08
    5b22:	00 e0       	ldi	r16, 0x00	; 0
    5b24:	10 e0       	ldi	r17, 0x00	; 0
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    5b26:	c8 01       	movw	r24, r16
    5b28:	b6 01       	movw	r22, r12
    5b2a:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    5b2e:	89 87       	std	Y+9, r24	; 0x09
    5b30:	9a 87       	std	Y+10, r25	; 0x0a
    5b32:	f7 01       	movw	r30, r14
    5b34:	81 91       	ld	r24, Z+
    5b36:	7f 01       	movw	r14, r30
    5b38:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5b3c:	e9 85       	ldd	r30, Y+9	; 0x09
    5b3e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5b40:	ea 0d       	add	r30, r10
    5b42:	fb 1d       	adc	r31, r11
    5b44:	80 83       	st	Z, r24
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    5b46:	0f 5f       	subi	r16, 0xFF	; 255
    5b48:	1f 4f       	sbci	r17, 0xFF	; 255
    5b4a:	02 15       	cp	r16, r2
    5b4c:	13 05       	cpc	r17, r3
    5b4e:	59 f7       	brne	.-42     	; 0x5b26 <SD_write_multiple_blocks+0x130>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    5b50:	14 14       	cp	r1, r4
    5b52:	15 04       	cpc	r1, r5
    5b54:	9c f4       	brge	.+38     	; 0x5b7c <SD_write_multiple_blocks+0x186>
    5b56:	00 e0       	ldi	r16, 0x00	; 0
    5b58:	10 e0       	ldi	r17, 0x00	; 0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
    5b5a:	c8 01       	movw	r24, r16
    5b5c:	b6 01       	movw	r22, r12
    5b5e:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    5b62:	7c 01       	movw	r14, r24
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5b6a:	f5 01       	movw	r30, r10
    5b6c:	ee 0d       	add	r30, r14
    5b6e:	ff 1d       	adc	r31, r15
    5b70:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    5b72:	0f 5f       	subi	r16, 0xFF	; 255
    5b74:	1f 4f       	sbci	r17, 0xFF	; 255
    5b76:	04 15       	cp	r16, r4
    5b78:	15 05       	cpc	r17, r5
    5b7a:	79 f7       	brne	.-34     	; 0x5b5a <SD_write_multiple_blocks+0x164>
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
    5b7c:	8f ef       	ldi	r24, 0xFF	; 255
    5b7e:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5b82:	f4 01       	movw	r30, r8
    5b84:	80 83       	st	Z, r24
    5b86:	8f ef       	ldi	r24, 0xFF	; 255
    5b88:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5b8c:	f4 01       	movw	r30, r8
    5b8e:	80 83       	st	Z, r24
		Buffer[1] = FILLER_BYTE;
    5b90:	10 82       	st	Z, r1
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
    5b92:	80 81       	ld	r24, Z
    5b94:	8f 3f       	cpi	r24, 0xFF	; 255
    5b96:	e1 f4       	brne	.+56     	; 0x5bd0 <SD_write_multiple_blocks+0x1da>
    5b98:	23 c0       	rjmp	.+70     	; 0x5be0 <SD_write_multiple_blocks+0x1ea>
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    5b9a:	e9 80       	ldd	r14, Y+1	; 0x01
    5b9c:	fa 80       	ldd	r15, Y+2	; 0x02
    5b9e:	00 e0       	ldi	r16, 0x00	; 0
    5ba0:	10 e0       	ldi	r17, 0x00	; 0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    5ba2:	c8 01       	movw	r24, r16
    5ba4:	b6 01       	movw	r22, r12
    5ba6:	0e 94 6d 3a 	call	0x74da	; 0x74da <__divmodhi4>
    5baa:	89 87       	std	Y+9, r24	; 0x09
    5bac:	9a 87       	std	Y+10, r25	; 0x0a
    5bae:	f7 01       	movw	r30, r14
    5bb0:	81 91       	ld	r24, Z+
    5bb2:	7f 01       	movw	r14, r30
    5bb4:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5bb8:	e9 85       	ldd	r30, Y+9	; 0x09
    5bba:	fa 85       	ldd	r31, Y+10	; 0x0a
    5bbc:	ea 0d       	add	r30, r10
    5bbe:	fb 1d       	adc	r31, r11
    5bc0:	80 83       	st	Z, r24
			for (int i=0;i<fillerBytes;i++){
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    5bc2:	0f 5f       	subi	r16, 0xFF	; 255
    5bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc6:	f2 e0       	ldi	r31, 0x02	; 2
    5bc8:	00 30       	cpi	r16, 0x00	; 0
    5bca:	1f 07       	cpc	r17, r31
    5bcc:	51 f7       	brne	.-44     	; 0x5ba2 <SD_write_multiple_blocks+0x1ac>
    5bce:	d6 cf       	rjmp	.-84     	; 0x5b7c <SD_write_multiple_blocks+0x186>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
    5bd0:	8f ef       	ldi	r24, 0xFF	; 255
    5bd2:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5bd6:	f4 01       	movw	r30, r8
    5bd8:	80 83       	st	Z, r24
    5bda:	80 81       	ld	r24, Z
    5bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    5bde:	c1 f7       	brne	.-16     	; 0x5bd0 <SD_write_multiple_blocks+0x1da>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
    5be0:	08 94       	sec
    5be2:	61 1c       	adc	r6, r1
    5be4:	71 1c       	adc	r7, r1
    5be6:	29 81       	ldd	r18, Y+1	; 0x01
    5be8:	3a 81       	ldd	r19, Y+2	; 0x02
    5bea:	20 50       	subi	r18, 0x00	; 0
    5bec:	3e 4f       	sbci	r19, 0xFE	; 254
    5bee:	29 83       	std	Y+1, r18	; 0x01
    5bf0:	3a 83       	std	Y+2, r19	; 0x02
    5bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    5bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    5bf6:	68 16       	cp	r6, r24
    5bf8:	79 06       	cpc	r7, r25
    5bfa:	09 f0       	breq	.+2      	; 0x5bfe <SD_write_multiple_blocks+0x208>
    5bfc:	7d cf       	rjmp	.-262    	; 0x5af8 <SD_write_multiple_blocks+0x102>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    5bfe:	ee 24       	eor	r14, r14
    5c00:	ff 24       	eor	r15, r15
    5c02:	68 94       	set
    5c04:	e2 f8       	bld	r14, 2
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    5c06:	07 ea       	ldi	r16, 0xA7	; 167
    5c08:	10 e5       	ldi	r17, 0x50	; 80
    5c0a:	8f ef       	ldi	r24, 0xFF	; 255
    5c0c:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5c10:	f8 01       	movw	r30, r16
    5c12:	80 83       	st	Z, r24
    5c14:	08 94       	sec
    5c16:	e1 08       	sbc	r14, r1
    5c18:	f1 08       	sbc	r15, r1
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
	}
	for(int i=0;i<4;i++){
    5c1a:	e1 14       	cp	r14, r1
    5c1c:	f1 04       	cpc	r15, r1
    5c1e:	a9 f7       	brne	.-22     	; 0x5c0a <SD_write_multiple_blocks+0x214>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
    5c20:	8d ef       	ldi	r24, 0xFD	; 253
    5c22:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5c26:	80 93 a7 50 	sts	0x50A7, r24
    5c2a:	ee 24       	eor	r14, r14
    5c2c:	ff 24       	eor	r15, r15
    5c2e:	68 94       	set
    5c30:	e2 f8       	bld	r14, 2
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    5c32:	07 ea       	ldi	r16, 0xA7	; 167
    5c34:	10 e5       	ldi	r17, 0x50	; 80
    5c36:	8f ef       	ldi	r24, 0xFF	; 255
    5c38:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5c3c:	f8 01       	movw	r30, r16
    5c3e:	80 83       	st	Z, r24
    5c40:	08 94       	sec
    5c42:	e1 08       	sbc	r14, r1
    5c44:	f1 08       	sbc	r15, r1
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
	for(int i=0;i<4;i++){
    5c46:	e1 14       	cp	r14, r1
    5c48:	f1 04       	cpc	r15, r1
    5c4a:	a9 f7       	brne	.-22     	; 0x5c36 <SD_write_multiple_blocks+0x240>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = FILLER_BYTE;
    5c4c:	10 92 a7 50 	sts	0x50A7, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    5c50:	80 91 a7 50 	lds	r24, 0x50A7
    5c54:	8f 3f       	cpi	r24, 0xFF	; 255
    5c56:	51 f0       	breq	.+20     	; 0x5c6c <SD_write_multiple_blocks+0x276>
    5c58:	07 ea       	ldi	r16, 0xA7	; 167
    5c5a:	10 e5       	ldi	r17, 0x50	; 80
    5c5c:	8f ef       	ldi	r24, 0xFF	; 255
    5c5e:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5c62:	f8 01       	movw	r30, r16
    5c64:	80 83       	st	Z, r24
    5c66:	80 81       	ld	r24, Z
    5c68:	8f 3f       	cpi	r24, 0xFF	; 255
    5c6a:	c1 f7       	brne	.-16     	; 0x5c5c <SD_write_multiple_blocks+0x266>
	SPICS(FALSE);
    5c6c:	80 e0       	ldi	r24, 0x00	; 0
    5c6e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    5c72:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    5c76:	88 e0       	ldi	r24, 0x08	; 8
    5c78:	60 e0       	ldi	r22, 0x00	; 0
    5c7a:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
}
    5c7e:	2a 96       	adiw	r28, 0x0a	; 10
    5c80:	cd bf       	out	0x3d, r28	; 61
    5c82:	de bf       	out	0x3e, r29	; 62
    5c84:	df 91       	pop	r29
    5c86:	cf 91       	pop	r28
    5c88:	1f 91       	pop	r17
    5c8a:	0f 91       	pop	r16
    5c8c:	ff 90       	pop	r15
    5c8e:	ef 90       	pop	r14
    5c90:	df 90       	pop	r13
    5c92:	cf 90       	pop	r12
    5c94:	bf 90       	pop	r11
    5c96:	af 90       	pop	r10
    5c98:	9f 90       	pop	r9
    5c9a:	8f 90       	pop	r8
    5c9c:	7f 90       	pop	r7
    5c9e:	6f 90       	pop	r6
    5ca0:	5f 90       	pop	r5
    5ca2:	4f 90       	pop	r4
    5ca4:	3f 90       	pop	r3
    5ca6:	2f 90       	pop	r2
    5ca8:	08 95       	ret

00005caa <SD_read_multiple_blocks>:
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
    5caa:	2f 92       	push	r2
    5cac:	3f 92       	push	r3
    5cae:	4f 92       	push	r4
    5cb0:	5f 92       	push	r5
    5cb2:	6f 92       	push	r6
    5cb4:	7f 92       	push	r7
    5cb6:	8f 92       	push	r8
    5cb8:	9f 92       	push	r9
    5cba:	af 92       	push	r10
    5cbc:	bf 92       	push	r11
    5cbe:	cf 92       	push	r12
    5cc0:	df 92       	push	r13
    5cc2:	ef 92       	push	r14
    5cc4:	ff 92       	push	r15
    5cc6:	0f 93       	push	r16
    5cc8:	1f 93       	push	r17
    5cca:	cf 93       	push	r28
    5ccc:	df 93       	push	r29
    5cce:	6b 01       	movw	r12, r22
    5cd0:	7c 01       	movw	r14, r24
    5cd2:	c4 2f       	mov	r28, r20
    5cd4:	85 2e       	mov	r8, r21
    5cd6:	39 01       	movw	r6, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5cd8:	88 e0       	ldi	r24, 0x08	; 8
    5cda:	60 e0       	ldi	r22, 0x00	; 0
    5cdc:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    5ce0:	80 e0       	ldi	r24, 0x00	; 0
    5ce2:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    5ce6:	81 e0       	ldi	r24, 0x01	; 1
    5ce8:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
    5cec:	82 e1       	ldi	r24, 0x12	; 18
    5cee:	b7 01       	movw	r22, r14
    5cf0:	a6 01       	movw	r20, r12
    5cf2:	2f ef       	ldi	r18, 0xFF	; 255
    5cf4:	08 e0       	ldi	r16, 0x08	; 8
    5cf6:	10 e0       	ldi	r17, 0x00	; 0
    5cf8:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
    5cfc:	88 23       	and	r24, r24
    5cfe:	b1 f7       	brne	.-20     	; 0x5cec <SD_read_multiple_blocks+0x42>
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    5d00:	16 14       	cp	r1, r6
    5d02:	17 04       	cpc	r1, r7
    5d04:	0c f0       	brlt	.+2      	; 0x5d08 <SD_read_multiple_blocks+0x5e>
    5d06:	46 c0       	rjmp	.+140    	; 0x5d94 <SD_read_multiple_blocks+0xea>
    5d08:	ac 2e       	mov	r10, r28
    5d0a:	b8 2c       	mov	r11, r8
    5d0c:	88 24       	eor	r8, r8
    5d0e:	99 24       	eor	r9, r9
		Buffer[1]=SDHC_DUMMY_BYTE;
    5d10:	0f 2e       	mov	r0, r31
    5d12:	f7 ea       	ldi	r31, 0xA7	; 167
    5d14:	cf 2e       	mov	r12, r31
    5d16:	f0 e5       	ldi	r31, 0x50	; 80
    5d18:	df 2e       	mov	r13, r31
    5d1a:	f0 2d       	mov	r31, r0
    5d1c:	ff 24       	eor	r15, r15
    5d1e:	fa 94       	dec	r15
    5d20:	ef 2c       	mov	r14, r15
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    5d22:	0f 2e       	mov	r0, r31
    5d24:	f6 ea       	ldi	r31, 0xA6	; 166
    5d26:	4f 2e       	mov	r4, r31
    5d28:	f0 e5       	ldi	r31, 0x50	; 80
    5d2a:	5f 2e       	mov	r5, r31
    5d2c:	f0 2d       	mov	r31, r0
    5d2e:	12 01       	movw	r2, r4
    5d30:	08 94       	sec
    5d32:	21 1c       	adc	r2, r1
    5d34:	31 1c       	adc	r3, r1
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
    5d36:	f6 01       	movw	r30, r12
    5d38:	e0 82       	st	Z, r14
		while(Buffer[1] != SDHC_DATA_TOKEN){
    5d3a:	80 81       	ld	r24, Z
    5d3c:	8e 3f       	cpi	r24, 0xFE	; 254
    5d3e:	41 f0       	breq	.+16     	; 0x5d50 <SD_read_multiple_blocks+0xa6>
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
    5d40:	8f 2d       	mov	r24, r15
    5d42:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5d46:	f6 01       	movw	r30, r12
    5d48:	80 83       	st	Z, r24
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
    5d4a:	80 81       	ld	r24, Z
    5d4c:	8e 3f       	cpi	r24, 0xFE	; 254
    5d4e:	c1 f7       	brne	.-16     	; 0x5d40 <SD_read_multiple_blocks+0x96>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    5d50:	85 01       	movw	r16, r10
    5d52:	c0 e0       	ldi	r28, 0x00	; 0
    5d54:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    5d56:	8f 2d       	mov	r24, r15
    5d58:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5d5c:	f8 01       	movw	r30, r16
    5d5e:	81 93       	st	Z+, r24
    5d60:	8f 01       	movw	r16, r30
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    5d62:	21 96       	adiw	r28, 0x01	; 1
    5d64:	f2 e0       	ldi	r31, 0x02	; 2
    5d66:	c0 30       	cpi	r28, 0x00	; 0
    5d68:	df 07       	cpc	r29, r31
    5d6a:	a9 f7       	brne	.-22     	; 0x5d56 <SD_read_multiple_blocks+0xac>
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    5d6c:	8f 2d       	mov	r24, r15
    5d6e:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5d72:	f2 01       	movw	r30, r4
    5d74:	80 83       	st	Z, r24
    5d76:	8f 2d       	mov	r24, r15
    5d78:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5d7c:	f1 01       	movw	r30, r2
    5d7e:	80 83       	st	Z, r24
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    5d80:	08 94       	sec
    5d82:	81 1c       	adc	r8, r1
    5d84:	91 1c       	adc	r9, r1
    5d86:	80 e0       	ldi	r24, 0x00	; 0
    5d88:	92 e0       	ldi	r25, 0x02	; 2
    5d8a:	a8 0e       	add	r10, r24
    5d8c:	b9 1e       	adc	r11, r25
    5d8e:	86 14       	cp	r8, r6
    5d90:	97 04       	cpc	r9, r7
    5d92:	89 f6       	brne	.-94     	; 0x5d36 <SD_read_multiple_blocks+0x8c>
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
		}
	}
	SD_command(SDHC_CMD_STOP_TRANSMISSION,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//send command to stop reading data
    5d94:	8c e0       	ldi	r24, 0x0C	; 12
    5d96:	40 e0       	ldi	r20, 0x00	; 0
    5d98:	50 e0       	ldi	r21, 0x00	; 0
    5d9a:	ba 01       	movw	r22, r20
    5d9c:	2f ef       	ldi	r18, 0xFF	; 255
    5d9e:	08 e0       	ldi	r16, 0x08	; 8
    5da0:	10 e0       	ldi	r17, 0x00	; 0
    5da2:	0e 94 a4 2a 	call	0x5548	; 0x5548 <SD_command>
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//read the stuff byte
    5da6:	8f ef       	ldi	r24, 0xFF	; 255
    5da8:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5dac:	80 93 a6 50 	sts	0x50A6, r24
	Buffer[1] = FILLER_BYTE;
    5db0:	10 92 a7 50 	sts	0x50A7, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    5db4:	80 91 a7 50 	lds	r24, 0x50A7
    5db8:	8f 3f       	cpi	r24, 0xFF	; 255
    5dba:	49 f0       	breq	.+18     	; 0x5dce <SD_read_multiple_blocks+0x124>
    5dbc:	c7 ea       	ldi	r28, 0xA7	; 167
    5dbe:	d0 e5       	ldi	r29, 0x50	; 80
    5dc0:	8f ef       	ldi	r24, 0xFF	; 255
    5dc2:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
    5dc6:	88 83       	st	Y, r24
    5dc8:	88 81       	ld	r24, Y
    5dca:	8f 3f       	cpi	r24, 0xFF	; 255
    5dcc:	c9 f7       	brne	.-14     	; 0x5dc0 <SD_read_multiple_blocks+0x116>
	SPICS(FALSE);
    5dce:	80 e0       	ldi	r24, 0x00	; 0
    5dd0:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    5dd4:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    5dd8:	88 e0       	ldi	r24, 0x08	; 8
    5dda:	60 e0       	ldi	r22, 0x00	; 0
    5ddc:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
}
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	1f 91       	pop	r17
    5de6:	0f 91       	pop	r16
    5de8:	ff 90       	pop	r15
    5dea:	ef 90       	pop	r14
    5dec:	df 90       	pop	r13
    5dee:	cf 90       	pop	r12
    5df0:	bf 90       	pop	r11
    5df2:	af 90       	pop	r10
    5df4:	9f 90       	pop	r9
    5df6:	8f 90       	pop	r8
    5df8:	7f 90       	pop	r7
    5dfa:	6f 90       	pop	r6
    5dfc:	5f 90       	pop	r5
    5dfe:	4f 90       	pop	r4
    5e00:	3f 90       	pop	r3
    5e02:	2f 90       	pop	r2
    5e04:	08 95       	ret

00005e06 <SD_disable>:
//this function deselects the sd card and turns off power to the port expander and the sd card
void SD_disable(){
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //pull SD card CS high
    5e06:	88 e0       	ldi	r24, 0x08	; 8
    5e08:	60 e0       	ldi	r22, 0x00	; 0
    5e0a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);
    5e0e:	88 e0       	ldi	r24, 0x08	; 8
    5e10:	60 e0       	ldi	r22, 0x00	; 0
    5e12:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <PortEx_OUTSET>
	SPIInit(SPI_MODE_0_gc);
    5e16:	80 e0       	ldi	r24, 0x00	; 0
    5e18:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SPIInit>
	SPICS(TRUE);
    5e1c:	81 e0       	ldi	r24, 0x01	; 1
    5e1e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPI_write(SDHC_DUMMY_BYTE);	//must write a byte to spi when cd card cs is high to have sd card release MISO line
    5e22:	8f ef       	ldi	r24, 0xFF	; 255
    5e24:	0e 94 9a 2a 	call	0x5534	; 0x5534 <SPI_write>
	SPICS(FALSE);	//stop spi
    5e28:	80 e0       	ldi	r24, 0x00	; 0
    5e2a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <SPICS>
	SPIDisable();
    5e2e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <SPIDisable>
	
	ADCPower(FALSE);		//turn off portEX power
    5e32:	80 e0       	ldi	r24, 0x00	; 0
    5e34:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADCPower>
	Ext1Power(FALSE);			//power down SD card
    5e38:	80 e0       	ldi	r24, 0x00	; 0
    5e3a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Ext1Power>
}
    5e3e:	08 95       	ret

00005e40 <__muldi3>:
    5e40:	a0 e3       	ldi	r26, 0x30	; 48
    5e42:	b0 e0       	ldi	r27, 0x00	; 0
    5e44:	e6 e2       	ldi	r30, 0x26	; 38
    5e46:	ff e2       	ldi	r31, 0x2F	; 47
    5e48:	0c 94 bf 3a 	jmp	0x757e	; 0x757e <__prologue_saves__+0x4>
    5e4c:	29 8f       	std	Y+25, r18	; 0x19
    5e4e:	3a 8f       	std	Y+26, r19	; 0x1a
    5e50:	4b 8f       	std	Y+27, r20	; 0x1b
    5e52:	5c 8f       	std	Y+28, r21	; 0x1c
    5e54:	6d 8f       	std	Y+29, r22	; 0x1d
    5e56:	7e 8f       	std	Y+30, r23	; 0x1e
    5e58:	8f 8f       	std	Y+31, r24	; 0x1f
    5e5a:	98 a3       	lds	r25, 0x58
    5e5c:	a9 8a       	std	Y+17, r10	; 0x11
    5e5e:	ba 8a       	std	Y+18, r11	; 0x12
    5e60:	cb 8a       	std	Y+19, r12	; 0x13
    5e62:	dc 8a       	std	Y+20, r13	; 0x14
    5e64:	ed 8a       	std	Y+21, r14	; 0x15
    5e66:	fe 8a       	std	Y+22, r15	; 0x16
    5e68:	0f 8b       	std	Y+23, r16	; 0x17
    5e6a:	18 8f       	std	Y+24, r17	; 0x18
    5e6c:	09 8d       	ldd	r16, Y+25	; 0x19
    5e6e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    5e70:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5e72:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5e74:	09 a3       	lds	r16, 0x59
    5e76:	1a a3       	lds	r17, 0x5a
    5e78:	2b a3       	lds	r18, 0x5b
    5e7a:	3c a3       	lds	r19, 0x5c
    5e7c:	68 01       	movw	r12, r16
    5e7e:	79 01       	movw	r14, r18
    5e80:	8f ef       	ldi	r24, 0xFF	; 255
    5e82:	9f ef       	ldi	r25, 0xFF	; 255
    5e84:	a0 e0       	ldi	r26, 0x00	; 0
    5e86:	b0 e0       	ldi	r27, 0x00	; 0
    5e88:	c8 22       	and	r12, r24
    5e8a:	d9 22       	and	r13, r25
    5e8c:	ea 22       	and	r14, r26
    5e8e:	fb 22       	and	r15, r27
    5e90:	89 01       	movw	r16, r18
    5e92:	22 27       	eor	r18, r18
    5e94:	33 27       	eor	r19, r19
    5e96:	09 a7       	lds	r16, 0x79
    5e98:	1a a7       	lds	r17, 0x7a
    5e9a:	2b a7       	lds	r18, 0x7b
    5e9c:	3c a7       	lds	r19, 0x7c
    5e9e:	09 89       	ldd	r16, Y+17	; 0x11
    5ea0:	1a 89       	ldd	r17, Y+18	; 0x12
    5ea2:	2b 89       	ldd	r18, Y+19	; 0x13
    5ea4:	3c 89       	ldd	r19, Y+20	; 0x14
    5ea6:	0d a3       	lds	r16, 0x5d
    5ea8:	1e a3       	lds	r17, 0x5e
    5eaa:	2f a3       	lds	r18, 0x5f
    5eac:	38 a7       	lds	r19, 0x78
    5eae:	48 01       	movw	r8, r16
    5eb0:	59 01       	movw	r10, r18
    5eb2:	88 22       	and	r8, r24
    5eb4:	99 22       	and	r9, r25
    5eb6:	aa 22       	and	r10, r26
    5eb8:	bb 22       	and	r11, r27
    5eba:	29 01       	movw	r4, r18
    5ebc:	66 24       	eor	r6, r6
    5ebe:	77 24       	eor	r7, r7
    5ec0:	c5 01       	movw	r24, r10
    5ec2:	b4 01       	movw	r22, r8
    5ec4:	a7 01       	movw	r20, r14
    5ec6:	96 01       	movw	r18, r12
    5ec8:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    5ecc:	6d a7       	lds	r22, 0x7d
    5ece:	7e a7       	lds	r23, 0x7e
    5ed0:	8f a7       	lds	r24, 0x7f
    5ed2:	98 ab       	sts	0x58, r25
    5ed4:	c3 01       	movw	r24, r6
    5ed6:	b2 01       	movw	r22, r4
    5ed8:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    5edc:	6b 01       	movw	r12, r22
    5ede:	7c 01       	movw	r14, r24
    5ee0:	c5 01       	movw	r24, r10
    5ee2:	b4 01       	movw	r22, r8
    5ee4:	29 a5       	lds	r18, 0x69
    5ee6:	3a a5       	lds	r19, 0x6a
    5ee8:	4b a5       	lds	r20, 0x6b
    5eea:	5c a5       	lds	r21, 0x6c
    5eec:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    5ef0:	4b 01       	movw	r8, r22
    5ef2:	5c 01       	movw	r10, r24
    5ef4:	c3 01       	movw	r24, r6
    5ef6:	b2 01       	movw	r22, r4
    5ef8:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    5efc:	ab 01       	movw	r20, r22
    5efe:	bc 01       	movw	r22, r24
    5f00:	c8 0c       	add	r12, r8
    5f02:	d9 1c       	adc	r13, r9
    5f04:	ea 1c       	adc	r14, r10
    5f06:	fb 1c       	adc	r15, r11
    5f08:	0d a5       	lds	r16, 0x6d
    5f0a:	1e a5       	lds	r17, 0x6e
    5f0c:	2f a5       	lds	r18, 0x6f
    5f0e:	38 a9       	sts	0x48, r19
    5f10:	c9 01       	movw	r24, r18
    5f12:	aa 27       	eor	r26, r26
    5f14:	bb 27       	eor	r27, r27
    5f16:	c8 0e       	add	r12, r24
    5f18:	d9 1e       	adc	r13, r25
    5f1a:	ea 1e       	adc	r14, r26
    5f1c:	fb 1e       	adc	r15, r27
    5f1e:	c8 14       	cp	r12, r8
    5f20:	d9 04       	cpc	r13, r9
    5f22:	ea 04       	cpc	r14, r10
    5f24:	fb 04       	cpc	r15, r11
    5f26:	20 f4       	brcc	.+8      	; 0x5f30 <__muldi3+0xf0>
    5f28:	40 50       	subi	r20, 0x00	; 0
    5f2a:	50 40       	sbci	r21, 0x00	; 0
    5f2c:	6f 4f       	sbci	r22, 0xFF	; 255
    5f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f30:	c7 01       	movw	r24, r14
    5f32:	aa 27       	eor	r26, r26
    5f34:	bb 27       	eor	r27, r27
    5f36:	84 0f       	add	r24, r20
    5f38:	95 1f       	adc	r25, r21
    5f3a:	a6 1f       	adc	r26, r22
    5f3c:	b7 1f       	adc	r27, r23
    5f3e:	8d 83       	std	Y+5, r24	; 0x05
    5f40:	9e 83       	std	Y+6, r25	; 0x06
    5f42:	af 83       	std	Y+7, r26	; 0x07
    5f44:	b8 87       	std	Y+8, r27	; 0x08
    5f46:	76 01       	movw	r14, r12
    5f48:	dd 24       	eor	r13, r13
    5f4a:	cc 24       	eor	r12, r12
    5f4c:	4d a5       	lds	r20, 0x6d
    5f4e:	5e a5       	lds	r21, 0x6e
    5f50:	6f a5       	lds	r22, 0x6f
    5f52:	78 a9       	sts	0x48, r23
    5f54:	60 70       	andi	r22, 0x00	; 0
    5f56:	70 70       	andi	r23, 0x00	; 0
    5f58:	c4 0e       	add	r12, r20
    5f5a:	d5 1e       	adc	r13, r21
    5f5c:	e6 1e       	adc	r14, r22
    5f5e:	f7 1e       	adc	r15, r23
    5f60:	c9 82       	std	Y+1, r12	; 0x01
    5f62:	da 82       	std	Y+2, r13	; 0x02
    5f64:	eb 82       	std	Y+3, r14	; 0x03
    5f66:	fc 82       	std	Y+4, r15	; 0x04
    5f68:	1c 2d       	mov	r17, r12
    5f6a:	0a 81       	ldd	r16, Y+2	; 0x02
    5f6c:	8b 80       	ldd	r8, Y+3	; 0x03
    5f6e:	4c 80       	ldd	r4, Y+4	; 0x04
    5f70:	8d 87       	std	Y+13, r24	; 0x0d
    5f72:	8e 81       	ldd	r24, Y+6	; 0x06
    5f74:	8e 87       	std	Y+14, r24	; 0x0e
    5f76:	8f 81       	ldd	r24, Y+7	; 0x07
    5f78:	8f 87       	std	Y+15, r24	; 0x0f
    5f7a:	88 85       	ldd	r24, Y+8	; 0x08
    5f7c:	88 8b       	std	Y+16, r24	; 0x10
    5f7e:	2d 89       	ldd	r18, Y+21	; 0x15
    5f80:	3e 89       	ldd	r19, Y+22	; 0x16
    5f82:	4f 89       	ldd	r20, Y+23	; 0x17
    5f84:	58 8d       	ldd	r21, Y+24	; 0x18
    5f86:	69 a1       	lds	r22, 0x49
    5f88:	7a a1       	lds	r23, 0x4a
    5f8a:	8b a1       	lds	r24, 0x4b
    5f8c:	9c a1       	lds	r25, 0x4c
    5f8e:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    5f92:	6b 01       	movw	r12, r22
    5f94:	7c 01       	movw	r14, r24
    5f96:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5f98:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5f9a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5f9c:	58 a1       	lds	r21, 0x48
    5f9e:	6d a1       	lds	r22, 0x4d
    5fa0:	7e a1       	lds	r23, 0x4e
    5fa2:	8f a1       	lds	r24, 0x4f
    5fa4:	98 a5       	lds	r25, 0x68
    5fa6:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    5faa:	dc 01       	movw	r26, r24
    5fac:	cb 01       	movw	r24, r22
    5fae:	c8 0e       	add	r12, r24
    5fb0:	d9 1e       	adc	r13, r25
    5fb2:	ea 1e       	adc	r14, r26
    5fb4:	fb 1e       	adc	r15, r27
    5fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fba:	af 85       	ldd	r26, Y+15	; 0x0f
    5fbc:	b8 89       	ldd	r27, Y+16	; 0x10
    5fbe:	8c 0d       	add	r24, r12
    5fc0:	9d 1d       	adc	r25, r13
    5fc2:	ae 1d       	adc	r26, r14
    5fc4:	bf 1d       	adc	r27, r15
    5fc6:	8d 87       	std	Y+13, r24	; 0x0d
    5fc8:	9e 87       	std	Y+14, r25	; 0x0e
    5fca:	af 87       	std	Y+15, r26	; 0x0f
    5fcc:	b8 8b       	std	Y+16, r27	; 0x10
    5fce:	68 2f       	mov	r22, r24
    5fd0:	7e 85       	ldd	r23, Y+14	; 0x0e
    5fd2:	21 2f       	mov	r18, r17
    5fd4:	30 2f       	mov	r19, r16
    5fd6:	48 2d       	mov	r20, r8
    5fd8:	54 2d       	mov	r21, r4
    5fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fdc:	98 89       	ldd	r25, Y+16	; 0x10
    5fde:	e0 96       	adiw	r28, 0x30	; 48
    5fe0:	e0 e1       	ldi	r30, 0x10	; 16
    5fe2:	0c 94 d8 3a 	jmp	0x75b0	; 0x75b0 <__epilogue_restores__+0x4>

00005fe6 <__ashldi3>:
    5fe6:	cf 92       	push	r12
    5fe8:	df 92       	push	r13
    5fea:	ef 92       	push	r14
    5fec:	ff 92       	push	r15
    5fee:	0f 93       	push	r16
    5ff0:	cf 93       	push	r28
    5ff2:	df 93       	push	r29
    5ff4:	cd b7       	in	r28, 0x3d	; 61
    5ff6:	de b7       	in	r29, 0x3e	; 62
    5ff8:	60 97       	sbiw	r28, 0x10	; 16
    5ffa:	cd bf       	out	0x3d, r28	; 61
    5ffc:	de bf       	out	0x3e, r29	; 62
    5ffe:	00 23       	and	r16, r16
    6000:	09 f4       	brne	.+2      	; 0x6004 <__stack+0x5>
    6002:	5a c0       	rjmp	.+180    	; 0x60b8 <__stack+0xb9>
    6004:	29 87       	std	Y+9, r18	; 0x09
    6006:	3a 87       	std	Y+10, r19	; 0x0a
    6008:	4b 87       	std	Y+11, r20	; 0x0b
    600a:	5c 87       	std	Y+12, r21	; 0x0c
    600c:	6d 87       	std	Y+13, r22	; 0x0d
    600e:	7e 87       	std	Y+14, r23	; 0x0e
    6010:	8f 87       	std	Y+15, r24	; 0x0f
    6012:	98 8b       	std	Y+16, r25	; 0x10
    6014:	80 e2       	ldi	r24, 0x20	; 32
    6016:	80 1b       	sub	r24, r16
    6018:	49 85       	ldd	r20, Y+9	; 0x09
    601a:	5a 85       	ldd	r21, Y+10	; 0x0a
    601c:	6b 85       	ldd	r22, Y+11	; 0x0b
    601e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6020:	18 16       	cp	r1, r24
    6022:	b4 f0       	brlt	.+44     	; 0x6050 <__stack+0x51>
    6024:	19 82       	std	Y+1, r1	; 0x01
    6026:	1a 82       	std	Y+2, r1	; 0x02
    6028:	1b 82       	std	Y+3, r1	; 0x03
    602a:	1c 82       	std	Y+4, r1	; 0x04
    602c:	99 27       	eor	r25, r25
    602e:	87 fd       	sbrc	r24, 7
    6030:	90 95       	com	r25
    6032:	90 95       	com	r25
    6034:	81 95       	neg	r24
    6036:	9f 4f       	sbci	r25, 0xFF	; 255
    6038:	04 c0       	rjmp	.+8      	; 0x6042 <__stack+0x43>
    603a:	44 0f       	add	r20, r20
    603c:	55 1f       	adc	r21, r21
    603e:	66 1f       	adc	r22, r22
    6040:	77 1f       	adc	r23, r23
    6042:	8a 95       	dec	r24
    6044:	d2 f7       	brpl	.-12     	; 0x603a <__stack+0x3b>
    6046:	4d 83       	std	Y+5, r20	; 0x05
    6048:	5e 83       	std	Y+6, r21	; 0x06
    604a:	6f 83       	std	Y+7, r22	; 0x07
    604c:	78 87       	std	Y+8, r23	; 0x08
    604e:	2c c0       	rjmp	.+88     	; 0x60a8 <__stack+0xa9>
    6050:	6a 01       	movw	r12, r20
    6052:	7b 01       	movw	r14, r22
    6054:	00 2e       	mov	r0, r16
    6056:	04 c0       	rjmp	.+8      	; 0x6060 <__stack+0x61>
    6058:	cc 0c       	add	r12, r12
    605a:	dd 1c       	adc	r13, r13
    605c:	ee 1c       	adc	r14, r14
    605e:	ff 1c       	adc	r15, r15
    6060:	0a 94       	dec	r0
    6062:	d2 f7       	brpl	.-12     	; 0x6058 <__stack+0x59>
    6064:	c9 82       	std	Y+1, r12	; 0x01
    6066:	da 82       	std	Y+2, r13	; 0x02
    6068:	eb 82       	std	Y+3, r14	; 0x03
    606a:	fc 82       	std	Y+4, r15	; 0x04
    606c:	6a 01       	movw	r12, r20
    606e:	7b 01       	movw	r14, r22
    6070:	04 c0       	rjmp	.+8      	; 0x607a <__stack+0x7b>
    6072:	f6 94       	lsr	r15
    6074:	e7 94       	ror	r14
    6076:	d7 94       	ror	r13
    6078:	c7 94       	ror	r12
    607a:	8a 95       	dec	r24
    607c:	d2 f7       	brpl	.-12     	; 0x6072 <__stack+0x73>
    607e:	d7 01       	movw	r26, r14
    6080:	c6 01       	movw	r24, r12
    6082:	4d 85       	ldd	r20, Y+13	; 0x0d
    6084:	5e 85       	ldd	r21, Y+14	; 0x0e
    6086:	6f 85       	ldd	r22, Y+15	; 0x0f
    6088:	78 89       	ldd	r23, Y+16	; 0x10
    608a:	04 c0       	rjmp	.+8      	; 0x6094 <__stack+0x95>
    608c:	44 0f       	add	r20, r20
    608e:	55 1f       	adc	r21, r21
    6090:	66 1f       	adc	r22, r22
    6092:	77 1f       	adc	r23, r23
    6094:	0a 95       	dec	r16
    6096:	d2 f7       	brpl	.-12     	; 0x608c <__stack+0x8d>
    6098:	84 2b       	or	r24, r20
    609a:	95 2b       	or	r25, r21
    609c:	a6 2b       	or	r26, r22
    609e:	b7 2b       	or	r27, r23
    60a0:	8d 83       	std	Y+5, r24	; 0x05
    60a2:	9e 83       	std	Y+6, r25	; 0x06
    60a4:	af 83       	std	Y+7, r26	; 0x07
    60a6:	b8 87       	std	Y+8, r27	; 0x08
    60a8:	29 81       	ldd	r18, Y+1	; 0x01
    60aa:	3a 81       	ldd	r19, Y+2	; 0x02
    60ac:	4b 81       	ldd	r20, Y+3	; 0x03
    60ae:	5c 81       	ldd	r21, Y+4	; 0x04
    60b0:	6d 81       	ldd	r22, Y+5	; 0x05
    60b2:	7e 81       	ldd	r23, Y+6	; 0x06
    60b4:	8f 81       	ldd	r24, Y+7	; 0x07
    60b6:	98 85       	ldd	r25, Y+8	; 0x08
    60b8:	60 96       	adiw	r28, 0x10	; 16
    60ba:	cd bf       	out	0x3d, r28	; 61
    60bc:	de bf       	out	0x3e, r29	; 62
    60be:	df 91       	pop	r29
    60c0:	cf 91       	pop	r28
    60c2:	0f 91       	pop	r16
    60c4:	ff 90       	pop	r15
    60c6:	ef 90       	pop	r14
    60c8:	df 90       	pop	r13
    60ca:	cf 90       	pop	r12
    60cc:	08 95       	ret

000060ce <__ashrdi3>:
    60ce:	0f 93       	push	r16
    60d0:	cf 93       	push	r28
    60d2:	df 93       	push	r29
    60d4:	cd b7       	in	r28, 0x3d	; 61
    60d6:	de b7       	in	r29, 0x3e	; 62
    60d8:	60 97       	sbiw	r28, 0x10	; 16
    60da:	cd bf       	out	0x3d, r28	; 61
    60dc:	de bf       	out	0x3e, r29	; 62
    60de:	00 23       	and	r16, r16
    60e0:	09 f4       	brne	.+2      	; 0x60e4 <__ashrdi3+0x16>
    60e2:	56 c0       	rjmp	.+172    	; 0x6190 <__ashrdi3+0xc2>
    60e4:	29 87       	std	Y+9, r18	; 0x09
    60e6:	3a 87       	std	Y+10, r19	; 0x0a
    60e8:	4b 87       	std	Y+11, r20	; 0x0b
    60ea:	5c 87       	std	Y+12, r21	; 0x0c
    60ec:	6d 87       	std	Y+13, r22	; 0x0d
    60ee:	7e 87       	std	Y+14, r23	; 0x0e
    60f0:	8f 87       	std	Y+15, r24	; 0x0f
    60f2:	98 8b       	std	Y+16, r25	; 0x10
    60f4:	20 e2       	ldi	r18, 0x20	; 32
    60f6:	20 1b       	sub	r18, r16
    60f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    60fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    60fc:	af 85       	ldd	r26, Y+15	; 0x0f
    60fe:	b8 89       	ldd	r27, Y+16	; 0x10
    6100:	ac 01       	movw	r20, r24
    6102:	bd 01       	movw	r22, r26
    6104:	12 16       	cp	r1, r18
    6106:	b4 f0       	brlt	.+44     	; 0x6134 <__ashrdi3+0x66>
    6108:	77 0f       	add	r23, r23
    610a:	44 0b       	sbc	r20, r20
    610c:	54 2f       	mov	r21, r20
    610e:	ba 01       	movw	r22, r20
    6110:	4d 83       	std	Y+5, r20	; 0x05
    6112:	5e 83       	std	Y+6, r21	; 0x06
    6114:	6f 83       	std	Y+7, r22	; 0x07
    6116:	78 87       	std	Y+8, r23	; 0x08
    6118:	33 27       	eor	r19, r19
    611a:	27 fd       	sbrc	r18, 7
    611c:	30 95       	com	r19
    611e:	30 95       	com	r19
    6120:	21 95       	neg	r18
    6122:	3f 4f       	sbci	r19, 0xFF	; 255
    6124:	04 c0       	rjmp	.+8      	; 0x612e <__ashrdi3+0x60>
    6126:	b5 95       	asr	r27
    6128:	a7 95       	ror	r26
    612a:	97 95       	ror	r25
    612c:	87 95       	ror	r24
    612e:	2a 95       	dec	r18
    6130:	d2 f7       	brpl	.-12     	; 0x6126 <__ashrdi3+0x58>
    6132:	22 c0       	rjmp	.+68     	; 0x6178 <__ashrdi3+0xaa>
    6134:	00 2e       	mov	r0, r16
    6136:	04 c0       	rjmp	.+8      	; 0x6140 <__ashrdi3+0x72>
    6138:	75 95       	asr	r23
    613a:	67 95       	ror	r22
    613c:	57 95       	ror	r21
    613e:	47 95       	ror	r20
    6140:	0a 94       	dec	r0
    6142:	d2 f7       	brpl	.-12     	; 0x6138 <__ashrdi3+0x6a>
    6144:	4d 83       	std	Y+5, r20	; 0x05
    6146:	5e 83       	std	Y+6, r21	; 0x06
    6148:	6f 83       	std	Y+7, r22	; 0x07
    614a:	78 87       	std	Y+8, r23	; 0x08
    614c:	04 c0       	rjmp	.+8      	; 0x6156 <__ashrdi3+0x88>
    614e:	88 0f       	add	r24, r24
    6150:	99 1f       	adc	r25, r25
    6152:	aa 1f       	adc	r26, r26
    6154:	bb 1f       	adc	r27, r27
    6156:	2a 95       	dec	r18
    6158:	d2 f7       	brpl	.-12     	; 0x614e <__ashrdi3+0x80>
    615a:	49 85       	ldd	r20, Y+9	; 0x09
    615c:	5a 85       	ldd	r21, Y+10	; 0x0a
    615e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6160:	7c 85       	ldd	r23, Y+12	; 0x0c
    6162:	04 c0       	rjmp	.+8      	; 0x616c <__ashrdi3+0x9e>
    6164:	76 95       	lsr	r23
    6166:	67 95       	ror	r22
    6168:	57 95       	ror	r21
    616a:	47 95       	ror	r20
    616c:	0a 95       	dec	r16
    616e:	d2 f7       	brpl	.-12     	; 0x6164 <__ashrdi3+0x96>
    6170:	84 2b       	or	r24, r20
    6172:	95 2b       	or	r25, r21
    6174:	a6 2b       	or	r26, r22
    6176:	b7 2b       	or	r27, r23
    6178:	89 83       	std	Y+1, r24	; 0x01
    617a:	9a 83       	std	Y+2, r25	; 0x02
    617c:	ab 83       	std	Y+3, r26	; 0x03
    617e:	bc 83       	std	Y+4, r27	; 0x04
    6180:	29 81       	ldd	r18, Y+1	; 0x01
    6182:	3a 81       	ldd	r19, Y+2	; 0x02
    6184:	4b 81       	ldd	r20, Y+3	; 0x03
    6186:	5c 81       	ldd	r21, Y+4	; 0x04
    6188:	6d 81       	ldd	r22, Y+5	; 0x05
    618a:	7e 81       	ldd	r23, Y+6	; 0x06
    618c:	8f 81       	ldd	r24, Y+7	; 0x07
    618e:	98 85       	ldd	r25, Y+8	; 0x08
    6190:	60 96       	adiw	r28, 0x10	; 16
    6192:	cd bf       	out	0x3d, r28	; 61
    6194:	de bf       	out	0x3e, r29	; 62
    6196:	df 91       	pop	r29
    6198:	cf 91       	pop	r28
    619a:	0f 91       	pop	r16
    619c:	08 95       	ret

0000619e <__divdi3>:
    619e:	a8 e4       	ldi	r26, 0x48	; 72
    61a0:	b0 e0       	ldi	r27, 0x00	; 0
    61a2:	e5 ed       	ldi	r30, 0xD5	; 213
    61a4:	f0 e3       	ldi	r31, 0x30	; 48
    61a6:	0c 94 be 3a 	jmp	0x757c	; 0x757c <__prologue_saves__+0x2>
    61aa:	f5 01       	movw	r30, r10
    61ac:	29 a3       	lds	r18, 0x59
    61ae:	3a a3       	lds	r19, 0x5a
    61b0:	4b a3       	lds	r20, 0x5b
    61b2:	5c a3       	lds	r21, 0x5c
    61b4:	6d a3       	lds	r22, 0x5d
    61b6:	7e a3       	lds	r23, 0x5e
    61b8:	8f a3       	lds	r24, 0x5f
    61ba:	98 a7       	lds	r25, 0x78
    61bc:	a9 8e       	std	Y+25, r10	; 0x19
    61be:	fa 8f       	std	Y+26, r31	; 0x1a
    61c0:	cb 8e       	std	Y+27, r12	; 0x1b
    61c2:	dc 8e       	std	Y+28, r13	; 0x1c
    61c4:	ed 8e       	std	Y+29, r14	; 0x1d
    61c6:	fe 8e       	std	Y+30, r15	; 0x1e
    61c8:	0f 8f       	std	Y+31, r16	; 0x1f
    61ca:	18 a3       	lds	r17, 0x58
    61cc:	8d a0       	lds	r24, 0x8d
    61ce:	9e a0       	lds	r25, 0x8e
    61d0:	af a0       	lds	r26, 0x8f
    61d2:	b8 a4       	lds	r27, 0xa8
    61d4:	b7 fe       	sbrs	r11, 7
    61d6:	67 c0       	rjmp	.+206    	; 0x62a6 <__divdi3+0x108>
    61d8:	21 95       	neg	r18
    61da:	b1 e0       	ldi	r27, 0x01	; 1
    61dc:	12 16       	cp	r1, r18
    61de:	08 f0       	brcs	.+2      	; 0x61e2 <__divdi3+0x44>
    61e0:	b0 e0       	ldi	r27, 0x00	; 0
    61e2:	31 95       	neg	r19
    61e4:	a1 e0       	ldi	r26, 0x01	; 1
    61e6:	13 16       	cp	r1, r19
    61e8:	08 f0       	brcs	.+2      	; 0x61ec <__divdi3+0x4e>
    61ea:	a0 e0       	ldi	r26, 0x00	; 0
    61ec:	b3 2e       	mov	r11, r19
    61ee:	bb 1a       	sub	r11, r27
    61f0:	bb 2d       	mov	r27, r11
    61f2:	88 24       	eor	r8, r8
    61f4:	83 94       	inc	r8
    61f6:	3b 15       	cp	r19, r11
    61f8:	08 f0       	brcs	.+2      	; 0x61fc <__divdi3+0x5e>
    61fa:	88 24       	eor	r8, r8
    61fc:	a8 29       	or	r26, r8
    61fe:	41 95       	neg	r20
    6200:	31 e0       	ldi	r19, 0x01	; 1
    6202:	14 16       	cp	r1, r20
    6204:	08 f0       	brcs	.+2      	; 0x6208 <__divdi3+0x6a>
    6206:	30 e0       	ldi	r19, 0x00	; 0
    6208:	b4 2e       	mov	r11, r20
    620a:	ba 1a       	sub	r11, r26
    620c:	ab 2d       	mov	r26, r11
    620e:	88 24       	eor	r8, r8
    6210:	83 94       	inc	r8
    6212:	4b 15       	cp	r20, r11
    6214:	08 f0       	brcs	.+2      	; 0x6218 <__divdi3+0x7a>
    6216:	88 24       	eor	r8, r8
    6218:	38 29       	or	r19, r8
    621a:	51 95       	neg	r21
    621c:	41 e0       	ldi	r20, 0x01	; 1
    621e:	15 16       	cp	r1, r21
    6220:	08 f0       	brcs	.+2      	; 0x6224 <__divdi3+0x86>
    6222:	40 e0       	ldi	r20, 0x00	; 0
    6224:	45 2e       	mov	r4, r21
    6226:	43 1a       	sub	r4, r19
    6228:	31 e0       	ldi	r19, 0x01	; 1
    622a:	54 15       	cp	r21, r4
    622c:	08 f0       	brcs	.+2      	; 0x6230 <__divdi3+0x92>
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	43 2b       	or	r20, r19
    6232:	61 95       	neg	r22
    6234:	31 e0       	ldi	r19, 0x01	; 1
    6236:	16 16       	cp	r1, r22
    6238:	08 f0       	brcs	.+2      	; 0x623c <__divdi3+0x9e>
    623a:	30 e0       	ldi	r19, 0x00	; 0
    623c:	86 2e       	mov	r8, r22
    623e:	84 1a       	sub	r8, r20
    6240:	41 e0       	ldi	r20, 0x01	; 1
    6242:	68 15       	cp	r22, r8
    6244:	08 f0       	brcs	.+2      	; 0x6248 <__divdi3+0xaa>
    6246:	40 e0       	ldi	r20, 0x00	; 0
    6248:	34 2b       	or	r19, r20
    624a:	71 95       	neg	r23
    624c:	41 e0       	ldi	r20, 0x01	; 1
    624e:	17 16       	cp	r1, r23
    6250:	08 f0       	brcs	.+2      	; 0x6254 <__divdi3+0xb6>
    6252:	40 e0       	ldi	r20, 0x00	; 0
    6254:	57 2f       	mov	r21, r23
    6256:	53 1b       	sub	r21, r19
    6258:	31 e0       	ldi	r19, 0x01	; 1
    625a:	75 17       	cp	r23, r21
    625c:	08 f0       	brcs	.+2      	; 0x6260 <__divdi3+0xc2>
    625e:	30 e0       	ldi	r19, 0x00	; 0
    6260:	43 2b       	or	r20, r19
    6262:	81 95       	neg	r24
    6264:	31 e0       	ldi	r19, 0x01	; 1
    6266:	18 16       	cp	r1, r24
    6268:	08 f0       	brcs	.+2      	; 0x626c <__divdi3+0xce>
    626a:	30 e0       	ldi	r19, 0x00	; 0
    626c:	68 2f       	mov	r22, r24
    626e:	64 1b       	sub	r22, r20
    6270:	46 2f       	mov	r20, r22
    6272:	61 e0       	ldi	r22, 0x01	; 1
    6274:	84 17       	cp	r24, r20
    6276:	08 f0       	brcs	.+2      	; 0x627a <__divdi3+0xdc>
    6278:	60 e0       	ldi	r22, 0x00	; 0
    627a:	36 2b       	or	r19, r22
    627c:	91 95       	neg	r25
    627e:	93 1b       	sub	r25, r19
    6280:	29 a3       	lds	r18, 0x59
    6282:	ba a3       	lds	r27, 0x5a
    6284:	ab a3       	lds	r26, 0x5b
    6286:	4c a2       	lds	r20, 0x9c
    6288:	8d a2       	lds	r24, 0x9d
    628a:	5e a3       	lds	r21, 0x5e
    628c:	4f a3       	lds	r20, 0x5f
    628e:	98 a7       	lds	r25, 0x78
    6290:	8f ef       	ldi	r24, 0xFF	; 255
    6292:	9f ef       	ldi	r25, 0xFF	; 255
    6294:	af ef       	ldi	r26, 0xFF	; 255
    6296:	bf ef       	ldi	r27, 0xFF	; 255
    6298:	25 96       	adiw	r28, 0x05	; 5
    629a:	8c af       	sts	0x7c, r24
    629c:	9d af       	sts	0x7d, r25
    629e:	ae af       	sts	0x7e, r26
    62a0:	bf af       	sts	0x7f, r27
    62a2:	25 97       	sbiw	r28, 0x05	; 5
    62a4:	06 c0       	rjmp	.+12     	; 0x62b2 <__divdi3+0x114>
    62a6:	25 96       	adiw	r28, 0x05	; 5
    62a8:	1c ae       	sts	0xbc, r17
    62aa:	1d ae       	sts	0xbd, r17
    62ac:	1e ae       	sts	0xbe, r17
    62ae:	1f ae       	sts	0xbf, r17
    62b0:	25 97       	sbiw	r28, 0x05	; 5
    62b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    62b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    62b6:	af 8d       	ldd	r26, Y+31	; 0x1f
    62b8:	b8 a1       	lds	r27, 0x48
    62ba:	b7 ff       	sbrs	r27, 7
    62bc:	68 c0       	rjmp	.+208    	; 0x638e <__divdi3+0x1f0>
    62be:	25 96       	adiw	r28, 0x05	; 5
    62c0:	2c ad       	sts	0x6c, r18
    62c2:	3d ad       	sts	0x6d, r19
    62c4:	4e ad       	sts	0x6e, r20
    62c6:	5f ad       	sts	0x6f, r21
    62c8:	25 97       	sbiw	r28, 0x05	; 5
    62ca:	20 95       	com	r18
    62cc:	30 95       	com	r19
    62ce:	40 95       	com	r20
    62d0:	50 95       	com	r21
    62d2:	25 96       	adiw	r28, 0x05	; 5
    62d4:	2c af       	sts	0x7c, r18
    62d6:	3d af       	sts	0x7d, r19
    62d8:	4e af       	sts	0x7e, r20
    62da:	5f af       	sts	0x7f, r21
    62dc:	25 97       	sbiw	r28, 0x05	; 5
    62de:	e1 95       	neg	r30
    62e0:	81 e0       	ldi	r24, 0x01	; 1
    62e2:	1e 16       	cp	r1, r30
    62e4:	08 f0       	brcs	.+2      	; 0x62e8 <__divdi3+0x14a>
    62e6:	80 e0       	ldi	r24, 0x00	; 0
    62e8:	f1 95       	neg	r31
    62ea:	91 e0       	ldi	r25, 0x01	; 1
    62ec:	1f 16       	cp	r1, r31
    62ee:	08 f0       	brcs	.+2      	; 0x62f2 <__divdi3+0x154>
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	4f 2f       	mov	r20, r31
    62f4:	48 1b       	sub	r20, r24
    62f6:	81 e0       	ldi	r24, 0x01	; 1
    62f8:	f4 17       	cp	r31, r20
    62fa:	08 f0       	brcs	.+2      	; 0x62fe <__divdi3+0x160>
    62fc:	80 e0       	ldi	r24, 0x00	; 0
    62fe:	98 2b       	or	r25, r24
    6300:	c1 94       	neg	r12
    6302:	81 e0       	ldi	r24, 0x01	; 1
    6304:	1c 14       	cp	r1, r12
    6306:	08 f0       	brcs	.+2      	; 0x630a <__divdi3+0x16c>
    6308:	80 e0       	ldi	r24, 0x00	; 0
    630a:	6c 2d       	mov	r22, r12
    630c:	69 1b       	sub	r22, r25
    630e:	91 e0       	ldi	r25, 0x01	; 1
    6310:	c6 16       	cp	r12, r22
    6312:	08 f0       	brcs	.+2      	; 0x6316 <__divdi3+0x178>
    6314:	90 e0       	ldi	r25, 0x00	; 0
    6316:	89 2b       	or	r24, r25
    6318:	d1 94       	neg	r13
    631a:	91 e0       	ldi	r25, 0x01	; 1
    631c:	1d 14       	cp	r1, r13
    631e:	08 f0       	brcs	.+2      	; 0x6322 <__divdi3+0x184>
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	5d 2d       	mov	r21, r13
    6324:	58 1b       	sub	r21, r24
    6326:	81 e0       	ldi	r24, 0x01	; 1
    6328:	d5 16       	cp	r13, r21
    632a:	08 f0       	brcs	.+2      	; 0x632e <__divdi3+0x190>
    632c:	80 e0       	ldi	r24, 0x00	; 0
    632e:	98 2b       	or	r25, r24
    6330:	e1 94       	neg	r14
    6332:	81 e0       	ldi	r24, 0x01	; 1
    6334:	1e 14       	cp	r1, r14
    6336:	08 f0       	brcs	.+2      	; 0x633a <__divdi3+0x19c>
    6338:	80 e0       	ldi	r24, 0x00	; 0
    633a:	3e 2d       	mov	r19, r14
    633c:	39 1b       	sub	r19, r25
    633e:	91 e0       	ldi	r25, 0x01	; 1
    6340:	e3 16       	cp	r14, r19
    6342:	08 f0       	brcs	.+2      	; 0x6346 <__divdi3+0x1a8>
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	89 2b       	or	r24, r25
    6348:	f1 94       	neg	r15
    634a:	91 e0       	ldi	r25, 0x01	; 1
    634c:	1f 14       	cp	r1, r15
    634e:	08 f0       	brcs	.+2      	; 0x6352 <__divdi3+0x1b4>
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	2f 2d       	mov	r18, r15
    6354:	28 1b       	sub	r18, r24
    6356:	81 e0       	ldi	r24, 0x01	; 1
    6358:	f2 16       	cp	r15, r18
    635a:	08 f0       	brcs	.+2      	; 0x635e <__divdi3+0x1c0>
    635c:	80 e0       	ldi	r24, 0x00	; 0
    635e:	98 2b       	or	r25, r24
    6360:	01 95       	neg	r16
    6362:	81 e0       	ldi	r24, 0x01	; 1
    6364:	10 16       	cp	r1, r16
    6366:	08 f0       	brcs	.+2      	; 0x636a <__divdi3+0x1cc>
    6368:	80 e0       	ldi	r24, 0x00	; 0
    636a:	70 2f       	mov	r23, r16
    636c:	79 1b       	sub	r23, r25
    636e:	97 2f       	mov	r25, r23
    6370:	71 e0       	ldi	r23, 0x01	; 1
    6372:	09 17       	cp	r16, r25
    6374:	08 f0       	brcs	.+2      	; 0x6378 <__divdi3+0x1da>
    6376:	70 e0       	ldi	r23, 0x00	; 0
    6378:	87 2b       	or	r24, r23
    637a:	11 95       	neg	r17
    637c:	18 1b       	sub	r17, r24
    637e:	e9 8f       	std	Y+25, r30	; 0x19
    6380:	4a 8f       	std	Y+26, r20	; 0x1a
    6382:	6b 8f       	std	Y+27, r22	; 0x1b
    6384:	5c 8f       	std	Y+28, r21	; 0x1c
    6386:	3d 8f       	std	Y+29, r19	; 0x1d
    6388:	2e 8f       	std	Y+30, r18	; 0x1e
    638a:	9f 8f       	std	Y+31, r25	; 0x1f
    638c:	18 a3       	lds	r17, 0x58
    638e:	79 8d       	ldd	r23, Y+25	; 0x19
    6390:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6392:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6394:	4c 8d       	ldd	r20, Y+28	; 0x1c
    6396:	3d 8d       	ldd	r19, Y+29	; 0x1d
    6398:	2e 8d       	ldd	r18, Y+30	; 0x1e
    639a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    639c:	88 a1       	lds	r24, 0x48
    639e:	e9 a1       	lds	r30, 0x49
    63a0:	e9 8b       	std	Y+17, r30	; 0x11
    63a2:	ea a1       	lds	r30, 0x4a
    63a4:	ea 8b       	std	Y+18, r30	; 0x12
    63a6:	eb a1       	lds	r30, 0x4b
    63a8:	eb 8b       	std	Y+19, r30	; 0x13
    63aa:	ec a1       	lds	r30, 0x4c
    63ac:	ec 8b       	std	Y+20, r30	; 0x14
    63ae:	ed a1       	lds	r30, 0x4d
    63b0:	ed 8b       	std	Y+21, r30	; 0x15
    63b2:	ee a1       	lds	r30, 0x4e
    63b4:	ee 8b       	std	Y+22, r30	; 0x16
    63b6:	ef a1       	lds	r30, 0x4f
    63b8:	ef 8b       	std	Y+23, r30	; 0x17
    63ba:	e8 a5       	lds	r30, 0x68
    63bc:	e8 8f       	std	Y+24, r30	; 0x18
    63be:	79 87       	std	Y+9, r23	; 0x09
    63c0:	6a 87       	std	Y+10, r22	; 0x0a
    63c2:	5b 87       	std	Y+11, r21	; 0x0b
    63c4:	4c 87       	std	Y+12, r20	; 0x0c
    63c6:	3d 87       	std	Y+13, r19	; 0x0d
    63c8:	2e 87       	std	Y+14, r18	; 0x0e
    63ca:	9f 87       	std	Y+15, r25	; 0x0f
    63cc:	88 8b       	std	Y+16, r24	; 0x10
    63ce:	89 84       	ldd	r8, Y+9	; 0x09
    63d0:	9a 84       	ldd	r9, Y+10	; 0x0a
    63d2:	ab 84       	ldd	r10, Y+11	; 0x0b
    63d4:	bc 84       	ldd	r11, Y+12	; 0x0c
    63d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    63d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    63da:	af 85       	ldd	r26, Y+15	; 0x0f
    63dc:	b8 89       	ldd	r27, Y+16	; 0x10
    63de:	e9 88       	ldd	r14, Y+17	; 0x11
    63e0:	fa 88       	ldd	r15, Y+18	; 0x12
    63e2:	0b 89       	ldd	r16, Y+19	; 0x13
    63e4:	1c 89       	ldd	r17, Y+20	; 0x14
    63e6:	ed aa       	sts	0x9d, r30
    63e8:	fe aa       	sts	0x9e, r31
    63ea:	0f ab       	sts	0x5f, r16
    63ec:	18 af       	sts	0x78, r17
    63ee:	cd 88       	ldd	r12, Y+21	; 0x15
    63f0:	de 88       	ldd	r13, Y+22	; 0x16
    63f2:	ef 88       	ldd	r14, Y+23	; 0x17
    63f4:	f8 8c       	ldd	r15, Y+24	; 0x18
    63f6:	00 97       	sbiw	r24, 0x00	; 0
    63f8:	a1 05       	cpc	r26, r1
    63fa:	b1 05       	cpc	r27, r1
    63fc:	09 f0       	breq	.+2      	; 0x6400 <__divdi3+0x262>
    63fe:	bd c3       	rjmp	.+1914   	; 0x6b7a <__divdi3+0x9dc>
    6400:	c8 14       	cp	r12, r8
    6402:	d9 04       	cpc	r13, r9
    6404:	ea 04       	cpc	r14, r10
    6406:	fb 04       	cpc	r15, r11
    6408:	08 f0       	brcs	.+2      	; 0x640c <__divdi3+0x26e>
    640a:	4d c1       	rjmp	.+666    	; 0x66a6 <__divdi3+0x508>
    640c:	00 e0       	ldi	r16, 0x00	; 0
    640e:	80 16       	cp	r8, r16
    6410:	00 e0       	ldi	r16, 0x00	; 0
    6412:	90 06       	cpc	r9, r16
    6414:	01 e0       	ldi	r16, 0x01	; 1
    6416:	a0 06       	cpc	r10, r16
    6418:	00 e0       	ldi	r16, 0x00	; 0
    641a:	b0 06       	cpc	r11, r16
    641c:	58 f4       	brcc	.+22     	; 0x6434 <__divdi3+0x296>
    641e:	1f ef       	ldi	r17, 0xFF	; 255
    6420:	81 16       	cp	r8, r17
    6422:	91 04       	cpc	r9, r1
    6424:	a1 04       	cpc	r10, r1
    6426:	b1 04       	cpc	r11, r1
    6428:	09 f0       	breq	.+2      	; 0x642c <__divdi3+0x28e>
    642a:	90 f4       	brcc	.+36     	; 0x6450 <__divdi3+0x2b2>
    642c:	80 e0       	ldi	r24, 0x00	; 0
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	dc 01       	movw	r26, r24
    6432:	17 c0       	rjmp	.+46     	; 0x6462 <__divdi3+0x2c4>
    6434:	20 e0       	ldi	r18, 0x00	; 0
    6436:	82 16       	cp	r8, r18
    6438:	20 e0       	ldi	r18, 0x00	; 0
    643a:	92 06       	cpc	r9, r18
    643c:	20 e0       	ldi	r18, 0x00	; 0
    643e:	a2 06       	cpc	r10, r18
    6440:	21 e0       	ldi	r18, 0x01	; 1
    6442:	b2 06       	cpc	r11, r18
    6444:	50 f4       	brcc	.+20     	; 0x645a <__divdi3+0x2bc>
    6446:	80 e1       	ldi	r24, 0x10	; 16
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	a0 e0       	ldi	r26, 0x00	; 0
    644c:	b0 e0       	ldi	r27, 0x00	; 0
    644e:	09 c0       	rjmp	.+18     	; 0x6462 <__divdi3+0x2c4>
    6450:	88 e0       	ldi	r24, 0x08	; 8
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	a0 e0       	ldi	r26, 0x00	; 0
    6456:	b0 e0       	ldi	r27, 0x00	; 0
    6458:	04 c0       	rjmp	.+8      	; 0x6462 <__divdi3+0x2c4>
    645a:	88 e1       	ldi	r24, 0x18	; 24
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	a0 e0       	ldi	r26, 0x00	; 0
    6460:	b0 e0       	ldi	r27, 0x00	; 0
    6462:	b5 01       	movw	r22, r10
    6464:	a4 01       	movw	r20, r8
    6466:	08 2e       	mov	r0, r24
    6468:	04 c0       	rjmp	.+8      	; 0x6472 <__divdi3+0x2d4>
    646a:	76 95       	lsr	r23
    646c:	67 95       	ror	r22
    646e:	57 95       	ror	r21
    6470:	47 95       	ror	r20
    6472:	0a 94       	dec	r0
    6474:	d2 f7       	brpl	.-12     	; 0x646a <__divdi3+0x2cc>
    6476:	fa 01       	movw	r30, r20
    6478:	e9 5c       	subi	r30, 0xC9	; 201
    647a:	ff 4d       	sbci	r31, 0xDF	; 223
    647c:	20 81       	ld	r18, Z
    647e:	40 e2       	ldi	r20, 0x20	; 32
    6480:	50 e0       	ldi	r21, 0x00	; 0
    6482:	60 e0       	ldi	r22, 0x00	; 0
    6484:	70 e0       	ldi	r23, 0x00	; 0
    6486:	48 1b       	sub	r20, r24
    6488:	59 0b       	sbc	r21, r25
    648a:	6a 0b       	sbc	r22, r26
    648c:	7b 0b       	sbc	r23, r27
    648e:	42 1b       	sub	r20, r18
    6490:	51 09       	sbc	r21, r1
    6492:	61 09       	sbc	r22, r1
    6494:	71 09       	sbc	r23, r1
    6496:	41 15       	cp	r20, r1
    6498:	51 05       	cpc	r21, r1
    649a:	61 05       	cpc	r22, r1
    649c:	71 05       	cpc	r23, r1
    649e:	a1 f1       	breq	.+104    	; 0x6508 <__divdi3+0x36a>
    64a0:	04 2e       	mov	r0, r20
    64a2:	04 c0       	rjmp	.+8      	; 0x64ac <__divdi3+0x30e>
    64a4:	88 0c       	add	r8, r8
    64a6:	99 1c       	adc	r9, r9
    64a8:	aa 1c       	adc	r10, r10
    64aa:	bb 1c       	adc	r11, r11
    64ac:	0a 94       	dec	r0
    64ae:	d2 f7       	brpl	.-12     	; 0x64a4 <__divdi3+0x306>
    64b0:	97 01       	movw	r18, r14
    64b2:	86 01       	movw	r16, r12
    64b4:	04 2e       	mov	r0, r20
    64b6:	04 c0       	rjmp	.+8      	; 0x64c0 <__divdi3+0x322>
    64b8:	00 0f       	add	r16, r16
    64ba:	11 1f       	adc	r17, r17
    64bc:	22 1f       	adc	r18, r18
    64be:	33 1f       	adc	r19, r19
    64c0:	0a 94       	dec	r0
    64c2:	d2 f7       	brpl	.-12     	; 0x64b8 <__divdi3+0x31a>
    64c4:	80 e2       	ldi	r24, 0x20	; 32
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	84 1b       	sub	r24, r20
    64ca:	95 0b       	sbc	r25, r21
    64cc:	cd a8       	sts	0x8d, r28
    64ce:	de a8       	sts	0x8e, r29
    64d0:	ef a8       	sts	0x8f, r30
    64d2:	f8 ac       	sts	0xa8, r31
    64d4:	04 c0       	rjmp	.+8      	; 0x64de <__divdi3+0x340>
    64d6:	f6 94       	lsr	r15
    64d8:	e7 94       	ror	r14
    64da:	d7 94       	ror	r13
    64dc:	c7 94       	ror	r12
    64de:	8a 95       	dec	r24
    64e0:	d2 f7       	brpl	.-12     	; 0x64d6 <__divdi3+0x338>
    64e2:	c0 2a       	or	r12, r16
    64e4:	d1 2a       	or	r13, r17
    64e6:	e2 2a       	or	r14, r18
    64e8:	f3 2a       	or	r15, r19
    64ea:	0d a9       	sts	0x4d, r16
    64ec:	1e a9       	sts	0x4e, r17
    64ee:	2f a9       	sts	0x4f, r18
    64f0:	38 ad       	sts	0x68, r19
    64f2:	04 c0       	rjmp	.+8      	; 0x64fc <__divdi3+0x35e>
    64f4:	00 0f       	add	r16, r16
    64f6:	11 1f       	adc	r17, r17
    64f8:	22 1f       	adc	r18, r18
    64fa:	33 1f       	adc	r19, r19
    64fc:	4a 95       	dec	r20
    64fe:	d2 f7       	brpl	.-12     	; 0x64f4 <__divdi3+0x356>
    6500:	0d ab       	sts	0x5d, r16
    6502:	1e ab       	sts	0x5e, r17
    6504:	2f ab       	sts	0x5f, r18
    6506:	38 af       	sts	0x78, r19
    6508:	25 01       	movw	r4, r10
    650a:	66 24       	eor	r6, r6
    650c:	77 24       	eor	r7, r7
    650e:	95 01       	movw	r18, r10
    6510:	84 01       	movw	r16, r8
    6512:	20 70       	andi	r18, 0x00	; 0
    6514:	30 70       	andi	r19, 0x00	; 0
    6516:	09 ab       	sts	0x59, r16
    6518:	1a ab       	sts	0x5a, r17
    651a:	2b ab       	sts	0x5b, r18
    651c:	3c ab       	sts	0x5c, r19
    651e:	c7 01       	movw	r24, r14
    6520:	b6 01       	movw	r22, r12
    6522:	a3 01       	movw	r20, r6
    6524:	92 01       	movw	r18, r4
    6526:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    652a:	2d a7       	lds	r18, 0x7d
    652c:	3e a7       	lds	r19, 0x7e
    652e:	4f a7       	lds	r20, 0x7f
    6530:	58 ab       	sts	0x58, r21
    6532:	69 a7       	lds	r22, 0x79
    6534:	7a a7       	lds	r23, 0x7a
    6536:	8b a7       	lds	r24, 0x7b
    6538:	9c a7       	lds	r25, 0x7c
    653a:	c7 01       	movw	r24, r14
    653c:	b6 01       	movw	r22, r12
    653e:	a3 01       	movw	r20, r6
    6540:	92 01       	movw	r18, r4
    6542:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6546:	ca 01       	movw	r24, r20
    6548:	b9 01       	movw	r22, r18
    654a:	29 a9       	sts	0x49, r18
    654c:	3a a9       	sts	0x4a, r19
    654e:	4b a9       	sts	0x4b, r20
    6550:	5c a9       	sts	0x4c, r21
    6552:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6556:	ab 01       	movw	r20, r22
    6558:	bc 01       	movw	r22, r24
    655a:	09 a5       	lds	r16, 0x69
    655c:	1a a5       	lds	r17, 0x6a
    655e:	2b a5       	lds	r18, 0x6b
    6560:	3c a5       	lds	r19, 0x6c
    6562:	78 01       	movw	r14, r16
    6564:	dd 24       	eor	r13, r13
    6566:	cc 24       	eor	r12, r12
    6568:	0d a9       	sts	0x4d, r16
    656a:	1e a9       	sts	0x4e, r17
    656c:	2f a9       	sts	0x4f, r18
    656e:	38 ad       	sts	0x68, r19
    6570:	c9 01       	movw	r24, r18
    6572:	aa 27       	eor	r26, r26
    6574:	bb 27       	eor	r27, r27
    6576:	c8 2a       	or	r12, r24
    6578:	d9 2a       	or	r13, r25
    657a:	ea 2a       	or	r14, r26
    657c:	fb 2a       	or	r15, r27
    657e:	0d a5       	lds	r16, 0x6d
    6580:	1e a5       	lds	r17, 0x6e
    6582:	2f a5       	lds	r18, 0x6f
    6584:	38 a9       	sts	0x48, r19
    6586:	c4 16       	cp	r12, r20
    6588:	d5 06       	cpc	r13, r21
    658a:	e6 06       	cpc	r14, r22
    658c:	f7 06       	cpc	r15, r23
    658e:	38 f5       	brcc	.+78     	; 0x65de <__divdi3+0x440>
    6590:	01 50       	subi	r16, 0x01	; 1
    6592:	10 40       	sbci	r17, 0x00	; 0
    6594:	20 40       	sbci	r18, 0x00	; 0
    6596:	30 40       	sbci	r19, 0x00	; 0
    6598:	09 a7       	lds	r16, 0x79
    659a:	1a a7       	lds	r17, 0x7a
    659c:	2b a7       	lds	r18, 0x7b
    659e:	3c a7       	lds	r19, 0x7c
    65a0:	c8 0c       	add	r12, r8
    65a2:	d9 1c       	adc	r13, r9
    65a4:	ea 1c       	adc	r14, r10
    65a6:	fb 1c       	adc	r15, r11
    65a8:	c8 14       	cp	r12, r8
    65aa:	d9 04       	cpc	r13, r9
    65ac:	ea 04       	cpc	r14, r10
    65ae:	fb 04       	cpc	r15, r11
    65b0:	d0 f0       	brcs	.+52     	; 0x65e6 <__divdi3+0x448>
    65b2:	c4 16       	cp	r12, r20
    65b4:	d5 06       	cpc	r13, r21
    65b6:	e6 06       	cpc	r14, r22
    65b8:	f7 06       	cpc	r15, r23
    65ba:	a8 f4       	brcc	.+42     	; 0x65e6 <__divdi3+0x448>
    65bc:	0d a5       	lds	r16, 0x6d
    65be:	1e a5       	lds	r17, 0x6e
    65c0:	2f a5       	lds	r18, 0x6f
    65c2:	38 a9       	sts	0x48, r19
    65c4:	02 50       	subi	r16, 0x02	; 2
    65c6:	10 40       	sbci	r17, 0x00	; 0
    65c8:	20 40       	sbci	r18, 0x00	; 0
    65ca:	30 40       	sbci	r19, 0x00	; 0
    65cc:	09 a7       	lds	r16, 0x79
    65ce:	1a a7       	lds	r17, 0x7a
    65d0:	2b a7       	lds	r18, 0x7b
    65d2:	3c a7       	lds	r19, 0x7c
    65d4:	c8 0c       	add	r12, r8
    65d6:	d9 1c       	adc	r13, r9
    65d8:	ea 1c       	adc	r14, r10
    65da:	fb 1c       	adc	r15, r11
    65dc:	04 c0       	rjmp	.+8      	; 0x65e6 <__divdi3+0x448>
    65de:	09 a7       	lds	r16, 0x79
    65e0:	1a a7       	lds	r17, 0x7a
    65e2:	2b a7       	lds	r18, 0x7b
    65e4:	3c a7       	lds	r19, 0x7c
    65e6:	c4 1a       	sub	r12, r20
    65e8:	d5 0a       	sbc	r13, r21
    65ea:	e6 0a       	sbc	r14, r22
    65ec:	f7 0a       	sbc	r15, r23
    65ee:	c7 01       	movw	r24, r14
    65f0:	b6 01       	movw	r22, r12
    65f2:	a3 01       	movw	r20, r6
    65f4:	92 01       	movw	r18, r4
    65f6:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    65fa:	2d a7       	lds	r18, 0x7d
    65fc:	3e a7       	lds	r19, 0x7e
    65fe:	4f a7       	lds	r20, 0x7f
    6600:	58 ab       	sts	0x58, r21
    6602:	69 af       	sts	0x79, r22
    6604:	7a af       	sts	0x7a, r23
    6606:	8b af       	sts	0x7b, r24
    6608:	9c af       	sts	0x7c, r25
    660a:	c7 01       	movw	r24, r14
    660c:	b6 01       	movw	r22, r12
    660e:	a3 01       	movw	r20, r6
    6610:	92 01       	movw	r18, r4
    6612:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6616:	ca 01       	movw	r24, r20
    6618:	b9 01       	movw	r22, r18
    661a:	29 a9       	sts	0x49, r18
    661c:	3a a9       	sts	0x4a, r19
    661e:	4b a9       	sts	0x4b, r20
    6620:	5c a9       	sts	0x4c, r21
    6622:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6626:	6b 01       	movw	r12, r22
    6628:	7c 01       	movw	r14, r24
    662a:	49 ad       	sts	0x69, r20
    662c:	5a ad       	sts	0x6a, r21
    662e:	6b ad       	sts	0x6b, r22
    6630:	7c ad       	sts	0x6c, r23
    6632:	9a 01       	movw	r18, r20
    6634:	11 27       	eor	r17, r17
    6636:	00 27       	eor	r16, r16
    6638:	4d a9       	sts	0x4d, r20
    663a:	5e a9       	sts	0x4e, r21
    663c:	6f a9       	sts	0x4f, r22
    663e:	78 ad       	sts	0x68, r23
    6640:	60 70       	andi	r22, 0x00	; 0
    6642:	70 70       	andi	r23, 0x00	; 0
    6644:	04 2b       	or	r16, r20
    6646:	15 2b       	or	r17, r21
    6648:	26 2b       	or	r18, r22
    664a:	37 2b       	or	r19, r23
    664c:	8d a5       	lds	r24, 0x6d
    664e:	9e a5       	lds	r25, 0x6e
    6650:	af a5       	lds	r26, 0x6f
    6652:	b8 a9       	sts	0x48, r27
    6654:	0c 15       	cp	r16, r12
    6656:	1d 05       	cpc	r17, r13
    6658:	2e 05       	cpc	r18, r14
    665a:	3f 05       	cpc	r19, r15
    665c:	c0 f4       	brcc	.+48     	; 0x668e <__divdi3+0x4f0>
    665e:	01 97       	sbiw	r24, 0x01	; 1
    6660:	a1 09       	sbc	r26, r1
    6662:	b1 09       	sbc	r27, r1
    6664:	08 0d       	add	r16, r8
    6666:	19 1d       	adc	r17, r9
    6668:	2a 1d       	adc	r18, r10
    666a:	3b 1d       	adc	r19, r11
    666c:	08 15       	cp	r16, r8
    666e:	19 05       	cpc	r17, r9
    6670:	2a 05       	cpc	r18, r10
    6672:	3b 05       	cpc	r19, r11
    6674:	60 f0       	brcs	.+24     	; 0x668e <__divdi3+0x4f0>
    6676:	0c 15       	cp	r16, r12
    6678:	1d 05       	cpc	r17, r13
    667a:	2e 05       	cpc	r18, r14
    667c:	3f 05       	cpc	r19, r15
    667e:	38 f4       	brcc	.+14     	; 0x668e <__divdi3+0x4f0>
    6680:	8d a5       	lds	r24, 0x6d
    6682:	9e a5       	lds	r25, 0x6e
    6684:	af a5       	lds	r26, 0x6f
    6686:	b8 a9       	sts	0x48, r27
    6688:	02 97       	sbiw	r24, 0x02	; 2
    668a:	a1 09       	sbc	r26, r1
    668c:	b1 09       	sbc	r27, r1
    668e:	09 a5       	lds	r16, 0x69
    6690:	1a a5       	lds	r17, 0x6a
    6692:	2b a5       	lds	r18, 0x6b
    6694:	3c a5       	lds	r19, 0x6c
    6696:	78 01       	movw	r14, r16
    6698:	dd 24       	eor	r13, r13
    669a:	cc 24       	eor	r12, r12
    669c:	c8 2a       	or	r12, r24
    669e:	d9 2a       	or	r13, r25
    66a0:	ea 2a       	or	r14, r26
    66a2:	fb 2a       	or	r15, r27
    66a4:	b7 c4       	rjmp	.+2414   	; 0x7014 <__divdi3+0xe76>
    66a6:	81 14       	cp	r8, r1
    66a8:	91 04       	cpc	r9, r1
    66aa:	a1 04       	cpc	r10, r1
    66ac:	b1 04       	cpc	r11, r1
    66ae:	51 f4       	brne	.+20     	; 0x66c4 <__divdi3+0x526>
    66b0:	61 e0       	ldi	r22, 0x01	; 1
    66b2:	70 e0       	ldi	r23, 0x00	; 0
    66b4:	80 e0       	ldi	r24, 0x00	; 0
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	a5 01       	movw	r20, r10
    66ba:	94 01       	movw	r18, r8
    66bc:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    66c0:	49 01       	movw	r8, r18
    66c2:	5a 01       	movw	r10, r20
    66c4:	10 e0       	ldi	r17, 0x00	; 0
    66c6:	81 16       	cp	r8, r17
    66c8:	10 e0       	ldi	r17, 0x00	; 0
    66ca:	91 06       	cpc	r9, r17
    66cc:	11 e0       	ldi	r17, 0x01	; 1
    66ce:	a1 06       	cpc	r10, r17
    66d0:	10 e0       	ldi	r17, 0x00	; 0
    66d2:	b1 06       	cpc	r11, r17
    66d4:	58 f4       	brcc	.+22     	; 0x66ec <__divdi3+0x54e>
    66d6:	2f ef       	ldi	r18, 0xFF	; 255
    66d8:	82 16       	cp	r8, r18
    66da:	91 04       	cpc	r9, r1
    66dc:	a1 04       	cpc	r10, r1
    66de:	b1 04       	cpc	r11, r1
    66e0:	09 f0       	breq	.+2      	; 0x66e4 <__divdi3+0x546>
    66e2:	90 f4       	brcc	.+36     	; 0x6708 <__divdi3+0x56a>
    66e4:	80 e0       	ldi	r24, 0x00	; 0
    66e6:	90 e0       	ldi	r25, 0x00	; 0
    66e8:	dc 01       	movw	r26, r24
    66ea:	17 c0       	rjmp	.+46     	; 0x671a <__divdi3+0x57c>
    66ec:	30 e0       	ldi	r19, 0x00	; 0
    66ee:	83 16       	cp	r8, r19
    66f0:	30 e0       	ldi	r19, 0x00	; 0
    66f2:	93 06       	cpc	r9, r19
    66f4:	30 e0       	ldi	r19, 0x00	; 0
    66f6:	a3 06       	cpc	r10, r19
    66f8:	31 e0       	ldi	r19, 0x01	; 1
    66fa:	b3 06       	cpc	r11, r19
    66fc:	50 f4       	brcc	.+20     	; 0x6712 <__divdi3+0x574>
    66fe:	80 e1       	ldi	r24, 0x10	; 16
    6700:	90 e0       	ldi	r25, 0x00	; 0
    6702:	a0 e0       	ldi	r26, 0x00	; 0
    6704:	b0 e0       	ldi	r27, 0x00	; 0
    6706:	09 c0       	rjmp	.+18     	; 0x671a <__divdi3+0x57c>
    6708:	88 e0       	ldi	r24, 0x08	; 8
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	a0 e0       	ldi	r26, 0x00	; 0
    670e:	b0 e0       	ldi	r27, 0x00	; 0
    6710:	04 c0       	rjmp	.+8      	; 0x671a <__divdi3+0x57c>
    6712:	88 e1       	ldi	r24, 0x18	; 24
    6714:	90 e0       	ldi	r25, 0x00	; 0
    6716:	a0 e0       	ldi	r26, 0x00	; 0
    6718:	b0 e0       	ldi	r27, 0x00	; 0
    671a:	b5 01       	movw	r22, r10
    671c:	a4 01       	movw	r20, r8
    671e:	08 2e       	mov	r0, r24
    6720:	04 c0       	rjmp	.+8      	; 0x672a <__divdi3+0x58c>
    6722:	76 95       	lsr	r23
    6724:	67 95       	ror	r22
    6726:	57 95       	ror	r21
    6728:	47 95       	ror	r20
    672a:	0a 94       	dec	r0
    672c:	d2 f7       	brpl	.-12     	; 0x6722 <__divdi3+0x584>
    672e:	fa 01       	movw	r30, r20
    6730:	e9 5c       	subi	r30, 0xC9	; 201
    6732:	ff 4d       	sbci	r31, 0xDF	; 223
    6734:	20 81       	ld	r18, Z
    6736:	ac 01       	movw	r20, r24
    6738:	bd 01       	movw	r22, r26
    673a:	42 0f       	add	r20, r18
    673c:	51 1d       	adc	r21, r1
    673e:	61 1d       	adc	r22, r1
    6740:	71 1d       	adc	r23, r1
    6742:	80 e2       	ldi	r24, 0x20	; 32
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	a0 e0       	ldi	r26, 0x00	; 0
    6748:	b0 e0       	ldi	r27, 0x00	; 0
    674a:	84 1b       	sub	r24, r20
    674c:	95 0b       	sbc	r25, r21
    674e:	a6 0b       	sbc	r26, r22
    6750:	b7 0b       	sbc	r27, r23
    6752:	51 f4       	brne	.+20     	; 0x6768 <__divdi3+0x5ca>
    6754:	c8 18       	sub	r12, r8
    6756:	d9 08       	sbc	r13, r9
    6758:	ea 08       	sbc	r14, r10
    675a:	fb 08       	sbc	r15, r11
    675c:	f1 e0       	ldi	r31, 0x01	; 1
    675e:	4f 2e       	mov	r4, r31
    6760:	51 2c       	mov	r5, r1
    6762:	61 2c       	mov	r6, r1
    6764:	71 2c       	mov	r7, r1
    6766:	28 c1       	rjmp	.+592    	; 0x69b8 <__divdi3+0x81a>
    6768:	08 2e       	mov	r0, r24
    676a:	04 c0       	rjmp	.+8      	; 0x6774 <__divdi3+0x5d6>
    676c:	88 0c       	add	r8, r8
    676e:	99 1c       	adc	r9, r9
    6770:	aa 1c       	adc	r10, r10
    6772:	bb 1c       	adc	r11, r11
    6774:	0a 94       	dec	r0
    6776:	d2 f7       	brpl	.-12     	; 0x676c <__divdi3+0x5ce>
    6778:	97 01       	movw	r18, r14
    677a:	86 01       	movw	r16, r12
    677c:	04 2e       	mov	r0, r20
    677e:	04 c0       	rjmp	.+8      	; 0x6788 <__divdi3+0x5ea>
    6780:	36 95       	lsr	r19
    6782:	27 95       	ror	r18
    6784:	17 95       	ror	r17
    6786:	07 95       	ror	r16
    6788:	0a 94       	dec	r0
    678a:	d2 f7       	brpl	.-12     	; 0x6780 <__divdi3+0x5e2>
    678c:	09 ab       	sts	0x59, r16
    678e:	1a ab       	sts	0x5a, r17
    6790:	2b ab       	sts	0x5b, r18
    6792:	3c ab       	sts	0x5c, r19
    6794:	97 01       	movw	r18, r14
    6796:	86 01       	movw	r16, r12
    6798:	08 2e       	mov	r0, r24
    679a:	04 c0       	rjmp	.+8      	; 0x67a4 <__divdi3+0x606>
    679c:	00 0f       	add	r16, r16
    679e:	11 1f       	adc	r17, r17
    67a0:	22 1f       	adc	r18, r18
    67a2:	33 1f       	adc	r19, r19
    67a4:	0a 94       	dec	r0
    67a6:	d2 f7       	brpl	.-12     	; 0x679c <__divdi3+0x5fe>
    67a8:	0d a7       	lds	r16, 0x7d
    67aa:	1e a7       	lds	r17, 0x7e
    67ac:	2f a7       	lds	r18, 0x7f
    67ae:	38 ab       	sts	0x58, r19
    67b0:	ed a8       	sts	0x8d, r30
    67b2:	fe a8       	sts	0x8e, r31
    67b4:	0f a9       	sts	0x4f, r16
    67b6:	18 ad       	sts	0x68, r17
    67b8:	04 c0       	rjmp	.+8      	; 0x67c2 <__divdi3+0x624>
    67ba:	16 95       	lsr	r17
    67bc:	07 95       	ror	r16
    67be:	f7 94       	ror	r15
    67c0:	e7 94       	ror	r14
    67c2:	4a 95       	dec	r20
    67c4:	d2 f7       	brpl	.-12     	; 0x67ba <__divdi3+0x61c>
    67c6:	b8 01       	movw	r22, r16
    67c8:	a7 01       	movw	r20, r14
    67ca:	0d a5       	lds	r16, 0x6d
    67cc:	1e a5       	lds	r17, 0x6e
    67ce:	2f a5       	lds	r18, 0x6f
    67d0:	38 a9       	sts	0x48, r19
    67d2:	04 2b       	or	r16, r20
    67d4:	15 2b       	or	r17, r21
    67d6:	26 2b       	or	r18, r22
    67d8:	37 2b       	or	r19, r23
    67da:	0d a7       	lds	r16, 0x7d
    67dc:	1e a7       	lds	r17, 0x7e
    67de:	2f a7       	lds	r18, 0x7f
    67e0:	38 ab       	sts	0x58, r19
    67e2:	ed a8       	sts	0x8d, r30
    67e4:	fe a8       	sts	0x8e, r31
    67e6:	0f a9       	sts	0x4f, r16
    67e8:	18 ad       	sts	0x68, r17
    67ea:	04 c0       	rjmp	.+8      	; 0x67f4 <__divdi3+0x656>
    67ec:	ee 0c       	add	r14, r14
    67ee:	ff 1c       	adc	r15, r15
    67f0:	00 1f       	adc	r16, r16
    67f2:	11 1f       	adc	r17, r17
    67f4:	8a 95       	dec	r24
    67f6:	d2 f7       	brpl	.-12     	; 0x67ec <__divdi3+0x64e>
    67f8:	ed aa       	sts	0x9d, r30
    67fa:	fe aa       	sts	0x9e, r31
    67fc:	0f ab       	sts	0x5f, r16
    67fe:	18 af       	sts	0x78, r17
    6800:	25 01       	movw	r4, r10
    6802:	66 24       	eor	r6, r6
    6804:	77 24       	eor	r7, r7
    6806:	95 01       	movw	r18, r10
    6808:	84 01       	movw	r16, r8
    680a:	20 70       	andi	r18, 0x00	; 0
    680c:	30 70       	andi	r19, 0x00	; 0
    680e:	09 af       	sts	0x79, r16
    6810:	1a af       	sts	0x7a, r17
    6812:	2b af       	sts	0x7b, r18
    6814:	3c af       	sts	0x7c, r19
    6816:	69 a9       	sts	0x49, r22
    6818:	7a a9       	sts	0x4a, r23
    681a:	8b a9       	sts	0x4b, r24
    681c:	9c a9       	sts	0x4c, r25
    681e:	a3 01       	movw	r20, r6
    6820:	92 01       	movw	r18, r4
    6822:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6826:	29 a7       	lds	r18, 0x79
    6828:	3a a7       	lds	r19, 0x7a
    682a:	4b a7       	lds	r20, 0x7b
    682c:	5c a7       	lds	r21, 0x7c
    682e:	6b 01       	movw	r12, r22
    6830:	7c 01       	movw	r14, r24
    6832:	69 a9       	sts	0x49, r22
    6834:	7a a9       	sts	0x4a, r23
    6836:	8b a9       	sts	0x4b, r24
    6838:	9c a9       	sts	0x4c, r25
    683a:	a3 01       	movw	r20, r6
    683c:	92 01       	movw	r18, r4
    683e:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6842:	ca 01       	movw	r24, r20
    6844:	b9 01       	movw	r22, r18
    6846:	29 ad       	sts	0x69, r18
    6848:	3a ad       	sts	0x6a, r19
    684a:	4b ad       	sts	0x6b, r20
    684c:	5c ad       	sts	0x6c, r21
    684e:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6852:	ab 01       	movw	r20, r22
    6854:	bc 01       	movw	r22, r24
    6856:	76 01       	movw	r14, r12
    6858:	dd 24       	eor	r13, r13
    685a:	cc 24       	eor	r12, r12
    685c:	0d a5       	lds	r16, 0x6d
    685e:	1e a5       	lds	r17, 0x6e
    6860:	2f a5       	lds	r18, 0x6f
    6862:	38 a9       	sts	0x48, r19
    6864:	c9 01       	movw	r24, r18
    6866:	aa 27       	eor	r26, r26
    6868:	bb 27       	eor	r27, r27
    686a:	c8 2a       	or	r12, r24
    686c:	d9 2a       	or	r13, r25
    686e:	ea 2a       	or	r14, r26
    6870:	fb 2a       	or	r15, r27
    6872:	09 a5       	lds	r16, 0x69
    6874:	1a a5       	lds	r17, 0x6a
    6876:	2b a5       	lds	r18, 0x6b
    6878:	3c a5       	lds	r19, 0x6c
    687a:	c4 16       	cp	r12, r20
    687c:	d5 06       	cpc	r13, r21
    687e:	e6 06       	cpc	r14, r22
    6880:	f7 06       	cpc	r15, r23
    6882:	38 f5       	brcc	.+78     	; 0x68d2 <__divdi3+0x734>
    6884:	01 50       	subi	r16, 0x01	; 1
    6886:	10 40       	sbci	r17, 0x00	; 0
    6888:	20 40       	sbci	r18, 0x00	; 0
    688a:	30 40       	sbci	r19, 0x00	; 0
    688c:	09 ab       	sts	0x59, r16
    688e:	1a ab       	sts	0x5a, r17
    6890:	2b ab       	sts	0x5b, r18
    6892:	3c ab       	sts	0x5c, r19
    6894:	c8 0c       	add	r12, r8
    6896:	d9 1c       	adc	r13, r9
    6898:	ea 1c       	adc	r14, r10
    689a:	fb 1c       	adc	r15, r11
    689c:	c8 14       	cp	r12, r8
    689e:	d9 04       	cpc	r13, r9
    68a0:	ea 04       	cpc	r14, r10
    68a2:	fb 04       	cpc	r15, r11
    68a4:	d0 f0       	brcs	.+52     	; 0x68da <__divdi3+0x73c>
    68a6:	c4 16       	cp	r12, r20
    68a8:	d5 06       	cpc	r13, r21
    68aa:	e6 06       	cpc	r14, r22
    68ac:	f7 06       	cpc	r15, r23
    68ae:	a8 f4       	brcc	.+42     	; 0x68da <__divdi3+0x73c>
    68b0:	09 a5       	lds	r16, 0x69
    68b2:	1a a5       	lds	r17, 0x6a
    68b4:	2b a5       	lds	r18, 0x6b
    68b6:	3c a5       	lds	r19, 0x6c
    68b8:	02 50       	subi	r16, 0x02	; 2
    68ba:	10 40       	sbci	r17, 0x00	; 0
    68bc:	20 40       	sbci	r18, 0x00	; 0
    68be:	30 40       	sbci	r19, 0x00	; 0
    68c0:	09 ab       	sts	0x59, r16
    68c2:	1a ab       	sts	0x5a, r17
    68c4:	2b ab       	sts	0x5b, r18
    68c6:	3c ab       	sts	0x5c, r19
    68c8:	c8 0c       	add	r12, r8
    68ca:	d9 1c       	adc	r13, r9
    68cc:	ea 1c       	adc	r14, r10
    68ce:	fb 1c       	adc	r15, r11
    68d0:	04 c0       	rjmp	.+8      	; 0x68da <__divdi3+0x73c>
    68d2:	09 ab       	sts	0x59, r16
    68d4:	1a ab       	sts	0x5a, r17
    68d6:	2b ab       	sts	0x5b, r18
    68d8:	3c ab       	sts	0x5c, r19
    68da:	c4 1a       	sub	r12, r20
    68dc:	d5 0a       	sbc	r13, r21
    68de:	e6 0a       	sbc	r14, r22
    68e0:	f7 0a       	sbc	r15, r23
    68e2:	c7 01       	movw	r24, r14
    68e4:	b6 01       	movw	r22, r12
    68e6:	a3 01       	movw	r20, r6
    68e8:	92 01       	movw	r18, r4
    68ea:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    68ee:	29 a7       	lds	r18, 0x79
    68f0:	3a a7       	lds	r19, 0x7a
    68f2:	4b a7       	lds	r20, 0x7b
    68f4:	5c a7       	lds	r21, 0x7c
    68f6:	21 96       	adiw	r28, 0x01	; 1
    68f8:	6c af       	sts	0x7c, r22
    68fa:	7d af       	sts	0x7d, r23
    68fc:	8e af       	sts	0x7e, r24
    68fe:	9f af       	sts	0x7f, r25
    6900:	21 97       	sbiw	r28, 0x01	; 1
    6902:	c7 01       	movw	r24, r14
    6904:	b6 01       	movw	r22, r12
    6906:	a3 01       	movw	r20, r6
    6908:	92 01       	movw	r18, r4
    690a:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    690e:	ca 01       	movw	r24, r20
    6910:	b9 01       	movw	r22, r18
    6912:	29 ad       	sts	0x69, r18
    6914:	3a ad       	sts	0x6a, r19
    6916:	4b ad       	sts	0x6b, r20
    6918:	5c ad       	sts	0x6c, r21
    691a:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    691e:	8b 01       	movw	r16, r22
    6920:	9c 01       	movw	r18, r24
    6922:	21 96       	adiw	r28, 0x01	; 1
    6924:	4c ad       	sts	0x6c, r20
    6926:	5d ad       	sts	0x6d, r21
    6928:	6e ad       	sts	0x6e, r22
    692a:	7f ad       	sts	0x6f, r23
    692c:	21 97       	sbiw	r28, 0x01	; 1
    692e:	da 01       	movw	r26, r20
    6930:	99 27       	eor	r25, r25
    6932:	88 27       	eor	r24, r24
    6934:	4d a5       	lds	r20, 0x6d
    6936:	5e a5       	lds	r21, 0x6e
    6938:	6f a5       	lds	r22, 0x6f
    693a:	78 a9       	sts	0x48, r23
    693c:	60 70       	andi	r22, 0x00	; 0
    693e:	70 70       	andi	r23, 0x00	; 0
    6940:	84 2b       	or	r24, r20
    6942:	95 2b       	or	r25, r21
    6944:	a6 2b       	or	r26, r22
    6946:	b7 2b       	or	r27, r23
    6948:	49 a5       	lds	r20, 0x69
    694a:	5a a5       	lds	r21, 0x6a
    694c:	6b a5       	lds	r22, 0x6b
    694e:	7c a5       	lds	r23, 0x6c
    6950:	80 17       	cp	r24, r16
    6952:	91 07       	cpc	r25, r17
    6954:	a2 07       	cpc	r26, r18
    6956:	b3 07       	cpc	r27, r19
    6958:	f0 f4       	brcc	.+60     	; 0x6996 <__divdi3+0x7f8>
    695a:	41 50       	subi	r20, 0x01	; 1
    695c:	50 40       	sbci	r21, 0x00	; 0
    695e:	60 40       	sbci	r22, 0x00	; 0
    6960:	70 40       	sbci	r23, 0x00	; 0
    6962:	88 0d       	add	r24, r8
    6964:	99 1d       	adc	r25, r9
    6966:	aa 1d       	adc	r26, r10
    6968:	bb 1d       	adc	r27, r11
    696a:	88 15       	cp	r24, r8
    696c:	99 05       	cpc	r25, r9
    696e:	aa 05       	cpc	r26, r10
    6970:	bb 05       	cpc	r27, r11
    6972:	88 f0       	brcs	.+34     	; 0x6996 <__divdi3+0x7f8>
    6974:	80 17       	cp	r24, r16
    6976:	91 07       	cpc	r25, r17
    6978:	a2 07       	cpc	r26, r18
    697a:	b3 07       	cpc	r27, r19
    697c:	60 f4       	brcc	.+24     	; 0x6996 <__divdi3+0x7f8>
    697e:	49 a5       	lds	r20, 0x69
    6980:	5a a5       	lds	r21, 0x6a
    6982:	6b a5       	lds	r22, 0x6b
    6984:	7c a5       	lds	r23, 0x6c
    6986:	42 50       	subi	r20, 0x02	; 2
    6988:	50 40       	sbci	r21, 0x00	; 0
    698a:	60 40       	sbci	r22, 0x00	; 0
    698c:	70 40       	sbci	r23, 0x00	; 0
    698e:	88 0d       	add	r24, r8
    6990:	99 1d       	adc	r25, r9
    6992:	aa 1d       	adc	r26, r10
    6994:	bb 1d       	adc	r27, r11
    6996:	6c 01       	movw	r12, r24
    6998:	7d 01       	movw	r14, r26
    699a:	c0 1a       	sub	r12, r16
    699c:	d1 0a       	sbc	r13, r17
    699e:	e2 0a       	sbc	r14, r18
    69a0:	f3 0a       	sbc	r15, r19
    69a2:	09 a9       	sts	0x49, r16
    69a4:	1a a9       	sts	0x4a, r17
    69a6:	2b a9       	sts	0x4b, r18
    69a8:	3c a9       	sts	0x4c, r19
    69aa:	38 01       	movw	r6, r16
    69ac:	55 24       	eor	r5, r5
    69ae:	44 24       	eor	r4, r4
    69b0:	44 2a       	or	r4, r20
    69b2:	55 2a       	or	r5, r21
    69b4:	66 2a       	or	r6, r22
    69b6:	77 2a       	or	r7, r23
    69b8:	85 01       	movw	r16, r10
    69ba:	22 27       	eor	r18, r18
    69bc:	33 27       	eor	r19, r19
    69be:	0d a7       	lds	r16, 0x7d
    69c0:	1e a7       	lds	r17, 0x7e
    69c2:	2f a7       	lds	r18, 0x7f
    69c4:	38 ab       	sts	0x58, r19
    69c6:	95 01       	movw	r18, r10
    69c8:	84 01       	movw	r16, r8
    69ca:	20 70       	andi	r18, 0x00	; 0
    69cc:	30 70       	andi	r19, 0x00	; 0
    69ce:	09 af       	sts	0x79, r16
    69d0:	1a af       	sts	0x7a, r17
    69d2:	2b af       	sts	0x7b, r18
    69d4:	3c af       	sts	0x7c, r19
    69d6:	c7 01       	movw	r24, r14
    69d8:	b6 01       	movw	r22, r12
    69da:	2d a5       	lds	r18, 0x6d
    69dc:	3e a5       	lds	r19, 0x6e
    69de:	4f a5       	lds	r20, 0x6f
    69e0:	58 a9       	sts	0x48, r21
    69e2:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    69e6:	29 a7       	lds	r18, 0x79
    69e8:	3a a7       	lds	r19, 0x7a
    69ea:	4b a7       	lds	r20, 0x7b
    69ec:	5c a7       	lds	r21, 0x7c
    69ee:	69 ab       	sts	0x59, r22
    69f0:	7a ab       	sts	0x5a, r23
    69f2:	8b ab       	sts	0x5b, r24
    69f4:	9c ab       	sts	0x5c, r25
    69f6:	c7 01       	movw	r24, r14
    69f8:	b6 01       	movw	r22, r12
    69fa:	2d a5       	lds	r18, 0x6d
    69fc:	3e a5       	lds	r19, 0x6e
    69fe:	4f a5       	lds	r20, 0x6f
    6a00:	58 a9       	sts	0x48, r21
    6a02:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6a06:	ca 01       	movw	r24, r20
    6a08:	b9 01       	movw	r22, r18
    6a0a:	29 ad       	sts	0x69, r18
    6a0c:	3a ad       	sts	0x6a, r19
    6a0e:	4b ad       	sts	0x6b, r20
    6a10:	5c ad       	sts	0x6c, r21
    6a12:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6a16:	ab 01       	movw	r20, r22
    6a18:	bc 01       	movw	r22, r24
    6a1a:	09 a9       	sts	0x49, r16
    6a1c:	1a a9       	sts	0x4a, r17
    6a1e:	2b a9       	sts	0x4b, r18
    6a20:	3c a9       	sts	0x4c, r19
    6a22:	78 01       	movw	r14, r16
    6a24:	dd 24       	eor	r13, r13
    6a26:	cc 24       	eor	r12, r12
    6a28:	0d a9       	sts	0x4d, r16
    6a2a:	1e a9       	sts	0x4e, r17
    6a2c:	2f a9       	sts	0x4f, r18
    6a2e:	38 ad       	sts	0x68, r19
    6a30:	c9 01       	movw	r24, r18
    6a32:	aa 27       	eor	r26, r26
    6a34:	bb 27       	eor	r27, r27
    6a36:	c8 2a       	or	r12, r24
    6a38:	d9 2a       	or	r13, r25
    6a3a:	ea 2a       	or	r14, r26
    6a3c:	fb 2a       	or	r15, r27
    6a3e:	09 a5       	lds	r16, 0x69
    6a40:	1a a5       	lds	r17, 0x6a
    6a42:	2b a5       	lds	r18, 0x6b
    6a44:	3c a5       	lds	r19, 0x6c
    6a46:	c4 16       	cp	r12, r20
    6a48:	d5 06       	cpc	r13, r21
    6a4a:	e6 06       	cpc	r14, r22
    6a4c:	f7 06       	cpc	r15, r23
    6a4e:	38 f5       	brcc	.+78     	; 0x6a9e <__divdi3+0x900>
    6a50:	01 50       	subi	r16, 0x01	; 1
    6a52:	10 40       	sbci	r17, 0x00	; 0
    6a54:	20 40       	sbci	r18, 0x00	; 0
    6a56:	30 40       	sbci	r19, 0x00	; 0
    6a58:	09 ab       	sts	0x59, r16
    6a5a:	1a ab       	sts	0x5a, r17
    6a5c:	2b ab       	sts	0x5b, r18
    6a5e:	3c ab       	sts	0x5c, r19
    6a60:	c8 0c       	add	r12, r8
    6a62:	d9 1c       	adc	r13, r9
    6a64:	ea 1c       	adc	r14, r10
    6a66:	fb 1c       	adc	r15, r11
    6a68:	c8 14       	cp	r12, r8
    6a6a:	d9 04       	cpc	r13, r9
    6a6c:	ea 04       	cpc	r14, r10
    6a6e:	fb 04       	cpc	r15, r11
    6a70:	d0 f0       	brcs	.+52     	; 0x6aa6 <__divdi3+0x908>
    6a72:	c4 16       	cp	r12, r20
    6a74:	d5 06       	cpc	r13, r21
    6a76:	e6 06       	cpc	r14, r22
    6a78:	f7 06       	cpc	r15, r23
    6a7a:	a8 f4       	brcc	.+42     	; 0x6aa6 <__divdi3+0x908>
    6a7c:	09 a5       	lds	r16, 0x69
    6a7e:	1a a5       	lds	r17, 0x6a
    6a80:	2b a5       	lds	r18, 0x6b
    6a82:	3c a5       	lds	r19, 0x6c
    6a84:	02 50       	subi	r16, 0x02	; 2
    6a86:	10 40       	sbci	r17, 0x00	; 0
    6a88:	20 40       	sbci	r18, 0x00	; 0
    6a8a:	30 40       	sbci	r19, 0x00	; 0
    6a8c:	09 ab       	sts	0x59, r16
    6a8e:	1a ab       	sts	0x5a, r17
    6a90:	2b ab       	sts	0x5b, r18
    6a92:	3c ab       	sts	0x5c, r19
    6a94:	c8 0c       	add	r12, r8
    6a96:	d9 1c       	adc	r13, r9
    6a98:	ea 1c       	adc	r14, r10
    6a9a:	fb 1c       	adc	r15, r11
    6a9c:	04 c0       	rjmp	.+8      	; 0x6aa6 <__divdi3+0x908>
    6a9e:	09 ab       	sts	0x59, r16
    6aa0:	1a ab       	sts	0x5a, r17
    6aa2:	2b ab       	sts	0x5b, r18
    6aa4:	3c ab       	sts	0x5c, r19
    6aa6:	c4 1a       	sub	r12, r20
    6aa8:	d5 0a       	sbc	r13, r21
    6aaa:	e6 0a       	sbc	r14, r22
    6aac:	f7 0a       	sbc	r15, r23
    6aae:	c7 01       	movw	r24, r14
    6ab0:	b6 01       	movw	r22, r12
    6ab2:	2d a5       	lds	r18, 0x6d
    6ab4:	3e a5       	lds	r19, 0x6e
    6ab6:	4f a5       	lds	r20, 0x6f
    6ab8:	58 a9       	sts	0x48, r21
    6aba:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6abe:	29 a7       	lds	r18, 0x79
    6ac0:	3a a7       	lds	r19, 0x7a
    6ac2:	4b a7       	lds	r20, 0x7b
    6ac4:	5c a7       	lds	r21, 0x7c
    6ac6:	21 96       	adiw	r28, 0x01	; 1
    6ac8:	6c af       	sts	0x7c, r22
    6aca:	7d af       	sts	0x7d, r23
    6acc:	8e af       	sts	0x7e, r24
    6ace:	9f af       	sts	0x7f, r25
    6ad0:	21 97       	sbiw	r28, 0x01	; 1
    6ad2:	c7 01       	movw	r24, r14
    6ad4:	b6 01       	movw	r22, r12
    6ad6:	2d a5       	lds	r18, 0x6d
    6ad8:	3e a5       	lds	r19, 0x6e
    6ada:	4f a5       	lds	r20, 0x6f
    6adc:	58 a9       	sts	0x48, r21
    6ade:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6ae2:	ca 01       	movw	r24, r20
    6ae4:	b9 01       	movw	r22, r18
    6ae6:	29 ad       	sts	0x69, r18
    6ae8:	3a ad       	sts	0x6a, r19
    6aea:	4b ad       	sts	0x6b, r20
    6aec:	5c ad       	sts	0x6c, r21
    6aee:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6af2:	8b 01       	movw	r16, r22
    6af4:	9c 01       	movw	r18, r24
    6af6:	21 96       	adiw	r28, 0x01	; 1
    6af8:	4c ad       	sts	0x6c, r20
    6afa:	5d ad       	sts	0x6d, r21
    6afc:	6e ad       	sts	0x6e, r22
    6afe:	7f ad       	sts	0x6f, r23
    6b00:	21 97       	sbiw	r28, 0x01	; 1
    6b02:	da 01       	movw	r26, r20
    6b04:	99 27       	eor	r25, r25
    6b06:	88 27       	eor	r24, r24
    6b08:	4d a9       	sts	0x4d, r20
    6b0a:	5e a9       	sts	0x4e, r21
    6b0c:	6f a9       	sts	0x4f, r22
    6b0e:	78 ad       	sts	0x68, r23
    6b10:	60 70       	andi	r22, 0x00	; 0
    6b12:	70 70       	andi	r23, 0x00	; 0
    6b14:	84 2b       	or	r24, r20
    6b16:	95 2b       	or	r25, r21
    6b18:	a6 2b       	or	r26, r22
    6b1a:	b7 2b       	or	r27, r23
    6b1c:	49 a5       	lds	r20, 0x69
    6b1e:	5a a5       	lds	r21, 0x6a
    6b20:	6b a5       	lds	r22, 0x6b
    6b22:	7c a5       	lds	r23, 0x6c
    6b24:	80 17       	cp	r24, r16
    6b26:	91 07       	cpc	r25, r17
    6b28:	a2 07       	cpc	r26, r18
    6b2a:	b3 07       	cpc	r27, r19
    6b2c:	d0 f4       	brcc	.+52     	; 0x6b62 <__divdi3+0x9c4>
    6b2e:	41 50       	subi	r20, 0x01	; 1
    6b30:	50 40       	sbci	r21, 0x00	; 0
    6b32:	60 40       	sbci	r22, 0x00	; 0
    6b34:	70 40       	sbci	r23, 0x00	; 0
    6b36:	88 0d       	add	r24, r8
    6b38:	99 1d       	adc	r25, r9
    6b3a:	aa 1d       	adc	r26, r10
    6b3c:	bb 1d       	adc	r27, r11
    6b3e:	88 15       	cp	r24, r8
    6b40:	99 05       	cpc	r25, r9
    6b42:	aa 05       	cpc	r26, r10
    6b44:	bb 05       	cpc	r27, r11
    6b46:	68 f0       	brcs	.+26     	; 0x6b62 <__divdi3+0x9c4>
    6b48:	80 17       	cp	r24, r16
    6b4a:	91 07       	cpc	r25, r17
    6b4c:	a2 07       	cpc	r26, r18
    6b4e:	b3 07       	cpc	r27, r19
    6b50:	40 f4       	brcc	.+16     	; 0x6b62 <__divdi3+0x9c4>
    6b52:	49 a5       	lds	r20, 0x69
    6b54:	5a a5       	lds	r21, 0x6a
    6b56:	6b a5       	lds	r22, 0x6b
    6b58:	7c a5       	lds	r23, 0x6c
    6b5a:	42 50       	subi	r20, 0x02	; 2
    6b5c:	50 40       	sbci	r21, 0x00	; 0
    6b5e:	60 40       	sbci	r22, 0x00	; 0
    6b60:	70 40       	sbci	r23, 0x00	; 0
    6b62:	09 a9       	sts	0x49, r16
    6b64:	1a a9       	sts	0x4a, r17
    6b66:	2b a9       	sts	0x4b, r18
    6b68:	3c a9       	sts	0x4c, r19
    6b6a:	78 01       	movw	r14, r16
    6b6c:	dd 24       	eor	r13, r13
    6b6e:	cc 24       	eor	r12, r12
    6b70:	c4 2a       	or	r12, r20
    6b72:	d5 2a       	or	r13, r21
    6b74:	e6 2a       	or	r14, r22
    6b76:	f7 2a       	or	r15, r23
    6b78:	50 c2       	rjmp	.+1184   	; 0x701a <__divdi3+0xe7c>
    6b7a:	c8 16       	cp	r12, r24
    6b7c:	d9 06       	cpc	r13, r25
    6b7e:	ea 06       	cpc	r14, r26
    6b80:	fb 06       	cpc	r15, r27
    6b82:	08 f4       	brcc	.+2      	; 0x6b86 <__divdi3+0x9e8>
    6b84:	37 c2       	rjmp	.+1134   	; 0x6ff4 <__divdi3+0xe56>
    6b86:	80 30       	cpi	r24, 0x00	; 0
    6b88:	10 e0       	ldi	r17, 0x00	; 0
    6b8a:	91 07       	cpc	r25, r17
    6b8c:	11 e0       	ldi	r17, 0x01	; 1
    6b8e:	a1 07       	cpc	r26, r17
    6b90:	10 e0       	ldi	r17, 0x00	; 0
    6b92:	b1 07       	cpc	r27, r17
    6b94:	50 f4       	brcc	.+20     	; 0x6baa <__divdi3+0xa0c>
    6b96:	8f 3f       	cpi	r24, 0xFF	; 255
    6b98:	91 05       	cpc	r25, r1
    6b9a:	a1 05       	cpc	r26, r1
    6b9c:	b1 05       	cpc	r27, r1
    6b9e:	09 f0       	breq	.+2      	; 0x6ba2 <__divdi3+0xa04>
    6ba0:	88 f4       	brcc	.+34     	; 0x6bc4 <__divdi3+0xa26>
    6ba2:	00 e0       	ldi	r16, 0x00	; 0
    6ba4:	10 e0       	ldi	r17, 0x00	; 0
    6ba6:	98 01       	movw	r18, r16
    6ba8:	16 c0       	rjmp	.+44     	; 0x6bd6 <__divdi3+0xa38>
    6baa:	80 30       	cpi	r24, 0x00	; 0
    6bac:	20 e0       	ldi	r18, 0x00	; 0
    6bae:	92 07       	cpc	r25, r18
    6bb0:	20 e0       	ldi	r18, 0x00	; 0
    6bb2:	a2 07       	cpc	r26, r18
    6bb4:	21 e0       	ldi	r18, 0x01	; 1
    6bb6:	b2 07       	cpc	r27, r18
    6bb8:	50 f4       	brcc	.+20     	; 0x6bce <__divdi3+0xa30>
    6bba:	00 e1       	ldi	r16, 0x10	; 16
    6bbc:	10 e0       	ldi	r17, 0x00	; 0
    6bbe:	20 e0       	ldi	r18, 0x00	; 0
    6bc0:	30 e0       	ldi	r19, 0x00	; 0
    6bc2:	09 c0       	rjmp	.+18     	; 0x6bd6 <__divdi3+0xa38>
    6bc4:	08 e0       	ldi	r16, 0x08	; 8
    6bc6:	10 e0       	ldi	r17, 0x00	; 0
    6bc8:	20 e0       	ldi	r18, 0x00	; 0
    6bca:	30 e0       	ldi	r19, 0x00	; 0
    6bcc:	04 c0       	rjmp	.+8      	; 0x6bd6 <__divdi3+0xa38>
    6bce:	08 e1       	ldi	r16, 0x18	; 24
    6bd0:	10 e0       	ldi	r17, 0x00	; 0
    6bd2:	20 e0       	ldi	r18, 0x00	; 0
    6bd4:	30 e0       	ldi	r19, 0x00	; 0
    6bd6:	ac 01       	movw	r20, r24
    6bd8:	bd 01       	movw	r22, r26
    6bda:	00 2e       	mov	r0, r16
    6bdc:	04 c0       	rjmp	.+8      	; 0x6be6 <__divdi3+0xa48>
    6bde:	76 95       	lsr	r23
    6be0:	67 95       	ror	r22
    6be2:	57 95       	ror	r21
    6be4:	47 95       	ror	r20
    6be6:	0a 94       	dec	r0
    6be8:	d2 f7       	brpl	.-12     	; 0x6bde <__divdi3+0xa40>
    6bea:	fa 01       	movw	r30, r20
    6bec:	e9 5c       	subi	r30, 0xC9	; 201
    6bee:	ff 4d       	sbci	r31, 0xDF	; 223
    6bf0:	40 81       	ld	r20, Z
    6bf2:	04 0f       	add	r16, r20
    6bf4:	11 1d       	adc	r17, r1
    6bf6:	21 1d       	adc	r18, r1
    6bf8:	31 1d       	adc	r19, r1
    6bfa:	40 e2       	ldi	r20, 0x20	; 32
    6bfc:	50 e0       	ldi	r21, 0x00	; 0
    6bfe:	60 e0       	ldi	r22, 0x00	; 0
    6c00:	70 e0       	ldi	r23, 0x00	; 0
    6c02:	40 1b       	sub	r20, r16
    6c04:	51 0b       	sbc	r21, r17
    6c06:	62 0b       	sbc	r22, r18
    6c08:	73 0b       	sbc	r23, r19
    6c0a:	a1 f4       	brne	.+40     	; 0x6c34 <__divdi3+0xa96>
    6c0c:	8c 15       	cp	r24, r12
    6c0e:	9d 05       	cpc	r25, r13
    6c10:	ae 05       	cpc	r26, r14
    6c12:	bf 05       	cpc	r27, r15
    6c14:	08 f4       	brcc	.+2      	; 0x6c18 <__divdi3+0xa7a>
    6c16:	f5 c1       	rjmp	.+1002   	; 0x7002 <__divdi3+0xe64>
    6c18:	ed a8       	sts	0x8d, r30
    6c1a:	fe a8       	sts	0x8e, r31
    6c1c:	0f a9       	sts	0x4f, r16
    6c1e:	18 ad       	sts	0x68, r17
    6c20:	44 24       	eor	r4, r4
    6c22:	55 24       	eor	r5, r5
    6c24:	32 01       	movw	r6, r4
    6c26:	e8 14       	cp	r14, r8
    6c28:	f9 04       	cpc	r15, r9
    6c2a:	0a 05       	cpc	r16, r10
    6c2c:	1b 05       	cpc	r17, r11
    6c2e:	08 f0       	brcs	.+2      	; 0x6c32 <__divdi3+0xa94>
    6c30:	eb c1       	rjmp	.+982    	; 0x7008 <__divdi3+0xe6a>
    6c32:	e3 c1       	rjmp	.+966    	; 0x6ffa <__divdi3+0xe5c>
    6c34:	34 2e       	mov	r3, r20
    6c36:	2c 01       	movw	r4, r24
    6c38:	3d 01       	movw	r6, r26
    6c3a:	04 c0       	rjmp	.+8      	; 0x6c44 <__divdi3+0xaa6>
    6c3c:	44 0c       	add	r4, r4
    6c3e:	55 1c       	adc	r5, r5
    6c40:	66 1c       	adc	r6, r6
    6c42:	77 1c       	adc	r7, r7
    6c44:	4a 95       	dec	r20
    6c46:	d2 f7       	brpl	.-12     	; 0x6c3c <__divdi3+0xa9e>
    6c48:	d5 01       	movw	r26, r10
    6c4a:	c4 01       	movw	r24, r8
    6c4c:	00 2e       	mov	r0, r16
    6c4e:	04 c0       	rjmp	.+8      	; 0x6c58 <__divdi3+0xaba>
    6c50:	b6 95       	lsr	r27
    6c52:	a7 95       	ror	r26
    6c54:	97 95       	ror	r25
    6c56:	87 95       	ror	r24
    6c58:	0a 94       	dec	r0
    6c5a:	d2 f7       	brpl	.-12     	; 0x6c50 <__divdi3+0xab2>
    6c5c:	48 2a       	or	r4, r24
    6c5e:	59 2a       	or	r5, r25
    6c60:	6a 2a       	or	r6, r26
    6c62:	7b 2a       	or	r7, r27
    6c64:	a5 01       	movw	r20, r10
    6c66:	94 01       	movw	r18, r8
    6c68:	03 2c       	mov	r0, r3
    6c6a:	04 c0       	rjmp	.+8      	; 0x6c74 <__divdi3+0xad6>
    6c6c:	22 0f       	add	r18, r18
    6c6e:	33 1f       	adc	r19, r19
    6c70:	44 1f       	adc	r20, r20
    6c72:	55 1f       	adc	r21, r21
    6c74:	0a 94       	dec	r0
    6c76:	d2 f7       	brpl	.-12     	; 0x6c6c <__divdi3+0xace>
    6c78:	29 af       	sts	0x79, r18
    6c7a:	3a af       	sts	0x7a, r19
    6c7c:	4b af       	sts	0x7b, r20
    6c7e:	5c af       	sts	0x7c, r21
    6c80:	b7 01       	movw	r22, r14
    6c82:	a6 01       	movw	r20, r12
    6c84:	00 2e       	mov	r0, r16
    6c86:	04 c0       	rjmp	.+8      	; 0x6c90 <__divdi3+0xaf2>
    6c88:	76 95       	lsr	r23
    6c8a:	67 95       	ror	r22
    6c8c:	57 95       	ror	r21
    6c8e:	47 95       	ror	r20
    6c90:	0a 94       	dec	r0
    6c92:	d2 f7       	brpl	.-12     	; 0x6c88 <__divdi3+0xaea>
    6c94:	49 ab       	sts	0x59, r20
    6c96:	5a ab       	sts	0x5a, r21
    6c98:	6b ab       	sts	0x5b, r22
    6c9a:	7c ab       	sts	0x5c, r23
    6c9c:	c7 01       	movw	r24, r14
    6c9e:	b6 01       	movw	r22, r12
    6ca0:	03 2c       	mov	r0, r3
    6ca2:	04 c0       	rjmp	.+8      	; 0x6cac <__divdi3+0xb0e>
    6ca4:	66 0f       	add	r22, r22
    6ca6:	77 1f       	adc	r23, r23
    6ca8:	88 1f       	adc	r24, r24
    6caa:	99 1f       	adc	r25, r25
    6cac:	0a 94       	dec	r0
    6cae:	d2 f7       	brpl	.-12     	; 0x6ca4 <__divdi3+0xb06>
    6cb0:	6d a7       	lds	r22, 0x7d
    6cb2:	7e a7       	lds	r23, 0x7e
    6cb4:	8f a7       	lds	r24, 0x7f
    6cb6:	98 ab       	sts	0x58, r25
    6cb8:	8d a9       	sts	0x4d, r24
    6cba:	9e a9       	sts	0x4e, r25
    6cbc:	af a9       	sts	0x4f, r26
    6cbe:	b8 ad       	sts	0x68, r27
    6cc0:	04 c0       	rjmp	.+8      	; 0x6cca <__divdi3+0xb2c>
    6cc2:	b6 95       	lsr	r27
    6cc4:	a7 95       	ror	r26
    6cc6:	97 95       	ror	r25
    6cc8:	87 95       	ror	r24
    6cca:	0a 95       	dec	r16
    6ccc:	d2 f7       	brpl	.-12     	; 0x6cc2 <__divdi3+0xb24>
    6cce:	4d a5       	lds	r20, 0x6d
    6cd0:	5e a5       	lds	r21, 0x6e
    6cd2:	6f a5       	lds	r22, 0x6f
    6cd4:	78 a9       	sts	0x48, r23
    6cd6:	48 2b       	or	r20, r24
    6cd8:	59 2b       	or	r21, r25
    6cda:	6a 2b       	or	r22, r26
    6cdc:	7b 2b       	or	r23, r27
    6cde:	4d a7       	lds	r20, 0x7d
    6ce0:	5e a7       	lds	r21, 0x7e
    6ce2:	6f a7       	lds	r22, 0x7f
    6ce4:	78 ab       	sts	0x58, r23
    6ce6:	43 01       	movw	r8, r6
    6ce8:	aa 24       	eor	r10, r10
    6cea:	bb 24       	eor	r11, r11
    6cec:	93 01       	movw	r18, r6
    6cee:	82 01       	movw	r16, r4
    6cf0:	20 70       	andi	r18, 0x00	; 0
    6cf2:	30 70       	andi	r19, 0x00	; 0
    6cf4:	21 96       	adiw	r28, 0x01	; 1
    6cf6:	0c af       	sts	0x7c, r16
    6cf8:	1d af       	sts	0x7d, r17
    6cfa:	2e af       	sts	0x7e, r18
    6cfc:	3f af       	sts	0x7f, r19
    6cfe:	21 97       	sbiw	r28, 0x01	; 1
    6d00:	69 a9       	sts	0x49, r22
    6d02:	7a a9       	sts	0x4a, r23
    6d04:	8b a9       	sts	0x4b, r24
    6d06:	9c a9       	sts	0x4c, r25
    6d08:	a5 01       	movw	r20, r10
    6d0a:	94 01       	movw	r18, r8
    6d0c:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6d10:	29 a7       	lds	r18, 0x79
    6d12:	3a a7       	lds	r19, 0x7a
    6d14:	4b a7       	lds	r20, 0x7b
    6d16:	5c a7       	lds	r21, 0x7c
    6d18:	6b 01       	movw	r12, r22
    6d1a:	7c 01       	movw	r14, r24
    6d1c:	69 a9       	sts	0x49, r22
    6d1e:	7a a9       	sts	0x4a, r23
    6d20:	8b a9       	sts	0x4b, r24
    6d22:	9c a9       	sts	0x4c, r25
    6d24:	a5 01       	movw	r20, r10
    6d26:	94 01       	movw	r18, r8
    6d28:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6d2c:	ca 01       	movw	r24, r20
    6d2e:	b9 01       	movw	r22, r18
    6d30:	21 96       	adiw	r28, 0x01	; 1
    6d32:	2c ad       	sts	0x6c, r18
    6d34:	3d ad       	sts	0x6d, r19
    6d36:	4e ad       	sts	0x6e, r20
    6d38:	5f ad       	sts	0x6f, r21
    6d3a:	21 97       	sbiw	r28, 0x01	; 1
    6d3c:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6d40:	dc 01       	movw	r26, r24
    6d42:	cb 01       	movw	r24, r22
    6d44:	76 01       	movw	r14, r12
    6d46:	dd 24       	eor	r13, r13
    6d48:	cc 24       	eor	r12, r12
    6d4a:	0d a5       	lds	r16, 0x6d
    6d4c:	1e a5       	lds	r17, 0x6e
    6d4e:	2f a5       	lds	r18, 0x6f
    6d50:	38 a9       	sts	0x48, r19
    6d52:	a9 01       	movw	r20, r18
    6d54:	66 27       	eor	r22, r22
    6d56:	77 27       	eor	r23, r23
    6d58:	c4 2a       	or	r12, r20
    6d5a:	d5 2a       	or	r13, r21
    6d5c:	e6 2a       	or	r14, r22
    6d5e:	f7 2a       	or	r15, r23
    6d60:	09 a5       	lds	r16, 0x69
    6d62:	1a a5       	lds	r17, 0x6a
    6d64:	2b a5       	lds	r18, 0x6b
    6d66:	3c a5       	lds	r19, 0x6c
    6d68:	c8 16       	cp	r12, r24
    6d6a:	d9 06       	cpc	r13, r25
    6d6c:	ea 06       	cpc	r14, r26
    6d6e:	fb 06       	cpc	r15, r27
    6d70:	38 f5       	brcc	.+78     	; 0x6dc0 <__divdi3+0xc22>
    6d72:	01 50       	subi	r16, 0x01	; 1
    6d74:	10 40       	sbci	r17, 0x00	; 0
    6d76:	20 40       	sbci	r18, 0x00	; 0
    6d78:	30 40       	sbci	r19, 0x00	; 0
    6d7a:	09 ab       	sts	0x59, r16
    6d7c:	1a ab       	sts	0x5a, r17
    6d7e:	2b ab       	sts	0x5b, r18
    6d80:	3c ab       	sts	0x5c, r19
    6d82:	c4 0c       	add	r12, r4
    6d84:	d5 1c       	adc	r13, r5
    6d86:	e6 1c       	adc	r14, r6
    6d88:	f7 1c       	adc	r15, r7
    6d8a:	c4 14       	cp	r12, r4
    6d8c:	d5 04       	cpc	r13, r5
    6d8e:	e6 04       	cpc	r14, r6
    6d90:	f7 04       	cpc	r15, r7
    6d92:	d0 f0       	brcs	.+52     	; 0x6dc8 <__divdi3+0xc2a>
    6d94:	c8 16       	cp	r12, r24
    6d96:	d9 06       	cpc	r13, r25
    6d98:	ea 06       	cpc	r14, r26
    6d9a:	fb 06       	cpc	r15, r27
    6d9c:	a8 f4       	brcc	.+42     	; 0x6dc8 <__divdi3+0xc2a>
    6d9e:	09 a5       	lds	r16, 0x69
    6da0:	1a a5       	lds	r17, 0x6a
    6da2:	2b a5       	lds	r18, 0x6b
    6da4:	3c a5       	lds	r19, 0x6c
    6da6:	02 50       	subi	r16, 0x02	; 2
    6da8:	10 40       	sbci	r17, 0x00	; 0
    6daa:	20 40       	sbci	r18, 0x00	; 0
    6dac:	30 40       	sbci	r19, 0x00	; 0
    6dae:	09 ab       	sts	0x59, r16
    6db0:	1a ab       	sts	0x5a, r17
    6db2:	2b ab       	sts	0x5b, r18
    6db4:	3c ab       	sts	0x5c, r19
    6db6:	c4 0c       	add	r12, r4
    6db8:	d5 1c       	adc	r13, r5
    6dba:	e6 1c       	adc	r14, r6
    6dbc:	f7 1c       	adc	r15, r7
    6dbe:	04 c0       	rjmp	.+8      	; 0x6dc8 <__divdi3+0xc2a>
    6dc0:	09 ab       	sts	0x59, r16
    6dc2:	1a ab       	sts	0x5a, r17
    6dc4:	2b ab       	sts	0x5b, r18
    6dc6:	3c ab       	sts	0x5c, r19
    6dc8:	c8 1a       	sub	r12, r24
    6dca:	d9 0a       	sbc	r13, r25
    6dcc:	ea 0a       	sbc	r14, r26
    6dce:	fb 0a       	sbc	r15, r27
    6dd0:	c7 01       	movw	r24, r14
    6dd2:	b6 01       	movw	r22, r12
    6dd4:	a5 01       	movw	r20, r10
    6dd6:	94 01       	movw	r18, r8
    6dd8:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6ddc:	29 a7       	lds	r18, 0x79
    6dde:	3a a7       	lds	r19, 0x7a
    6de0:	4b a7       	lds	r20, 0x7b
    6de2:	5c a7       	lds	r21, 0x7c
    6de4:	29 96       	adiw	r28, 0x09	; 9
    6de6:	6c af       	sts	0x7c, r22
    6de8:	7d af       	sts	0x7d, r23
    6dea:	8e af       	sts	0x7e, r24
    6dec:	9f af       	sts	0x7f, r25
    6dee:	29 97       	sbiw	r28, 0x09	; 9
    6df0:	c7 01       	movw	r24, r14
    6df2:	b6 01       	movw	r22, r12
    6df4:	a5 01       	movw	r20, r10
    6df6:	94 01       	movw	r18, r8
    6df8:	0e 94 80 3a 	call	0x7500	; 0x7500 <__udivmodsi4>
    6dfc:	ca 01       	movw	r24, r20
    6dfe:	b9 01       	movw	r22, r18
    6e00:	21 96       	adiw	r28, 0x01	; 1
    6e02:	2c ad       	sts	0x6c, r18
    6e04:	3d ad       	sts	0x6d, r19
    6e06:	4e ad       	sts	0x6e, r20
    6e08:	5f ad       	sts	0x6f, r21
    6e0a:	21 97       	sbiw	r28, 0x01	; 1
    6e0c:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6e10:	4b 01       	movw	r8, r22
    6e12:	5c 01       	movw	r10, r24
    6e14:	29 96       	adiw	r28, 0x09	; 9
    6e16:	4c ad       	sts	0x6c, r20
    6e18:	5d ad       	sts	0x6d, r21
    6e1a:	6e ad       	sts	0x6e, r22
    6e1c:	7f ad       	sts	0x6f, r23
    6e1e:	29 97       	sbiw	r28, 0x09	; 9
    6e20:	9a 01       	movw	r18, r20
    6e22:	11 27       	eor	r17, r17
    6e24:	00 27       	eor	r16, r16
    6e26:	8d a5       	lds	r24, 0x6d
    6e28:	9e a5       	lds	r25, 0x6e
    6e2a:	af a5       	lds	r26, 0x6f
    6e2c:	b8 a9       	sts	0x48, r27
    6e2e:	a0 70       	andi	r26, 0x00	; 0
    6e30:	b0 70       	andi	r27, 0x00	; 0
    6e32:	08 2b       	or	r16, r24
    6e34:	19 2b       	or	r17, r25
    6e36:	2a 2b       	or	r18, r26
    6e38:	3b 2b       	or	r19, r27
    6e3a:	89 a5       	lds	r24, 0x69
    6e3c:	9a a5       	lds	r25, 0x6a
    6e3e:	ab a5       	lds	r26, 0x6b
    6e40:	bc a5       	lds	r27, 0x6c
    6e42:	08 15       	cp	r16, r8
    6e44:	19 05       	cpc	r17, r9
    6e46:	2a 05       	cpc	r18, r10
    6e48:	3b 05       	cpc	r19, r11
    6e4a:	e0 f4       	brcc	.+56     	; 0x6e84 <__divdi3+0xce6>
    6e4c:	01 97       	sbiw	r24, 0x01	; 1
    6e4e:	a1 09       	sbc	r26, r1
    6e50:	b1 09       	sbc	r27, r1
    6e52:	04 0d       	add	r16, r4
    6e54:	15 1d       	adc	r17, r5
    6e56:	26 1d       	adc	r18, r6
    6e58:	37 1d       	adc	r19, r7
    6e5a:	04 15       	cp	r16, r4
    6e5c:	15 05       	cpc	r17, r5
    6e5e:	26 05       	cpc	r18, r6
    6e60:	37 05       	cpc	r19, r7
    6e62:	80 f0       	brcs	.+32     	; 0x6e84 <__divdi3+0xce6>
    6e64:	08 15       	cp	r16, r8
    6e66:	19 05       	cpc	r17, r9
    6e68:	2a 05       	cpc	r18, r10
    6e6a:	3b 05       	cpc	r19, r11
    6e6c:	58 f4       	brcc	.+22     	; 0x6e84 <__divdi3+0xce6>
    6e6e:	89 a5       	lds	r24, 0x69
    6e70:	9a a5       	lds	r25, 0x6a
    6e72:	ab a5       	lds	r26, 0x6b
    6e74:	bc a5       	lds	r27, 0x6c
    6e76:	02 97       	sbiw	r24, 0x02	; 2
    6e78:	a1 09       	sbc	r26, r1
    6e7a:	b1 09       	sbc	r27, r1
    6e7c:	04 0d       	add	r16, r4
    6e7e:	15 1d       	adc	r17, r5
    6e80:	26 1d       	adc	r18, r6
    6e82:	37 1d       	adc	r19, r7
    6e84:	b9 01       	movw	r22, r18
    6e86:	a8 01       	movw	r20, r16
    6e88:	48 19       	sub	r20, r8
    6e8a:	59 09       	sbc	r21, r9
    6e8c:	6a 09       	sbc	r22, r10
    6e8e:	7b 09       	sbc	r23, r11
    6e90:	4d a7       	lds	r20, 0x7d
    6e92:	5e a7       	lds	r21, 0x7e
    6e94:	6f a7       	lds	r22, 0x7f
    6e96:	78 ab       	sts	0x58, r23
    6e98:	09 a9       	sts	0x49, r16
    6e9a:	1a a9       	sts	0x4a, r17
    6e9c:	2b a9       	sts	0x4b, r18
    6e9e:	3c a9       	sts	0x4c, r19
    6ea0:	78 01       	movw	r14, r16
    6ea2:	dd 24       	eor	r13, r13
    6ea4:	cc 24       	eor	r12, r12
    6ea6:	c8 2a       	or	r12, r24
    6ea8:	d9 2a       	or	r13, r25
    6eaa:	ea 2a       	or	r14, r26
    6eac:	fb 2a       	or	r15, r27
    6eae:	ff ef       	ldi	r31, 0xFF	; 255
    6eb0:	8f 2e       	mov	r8, r31
    6eb2:	ff ef       	ldi	r31, 0xFF	; 255
    6eb4:	9f 2e       	mov	r9, r31
    6eb6:	a1 2c       	mov	r10, r1
    6eb8:	b1 2c       	mov	r11, r1
    6eba:	8c 20       	and	r8, r12
    6ebc:	9d 20       	and	r9, r13
    6ebe:	ae 20       	and	r10, r14
    6ec0:	bf 20       	and	r11, r15
    6ec2:	87 01       	movw	r16, r14
    6ec4:	22 27       	eor	r18, r18
    6ec6:	33 27       	eor	r19, r19
    6ec8:	09 a7       	lds	r16, 0x79
    6eca:	1a a7       	lds	r17, 0x7a
    6ecc:	2b a7       	lds	r18, 0x7b
    6ece:	3c a7       	lds	r19, 0x7c
    6ed0:	49 ac       	sts	0xa9, r20
    6ed2:	5a ac       	sts	0xaa, r21
    6ed4:	6b ac       	sts	0xab, r22
    6ed6:	7c ac       	sts	0xac, r23
    6ed8:	2f ef       	ldi	r18, 0xFF	; 255
    6eda:	3f ef       	ldi	r19, 0xFF	; 255
    6edc:	40 e0       	ldi	r20, 0x00	; 0
    6ede:	50 e0       	ldi	r21, 0x00	; 0
    6ee0:	42 22       	and	r4, r18
    6ee2:	53 22       	and	r5, r19
    6ee4:	64 22       	and	r6, r20
    6ee6:	75 22       	and	r7, r21
    6ee8:	29 ad       	sts	0x69, r18
    6eea:	3a ad       	sts	0x6a, r19
    6eec:	4b ad       	sts	0x6b, r20
    6eee:	5c ad       	sts	0x6c, r21
    6ef0:	8a 01       	movw	r16, r20
    6ef2:	22 27       	eor	r18, r18
    6ef4:	33 27       	eor	r19, r19
    6ef6:	09 ab       	sts	0x59, r16
    6ef8:	1a ab       	sts	0x5a, r17
    6efa:	2b ab       	sts	0x5b, r18
    6efc:	3c ab       	sts	0x5c, r19
    6efe:	c5 01       	movw	r24, r10
    6f00:	b4 01       	movw	r22, r8
    6f02:	a3 01       	movw	r20, r6
    6f04:	92 01       	movw	r18, r4
    6f06:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6f0a:	69 af       	sts	0x79, r22
    6f0c:	7a af       	sts	0x7a, r23
    6f0e:	8b af       	sts	0x7b, r24
    6f10:	9c af       	sts	0x7c, r25
    6f12:	c5 01       	movw	r24, r10
    6f14:	b4 01       	movw	r22, r8
    6f16:	29 a9       	sts	0x49, r18
    6f18:	3a a9       	sts	0x4a, r19
    6f1a:	4b a9       	sts	0x4b, r20
    6f1c:	5c a9       	sts	0x4c, r21
    6f1e:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6f22:	4b 01       	movw	r8, r22
    6f24:	5c 01       	movw	r10, r24
    6f26:	69 a5       	lds	r22, 0x69
    6f28:	7a a5       	lds	r23, 0x6a
    6f2a:	8b a5       	lds	r24, 0x6b
    6f2c:	9c a5       	lds	r25, 0x6c
    6f2e:	a3 01       	movw	r20, r6
    6f30:	92 01       	movw	r18, r4
    6f32:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6f36:	2b 01       	movw	r4, r22
    6f38:	3c 01       	movw	r6, r24
    6f3a:	69 a5       	lds	r22, 0x69
    6f3c:	7a a5       	lds	r23, 0x6a
    6f3e:	8b a5       	lds	r24, 0x6b
    6f40:	9c a5       	lds	r25, 0x6c
    6f42:	29 a9       	sts	0x49, r18
    6f44:	3a a9       	sts	0x4a, r19
    6f46:	4b a9       	sts	0x4b, r20
    6f48:	5c a9       	sts	0x4c, r21
    6f4a:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__mulsi3>
    6f4e:	ab 01       	movw	r20, r22
    6f50:	bc 01       	movw	r22, r24
    6f52:	84 0c       	add	r8, r4
    6f54:	95 1c       	adc	r9, r5
    6f56:	a6 1c       	adc	r10, r6
    6f58:	b7 1c       	adc	r11, r7
    6f5a:	09 ad       	sts	0x69, r16
    6f5c:	1a ad       	sts	0x6a, r17
    6f5e:	2b ad       	sts	0x6b, r18
    6f60:	3c ad       	sts	0x6c, r19
    6f62:	c9 01       	movw	r24, r18
    6f64:	aa 27       	eor	r26, r26
    6f66:	bb 27       	eor	r27, r27
    6f68:	88 0e       	add	r8, r24
    6f6a:	99 1e       	adc	r9, r25
    6f6c:	aa 1e       	adc	r10, r26
    6f6e:	bb 1e       	adc	r11, r27
    6f70:	84 14       	cp	r8, r4
    6f72:	95 04       	cpc	r9, r5
    6f74:	a6 04       	cpc	r10, r6
    6f76:	b7 04       	cpc	r11, r7
    6f78:	20 f4       	brcc	.+8      	; 0x6f82 <__divdi3+0xde4>
    6f7a:	40 50       	subi	r20, 0x00	; 0
    6f7c:	50 40       	sbci	r21, 0x00	; 0
    6f7e:	6f 4f       	sbci	r22, 0xFF	; 255
    6f80:	7f 4f       	sbci	r23, 0xFF	; 255
    6f82:	c5 01       	movw	r24, r10
    6f84:	aa 27       	eor	r26, r26
    6f86:	bb 27       	eor	r27, r27
    6f88:	84 0f       	add	r24, r20
    6f8a:	95 1f       	adc	r25, r21
    6f8c:	a6 1f       	adc	r26, r22
    6f8e:	b7 1f       	adc	r27, r23
    6f90:	0d a5       	lds	r16, 0x6d
    6f92:	1e a5       	lds	r17, 0x6e
    6f94:	2f a5       	lds	r18, 0x6f
    6f96:	38 a9       	sts	0x48, r19
    6f98:	08 17       	cp	r16, r24
    6f9a:	19 07       	cpc	r17, r25
    6f9c:	2a 07       	cpc	r18, r26
    6f9e:	3b 07       	cpc	r19, r27
    6fa0:	18 f1       	brcs	.+70     	; 0x6fe8 <__divdi3+0xe4a>
    6fa2:	80 17       	cp	r24, r16
    6fa4:	91 07       	cpc	r25, r17
    6fa6:	a2 07       	cpc	r26, r18
    6fa8:	b3 07       	cpc	r27, r19
    6faa:	a1 f5       	brne	.+104    	; 0x7014 <__divdi3+0xe76>
    6fac:	54 01       	movw	r10, r8
    6fae:	99 24       	eor	r9, r9
    6fb0:	88 24       	eor	r8, r8
    6fb2:	89 ad       	sts	0x69, r24
    6fb4:	9a ad       	sts	0x6a, r25
    6fb6:	ab ad       	sts	0x6b, r26
    6fb8:	bc ad       	sts	0x6c, r27
    6fba:	a0 70       	andi	r26, 0x00	; 0
    6fbc:	b0 70       	andi	r27, 0x00	; 0
    6fbe:	88 0e       	add	r8, r24
    6fc0:	99 1e       	adc	r9, r25
    6fc2:	aa 1e       	adc	r10, r26
    6fc4:	bb 1e       	adc	r11, r27
    6fc6:	4d a9       	sts	0x4d, r20
    6fc8:	5e a9       	sts	0x4e, r21
    6fca:	6f a9       	sts	0x4f, r22
    6fcc:	78 ad       	sts	0x68, r23
    6fce:	03 2c       	mov	r0, r3
    6fd0:	04 c0       	rjmp	.+8      	; 0x6fda <__divdi3+0xe3c>
    6fd2:	44 0f       	add	r20, r20
    6fd4:	55 1f       	adc	r21, r21
    6fd6:	66 1f       	adc	r22, r22
    6fd8:	77 1f       	adc	r23, r23
    6fda:	0a 94       	dec	r0
    6fdc:	d2 f7       	brpl	.-12     	; 0x6fd2 <__divdi3+0xe34>
    6fde:	48 15       	cp	r20, r8
    6fe0:	59 05       	cpc	r21, r9
    6fe2:	6a 05       	cpc	r22, r10
    6fe4:	7b 05       	cpc	r23, r11
    6fe6:	b0 f4       	brcc	.+44     	; 0x7014 <__divdi3+0xe76>
    6fe8:	08 94       	sec
    6fea:	c1 08       	sbc	r12, r1
    6fec:	d1 08       	sbc	r13, r1
    6fee:	e1 08       	sbc	r14, r1
    6ff0:	f1 08       	sbc	r15, r1
    6ff2:	10 c0       	rjmp	.+32     	; 0x7014 <__divdi3+0xe76>
    6ff4:	44 24       	eor	r4, r4
    6ff6:	55 24       	eor	r5, r5
    6ff8:	32 01       	movw	r6, r4
    6ffa:	cc 24       	eor	r12, r12
    6ffc:	dd 24       	eor	r13, r13
    6ffe:	76 01       	movw	r14, r12
    7000:	0c c0       	rjmp	.+24     	; 0x701a <__divdi3+0xe7c>
    7002:	44 24       	eor	r4, r4
    7004:	55 24       	eor	r5, r5
    7006:	32 01       	movw	r6, r4
    7008:	81 e0       	ldi	r24, 0x01	; 1
    700a:	c8 2e       	mov	r12, r24
    700c:	d1 2c       	mov	r13, r1
    700e:	e1 2c       	mov	r14, r1
    7010:	f1 2c       	mov	r15, r1
    7012:	03 c0       	rjmp	.+6      	; 0x701a <__divdi3+0xe7c>
    7014:	44 24       	eor	r4, r4
    7016:	55 24       	eor	r5, r5
    7018:	32 01       	movw	r6, r4
    701a:	fe 01       	movw	r30, r28
    701c:	31 96       	adiw	r30, 0x01	; 1
    701e:	88 e0       	ldi	r24, 0x08	; 8
    7020:	df 01       	movw	r26, r30
    7022:	1d 92       	st	X+, r1
    7024:	8a 95       	dec	r24
    7026:	e9 f7       	brne	.-6      	; 0x7022 <__divdi3+0xe84>
    7028:	c9 82       	std	Y+1, r12	; 0x01
    702a:	da 82       	std	Y+2, r13	; 0x02
    702c:	eb 82       	std	Y+3, r14	; 0x03
    702e:	fc 82       	std	Y+4, r15	; 0x04
    7030:	4d 82       	std	Y+5, r4	; 0x05
    7032:	5e 82       	std	Y+6, r5	; 0x06
    7034:	6f 82       	std	Y+7, r6	; 0x07
    7036:	78 86       	std	Y+8, r7	; 0x08
    7038:	2c 2d       	mov	r18, r12
    703a:	3a 81       	ldd	r19, Y+2	; 0x02
    703c:	4b 81       	ldd	r20, Y+3	; 0x03
    703e:	5c 81       	ldd	r21, Y+4	; 0x04
    7040:	64 2d       	mov	r22, r4
    7042:	7e 81       	ldd	r23, Y+6	; 0x06
    7044:	8f 81       	ldd	r24, Y+7	; 0x07
    7046:	98 85       	ldd	r25, Y+8	; 0x08
    7048:	25 96       	adiw	r28, 0x05	; 5
    704a:	ec ac       	sts	0xac, r30
    704c:	fd ac       	sts	0xad, r31
    704e:	0e ad       	sts	0x6e, r16
    7050:	1f ad       	sts	0x6f, r17
    7052:	25 97       	sbiw	r28, 0x05	; 5
    7054:	e1 14       	cp	r14, r1
    7056:	f1 04       	cpc	r15, r1
    7058:	01 05       	cpc	r16, r1
    705a:	11 05       	cpc	r17, r1
    705c:	09 f4       	brne	.+2      	; 0x7060 <__divdi3+0xec2>
    705e:	56 c0       	rjmp	.+172    	; 0x710c <__divdi3+0xf6e>
    7060:	21 95       	neg	r18
    7062:	e1 e0       	ldi	r30, 0x01	; 1
    7064:	12 16       	cp	r1, r18
    7066:	08 f0       	brcs	.+2      	; 0x706a <__divdi3+0xecc>
    7068:	e0 e0       	ldi	r30, 0x00	; 0
    706a:	31 95       	neg	r19
    706c:	f1 e0       	ldi	r31, 0x01	; 1
    706e:	13 16       	cp	r1, r19
    7070:	08 f0       	brcs	.+2      	; 0x7074 <__divdi3+0xed6>
    7072:	f0 e0       	ldi	r31, 0x00	; 0
    7074:	03 2f       	mov	r16, r19
    7076:	0e 1b       	sub	r16, r30
    7078:	e1 e0       	ldi	r30, 0x01	; 1
    707a:	30 17       	cp	r19, r16
    707c:	08 f0       	brcs	.+2      	; 0x7080 <__divdi3+0xee2>
    707e:	e0 e0       	ldi	r30, 0x00	; 0
    7080:	fe 2b       	or	r31, r30
    7082:	41 95       	neg	r20
    7084:	e1 e0       	ldi	r30, 0x01	; 1
    7086:	14 16       	cp	r1, r20
    7088:	08 f0       	brcs	.+2      	; 0x708c <__divdi3+0xeee>
    708a:	e0 e0       	ldi	r30, 0x00	; 0
    708c:	14 2f       	mov	r17, r20
    708e:	1f 1b       	sub	r17, r31
    7090:	31 e0       	ldi	r19, 0x01	; 1
    7092:	41 17       	cp	r20, r17
    7094:	08 f0       	brcs	.+2      	; 0x7098 <__divdi3+0xefa>
    7096:	30 e0       	ldi	r19, 0x00	; 0
    7098:	e3 2b       	or	r30, r19
    709a:	51 95       	neg	r21
    709c:	f1 e0       	ldi	r31, 0x01	; 1
    709e:	15 16       	cp	r1, r21
    70a0:	08 f0       	brcs	.+2      	; 0x70a4 <__divdi3+0xf06>
    70a2:	f0 e0       	ldi	r31, 0x00	; 0
    70a4:	b5 2f       	mov	r27, r21
    70a6:	be 1b       	sub	r27, r30
    70a8:	31 e0       	ldi	r19, 0x01	; 1
    70aa:	5b 17       	cp	r21, r27
    70ac:	08 f0       	brcs	.+2      	; 0x70b0 <__divdi3+0xf12>
    70ae:	30 e0       	ldi	r19, 0x00	; 0
    70b0:	f3 2b       	or	r31, r19
    70b2:	61 95       	neg	r22
    70b4:	e1 e0       	ldi	r30, 0x01	; 1
    70b6:	16 16       	cp	r1, r22
    70b8:	08 f0       	brcs	.+2      	; 0x70bc <__divdi3+0xf1e>
    70ba:	e0 e0       	ldi	r30, 0x00	; 0
    70bc:	46 2e       	mov	r4, r22
    70be:	4f 1a       	sub	r4, r31
    70c0:	31 e0       	ldi	r19, 0x01	; 1
    70c2:	64 15       	cp	r22, r4
    70c4:	08 f0       	brcs	.+2      	; 0x70c8 <__divdi3+0xf2a>
    70c6:	30 e0       	ldi	r19, 0x00	; 0
    70c8:	e3 2b       	or	r30, r19
    70ca:	71 95       	neg	r23
    70cc:	f1 e0       	ldi	r31, 0x01	; 1
    70ce:	17 16       	cp	r1, r23
    70d0:	08 f0       	brcs	.+2      	; 0x70d4 <__divdi3+0xf36>
    70d2:	f0 e0       	ldi	r31, 0x00	; 0
    70d4:	a7 2f       	mov	r26, r23
    70d6:	ae 1b       	sub	r26, r30
    70d8:	31 e0       	ldi	r19, 0x01	; 1
    70da:	7a 17       	cp	r23, r26
    70dc:	08 f0       	brcs	.+2      	; 0x70e0 <__divdi3+0xf42>
    70de:	30 e0       	ldi	r19, 0x00	; 0
    70e0:	f3 2b       	or	r31, r19
    70e2:	81 95       	neg	r24
    70e4:	e1 e0       	ldi	r30, 0x01	; 1
    70e6:	18 16       	cp	r1, r24
    70e8:	08 f0       	brcs	.+2      	; 0x70ec <__divdi3+0xf4e>
    70ea:	e0 e0       	ldi	r30, 0x00	; 0
    70ec:	f8 2e       	mov	r15, r24
    70ee:	ff 1a       	sub	r15, r31
    70f0:	ff 2d       	mov	r31, r15
    70f2:	31 e0       	ldi	r19, 0x01	; 1
    70f4:	8f 15       	cp	r24, r15
    70f6:	08 f0       	brcs	.+2      	; 0x70fa <__divdi3+0xf5c>
    70f8:	30 e0       	ldi	r19, 0x00	; 0
    70fa:	e3 2b       	or	r30, r19
    70fc:	91 95       	neg	r25
    70fe:	30 2f       	mov	r19, r16
    7100:	41 2f       	mov	r20, r17
    7102:	5b 2f       	mov	r21, r27
    7104:	64 2d       	mov	r22, r4
    7106:	7a 2f       	mov	r23, r26
    7108:	8f 2f       	mov	r24, r31
    710a:	9e 1b       	sub	r25, r30
    710c:	c8 5b       	subi	r28, 0xB8	; 184
    710e:	df 4f       	sbci	r29, 0xFF	; 255
    7110:	e1 e1       	ldi	r30, 0x11	; 17
    7112:	0c 94 d7 3a 	jmp	0x75ae	; 0x75ae <__epilogue_restores__+0x2>

00007116 <__subsf3>:
    7116:	50 58       	subi	r21, 0x80	; 128

00007118 <__addsf3>:
    7118:	bb 27       	eor	r27, r27
    711a:	aa 27       	eor	r26, r26
    711c:	0e d0       	rcall	.+28     	; 0x713a <__addsf3x>
    711e:	48 c1       	rjmp	.+656    	; 0x73b0 <__fp_round>
    7120:	39 d1       	rcall	.+626    	; 0x7394 <__fp_pscA>
    7122:	30 f0       	brcs	.+12     	; 0x7130 <__addsf3+0x18>
    7124:	3e d1       	rcall	.+636    	; 0x73a2 <__fp_pscB>
    7126:	20 f0       	brcs	.+8      	; 0x7130 <__addsf3+0x18>
    7128:	31 f4       	brne	.+12     	; 0x7136 <__addsf3+0x1e>
    712a:	9f 3f       	cpi	r25, 0xFF	; 255
    712c:	11 f4       	brne	.+4      	; 0x7132 <__addsf3+0x1a>
    712e:	1e f4       	brtc	.+6      	; 0x7136 <__addsf3+0x1e>
    7130:	2e c1       	rjmp	.+604    	; 0x738e <__fp_nan>
    7132:	0e f4       	brtc	.+2      	; 0x7136 <__addsf3+0x1e>
    7134:	e0 95       	com	r30
    7136:	e7 fb       	bst	r30, 7
    7138:	24 c1       	rjmp	.+584    	; 0x7382 <__fp_inf>

0000713a <__addsf3x>:
    713a:	e9 2f       	mov	r30, r25
    713c:	4a d1       	rcall	.+660    	; 0x73d2 <__fp_split3>
    713e:	80 f3       	brcs	.-32     	; 0x7120 <__addsf3+0x8>
    7140:	ba 17       	cp	r27, r26
    7142:	62 07       	cpc	r22, r18
    7144:	73 07       	cpc	r23, r19
    7146:	84 07       	cpc	r24, r20
    7148:	95 07       	cpc	r25, r21
    714a:	18 f0       	brcs	.+6      	; 0x7152 <__addsf3x+0x18>
    714c:	71 f4       	brne	.+28     	; 0x716a <__addsf3x+0x30>
    714e:	9e f5       	brtc	.+102    	; 0x71b6 <__addsf3x+0x7c>
    7150:	62 c1       	rjmp	.+708    	; 0x7416 <__fp_zero>
    7152:	0e f4       	brtc	.+2      	; 0x7156 <__addsf3x+0x1c>
    7154:	e0 95       	com	r30
    7156:	0b 2e       	mov	r0, r27
    7158:	ba 2f       	mov	r27, r26
    715a:	a0 2d       	mov	r26, r0
    715c:	0b 01       	movw	r0, r22
    715e:	b9 01       	movw	r22, r18
    7160:	90 01       	movw	r18, r0
    7162:	0c 01       	movw	r0, r24
    7164:	ca 01       	movw	r24, r20
    7166:	a0 01       	movw	r20, r0
    7168:	11 24       	eor	r1, r1
    716a:	ff 27       	eor	r31, r31
    716c:	59 1b       	sub	r21, r25
    716e:	99 f0       	breq	.+38     	; 0x7196 <__addsf3x+0x5c>
    7170:	59 3f       	cpi	r21, 0xF9	; 249
    7172:	50 f4       	brcc	.+20     	; 0x7188 <__addsf3x+0x4e>
    7174:	50 3e       	cpi	r21, 0xE0	; 224
    7176:	68 f1       	brcs	.+90     	; 0x71d2 <__addsf3x+0x98>
    7178:	1a 16       	cp	r1, r26
    717a:	f0 40       	sbci	r31, 0x00	; 0
    717c:	a2 2f       	mov	r26, r18
    717e:	23 2f       	mov	r18, r19
    7180:	34 2f       	mov	r19, r20
    7182:	44 27       	eor	r20, r20
    7184:	58 5f       	subi	r21, 0xF8	; 248
    7186:	f3 cf       	rjmp	.-26     	; 0x716e <__addsf3x+0x34>
    7188:	46 95       	lsr	r20
    718a:	37 95       	ror	r19
    718c:	27 95       	ror	r18
    718e:	a7 95       	ror	r26
    7190:	f0 40       	sbci	r31, 0x00	; 0
    7192:	53 95       	inc	r21
    7194:	c9 f7       	brne	.-14     	; 0x7188 <__addsf3x+0x4e>
    7196:	7e f4       	brtc	.+30     	; 0x71b6 <__addsf3x+0x7c>
    7198:	1f 16       	cp	r1, r31
    719a:	ba 0b       	sbc	r27, r26
    719c:	62 0b       	sbc	r22, r18
    719e:	73 0b       	sbc	r23, r19
    71a0:	84 0b       	sbc	r24, r20
    71a2:	ba f0       	brmi	.+46     	; 0x71d2 <__addsf3x+0x98>
    71a4:	91 50       	subi	r25, 0x01	; 1
    71a6:	a1 f0       	breq	.+40     	; 0x71d0 <__addsf3x+0x96>
    71a8:	ff 0f       	add	r31, r31
    71aa:	bb 1f       	adc	r27, r27
    71ac:	66 1f       	adc	r22, r22
    71ae:	77 1f       	adc	r23, r23
    71b0:	88 1f       	adc	r24, r24
    71b2:	c2 f7       	brpl	.-16     	; 0x71a4 <__addsf3x+0x6a>
    71b4:	0e c0       	rjmp	.+28     	; 0x71d2 <__addsf3x+0x98>
    71b6:	ba 0f       	add	r27, r26
    71b8:	62 1f       	adc	r22, r18
    71ba:	73 1f       	adc	r23, r19
    71bc:	84 1f       	adc	r24, r20
    71be:	48 f4       	brcc	.+18     	; 0x71d2 <__addsf3x+0x98>
    71c0:	87 95       	ror	r24
    71c2:	77 95       	ror	r23
    71c4:	67 95       	ror	r22
    71c6:	b7 95       	ror	r27
    71c8:	f7 95       	ror	r31
    71ca:	9e 3f       	cpi	r25, 0xFE	; 254
    71cc:	08 f0       	brcs	.+2      	; 0x71d0 <__addsf3x+0x96>
    71ce:	b3 cf       	rjmp	.-154    	; 0x7136 <__addsf3+0x1e>
    71d0:	93 95       	inc	r25
    71d2:	88 0f       	add	r24, r24
    71d4:	08 f0       	brcs	.+2      	; 0x71d8 <__addsf3x+0x9e>
    71d6:	99 27       	eor	r25, r25
    71d8:	ee 0f       	add	r30, r30
    71da:	97 95       	ror	r25
    71dc:	87 95       	ror	r24
    71de:	08 95       	ret

000071e0 <__divsf3>:
    71e0:	0c d0       	rcall	.+24     	; 0x71fa <__divsf3x>
    71e2:	e6 c0       	rjmp	.+460    	; 0x73b0 <__fp_round>
    71e4:	de d0       	rcall	.+444    	; 0x73a2 <__fp_pscB>
    71e6:	40 f0       	brcs	.+16     	; 0x71f8 <__divsf3+0x18>
    71e8:	d5 d0       	rcall	.+426    	; 0x7394 <__fp_pscA>
    71ea:	30 f0       	brcs	.+12     	; 0x71f8 <__divsf3+0x18>
    71ec:	21 f4       	brne	.+8      	; 0x71f6 <__divsf3+0x16>
    71ee:	5f 3f       	cpi	r21, 0xFF	; 255
    71f0:	19 f0       	breq	.+6      	; 0x71f8 <__divsf3+0x18>
    71f2:	c7 c0       	rjmp	.+398    	; 0x7382 <__fp_inf>
    71f4:	51 11       	cpse	r21, r1
    71f6:	10 c1       	rjmp	.+544    	; 0x7418 <__fp_szero>
    71f8:	ca c0       	rjmp	.+404    	; 0x738e <__fp_nan>

000071fa <__divsf3x>:
    71fa:	eb d0       	rcall	.+470    	; 0x73d2 <__fp_split3>
    71fc:	98 f3       	brcs	.-26     	; 0x71e4 <__divsf3+0x4>

000071fe <__divsf3_pse>:
    71fe:	99 23       	and	r25, r25
    7200:	c9 f3       	breq	.-14     	; 0x71f4 <__divsf3+0x14>
    7202:	55 23       	and	r21, r21
    7204:	b1 f3       	breq	.-20     	; 0x71f2 <__divsf3+0x12>
    7206:	95 1b       	sub	r25, r21
    7208:	55 0b       	sbc	r21, r21
    720a:	bb 27       	eor	r27, r27
    720c:	aa 27       	eor	r26, r26
    720e:	62 17       	cp	r22, r18
    7210:	73 07       	cpc	r23, r19
    7212:	84 07       	cpc	r24, r20
    7214:	38 f0       	brcs	.+14     	; 0x7224 <__divsf3_pse+0x26>
    7216:	9f 5f       	subi	r25, 0xFF	; 255
    7218:	5f 4f       	sbci	r21, 0xFF	; 255
    721a:	22 0f       	add	r18, r18
    721c:	33 1f       	adc	r19, r19
    721e:	44 1f       	adc	r20, r20
    7220:	aa 1f       	adc	r26, r26
    7222:	a9 f3       	breq	.-22     	; 0x720e <__divsf3_pse+0x10>
    7224:	33 d0       	rcall	.+102    	; 0x728c <__divsf3_pse+0x8e>
    7226:	0e 2e       	mov	r0, r30
    7228:	3a f0       	brmi	.+14     	; 0x7238 <__divsf3_pse+0x3a>
    722a:	e0 e8       	ldi	r30, 0x80	; 128
    722c:	30 d0       	rcall	.+96     	; 0x728e <__divsf3_pse+0x90>
    722e:	91 50       	subi	r25, 0x01	; 1
    7230:	50 40       	sbci	r21, 0x00	; 0
    7232:	e6 95       	lsr	r30
    7234:	00 1c       	adc	r0, r0
    7236:	ca f7       	brpl	.-14     	; 0x722a <__divsf3_pse+0x2c>
    7238:	29 d0       	rcall	.+82     	; 0x728c <__divsf3_pse+0x8e>
    723a:	fe 2f       	mov	r31, r30
    723c:	27 d0       	rcall	.+78     	; 0x728c <__divsf3_pse+0x8e>
    723e:	66 0f       	add	r22, r22
    7240:	77 1f       	adc	r23, r23
    7242:	88 1f       	adc	r24, r24
    7244:	bb 1f       	adc	r27, r27
    7246:	26 17       	cp	r18, r22
    7248:	37 07       	cpc	r19, r23
    724a:	48 07       	cpc	r20, r24
    724c:	ab 07       	cpc	r26, r27
    724e:	b0 e8       	ldi	r27, 0x80	; 128
    7250:	09 f0       	breq	.+2      	; 0x7254 <__divsf3_pse+0x56>
    7252:	bb 0b       	sbc	r27, r27
    7254:	80 2d       	mov	r24, r0
    7256:	bf 01       	movw	r22, r30
    7258:	ff 27       	eor	r31, r31
    725a:	93 58       	subi	r25, 0x83	; 131
    725c:	5f 4f       	sbci	r21, 0xFF	; 255
    725e:	2a f0       	brmi	.+10     	; 0x726a <__divsf3_pse+0x6c>
    7260:	9e 3f       	cpi	r25, 0xFE	; 254
    7262:	51 05       	cpc	r21, r1
    7264:	68 f0       	brcs	.+26     	; 0x7280 <__divsf3_pse+0x82>
    7266:	8d c0       	rjmp	.+282    	; 0x7382 <__fp_inf>
    7268:	d7 c0       	rjmp	.+430    	; 0x7418 <__fp_szero>
    726a:	5f 3f       	cpi	r21, 0xFF	; 255
    726c:	ec f3       	brlt	.-6      	; 0x7268 <__divsf3_pse+0x6a>
    726e:	98 3e       	cpi	r25, 0xE8	; 232
    7270:	dc f3       	brlt	.-10     	; 0x7268 <__divsf3_pse+0x6a>
    7272:	86 95       	lsr	r24
    7274:	77 95       	ror	r23
    7276:	67 95       	ror	r22
    7278:	b7 95       	ror	r27
    727a:	f7 95       	ror	r31
    727c:	9f 5f       	subi	r25, 0xFF	; 255
    727e:	c9 f7       	brne	.-14     	; 0x7272 <__divsf3_pse+0x74>
    7280:	88 0f       	add	r24, r24
    7282:	91 1d       	adc	r25, r1
    7284:	96 95       	lsr	r25
    7286:	87 95       	ror	r24
    7288:	97 f9       	bld	r25, 7
    728a:	08 95       	ret
    728c:	e1 e0       	ldi	r30, 0x01	; 1
    728e:	66 0f       	add	r22, r22
    7290:	77 1f       	adc	r23, r23
    7292:	88 1f       	adc	r24, r24
    7294:	bb 1f       	adc	r27, r27
    7296:	62 17       	cp	r22, r18
    7298:	73 07       	cpc	r23, r19
    729a:	84 07       	cpc	r24, r20
    729c:	ba 07       	cpc	r27, r26
    729e:	20 f0       	brcs	.+8      	; 0x72a8 <__divsf3_pse+0xaa>
    72a0:	62 1b       	sub	r22, r18
    72a2:	73 0b       	sbc	r23, r19
    72a4:	84 0b       	sbc	r24, r20
    72a6:	ba 0b       	sbc	r27, r26
    72a8:	ee 1f       	adc	r30, r30
    72aa:	88 f7       	brcc	.-30     	; 0x728e <__divsf3_pse+0x90>
    72ac:	e0 95       	com	r30
    72ae:	08 95       	ret

000072b0 <__fixunssfsi>:
    72b0:	98 d0       	rcall	.+304    	; 0x73e2 <__fp_splitA>
    72b2:	88 f0       	brcs	.+34     	; 0x72d6 <__fixunssfsi+0x26>
    72b4:	9f 57       	subi	r25, 0x7F	; 127
    72b6:	90 f0       	brcs	.+36     	; 0x72dc <__fixunssfsi+0x2c>
    72b8:	b9 2f       	mov	r27, r25
    72ba:	99 27       	eor	r25, r25
    72bc:	b7 51       	subi	r27, 0x17	; 23
    72be:	a0 f0       	brcs	.+40     	; 0x72e8 <__fixunssfsi+0x38>
    72c0:	d1 f0       	breq	.+52     	; 0x72f6 <__fixunssfsi+0x46>
    72c2:	66 0f       	add	r22, r22
    72c4:	77 1f       	adc	r23, r23
    72c6:	88 1f       	adc	r24, r24
    72c8:	99 1f       	adc	r25, r25
    72ca:	1a f0       	brmi	.+6      	; 0x72d2 <__fixunssfsi+0x22>
    72cc:	ba 95       	dec	r27
    72ce:	c9 f7       	brne	.-14     	; 0x72c2 <__fixunssfsi+0x12>
    72d0:	12 c0       	rjmp	.+36     	; 0x72f6 <__fixunssfsi+0x46>
    72d2:	b1 30       	cpi	r27, 0x01	; 1
    72d4:	81 f0       	breq	.+32     	; 0x72f6 <__fixunssfsi+0x46>
    72d6:	9f d0       	rcall	.+318    	; 0x7416 <__fp_zero>
    72d8:	b1 e0       	ldi	r27, 0x01	; 1
    72da:	08 95       	ret
    72dc:	9c c0       	rjmp	.+312    	; 0x7416 <__fp_zero>
    72de:	67 2f       	mov	r22, r23
    72e0:	78 2f       	mov	r23, r24
    72e2:	88 27       	eor	r24, r24
    72e4:	b8 5f       	subi	r27, 0xF8	; 248
    72e6:	39 f0       	breq	.+14     	; 0x72f6 <__fixunssfsi+0x46>
    72e8:	b9 3f       	cpi	r27, 0xF9	; 249
    72ea:	cc f3       	brlt	.-14     	; 0x72de <__fixunssfsi+0x2e>
    72ec:	86 95       	lsr	r24
    72ee:	77 95       	ror	r23
    72f0:	67 95       	ror	r22
    72f2:	b3 95       	inc	r27
    72f4:	d9 f7       	brne	.-10     	; 0x72ec <__fixunssfsi+0x3c>
    72f6:	3e f4       	brtc	.+14     	; 0x7306 <__fixunssfsi+0x56>
    72f8:	90 95       	com	r25
    72fa:	80 95       	com	r24
    72fc:	70 95       	com	r23
    72fe:	61 95       	neg	r22
    7300:	7f 4f       	sbci	r23, 0xFF	; 255
    7302:	8f 4f       	sbci	r24, 0xFF	; 255
    7304:	9f 4f       	sbci	r25, 0xFF	; 255
    7306:	08 95       	ret

00007308 <__floatunsisf>:
    7308:	e8 94       	clt
    730a:	09 c0       	rjmp	.+18     	; 0x731e <__floatsisf+0x12>

0000730c <__floatsisf>:
    730c:	97 fb       	bst	r25, 7
    730e:	3e f4       	brtc	.+14     	; 0x731e <__floatsisf+0x12>
    7310:	90 95       	com	r25
    7312:	80 95       	com	r24
    7314:	70 95       	com	r23
    7316:	61 95       	neg	r22
    7318:	7f 4f       	sbci	r23, 0xFF	; 255
    731a:	8f 4f       	sbci	r24, 0xFF	; 255
    731c:	9f 4f       	sbci	r25, 0xFF	; 255
    731e:	99 23       	and	r25, r25
    7320:	a9 f0       	breq	.+42     	; 0x734c <__floatsisf+0x40>
    7322:	f9 2f       	mov	r31, r25
    7324:	96 e9       	ldi	r25, 0x96	; 150
    7326:	bb 27       	eor	r27, r27
    7328:	93 95       	inc	r25
    732a:	f6 95       	lsr	r31
    732c:	87 95       	ror	r24
    732e:	77 95       	ror	r23
    7330:	67 95       	ror	r22
    7332:	b7 95       	ror	r27
    7334:	f1 11       	cpse	r31, r1
    7336:	f8 cf       	rjmp	.-16     	; 0x7328 <__floatsisf+0x1c>
    7338:	fa f4       	brpl	.+62     	; 0x7378 <__floatsisf+0x6c>
    733a:	bb 0f       	add	r27, r27
    733c:	11 f4       	brne	.+4      	; 0x7342 <__floatsisf+0x36>
    733e:	60 ff       	sbrs	r22, 0
    7340:	1b c0       	rjmp	.+54     	; 0x7378 <__floatsisf+0x6c>
    7342:	6f 5f       	subi	r22, 0xFF	; 255
    7344:	7f 4f       	sbci	r23, 0xFF	; 255
    7346:	8f 4f       	sbci	r24, 0xFF	; 255
    7348:	9f 4f       	sbci	r25, 0xFF	; 255
    734a:	16 c0       	rjmp	.+44     	; 0x7378 <__floatsisf+0x6c>
    734c:	88 23       	and	r24, r24
    734e:	11 f0       	breq	.+4      	; 0x7354 <__floatsisf+0x48>
    7350:	96 e9       	ldi	r25, 0x96	; 150
    7352:	11 c0       	rjmp	.+34     	; 0x7376 <__floatsisf+0x6a>
    7354:	77 23       	and	r23, r23
    7356:	21 f0       	breq	.+8      	; 0x7360 <__floatsisf+0x54>
    7358:	9e e8       	ldi	r25, 0x8E	; 142
    735a:	87 2f       	mov	r24, r23
    735c:	76 2f       	mov	r23, r22
    735e:	05 c0       	rjmp	.+10     	; 0x736a <__floatsisf+0x5e>
    7360:	66 23       	and	r22, r22
    7362:	71 f0       	breq	.+28     	; 0x7380 <__floatsisf+0x74>
    7364:	96 e8       	ldi	r25, 0x86	; 134
    7366:	86 2f       	mov	r24, r22
    7368:	70 e0       	ldi	r23, 0x00	; 0
    736a:	60 e0       	ldi	r22, 0x00	; 0
    736c:	2a f0       	brmi	.+10     	; 0x7378 <__floatsisf+0x6c>
    736e:	9a 95       	dec	r25
    7370:	66 0f       	add	r22, r22
    7372:	77 1f       	adc	r23, r23
    7374:	88 1f       	adc	r24, r24
    7376:	da f7       	brpl	.-10     	; 0x736e <__floatsisf+0x62>
    7378:	88 0f       	add	r24, r24
    737a:	96 95       	lsr	r25
    737c:	87 95       	ror	r24
    737e:	97 f9       	bld	r25, 7
    7380:	08 95       	ret

00007382 <__fp_inf>:
    7382:	97 f9       	bld	r25, 7
    7384:	9f 67       	ori	r25, 0x7F	; 127
    7386:	80 e8       	ldi	r24, 0x80	; 128
    7388:	70 e0       	ldi	r23, 0x00	; 0
    738a:	60 e0       	ldi	r22, 0x00	; 0
    738c:	08 95       	ret

0000738e <__fp_nan>:
    738e:	9f ef       	ldi	r25, 0xFF	; 255
    7390:	80 ec       	ldi	r24, 0xC0	; 192
    7392:	08 95       	ret

00007394 <__fp_pscA>:
    7394:	00 24       	eor	r0, r0
    7396:	0a 94       	dec	r0
    7398:	16 16       	cp	r1, r22
    739a:	17 06       	cpc	r1, r23
    739c:	18 06       	cpc	r1, r24
    739e:	09 06       	cpc	r0, r25
    73a0:	08 95       	ret

000073a2 <__fp_pscB>:
    73a2:	00 24       	eor	r0, r0
    73a4:	0a 94       	dec	r0
    73a6:	12 16       	cp	r1, r18
    73a8:	13 06       	cpc	r1, r19
    73aa:	14 06       	cpc	r1, r20
    73ac:	05 06       	cpc	r0, r21
    73ae:	08 95       	ret

000073b0 <__fp_round>:
    73b0:	09 2e       	mov	r0, r25
    73b2:	03 94       	inc	r0
    73b4:	00 0c       	add	r0, r0
    73b6:	11 f4       	brne	.+4      	; 0x73bc <__fp_round+0xc>
    73b8:	88 23       	and	r24, r24
    73ba:	52 f0       	brmi	.+20     	; 0x73d0 <__fp_round+0x20>
    73bc:	bb 0f       	add	r27, r27
    73be:	40 f4       	brcc	.+16     	; 0x73d0 <__fp_round+0x20>
    73c0:	bf 2b       	or	r27, r31
    73c2:	11 f4       	brne	.+4      	; 0x73c8 <__fp_round+0x18>
    73c4:	60 ff       	sbrs	r22, 0
    73c6:	04 c0       	rjmp	.+8      	; 0x73d0 <__fp_round+0x20>
    73c8:	6f 5f       	subi	r22, 0xFF	; 255
    73ca:	7f 4f       	sbci	r23, 0xFF	; 255
    73cc:	8f 4f       	sbci	r24, 0xFF	; 255
    73ce:	9f 4f       	sbci	r25, 0xFF	; 255
    73d0:	08 95       	ret

000073d2 <__fp_split3>:
    73d2:	57 fd       	sbrc	r21, 7
    73d4:	90 58       	subi	r25, 0x80	; 128
    73d6:	44 0f       	add	r20, r20
    73d8:	55 1f       	adc	r21, r21
    73da:	59 f0       	breq	.+22     	; 0x73f2 <__fp_splitA+0x10>
    73dc:	5f 3f       	cpi	r21, 0xFF	; 255
    73de:	71 f0       	breq	.+28     	; 0x73fc <__fp_splitA+0x1a>
    73e0:	47 95       	ror	r20

000073e2 <__fp_splitA>:
    73e2:	88 0f       	add	r24, r24
    73e4:	97 fb       	bst	r25, 7
    73e6:	99 1f       	adc	r25, r25
    73e8:	61 f0       	breq	.+24     	; 0x7402 <__fp_splitA+0x20>
    73ea:	9f 3f       	cpi	r25, 0xFF	; 255
    73ec:	79 f0       	breq	.+30     	; 0x740c <__fp_splitA+0x2a>
    73ee:	87 95       	ror	r24
    73f0:	08 95       	ret
    73f2:	12 16       	cp	r1, r18
    73f4:	13 06       	cpc	r1, r19
    73f6:	14 06       	cpc	r1, r20
    73f8:	55 1f       	adc	r21, r21
    73fa:	f2 cf       	rjmp	.-28     	; 0x73e0 <__fp_split3+0xe>
    73fc:	46 95       	lsr	r20
    73fe:	f1 df       	rcall	.-30     	; 0x73e2 <__fp_splitA>
    7400:	08 c0       	rjmp	.+16     	; 0x7412 <__fp_splitA+0x30>
    7402:	16 16       	cp	r1, r22
    7404:	17 06       	cpc	r1, r23
    7406:	18 06       	cpc	r1, r24
    7408:	99 1f       	adc	r25, r25
    740a:	f1 cf       	rjmp	.-30     	; 0x73ee <__fp_splitA+0xc>
    740c:	86 95       	lsr	r24
    740e:	71 05       	cpc	r23, r1
    7410:	61 05       	cpc	r22, r1
    7412:	08 94       	sec
    7414:	08 95       	ret

00007416 <__fp_zero>:
    7416:	e8 94       	clt

00007418 <__fp_szero>:
    7418:	bb 27       	eor	r27, r27
    741a:	66 27       	eor	r22, r22
    741c:	77 27       	eor	r23, r23
    741e:	cb 01       	movw	r24, r22
    7420:	97 f9       	bld	r25, 7
    7422:	08 95       	ret

00007424 <__gesf2>:
    7424:	03 d0       	rcall	.+6      	; 0x742c <__fp_cmp>
    7426:	08 f4       	brcc	.+2      	; 0x742a <__gesf2+0x6>
    7428:	8f ef       	ldi	r24, 0xFF	; 255
    742a:	08 95       	ret

0000742c <__fp_cmp>:
    742c:	99 0f       	add	r25, r25
    742e:	00 08       	sbc	r0, r0
    7430:	55 0f       	add	r21, r21
    7432:	aa 0b       	sbc	r26, r26
    7434:	e0 e8       	ldi	r30, 0x80	; 128
    7436:	fe ef       	ldi	r31, 0xFE	; 254
    7438:	16 16       	cp	r1, r22
    743a:	17 06       	cpc	r1, r23
    743c:	e8 07       	cpc	r30, r24
    743e:	f9 07       	cpc	r31, r25
    7440:	c0 f0       	brcs	.+48     	; 0x7472 <__fp_cmp+0x46>
    7442:	12 16       	cp	r1, r18
    7444:	13 06       	cpc	r1, r19
    7446:	e4 07       	cpc	r30, r20
    7448:	f5 07       	cpc	r31, r21
    744a:	98 f0       	brcs	.+38     	; 0x7472 <__fp_cmp+0x46>
    744c:	62 1b       	sub	r22, r18
    744e:	73 0b       	sbc	r23, r19
    7450:	84 0b       	sbc	r24, r20
    7452:	95 0b       	sbc	r25, r21
    7454:	39 f4       	brne	.+14     	; 0x7464 <__fp_cmp+0x38>
    7456:	0a 26       	eor	r0, r26
    7458:	61 f0       	breq	.+24     	; 0x7472 <__fp_cmp+0x46>
    745a:	23 2b       	or	r18, r19
    745c:	24 2b       	or	r18, r20
    745e:	25 2b       	or	r18, r21
    7460:	21 f4       	brne	.+8      	; 0x746a <__fp_cmp+0x3e>
    7462:	08 95       	ret
    7464:	0a 26       	eor	r0, r26
    7466:	09 f4       	brne	.+2      	; 0x746a <__fp_cmp+0x3e>
    7468:	a1 40       	sbci	r26, 0x01	; 1
    746a:	a6 95       	lsr	r26
    746c:	8f ef       	ldi	r24, 0xFF	; 255
    746e:	81 1d       	adc	r24, r1
    7470:	81 1d       	adc	r24, r1
    7472:	08 95       	ret

00007474 <__mulsi3>:
    7474:	62 9f       	mul	r22, r18
    7476:	d0 01       	movw	r26, r0
    7478:	73 9f       	mul	r23, r19
    747a:	f0 01       	movw	r30, r0
    747c:	82 9f       	mul	r24, r18
    747e:	e0 0d       	add	r30, r0
    7480:	f1 1d       	adc	r31, r1
    7482:	64 9f       	mul	r22, r20
    7484:	e0 0d       	add	r30, r0
    7486:	f1 1d       	adc	r31, r1
    7488:	92 9f       	mul	r25, r18
    748a:	f0 0d       	add	r31, r0
    748c:	83 9f       	mul	r24, r19
    748e:	f0 0d       	add	r31, r0
    7490:	74 9f       	mul	r23, r20
    7492:	f0 0d       	add	r31, r0
    7494:	65 9f       	mul	r22, r21
    7496:	f0 0d       	add	r31, r0
    7498:	99 27       	eor	r25, r25
    749a:	72 9f       	mul	r23, r18
    749c:	b0 0d       	add	r27, r0
    749e:	e1 1d       	adc	r30, r1
    74a0:	f9 1f       	adc	r31, r25
    74a2:	63 9f       	mul	r22, r19
    74a4:	b0 0d       	add	r27, r0
    74a6:	e1 1d       	adc	r30, r1
    74a8:	f9 1f       	adc	r31, r25
    74aa:	bd 01       	movw	r22, r26
    74ac:	cf 01       	movw	r24, r30
    74ae:	11 24       	eor	r1, r1
    74b0:	08 95       	ret

000074b2 <__udivmodhi4>:
    74b2:	aa 1b       	sub	r26, r26
    74b4:	bb 1b       	sub	r27, r27
    74b6:	51 e1       	ldi	r21, 0x11	; 17
    74b8:	07 c0       	rjmp	.+14     	; 0x74c8 <__udivmodhi4_ep>

000074ba <__udivmodhi4_loop>:
    74ba:	aa 1f       	adc	r26, r26
    74bc:	bb 1f       	adc	r27, r27
    74be:	a6 17       	cp	r26, r22
    74c0:	b7 07       	cpc	r27, r23
    74c2:	10 f0       	brcs	.+4      	; 0x74c8 <__udivmodhi4_ep>
    74c4:	a6 1b       	sub	r26, r22
    74c6:	b7 0b       	sbc	r27, r23

000074c8 <__udivmodhi4_ep>:
    74c8:	88 1f       	adc	r24, r24
    74ca:	99 1f       	adc	r25, r25
    74cc:	5a 95       	dec	r21
    74ce:	a9 f7       	brne	.-22     	; 0x74ba <__udivmodhi4_loop>
    74d0:	80 95       	com	r24
    74d2:	90 95       	com	r25
    74d4:	bc 01       	movw	r22, r24
    74d6:	cd 01       	movw	r24, r26
    74d8:	08 95       	ret

000074da <__divmodhi4>:
    74da:	97 fb       	bst	r25, 7
    74dc:	09 2e       	mov	r0, r25
    74de:	07 26       	eor	r0, r23
    74e0:	0a d0       	rcall	.+20     	; 0x74f6 <__divmodhi4_neg1>
    74e2:	77 fd       	sbrc	r23, 7
    74e4:	04 d0       	rcall	.+8      	; 0x74ee <__divmodhi4_neg2>
    74e6:	e5 df       	rcall	.-54     	; 0x74b2 <__udivmodhi4>
    74e8:	06 d0       	rcall	.+12     	; 0x74f6 <__divmodhi4_neg1>
    74ea:	00 20       	and	r0, r0
    74ec:	1a f4       	brpl	.+6      	; 0x74f4 <__divmodhi4_exit>

000074ee <__divmodhi4_neg2>:
    74ee:	70 95       	com	r23
    74f0:	61 95       	neg	r22
    74f2:	7f 4f       	sbci	r23, 0xFF	; 255

000074f4 <__divmodhi4_exit>:
    74f4:	08 95       	ret

000074f6 <__divmodhi4_neg1>:
    74f6:	f6 f7       	brtc	.-4      	; 0x74f4 <__divmodhi4_exit>
    74f8:	90 95       	com	r25
    74fa:	81 95       	neg	r24
    74fc:	9f 4f       	sbci	r25, 0xFF	; 255
    74fe:	08 95       	ret

00007500 <__udivmodsi4>:
    7500:	a1 e2       	ldi	r26, 0x21	; 33
    7502:	1a 2e       	mov	r1, r26
    7504:	aa 1b       	sub	r26, r26
    7506:	bb 1b       	sub	r27, r27
    7508:	fd 01       	movw	r30, r26
    750a:	0d c0       	rjmp	.+26     	; 0x7526 <__udivmodsi4_ep>

0000750c <__udivmodsi4_loop>:
    750c:	aa 1f       	adc	r26, r26
    750e:	bb 1f       	adc	r27, r27
    7510:	ee 1f       	adc	r30, r30
    7512:	ff 1f       	adc	r31, r31
    7514:	a2 17       	cp	r26, r18
    7516:	b3 07       	cpc	r27, r19
    7518:	e4 07       	cpc	r30, r20
    751a:	f5 07       	cpc	r31, r21
    751c:	20 f0       	brcs	.+8      	; 0x7526 <__udivmodsi4_ep>
    751e:	a2 1b       	sub	r26, r18
    7520:	b3 0b       	sbc	r27, r19
    7522:	e4 0b       	sbc	r30, r20
    7524:	f5 0b       	sbc	r31, r21

00007526 <__udivmodsi4_ep>:
    7526:	66 1f       	adc	r22, r22
    7528:	77 1f       	adc	r23, r23
    752a:	88 1f       	adc	r24, r24
    752c:	99 1f       	adc	r25, r25
    752e:	1a 94       	dec	r1
    7530:	69 f7       	brne	.-38     	; 0x750c <__udivmodsi4_loop>
    7532:	60 95       	com	r22
    7534:	70 95       	com	r23
    7536:	80 95       	com	r24
    7538:	90 95       	com	r25
    753a:	9b 01       	movw	r18, r22
    753c:	ac 01       	movw	r20, r24
    753e:	bd 01       	movw	r22, r26
    7540:	cf 01       	movw	r24, r30
    7542:	08 95       	ret

00007544 <__divmodsi4>:
    7544:	97 fb       	bst	r25, 7
    7546:	09 2e       	mov	r0, r25
    7548:	05 26       	eor	r0, r21
    754a:	0e d0       	rcall	.+28     	; 0x7568 <__divmodsi4_neg1>
    754c:	57 fd       	sbrc	r21, 7
    754e:	04 d0       	rcall	.+8      	; 0x7558 <__divmodsi4_neg2>
    7550:	d7 df       	rcall	.-82     	; 0x7500 <__udivmodsi4>
    7552:	0a d0       	rcall	.+20     	; 0x7568 <__divmodsi4_neg1>
    7554:	00 1c       	adc	r0, r0
    7556:	38 f4       	brcc	.+14     	; 0x7566 <__divmodsi4_exit>

00007558 <__divmodsi4_neg2>:
    7558:	50 95       	com	r21
    755a:	40 95       	com	r20
    755c:	30 95       	com	r19
    755e:	21 95       	neg	r18
    7560:	3f 4f       	sbci	r19, 0xFF	; 255
    7562:	4f 4f       	sbci	r20, 0xFF	; 255
    7564:	5f 4f       	sbci	r21, 0xFF	; 255

00007566 <__divmodsi4_exit>:
    7566:	08 95       	ret

00007568 <__divmodsi4_neg1>:
    7568:	f6 f7       	brtc	.-4      	; 0x7566 <__divmodsi4_exit>
    756a:	90 95       	com	r25
    756c:	80 95       	com	r24
    756e:	70 95       	com	r23
    7570:	61 95       	neg	r22
    7572:	7f 4f       	sbci	r23, 0xFF	; 255
    7574:	8f 4f       	sbci	r24, 0xFF	; 255
    7576:	9f 4f       	sbci	r25, 0xFF	; 255
    7578:	08 95       	ret

0000757a <__prologue_saves__>:
    757a:	2f 92       	push	r2
    757c:	3f 92       	push	r3
    757e:	4f 92       	push	r4
    7580:	5f 92       	push	r5
    7582:	6f 92       	push	r6
    7584:	7f 92       	push	r7
    7586:	8f 92       	push	r8
    7588:	9f 92       	push	r9
    758a:	af 92       	push	r10
    758c:	bf 92       	push	r11
    758e:	cf 92       	push	r12
    7590:	df 92       	push	r13
    7592:	ef 92       	push	r14
    7594:	ff 92       	push	r15
    7596:	0f 93       	push	r16
    7598:	1f 93       	push	r17
    759a:	cf 93       	push	r28
    759c:	df 93       	push	r29
    759e:	cd b7       	in	r28, 0x3d	; 61
    75a0:	de b7       	in	r29, 0x3e	; 62
    75a2:	ca 1b       	sub	r28, r26
    75a4:	db 0b       	sbc	r29, r27
    75a6:	cd bf       	out	0x3d, r28	; 61
    75a8:	de bf       	out	0x3e, r29	; 62
    75aa:	19 94       	eijmp

000075ac <__epilogue_restores__>:
    75ac:	2a 88       	ldd	r2, Y+18	; 0x12
    75ae:	39 88       	ldd	r3, Y+17	; 0x11
    75b0:	48 88       	ldd	r4, Y+16	; 0x10
    75b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    75b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    75b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    75b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    75ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    75bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    75be:	b9 84       	ldd	r11, Y+9	; 0x09
    75c0:	c8 84       	ldd	r12, Y+8	; 0x08
    75c2:	df 80       	ldd	r13, Y+7	; 0x07
    75c4:	ee 80       	ldd	r14, Y+6	; 0x06
    75c6:	fd 80       	ldd	r15, Y+5	; 0x05
    75c8:	0c 81       	ldd	r16, Y+4	; 0x04
    75ca:	1b 81       	ldd	r17, Y+3	; 0x03
    75cc:	aa 81       	ldd	r26, Y+2	; 0x02
    75ce:	b9 81       	ldd	r27, Y+1	; 0x01
    75d0:	ce 0f       	add	r28, r30
    75d2:	d1 1d       	adc	r29, r1
    75d4:	cd bf       	out	0x3d, r28	; 61
    75d6:	de bf       	out	0x3e, r29	; 62
    75d8:	ed 01       	movw	r28, r26
    75da:	08 95       	ret

000075dc <strcpy_P>:
    75dc:	fb 01       	movw	r30, r22
    75de:	dc 01       	movw	r26, r24
    75e0:	05 90       	lpm	r0, Z+
    75e2:	0d 92       	st	X+, r0
    75e4:	00 20       	and	r0, r0
    75e6:	e1 f7       	brne	.-8      	; 0x75e0 <strcpy_P+0x4>
    75e8:	08 95       	ret

000075ea <memmove>:
    75ea:	68 17       	cp	r22, r24
    75ec:	79 07       	cpc	r23, r25
    75ee:	68 f4       	brcc	.+26     	; 0x760a <memmove+0x20>
    75f0:	fb 01       	movw	r30, r22
    75f2:	dc 01       	movw	r26, r24
    75f4:	e4 0f       	add	r30, r20
    75f6:	f5 1f       	adc	r31, r21
    75f8:	a4 0f       	add	r26, r20
    75fa:	b5 1f       	adc	r27, r21
    75fc:	02 c0       	rjmp	.+4      	; 0x7602 <memmove+0x18>
    75fe:	02 90       	ld	r0, -Z
    7600:	0e 92       	st	-X, r0
    7602:	41 50       	subi	r20, 0x01	; 1
    7604:	50 40       	sbci	r21, 0x00	; 0
    7606:	d8 f7       	brcc	.-10     	; 0x75fe <memmove+0x14>
    7608:	08 95       	ret
    760a:	0c 94 88 3d 	jmp	0x7b10	; 0x7b10 <memcpy>

0000760e <strcat>:
    760e:	fb 01       	movw	r30, r22
    7610:	dc 01       	movw	r26, r24
    7612:	0d 90       	ld	r0, X+
    7614:	00 20       	and	r0, r0
    7616:	e9 f7       	brne	.-6      	; 0x7612 <strcat+0x4>
    7618:	11 97       	sbiw	r26, 0x01	; 1
    761a:	01 90       	ld	r0, Z+
    761c:	0d 92       	st	X+, r0
    761e:	00 20       	and	r0, r0
    7620:	e1 f7       	brne	.-8      	; 0x761a <strcat+0xc>
    7622:	08 95       	ret

00007624 <strncmp>:
    7624:	fb 01       	movw	r30, r22
    7626:	dc 01       	movw	r26, r24
    7628:	41 50       	subi	r20, 0x01	; 1
    762a:	50 40       	sbci	r21, 0x00	; 0
    762c:	30 f0       	brcs	.+12     	; 0x763a <strncmp+0x16>
    762e:	8d 91       	ld	r24, X+
    7630:	01 90       	ld	r0, Z+
    7632:	80 19       	sub	r24, r0
    7634:	19 f4       	brne	.+6      	; 0x763c <strncmp+0x18>
    7636:	00 20       	and	r0, r0
    7638:	b9 f7       	brne	.-18     	; 0x7628 <strncmp+0x4>
    763a:	88 1b       	sub	r24, r24
    763c:	99 0b       	sbc	r25, r25
    763e:	08 95       	ret

00007640 <itoa>:
    7640:	fb 01       	movw	r30, r22
    7642:	9f 01       	movw	r18, r30
    7644:	e8 94       	clt
    7646:	42 30       	cpi	r20, 0x02	; 2
    7648:	c4 f0       	brlt	.+48     	; 0x767a <itoa+0x3a>
    764a:	45 32       	cpi	r20, 0x25	; 37
    764c:	b4 f4       	brge	.+44     	; 0x767a <itoa+0x3a>
    764e:	4a 30       	cpi	r20, 0x0A	; 10
    7650:	29 f4       	brne	.+10     	; 0x765c <itoa+0x1c>
    7652:	97 fb       	bst	r25, 7
    7654:	1e f4       	brtc	.+6      	; 0x765c <itoa+0x1c>
    7656:	90 95       	com	r25
    7658:	81 95       	neg	r24
    765a:	9f 4f       	sbci	r25, 0xFF	; 255
    765c:	64 2f       	mov	r22, r20
    765e:	77 27       	eor	r23, r23
    7660:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <__udivmodhi4>
    7664:	80 5d       	subi	r24, 0xD0	; 208
    7666:	8a 33       	cpi	r24, 0x3A	; 58
    7668:	0c f0       	brlt	.+2      	; 0x766c <itoa+0x2c>
    766a:	89 5d       	subi	r24, 0xD9	; 217
    766c:	81 93       	st	Z+, r24
    766e:	cb 01       	movw	r24, r22
    7670:	00 97       	sbiw	r24, 0x00	; 0
    7672:	a1 f7       	brne	.-24     	; 0x765c <itoa+0x1c>
    7674:	16 f4       	brtc	.+4      	; 0x767a <itoa+0x3a>
    7676:	5d e2       	ldi	r21, 0x2D	; 45
    7678:	51 93       	st	Z+, r21
    767a:	10 82       	st	Z, r1
    767c:	c9 01       	movw	r24, r18
    767e:	0c 94 9c 3d 	jmp	0x7b38	; 0x7b38 <strrev>

00007682 <printf>:
    7682:	cf 93       	push	r28
    7684:	df 93       	push	r29
    7686:	cd b7       	in	r28, 0x3d	; 61
    7688:	de b7       	in	r29, 0x3e	; 62
    768a:	fe 01       	movw	r30, r28
    768c:	36 96       	adiw	r30, 0x06	; 6
    768e:	61 91       	ld	r22, Z+
    7690:	71 91       	ld	r23, Z+
    7692:	80 91 d9 50 	lds	r24, 0x50D9
    7696:	90 91 da 50 	lds	r25, 0x50DA
    769a:	af 01       	movw	r20, r30
    769c:	0e 94 7c 3b 	call	0x76f8	; 0x76f8 <vfprintf>
    76a0:	df 91       	pop	r29
    76a2:	cf 91       	pop	r28
    76a4:	08 95       	ret

000076a6 <sprintf>:
    76a6:	0f 93       	push	r16
    76a8:	1f 93       	push	r17
    76aa:	cf 93       	push	r28
    76ac:	df 93       	push	r29
    76ae:	cd b7       	in	r28, 0x3d	; 61
    76b0:	de b7       	in	r29, 0x3e	; 62
    76b2:	2e 97       	sbiw	r28, 0x0e	; 14
    76b4:	cd bf       	out	0x3d, r28	; 61
    76b6:	de bf       	out	0x3e, r29	; 62
    76b8:	0e 89       	ldd	r16, Y+22	; 0x16
    76ba:	1f 89       	ldd	r17, Y+23	; 0x17
    76bc:	86 e0       	ldi	r24, 0x06	; 6
    76be:	8c 83       	std	Y+4, r24	; 0x04
    76c0:	09 83       	std	Y+1, r16	; 0x01
    76c2:	1a 83       	std	Y+2, r17	; 0x02
    76c4:	8f ef       	ldi	r24, 0xFF	; 255
    76c6:	9f e7       	ldi	r25, 0x7F	; 127
    76c8:	8d 83       	std	Y+5, r24	; 0x05
    76ca:	9e 83       	std	Y+6, r25	; 0x06
    76cc:	ae 01       	movw	r20, r28
    76ce:	46 5e       	subi	r20, 0xE6	; 230
    76d0:	5f 4f       	sbci	r21, 0xFF	; 255
    76d2:	ce 01       	movw	r24, r28
    76d4:	01 96       	adiw	r24, 0x01	; 1
    76d6:	68 8d       	ldd	r22, Y+24	; 0x18
    76d8:	79 8d       	ldd	r23, Y+25	; 0x19
    76da:	0e 94 7c 3b 	call	0x76f8	; 0x76f8 <vfprintf>
    76de:	ef 81       	ldd	r30, Y+7	; 0x07
    76e0:	f8 85       	ldd	r31, Y+8	; 0x08
    76e2:	e0 0f       	add	r30, r16
    76e4:	f1 1f       	adc	r31, r17
    76e6:	10 82       	st	Z, r1
    76e8:	2e 96       	adiw	r28, 0x0e	; 14
    76ea:	cd bf       	out	0x3d, r28	; 61
    76ec:	de bf       	out	0x3e, r29	; 62
    76ee:	df 91       	pop	r29
    76f0:	cf 91       	pop	r28
    76f2:	1f 91       	pop	r17
    76f4:	0f 91       	pop	r16
    76f6:	08 95       	ret

000076f8 <vfprintf>:
    76f8:	2f 92       	push	r2
    76fa:	3f 92       	push	r3
    76fc:	4f 92       	push	r4
    76fe:	5f 92       	push	r5
    7700:	6f 92       	push	r6
    7702:	7f 92       	push	r7
    7704:	8f 92       	push	r8
    7706:	9f 92       	push	r9
    7708:	af 92       	push	r10
    770a:	bf 92       	push	r11
    770c:	cf 92       	push	r12
    770e:	df 92       	push	r13
    7710:	ef 92       	push	r14
    7712:	ff 92       	push	r15
    7714:	0f 93       	push	r16
    7716:	1f 93       	push	r17
    7718:	cf 93       	push	r28
    771a:	df 93       	push	r29
    771c:	cd b7       	in	r28, 0x3d	; 61
    771e:	de b7       	in	r29, 0x3e	; 62
    7720:	2d 97       	sbiw	r28, 0x0d	; 13
    7722:	cd bf       	out	0x3d, r28	; 61
    7724:	de bf       	out	0x3e, r29	; 62
    7726:	3c 01       	movw	r6, r24
    7728:	6c 87       	std	Y+12, r22	; 0x0c
    772a:	7d 87       	std	Y+13, r23	; 0x0d
    772c:	5a 01       	movw	r10, r20
    772e:	fc 01       	movw	r30, r24
    7730:	16 82       	std	Z+6, r1	; 0x06
    7732:	17 82       	std	Z+7, r1	; 0x07
    7734:	83 81       	ldd	r24, Z+3	; 0x03
    7736:	81 ff       	sbrs	r24, 1
    7738:	c8 c1       	rjmp	.+912    	; 0x7aca <vfprintf+0x3d2>
    773a:	2e 01       	movw	r4, r28
    773c:	08 94       	sec
    773e:	41 1c       	adc	r4, r1
    7740:	51 1c       	adc	r5, r1
    7742:	f3 01       	movw	r30, r6
    7744:	93 81       	ldd	r25, Z+3	; 0x03
    7746:	ec 85       	ldd	r30, Y+12	; 0x0c
    7748:	fd 85       	ldd	r31, Y+13	; 0x0d
    774a:	93 fd       	sbrc	r25, 3
    774c:	85 91       	lpm	r24, Z+
    774e:	93 ff       	sbrs	r25, 3
    7750:	81 91       	ld	r24, Z+
    7752:	ec 87       	std	Y+12, r30	; 0x0c
    7754:	fd 87       	std	Y+13, r31	; 0x0d
    7756:	88 23       	and	r24, r24
    7758:	09 f4       	brne	.+2      	; 0x775c <vfprintf+0x64>
    775a:	b3 c1       	rjmp	.+870    	; 0x7ac2 <vfprintf+0x3ca>
    775c:	85 32       	cpi	r24, 0x25	; 37
    775e:	41 f4       	brne	.+16     	; 0x7770 <vfprintf+0x78>
    7760:	93 fd       	sbrc	r25, 3
    7762:	85 91       	lpm	r24, Z+
    7764:	93 ff       	sbrs	r25, 3
    7766:	81 91       	ld	r24, Z+
    7768:	ec 87       	std	Y+12, r30	; 0x0c
    776a:	fd 87       	std	Y+13, r31	; 0x0d
    776c:	85 32       	cpi	r24, 0x25	; 37
    776e:	29 f4       	brne	.+10     	; 0x777a <vfprintf+0x82>
    7770:	90 e0       	ldi	r25, 0x00	; 0
    7772:	b3 01       	movw	r22, r6
    7774:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    7778:	e4 cf       	rjmp	.-56     	; 0x7742 <vfprintf+0x4a>
    777a:	ff 24       	eor	r15, r15
    777c:	ee 24       	eor	r14, r14
    777e:	10 e0       	ldi	r17, 0x00	; 0
    7780:	10 32       	cpi	r17, 0x20	; 32
    7782:	b0 f4       	brcc	.+44     	; 0x77b0 <vfprintf+0xb8>
    7784:	8b 32       	cpi	r24, 0x2B	; 43
    7786:	69 f0       	breq	.+26     	; 0x77a2 <vfprintf+0xaa>
    7788:	8c 32       	cpi	r24, 0x2C	; 44
    778a:	28 f4       	brcc	.+10     	; 0x7796 <vfprintf+0x9e>
    778c:	80 32       	cpi	r24, 0x20	; 32
    778e:	51 f0       	breq	.+20     	; 0x77a4 <vfprintf+0xac>
    7790:	83 32       	cpi	r24, 0x23	; 35
    7792:	71 f4       	brne	.+28     	; 0x77b0 <vfprintf+0xb8>
    7794:	0b c0       	rjmp	.+22     	; 0x77ac <vfprintf+0xb4>
    7796:	8d 32       	cpi	r24, 0x2D	; 45
    7798:	39 f0       	breq	.+14     	; 0x77a8 <vfprintf+0xb0>
    779a:	80 33       	cpi	r24, 0x30	; 48
    779c:	49 f4       	brne	.+18     	; 0x77b0 <vfprintf+0xb8>
    779e:	11 60       	ori	r17, 0x01	; 1
    77a0:	2c c0       	rjmp	.+88     	; 0x77fa <vfprintf+0x102>
    77a2:	12 60       	ori	r17, 0x02	; 2
    77a4:	14 60       	ori	r17, 0x04	; 4
    77a6:	29 c0       	rjmp	.+82     	; 0x77fa <vfprintf+0x102>
    77a8:	18 60       	ori	r17, 0x08	; 8
    77aa:	27 c0       	rjmp	.+78     	; 0x77fa <vfprintf+0x102>
    77ac:	10 61       	ori	r17, 0x10	; 16
    77ae:	25 c0       	rjmp	.+74     	; 0x77fa <vfprintf+0x102>
    77b0:	17 fd       	sbrc	r17, 7
    77b2:	2e c0       	rjmp	.+92     	; 0x7810 <vfprintf+0x118>
    77b4:	28 2f       	mov	r18, r24
    77b6:	20 53       	subi	r18, 0x30	; 48
    77b8:	2a 30       	cpi	r18, 0x0A	; 10
    77ba:	98 f4       	brcc	.+38     	; 0x77e2 <vfprintf+0xea>
    77bc:	16 ff       	sbrs	r17, 6
    77be:	08 c0       	rjmp	.+16     	; 0x77d0 <vfprintf+0xd8>
    77c0:	8f 2d       	mov	r24, r15
    77c2:	88 0f       	add	r24, r24
    77c4:	f8 2e       	mov	r15, r24
    77c6:	ff 0c       	add	r15, r15
    77c8:	ff 0c       	add	r15, r15
    77ca:	f8 0e       	add	r15, r24
    77cc:	f2 0e       	add	r15, r18
    77ce:	15 c0       	rjmp	.+42     	; 0x77fa <vfprintf+0x102>
    77d0:	8e 2d       	mov	r24, r14
    77d2:	88 0f       	add	r24, r24
    77d4:	e8 2e       	mov	r14, r24
    77d6:	ee 0c       	add	r14, r14
    77d8:	ee 0c       	add	r14, r14
    77da:	e8 0e       	add	r14, r24
    77dc:	e2 0e       	add	r14, r18
    77de:	10 62       	ori	r17, 0x20	; 32
    77e0:	0c c0       	rjmp	.+24     	; 0x77fa <vfprintf+0x102>
    77e2:	8e 32       	cpi	r24, 0x2E	; 46
    77e4:	21 f4       	brne	.+8      	; 0x77ee <vfprintf+0xf6>
    77e6:	16 fd       	sbrc	r17, 6
    77e8:	6c c1       	rjmp	.+728    	; 0x7ac2 <vfprintf+0x3ca>
    77ea:	10 64       	ori	r17, 0x40	; 64
    77ec:	06 c0       	rjmp	.+12     	; 0x77fa <vfprintf+0x102>
    77ee:	8c 36       	cpi	r24, 0x6C	; 108
    77f0:	11 f4       	brne	.+4      	; 0x77f6 <vfprintf+0xfe>
    77f2:	10 68       	ori	r17, 0x80	; 128
    77f4:	02 c0       	rjmp	.+4      	; 0x77fa <vfprintf+0x102>
    77f6:	88 36       	cpi	r24, 0x68	; 104
    77f8:	59 f4       	brne	.+22     	; 0x7810 <vfprintf+0x118>
    77fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    77fc:	fd 85       	ldd	r31, Y+13	; 0x0d
    77fe:	93 fd       	sbrc	r25, 3
    7800:	85 91       	lpm	r24, Z+
    7802:	93 ff       	sbrs	r25, 3
    7804:	81 91       	ld	r24, Z+
    7806:	ec 87       	std	Y+12, r30	; 0x0c
    7808:	fd 87       	std	Y+13, r31	; 0x0d
    780a:	88 23       	and	r24, r24
    780c:	09 f0       	breq	.+2      	; 0x7810 <vfprintf+0x118>
    780e:	b8 cf       	rjmp	.-144    	; 0x7780 <vfprintf+0x88>
    7810:	98 2f       	mov	r25, r24
    7812:	95 54       	subi	r25, 0x45	; 69
    7814:	93 30       	cpi	r25, 0x03	; 3
    7816:	18 f0       	brcs	.+6      	; 0x781e <vfprintf+0x126>
    7818:	90 52       	subi	r25, 0x20	; 32
    781a:	93 30       	cpi	r25, 0x03	; 3
    781c:	38 f4       	brcc	.+14     	; 0x782c <vfprintf+0x134>
    781e:	24 e0       	ldi	r18, 0x04	; 4
    7820:	30 e0       	ldi	r19, 0x00	; 0
    7822:	a2 0e       	add	r10, r18
    7824:	b3 1e       	adc	r11, r19
    7826:	3f e3       	ldi	r19, 0x3F	; 63
    7828:	39 83       	std	Y+1, r19	; 0x01
    782a:	0f c0       	rjmp	.+30     	; 0x784a <vfprintf+0x152>
    782c:	83 36       	cpi	r24, 0x63	; 99
    782e:	31 f0       	breq	.+12     	; 0x783c <vfprintf+0x144>
    7830:	83 37       	cpi	r24, 0x73	; 115
    7832:	81 f0       	breq	.+32     	; 0x7854 <vfprintf+0x15c>
    7834:	83 35       	cpi	r24, 0x53	; 83
    7836:	09 f0       	breq	.+2      	; 0x783a <vfprintf+0x142>
    7838:	5a c0       	rjmp	.+180    	; 0x78ee <vfprintf+0x1f6>
    783a:	22 c0       	rjmp	.+68     	; 0x7880 <vfprintf+0x188>
    783c:	f5 01       	movw	r30, r10
    783e:	80 81       	ld	r24, Z
    7840:	89 83       	std	Y+1, r24	; 0x01
    7842:	22 e0       	ldi	r18, 0x02	; 2
    7844:	30 e0       	ldi	r19, 0x00	; 0
    7846:	a2 0e       	add	r10, r18
    7848:	b3 1e       	adc	r11, r19
    784a:	21 e0       	ldi	r18, 0x01	; 1
    784c:	c2 2e       	mov	r12, r18
    784e:	d1 2c       	mov	r13, r1
    7850:	42 01       	movw	r8, r4
    7852:	14 c0       	rjmp	.+40     	; 0x787c <vfprintf+0x184>
    7854:	92 e0       	ldi	r25, 0x02	; 2
    7856:	29 2e       	mov	r2, r25
    7858:	31 2c       	mov	r3, r1
    785a:	2a 0c       	add	r2, r10
    785c:	3b 1c       	adc	r3, r11
    785e:	f5 01       	movw	r30, r10
    7860:	80 80       	ld	r8, Z
    7862:	91 80       	ldd	r9, Z+1	; 0x01
    7864:	16 ff       	sbrs	r17, 6
    7866:	03 c0       	rjmp	.+6      	; 0x786e <vfprintf+0x176>
    7868:	6f 2d       	mov	r22, r15
    786a:	70 e0       	ldi	r23, 0x00	; 0
    786c:	02 c0       	rjmp	.+4      	; 0x7872 <vfprintf+0x17a>
    786e:	6f ef       	ldi	r22, 0xFF	; 255
    7870:	7f ef       	ldi	r23, 0xFF	; 255
    7872:	c4 01       	movw	r24, r8
    7874:	0e 94 91 3d 	call	0x7b22	; 0x7b22 <strnlen>
    7878:	6c 01       	movw	r12, r24
    787a:	51 01       	movw	r10, r2
    787c:	1f 77       	andi	r17, 0x7F	; 127
    787e:	15 c0       	rjmp	.+42     	; 0x78aa <vfprintf+0x1b2>
    7880:	82 e0       	ldi	r24, 0x02	; 2
    7882:	28 2e       	mov	r2, r24
    7884:	31 2c       	mov	r3, r1
    7886:	2a 0c       	add	r2, r10
    7888:	3b 1c       	adc	r3, r11
    788a:	f5 01       	movw	r30, r10
    788c:	80 80       	ld	r8, Z
    788e:	91 80       	ldd	r9, Z+1	; 0x01
    7890:	16 ff       	sbrs	r17, 6
    7892:	03 c0       	rjmp	.+6      	; 0x789a <vfprintf+0x1a2>
    7894:	6f 2d       	mov	r22, r15
    7896:	70 e0       	ldi	r23, 0x00	; 0
    7898:	02 c0       	rjmp	.+4      	; 0x789e <vfprintf+0x1a6>
    789a:	6f ef       	ldi	r22, 0xFF	; 255
    789c:	7f ef       	ldi	r23, 0xFF	; 255
    789e:	c4 01       	movw	r24, r8
    78a0:	0e 94 7d 3d 	call	0x7afa	; 0x7afa <strnlen_P>
    78a4:	6c 01       	movw	r12, r24
    78a6:	10 68       	ori	r17, 0x80	; 128
    78a8:	51 01       	movw	r10, r2
    78aa:	13 fd       	sbrc	r17, 3
    78ac:	1c c0       	rjmp	.+56     	; 0x78e6 <vfprintf+0x1ee>
    78ae:	06 c0       	rjmp	.+12     	; 0x78bc <vfprintf+0x1c4>
    78b0:	80 e2       	ldi	r24, 0x20	; 32
    78b2:	90 e0       	ldi	r25, 0x00	; 0
    78b4:	b3 01       	movw	r22, r6
    78b6:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    78ba:	ea 94       	dec	r14
    78bc:	8e 2d       	mov	r24, r14
    78be:	90 e0       	ldi	r25, 0x00	; 0
    78c0:	c8 16       	cp	r12, r24
    78c2:	d9 06       	cpc	r13, r25
    78c4:	a8 f3       	brcs	.-22     	; 0x78b0 <vfprintf+0x1b8>
    78c6:	0f c0       	rjmp	.+30     	; 0x78e6 <vfprintf+0x1ee>
    78c8:	f4 01       	movw	r30, r8
    78ca:	17 fd       	sbrc	r17, 7
    78cc:	85 91       	lpm	r24, Z+
    78ce:	17 ff       	sbrs	r17, 7
    78d0:	81 91       	ld	r24, Z+
    78d2:	4f 01       	movw	r8, r30
    78d4:	90 e0       	ldi	r25, 0x00	; 0
    78d6:	b3 01       	movw	r22, r6
    78d8:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    78dc:	e1 10       	cpse	r14, r1
    78de:	ea 94       	dec	r14
    78e0:	08 94       	sec
    78e2:	c1 08       	sbc	r12, r1
    78e4:	d1 08       	sbc	r13, r1
    78e6:	c1 14       	cp	r12, r1
    78e8:	d1 04       	cpc	r13, r1
    78ea:	71 f7       	brne	.-36     	; 0x78c8 <vfprintf+0x1d0>
    78ec:	e7 c0       	rjmp	.+462    	; 0x7abc <vfprintf+0x3c4>
    78ee:	84 36       	cpi	r24, 0x64	; 100
    78f0:	11 f0       	breq	.+4      	; 0x78f6 <vfprintf+0x1fe>
    78f2:	89 36       	cpi	r24, 0x69	; 105
    78f4:	51 f5       	brne	.+84     	; 0x794a <vfprintf+0x252>
    78f6:	f5 01       	movw	r30, r10
    78f8:	17 ff       	sbrs	r17, 7
    78fa:	07 c0       	rjmp	.+14     	; 0x790a <vfprintf+0x212>
    78fc:	80 81       	ld	r24, Z
    78fe:	91 81       	ldd	r25, Z+1	; 0x01
    7900:	a2 81       	ldd	r26, Z+2	; 0x02
    7902:	b3 81       	ldd	r27, Z+3	; 0x03
    7904:	24 e0       	ldi	r18, 0x04	; 4
    7906:	30 e0       	ldi	r19, 0x00	; 0
    7908:	08 c0       	rjmp	.+16     	; 0x791a <vfprintf+0x222>
    790a:	80 81       	ld	r24, Z
    790c:	91 81       	ldd	r25, Z+1	; 0x01
    790e:	aa 27       	eor	r26, r26
    7910:	97 fd       	sbrc	r25, 7
    7912:	a0 95       	com	r26
    7914:	ba 2f       	mov	r27, r26
    7916:	22 e0       	ldi	r18, 0x02	; 2
    7918:	30 e0       	ldi	r19, 0x00	; 0
    791a:	a2 0e       	add	r10, r18
    791c:	b3 1e       	adc	r11, r19
    791e:	01 2f       	mov	r16, r17
    7920:	0f 76       	andi	r16, 0x6F	; 111
    7922:	b7 ff       	sbrs	r27, 7
    7924:	08 c0       	rjmp	.+16     	; 0x7936 <vfprintf+0x23e>
    7926:	b0 95       	com	r27
    7928:	a0 95       	com	r26
    792a:	90 95       	com	r25
    792c:	81 95       	neg	r24
    792e:	9f 4f       	sbci	r25, 0xFF	; 255
    7930:	af 4f       	sbci	r26, 0xFF	; 255
    7932:	bf 4f       	sbci	r27, 0xFF	; 255
    7934:	00 68       	ori	r16, 0x80	; 128
    7936:	bc 01       	movw	r22, r24
    7938:	cd 01       	movw	r24, r26
    793a:	a2 01       	movw	r20, r4
    793c:	2a e0       	ldi	r18, 0x0A	; 10
    793e:	30 e0       	ldi	r19, 0x00	; 0
    7940:	0e 94 d8 3d 	call	0x7bb0	; 0x7bb0 <__ultoa_invert>
    7944:	d8 2e       	mov	r13, r24
    7946:	d4 18       	sub	r13, r4
    7948:	3f c0       	rjmp	.+126    	; 0x79c8 <vfprintf+0x2d0>
    794a:	85 37       	cpi	r24, 0x75	; 117
    794c:	21 f4       	brne	.+8      	; 0x7956 <vfprintf+0x25e>
    794e:	1f 7e       	andi	r17, 0xEF	; 239
    7950:	2a e0       	ldi	r18, 0x0A	; 10
    7952:	30 e0       	ldi	r19, 0x00	; 0
    7954:	20 c0       	rjmp	.+64     	; 0x7996 <vfprintf+0x29e>
    7956:	19 7f       	andi	r17, 0xF9	; 249
    7958:	8f 36       	cpi	r24, 0x6F	; 111
    795a:	a9 f0       	breq	.+42     	; 0x7986 <vfprintf+0x28e>
    795c:	80 37       	cpi	r24, 0x70	; 112
    795e:	20 f4       	brcc	.+8      	; 0x7968 <vfprintf+0x270>
    7960:	88 35       	cpi	r24, 0x58	; 88
    7962:	09 f0       	breq	.+2      	; 0x7966 <vfprintf+0x26e>
    7964:	ae c0       	rjmp	.+348    	; 0x7ac2 <vfprintf+0x3ca>
    7966:	0b c0       	rjmp	.+22     	; 0x797e <vfprintf+0x286>
    7968:	80 37       	cpi	r24, 0x70	; 112
    796a:	21 f0       	breq	.+8      	; 0x7974 <vfprintf+0x27c>
    796c:	88 37       	cpi	r24, 0x78	; 120
    796e:	09 f0       	breq	.+2      	; 0x7972 <vfprintf+0x27a>
    7970:	a8 c0       	rjmp	.+336    	; 0x7ac2 <vfprintf+0x3ca>
    7972:	01 c0       	rjmp	.+2      	; 0x7976 <vfprintf+0x27e>
    7974:	10 61       	ori	r17, 0x10	; 16
    7976:	14 ff       	sbrs	r17, 4
    7978:	09 c0       	rjmp	.+18     	; 0x798c <vfprintf+0x294>
    797a:	14 60       	ori	r17, 0x04	; 4
    797c:	07 c0       	rjmp	.+14     	; 0x798c <vfprintf+0x294>
    797e:	14 ff       	sbrs	r17, 4
    7980:	08 c0       	rjmp	.+16     	; 0x7992 <vfprintf+0x29a>
    7982:	16 60       	ori	r17, 0x06	; 6
    7984:	06 c0       	rjmp	.+12     	; 0x7992 <vfprintf+0x29a>
    7986:	28 e0       	ldi	r18, 0x08	; 8
    7988:	30 e0       	ldi	r19, 0x00	; 0
    798a:	05 c0       	rjmp	.+10     	; 0x7996 <vfprintf+0x29e>
    798c:	20 e1       	ldi	r18, 0x10	; 16
    798e:	30 e0       	ldi	r19, 0x00	; 0
    7990:	02 c0       	rjmp	.+4      	; 0x7996 <vfprintf+0x29e>
    7992:	20 e1       	ldi	r18, 0x10	; 16
    7994:	32 e0       	ldi	r19, 0x02	; 2
    7996:	f5 01       	movw	r30, r10
    7998:	17 ff       	sbrs	r17, 7
    799a:	07 c0       	rjmp	.+14     	; 0x79aa <vfprintf+0x2b2>
    799c:	60 81       	ld	r22, Z
    799e:	71 81       	ldd	r23, Z+1	; 0x01
    79a0:	82 81       	ldd	r24, Z+2	; 0x02
    79a2:	93 81       	ldd	r25, Z+3	; 0x03
    79a4:	44 e0       	ldi	r20, 0x04	; 4
    79a6:	50 e0       	ldi	r21, 0x00	; 0
    79a8:	06 c0       	rjmp	.+12     	; 0x79b6 <vfprintf+0x2be>
    79aa:	60 81       	ld	r22, Z
    79ac:	71 81       	ldd	r23, Z+1	; 0x01
    79ae:	80 e0       	ldi	r24, 0x00	; 0
    79b0:	90 e0       	ldi	r25, 0x00	; 0
    79b2:	42 e0       	ldi	r20, 0x02	; 2
    79b4:	50 e0       	ldi	r21, 0x00	; 0
    79b6:	a4 0e       	add	r10, r20
    79b8:	b5 1e       	adc	r11, r21
    79ba:	a2 01       	movw	r20, r4
    79bc:	0e 94 d8 3d 	call	0x7bb0	; 0x7bb0 <__ultoa_invert>
    79c0:	d8 2e       	mov	r13, r24
    79c2:	d4 18       	sub	r13, r4
    79c4:	01 2f       	mov	r16, r17
    79c6:	0f 77       	andi	r16, 0x7F	; 127
    79c8:	06 ff       	sbrs	r16, 6
    79ca:	09 c0       	rjmp	.+18     	; 0x79de <vfprintf+0x2e6>
    79cc:	0e 7f       	andi	r16, 0xFE	; 254
    79ce:	df 14       	cp	r13, r15
    79d0:	30 f4       	brcc	.+12     	; 0x79de <vfprintf+0x2e6>
    79d2:	04 ff       	sbrs	r16, 4
    79d4:	06 c0       	rjmp	.+12     	; 0x79e2 <vfprintf+0x2ea>
    79d6:	02 fd       	sbrc	r16, 2
    79d8:	04 c0       	rjmp	.+8      	; 0x79e2 <vfprintf+0x2ea>
    79da:	0f 7e       	andi	r16, 0xEF	; 239
    79dc:	02 c0       	rjmp	.+4      	; 0x79e2 <vfprintf+0x2ea>
    79de:	1d 2d       	mov	r17, r13
    79e0:	01 c0       	rjmp	.+2      	; 0x79e4 <vfprintf+0x2ec>
    79e2:	1f 2d       	mov	r17, r15
    79e4:	80 2f       	mov	r24, r16
    79e6:	90 e0       	ldi	r25, 0x00	; 0
    79e8:	04 ff       	sbrs	r16, 4
    79ea:	0c c0       	rjmp	.+24     	; 0x7a04 <vfprintf+0x30c>
    79ec:	fe 01       	movw	r30, r28
    79ee:	ed 0d       	add	r30, r13
    79f0:	f1 1d       	adc	r31, r1
    79f2:	20 81       	ld	r18, Z
    79f4:	20 33       	cpi	r18, 0x30	; 48
    79f6:	11 f4       	brne	.+4      	; 0x79fc <vfprintf+0x304>
    79f8:	09 7e       	andi	r16, 0xE9	; 233
    79fa:	09 c0       	rjmp	.+18     	; 0x7a0e <vfprintf+0x316>
    79fc:	02 ff       	sbrs	r16, 2
    79fe:	06 c0       	rjmp	.+12     	; 0x7a0c <vfprintf+0x314>
    7a00:	1e 5f       	subi	r17, 0xFE	; 254
    7a02:	05 c0       	rjmp	.+10     	; 0x7a0e <vfprintf+0x316>
    7a04:	86 78       	andi	r24, 0x86	; 134
    7a06:	90 70       	andi	r25, 0x00	; 0
    7a08:	00 97       	sbiw	r24, 0x00	; 0
    7a0a:	09 f0       	breq	.+2      	; 0x7a0e <vfprintf+0x316>
    7a0c:	1f 5f       	subi	r17, 0xFF	; 255
    7a0e:	80 2e       	mov	r8, r16
    7a10:	99 24       	eor	r9, r9
    7a12:	03 fd       	sbrc	r16, 3
    7a14:	12 c0       	rjmp	.+36     	; 0x7a3a <vfprintf+0x342>
    7a16:	00 ff       	sbrs	r16, 0
    7a18:	0d c0       	rjmp	.+26     	; 0x7a34 <vfprintf+0x33c>
    7a1a:	fd 2c       	mov	r15, r13
    7a1c:	1e 15       	cp	r17, r14
    7a1e:	50 f4       	brcc	.+20     	; 0x7a34 <vfprintf+0x33c>
    7a20:	fe 0c       	add	r15, r14
    7a22:	f1 1a       	sub	r15, r17
    7a24:	1e 2d       	mov	r17, r14
    7a26:	06 c0       	rjmp	.+12     	; 0x7a34 <vfprintf+0x33c>
    7a28:	80 e2       	ldi	r24, 0x20	; 32
    7a2a:	90 e0       	ldi	r25, 0x00	; 0
    7a2c:	b3 01       	movw	r22, r6
    7a2e:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    7a32:	1f 5f       	subi	r17, 0xFF	; 255
    7a34:	1e 15       	cp	r17, r14
    7a36:	c0 f3       	brcs	.-16     	; 0x7a28 <vfprintf+0x330>
    7a38:	04 c0       	rjmp	.+8      	; 0x7a42 <vfprintf+0x34a>
    7a3a:	1e 15       	cp	r17, r14
    7a3c:	10 f4       	brcc	.+4      	; 0x7a42 <vfprintf+0x34a>
    7a3e:	e1 1a       	sub	r14, r17
    7a40:	01 c0       	rjmp	.+2      	; 0x7a44 <vfprintf+0x34c>
    7a42:	ee 24       	eor	r14, r14
    7a44:	84 fe       	sbrs	r8, 4
    7a46:	0f c0       	rjmp	.+30     	; 0x7a66 <vfprintf+0x36e>
    7a48:	80 e3       	ldi	r24, 0x30	; 48
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	b3 01       	movw	r22, r6
    7a4e:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    7a52:	82 fe       	sbrs	r8, 2
    7a54:	1f c0       	rjmp	.+62     	; 0x7a94 <vfprintf+0x39c>
    7a56:	81 fe       	sbrs	r8, 1
    7a58:	03 c0       	rjmp	.+6      	; 0x7a60 <vfprintf+0x368>
    7a5a:	88 e5       	ldi	r24, 0x58	; 88
    7a5c:	90 e0       	ldi	r25, 0x00	; 0
    7a5e:	10 c0       	rjmp	.+32     	; 0x7a80 <vfprintf+0x388>
    7a60:	88 e7       	ldi	r24, 0x78	; 120
    7a62:	90 e0       	ldi	r25, 0x00	; 0
    7a64:	0d c0       	rjmp	.+26     	; 0x7a80 <vfprintf+0x388>
    7a66:	c4 01       	movw	r24, r8
    7a68:	86 78       	andi	r24, 0x86	; 134
    7a6a:	90 70       	andi	r25, 0x00	; 0
    7a6c:	00 97       	sbiw	r24, 0x00	; 0
    7a6e:	91 f0       	breq	.+36     	; 0x7a94 <vfprintf+0x39c>
    7a70:	81 fc       	sbrc	r8, 1
    7a72:	02 c0       	rjmp	.+4      	; 0x7a78 <vfprintf+0x380>
    7a74:	80 e2       	ldi	r24, 0x20	; 32
    7a76:	01 c0       	rjmp	.+2      	; 0x7a7a <vfprintf+0x382>
    7a78:	8b e2       	ldi	r24, 0x2B	; 43
    7a7a:	07 fd       	sbrc	r16, 7
    7a7c:	8d e2       	ldi	r24, 0x2D	; 45
    7a7e:	90 e0       	ldi	r25, 0x00	; 0
    7a80:	b3 01       	movw	r22, r6
    7a82:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    7a86:	06 c0       	rjmp	.+12     	; 0x7a94 <vfprintf+0x39c>
    7a88:	80 e3       	ldi	r24, 0x30	; 48
    7a8a:	90 e0       	ldi	r25, 0x00	; 0
    7a8c:	b3 01       	movw	r22, r6
    7a8e:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    7a92:	fa 94       	dec	r15
    7a94:	df 14       	cp	r13, r15
    7a96:	c0 f3       	brcs	.-16     	; 0x7a88 <vfprintf+0x390>
    7a98:	da 94       	dec	r13
    7a9a:	f2 01       	movw	r30, r4
    7a9c:	ed 0d       	add	r30, r13
    7a9e:	f1 1d       	adc	r31, r1
    7aa0:	80 81       	ld	r24, Z
    7aa2:	90 e0       	ldi	r25, 0x00	; 0
    7aa4:	b3 01       	movw	r22, r6
    7aa6:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    7aaa:	dd 20       	and	r13, r13
    7aac:	a9 f7       	brne	.-22     	; 0x7a98 <vfprintf+0x3a0>
    7aae:	06 c0       	rjmp	.+12     	; 0x7abc <vfprintf+0x3c4>
    7ab0:	80 e2       	ldi	r24, 0x20	; 32
    7ab2:	90 e0       	ldi	r25, 0x00	; 0
    7ab4:	b3 01       	movw	r22, r6
    7ab6:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <fputc>
    7aba:	ea 94       	dec	r14
    7abc:	ee 20       	and	r14, r14
    7abe:	c1 f7       	brne	.-16     	; 0x7ab0 <vfprintf+0x3b8>
    7ac0:	40 ce       	rjmp	.-896    	; 0x7742 <vfprintf+0x4a>
    7ac2:	f3 01       	movw	r30, r6
    7ac4:	86 81       	ldd	r24, Z+6	; 0x06
    7ac6:	97 81       	ldd	r25, Z+7	; 0x07
    7ac8:	02 c0       	rjmp	.+4      	; 0x7ace <vfprintf+0x3d6>
    7aca:	8f ef       	ldi	r24, 0xFF	; 255
    7acc:	9f ef       	ldi	r25, 0xFF	; 255
    7ace:	2d 96       	adiw	r28, 0x0d	; 13
    7ad0:	cd bf       	out	0x3d, r28	; 61
    7ad2:	de bf       	out	0x3e, r29	; 62
    7ad4:	df 91       	pop	r29
    7ad6:	cf 91       	pop	r28
    7ad8:	1f 91       	pop	r17
    7ada:	0f 91       	pop	r16
    7adc:	ff 90       	pop	r15
    7ade:	ef 90       	pop	r14
    7ae0:	df 90       	pop	r13
    7ae2:	cf 90       	pop	r12
    7ae4:	bf 90       	pop	r11
    7ae6:	af 90       	pop	r10
    7ae8:	9f 90       	pop	r9
    7aea:	8f 90       	pop	r8
    7aec:	7f 90       	pop	r7
    7aee:	6f 90       	pop	r6
    7af0:	5f 90       	pop	r5
    7af2:	4f 90       	pop	r4
    7af4:	3f 90       	pop	r3
    7af6:	2f 90       	pop	r2
    7af8:	08 95       	ret

00007afa <strnlen_P>:
    7afa:	fc 01       	movw	r30, r24
    7afc:	05 90       	lpm	r0, Z+
    7afe:	61 50       	subi	r22, 0x01	; 1
    7b00:	70 40       	sbci	r23, 0x00	; 0
    7b02:	01 10       	cpse	r0, r1
    7b04:	d8 f7       	brcc	.-10     	; 0x7afc <strnlen_P+0x2>
    7b06:	80 95       	com	r24
    7b08:	90 95       	com	r25
    7b0a:	8e 0f       	add	r24, r30
    7b0c:	9f 1f       	adc	r25, r31
    7b0e:	08 95       	ret

00007b10 <memcpy>:
    7b10:	fb 01       	movw	r30, r22
    7b12:	dc 01       	movw	r26, r24
    7b14:	02 c0       	rjmp	.+4      	; 0x7b1a <memcpy+0xa>
    7b16:	01 90       	ld	r0, Z+
    7b18:	0d 92       	st	X+, r0
    7b1a:	41 50       	subi	r20, 0x01	; 1
    7b1c:	50 40       	sbci	r21, 0x00	; 0
    7b1e:	d8 f7       	brcc	.-10     	; 0x7b16 <memcpy+0x6>
    7b20:	08 95       	ret

00007b22 <strnlen>:
    7b22:	fc 01       	movw	r30, r24
    7b24:	61 50       	subi	r22, 0x01	; 1
    7b26:	70 40       	sbci	r23, 0x00	; 0
    7b28:	01 90       	ld	r0, Z+
    7b2a:	01 10       	cpse	r0, r1
    7b2c:	d8 f7       	brcc	.-10     	; 0x7b24 <strnlen+0x2>
    7b2e:	80 95       	com	r24
    7b30:	90 95       	com	r25
    7b32:	8e 0f       	add	r24, r30
    7b34:	9f 1f       	adc	r25, r31
    7b36:	08 95       	ret

00007b38 <strrev>:
    7b38:	dc 01       	movw	r26, r24
    7b3a:	fc 01       	movw	r30, r24
    7b3c:	67 2f       	mov	r22, r23
    7b3e:	71 91       	ld	r23, Z+
    7b40:	77 23       	and	r23, r23
    7b42:	e1 f7       	brne	.-8      	; 0x7b3c <strrev+0x4>
    7b44:	32 97       	sbiw	r30, 0x02	; 2
    7b46:	04 c0       	rjmp	.+8      	; 0x7b50 <strrev+0x18>
    7b48:	7c 91       	ld	r23, X
    7b4a:	6d 93       	st	X+, r22
    7b4c:	70 83       	st	Z, r23
    7b4e:	62 91       	ld	r22, -Z
    7b50:	ae 17       	cp	r26, r30
    7b52:	bf 07       	cpc	r27, r31
    7b54:	c8 f3       	brcs	.-14     	; 0x7b48 <strrev+0x10>
    7b56:	08 95       	ret

00007b58 <fputc>:
    7b58:	0f 93       	push	r16
    7b5a:	1f 93       	push	r17
    7b5c:	cf 93       	push	r28
    7b5e:	df 93       	push	r29
    7b60:	8c 01       	movw	r16, r24
    7b62:	eb 01       	movw	r28, r22
    7b64:	8b 81       	ldd	r24, Y+3	; 0x03
    7b66:	81 ff       	sbrs	r24, 1
    7b68:	1b c0       	rjmp	.+54     	; 0x7ba0 <fputc+0x48>
    7b6a:	82 ff       	sbrs	r24, 2
    7b6c:	0d c0       	rjmp	.+26     	; 0x7b88 <fputc+0x30>
    7b6e:	2e 81       	ldd	r18, Y+6	; 0x06
    7b70:	3f 81       	ldd	r19, Y+7	; 0x07
    7b72:	8c 81       	ldd	r24, Y+4	; 0x04
    7b74:	9d 81       	ldd	r25, Y+5	; 0x05
    7b76:	28 17       	cp	r18, r24
    7b78:	39 07       	cpc	r19, r25
    7b7a:	64 f4       	brge	.+24     	; 0x7b94 <fputc+0x3c>
    7b7c:	e8 81       	ld	r30, Y
    7b7e:	f9 81       	ldd	r31, Y+1	; 0x01
    7b80:	01 93       	st	Z+, r16
    7b82:	e8 83       	st	Y, r30
    7b84:	f9 83       	std	Y+1, r31	; 0x01
    7b86:	06 c0       	rjmp	.+12     	; 0x7b94 <fputc+0x3c>
    7b88:	e8 85       	ldd	r30, Y+8	; 0x08
    7b8a:	f9 85       	ldd	r31, Y+9	; 0x09
    7b8c:	80 2f       	mov	r24, r16
    7b8e:	19 95       	eicall
    7b90:	00 97       	sbiw	r24, 0x00	; 0
    7b92:	31 f4       	brne	.+12     	; 0x7ba0 <fputc+0x48>
    7b94:	8e 81       	ldd	r24, Y+6	; 0x06
    7b96:	9f 81       	ldd	r25, Y+7	; 0x07
    7b98:	01 96       	adiw	r24, 0x01	; 1
    7b9a:	8e 83       	std	Y+6, r24	; 0x06
    7b9c:	9f 83       	std	Y+7, r25	; 0x07
    7b9e:	02 c0       	rjmp	.+4      	; 0x7ba4 <fputc+0x4c>
    7ba0:	0f ef       	ldi	r16, 0xFF	; 255
    7ba2:	1f ef       	ldi	r17, 0xFF	; 255
    7ba4:	c8 01       	movw	r24, r16
    7ba6:	df 91       	pop	r29
    7ba8:	cf 91       	pop	r28
    7baa:	1f 91       	pop	r17
    7bac:	0f 91       	pop	r16
    7bae:	08 95       	ret

00007bb0 <__ultoa_invert>:
    7bb0:	fa 01       	movw	r30, r20
    7bb2:	aa 27       	eor	r26, r26
    7bb4:	28 30       	cpi	r18, 0x08	; 8
    7bb6:	51 f1       	breq	.+84     	; 0x7c0c <__ultoa_invert+0x5c>
    7bb8:	20 31       	cpi	r18, 0x10	; 16
    7bba:	81 f1       	breq	.+96     	; 0x7c1c <__ultoa_invert+0x6c>
    7bbc:	e8 94       	clt
    7bbe:	6f 93       	push	r22
    7bc0:	6e 7f       	andi	r22, 0xFE	; 254
    7bc2:	6e 5f       	subi	r22, 0xFE	; 254
    7bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    7bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    7bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bca:	af 4f       	sbci	r26, 0xFF	; 255
    7bcc:	b1 e0       	ldi	r27, 0x01	; 1
    7bce:	3e d0       	rcall	.+124    	; 0x7c4c <__ultoa_invert+0x9c>
    7bd0:	b4 e0       	ldi	r27, 0x04	; 4
    7bd2:	3c d0       	rcall	.+120    	; 0x7c4c <__ultoa_invert+0x9c>
    7bd4:	67 0f       	add	r22, r23
    7bd6:	78 1f       	adc	r23, r24
    7bd8:	89 1f       	adc	r24, r25
    7bda:	9a 1f       	adc	r25, r26
    7bdc:	a1 1d       	adc	r26, r1
    7bde:	68 0f       	add	r22, r24
    7be0:	79 1f       	adc	r23, r25
    7be2:	8a 1f       	adc	r24, r26
    7be4:	91 1d       	adc	r25, r1
    7be6:	a1 1d       	adc	r26, r1
    7be8:	6a 0f       	add	r22, r26
    7bea:	71 1d       	adc	r23, r1
    7bec:	81 1d       	adc	r24, r1
    7bee:	91 1d       	adc	r25, r1
    7bf0:	a1 1d       	adc	r26, r1
    7bf2:	20 d0       	rcall	.+64     	; 0x7c34 <__ultoa_invert+0x84>
    7bf4:	09 f4       	brne	.+2      	; 0x7bf8 <__ultoa_invert+0x48>
    7bf6:	68 94       	set
    7bf8:	3f 91       	pop	r19
    7bfa:	2a e0       	ldi	r18, 0x0A	; 10
    7bfc:	26 9f       	mul	r18, r22
    7bfe:	11 24       	eor	r1, r1
    7c00:	30 19       	sub	r19, r0
    7c02:	30 5d       	subi	r19, 0xD0	; 208
    7c04:	31 93       	st	Z+, r19
    7c06:	de f6       	brtc	.-74     	; 0x7bbe <__ultoa_invert+0xe>
    7c08:	cf 01       	movw	r24, r30
    7c0a:	08 95       	ret
    7c0c:	46 2f       	mov	r20, r22
    7c0e:	47 70       	andi	r20, 0x07	; 7
    7c10:	40 5d       	subi	r20, 0xD0	; 208
    7c12:	41 93       	st	Z+, r20
    7c14:	b3 e0       	ldi	r27, 0x03	; 3
    7c16:	0f d0       	rcall	.+30     	; 0x7c36 <__ultoa_invert+0x86>
    7c18:	c9 f7       	brne	.-14     	; 0x7c0c <__ultoa_invert+0x5c>
    7c1a:	f6 cf       	rjmp	.-20     	; 0x7c08 <__ultoa_invert+0x58>
    7c1c:	46 2f       	mov	r20, r22
    7c1e:	4f 70       	andi	r20, 0x0F	; 15
    7c20:	40 5d       	subi	r20, 0xD0	; 208
    7c22:	4a 33       	cpi	r20, 0x3A	; 58
    7c24:	18 f0       	brcs	.+6      	; 0x7c2c <__ultoa_invert+0x7c>
    7c26:	49 5d       	subi	r20, 0xD9	; 217
    7c28:	31 fd       	sbrc	r19, 1
    7c2a:	40 52       	subi	r20, 0x20	; 32
    7c2c:	41 93       	st	Z+, r20
    7c2e:	02 d0       	rcall	.+4      	; 0x7c34 <__ultoa_invert+0x84>
    7c30:	a9 f7       	brne	.-22     	; 0x7c1c <__ultoa_invert+0x6c>
    7c32:	ea cf       	rjmp	.-44     	; 0x7c08 <__ultoa_invert+0x58>
    7c34:	b4 e0       	ldi	r27, 0x04	; 4
    7c36:	a6 95       	lsr	r26
    7c38:	97 95       	ror	r25
    7c3a:	87 95       	ror	r24
    7c3c:	77 95       	ror	r23
    7c3e:	67 95       	ror	r22
    7c40:	ba 95       	dec	r27
    7c42:	c9 f7       	brne	.-14     	; 0x7c36 <__ultoa_invert+0x86>
    7c44:	00 97       	sbiw	r24, 0x00	; 0
    7c46:	61 05       	cpc	r22, r1
    7c48:	71 05       	cpc	r23, r1
    7c4a:	08 95       	ret
    7c4c:	9b 01       	movw	r18, r22
    7c4e:	ac 01       	movw	r20, r24
    7c50:	0a 2e       	mov	r0, r26
    7c52:	06 94       	lsr	r0
    7c54:	57 95       	ror	r21
    7c56:	47 95       	ror	r20
    7c58:	37 95       	ror	r19
    7c5a:	27 95       	ror	r18
    7c5c:	ba 95       	dec	r27
    7c5e:	c9 f7       	brne	.-14     	; 0x7c52 <__ultoa_invert+0xa2>
    7c60:	62 0f       	add	r22, r18
    7c62:	73 1f       	adc	r23, r19
    7c64:	84 1f       	adc	r24, r20
    7c66:	95 1f       	adc	r25, r21
    7c68:	a0 1d       	adc	r26, r0
    7c6a:	08 95       	ret

00007c6c <_exit>:
    7c6c:	f8 94       	cli

00007c6e <__stop_program>:
    7c6e:	ff cf       	rjmp	.-2      	; 0x7c6e <__stop_program>
