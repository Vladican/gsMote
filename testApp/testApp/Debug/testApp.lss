
testApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00802000  000075d4  00007668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002fa9  0080210e  0080210e  00007776  2**0
                  ALLOC
  3 .stab         000028f8  00000000  00000000  00007778  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009ca  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000420  00000000  00000000  0000aa40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b95c  00000000  00000000  0000ae60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002637  00000000  00000000  000167bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000589c  00000000  00000000  00018df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001bc0  00000000  00000000  0001e690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000462c  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000808f  00000000  00000000  0002487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0017fd97  00000000  00000000  0002c90b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  001ac6a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      38:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__vector_14>
      3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      40:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__vector_16>
      44:	0c 94 32 11 	jmp	0x2264	; 0x2264 <__vector_17>
      48:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__vector_18>
      4c:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__vector_19>
      50:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_20>
      54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     100:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__vector_64>
     104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     134:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_77>
     138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     13c:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__vector_79>
     140:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__vector_80>
     144:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__vector_81>
     148:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_82>
     14c:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__vector_83>
     150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a0:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__vector_104>
     1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001e8 <chb_err_init>:
     1e8:	52 41 44 49 4f 20 4e 4f 54 20 49 4e 49 54 49 41     RADIO NOT INITIA
     1f8:	4c 49 5a 45 44 20 50 52 4f 50 45 52 4c 59 0a 00     LIZED PROPERLY..

00000208 <chb_err_overflow>:
     208:	42 55 46 46 45 52 20 46 55 4c 4c 2e 20 54 4f 53     BUFFER FULL. TOS
     218:	53 49 4e 47 20 49 4e 43 4f 4d 49 4e 47 20 44 41     SING INCOMING DA
     228:	54 41 0a 00                                         TA..

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	df e5       	ldi	r29, 0x5F	; 95
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	e4 ed       	ldi	r30, 0xD4	; 212
     244:	f5 e7       	ldi	r31, 0x75	; 117
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	ae 30       	cpi	r26, 0x0E	; 14
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	10 e5       	ldi	r17, 0x50	; 80
     258:	ae e0       	ldi	r26, 0x0E	; 14
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a7 3b       	cpi	r26, 0xB7	; 183
     262:	b1 07       	cpc	r27, r17
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 db 06 	call	0xdb6	; 0xdb6 <main>
     26a:	0c 94 e8 3a 	jmp	0x75d0	; 0x75d0 <_exit>

0000026e <__bad_interrupt>:
     26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <writeFRAM>:
 * Created: 3/8/2014 11:40:36 AM
 *  Author: VLAD
 */ 
#include "FRAM.h"

void writeFRAM(uint8_t* buffer, uint16_t length) {
     272:	af 92       	push	r10
     274:	bf 92       	push	r11
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	e8 2e       	mov	r14, r24
     286:	d9 2e       	mov	r13, r25
     288:	8b 01       	movw	r16, r22
	
	uint8_t prev_SPI_settings;
	ADCPower(TRUE);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	prev_SPI_settings = SPIC.CTRL;
     290:	c0 ec       	ldi	r28, 0xC0	; 192
     292:	d8 e0       	ldi	r29, 0x08	; 8
     294:	f8 80       	ld	r15, Y
	SPIInit(SPI_MODE_0_gc);
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
     29c:	80 ed       	ldi	r24, 0xD0	; 208
     29e:	88 83       	st	Y, r24
	SPICS(TRUE);
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	e0 e2       	ldi	r30, 0x20	; 32
     2aa:	f6 e0       	ldi	r31, 0x06	; 6
     2ac:	86 83       	std	Z+6, r24	; 0x06
	nop();
     2ae:	00 00       	nop
	SPIC.DATA = FR_WREN;
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	8b 83       	std	Y+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     2b4:	e0 ec       	ldi	r30, 0xC0	; 192
     2b6:	f8 e0       	ldi	r31, 0x08	; 8
     2b8:	82 81       	ldd	r24, Z+2	; 0x02
     2ba:	88 23       	and	r24, r24
     2bc:	ec f7       	brge	.-6      	; 0x2b8 <writeFRAM+0x46>
	SPIBuffer[12] = SPIC.DATA;
     2be:	e0 ec       	ldi	r30, 0xC0	; 192
     2c0:	f8 e0       	ldi	r31, 0x08	; 8
     2c2:	83 81       	ldd	r24, Z+3	; 0x03
     2c4:	80 93 2c 3e 	sts	0x3E2C, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b6 e0       	ldi	r27, 0x06	; 6
     2cc:	88 e0       	ldi	r24, 0x08	; 8
     2ce:	15 96       	adiw	r26, 0x05	; 5
     2d0:	8c 93       	st	X, r24
     2d2:	15 97       	sbiw	r26, 0x05	; 5
	nop(); // time for CS_FRAM to accept high signal
     2d4:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
     2d6:	16 96       	adiw	r26, 0x06	; 6
     2d8:	8c 93       	st	X, r24
     2da:	16 97       	sbiw	r26, 0x06	; 6
	nop();
     2dc:	00 00       	nop
	SPIC.DATA = FR_WRITE;
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	88 23       	and	r24, r24
     2e6:	ec f7       	brge	.-6      	; 0x2e2 <writeFRAM+0x70>
	SPIBuffer[12] = SPIC.DATA;
     2e8:	e0 ec       	ldi	r30, 0xC0	; 192
     2ea:	f8 e0       	ldi	r31, 0x08	; 8
     2ec:	83 81       	ldd	r24, Z+3	; 0x03
     2ee:	80 93 2c 3e 	sts	0x3E2C, r24
	//send address at which to start writing data
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
     2f2:	80 91 1e 3e 	lds	r24, 0x3E1E
     2f6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     2f8:	82 81       	ldd	r24, Z+2	; 0x02
     2fa:	88 23       	and	r24, r24
     2fc:	ec f7       	brge	.-6      	; 0x2f8 <writeFRAM+0x86>
	SPIBuffer[12] = SPIC.DATA;
     2fe:	e0 ec       	ldi	r30, 0xC0	; 192
     300:	f8 e0       	ldi	r31, 0x08	; 8
     302:	83 81       	ldd	r24, Z+3	; 0x03
     304:	80 93 2c 3e 	sts	0x3E2C, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
     308:	80 91 1d 3e 	lds	r24, 0x3E1D
     30c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	88 23       	and	r24, r24
     312:	ec f7       	brge	.-6      	; 0x30e <writeFRAM+0x9c>
	SPIBuffer[12] = SPIC.DATA;
     314:	e0 ec       	ldi	r30, 0xC0	; 192
     316:	f8 e0       	ldi	r31, 0x08	; 8
     318:	83 81       	ldd	r24, Z+3	; 0x03
     31a:	80 93 2c 3e 	sts	0x3E2C, r24
	//write data to FRAM
	for(uint32_t i = 0; i< length; i++){
     31e:	a8 01       	movw	r20, r16
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	41 15       	cp	r20, r1
     326:	51 05       	cpc	r21, r1
     328:	61 05       	cpc	r22, r1
     32a:	71 05       	cpc	r23, r1
     32c:	c9 f0       	breq	.+50     	; 0x360 <writeFRAM+0xee>
     32e:	ae 2c       	mov	r10, r14
     330:	bd 2c       	mov	r11, r13
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	dc 01       	movw	r26, r24
		SPIC.DATA = buffer[i];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     338:	2c e2       	ldi	r18, 0x2C	; 44
     33a:	3e e3       	ldi	r19, 0x3E	; 62
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	//write data to FRAM
	for(uint32_t i = 0; i< length; i++){
		SPIC.DATA = buffer[i];
     33c:	e5 01       	movw	r28, r10
     33e:	e9 90       	ld	r14, Y+
     340:	5e 01       	movw	r10, r28
     342:	e3 82       	std	Z+3, r14	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
     344:	e2 80       	ldd	r14, Z+2	; 0x02
     346:	ee 20       	and	r14, r14
     348:	ec f7       	brge	.-6      	; 0x344 <writeFRAM+0xd2>
		SPIBuffer[12] = SPIC.DATA;
     34a:	e3 80       	ldd	r14, Z+3	; 0x03
     34c:	e9 01       	movw	r28, r18
     34e:	e8 82       	st	Y, r14
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	//write data to FRAM
	for(uint32_t i = 0; i< length; i++){
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	a1 1d       	adc	r26, r1
     354:	b1 1d       	adc	r27, r1
     356:	84 17       	cp	r24, r20
     358:	95 07       	cpc	r25, r21
     35a:	a6 07       	cpc	r26, r22
     35c:	b7 07       	cpc	r27, r23
     35e:	70 f3       	brcs	.-36     	; 0x33c <writeFRAM+0xca>
		SPIC.DATA = buffer[i];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}
	
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
     360:	88 e0       	ldi	r24, 0x08	; 8
     362:	e0 e2       	ldi	r30, 0x20	; 32
     364:	f6 e0       	ldi	r31, 0x06	; 6
     366:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIC.CTRL = prev_SPI_settings;
     36e:	f0 92 c0 08 	sts	0x08C0, r15
	//SPIC.CTRL = ADC_SPI_CONFIG_gc;
	//PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
	
	//increment address by the written length
	FRAMAddress +=length;
     372:	80 91 1d 3e 	lds	r24, 0x3E1D
     376:	90 91 1e 3e 	lds	r25, 0x3E1E
     37a:	08 0f       	add	r16, r24
     37c:	19 1f       	adc	r17, r25
     37e:	00 93 1d 3e 	sts	0x3E1D, r16
     382:	10 93 1e 3e 	sts	0x3E1E, r17
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	08 95       	ret

0000039a <readFRAM>:

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes, uint16_t startAddress) {
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	0f 92       	push	r0
     3aa:	0f 92       	push	r0
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	7c 01       	movw	r14, r24
     3b2:	69 83       	std	Y+1, r22	; 0x01
     3b4:	7a 83       	std	Y+2, r23	; 0x02
	
	//save SPI registers
	uint8_t prev_SPI_settings;
	ADCPower(TRUE);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	prev_SPI_settings = SPIC.CTRL;
     3bc:	00 ec       	ldi	r16, 0xC0	; 192
     3be:	18 e0       	ldi	r17, 0x08	; 8
     3c0:	f8 01       	movw	r30, r16
     3c2:	d0 80       	ld	r13, Z
	SPIInit(SPI_MODE_0_gc);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
     3ca:	80 ed       	ldi	r24, 0xD0	; 208
     3cc:	f8 01       	movw	r30, r16
     3ce:	80 83       	st	Z, r24
	SPICS(TRUE);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	e0 e2       	ldi	r30, 0x20	; 32
     3da:	f6 e0       	ldi	r31, 0x06	; 6
     3dc:	86 83       	std	Z+6, r24	; 0x06
	nop();
     3de:	00 00       	nop
	
	SPIC.DATA = FR_READ;
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	f8 01       	movw	r30, r16
     3e4:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     3e6:	82 81       	ldd	r24, Z+2	; 0x02
     3e8:	88 23       	and	r24, r24
     3ea:	ec f7       	brge	.-6      	; 0x3e6 <readFRAM+0x4c>
	SPIBuffer[12] = SPIC.DATA;
     3ec:	e0 ec       	ldi	r30, 0xC0	; 192
     3ee:	f8 e0       	ldi	r31, 0x08	; 8
     3f0:	83 81       	ldd	r24, Z+3	; 0x03
     3f2:	80 93 2c 3e 	sts	0x3E2C, r24
	SPIC.DATA = *(((uint8_t*)&startAddress) + 1);;
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	88 23       	and	r24, r24
     3fe:	ec f7       	brge	.-6      	; 0x3fa <readFRAM+0x60>
	SPIBuffer[12] = SPIC.DATA;
     400:	e0 ec       	ldi	r30, 0xC0	; 192
     402:	f8 e0       	ldi	r31, 0x08	; 8
     404:	83 81       	ldd	r24, Z+3	; 0x03
     406:	80 93 2c 3e 	sts	0x3E2C, r24
	SPIC.DATA = *(((uint8_t*)&startAddress) + 0);;
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	88 23       	and	r24, r24
     412:	ec f7       	brge	.-6      	; 0x40e <readFRAM+0x74>
	SPIBuffer[12] = SPIC.DATA;
     414:	e0 ec       	ldi	r30, 0xC0	; 192
     416:	f8 e0       	ldi	r31, 0x08	; 8
     418:	83 81       	ldd	r24, Z+3	; 0x03
     41a:	80 93 2c 3e 	sts	0x3E2C, r24
	
	for(uint16_t i = 0; i < numBytes; i++) {
     41e:	e1 14       	cp	r14, r1
     420:	f1 04       	cpc	r15, r1
     422:	b9 f0       	breq	.+46     	; 0x452 <readFRAM+0xb8>
     424:	ec ea       	ldi	r30, 0xAC	; 172
     426:	f1 e2       	ldi	r31, 0x21	; 33
	FRAMAddress +=length;
}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes, uint16_t startAddress) {
     428:	c7 01       	movw	r24, r14
     42a:	8e 0f       	add	r24, r30
     42c:	9f 1f       	adc	r25, r31
	SPIC.DATA = *(((uint8_t*)&startAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) {
		SPIC.DATA = 0xAA;
     42e:	a0 ec       	ldi	r26, 0xC0	; 192
     430:	b8 e0       	ldi	r27, 0x08	; 8
     432:	3a ea       	ldi	r19, 0xAA	; 170
     434:	13 96       	adiw	r26, 0x03	; 3
     436:	3c 93       	st	X, r19
     438:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     43a:	12 96       	adiw	r26, 0x02	; 2
     43c:	2c 91       	ld	r18, X
     43e:	12 97       	sbiw	r26, 0x02	; 2
     440:	22 23       	and	r18, r18
     442:	dc f7       	brge	.-10     	; 0x43a <readFRAM+0xa0>
		FRAMReadBuffer[i] = SPIC.DATA;
     444:	13 96       	adiw	r26, 0x03	; 3
     446:	2c 91       	ld	r18, X
     448:	13 97       	sbiw	r26, 0x03	; 3
     44a:	21 93       	st	Z+, r18
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&startAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) {
     44c:	e8 17       	cp	r30, r24
     44e:	f9 07       	cpc	r31, r25
     450:	89 f7       	brne	.-30     	; 0x434 <readFRAM+0x9a>
		SPIC.DATA = 0xAA;
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
	}

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
     452:	88 e0       	ldi	r24, 0x08	; 8
     454:	e0 e2       	ldi	r30, 0x20	; 32
     456:	f6 e0       	ldi	r31, 0x06	; 6
     458:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIC.CTRL = prev_SPI_settings;
     460:	d0 92 c0 08 	sts	0x08C0, r13

}
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	08 95       	ret

00000478 <StartSerial>:
 * Created: 9/20/2013 9:50:45 AM
 *  Author: Vlad
 */ 
#include "SerialUSB.h"

bool StartSerial(uint32_t BaudRate){
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	6b 01       	movw	r12, r22
     48a:	7c 01       	movw	r14, r24
	uint16_t prescaler;
	if(BaudRate <600 || BaudRate >1000000){
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	88 55       	subi	r24, 0x58	; 88
     492:	92 40       	sbci	r25, 0x02	; 2
     494:	a0 40       	sbci	r26, 0x00	; 0
     496:	b0 40       	sbci	r27, 0x00	; 0
     498:	89 3e       	cpi	r24, 0xE9	; 233
     49a:	2f e3       	ldi	r18, 0x3F	; 63
     49c:	92 07       	cpc	r25, r18
     49e:	2f e0       	ldi	r18, 0x0F	; 15
     4a0:	a2 07       	cpc	r26, r18
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	b2 07       	cpc	r27, r18
     4a6:	08 f0       	brcs	.+2      	; 0x4aa <StartSerial+0x32>
     4a8:	5c c0       	rjmp	.+184    	; 0x562 <StartSerial+0xea>
		//baud rate too fast or too slow
		return false;
	}
	//set F_CPU/F_PER to 32 MHz (default is the 2 MHz RC oscillator)
	set_32MHz();
     4aa:	0e 94 3c 03 	call	0x678	; 0x678 <set_32MHz>
	//set output on transmit pin
	PORTC.DIRSET = PIN3_bm;
     4ae:	e0 e4       	ldi	r30, 0x40	; 64
     4b0:	f6 e0       	ldi	r31, 0x06	; 6
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = PIN3_bm;
     4b6:	85 83       	std	Z+5, r24	; 0x05
	//set input on receive pin
	PORTC.DIRCLR = PIN2_bm;
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	82 83       	std	Z+2, r24	; 0x02
	//prescalar of 15: baud = F_CPU/((2^bscale)*16*(scaler+1)) = 125000 (almost 128000)
	prescaler = (uint32_t)((((float)F_CPU)/((float)(16*BaudRate)))-1);
     4bc:	cc 0c       	add	r12, r12
     4be:	dd 1c       	adc	r13, r13
     4c0:	ee 1c       	adc	r14, r14
     4c2:	ff 1c       	adc	r15, r15
     4c4:	cc 0c       	add	r12, r12
     4c6:	dd 1c       	adc	r13, r13
     4c8:	ee 1c       	adc	r14, r14
     4ca:	ff 1c       	adc	r15, r15
     4cc:	c7 01       	movw	r24, r14
     4ce:	b6 01       	movw	r22, r12
     4d0:	66 0f       	add	r22, r22
     4d2:	77 1f       	adc	r23, r23
     4d4:	88 1f       	adc	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	66 0f       	add	r22, r22
     4da:	77 1f       	adc	r23, r23
     4dc:	88 1f       	adc	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__floatunsisf>
     4e4:	9b 01       	movw	r18, r22
     4e6:	ac 01       	movw	r20, r24
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	74 e2       	ldi	r23, 0x24	; 36
     4ec:	84 ef       	ldi	r24, 0xF4	; 244
     4ee:	9b e4       	ldi	r25, 0x4B	; 75
     4f0:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e8       	ldi	r20, 0x80	; 128
     4fa:	5f e3       	ldi	r21, 0x3F	; 63
     4fc:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__subsf3>
     500:	c6 2f       	mov	r28, r22
     502:	d7 2f       	mov	r29, r23
     504:	18 2f       	mov	r17, r24
     506:	09 2f       	mov	r16, r25
     508:	86 2f       	mov	r24, r22
     50a:	9d 2f       	mov	r25, r29
     50c:	a1 2f       	mov	r26, r17
     50e:	b0 2f       	mov	r27, r16
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixunssfsi>
     518:	6b 01       	movw	r12, r22
     51a:	7c 01       	movw	r14, r24
	//increment prescaler if truncated part was >= 0.5
	if((((float)F_CPU/((float)(16*BaudRate)))-1)-prescaler >= 0.5) prescaler++;
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 44 36 	call	0x6c88	; 0x6c88 <__floatunsisf>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	8c 2f       	mov	r24, r28
     52a:	9d 2f       	mov	r25, r29
     52c:	a1 2f       	mov	r26, r17
     52e:	b0 2f       	mov	r27, r16
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__subsf3>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	5f e3       	ldi	r21, 0x3F	; 63
     540:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <__gesf2>
     544:	88 23       	and	r24, r24
     546:	1c f0       	brlt	.+6      	; 0x54e <StartSerial+0xd6>
     548:	08 94       	sec
     54a:	c1 1c       	adc	r12, r1
     54c:	d1 1c       	adc	r13, r1
	
	USARTC0.BAUDCTRLA = prescaler & 0xFF;
     54e:	e0 ea       	ldi	r30, 0xA0	; 160
     550:	f8 e0       	ldi	r31, 0x08	; 8
     552:	c6 82       	std	Z+6, r12	; 0x06
	USARTC0.BAUDCTRLB = prescaler >>8;
     554:	d7 82       	std	Z+7, r13	; 0x07
	//8 data bits no parity 1 stop bit
	USARTC0.CTRLC = 3;
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	85 83       	std	Z+5, r24	; 0x05
	//turn on Rx and Tx for USART
	USARTC0.CTRLB = BIT4_bm | BIT3_bm;
     55a:	88 e1       	ldi	r24, 0x18	; 24
     55c:	84 83       	std	Z+4, r24	; 0x04
	return true;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	01 c0       	rjmp	.+2      	; 0x564 <StartSerial+0xec>

bool StartSerial(uint32_t BaudRate){
	uint16_t prescaler;
	if(BaudRate <600 || BaudRate >1000000){
		//baud rate too fast or too slow
		return false;
     562:	80 e0       	ldi	r24, 0x00	; 0
	//8 data bits no parity 1 stop bit
	USARTC0.CTRLC = 3;
	//turn on Rx and Tx for USART
	USARTC0.CTRLB = BIT4_bm | BIT3_bm;
	return true;
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	08 95       	ret

00000576 <SerialWriteByte>:

void SerialWriteByte(uint8_t byte){
	//wait for transmit buffer to become available
	while((USARTC0.STATUS & BIT5_bm) != BIT5_bm){
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f8 e0       	ldi	r31, 0x08	; 8
     57a:	91 81       	ldd	r25, Z+1	; 0x01
     57c:	95 ff       	sbrs	r25, 5
     57e:	fd cf       	rjmp	.-6      	; 0x57a <SerialWriteByte+0x4>
		//wait
	}
	//send byte
	USARTC0.DATA = byte;
     580:	80 93 a0 08 	sts	0x08A0, r24
	//wait for transmit to finish
	//while((USARTC0.STATUS & BIT6_bm) != BIT6_bm) {
		//wait
	//}
}
     584:	08 95       	ret

00000586 <SerialReadByte>:

uint8_t SerialReadByte(){
	uint8_t byte;
	//wait for reception of message
	while ((USARTC0.STATUS & BIT7_bm) != BIT7_bm){
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f8 e0       	ldi	r31, 0x08	; 8
     58a:	81 81       	ldd	r24, Z+1	; 0x01
     58c:	88 23       	and	r24, r24
     58e:	ec f7       	brge	.-6      	; 0x58a <SerialReadByte+0x4>
		//add timeout logic
	}	
	//read in byte
	byte = USARTC0.DATA;
     590:	80 91 a0 08 	lds	r24, 0x08A0
	return byte;	
}
     594:	08 95       	ret

00000596 <SerialWriteBuffer>:

void SerialWriteBuffer(uint8_t* buffer, uint32_t length){
     596:	8f 92       	push	r8
     598:	9f 92       	push	r9
     59a:	af 92       	push	r10
     59c:	bf 92       	push	r11
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	6a 01       	movw	r12, r20
     5ac:	7b 01       	movw	r14, r22
	uint32_t i;
	for(i=0;i<length;i++){
     5ae:	41 15       	cp	r20, r1
     5b0:	51 05       	cpc	r21, r1
     5b2:	61 05       	cpc	r22, r1
     5b4:	71 05       	cpc	r23, r1
     5b6:	91 f0       	breq	.+36     	; 0x5dc <SerialWriteBuffer+0x46>
     5b8:	c8 2f       	mov	r28, r24
     5ba:	d9 2f       	mov	r29, r25
     5bc:	88 24       	eor	r8, r8
     5be:	99 24       	eor	r9, r9
     5c0:	54 01       	movw	r10, r8
		SerialWriteByte(buffer[i]);
     5c2:	89 91       	ld	r24, Y+
     5c4:	0e 94 bb 02 	call	0x576	; 0x576 <SerialWriteByte>
	return byte;	
}

void SerialWriteBuffer(uint8_t* buffer, uint32_t length){
	uint32_t i;
	for(i=0;i<length;i++){
     5c8:	08 94       	sec
     5ca:	81 1c       	adc	r8, r1
     5cc:	91 1c       	adc	r9, r1
     5ce:	a1 1c       	adc	r10, r1
     5d0:	b1 1c       	adc	r11, r1
     5d2:	8c 14       	cp	r8, r12
     5d4:	9d 04       	cpc	r9, r13
     5d6:	ae 04       	cpc	r10, r14
     5d8:	bf 04       	cpc	r11, r15
     5da:	99 f7       	brne	.-26     	; 0x5c2 <SerialWriteBuffer+0x2c>
		SerialWriteByte(buffer[i]);
	}
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	9f 90       	pop	r9
     5ee:	8f 90       	pop	r8
     5f0:	08 95       	ret

000005f2 <StopSerial>:

void StopSerial(){
	//turn off Rx and Tx for USART
	USARTC0.CTRLB &= ~(BIT4_bm | BIT3_bm);
     5f2:	e0 ea       	ldi	r30, 0xA0	; 160
     5f4:	f8 e0       	ldi	r31, 0x08	; 8
     5f6:	84 81       	ldd	r24, Z+4	; 0x04
     5f8:	87 7e       	andi	r24, 0xE7	; 231
     5fa:	84 83       	std	Z+4, r24	; 0x04
	//clear output pin
	PORTC.OUTCLR = PIN3_bm;
     5fc:	e0 e4       	ldi	r30, 0x40	; 64
     5fe:	f6 e0       	ldi	r31, 0x06	; 6
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN3_bm;
     604:	82 83       	std	Z+2, r24	; 0x02
     606:	08 95       	ret

00000608 <init>:
//  - LS900-SI-02 does not contain the crystal
//  - SFLX02-A03 does contain the crystal
// The high frequency crystal is required to clock the ADC without jitter

void init(){
	ADC_POWER_ON = 0;
     608:	10 92 32 3e 	sts	0x3E32, r1
}
     60c:	08 95       	ret

0000060e <setXOSC_32MHz>:

void setXOSC_32MHz() {
	// configure the crystal to match the chip
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc,
     60e:	80 ec       	ldi	r24, 0xC0	; 192
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	4b e0       	ldi	r20, 0x0B	; 11
     614:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <CLKSYS_XOSC_Config>
	false,
	OSC_XOSCSEL_XTAL_16KCLK_gc );
	CLKSYS_Enable(OSC_XOSCEN_bm);
     618:	e0 e5       	ldi	r30, 0x50	; 80
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	88 60       	ori	r24, 0x08	; 8
     620:	80 83       	st	Z, r24
	// wait for signal to stabilize
do {} while (CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     622:	81 81       	ldd	r24, Z+1	; 0x01
     624:	83 ff       	sbrs	r24, 3
     626:	fd cf       	rjmp	.-6      	; 0x622 <setXOSC_32MHz+0x14>
// configure PLL to use the crystal and turn on
CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     628:	80 ec       	ldi	r24, 0xC0	; 192
     62a:	62 e0       	ldi	r22, 0x02	; 2
     62c:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <CLKSYS_PLL_Config>
CLKSYS_Enable( OSC_PLLEN_bm );
     630:	e0 e5       	ldi	r30, 0x50	; 80
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	80 61       	ori	r24, 0x10	; 16
     638:	80 83       	st	Z, r24
// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     63a:	81 81       	ldd	r24, Z+1	; 0x01
     63c:	84 ff       	sbrs	r24, 4
     63e:	fd cf       	rjmp	.-6      	; 0x63a <setXOSC_32MHz+0x2c>
	// set as system clock and disable unused RC oscillator
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     640:	84 e0       	ldi	r24, 0x04	; 4
     642:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CLKSYS_Disable>
}
     64c:	08 95       	ret

0000064e <set_16MHz>:

// produces consistent but inaccurate clock period.
void set_16MHz() {
	// select 32MHz Oscillator and prescale by 1/2
	CLKSYS_Enable(OSC_RC32MEN_bm);
     64e:	e0 e5       	ldi	r30, 0x50	; 80
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	82 60       	ori	r24, 0x02	; 2
     656:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
     660:	e0 e5       	ldi	r30, 0x50	; 80
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	81 81       	ldd	r24, Z+1	; 0x01
     666:	81 ff       	sbrs	r24, 1
     668:	fd cf       	rjmp	.-6      	; 0x664 <set_16MHz+0x16>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CLKSYS_Disable>
	
}
     676:	08 95       	ret

00000678 <set_32MHz>:

// produces consistent but inaccurate clock period.
void set_32MHz() {
	#define F_CPU 32000000UL
	// select 32MHz Oscillator and prescale by 1
	CLKSYS_Enable(OSC_RC32MEN_bm);
     678:	e0 e5       	ldi	r30, 0x50	; 80
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	82 60       	ori	r24, 0x02	; 2
     680:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
     68a:	e0 e5       	ldi	r30, 0x50	; 80
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	81 81       	ldd	r24, Z+1	; 0x01
     690:	81 ff       	sbrs	r24, 1
     692:	fd cf       	rjmp	.-6      	; 0x68e <set_32MHz+0x16>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CLKSYS_Disable>
	
}
     6a0:	08 95       	ret

000006a2 <portExCS>:


void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     6a2:	88 23       	and	r24, r24
     6a4:	29 f0       	breq	.+10     	; 0x6b0 <portExCS+0xe>
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	e0 e0       	ldi	r30, 0x00	; 0
     6aa:	f6 e0       	ldi	r31, 0x06	; 6
     6ac:	86 83       	std	Z+6, r24	; 0x06
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <portExCS+0x16>
	else {
		PORTA.OUTSET = PIN3_bm;
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	e0 e0       	ldi	r30, 0x00	; 0
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b8:	8a e6       	ldi	r24, 0x6A	; 106
     6ba:	8a 95       	dec	r24
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <portExCS+0x18>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <portExCS+0x1e>
	}
	_delay_us(10);
}
     6c0:	08 95       	ret

000006c2 <Ext1Power>:
	SPIDisable();
}

void Ext1Power(uint8_t on) {
	
	if (on) {
     6c2:	88 23       	and	r24, r24
     6c4:	79 f0       	breq	.+30     	; 0x6e4 <Ext1Power+0x22>
		PORTF.DIRSET = PIN5_bm;
     6c6:	e0 ea       	ldi	r30, 0xA0	; 160
     6c8:	f6 e0       	ldi	r31, 0x06	; 6
     6ca:	80 e2       	ldi	r24, 0x20	; 32
     6cc:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN5_bm;
     6ce:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	93 ec       	ldi	r25, 0xC3	; 195
     6d4:	a9 e0       	ldi	r26, 0x09	; 9
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	90 40       	sbci	r25, 0x00	; 0
     6da:	a0 40       	sbci	r26, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <Ext1Power+0x14>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <Ext1Power+0x1e>
     6e0:	00 00       	nop
     6e2:	08 95       	ret
		//PortEx_DIRSET(PIN3_bm, PS_BANKB);
		//PortEx_OUTSET(PIN3_bm, PS_BANKB);  //write protect SDHC
		_delay_ms(100);
		
	} else {
		PORTF.OUTCLR = PIN5_bm;
     6e4:	e0 ea       	ldi	r30, 0xA0	; 160
     6e6:	f6 e0       	ldi	r31, 0x06	; 6
     6e8:	80 e2       	ldi	r24, 0x20	; 32
     6ea:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN5_bm;
     6ec:	82 83       	std	Z+2, r24	; 0x02
     6ee:	08 95       	ret

000006f0 <Ext2Power>:
	}
}

void Ext2Power(uint8_t on) {
	
	if (on) {
     6f0:	88 23       	and	r24, r24
     6f2:	79 f0       	breq	.+30     	; 0x712 <Ext2Power+0x22>
		PORTF.DIRSET = PIN6_bm;
     6f4:	e0 ea       	ldi	r30, 0xA0	; 160
     6f6:	f6 e0       	ldi	r31, 0x06	; 6
     6f8:	80 e4       	ldi	r24, 0x40	; 64
     6fa:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN6_bm;
     6fc:	85 83       	std	Z+5, r24	; 0x05
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	93 ec       	ldi	r25, 0xC3	; 195
     702:	a9 e0       	ldi	r26, 0x09	; 9
     704:	81 50       	subi	r24, 0x01	; 1
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	a0 40       	sbci	r26, 0x00	; 0
     70a:	e1 f7       	brne	.-8      	; 0x704 <Ext2Power+0x14>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <Ext2Power+0x1e>
     70e:	00 00       	nop
     710:	08 95       	ret
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN6_bm;
     712:	e0 ea       	ldi	r30, 0xA0	; 160
     714:	f6 e0       	ldi	r31, 0x06	; 6
     716:	80 e4       	ldi	r24, 0x40	; 64
     718:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN6_bm;
     71a:	82 83       	std	Z+2, r24	; 0x02
     71c:	08 95       	ret

0000071e <HVPower>:
	}
}

void HVPower(uint8_t on) {
	
	if (on) {
     71e:	88 23       	and	r24, r24
     720:	79 f0       	breq	.+30     	; 0x740 <HVPower+0x22>
		PORTF.DIRSET = PIN7_bm;
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f6 e0       	ldi	r31, 0x06	; 6
     726:	80 e8       	ldi	r24, 0x80	; 128
     728:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN7_bm;
     72a:	85 83       	std	Z+5, r24	; 0x05
     72c:	8f ef       	ldi	r24, 0xFF	; 255
     72e:	93 ec       	ldi	r25, 0xC3	; 195
     730:	a9 e0       	ldi	r26, 0x09	; 9
     732:	81 50       	subi	r24, 0x01	; 1
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	a0 40       	sbci	r26, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <HVPower+0x14>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <HVPower+0x1e>
     73c:	00 00       	nop
     73e:	05 c0       	rjmp	.+10     	; 0x74a <HVPower+0x2c>
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN7_bm;
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f6 e0       	ldi	r31, 0x06	; 6
     744:	80 e8       	ldi	r24, 0x80	; 128
     746:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN7_bm;
     748:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     74a:	af e3       	ldi	r26, 0x3F	; 63
     74c:	bf e1       	ldi	r27, 0x1F	; 31
     74e:	11 97       	sbiw	r26, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <HVPower+0x30>
     752:	00 c0       	rjmp	.+0      	; 0x754 <HVPower+0x36>
     754:	00 00       	nop
	}
	_delay_us(1000);
}
     756:	08 95       	ret

00000758 <lowerMuxCS>:


void lowerMuxCS(uint8_t write) {
	
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
     758:	88 23       	and	r24, r24
     75a:	29 f0       	breq	.+10     	; 0x766 <lowerMuxCS+0xe>
     75c:	80 e1       	ldi	r24, 0x10	; 16
     75e:	e0 e8       	ldi	r30, 0x80	; 128
     760:	f6 e0       	ldi	r31, 0x06	; 6
     762:	86 83       	std	Z+6, r24	; 0x06
     764:	08 95       	ret
	else PORTE.OUTSET = PIN4_bm;
     766:	80 e1       	ldi	r24, 0x10	; 16
     768:	e0 e8       	ldi	r30, 0x80	; 128
     76a:	f6 e0       	ldi	r31, 0x06	; 6
     76c:	85 83       	std	Z+5, r24	; 0x05
     76e:	08 95       	ret

00000770 <upperMuxCS>:
}

void upperMuxCS(uint8_t write) {
	
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
     770:	88 23       	and	r24, r24
     772:	29 f0       	breq	.+10     	; 0x77e <upperMuxCS+0xe>
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	e0 e4       	ldi	r30, 0x40	; 64
     778:	f6 e0       	ldi	r31, 0x06	; 6
     77a:	86 83       	std	Z+6, r24	; 0x06
     77c:	08 95       	ret
	else PORTC.OUTSET = PIN1_bm;
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	e0 e4       	ldi	r30, 0x40	; 64
     782:	f6 e0       	ldi	r31, 0x06	; 6
     784:	85 83       	std	Z+5, r24	; 0x05
     786:	08 95       	ret

00000788 <SPIInit>:
}

void SPIInit(uint8_t mode) {
	
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
     788:	e0 e4       	ldi	r30, 0x40	; 64
     78a:	f6 e0       	ldi	r31, 0x06	; 6
     78c:	90 e1       	ldi	r25, 0x10	; 16
     78e:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
     790:	28 e3       	ldi	r18, 0x38	; 56
     792:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
     794:	95 83       	std	Z+5, r25	; 0x05

	// init SPI
	SPIC.CTRL =	SPI_PRESCALER |  // set clock speed
     796:	81 65       	ori	r24, 0x51	; 81
     798:	a0 ec       	ldi	r26, 0xC0	; 192
     79a:	b8 e0       	ldi	r27, 0x08	; 8
     79c:	8c 93       	st	X, r24
	0x00 |  // set data order msb first
	SPI_MASTER_bm | // set SPI master
	mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	1c 92       	st	X, r1
     7a2:	11 97       	sbiw	r26, 0x01	; 1

	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
     7a4:	80 ea       	ldi	r24, 0xA0	; 160
     7a6:	81 83       	std	Z+1, r24	; 0x01

	
}
     7a8:	08 95       	ret

000007aa <SPIInit2>:

//use this if using a prescalar
void SPIInit2(uint8_t mode, uint8_t prescalar) {
	
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
     7aa:	e0 e4       	ldi	r30, 0x40	; 64
     7ac:	f6 e0       	ldi	r31, 0x06	; 6
     7ae:	90 e1       	ldi	r25, 0x10	; 16
     7b0:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
     7b2:	28 e3       	ldi	r18, 0x38	; 56
     7b4:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
     7b6:	95 83       	std	Z+5, r25	; 0x05
	

	// init SPI
	SPIC.CTRL =	prescalar |  // set clock speed
     7b8:	80 65       	ori	r24, 0x50	; 80
     7ba:	68 2b       	or	r22, r24
     7bc:	a0 ec       	ldi	r26, 0xC0	; 192
     7be:	b8 e0       	ldi	r27, 0x08	; 8
     7c0:	6c 93       	st	X, r22
	0x00 |  // set data order msb first
	SPI_MASTER_bm | // set SPI master
	mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     7c2:	11 96       	adiw	r26, 0x01	; 1
     7c4:	1c 92       	st	X, r1
     7c6:	11 97       	sbiw	r26, 0x01	; 1

	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	81 83       	std	Z+1, r24	; 0x01
}
     7cc:	08 95       	ret

000007ce <SPICS>:

void SPICS(uint8_t enable) {
	
	if (enable) PORTC.OUTCLR = PIN4_bm;
     7ce:	88 23       	and	r24, r24
     7d0:	29 f0       	breq	.+10     	; 0x7dc <SPICS+0xe>
     7d2:	80 e1       	ldi	r24, 0x10	; 16
     7d4:	e0 e4       	ldi	r30, 0x40	; 64
     7d6:	f6 e0       	ldi	r31, 0x06	; 6
     7d8:	86 83       	std	Z+6, r24	; 0x06
     7da:	08 95       	ret
	else {
		PORTC.OUTSET = PIN4_bm;
     7dc:	80 e1       	ldi	r24, 0x10	; 16
     7de:	e0 e4       	ldi	r30, 0x40	; 64
     7e0:	f6 e0       	ldi	r31, 0x06	; 6
     7e2:	85 83       	std	Z+5, r24	; 0x05
     7e4:	08 95       	ret

000007e6 <SPIDisable>:
	}
}

void SPIDisable() {
	
	PORTC.OUTSET = PIN4_bm;
     7e6:	e0 e4       	ldi	r30, 0x40	; 64
     7e8:	f6 e0       	ldi	r31, 0x06	; 6
     7ea:	80 e1       	ldi	r24, 0x10	; 16
     7ec:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
     7ee:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     7f2:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     7f4:	80 eb       	ldi	r24, 0xB0	; 176
     7f6:	82 83       	std	Z+2, r24	; 0x02

}
     7f8:	08 95       	ret

000007fa <set_filter>:
 *	filterConfig[2]	Channel 3 and 7 mask
 *	filterConfig[3]	Channel 4 and 8 mask
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
*/
void set_filter(uint8_t filterConfig) {
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
	// hack to get ADC to work
	//filterConfig |= 0x0F;

	// boolean flags for upper/lower channels CS
	uint8_t lowerCS = filterConfig & 0x03; 
     7fe:	c8 2f       	mov	r28, r24
     800:	c3 70       	andi	r28, 0x03	; 3
	uint8_t upperCS = filterConfig & 0x0C;
     802:	d8 2f       	mov	r29, r24
     804:	dc 70       	andi	r29, 0x0C	; 12

	// update left and right channel status
	if (filterConfig & (BIT0_bm | BIT2_bm)) channelStatus = 
     806:	28 2f       	mov	r18, r24
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	a9 01       	movw	r20, r18
     80c:	45 70       	andi	r20, 0x05	; 5
     80e:	50 70       	andi	r21, 0x00	; 0
     810:	41 15       	cp	r20, r1
     812:	51 05       	cpc	r21, r1
     814:	49 f0       	breq	.+18     	; 0x828 <set_filter+0x2e>
     816:	90 91 30 3e 	lds	r25, 0x3E30
     81a:	48 2f       	mov	r20, r24
     81c:	42 95       	swap	r20
     81e:	4f 70       	andi	r20, 0x0F	; 15
     820:	90 7f       	andi	r25, 0xF0	; 240
     822:	94 2b       	or	r25, r20
     824:	90 93 30 3e 	sts	0x3E30, r25
		(0xF0 & channelStatus) | (filterConfig >> 4);  //right
	if (filterConfig & (BIT1_bm | BIT3_bm)) channelStatus =
     828:	2a 70       	andi	r18, 0x0A	; 10
     82a:	30 70       	andi	r19, 0x00	; 0
     82c:	21 15       	cp	r18, r1
     82e:	31 05       	cpc	r19, r1
     830:	39 f0       	breq	.+14     	; 0x840 <set_filter+0x46>
     832:	90 91 30 3e 	lds	r25, 0x3E30
     836:	80 7f       	andi	r24, 0xF0	; 240
     838:	9f 70       	andi	r25, 0x0F	; 15
     83a:	89 2b       	or	r24, r25
     83c:	80 93 30 3e 	sts	0x3E30, r24
		(0xF0 & filterConfig) | (0x0F & channelStatus); //left
		
	SPIInit(SPI_MODE_1_gc);
     840:	84 e0       	ldi	r24, 0x04	; 4
     842:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>

	
	SPIBuffer[0] = channelStatus;
     846:	80 91 30 3e 	lds	r24, 0x3E30
     84a:	80 93 20 3e 	sts	0x3E20, r24
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
     84e:	cc 23       	and	r28, r28
     850:	19 f0       	breq	.+6      	; 0x858 <set_filter+0x5e>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 ac 03 	call	0x758	; 0x758 <lowerMuxCS>
	if (upperCS) upperMuxCS(TRUE);
     858:	dd 23       	and	r29, r29
     85a:	19 f0       	breq	.+6      	; 0x862 <set_filter+0x68>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	0e 94 b8 03 	call	0x770	; 0x770 <upperMuxCS>

	SPICS(TRUE);
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>

	// Send all logic high to ensure that the SDO line on the chip is
	// left in high Z state after SPI transaction.
	// The t-1 SDI transaction is output on the SDO and the pin left in the configuration.
	// of the last bit
	SPIC.DATA = 0xFF;
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	e0 ec       	ldi	r30, 0xC0	; 192
     86c:	f8 e0       	ldi	r31, 0x08	; 8
     86e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     870:	82 81       	ldd	r24, Z+2	; 0x02
     872:	88 23       	and	r24, r24
     874:	ec f7       	brge	.-6      	; 0x870 <set_filter+0x76>
	SPIBuffer[12] = SPIC.DATA;
     876:	e0 ec       	ldi	r30, 0xC0	; 192
     878:	f8 e0       	ldi	r31, 0x08	; 8
     87a:	83 81       	ldd	r24, Z+3	; 0x03
     87c:	80 93 2c 3e 	sts	0x3E2C, r24

	nop();
     880:	00 00       	nop

	SPIC.DATA = SPIBuffer[0];
     882:	ac e2       	ldi	r26, 0x2C	; 44
     884:	be e3       	ldi	r27, 0x3E	; 62
     886:	1c 97       	sbiw	r26, 0x0c	; 12
     888:	8c 91       	ld	r24, X
     88a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	88 23       	and	r24, r24
     890:	ec f7       	brge	.-6      	; 0x88c <set_filter+0x92>
	SPIBuffer[12] = SPIC.DATA;
     892:	e0 ec       	ldi	r30, 0xC0	; 192
     894:	f8 e0       	ldi	r31, 0x08	; 8
     896:	83 81       	ldd	r24, Z+3	; 0x03
     898:	80 93 2c 3e 	sts	0x3E2C, r24
	SPICS(FALSE);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>

	if (lowerCS) lowerMuxCS(FALSE);
     8a2:	cc 23       	and	r28, r28
     8a4:	19 f0       	breq	.+6      	; 0x8ac <set_filter+0xb2>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 ac 03 	call	0x758	; 0x758 <lowerMuxCS>
	if (upperCS) upperMuxCS(FALSE);
     8ac:	dd 23       	and	r29, r29
     8ae:	19 f0       	breq	.+6      	; 0x8b6 <set_filter+0xbc>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 b8 03 	call	0x770	; 0x770 <upperMuxCS>
	SPIDisable();
     8b6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <PortEx_OUTCLR>:
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	c8 2f       	mov	r28, r24
     8c6:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(TRUE);
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
     8da:	dd 23       	and	r29, r29
     8dc:	89 f0       	breq	.+34     	; 0x900 <PortEx_OUTCLR+0x40>
     8de:	80 91 ab 21 	lds	r24, 0x21AB
     8e2:	c0 95       	com	r28
     8e4:	c8 23       	and	r28, r24
     8e6:	c0 93 ab 21 	sts	0x21AB, r28
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
	
	SPIBuffer[0] = PS_WRITE;
     8ea:	80 e4       	ldi	r24, 0x40	; 64
     8ec:	80 93 20 3e 	sts	0x3E20, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
     8f0:	84 e1       	ldi	r24, 0x14	; 20
     8f2:	80 93 21 3e 	sts	0x3E21, r24
		SPIBuffer[2] = bankA_OUT;
     8f6:	80 91 ab 21 	lds	r24, 0x21AB
     8fa:	80 93 22 3e 	sts	0x3E22, r24
     8fe:	10 c0       	rjmp	.+32     	; 0x920 <PortEx_OUTCLR+0x60>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
     900:	80 91 31 3e 	lds	r24, 0x3E31
     904:	c0 95       	com	r28
     906:	c8 23       	and	r28, r24
     908:	c0 93 31 3e 	sts	0x3E31, r28
	
	SPIBuffer[0] = PS_WRITE;
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	80 93 20 3e 	sts	0x3E20, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
		SPIBuffer[2] = bankA_OUT;
	} else {
		SPIBuffer[1]=PS_OLATB;
     912:	85 e1       	ldi	r24, 0x15	; 21
     914:	80 93 21 3e 	sts	0x3E21, r24
		SPIBuffer[2] = bankB_OUT; 
     918:	80 91 31 3e 	lds	r24, 0x3E31
     91c:	80 93 22 3e 	sts	0x3E22, r24
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     924:	20 e2       	ldi	r18, 0x20	; 32
     926:	3e e3       	ldi	r19, 0x3E	; 62
     928:	a0 ec       	ldi	r26, 0xC0	; 192
     92a:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     92c:	cc e2       	ldi	r28, 0x2C	; 44
     92e:	de e3       	ldi	r29, 0x3E	; 62
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     930:	f9 01       	movw	r30, r18
     932:	e8 0f       	add	r30, r24
     934:	f9 1f       	adc	r31, r25
     936:	40 81       	ld	r20, Z
     938:	13 96       	adiw	r26, 0x03	; 3
     93a:	4c 93       	st	X, r20
     93c:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     93e:	12 96       	adiw	r26, 0x02	; 2
     940:	4c 91       	ld	r20, X
     942:	12 97       	sbiw	r26, 0x02	; 2
     944:	44 23       	and	r20, r20
     946:	dc f7       	brge	.-10     	; 0x93e <PortEx_OUTCLR+0x7e>
		SPIBuffer[12] = SPIC.DATA;
     948:	13 96       	adiw	r26, 0x03	; 3
     94a:	4c 91       	ld	r20, X
     94c:	13 97       	sbiw	r26, 0x03	; 3
     94e:	48 83       	st	Y, r20
     950:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	91 05       	cpc	r25, r1
     956:	61 f7       	brne	.-40     	; 0x930 <PortEx_OUTCLR+0x70>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(FALSE);
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	SPIDisable();
     964:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <PortEx_OUTSET>:
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	c8 2f       	mov	r28, r24
     974:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(TRUE);
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
     988:	dd 23       	and	r29, r29
     98a:	81 f0       	breq	.+32     	; 0x9ac <PortEx_OUTSET+0x3e>
     98c:	80 91 ab 21 	lds	r24, 0x21AB
     990:	c8 2b       	or	r28, r24
     992:	c0 93 ab 21 	sts	0x21AB, r28
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
	
	SPIBuffer[0] = PS_WRITE;
     996:	80 e4       	ldi	r24, 0x40	; 64
     998:	80 93 20 3e 	sts	0x3E20, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
     99c:	84 e1       	ldi	r24, 0x14	; 20
     99e:	80 93 21 3e 	sts	0x3E21, r24
		SPIBuffer[2] = bankA_OUT;
     9a2:	80 91 ab 21 	lds	r24, 0x21AB
     9a6:	80 93 22 3e 	sts	0x3E22, r24
     9aa:	0f c0       	rjmp	.+30     	; 0x9ca <PortEx_OUTSET+0x5c>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
     9ac:	80 91 31 3e 	lds	r24, 0x3E31
     9b0:	c8 2b       	or	r28, r24
     9b2:	c0 93 31 3e 	sts	0x3E31, r28
	
	SPIBuffer[0] = PS_WRITE;
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	80 93 20 3e 	sts	0x3E20, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
		SPIBuffer[2] = bankA_OUT;
	} else {
		SPIBuffer[1]=PS_OLATB;
     9bc:	85 e1       	ldi	r24, 0x15	; 21
     9be:	80 93 21 3e 	sts	0x3E21, r24
		SPIBuffer[2] = bankB_OUT; 
     9c2:	80 91 31 3e 	lds	r24, 0x3E31
     9c6:	80 93 22 3e 	sts	0x3E22, r24
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     9ce:	20 e2       	ldi	r18, 0x20	; 32
     9d0:	3e e3       	ldi	r19, 0x3E	; 62
     9d2:	a0 ec       	ldi	r26, 0xC0	; 192
     9d4:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     9d6:	cc e2       	ldi	r28, 0x2C	; 44
     9d8:	de e3       	ldi	r29, 0x3E	; 62
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     9da:	f9 01       	movw	r30, r18
     9dc:	e8 0f       	add	r30, r24
     9de:	f9 1f       	adc	r31, r25
     9e0:	40 81       	ld	r20, Z
     9e2:	13 96       	adiw	r26, 0x03	; 3
     9e4:	4c 93       	st	X, r20
     9e6:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     9e8:	12 96       	adiw	r26, 0x02	; 2
     9ea:	4c 91       	ld	r20, X
     9ec:	12 97       	sbiw	r26, 0x02	; 2
     9ee:	44 23       	and	r20, r20
     9f0:	dc f7       	brge	.-10     	; 0x9e8 <PortEx_OUTSET+0x7a>
		SPIBuffer[12] = SPIC.DATA;
     9f2:	13 96       	adiw	r26, 0x03	; 3
     9f4:	4c 91       	ld	r20, X
     9f6:	13 97       	sbiw	r26, 0x03	; 3
     9f8:	48 83       	st	Y, r20
     9fa:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     9fc:	83 30       	cpi	r24, 0x03	; 3
     9fe:	91 05       	cpc	r25, r1
     a00:	61 f7       	brne	.-40     	; 0x9da <PortEx_OUTSET+0x6c>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(FALSE);
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	SPIDisable();
     a0e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <PortEx_DIRCLR>:
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	c8 2f       	mov	r28, r24
     a1e:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(TRUE);
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
     a32:	dd 23       	and	r29, r29
     a34:	89 f0       	breq	.+34     	; 0xa58 <PortEx_DIRCLR+0x40>
     a36:	80 91 2f 3e 	lds	r24, 0x3E2F
     a3a:	80 95       	com	r24
     a3c:	c8 23       	and	r28, r24
     a3e:	c0 93 2f 3e 	sts	0x3E2F, r28
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
	
	SPIBuffer[0] = PS_WRITE;
     a42:	80 e4       	ldi	r24, 0x40	; 64
     a44:	80 93 20 3e 	sts	0x3E20, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
     a48:	10 92 21 3e 	sts	0x3E21, r1
		SPIBuffer[2] = ~bankA_DIR; 
     a4c:	80 91 2f 3e 	lds	r24, 0x3E2F
     a50:	80 95       	com	r24
     a52:	80 93 22 3e 	sts	0x3E22, r24
     a56:	11 c0       	rjmp	.+34     	; 0xa7a <PortEx_DIRCLR+0x62>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
     a58:	80 91 46 3e 	lds	r24, 0x3E46
     a5c:	80 95       	com	r24
     a5e:	c8 23       	and	r28, r24
     a60:	c0 93 46 3e 	sts	0x3E46, r28
	
	SPIBuffer[0] = PS_WRITE;
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	80 93 20 3e 	sts	0x3E20, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
		SPIBuffer[2] = ~bankA_DIR; 
	} else {
		SPIBuffer[1]=PS_IODIRB;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 21 3e 	sts	0x3E21, r24
		SPIBuffer[2] = ~bankB_DIR;
     a70:	80 91 46 3e 	lds	r24, 0x3E46
     a74:	80 95       	com	r24
     a76:	80 93 22 3e 	sts	0x3E22, r24
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     a7e:	20 e2       	ldi	r18, 0x20	; 32
     a80:	3e e3       	ldi	r19, 0x3E	; 62
     a82:	a0 ec       	ldi	r26, 0xC0	; 192
     a84:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     a86:	cc e2       	ldi	r28, 0x2C	; 44
     a88:	de e3       	ldi	r29, 0x3E	; 62
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     a8a:	f9 01       	movw	r30, r18
     a8c:	e8 0f       	add	r30, r24
     a8e:	f9 1f       	adc	r31, r25
     a90:	40 81       	ld	r20, Z
     a92:	13 96       	adiw	r26, 0x03	; 3
     a94:	4c 93       	st	X, r20
     a96:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     a98:	12 96       	adiw	r26, 0x02	; 2
     a9a:	4c 91       	ld	r20, X
     a9c:	12 97       	sbiw	r26, 0x02	; 2
     a9e:	44 23       	and	r20, r20
     aa0:	dc f7       	brge	.-10     	; 0xa98 <PortEx_DIRCLR+0x80>
		SPIBuffer[12] = SPIC.DATA;
     aa2:	13 96       	adiw	r26, 0x03	; 3
     aa4:	4c 91       	ld	r20, X
     aa6:	13 97       	sbiw	r26, 0x03	; 3
     aa8:	48 83       	st	Y, r20
     aaa:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     aac:	83 30       	cpi	r24, 0x03	; 3
     aae:	91 05       	cpc	r25, r1
     ab0:	61 f7       	brne	.-40     	; 0xa8a <PortEx_DIRCLR+0x72>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(FALSE);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	SPIDisable();
     abe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <PortEx_DIRSET>:
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	c8 2f       	mov	r28, r24
     ace:	d6 2f       	mov	r29, r22
	SPIInit(PS_SPI_MODE);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(TRUE);
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
     ae2:	dd 23       	and	r29, r29
     ae4:	81 f0       	breq	.+32     	; 0xb06 <PortEx_DIRSET+0x3e>
     ae6:	80 91 2f 3e 	lds	r24, 0x3E2F
     aea:	c8 2b       	or	r28, r24
     aec:	c0 93 2f 3e 	sts	0x3E2F, r28
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
	
	SPIBuffer[0] = PS_WRITE;
     af0:	80 e4       	ldi	r24, 0x40	; 64
     af2:	80 93 20 3e 	sts	0x3E20, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
     af6:	10 92 21 3e 	sts	0x3E21, r1
		SPIBuffer[2] = ~bankA_DIR; 
     afa:	80 91 2f 3e 	lds	r24, 0x3E2F
     afe:	80 95       	com	r24
     b00:	80 93 22 3e 	sts	0x3E22, r24
     b04:	10 c0       	rjmp	.+32     	; 0xb26 <PortEx_DIRSET+0x5e>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
     b06:	80 91 46 3e 	lds	r24, 0x3E46
     b0a:	c8 2b       	or	r28, r24
     b0c:	c0 93 46 3e 	sts	0x3E46, r28
	
	SPIBuffer[0] = PS_WRITE;
     b10:	80 e4       	ldi	r24, 0x40	; 64
     b12:	80 93 20 3e 	sts	0x3E20, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
		SPIBuffer[2] = ~bankA_DIR; 
	} else {
		SPIBuffer[1]=PS_IODIRB;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 21 3e 	sts	0x3E21, r24
		SPIBuffer[2] = ~bankB_DIR;
     b1c:	80 91 46 3e 	lds	r24, 0x3E46
     b20:	80 95       	com	r24
     b22:	80 93 22 3e 	sts	0x3E22, r24
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     b2a:	20 e2       	ldi	r18, 0x20	; 32
     b2c:	3e e3       	ldi	r19, 0x3E	; 62
     b2e:	a0 ec       	ldi	r26, 0xC0	; 192
     b30:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
     b32:	cc e2       	ldi	r28, 0x2C	; 44
     b34:	de e3       	ldi	r29, 0x3E	; 62
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     b36:	f9 01       	movw	r30, r18
     b38:	e8 0f       	add	r30, r24
     b3a:	f9 1f       	adc	r31, r25
     b3c:	40 81       	ld	r20, Z
     b3e:	13 96       	adiw	r26, 0x03	; 3
     b40:	4c 93       	st	X, r20
     b42:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
     b44:	12 96       	adiw	r26, 0x02	; 2
     b46:	4c 91       	ld	r20, X
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	44 23       	and	r20, r20
     b4c:	dc f7       	brge	.-10     	; 0xb44 <PortEx_DIRSET+0x7c>
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
     b4e:	13 96       	adiw	r26, 0x03	; 3
     b50:	4c 91       	ld	r20, X
     b52:	13 97       	sbiw	r26, 0x03	; 3
     b54:	48 83       	st	Y, r20
     b56:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     b58:	83 30       	cpi	r24, 0x03	; 3
     b5a:	91 05       	cpc	r25, r1
     b5c:	61 f7       	brne	.-40     	; 0xb36 <PortEx_DIRSET+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
	}

	portExCS(FALSE);
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	SPICS(FALSE);
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
     b6a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>


}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <ADCPower>:
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
	else PORTC.OUTSET = PIN1_bm;
}

void ADCPower(uint8_t on) {
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
	
	if (on && !ADC_POWER_ON) {
     b7c:	88 23       	and	r24, r24
     b7e:	09 f4       	brne	.+2      	; 0xb82 <ADCPower+0xe>
     b80:	4e c0       	rjmp	.+156    	; 0xc1e <ADCPower+0xaa>
     b82:	80 91 32 3e 	lds	r24, 0x3E32
     b86:	88 23       	and	r24, r24
     b88:	09 f0       	breq	.+2      	; 0xb8c <ADCPower+0x18>
     b8a:	81 c0       	rjmp	.+258    	; 0xc8e <ADCPower+0x11a>
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
     b8c:	00 e0       	ldi	r16, 0x00	; 0
     b8e:	16 e0       	ldi	r17, 0x06	; 6
     b90:	8e ed       	ldi	r24, 0xDE	; 222
     b92:	d8 01       	movw	r26, r16
     b94:	11 96       	adiw	r26, 0x01	; 1
     b96:	8c 93       	st	X, r24
		PORTB.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     b98:	c0 e2       	ldi	r28, 0x20	; 32
     b9a:	d6 e0       	ldi	r29, 0x06	; 6
     b9c:	4e e0       	ldi	r20, 0x0E	; 14
     b9e:	49 83       	std	Y+1, r20	; 0x01
		PORTC.DIRSET = PIN0_bm | PIN1_bm;// VDCA and VDC-2 and MUX-SYNC1
     ba0:	e0 e4       	ldi	r30, 0x40	; 64
     ba2:	f6 e0       	ldi	r31, 0x06	; 6
     ba4:	63 e0       	ldi	r22, 0x03	; 3
     ba6:	61 83       	std	Z+1, r22	; 0x01
		PORTE.DIRSET = PIN4_bm; // MUX-SYNC2
     ba8:	80 e8       	ldi	r24, 0x80	; 128
     baa:	96 e0       	ldi	r25, 0x06	; 6
     bac:	50 e1       	ldi	r21, 0x10	; 16
     bae:	dc 01       	movw	r26, r24
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	5c 93       	st	X, r21
		PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; // DAC LDAC and CS
     bb4:	20 ea       	ldi	r18, 0xA0	; 160
     bb6:	36 e0       	ldi	r19, 0x06	; 6
     bb8:	d9 01       	movw	r26, r18
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	4c 93       	st	X, r20

		// high signal to write protect
		PORTA.OUTSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm; // portEx-CS
     bbe:	7e e9       	ldi	r23, 0x9E	; 158
     bc0:	d8 01       	movw	r26, r16
     bc2:	15 96       	adiw	r26, 0x05	; 5
     bc4:	7c 93       	st	X, r23
		PORTB.OUTSET = PIN3_bm; // FRAM-CS
     bc6:	78 e0       	ldi	r23, 0x08	; 8
     bc8:	7d 83       	std	Y+5, r23	; 0x05
		PORTC.OUTSET = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     bca:	65 83       	std	Z+5, r22	; 0x05
		PORTE.OUTSET = PIN4_bm; // MUX-SYNC2
     bcc:	ec 01       	movw	r28, r24
     bce:	5d 83       	std	Y+5, r21	; 0x05
		PORTF.OUTSET = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     bd0:	d9 01       	movw	r26, r18
     bd2:	15 96       	adiw	r26, 0x05	; 5
     bd4:	4c 93       	st	X, r20
		channelStatus = 0x00; // POR to zeros
     bd6:	10 92 30 3e 	sts	0x3E30, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	93 ec       	ldi	r25, 0xC3	; 195
     bde:	a9 e0       	ldi	r26, 0x09	; 9
     be0:	81 50       	subi	r24, 0x01	; 1
     be2:	90 40       	sbci	r25, 0x00	; 0
     be4:	a0 40       	sbci	r26, 0x00	; 0
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <ADCPower+0x6c>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <ADCPower+0x76>
     bea:	00 00       	nop
		_delay_ms(100);

		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     bec:	80 e4       	ldi	r24, 0x40	; 64
     bee:	82 83       	std	Z+2, r24	; 0x02
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     bf0:	10 92 31 3e 	sts	0x3E31, r1
     bf4:	10 92 46 3e 	sts	0x3E46, r1
     bf8:	10 92 ab 21 	sts	0x21AB, r1
     bfc:	10 92 2f 3e 	sts	0x3E2F, r1
		PortEx_DIRSET(0xFF, PS_BANKA);
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
		PortEx_OUTSET(0xFF, PS_BANKA);  //write protect IN-AMP 1 thru 8
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
		//setPortEx(0xFF, PS_BANKA);
		set_filter(0xFF);  // set filters initially to ensure data out pulled high
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
		ADC_POWER_ON = TRUE;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 32 3e 	sts	0x3E32, r24
     c1c:	38 c0       	rjmp	.+112    	; 0xc8e <ADCPower+0x11a>

	} else if(!on && ADC_POWER_ON) {
     c1e:	80 91 32 3e 	lds	r24, 0x3E32
     c22:	88 23       	and	r24, r24
     c24:	a1 f1       	breq	.+104    	; 0xc8e <ADCPower+0x11a>
		// low signal for low power
		PORTA.OUTCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and A0
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	16 e0       	ldi	r17, 0x06	; 6
     c2a:	7e ed       	ldi	r23, 0xDE	; 222
     c2c:	d8 01       	movw	r26, r16
     c2e:	16 96       	adiw	r26, 0x06	; 6
     c30:	7c 93       	st	X, r23
		PORTB.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     c32:	a0 e2       	ldi	r26, 0x20	; 32
     c34:	b6 e0       	ldi	r27, 0x06	; 6
     c36:	4e e0       	ldi	r20, 0x0E	; 14
     c38:	16 96       	adiw	r26, 0x06	; 6
     c3a:	4c 93       	st	X, r20
     c3c:	16 97       	sbiw	r26, 0x06	; 6
		PORTC.OUTCLR = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     c3e:	20 e4       	ldi	r18, 0x40	; 64
     c40:	36 e0       	ldi	r19, 0x06	; 6
     c42:	63 e0       	ldi	r22, 0x03	; 3
     c44:	e9 01       	movw	r28, r18
     c46:	6e 83       	std	Y+6, r22	; 0x06
		PORTE.OUTCLR = PIN4_bm; // MUX-SYNC2
     c48:	c0 e8       	ldi	r28, 0x80	; 128
     c4a:	d6 e0       	ldi	r29, 0x06	; 6
     c4c:	50 e1       	ldi	r21, 0x10	; 16
     c4e:	5e 83       	std	Y+6, r21	; 0x06
		PORTF.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     c50:	80 ea       	ldi	r24, 0xA0	; 160
     c52:	96 e0       	ldi	r25, 0x06	; 6
     c54:	fc 01       	movw	r30, r24
     c56:	46 83       	std	Z+6, r20	; 0x06


		PORTA.DIRCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm | PIN6_bm;
     c58:	f8 01       	movw	r30, r16
     c5a:	72 83       	std	Z+2, r23	; 0x02
		PORTB.DIRCLR = PIN1_bm | PIN2_bm| PIN3_bm;
     c5c:	12 96       	adiw	r26, 0x02	; 2
     c5e:	4c 93       	st	X, r20
		PORTC.DIRCLR = PIN0_bm | PIN1_bm;
     c60:	d9 01       	movw	r26, r18
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	6c 93       	st	X, r22
     c66:	12 97       	sbiw	r26, 0x02	; 2
		PORTE.DIRCLR = PIN4_bm;
     c68:	5a 83       	std	Y+2, r21	; 0x02
		PORTF.DIRCLR = PIN1_bm | PIN2_bm | PIN3_bm;
     c6a:	ec 01       	movw	r28, r24
     c6c:	4a 83       	std	Y+2, r20	; 0x02
		
		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     c6e:	80 e4       	ldi	r24, 0x40	; 64
     c70:	12 96       	adiw	r26, 0x02	; 2
     c72:	8c 93       	st	X, r24
     c74:	12 97       	sbiw	r26, 0x02	; 2
		
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     c76:	10 92 31 3e 	sts	0x3E31, r1
     c7a:	10 92 46 3e 	sts	0x3E46, r1
     c7e:	10 92 ab 21 	sts	0x21AB, r1
     c82:	10 92 2f 3e 	sts	0x3E2F, r1
		channelStatus = 0x00;
     c86:	10 92 30 3e 	sts	0x3E30, r1
		ADC_POWER_ON = FALSE;
     c8a:	10 92 32 3e 	sts	0x3E32, r1
	}
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <DeciToString>:
	PORTC.OUTCLR = PIN4_bm;
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;

}

void DeciToString(int32_t* DecimalArray, uint32_t length, char* ReturnString){
     c98:	2f 92       	push	r2
     c9a:	3f 92       	push	r3
     c9c:	4f 92       	push	r4
     c9e:	5f 92       	push	r5
     ca0:	6f 92       	push	r6
     ca2:	7f 92       	push	r7
     ca4:	8f 92       	push	r8
     ca6:	9f 92       	push	r9
     ca8:	af 92       	push	r10
     caa:	bf 92       	push	r11
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	64 97       	sbiw	r28, 0x14	; 20
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	2a 01       	movw	r4, r20
     cc8:	3b 01       	movw	r6, r22
     cca:	89 01       	movw	r16, r18
	char b[20];
	//int written;
	uint32_t i;
	ReturnString[0] = 0;
     ccc:	f9 01       	movw	r30, r18
     cce:	10 82       	st	Z, r1
	for(i=0;i<length;i++){
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <DeciToString+0x44>
     cda:	4d c0       	rjmp	.+154    	; 0xd76 <DeciToString+0xde>
     cdc:	88 2e       	mov	r8, r24
     cde:	99 2e       	mov	r9, r25
     ce0:	cc 24       	eor	r12, r12
     ce2:	dd 24       	eor	r13, r13
     ce4:	76 01       	movw	r14, r12
		//written = sprintf(b,"%ld",DecimalArray[i]);
		sprintf(b,"%ld",DecimalArray[i]);
     ce6:	5e 01       	movw	r10, r28
     ce8:	08 94       	sec
     cea:	a1 1c       	adc	r10, r1
     cec:	b1 1c       	adc	r11, r1
     cee:	0f 2e       	mov	r0, r31
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	2f 2e       	mov	r2, r31
     cf4:	f0 e2       	ldi	r31, 0x20	; 32
     cf6:	3f 2e       	mov	r3, r31
     cf8:	f0 2d       	mov	r31, r0
     cfa:	f4 01       	movw	r30, r8
     cfc:	81 91       	ld	r24, Z+
     cfe:	91 91       	ld	r25, Z+
     d00:	a1 91       	ld	r26, Z+
     d02:	b1 91       	ld	r27, Z+
     d04:	4f 01       	movw	r8, r30
     d06:	2d b7       	in	r18, 0x3d	; 61
     d08:	3e b7       	in	r19, 0x3e	; 62
     d0a:	28 50       	subi	r18, 0x08	; 8
     d0c:	30 40       	sbci	r19, 0x00	; 0
     d0e:	2d bf       	out	0x3d, r18	; 61
     d10:	3e bf       	out	0x3e, r19	; 62
     d12:	2f 5f       	subi	r18, 0xFF	; 255
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	ed b7       	in	r30, 0x3d	; 61
     d18:	fe b7       	in	r31, 0x3e	; 62
     d1a:	a1 82       	std	Z+1, r10	; 0x01
     d1c:	b2 82       	std	Z+2, r11	; 0x02
     d1e:	f9 01       	movw	r30, r18
     d20:	22 82       	std	Z+2, r2	; 0x02
     d22:	33 82       	std	Z+3, r3	; 0x03
     d24:	84 83       	std	Z+4, r24	; 0x04
     d26:	95 83       	std	Z+5, r25	; 0x05
     d28:	a6 83       	std	Z+6, r26	; 0x06
     d2a:	b7 83       	std	Z+7, r27	; 0x07
     d2c:	0e 94 05 38 	call	0x700a	; 0x700a <sprintf>
		strcat(ReturnString,b);
     d30:	2d b7       	in	r18, 0x3d	; 61
     d32:	3e b7       	in	r19, 0x3e	; 62
     d34:	28 5f       	subi	r18, 0xF8	; 248
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	2d bf       	out	0x3d, r18	; 61
     d3a:	3e bf       	out	0x3e, r19	; 62
     d3c:	c8 01       	movw	r24, r16
     d3e:	b5 01       	movw	r22, r10
     d40:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <strcat>
		//add a space between each value
		strcat(ReturnString,"\n");
     d44:	a0 2f       	mov	r26, r16
     d46:	b1 2f       	mov	r27, r17
     d48:	fd 01       	movw	r30, r26
     d4a:	01 90       	ld	r0, Z+
     d4c:	00 20       	and	r0, r0
     d4e:	e9 f7       	brne	.-6      	; 0xd4a <DeciToString+0xb2>
     d50:	31 97       	sbiw	r30, 0x01	; 1
     d52:	ea 1b       	sub	r30, r26
     d54:	fb 0b       	sbc	r31, r27
     d56:	e0 0f       	add	r30, r16
     d58:	f1 1f       	adc	r31, r17
     d5a:	8a e0       	ldi	r24, 0x0A	; 10
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	80 83       	st	Z, r24
     d60:	91 83       	std	Z+1, r25	; 0x01
void DeciToString(int32_t* DecimalArray, uint32_t length, char* ReturnString){
	char b[20];
	//int written;
	uint32_t i;
	ReturnString[0] = 0;
	for(i=0;i<length;i++){
     d62:	08 94       	sec
     d64:	c1 1c       	adc	r12, r1
     d66:	d1 1c       	adc	r13, r1
     d68:	e1 1c       	adc	r14, r1
     d6a:	f1 1c       	adc	r15, r1
     d6c:	c4 14       	cp	r12, r4
     d6e:	d5 04       	cpc	r13, r5
     d70:	e6 04       	cpc	r14, r6
     d72:	f7 04       	cpc	r15, r7
     d74:	11 f6       	brne	.-124    	; 0xcfa <DeciToString+0x62>
		sprintf(b,"%ld",DecimalArray[i]);
		strcat(ReturnString,b);
		//add a space between each value
		strcat(ReturnString,"\n");
	}
}
     d76:	64 96       	adiw	r28, 0x14	; 20
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	9f 90       	pop	r9
     d92:	8f 90       	pop	r8
     d94:	7f 90       	pop	r7
     d96:	6f 90       	pop	r6
     d98:	5f 90       	pop	r5
     d9a:	4f 90       	pop	r4
     d9c:	3f 90       	pop	r3
     d9e:	2f 90       	pop	r2
     da0:	08 95       	ret

00000da2 <SPI_write>:

//the following command writes/reads a byte via spi
uint8_t SPI_write(uint8_t byteToSend){
	uint8_t data;
	SPIC.DATA = byteToSend;
     da2:	e0 ec       	ldi	r30, 0xC0	; 192
     da4:	f8 e0       	ldi	r31, 0x08	; 8
     da6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	88 23       	and	r24, r24
     dac:	ec f7       	brge	.-6      	; 0xda8 <SPI_write+0x6>
	data = SPIC.DATA; //read SPI data register to reset status flag
     dae:	e0 ec       	ldi	r30, 0xC0	; 192
     db0:	f8 e0       	ldi	r31, 0x08	; 8
     db2:	83 81       	ldd	r24, Z+3	; 0x03
	return data;
     db4:	08 95       	ret

00000db6 <main>:
 * Created: 3/8/2014 8:19:11 PM
 *  Author: VLAD
 */ 
#include "E-000001-000009_firmware_rev_1_0.h"

int main(){
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
		FRAMReadBuffer[200+i] = i*2;
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[400+i] = i*3;
	}
	for(int i=0; i<200; i++){
     dba:	cc ea       	ldi	r28, 0xAC	; 172
     dbc:	d1 e2       	ldi	r29, 0x21	; 33
 * Created: 3/8/2014 8:19:11 PM
 *  Author: VLAD
 */ 
#include "E-000001-000009_firmware_rev_1_0.h"

int main(){
     dbe:	fe 01       	movw	r30, r28
     dc0:	80 e0       	ldi	r24, 0x00	; 0
	
	for(int i=0; i<200; i++){
		FRAMReadBuffer[i] = i;
     dc2:	81 93       	st	Z+, r24
     dc4:	8f 5f       	subi	r24, 0xFF	; 255
 */ 
#include "E-000001-000009_firmware_rev_1_0.h"

int main(){
	
	for(int i=0; i<200; i++){
     dc6:	88 3c       	cpi	r24, 0xC8	; 200
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <main+0xc>
     dca:	e4 e7       	ldi	r30, 0x74	; 116
     dcc:	f2 e2       	ldi	r31, 0x22	; 34
 * Created: 3/8/2014 8:19:11 PM
 *  Author: VLAD
 */ 
#include "E-000001-000009_firmware_rev_1_0.h"

int main(){
     dce:	8c e3       	ldi	r24, 0x3C	; 60
     dd0:	93 e2       	ldi	r25, 0x23	; 35
     dd2:	20 e0       	ldi	r18, 0x00	; 0
	
	for(int i=0; i<200; i++){
		FRAMReadBuffer[i] = i;
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[200+i] = i*2;
     dd4:	21 93       	st	Z+, r18
     dd6:	2e 5f       	subi	r18, 0xFE	; 254
int main(){
	
	for(int i=0; i<200; i++){
		FRAMReadBuffer[i] = i;
	}
	for(int i=0; i<200; i++){
     dd8:	e8 17       	cp	r30, r24
     dda:	f9 07       	cpc	r31, r25
     ddc:	d9 f7       	brne	.-10     	; 0xdd4 <main+0x1e>
     dde:	ec e3       	ldi	r30, 0x3C	; 60
     de0:	f3 e2       	ldi	r31, 0x23	; 35
     de2:	80 e0       	ldi	r24, 0x00	; 0
		FRAMReadBuffer[200+i] = i*2;
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[400+i] = i*3;
     de4:	81 93       	st	Z+, r24
     de6:	8d 5f       	subi	r24, 0xFD	; 253
		FRAMReadBuffer[i] = i;
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[200+i] = i*2;
	}
	for(int i=0; i<200; i++){
     de8:	88 35       	cpi	r24, 0x58	; 88
     dea:	e1 f7       	brne	.-8      	; 0xde4 <main+0x2e>
     dec:	e4 e0       	ldi	r30, 0x04	; 4
     dee:	f4 e2       	ldi	r31, 0x24	; 36
 * Created: 3/8/2014 8:19:11 PM
 *  Author: VLAD
 */ 
#include "E-000001-000009_firmware_rev_1_0.h"

int main(){
     df0:	8c ec       	ldi	r24, 0xCC	; 204
     df2:	94 e2       	ldi	r25, 0x24	; 36
     df4:	20 e0       	ldi	r18, 0x00	; 0
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[400+i] = i*3;
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[600+i] = i*4;
     df6:	21 93       	st	Z+, r18
     df8:	2c 5f       	subi	r18, 0xFC	; 252
		FRAMReadBuffer[200+i] = i*2;
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[400+i] = i*3;
	}
	for(int i=0; i<200; i++){
     dfa:	e8 17       	cp	r30, r24
     dfc:	f9 07       	cpc	r31, r25
     dfe:	d9 f7       	brne	.-10     	; 0xdf6 <main+0x40>
     e00:	ec ec       	ldi	r30, 0xCC	; 204
     e02:	f4 e2       	ldi	r31, 0x24	; 36
     e04:	80 e0       	ldi	r24, 0x00	; 0
		FRAMReadBuffer[600+i] = i*4;
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[800+i] = i*5;
     e06:	81 93       	st	Z+, r24
     e08:	8b 5f       	subi	r24, 0xFB	; 251
		FRAMReadBuffer[400+i] = i*3;
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[600+i] = i*4;
	}
	for(int i=0; i<200; i++){
     e0a:	88 3e       	cpi	r24, 0xE8	; 232
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <main+0x50>
		FRAMReadBuffer[800+i] = i*5;
	}
	writeFRAM(FRAMReadBuffer, 1000);
     e0e:	8c ea       	ldi	r24, 0xAC	; 172
     e10:	91 e2       	ldi	r25, 0x21	; 33
     e12:	68 ee       	ldi	r22, 0xE8	; 232
     e14:	73 e0       	ldi	r23, 0x03	; 3
     e16:	0e 94 39 01 	call	0x272	; 0x272 <writeFRAM>
 * Created: 3/8/2014 8:19:11 PM
 *  Author: VLAD
 */ 
#include "E-000001-000009_firmware_rev_1_0.h"

int main(){
     e1a:	84 e9       	ldi	r24, 0x94	; 148
     e1c:	95 e2       	ldi	r25, 0x25	; 37
	for(int i=0; i<200; i++){
		FRAMReadBuffer[800+i] = i*5;
	}
	writeFRAM(FRAMReadBuffer, 1000);
	for(int i=0; i<1000; i++){
		FRAMReadBuffer[i] = 0;
     e1e:	19 92       	st	Y+, r1
	}
	for(int i=0; i<200; i++){
		FRAMReadBuffer[800+i] = i*5;
	}
	writeFRAM(FRAMReadBuffer, 1000);
	for(int i=0; i<1000; i++){
     e20:	c8 17       	cp	r28, r24
     e22:	d9 07       	cpc	r29, r25
     e24:	e1 f7       	brne	.-8      	; 0xe1e <main+0x68>
		FRAMReadBuffer[i] = 0;
	}
	nop();
     e26:	00 00       	nop
	readFRAM(1000, 0);
     e28:	88 ee       	ldi	r24, 0xE8	; 232
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	0e 94 cd 01 	call	0x39a	; 0x39a <readFRAM>
	nop();
     e34:	00 00       	nop
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <synch>:
#include "E-000001-000009_firmware_rev_1_0.h"


char buff[8];
//creates a system for syncing ADC sampling with other motes through the base station every SynchPer seconds
void synch(int SynchPer){
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	8c 01       	movw	r16, r24
	moteID = 1;
     e48:	c1 e0       	ldi	r28, 0x01	; 1
     e4a:	c0 93 45 3e 	sts	0x3E45, r28
	RadioMonitorMode = SYNCHED;		//initialize the RadioMonitorMode to synched 
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	80 93 1f 3e 	sts	0x3E1F, r24
	chb_init();
     e54:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <chb_init>
	chb_set_short_addr(moteID);
     e58:	80 91 45 3e 	lds	r24, 0x3E45
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 f5 19 	call	0x33ea	; 0x33ea <chb_set_short_addr>
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC1_OVF_gc;	//set overflow of lower 16 bits of the counter as event on channel 1
     e62:	88 ec       	ldi	r24, 0xC8	; 200
     e64:	e0 e8       	ldi	r30, 0x80	; 128
     e66:	f1 e0       	ldi	r31, 0x01	; 1
     e68:	81 83       	std	Z+1, r24	; 0x01
	TCD1.CTRLA = TC_CLKSEL_EVCH1_gc; //select event channel 1 as input clock to the upper 16 bits of the counter
     e6a:	e0 e4       	ldi	r30, 0x40	; 64
     e6c:	f9 e0       	ldi	r31, 0x09	; 9
     e6e:	89 e0       	ldi	r24, 0x09	; 9
     e70:	80 83       	st	Z, r24
	TCD1.INTCTRLA = 0x02;	//enable timer overflow interrupt as high priority interrupt
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	86 83       	std	Z+6, r24	; 0x06
	TCD1.PER = SynchPer*500; //upper 16 bits of the 32-bit joint timer
     e76:	24 ef       	ldi	r18, 0xF4	; 244
     e78:	31 e0       	ldi	r19, 0x01	; 1
     e7a:	02 9f       	mul	r16, r18
     e7c:	c0 01       	movw	r24, r0
     e7e:	03 9f       	mul	r16, r19
     e80:	90 0d       	add	r25, r0
     e82:	12 9f       	mul	r17, r18
     e84:	90 0d       	add	r25, r0
     e86:	11 24       	eor	r1, r1
     e88:	86 a3       	lds	r24, 0x56
     e8a:	97 a3       	lds	r25, 0x57
		
	TCC1.PER = 64000;	//64000 cycles of cpu at 32MHz equals one 500 Hz interval
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f8 e0       	ldi	r31, 0x08	; 8
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	9a ef       	ldi	r25, 0xFA	; 250
     e94:	86 a3       	lds	r24, 0x56
     e96:	97 a3       	lds	r25, 0x57
	TCC1.INTCTRLA = 0x01;  //enable timer overflow interrupt as medium priority interrupt
     e98:	c6 83       	std	Z+6, r28	; 0x06
	TCC1.CTRLA = 0x01;  //start timer with clock precision of cpu clock (32MHz)
     e9a:	c0 83       	st	Z, r28
	PMIC.CTRL |= ENABLE_ALL_INTERRUPT_LEVELS;
     e9c:	e0 ea       	ldi	r30, 0xA0	; 160
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	87 60       	ori	r24, 0x07	; 7
     ea4:	82 83       	std	Z+2, r24	; 0x02
	sei(); //  Enable global interrupts
     ea6:	78 94       	sei
}
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <__vector_83>:

ISR(TCD1_OVF_vect, ISR_NOBLOCK) {
     eb0:	78 94       	sei
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	0b b6       	in	r0, 0x3b	; 59
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	7f 93       	push	r23
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
     edc:	ef 93       	push	r30
     ede:	ff 93       	push	r31
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	28 97       	sbiw	r28, 0x08	; 8
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	de bf       	out	0x3e, r29	; 62
	TCC1.CTRLA = 0x00; //turn off the counter while synching
     eee:	10 92 40 08 	sts	0x0840, r1
	TCD1.CTRLA = 0x00;
     ef2:	10 92 40 09 	sts	0x0940, r1
	//TCC1.CTRLFSET = 0x0C;	//reset the value of the counter to 0
	//TCD1.CTRLFSET = 0x0C;
	RadioMonitorMode = TIME_SYNCH;
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	80 93 1f 3e 	sts	0x3E1F, r24
	char message[8];
	strcpy(message,"reset");
     efc:	de 01       	movw	r26, r28
     efe:	11 96       	adiw	r26, 0x01	; 1
     f00:	e4 e0       	ldi	r30, 0x04	; 4
     f02:	f0 e2       	ldi	r31, 0x20	; 32
     f04:	86 e0       	ldi	r24, 0x06	; 6
     f06:	01 90       	ld	r0, Z+
     f08:	0d 92       	st	X+, r0
     f0a:	81 50       	subi	r24, 0x01	; 1
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <__vector_83+0x56>
	itoa((int)(moteID),buff,10);
     f0e:	09 ea       	ldi	r16, 0xA9	; 169
     f10:	10 e5       	ldi	r17, 0x50	; 80
     f12:	80 91 45 3e 	lds	r24, 0x3E45
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	b8 01       	movw	r22, r16
     f1a:	4a e0       	ldi	r20, 0x0A	; 10
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	0e 94 d2 37 	call	0x6fa4	; 0x6fa4 <itoa>
	strcat(message,buff);
     f22:	7e 01       	movw	r14, r28
     f24:	08 94       	sec
     f26:	e1 1c       	adc	r14, r1
     f28:	f1 1c       	adc	r15, r1
     f2a:	c7 01       	movw	r24, r14
     f2c:	b8 01       	movw	r22, r16
     f2e:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <strcat>
	ADC_Pause_Sampling();	//pause the ADC while synching
     f32:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <ADC_Pause_Sampling>
	chb_write(0x0000,(unsigned char*)message,strlen(message));
     f36:	f7 01       	movw	r30, r14
     f38:	01 90       	ld	r0, Z+
     f3a:	00 20       	and	r0, r0
     f3c:	e9 f7       	brne	.-6      	; 0xf38 <__vector_83+0x88>
     f3e:	31 97       	sbiw	r30, 0x01	; 1
     f40:	ee 19       	sub	r30, r14
     f42:	ff 09       	sbc	r31, r15
     f44:	9f 01       	movw	r18, r30
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	b7 01       	movw	r22, r14
     f50:	0e 94 f6 17 	call	0x2fec	; 0x2fec <chb_write>
}	
     f54:	28 96       	adiw	r28, 0x08	; 8
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	ff 91       	pop	r31
     f60:	ef 91       	pop	r30
     f62:	bf 91       	pop	r27
     f64:	af 91       	pop	r26
     f66:	9f 91       	pop	r25
     f68:	8f 91       	pop	r24
     f6a:	7f 91       	pop	r23
     f6c:	6f 91       	pop	r22
     f6e:	5f 91       	pop	r21
     f70:	4f 91       	pop	r20
     f72:	3f 91       	pop	r19
     f74:	2f 91       	pop	r18
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	0f 90       	pop	r0
     f80:	0b be       	out	0x3b, r0	; 59
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <CO_collectTemp>:

volatile uint8_t checksumADC[3] = {0};  // checksum for FRAM test
volatile uint8_t checksumFRAM[3] = {0};  // checksum for FRAM test


void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
     f8c:	4f 92       	push	r4
     f8e:	5f 92       	push	r5
     f90:	6f 92       	push	r6
     f92:	7f 92       	push	r7
     f94:	8f 92       	push	r8
     f96:	9f 92       	push	r9
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	2b 97       	sbiw	r28, 0x0b	; 11
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	8e 83       	std	Y+6, r24	; 0x06
     fb4:	9f 83       	std	Y+7, r25	; 0x07
     fb6:	68 87       	std	Y+8, r22	; 0x08
     fb8:	79 87       	std	Y+9, r23	; 0x09
     fba:	4a 87       	std	Y+10, r20	; 0x0a
     fbc:	5b 87       	std	Y+11, r21	; 0x0b
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>

	/* Move stored calibration values to ADCA. */
	ADC_CalibrationValues_Load(&ADCA);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
     fcc:	00 e0       	ldi	r16, 0x00	; 0
     fce:	12 e0       	ldi	r17, 0x02	; 2
     fd0:	d8 01       	movw	r26, r16
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	8c 91       	ld	r24, X
     fd6:	11 97       	sbiw	r26, 0x01	; 1
     fd8:	89 7e       	andi	r24, 0xE9	; 233
     fda:	11 96       	adiw	r26, 0x01	; 1
     fdc:	8c 93       	st	X, r24
     fde:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV32_gc);
     fe0:	14 96       	adiw	r26, 0x04	; 4
     fe2:	8c 91       	ld	r24, X
     fe4:	14 97       	sbiw	r26, 0x04	; 4
     fe6:	88 7f       	andi	r24, 0xF8	; 248
     fe8:	83 60       	ori	r24, 0x03	; 3
     fea:	14 96       	adiw	r26, 0x04	; 4
     fec:	8c 93       	st	X, r24
     fee:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCA to be 1.0 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_INT1V_gc); 
     ff0:	12 96       	adiw	r26, 0x02	; 2
     ff2:	8c 91       	ld	r24, X
     ff4:	12 97       	sbiw	r26, 0x02	; 2
     ff6:	8f 7c       	andi	r24, 0xCF	; 207
     ff8:	12 96       	adiw	r26, 0x02	; 2
     ffa:	8c 93       	st	X, r24
     ffc:	12 97       	sbiw	r26, 0x02	; 2

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     ffe:	0f 2e       	mov	r0, r31
    1000:	f0 e2       	ldi	r31, 0x20	; 32
    1002:	ef 2e       	mov	r14, r31
    1004:	f2 e0       	ldi	r31, 0x02	; 2
    1006:	ff 2e       	mov	r15, r31
    1008:	f0 2d       	mov	r31, r0
    100a:	f7 01       	movw	r30, r14
    100c:	80 81       	ld	r24, Z
    100e:	80 7e       	andi	r24, 0xE0	; 224
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	/* Get offset value for ADCA. */
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    1014:	89 e0       	ldi	r24, 0x09	; 9
    1016:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
    1018:	8c 91       	ld	r24, X
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	8c 93       	st	X, r24
	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <ADC_Wait_32MHz>
 	offset = ADC_Offset_Get_Unsigned(&ADCA, &ADCA.CH0, false);
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	60 e2       	ldi	r22, 0x20	; 32
    102c:	72 e0       	ldi	r23, 0x02	; 2
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	0e 94 44 17 	call	0x2e88	; 0x2e88 <ADC_Offset_Get_Unsigned>
    1034:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCA);
    1036:	d8 01       	movw	r26, r16
    1038:	8c 91       	ld	r24, X
    103a:	8e 7f       	andi	r24, 0xFE	; 254
    103c:	8c 93       	st	X, r24
    
	/* Set input to the channels in ADCA */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    103e:	f7 01       	movw	r30, r14
    1040:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
    1042:	13 96       	adiw	r26, 0x03	; 3
    1044:	8c 91       	ld	r24, X
    1046:	13 97       	sbiw	r26, 0x03	; 3
    1048:	8f 73       	andi	r24, 0x3F	; 63
    104a:	13 96       	adiw	r26, 0x03	; 3
    104c:	8c 93       	st	X, r24
    104e:	13 97       	sbiw	r26, 0x03	; 3

	/* Enable ADC .*/
	ADC_Enable(&ADCA);
    1050:	8c 91       	ld	r24, X
    1052:	81 60       	ori	r24, 0x01	; 1
    1054:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
    105e:	d8 01       	movw	r26, r16
    1060:	11 96       	adiw	r26, 0x01	; 1
    1062:	8c 91       	ld	r24, X
    1064:	11 97       	sbiw	r26, 0x01	; 1
    1066:	88 60       	ori	r24, 0x08	; 8
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	8c 93       	st	X, r24
    106c:	ee 24       	eor	r14, r14
    106e:	ff 24       	eor	r15, r15
    1070:	68 94       	set
    1072:	f2 f8       	bld	r15, 2
	
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    1074:	44 24       	eor	r4, r4
    1076:	55 24       	eor	r5, r5
    1078:	32 01       	movw	r6, r4
void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e1       	ldi	r19, 0x10	; 16
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	2a 83       	std	Y+2, r18	; 0x02
    1084:	3b 83       	std	Y+3, r19	; 0x03
    1086:	4c 83       	std	Y+4, r20	; 0x04
    1088:	5d 83       	std	Y+5, r21	; 0x05
volatile uint8_t checksumFRAM[3] = {0};  // checksum for FRAM test


void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
    108a:	88 24       	eor	r8, r8
    108c:	99 24       	eor	r9, r9
    108e:	54 01       	movw	r10, r8
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
    1090:	00 e2       	ldi	r16, 0x20	; 32
    1092:	12 e0       	ldi	r17, 0x02	; 2
    1094:	d8 01       	movw	r26, r16
    1096:	13 96       	adiw	r26, 0x03	; 3
    1098:	8c 91       	ld	r24, X
    109a:	13 97       	sbiw	r26, 0x03	; 3
    109c:	80 ff       	sbrs	r24, 0
    109e:	fa cf       	rjmp	.-12     	; 0x1094 <CO_collectTemp+0x108>
		tempResult = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
    10a0:	69 81       	ldd	r22, Y+1	; 0x01
    10a2:	c8 01       	movw	r24, r16
    10a4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <ADC_ResultCh_GetWord_Signed>
		sum+=tempResult;
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	88 0e       	add	r8, r24
    10ae:	99 1e       	adc	r9, r25
    10b0:	aa 1e       	adc	r10, r26
    10b2:	bb 1e       	adc	r11, r27
    10b4:	48 16       	cp	r4, r24
    10b6:	59 06       	cpc	r5, r25
    10b8:	6a 06       	cpc	r6, r26
    10ba:	7b 06       	cpc	r7, r27
    10bc:	10 f4       	brcc	.+4      	; 0x10c2 <CO_collectTemp+0x136>
    10be:	2c 01       	movw	r4, r24
    10c0:	3d 01       	movw	r6, r26
    10c2:	2a 81       	ldd	r18, Y+2	; 0x02
    10c4:	3b 81       	ldd	r19, Y+3	; 0x03
    10c6:	4c 81       	ldd	r20, Y+4	; 0x04
    10c8:	5d 81       	ldd	r21, Y+5	; 0x05
    10ca:	82 17       	cp	r24, r18
    10cc:	93 07       	cpc	r25, r19
    10ce:	a4 07       	cpc	r26, r20
    10d0:	b5 07       	cpc	r27, r21
    10d2:	20 f4       	brcc	.+8      	; 0x10dc <CO_collectTemp+0x150>
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    10d6:	9b 83       	std	Y+3, r25	; 0x03
    10d8:	ac 83       	std	Y+4, r26	; 0x04
    10da:	bd 83       	std	Y+5, r27	; 0x05
    10dc:	08 94       	sec
    10de:	e1 08       	sbc	r14, r1
    10e0:	f1 08       	sbc	r15, r1

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);

	/* Sample onboard ADC.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    10e2:	e1 14       	cp	r14, r1
    10e4:	f1 04       	cpc	r15, r1
    10e6:	b1 f6       	brne	.-84     	; 0x1094 <CO_collectTemp+0x108>
		if (min > tempResult) { min = tempResult;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCA);
    10e8:	e0 e0       	ldi	r30, 0x00	; 0
    10ea:	f2 e0       	ldi	r31, 0x02	; 2
    10ec:	81 81       	ldd	r24, Z+1	; 0x01
    10ee:	87 7f       	andi	r24, 0xF7	; 247
    10f0:	81 83       	std	Z+1, r24	; 0x01
	ADC_Pipeline_Flush(&ADCA);
    10f2:	80 81       	ld	r24, Z
    10f4:	82 60       	ori	r24, 0x02	; 2
    10f6:	80 83       	st	Z, r24
	ADC_Disable(&ADCA);
    10f8:	80 81       	ld	r24, Z
    10fa:	8e 7f       	andi	r24, 0xFE	; 254
    10fc:	80 83       	st	Z, r24

	ADCPower(FALSE);
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>

	average = sum / NUM_SAMPLES;
    1104:	c5 01       	movw	r24, r10
    1106:	b4 01       	movw	r22, r8
    1108:	05 2e       	mov	r0, r21
    110a:	5a e0       	ldi	r21, 0x0A	; 10
    110c:	96 95       	lsr	r25
    110e:	87 95       	ror	r24
    1110:	77 95       	ror	r23
    1112:	67 95       	ror	r22
    1114:	5a 95       	dec	r21
    1116:	d1 f7       	brne	.-12     	; 0x110c <CO_collectTemp+0x180>
    1118:	50 2d       	mov	r21, r0

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    111a:	28 ee       	ldi	r18, 0xE8	; 232
    111c:	33 e0       	ldi	r19, 0x03	; 3
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    1126:	0f 2e       	mov	r0, r31
    1128:	ff ef       	ldi	r31, 0xFF	; 255
    112a:	8f 2e       	mov	r8, r31
    112c:	ff e0       	ldi	r31, 0x0F	; 15
    112e:	9f 2e       	mov	r9, r31
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	af 2e       	mov	r10, r31
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	bf 2e       	mov	r11, r31
    1138:	f0 2d       	mov	r31, r0
    113a:	a5 01       	movw	r20, r10
    113c:	94 01       	movw	r18, r8
    113e:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    1142:	c9 01       	movw	r24, r18
    1144:	c2 97       	sbiw	r24, 0x32	; 50
    1146:	ae 81       	ldd	r26, Y+6	; 0x06
    1148:	bf 81       	ldd	r27, Y+7	; 0x07
    114a:	8d 93       	st	X+, r24
    114c:	9c 93       	st	X, r25
	*maxV = (max * 1000 / 4095) - 50;
    114e:	c3 01       	movw	r24, r6
    1150:	b2 01       	movw	r22, r4
    1152:	28 ee       	ldi	r18, 0xE8	; 232
    1154:	33 e0       	ldi	r19, 0x03	; 3
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    115e:	a5 01       	movw	r20, r10
    1160:	94 01       	movw	r18, r8
    1162:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    1166:	c9 01       	movw	r24, r18
    1168:	c2 97       	sbiw	r24, 0x32	; 50
    116a:	ea 85       	ldd	r30, Y+10	; 0x0a
    116c:	fb 85       	ldd	r31, Y+11	; 0x0b
    116e:	80 83       	st	Z, r24
    1170:	91 83       	std	Z+1, r25	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    1172:	6a 81       	ldd	r22, Y+2	; 0x02
    1174:	7b 81       	ldd	r23, Y+3	; 0x03
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	28 ee       	ldi	r18, 0xE8	; 232
    117c:	33 e0       	ldi	r19, 0x03	; 3
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    1186:	a5 01       	movw	r20, r10
    1188:	94 01       	movw	r18, r8
    118a:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    118e:	22 53       	subi	r18, 0x32	; 50
    1190:	30 40       	sbci	r19, 0x00	; 0
    1192:	a8 85       	ldd	r26, Y+8	; 0x08
    1194:	b9 85       	ldd	r27, Y+9	; 0x09
    1196:	2d 93       	st	X+, r18
    1198:	3c 93       	st	X, r19
    119a:	11 97       	sbiw	r26, 0x01	; 1
}
    119c:	2b 96       	adiw	r28, 0x0b	; 11
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	7f 90       	pop	r7
    11b8:	6f 90       	pop	r6
    11ba:	5f 90       	pop	r5
    11bc:	4f 90       	pop	r4
    11be:	08 95       	ret

000011c0 <CO_collectBatt>:

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    11c0:	4f 92       	push	r4
    11c2:	5f 92       	push	r5
    11c4:	6f 92       	push	r6
    11c6:	7f 92       	push	r7
    11c8:	8f 92       	push	r8
    11ca:	9f 92       	push	r9
    11cc:	af 92       	push	r10
    11ce:	bf 92       	push	r11
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	2b 97       	sbiw	r28, 0x0b	; 11
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	8e 83       	std	Y+6, r24	; 0x06
    11e8:	9f 83       	std	Y+7, r25	; 0x07
    11ea:	68 87       	std	Y+8, r22	; 0x08
    11ec:	79 87       	std	Y+9, r23	; 0x09
    11ee:	4a 87       	std	Y+10, r20	; 0x0a
    11f0:	5b 87       	std	Y+11, r21	; 0x0b
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	PortEx_DIRSET(BIT2_bm, PS_BANKB);
    11f8:	84 e0       	ldi	r24, 0x04	; 4
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
	PortEx_OUTSET(BIT2_bm, PS_BANKB); // activate PIO24 (VBATT)
    1200:	84 e0       	ldi	r24, 0x04	; 4
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
    1208:	2f ef       	ldi	r18, 0xFF	; 255
    120a:	33 ec       	ldi	r19, 0xC3	; 195
    120c:	49 e0       	ldi	r20, 0x09	; 9
    120e:	21 50       	subi	r18, 0x01	; 1
    1210:	30 40       	sbci	r19, 0x00	; 0
    1212:	40 40       	sbci	r20, 0x00	; 0
    1214:	e1 f7       	brne	.-8      	; 0x120e <CO_collectBatt+0x4e>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <CO_collectBatt+0x58>
    1218:	00 00       	nop
	_delay_ms(100);
	//setPortEx(BIT2_bm, PS_BANKB);
		
	/* Move stored calibration values to ADCB. */
	ADC_CalibrationValues_Load(&ADCB);
    121a:	80 e4       	ldi	r24, 0x40	; 64
    121c:	92 e0       	ldi	r25, 0x02	; 2
    121e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    1222:	00 e4       	ldi	r16, 0x40	; 64
    1224:	12 e0       	ldi	r17, 0x02	; 2
    1226:	d8 01       	movw	r26, r16
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	8c 91       	ld	r24, X
    122c:	11 97       	sbiw	r26, 0x01	; 1
    122e:	89 7e       	andi	r24, 0xE9	; 233
    1230:	11 96       	adiw	r26, 0x01	; 1
    1232:	8c 93       	st	X, r24
    1234:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV32_gc);
    1236:	14 96       	adiw	r26, 0x04	; 4
    1238:	8c 91       	ld	r24, X
    123a:	14 97       	sbiw	r26, 0x04	; 4
    123c:	88 7f       	andi	r24, 0xF8	; 248
    123e:	83 60       	ori	r24, 0x03	; 3
    1240:	14 96       	adiw	r26, 0x04	; 4
    1242:	8c 93       	st	X, r24
    1244:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCB to be 1.0 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_INT1V_gc); 
    1246:	12 96       	adiw	r26, 0x02	; 2
    1248:	8c 91       	ld	r24, X
    124a:	12 97       	sbiw	r26, 0x02	; 2
    124c:	8f 7c       	andi	r24, 0xCF	; 207
    124e:	12 96       	adiw	r26, 0x02	; 2
    1250:	8c 93       	st	X, r24
    1252:	12 97       	sbiw	r26, 0x02	; 2

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
    1254:	0f 2e       	mov	r0, r31
    1256:	f0 e6       	ldi	r31, 0x60	; 96
    1258:	ef 2e       	mov	r14, r31
    125a:	f2 e0       	ldi	r31, 0x02	; 2
    125c:	ff 2e       	mov	r15, r31
    125e:	f0 2d       	mov	r31, r0
    1260:	f7 01       	movw	r30, r14
    1262:	80 81       	ld	r24, Z
    1264:	80 7e       	andi	r24, 0xE0	; 224
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	// Get offset value for ADCB.
   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    126a:	89 e0       	ldi	r24, 0x09	; 9
    126c:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
    126e:	8c 91       	ld	r24, X
    1270:	81 60       	ori	r24, 0x01	; 1
    1272:	8c 93       	st	X, r24
	// Wait until common mode voltage is stable. Default clk is 16MHz
	ADC_Wait_32MHz(&ADCB);
    1274:	80 e4       	ldi	r24, 0x40	; 64
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <ADC_Wait_32MHz>
	offset = ADC_Offset_Get_Unsigned(&ADCB, &ADCB.CH0, false);
    127c:	80 e4       	ldi	r24, 0x40	; 64
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	60 e6       	ldi	r22, 0x60	; 96
    1282:	72 e0       	ldi	r23, 0x02	; 2
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	0e 94 44 17 	call	0x2e88	; 0x2e88 <ADC_Offset_Get_Unsigned>
    128a:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCB);
    128c:	d8 01       	movw	r26, r16
    128e:	8c 91       	ld	r24, X
    1290:	8e 7f       	andi	r24, 0xFE	; 254
    1292:	8c 93       	st	X, r24
    
	/* Set input to the channels in ADC B */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    1294:	f7 01       	movw	r30, r14
    1296:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0_gc);
    1298:	13 96       	adiw	r26, 0x03	; 3
    129a:	8c 91       	ld	r24, X
    129c:	13 97       	sbiw	r26, 0x03	; 3
    129e:	8f 73       	andi	r24, 0x3F	; 63
    12a0:	13 96       	adiw	r26, 0x03	; 3
    12a2:	8c 93       	st	X, r24
    12a4:	13 97       	sbiw	r26, 0x03	; 3

	/* Enable ADC .*/
	ADC_Enable(&ADCB);
    12a6:	8c 91       	ld	r24, X
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
    12ac:	80 e4       	ldi	r24, 0x40	; 64
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);
    12b4:	d8 01       	movw	r26, r16
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	8c 91       	ld	r24, X
    12ba:	11 97       	sbiw	r26, 0x01	; 1
    12bc:	88 60       	ori	r24, 0x08	; 8
    12be:	11 96       	adiw	r26, 0x01	; 1
    12c0:	8c 93       	st	X, r24
    12c2:	ee 24       	eor	r14, r14
    12c4:	ff 24       	eor	r15, r15
    12c6:	68 94       	set
    12c8:	f2 f8       	bld	r15, 2
	
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    12ca:	44 24       	eor	r4, r4
    12cc:	55 24       	eor	r5, r5
    12ce:	32 01       	movw	r6, r4
void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e1       	ldi	r19, 0x10	; 16
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	2a 83       	std	Y+2, r18	; 0x02
    12da:	3b 83       	std	Y+3, r19	; 0x03
    12dc:	4c 83       	std	Y+4, r20	; 0x04
    12de:	5d 83       	std	Y+5, r21	; 0x05
	*minV = (min * 1000  / 4095) - 50;
}

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	54 01       	movw	r10, r8
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCB channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCB.CH0));
    12e6:	00 e6       	ldi	r16, 0x60	; 96
    12e8:	12 e0       	ldi	r17, 0x02	; 2
    12ea:	d8 01       	movw	r26, r16
    12ec:	13 96       	adiw	r26, 0x03	; 3
    12ee:	8c 91       	ld	r24, X
    12f0:	13 97       	sbiw	r26, 0x03	; 3
    12f2:	80 ff       	sbrs	r24, 0
    12f4:	fa cf       	rjmp	.-12     	; 0x12ea <CO_collectBatt+0x12a>
		tempResultB = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, offset);
    12f6:	69 81       	ldd	r22, Y+1	; 0x01
    12f8:	c8 01       	movw	r24, r16
    12fa:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <ADC_ResultCh_GetWord_Signed>
		sum+=tempResultB;
    12fe:	a0 e0       	ldi	r26, 0x00	; 0
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	88 0e       	add	r8, r24
    1304:	99 1e       	adc	r9, r25
    1306:	aa 1e       	adc	r10, r26
    1308:	bb 1e       	adc	r11, r27
    130a:	48 16       	cp	r4, r24
    130c:	59 06       	cpc	r5, r25
    130e:	6a 06       	cpc	r6, r26
    1310:	7b 06       	cpc	r7, r27
    1312:	10 f4       	brcc	.+4      	; 0x1318 <CO_collectBatt+0x158>
    1314:	2c 01       	movw	r4, r24
    1316:	3d 01       	movw	r6, r26
    1318:	2a 81       	ldd	r18, Y+2	; 0x02
    131a:	3b 81       	ldd	r19, Y+3	; 0x03
    131c:	4c 81       	ldd	r20, Y+4	; 0x04
    131e:	5d 81       	ldd	r21, Y+5	; 0x05
    1320:	82 17       	cp	r24, r18
    1322:	93 07       	cpc	r25, r19
    1324:	a4 07       	cpc	r26, r20
    1326:	b5 07       	cpc	r27, r21
    1328:	20 f4       	brcc	.+8      	; 0x1332 <CO_collectBatt+0x172>
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	9b 83       	std	Y+3, r25	; 0x03
    132e:	ac 83       	std	Y+4, r26	; 0x04
    1330:	bd 83       	std	Y+5, r27	; 0x05
    1332:	08 94       	sec
    1334:	e1 08       	sbc	r14, r1
    1336:	f1 08       	sbc	r15, r1

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);

	/* Store samples.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    1338:	e1 14       	cp	r14, r1
    133a:	f1 04       	cpc	r15, r1
    133c:	b1 f6       	brne	.-84     	; 0x12ea <CO_collectBatt+0x12a>
		if (min > tempResultB) { min = tempResultB;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
    133e:	e0 e4       	ldi	r30, 0x40	; 64
    1340:	f2 e0       	ldi	r31, 0x02	; 2
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	87 7f       	andi	r24, 0xF7	; 247
    1346:	81 83       	std	Z+1, r24	; 0x01
	ADC_Disable(&ADCB);
    1348:	80 81       	ld	r24, Z
    134a:	8e 7f       	andi	r24, 0xFE	; 254
    134c:	80 83       	st	Z, r24

	average = sum / NUM_SAMPLES;
	
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	0e 94 0c 05 	call	0xa18	; 0xa18 <PortEx_DIRCLR>
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
	ADC_Disable(&ADCB);

	average = sum / NUM_SAMPLES;
    135c:	c5 01       	movw	r24, r10
    135e:	b4 01       	movw	r22, r8
    1360:	05 2e       	mov	r0, r21
    1362:	5a e0       	ldi	r21, 0x0A	; 10
    1364:	96 95       	lsr	r25
    1366:	87 95       	ror	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	5a 95       	dec	r21
    136e:	d1 f7       	brne	.-12     	; 0x1364 <CO_collectBatt+0x1a4>
    1370:	50 2d       	mov	r21, r0
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    1372:	28 ee       	ldi	r18, 0xE8	; 232
    1374:	33 e0       	ldi	r19, 0x03	; 3
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    137e:	0f 2e       	mov	r0, r31
    1380:	ff ef       	ldi	r31, 0xFF	; 255
    1382:	8f 2e       	mov	r8, r31
    1384:	ff e0       	ldi	r31, 0x0F	; 15
    1386:	9f 2e       	mov	r9, r31
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	af 2e       	mov	r10, r31
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	bf 2e       	mov	r11, r31
    1390:	f0 2d       	mov	r31, r0
    1392:	a5 01       	movw	r20, r10
    1394:	94 01       	movw	r18, r8
    1396:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    139a:	c9 01       	movw	r24, r18
    139c:	c2 97       	sbiw	r24, 0x32	; 50
    139e:	ae 81       	ldd	r26, Y+6	; 0x06
    13a0:	bf 81       	ldd	r27, Y+7	; 0x07
    13a2:	8d 93       	st	X+, r24
    13a4:	9c 93       	st	X, r25
	*maxV = (max * 1000 / 4095) - 50;
    13a6:	c3 01       	movw	r24, r6
    13a8:	b2 01       	movw	r22, r4
    13aa:	28 ee       	ldi	r18, 0xE8	; 232
    13ac:	33 e0       	ldi	r19, 0x03	; 3
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    13b6:	a5 01       	movw	r20, r10
    13b8:	94 01       	movw	r18, r8
    13ba:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    13be:	c9 01       	movw	r24, r18
    13c0:	c2 97       	sbiw	r24, 0x32	; 50
    13c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    13c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    13c6:	80 83       	st	Z, r24
    13c8:	91 83       	std	Z+1, r25	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    13ca:	6a 81       	ldd	r22, Y+2	; 0x02
    13cc:	7b 81       	ldd	r23, Y+3	; 0x03
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	28 ee       	ldi	r18, 0xE8	; 232
    13d4:	33 e0       	ldi	r19, 0x03	; 3
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    13de:	a5 01       	movw	r20, r10
    13e0:	94 01       	movw	r18, r8
    13e2:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    13e6:	22 53       	subi	r18, 0x32	; 50
    13e8:	30 40       	sbci	r19, 0x00	; 0
    13ea:	a8 85       	ldd	r26, Y+8	; 0x08
    13ec:	b9 85       	ldd	r27, Y+9	; 0x09
    13ee:	2d 93       	st	X+, r18
    13f0:	3c 93       	st	X, r19
    13f2:	11 97       	sbiw	r26, 0x01	; 1
}
    13f4:	2b 96       	adiw	r28, 0x0b	; 11
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	bf 90       	pop	r11
    1408:	af 90       	pop	r10
    140a:	9f 90       	pop	r9
    140c:	8f 90       	pop	r8
    140e:	7f 90       	pop	r7
    1410:	6f 90       	pop	r6
    1412:	5f 90       	pop	r5
    1414:	4f 90       	pop	r4
    1416:	08 95       	ret

00001418 <set_ampGain>:
 *	All selected op-amps will be set to the same gain value.
 *
 *	\param channel	channel for gain to be set
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 */
void set_ampGain(uint8_t channel, uint8_t gainExponent) {
    1418:	cf 93       	push	r28
    141a:	c6 2f       	mov	r28, r22
	
	// set chip select.  note: AD8231 CS is select on low
	PortEx_OUTCLR((1 << channel), PS_BANKA);
    141c:	21 e0       	ldi	r18, 0x01	; 1
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <set_ampGain+0x10>
    1424:	44 0f       	add	r20, r20
    1426:	55 1f       	adc	r21, r21
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <set_ampGain+0xc>
    142c:	ca 01       	movw	r24, r20
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	//setPortEx(~(1 << channel), PS_BANKA);
	// set gain
	// set bit A0
	if(gainExponent & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    1434:	c0 ff       	sbrs	r28, 0
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <set_ampGain+0x2a>
    1438:	80 e4       	ldi	r24, 0x40	; 64
    143a:	e0 e0       	ldi	r30, 0x00	; 0
    143c:	f6 e0       	ldi	r31, 0x06	; 6
    143e:	85 83       	std	Z+5, r24	; 0x05
    1440:	04 c0       	rjmp	.+8      	; 0x144a <set_ampGain+0x32>
	else {PORTA.OUTCLR = PIN6_bm;}
    1442:	80 e4       	ldi	r24, 0x40	; 64
    1444:	e0 e0       	ldi	r30, 0x00	; 0
    1446:	f6 e0       	ldi	r31, 0x06	; 6
    1448:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1
	if(gainExponent & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    144a:	c1 ff       	sbrs	r28, 1
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <set_ampGain+0x40>
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	e0 e2       	ldi	r30, 0x20	; 32
    1452:	f6 e0       	ldi	r31, 0x06	; 6
    1454:	85 83       	std	Z+5, r24	; 0x05
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <set_ampGain+0x48>
	else {PORTB.OUTCLR = PIN1_bm;}
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	e0 e2       	ldi	r30, 0x20	; 32
    145c:	f6 e0       	ldi	r31, 0x06	; 6
    145e:	86 83       	std	Z+6, r24	; 0x06
	// set bit A2
	if(gainExponent & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    1460:	c2 ff       	sbrs	r28, 2
    1462:	05 c0       	rjmp	.+10     	; 0x146e <set_ampGain+0x56>
    1464:	84 e0       	ldi	r24, 0x04	; 4
    1466:	e0 e2       	ldi	r30, 0x20	; 32
    1468:	f6 e0       	ldi	r31, 0x06	; 6
    146a:	85 83       	std	Z+5, r24	; 0x05
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <set_ampGain+0x5e>
	else {PORTB.OUTCLR = PIN2_bm;}
    146e:	84 e0       	ldi	r24, 0x04	; 4
    1470:	e0 e2       	ldi	r30, 0x20	; 32
    1472:	f6 e0       	ldi	r31, 0x06	; 6
    1474:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1476:	5a e0       	ldi	r21, 0x0A	; 10
    1478:	5a 95       	dec	r21
    147a:	f1 f7       	brne	.-4      	; 0x1478 <set_ampGain+0x60>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <set_ampGain+0x66>

	_delay_us(1);

	PortEx_OUTSET(0xFF, PS_BANKA);	// write protect all AD8231 amps
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
	//setPortEx(0xFF, PS_BANKA);

}
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <enableADCMUX>:

void enableADCMUX(uint8_t on) {
	
	if(on) {
    148a:	88 23       	and	r24, r24
    148c:	31 f0       	breq	.+12     	; 0x149a <enableADCMUX+0x10>
		PORTA.DIRSET = PIN5_bm;
    148e:	e0 e0       	ldi	r30, 0x00	; 0
    1490:	f6 e0       	ldi	r31, 0x06	; 6
    1492:	80 e2       	ldi	r24, 0x20	; 32
    1494:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
    1496:	85 83       	std	Z+5, r24	; 0x05
    1498:	08 95       	ret
	} else {
		PORTA.OUTCLR = PIN5_bm;
    149a:	e0 e0       	ldi	r30, 0x00	; 0
    149c:	f6 e0       	ldi	r31, 0x06	; 6
    149e:	80 e2       	ldi	r24, 0x20	; 32
    14a0:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
    14a2:	82 83       	std	Z+2, r24	; 0x02
    14a4:	08 95       	ret

000014a6 <__vector_20>:
	//enableADCMUX(FALSE);
	//ADCPower(FALSE);
}

//triggers when specified number of samples has been collected by ADC
ISR(TCC1_OVF_vect){
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	0b b6       	in	r0, 0x3b	; 59
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31

	// turn off ADC timer(s)
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    14cc:	e0 e4       	ldi	r30, 0x40	; 64
    14ce:	fa e0       	ldi	r31, 0x0A	; 10
    14d0:	80 81       	ld	r24, Z
    14d2:	80 7f       	andi	r24, 0xF0	; 240
    14d4:	80 83       	st	Z, r24
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	b8 e0       	ldi	r27, 0x08	; 8
    14da:	8c 91       	ld	r24, X
    14dc:	80 7f       	andi	r24, 0xF0	; 240
    14de:	8c 93       	st	X, r24
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    14e0:	a0 e0       	ldi	r26, 0x00	; 0
    14e2:	b9 e0       	ldi	r27, 0x09	; 9
    14e4:	8c 91       	ld	r24, X
    14e6:	80 7f       	andi	r24, 0xF0	; 240
    14e8:	8c 93       	st	X, r24
	TCC1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    14ea:	80 81       	ld	r24, Z
    14ec:	80 7f       	andi	r24, 0xF0	; 240
    14ee:	80 93 40 08 	sts	0x0840, r24

	//turn off SPI bus and ADC MUX used by ADC
	SPICS(FALSE);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    14f8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	enableADCMUX(FALSE);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	0e 94 45 0a 	call	0x148a	; 0x148a <enableADCMUX>
	
	//set a global flag to tell system that all the samples have been collected
	ADC_Sampling_Finished = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 a6 50 	sts	0x50A6, r24
	DataAvailable = 1;
    1508:	80 93 47 3e 	sts	0x3E47, r24
}
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	0f 90       	pop	r0
    1526:	0b be       	out	0x3b, r0	; 59
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <ADC_Stop_Sampling>:

//turns off ADC timers/counters and spi bus 
void ADC_Stop_Sampling(){
	
	// turn off ADC timer(s)
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1532:	e0 e4       	ldi	r30, 0x40	; 64
    1534:	fa e0       	ldi	r31, 0x0A	; 10
    1536:	80 81       	ld	r24, Z
    1538:	80 7f       	andi	r24, 0xF0	; 240
    153a:	80 83       	st	Z, r24
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    153c:	a0 e0       	ldi	r26, 0x00	; 0
    153e:	b8 e0       	ldi	r27, 0x08	; 8
    1540:	8c 91       	ld	r24, X
    1542:	80 7f       	andi	r24, 0xF0	; 240
    1544:	8c 93       	st	X, r24
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b9 e0       	ldi	r27, 0x09	; 9
    154a:	8c 91       	ld	r24, X
    154c:	80 7f       	andi	r24, 0xF0	; 240
    154e:	8c 93       	st	X, r24
	TCC1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1550:	80 81       	ld	r24, Z
    1552:	80 7f       	andi	r24, 0xF0	; 240
    1554:	80 93 40 08 	sts	0x0840, r24

	//turn off SPI bus and ADC MUX used by ADC
	SPICS(FALSE);
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    155e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	enableADCMUX(FALSE);
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	0e 94 45 0a 	call	0x148a	; 0x148a <enableADCMUX>
	ADC_Sampling_Finished = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	80 93 a6 50 	sts	0x50A6, r24
	DataAvailable = 1;
    156e:	80 93 47 3e 	sts	0x3E47, r24
}
    1572:	08 95       	ret

00001574 <ADC_Get_Num_Samples>:

//returns number of samples collected by last ADC sampling time
uint16_t ADC_Get_Num_Samples(){
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	0f 92       	push	r0
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	
	if(ADC_Sampling_Finished){
    1580:	80 91 a6 50 	lds	r24, 0x50A6
    1584:	88 23       	and	r24, r24
    1586:	89 f0       	breq	.+34     	; 0x15aa <ADC_Get_Num_Samples+0x36>
		volatile uint16_t count;
		count = TCC1.CNT;
    1588:	e0 e4       	ldi	r30, 0x40	; 64
    158a:	f8 e0       	ldi	r31, 0x08	; 8
    158c:	80 a1       	lds	r24, 0x40
    158e:	91 a1       	lds	r25, 0x41
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	9a 83       	std	Y+2, r25	; 0x02
		if(count == 0) count = TCC1.PER;
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	21 f4       	brne	.+8      	; 0x15a4 <ADC_Get_Num_Samples+0x30>
    159c:	86 a1       	lds	r24, 0x46
    159e:	97 a1       	lds	r25, 0x47
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	9a 83       	std	Y+2, r25	; 0x02
		return count;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <ADC_Get_Num_Samples+0x3a>
	}
	else return 0;		
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <ADC_Pause_Sampling>:

void ADC_Pause_Sampling(){
		//ignore interrupts from the ADC...don't turn it off to avoid the boot up time
	PORTF.INT1MASK = 0x00;
    15b8:	e0 ea       	ldi	r30, 0xA0	; 160
    15ba:	f6 e0       	ldi	r31, 0x06	; 6
    15bc:	13 86       	std	Z+11, r1	; 0x0b
}
    15be:	08 95       	ret

000015c0 <ADC_Resume_Sampling>:

void ADC_Resume_Sampling(){
	//re-enable interrupt on port F which the ADC uses
	PORTF.INT1MASK = PIN0_bm;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	e0 ea       	ldi	r30, 0xA0	; 160
    15c4:	f6 e0       	ldi	r31, 0x06	; 6
    15c6:	83 87       	std	Z+11, r24	; 0x0b
}	
    15c8:	08 95       	ret

000015ca <__vector_104>:
// 	}	
// 	}	
// }

//ISR used by CO_collectADC function
ISR(PORTF_INT0_vect) {
    15ca:	1f 92       	push	r1
    15cc:	0f 92       	push	r0
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	0f 92       	push	r0
    15d2:	0b b6       	in	r0, 0x3b	; 59
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	6f 92       	push	r6
    15da:	7f 92       	push	r7
    15dc:	8f 92       	push	r8
    15de:	9f 92       	push	r9
    15e0:	af 92       	push	r10
    15e2:	bf 92       	push	r11
    15e4:	cf 92       	push	r12
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	2f 93       	push	r18
    15f2:	3f 93       	push	r19
    15f4:	4f 93       	push	r20
    15f6:	5f 93       	push	r21
    15f8:	6f 93       	push	r22
    15fa:	7f 93       	push	r23
    15fc:	8f 93       	push	r24
    15fe:	9f 93       	push	r25
    1600:	af 93       	push	r26
    1602:	bf 93       	push	r27
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	2c 97       	sbiw	r28, 0x0c	; 12
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	de bf       	out	0x3e, r29	; 62
	// skip first samples because cannot perform recommended reset
	volatile int32_t currentSample;
	volatile int64_t var;
	if (discardCount < ADC_DISCARD) {
    1616:	80 91 5c 40 	lds	r24, 0x405C
    161a:	88 23       	and	r24, r24
    161c:	8c f0       	brlt	.+34     	; 0x1640 <__vector_104+0x76>
		discardCount++;
    161e:	80 91 5c 40 	lds	r24, 0x405C
    1622:	8f 5f       	subi	r24, 0xFF	; 255
    1624:	80 93 5c 40 	sts	0x405C, r24
		if(discardCount == ADC_DISCARD){
    1628:	80 91 5c 40 	lds	r24, 0x405C
    162c:	80 38       	cpi	r24, 0x80	; 128
    162e:	09 f0       	breq	.+2      	; 0x1632 <__vector_104+0x68>
    1630:	e4 c0       	rjmp	.+456    	; 0x17fa <__vector_104+0x230>
			//set event system to update counter of number of samples every sample event from now on
			TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
    1632:	e0 e4       	ldi	r30, 0x40	; 64
    1634:	f8 e0       	ldi	r31, 0x08	; 8
    1636:	80 81       	ld	r24, Z
    1638:	80 7f       	andi	r24, 0xF0	; 240
    163a:	89 60       	ori	r24, 0x09	; 9
    163c:	80 83       	st	Z, r24
    163e:	dd c0       	rjmp	.+442    	; 0x17fa <__vector_104+0x230>
		}
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	e0 ea       	ldi	r30, 0xA0	; 160
    164a:	f6 e0       	ldi	r31, 0x06	; 6
    164c:	86 83       	std	Z+6, r24	; 0x06
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1652:	e0 ec       	ldi	r30, 0xC0	; 192
    1654:	f8 e0       	ldi	r31, 0x08	; 8
    1656:	5a ea       	ldi	r21, 0xAA	; 170
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
    1658:	20 e2       	ldi	r18, 0x20	; 32
    165a:	3e e3       	ldi	r19, 0x3E	; 62
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    165c:	53 83       	std	Z+3, r21	; 0x03
			while(!(SPIC.STATUS & SPI_IF_bm));
    165e:	42 81       	ldd	r20, Z+2	; 0x02
    1660:	44 23       	and	r20, r20
    1662:	ec f7       	brge	.-6      	; 0x165e <__vector_104+0x94>
			SPIBuffer[bufIndex] = SPIC.DATA;
    1664:	43 81       	ldd	r20, Z+3	; 0x03
    1666:	d9 01       	movw	r26, r18
    1668:	a8 0f       	add	r26, r24
    166a:	b9 1f       	adc	r27, r25
    166c:	4c 93       	st	X, r20
    166e:	01 96       	adiw	r24, 0x01	; 1
		}
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	91 05       	cpc	r25, r1
    1674:	99 f7       	brne	.-26     	; 0x165c <__vector_104+0x92>
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	e0 ea       	ldi	r30, 0xA0	; 160
    167a:	f6 e0       	ldi	r31, 0x06	; 6
    167c:	85 83       	std	Z+5, r24	; 0x05
		SPICS(FALSE);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>

		// create 32 bits from SPIBuffer[0:2] with sign extension of SPIBuffer[0][7]
		if(SPIBuffer[0] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    1684:	80 91 20 3e 	lds	r24, 0x3E20
    1688:	88 23       	and	r24, r24
    168a:	1c f4       	brge	.+6      	; 0x1692 <__vector_104+0xc8>
    168c:	8f ef       	ldi	r24, 0xFF	; 255
    168e:	8c 83       	std	Y+4, r24	; 0x04
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <__vector_104+0xca>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    1692:	1c 82       	std	Y+4, r1	; 0x04
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[0];
    1694:	80 91 20 3e 	lds	r24, 0x3E20
    1698:	8b 83       	std	Y+3, r24	; 0x03
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[1];
    169a:	80 91 21 3e 	lds	r24, 0x3E21
    169e:	8a 83       	std	Y+2, r24	; 0x02
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[2];
    16a0:	80 91 22 3e 	lds	r24, 0x3E22
    16a4:	89 83       	std	Y+1, r24	; 0x01
		
		//ADC_BUFFER[sampleCount] = (int32_t) -((uint64_t)currentSample * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
		var = currentSample;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	ab 81       	ldd	r26, Y+3	; 0x03
    16ac:	bc 81       	ldd	r27, Y+4	; 0x04
    16ae:	ac 01       	movw	r20, r24
    16b0:	bd 01       	movw	r22, r26
    16b2:	77 0f       	add	r23, r23
    16b4:	44 0b       	sbc	r20, r20
    16b6:	54 2f       	mov	r21, r20
    16b8:	ba 01       	movw	r22, r20
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	af 83       	std	Y+7, r26	; 0x07
    16c0:	b8 87       	std	Y+8, r27	; 0x08
    16c2:	49 87       	std	Y+9, r20	; 0x09
    16c4:	4a 87       	std	Y+10, r20	; 0x0a
    16c6:	4b 87       	std	Y+11, r20	; 0x0b
    16c8:	4c 87       	std	Y+12, r20	; 0x0c
		ADC_BUFFER[sampleCount%ADC_buffer_size] = (int32_t) -(var * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    16ca:	60 91 65 50 	lds	r22, 0x5065
    16ce:	70 91 66 50 	lds	r23, 0x5066
    16d2:	80 91 67 50 	lds	r24, 0x5067
    16d6:	90 91 68 50 	lds	r25, 0x5068
    16da:	8d 80       	ldd	r8, Y+5	; 0x05
    16dc:	1e 81       	ldd	r17, Y+6	; 0x06
    16de:	0f 81       	ldd	r16, Y+7	; 0x07
    16e0:	f8 84       	ldd	r15, Y+8	; 0x08
    16e2:	e9 84       	ldd	r14, Y+9	; 0x09
    16e4:	da 84       	ldd	r13, Y+10	; 0x0a
    16e6:	cb 84       	ldd	r12, Y+11	; 0x0b
    16e8:	bc 84       	ldd	r11, Y+12	; 0x0c
    16ea:	20 91 a7 50 	lds	r18, 0x50A7
    16ee:	30 91 a8 50 	lds	r19, 0x50A8
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    16fa:	66 0f       	add	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	80 91 63 50 	lds	r24, 0x5063
    1706:	90 91 64 50 	lds	r25, 0x5064
    170a:	3c 01       	movw	r6, r24
    170c:	66 0e       	add	r6, r22
    170e:	77 1e       	adc	r7, r23
    1710:	28 2d       	mov	r18, r8
    1712:	31 2f       	mov	r19, r17
    1714:	40 2f       	mov	r20, r16
    1716:	5f 2d       	mov	r21, r15
    1718:	6e 2d       	mov	r22, r14
    171a:	7d 2d       	mov	r23, r13
    171c:	8c 2d       	mov	r24, r12
    171e:	9b 2d       	mov	r25, r11
    1720:	0f 2e       	mov	r0, r31
    1722:	f0 ea       	ldi	r31, 0xA0	; 160
    1724:	af 2e       	mov	r10, r31
    1726:	f0 2d       	mov	r31, r0
    1728:	0f 2e       	mov	r0, r31
    172a:	f5 e2       	ldi	r31, 0x25	; 37
    172c:	bf 2e       	mov	r11, r31
    172e:	f0 2d       	mov	r31, r0
    1730:	0f 2e       	mov	r0, r31
    1732:	f6 e2       	ldi	r31, 0x26	; 38
    1734:	cf 2e       	mov	r12, r31
    1736:	f0 2d       	mov	r31, r0
    1738:	dd 24       	eor	r13, r13
    173a:	ee 24       	eor	r14, r14
    173c:	ff 24       	eor	r15, r15
    173e:	00 e0       	ldi	r16, 0x00	; 0
    1740:	10 e0       	ldi	r17, 0x00	; 0
    1742:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <__muldi3>
    1746:	aa 24       	eor	r10, r10
    1748:	aa 94       	dec	r10
    174a:	bb 24       	eor	r11, r11
    174c:	ba 94       	dec	r11
    174e:	0f 2e       	mov	r0, r31
    1750:	ff e7       	ldi	r31, 0x7F	; 127
    1752:	cf 2e       	mov	r12, r31
    1754:	f0 2d       	mov	r31, r0
    1756:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divdi3>
    175a:	01 e0       	ldi	r16, 0x01	; 1
    175c:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__ashldi3>
    1760:	0f 2e       	mov	r0, r31
    1762:	f3 e0       	ldi	r31, 0x03	; 3
    1764:	af 2e       	mov	r10, r31
    1766:	f0 2d       	mov	r31, r0
    1768:	bb 24       	eor	r11, r11
    176a:	cc 24       	eor	r12, r12
    176c:	00 e0       	ldi	r16, 0x00	; 0
    176e:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divdi3>
    1772:	82 2e       	mov	r8, r18
    1774:	93 2e       	mov	r9, r19
    1776:	a4 2e       	mov	r10, r20
    1778:	b5 2e       	mov	r11, r21
    177a:	b0 94       	com	r11
    177c:	a0 94       	com	r10
    177e:	90 94       	com	r9
    1780:	80 94       	com	r8
    1782:	81 1c       	adc	r8, r1
    1784:	91 1c       	adc	r9, r1
    1786:	a1 1c       	adc	r10, r1
    1788:	b1 1c       	adc	r11, r1
    178a:	f3 01       	movw	r30, r6
    178c:	80 82       	st	Z, r8
    178e:	91 82       	std	Z+1, r9	; 0x01
    1790:	a2 82       	std	Z+2, r10	; 0x02
    1792:	b3 82       	std	Z+3, r11	; 0x03
		if(write_to_FRAM){
    1794:	80 91 48 40 	lds	r24, 0x4048
    1798:	88 23       	and	r24, r24
    179a:	e1 f0       	breq	.+56     	; 0x17d4 <__vector_104+0x20a>
			writeFRAM(((uint8_t*)ADC_BUFFER)+(sampleCount%ADC_buffer_size), 1);
    179c:	60 91 65 50 	lds	r22, 0x5065
    17a0:	70 91 66 50 	lds	r23, 0x5066
    17a4:	80 91 67 50 	lds	r24, 0x5067
    17a8:	90 91 68 50 	lds	r25, 0x5068
    17ac:	20 91 a7 50 	lds	r18, 0x50A7
    17b0:	30 91 a8 50 	lds	r19, 0x50A8
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	20 91 63 50 	lds	r18, 0x5063
    17c4:	30 91 64 50 	lds	r19, 0x5064
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	0e 94 39 01 	call	0x272	; 0x272 <writeFRAM>
		}
		sampleCount++;
    17d4:	80 91 65 50 	lds	r24, 0x5065
    17d8:	90 91 66 50 	lds	r25, 0x5066
    17dc:	a0 91 67 50 	lds	r26, 0x5067
    17e0:	b0 91 68 50 	lds	r27, 0x5068
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	a1 1d       	adc	r26, r1
    17e8:	b1 1d       	adc	r27, r1
    17ea:	80 93 65 50 	sts	0x5065, r24
    17ee:	90 93 66 50 	sts	0x5066, r25
    17f2:	a0 93 67 50 	sts	0x5067, r26
    17f6:	b0 93 68 50 	sts	0x5068, r27
	}
}
    17fa:	2c 96       	adiw	r28, 0x0c	; 12
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	7f 90       	pop	r7
    1832:	6f 90       	pop	r6
    1834:	0f 90       	pop	r0
    1836:	0b be       	out	0x3b, r0	; 59
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <ACC_DCPassEnable>:

// Enable DC Pass for acc
// Pull PIO27 high to enable
void ACC_DCPassEnable(uint8_t enable) {
	if (enable) {
    1842:	88 23       	and	r24, r24
    1844:	49 f0       	breq	.+18     	; 0x1858 <ACC_DCPassEnable+0x16>
		PortEx_DIRSET(BIT5_bm, PS_BANKB);
    1846:	80 e2       	ldi	r24, 0x20	; 32
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
		PortEx_OUTSET(BIT5_bm, PS_BANKB);
    184e:	80 e2       	ldi	r24, 0x20	; 32
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
    1856:	08 95       	ret
		//setPortEx(BIT5_bm, PS_BANKB);
	} else {
		PortEx_DIRCLR(BIT5_bm, PS_BANKB);
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	0e 94 0c 05 	call	0xa18	; 0xa18 <PortEx_DIRCLR>
    1860:	08 95       	ret

00001862 <__vector_14>:
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    1862:	1f 92       	push	r1
    1864:	0f 92       	push	r0
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	0f 92       	push	r0
    186a:	0b b6       	in	r0, 0x3b	; 59
    186c:	0f 92       	push	r0
    186e:	11 24       	eor	r1, r1
    1870:	6f 92       	push	r6
    1872:	7f 92       	push	r7
    1874:	8f 92       	push	r8
    1876:	9f 92       	push	r9
    1878:	af 92       	push	r10
    187a:	bf 92       	push	r11
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	2f 93       	push	r18
    188a:	3f 93       	push	r19
    188c:	4f 93       	push	r20
    188e:	5f 93       	push	r21
    1890:	6f 93       	push	r22
    1892:	7f 93       	push	r23
    1894:	8f 93       	push	r24
    1896:	9f 93       	push	r25
    1898:	af 93       	push	r26
    189a:	bf 93       	push	r27
    189c:	ef 93       	push	r30
    189e:	ff 93       	push	r31
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	2c 97       	sbiw	r28, 0x0c	; 12
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	de bf       	out	0x3e, r29	; 62
	volatile int64_t sum = 0;
    18ae:	19 82       	std	Y+1, r1	; 0x01
    18b0:	1a 82       	std	Y+2, r1	; 0x02
    18b2:	1b 82       	std	Y+3, r1	; 0x03
    18b4:	1c 82       	std	Y+4, r1	; 0x04
    18b6:	1d 82       	std	Y+5, r1	; 0x05
    18b8:	1e 82       	std	Y+6, r1	; 0x06
    18ba:	1f 82       	std	Y+7, r1	; 0x07
    18bc:	18 86       	std	Y+8, r1	; 0x08
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    18c2:	20 e2       	ldi	r18, 0x20	; 32
    18c4:	3e e3       	ldi	r19, 0x3E	; 62
    18c6:	88 24       	eor	r8, r8
    18c8:	8a 94       	dec	r8
    18ca:	ac 01       	movw	r20, r24
    18cc:	f9 01       	movw	r30, r18
    18ce:	e8 0f       	add	r30, r24
    18d0:	f9 1f       	adc	r31, r25
    18d2:	60 81       	ld	r22, Z
    18d4:	66 23       	and	r22, r22
    18d6:	14 f4       	brge	.+4      	; 0x18dc <__vector_14+0x7a>
    18d8:	8c 86       	std	Y+12, r8	; 0x0c
    18da:	01 c0       	rjmp	.+2      	; 0x18de <__vector_14+0x7c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    18dc:	1c 86       	std	Y+12, r1	; 0x0c
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    18de:	42 0f       	add	r20, r18
    18e0:	53 1f       	adc	r21, r19
    18e2:	fa 01       	movw	r30, r20
    18e4:	40 81       	ld	r20, Z
    18e6:	4b 87       	std	Y+11, r20	; 0x0b
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    18e8:	fc 01       	movw	r30, r24
    18ea:	31 96       	adiw	r30, 0x01	; 1
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    18ec:	e2 0f       	add	r30, r18
    18ee:	f3 1f       	adc	r31, r19
    18f0:	40 81       	ld	r20, Z
    18f2:	4a 87       	std	Y+10, r20	; 0x0a
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    18f4:	fc 01       	movw	r30, r24
    18f6:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    18f8:	e2 0f       	add	r30, r18
    18fa:	f3 1f       	adc	r31, r19
    18fc:	40 81       	ld	r20, Z
    18fe:	49 87       	std	Y+9, r20	; 0x09
		sum += currentSample;
    1900:	49 85       	ldd	r20, Y+9	; 0x09
    1902:	5a 85       	ldd	r21, Y+10	; 0x0a
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	a9 80       	ldd	r10, Y+1	; 0x01
    190a:	ba 80       	ldd	r11, Y+2	; 0x02
    190c:	cb 80       	ldd	r12, Y+3	; 0x03
    190e:	dc 80       	ldd	r13, Y+4	; 0x04
    1910:	ed 80       	ldd	r14, Y+5	; 0x05
    1912:	fe 80       	ldd	r15, Y+6	; 0x06
    1914:	0f 81       	ldd	r16, Y+7	; 0x07
    1916:	18 85       	ldd	r17, Y+8	; 0x08
    1918:	b4 2f       	mov	r27, r20
    191a:	a5 2f       	mov	r26, r21
    191c:	f6 2f       	mov	r31, r22
    191e:	e7 2f       	mov	r30, r23
    1920:	77 0f       	add	r23, r23
    1922:	44 0b       	sbc	r20, r20
    1924:	54 2f       	mov	r21, r20
    1926:	ba 01       	movw	r22, r20
    1928:	64 2e       	mov	r6, r20
    192a:	74 2e       	mov	r7, r20
    192c:	94 2e       	mov	r9, r20
    192e:	ab 0e       	add	r10, r27
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	ab 16       	cp	r10, r27
    1934:	08 f0       	brcs	.+2      	; 0x1938 <__vector_14+0xd6>
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	ba 0e       	add	r11, r26
    193a:	51 e0       	ldi	r21, 0x01	; 1
    193c:	ba 16       	cp	r11, r26
    193e:	08 f0       	brcs	.+2      	; 0x1942 <__vector_14+0xe0>
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	a6 2f       	mov	r26, r22
    1944:	ab 0d       	add	r26, r11
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	ab 15       	cp	r26, r11
    194a:	08 f0       	brcs	.+2      	; 0x194e <__vector_14+0xec>
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	56 2b       	or	r21, r22
    1950:	cf 0e       	add	r12, r31
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	cf 16       	cp	r12, r31
    1956:	08 f0       	brcs	.+2      	; 0x195a <__vector_14+0xf8>
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	f5 2f       	mov	r31, r21
    195c:	fc 0d       	add	r31, r12
    195e:	51 e0       	ldi	r21, 0x01	; 1
    1960:	fc 15       	cp	r31, r12
    1962:	08 f0       	brcs	.+2      	; 0x1966 <__vector_14+0x104>
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	65 2b       	or	r22, r21
    1968:	de 0e       	add	r13, r30
    196a:	51 e0       	ldi	r21, 0x01	; 1
    196c:	de 16       	cp	r13, r30
    196e:	08 f0       	brcs	.+2      	; 0x1972 <__vector_14+0x110>
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	e6 2f       	mov	r30, r22
    1974:	ed 0d       	add	r30, r13
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	ed 15       	cp	r30, r13
    197a:	08 f0       	brcs	.+2      	; 0x197e <__vector_14+0x11c>
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	56 2b       	or	r21, r22
    1980:	e6 0c       	add	r14, r6
    1982:	71 e0       	ldi	r23, 0x01	; 1
    1984:	e6 14       	cp	r14, r6
    1986:	08 f0       	brcs	.+2      	; 0x198a <__vector_14+0x128>
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	b5 2f       	mov	r27, r21
    198c:	be 0d       	add	r27, r14
    198e:	51 e0       	ldi	r21, 0x01	; 1
    1990:	be 15       	cp	r27, r14
    1992:	08 f0       	brcs	.+2      	; 0x1996 <__vector_14+0x134>
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	75 2b       	or	r23, r21
    1998:	f7 0c       	add	r15, r7
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	f7 14       	cp	r15, r7
    199e:	08 f0       	brcs	.+2      	; 0x19a2 <__vector_14+0x140>
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	7f 0d       	add	r23, r15
    19a4:	51 e0       	ldi	r21, 0x01	; 1
    19a6:	7f 15       	cp	r23, r15
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <__vector_14+0x14a>
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	65 2b       	or	r22, r21
    19ae:	09 0d       	add	r16, r9
    19b0:	51 e0       	ldi	r21, 0x01	; 1
    19b2:	09 15       	cp	r16, r9
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <__vector_14+0x156>
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	60 0f       	add	r22, r16
    19ba:	ff 24       	eor	r15, r15
    19bc:	f3 94       	inc	r15
    19be:	60 17       	cp	r22, r16
    19c0:	08 f0       	brcs	.+2      	; 0x19c4 <__vector_14+0x162>
    19c2:	ff 24       	eor	r15, r15
    19c4:	5f 29       	or	r21, r15
    19c6:	41 0f       	add	r20, r17
    19c8:	54 0f       	add	r21, r20
    19ca:	a9 82       	std	Y+1, r10	; 0x01
    19cc:	aa 83       	std	Y+2, r26	; 0x02
    19ce:	fb 83       	std	Y+3, r31	; 0x03
    19d0:	ec 83       	std	Y+4, r30	; 0x04
    19d2:	bd 83       	std	Y+5, r27	; 0x05
    19d4:	7e 83       	std	Y+6, r23	; 0x06
    19d6:	6f 83       	std	Y+7, r22	; 0x07
    19d8:	58 87       	std	Y+8, r21	; 0x08
    19da:	03 96       	adiw	r24, 0x03	; 3
//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
	volatile int64_t sum = 0;
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    19dc:	8c 30       	cpi	r24, 0x0C	; 12
    19de:	91 05       	cpc	r25, r1
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <__vector_14+0x182>
    19e2:	73 cf       	rjmp	.-282    	; 0x18ca <__vector_14+0x68>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
		
	sum = sum / 4;
    19e4:	e9 80       	ldd	r14, Y+1	; 0x01
    19e6:	fa 80       	ldd	r15, Y+2	; 0x02
    19e8:	0b 81       	ldd	r16, Y+3	; 0x03
    19ea:	1c 81       	ldd	r17, Y+4	; 0x04
    19ec:	bd 81       	ldd	r27, Y+5	; 0x05
    19ee:	ae 81       	ldd	r26, Y+6	; 0x06
    19f0:	ff 81       	ldd	r31, Y+7	; 0x07
    19f2:	e8 85       	ldd	r30, Y+8	; 0x08
    19f4:	2e 2d       	mov	r18, r14
    19f6:	3f 2d       	mov	r19, r15
    19f8:	40 2f       	mov	r20, r16
    19fa:	51 2f       	mov	r21, r17
    19fc:	6b 2f       	mov	r22, r27
    19fe:	7a 2f       	mov	r23, r26
    1a00:	8f 2f       	mov	r24, r31
    1a02:	9e 2f       	mov	r25, r30
    1a04:	ee 23       	and	r30, r30
    1a06:	0c f0       	brlt	.+2      	; 0x1a0a <__vector_14+0x1a8>
    1a08:	4a c0       	rjmp	.+148    	; 0x1a9e <__vector_14+0x23c>
    1a0a:	93 e0       	ldi	r25, 0x03	; 3
    1a0c:	e9 0e       	add	r14, r25
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	e2 16       	cp	r14, r18
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__vector_14+0x1b4>
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	21 e0       	ldi	r18, 0x01	; 1
    1a18:	f3 16       	cp	r15, r19
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <__vector_14+0x1bc>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	39 2f       	mov	r19, r25
    1a20:	3f 0d       	add	r19, r15
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	3f 15       	cp	r19, r15
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <__vector_14+0x1c8>
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	29 2b       	or	r18, r25
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	04 17       	cp	r16, r20
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <__vector_14+0x1d2>
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	42 2f       	mov	r20, r18
    1a36:	40 0f       	add	r20, r16
    1a38:	21 e0       	ldi	r18, 0x01	; 1
    1a3a:	40 17       	cp	r20, r16
    1a3c:	08 f0       	brcs	.+2      	; 0x1a40 <__vector_14+0x1de>
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	92 2b       	or	r25, r18
    1a42:	21 e0       	ldi	r18, 0x01	; 1
    1a44:	15 17       	cp	r17, r21
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <__vector_14+0x1e8>
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	59 2f       	mov	r21, r25
    1a4c:	51 0f       	add	r21, r17
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	51 17       	cp	r21, r17
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <__vector_14+0x1f4>
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	29 2b       	or	r18, r25
    1a58:	91 e0       	ldi	r25, 0x01	; 1
    1a5a:	b6 17       	cp	r27, r22
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <__vector_14+0x1fe>
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	62 2f       	mov	r22, r18
    1a62:	6b 0f       	add	r22, r27
    1a64:	21 e0       	ldi	r18, 0x01	; 1
    1a66:	6b 17       	cp	r22, r27
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <__vector_14+0x20a>
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	92 2b       	or	r25, r18
    1a6e:	21 e0       	ldi	r18, 0x01	; 1
    1a70:	a7 17       	cp	r26, r23
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <__vector_14+0x214>
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	79 2f       	mov	r23, r25
    1a78:	7a 0f       	add	r23, r26
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	7a 17       	cp	r23, r26
    1a7e:	08 f0       	brcs	.+2      	; 0x1a82 <__vector_14+0x220>
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	29 2b       	or	r18, r25
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	f8 17       	cp	r31, r24
    1a88:	08 f0       	brcs	.+2      	; 0x1a8c <__vector_14+0x22a>
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	82 2f       	mov	r24, r18
    1a8e:	8f 0f       	add	r24, r31
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	8f 17       	cp	r24, r31
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <__vector_14+0x236>
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	92 2b       	or	r25, r18
    1a9a:	2e 2d       	mov	r18, r14
    1a9c:	9e 0f       	add	r25, r30
    1a9e:	02 e0       	ldi	r16, 0x02	; 2
    1aa0:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__ashrdi3>
    1aa4:	29 83       	std	Y+1, r18	; 0x01
    1aa6:	3a 83       	std	Y+2, r19	; 0x02
    1aa8:	4b 83       	std	Y+3, r20	; 0x03
    1aaa:	5c 83       	std	Y+4, r21	; 0x04
    1aac:	6d 83       	std	Y+5, r22	; 0x05
    1aae:	7e 83       	std	Y+6, r23	; 0x06
    1ab0:	8f 83       	std	Y+7, r24	; 0x07
    1ab2:	98 87       	std	Y+8, r25	; 0x08
	ADC_BUFFER[sampleCount%ADC_buffer_size] = (int32_t)(sum * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    1ab4:	60 91 65 50 	lds	r22, 0x5065
    1ab8:	70 91 66 50 	lds	r23, 0x5066
    1abc:	80 91 67 50 	lds	r24, 0x5067
    1ac0:	90 91 68 50 	lds	r25, 0x5068
    1ac4:	19 81       	ldd	r17, Y+1	; 0x01
    1ac6:	0a 81       	ldd	r16, Y+2	; 0x02
    1ac8:	fb 80       	ldd	r15, Y+3	; 0x03
    1aca:	ec 80       	ldd	r14, Y+4	; 0x04
    1acc:	dd 80       	ldd	r13, Y+5	; 0x05
    1ace:	ce 80       	ldd	r12, Y+6	; 0x06
    1ad0:	bf 80       	ldd	r11, Y+7	; 0x07
    1ad2:	a8 84       	ldd	r10, Y+8	; 0x08
    1ad4:	20 91 a7 50 	lds	r18, 0x50A7
    1ad8:	30 91 a8 50 	lds	r19, 0x50A8
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	80 90 63 50 	lds	r8, 0x5063
    1af4:	90 90 64 50 	lds	r9, 0x5064
    1af8:	88 0e       	add	r8, r24
    1afa:	99 1e       	adc	r9, r25
    1afc:	21 2f       	mov	r18, r17
    1afe:	30 2f       	mov	r19, r16
    1b00:	4f 2d       	mov	r20, r15
    1b02:	5e 2d       	mov	r21, r14
    1b04:	6d 2d       	mov	r22, r13
    1b06:	7c 2d       	mov	r23, r12
    1b08:	8b 2d       	mov	r24, r11
    1b0a:	9a 2d       	mov	r25, r10
    1b0c:	0f 2e       	mov	r0, r31
    1b0e:	f0 ea       	ldi	r31, 0xA0	; 160
    1b10:	af 2e       	mov	r10, r31
    1b12:	f0 2d       	mov	r31, r0
    1b14:	0f 2e       	mov	r0, r31
    1b16:	f5 e2       	ldi	r31, 0x25	; 37
    1b18:	bf 2e       	mov	r11, r31
    1b1a:	f0 2d       	mov	r31, r0
    1b1c:	0f 2e       	mov	r0, r31
    1b1e:	f6 e2       	ldi	r31, 0x26	; 38
    1b20:	cf 2e       	mov	r12, r31
    1b22:	f0 2d       	mov	r31, r0
    1b24:	dd 24       	eor	r13, r13
    1b26:	ee 24       	eor	r14, r14
    1b28:	ff 24       	eor	r15, r15
    1b2a:	00 e0       	ldi	r16, 0x00	; 0
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <__muldi3>
    1b32:	aa 24       	eor	r10, r10
    1b34:	aa 94       	dec	r10
    1b36:	bb 24       	eor	r11, r11
    1b38:	ba 94       	dec	r11
    1b3a:	0f 2e       	mov	r0, r31
    1b3c:	ff e7       	ldi	r31, 0x7F	; 127
    1b3e:	cf 2e       	mov	r12, r31
    1b40:	f0 2d       	mov	r31, r0
    1b42:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divdi3>
    1b46:	01 e0       	ldi	r16, 0x01	; 1
    1b48:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__ashldi3>
    1b4c:	0f 2e       	mov	r0, r31
    1b4e:	f3 e0       	ldi	r31, 0x03	; 3
    1b50:	af 2e       	mov	r10, r31
    1b52:	f0 2d       	mov	r31, r0
    1b54:	bb 24       	eor	r11, r11
    1b56:	cc 24       	eor	r12, r12
    1b58:	00 e0       	ldi	r16, 0x00	; 0
    1b5a:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divdi3>
    1b5e:	f4 01       	movw	r30, r8
    1b60:	20 83       	st	Z, r18
    1b62:	31 83       	std	Z+1, r19	; 0x01
    1b64:	42 83       	std	Z+2, r20	; 0x02
    1b66:	53 83       	std	Z+3, r21	; 0x03
	if(write_to_FRAM){
    1b68:	80 91 48 40 	lds	r24, 0x4048
    1b6c:	88 23       	and	r24, r24
    1b6e:	e1 f0       	breq	.+56     	; 0x1ba8 <__vector_14+0x346>
		writeFRAM(((uint8_t*)ADC_BUFFER)+(sampleCount%ADC_buffer_size), 1);
    1b70:	60 91 65 50 	lds	r22, 0x5065
    1b74:	70 91 66 50 	lds	r23, 0x5066
    1b78:	80 91 67 50 	lds	r24, 0x5067
    1b7c:	90 91 68 50 	lds	r25, 0x5068
    1b80:	20 91 a7 50 	lds	r18, 0x50A7
    1b84:	30 91 a8 50 	lds	r19, 0x50A8
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	20 91 63 50 	lds	r18, 0x5063
    1b98:	30 91 64 50 	lds	r19, 0x5064
    1b9c:	82 0f       	add	r24, r18
    1b9e:	93 1f       	adc	r25, r19
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	0e 94 39 01 	call	0x272	; 0x272 <writeFRAM>
	}
	sampleCount++;
    1ba8:	80 91 65 50 	lds	r24, 0x5065
    1bac:	90 91 66 50 	lds	r25, 0x5066
    1bb0:	a0 91 67 50 	lds	r26, 0x5067
    1bb4:	b0 91 68 50 	lds	r27, 0x5068
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	b1 1d       	adc	r27, r1
    1bbe:	80 93 65 50 	sts	0x5065, r24
    1bc2:	90 93 66 50 	sts	0x5066, r25
    1bc6:	a0 93 67 50 	sts	0x5067, r26
    1bca:	b0 93 68 50 	sts	0x5068, r27

}
    1bce:	2c 96       	adiw	r28, 0x0c	; 12
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	ff 91       	pop	r31
    1bda:	ef 91       	pop	r30
    1bdc:	bf 91       	pop	r27
    1bde:	af 91       	pop	r26
    1be0:	9f 91       	pop	r25
    1be2:	8f 91       	pop	r24
    1be4:	7f 91       	pop	r23
    1be6:	6f 91       	pop	r22
    1be8:	5f 91       	pop	r21
    1bea:	4f 91       	pop	r20
    1bec:	3f 91       	pop	r19
    1bee:	2f 91       	pop	r18
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	cf 90       	pop	r12
    1bfc:	bf 90       	pop	r11
    1bfe:	af 90       	pop	r10
    1c00:	9f 90       	pop	r9
    1c02:	8f 90       	pop	r8
    1c04:	7f 90       	pop	r7
    1c06:	6f 90       	pop	r6
    1c08:	0f 90       	pop	r0
    1c0a:	0b be       	out	0x3b, r0	; 59
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <__vector_77>:
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	0b b6       	in	r0, 0x3b	; 59
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	6f 92       	push	r6
    1c26:	7f 92       	push	r7
    1c28:	8f 92       	push	r8
    1c2a:	9f 92       	push	r9
    1c2c:	af 92       	push	r10
    1c2e:	bf 92       	push	r11
    1c30:	cf 92       	push	r12
    1c32:	df 92       	push	r13
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	2f 93       	push	r18
    1c3e:	3f 93       	push	r19
    1c40:	4f 93       	push	r20
    1c42:	5f 93       	push	r21
    1c44:	6f 93       	push	r22
    1c46:	7f 93       	push	r23
    1c48:	8f 93       	push	r24
    1c4a:	9f 93       	push	r25
    1c4c:	af 93       	push	r26
    1c4e:	bf 93       	push	r27
    1c50:	ef 93       	push	r30
    1c52:	ff 93       	push	r31
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	2c 97       	sbiw	r28, 0x0c	; 12
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	de bf       	out	0x3e, r29	; 62

	volatile int64_t sum = 0;
    1c62:	19 82       	std	Y+1, r1	; 0x01
    1c64:	1a 82       	std	Y+2, r1	; 0x02
    1c66:	1b 82       	std	Y+3, r1	; 0x03
    1c68:	1c 82       	std	Y+4, r1	; 0x04
    1c6a:	1d 82       	std	Y+5, r1	; 0x05
    1c6c:	1e 82       	std	Y+6, r1	; 0x06
    1c6e:	1f 82       	std	Y+7, r1	; 0x07
    1c70:	18 86       	std	Y+8, r1	; 0x08
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    1c76:	20 e2       	ldi	r18, 0x20	; 32
    1c78:	3e e3       	ldi	r19, 0x3E	; 62
    1c7a:	88 24       	eor	r8, r8
    1c7c:	8a 94       	dec	r8
    1c7e:	ac 01       	movw	r20, r24
    1c80:	f9 01       	movw	r30, r18
    1c82:	e8 0f       	add	r30, r24
    1c84:	f9 1f       	adc	r31, r25
    1c86:	60 81       	ld	r22, Z
    1c88:	66 23       	and	r22, r22
    1c8a:	14 f4       	brge	.+4      	; 0x1c90 <__vector_77+0x7a>
    1c8c:	8c 86       	std	Y+12, r8	; 0x0c
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <__vector_77+0x7c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    1c90:	1c 86       	std	Y+12, r1	; 0x0c
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    1c92:	42 0f       	add	r20, r18
    1c94:	53 1f       	adc	r21, r19
    1c96:	fa 01       	movw	r30, r20
    1c98:	40 81       	ld	r20, Z
    1c9a:	4b 87       	std	Y+11, r20	; 0x0b
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	31 96       	adiw	r30, 0x01	; 1
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    1ca0:	e2 0f       	add	r30, r18
    1ca2:	f3 1f       	adc	r31, r19
    1ca4:	40 81       	ld	r20, Z
    1ca6:	4a 87       	std	Y+10, r20	; 0x0a
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    1ca8:	fc 01       	movw	r30, r24
    1caa:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    1cac:	e2 0f       	add	r30, r18
    1cae:	f3 1f       	adc	r31, r19
    1cb0:	40 81       	ld	r20, Z
    1cb2:	49 87       	std	Y+9, r20	; 0x09
		sum += currentSample;
    1cb4:	49 85       	ldd	r20, Y+9	; 0x09
    1cb6:	5a 85       	ldd	r21, Y+10	; 0x0a
    1cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbc:	a9 80       	ldd	r10, Y+1	; 0x01
    1cbe:	ba 80       	ldd	r11, Y+2	; 0x02
    1cc0:	cb 80       	ldd	r12, Y+3	; 0x03
    1cc2:	dc 80       	ldd	r13, Y+4	; 0x04
    1cc4:	ed 80       	ldd	r14, Y+5	; 0x05
    1cc6:	fe 80       	ldd	r15, Y+6	; 0x06
    1cc8:	0f 81       	ldd	r16, Y+7	; 0x07
    1cca:	18 85       	ldd	r17, Y+8	; 0x08
    1ccc:	b4 2f       	mov	r27, r20
    1cce:	a5 2f       	mov	r26, r21
    1cd0:	f6 2f       	mov	r31, r22
    1cd2:	e7 2f       	mov	r30, r23
    1cd4:	77 0f       	add	r23, r23
    1cd6:	44 0b       	sbc	r20, r20
    1cd8:	54 2f       	mov	r21, r20
    1cda:	ba 01       	movw	r22, r20
    1cdc:	64 2e       	mov	r6, r20
    1cde:	74 2e       	mov	r7, r20
    1ce0:	94 2e       	mov	r9, r20
    1ce2:	ab 0e       	add	r10, r27
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	ab 16       	cp	r10, r27
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <__vector_77+0xd6>
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	ba 0e       	add	r11, r26
    1cee:	51 e0       	ldi	r21, 0x01	; 1
    1cf0:	ba 16       	cp	r11, r26
    1cf2:	08 f0       	brcs	.+2      	; 0x1cf6 <__vector_77+0xe0>
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	a6 2f       	mov	r26, r22
    1cf8:	ab 0d       	add	r26, r11
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	ab 15       	cp	r26, r11
    1cfe:	08 f0       	brcs	.+2      	; 0x1d02 <__vector_77+0xec>
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	56 2b       	or	r21, r22
    1d04:	cf 0e       	add	r12, r31
    1d06:	61 e0       	ldi	r22, 0x01	; 1
    1d08:	cf 16       	cp	r12, r31
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <__vector_77+0xf8>
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	f5 2f       	mov	r31, r21
    1d10:	fc 0d       	add	r31, r12
    1d12:	51 e0       	ldi	r21, 0x01	; 1
    1d14:	fc 15       	cp	r31, r12
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <__vector_77+0x104>
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	65 2b       	or	r22, r21
    1d1c:	de 0e       	add	r13, r30
    1d1e:	51 e0       	ldi	r21, 0x01	; 1
    1d20:	de 16       	cp	r13, r30
    1d22:	08 f0       	brcs	.+2      	; 0x1d26 <__vector_77+0x110>
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	e6 2f       	mov	r30, r22
    1d28:	ed 0d       	add	r30, r13
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	ed 15       	cp	r30, r13
    1d2e:	08 f0       	brcs	.+2      	; 0x1d32 <__vector_77+0x11c>
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	56 2b       	or	r21, r22
    1d34:	e6 0c       	add	r14, r6
    1d36:	71 e0       	ldi	r23, 0x01	; 1
    1d38:	e6 14       	cp	r14, r6
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <__vector_77+0x128>
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	b5 2f       	mov	r27, r21
    1d40:	be 0d       	add	r27, r14
    1d42:	51 e0       	ldi	r21, 0x01	; 1
    1d44:	be 15       	cp	r27, r14
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <__vector_77+0x134>
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	75 2b       	or	r23, r21
    1d4c:	f7 0c       	add	r15, r7
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	f7 14       	cp	r15, r7
    1d52:	08 f0       	brcs	.+2      	; 0x1d56 <__vector_77+0x140>
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	7f 0d       	add	r23, r15
    1d58:	51 e0       	ldi	r21, 0x01	; 1
    1d5a:	7f 15       	cp	r23, r15
    1d5c:	08 f0       	brcs	.+2      	; 0x1d60 <__vector_77+0x14a>
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	65 2b       	or	r22, r21
    1d62:	09 0d       	add	r16, r9
    1d64:	51 e0       	ldi	r21, 0x01	; 1
    1d66:	09 15       	cp	r16, r9
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <__vector_77+0x156>
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	60 0f       	add	r22, r16
    1d6e:	ff 24       	eor	r15, r15
    1d70:	f3 94       	inc	r15
    1d72:	60 17       	cp	r22, r16
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <__vector_77+0x162>
    1d76:	ff 24       	eor	r15, r15
    1d78:	5f 29       	or	r21, r15
    1d7a:	41 0f       	add	r20, r17
    1d7c:	54 0f       	add	r21, r20
    1d7e:	a9 82       	std	Y+1, r10	; 0x01
    1d80:	aa 83       	std	Y+2, r26	; 0x02
    1d82:	fb 83       	std	Y+3, r31	; 0x03
    1d84:	ec 83       	std	Y+4, r30	; 0x04
    1d86:	bd 83       	std	Y+5, r27	; 0x05
    1d88:	7e 83       	std	Y+6, r23	; 0x06
    1d8a:	6f 83       	std	Y+7, r22	; 0x07
    1d8c:	58 87       	std	Y+8, r21	; 0x08
    1d8e:	03 96       	adiw	r24, 0x03	; 3
ISR(TCD0_OVF_vect) {

	volatile int64_t sum = 0;
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    1d90:	8c 30       	cpi	r24, 0x0C	; 12
    1d92:	91 05       	cpc	r25, r1
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <__vector_77+0x182>
    1d96:	73 cf       	rjmp	.-282    	; 0x1c7e <__vector_77+0x68>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
		
	sum = sum / 4;
    1d98:	e9 80       	ldd	r14, Y+1	; 0x01
    1d9a:	fa 80       	ldd	r15, Y+2	; 0x02
    1d9c:	0b 81       	ldd	r16, Y+3	; 0x03
    1d9e:	1c 81       	ldd	r17, Y+4	; 0x04
    1da0:	bd 81       	ldd	r27, Y+5	; 0x05
    1da2:	ae 81       	ldd	r26, Y+6	; 0x06
    1da4:	ff 81       	ldd	r31, Y+7	; 0x07
    1da6:	e8 85       	ldd	r30, Y+8	; 0x08
    1da8:	2e 2d       	mov	r18, r14
    1daa:	3f 2d       	mov	r19, r15
    1dac:	40 2f       	mov	r20, r16
    1dae:	51 2f       	mov	r21, r17
    1db0:	6b 2f       	mov	r22, r27
    1db2:	7a 2f       	mov	r23, r26
    1db4:	8f 2f       	mov	r24, r31
    1db6:	9e 2f       	mov	r25, r30
    1db8:	ee 23       	and	r30, r30
    1dba:	0c f0       	brlt	.+2      	; 0x1dbe <__vector_77+0x1a8>
    1dbc:	4a c0       	rjmp	.+148    	; 0x1e52 <__vector_77+0x23c>
    1dbe:	93 e0       	ldi	r25, 0x03	; 3
    1dc0:	e9 0e       	add	r14, r25
    1dc2:	91 e0       	ldi	r25, 0x01	; 1
    1dc4:	e2 16       	cp	r14, r18
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <__vector_77+0x1b4>
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	21 e0       	ldi	r18, 0x01	; 1
    1dcc:	f3 16       	cp	r15, r19
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <__vector_77+0x1bc>
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	39 2f       	mov	r19, r25
    1dd4:	3f 0d       	add	r19, r15
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	3f 15       	cp	r19, r15
    1dda:	08 f0       	brcs	.+2      	; 0x1dde <__vector_77+0x1c8>
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	29 2b       	or	r18, r25
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	04 17       	cp	r16, r20
    1de4:	08 f0       	brcs	.+2      	; 0x1de8 <__vector_77+0x1d2>
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	42 2f       	mov	r20, r18
    1dea:	40 0f       	add	r20, r16
    1dec:	21 e0       	ldi	r18, 0x01	; 1
    1dee:	40 17       	cp	r20, r16
    1df0:	08 f0       	brcs	.+2      	; 0x1df4 <__vector_77+0x1de>
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	92 2b       	or	r25, r18
    1df6:	21 e0       	ldi	r18, 0x01	; 1
    1df8:	15 17       	cp	r17, r21
    1dfa:	08 f0       	brcs	.+2      	; 0x1dfe <__vector_77+0x1e8>
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	59 2f       	mov	r21, r25
    1e00:	51 0f       	add	r21, r17
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	51 17       	cp	r21, r17
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <__vector_77+0x1f4>
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	29 2b       	or	r18, r25
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	b6 17       	cp	r27, r22
    1e10:	08 f0       	brcs	.+2      	; 0x1e14 <__vector_77+0x1fe>
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	62 2f       	mov	r22, r18
    1e16:	6b 0f       	add	r22, r27
    1e18:	21 e0       	ldi	r18, 0x01	; 1
    1e1a:	6b 17       	cp	r22, r27
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <__vector_77+0x20a>
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	92 2b       	or	r25, r18
    1e22:	21 e0       	ldi	r18, 0x01	; 1
    1e24:	a7 17       	cp	r26, r23
    1e26:	08 f0       	brcs	.+2      	; 0x1e2a <__vector_77+0x214>
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	79 2f       	mov	r23, r25
    1e2c:	7a 0f       	add	r23, r26
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	7a 17       	cp	r23, r26
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <__vector_77+0x220>
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	29 2b       	or	r18, r25
    1e38:	91 e0       	ldi	r25, 0x01	; 1
    1e3a:	f8 17       	cp	r31, r24
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <__vector_77+0x22a>
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	82 2f       	mov	r24, r18
    1e42:	8f 0f       	add	r24, r31
    1e44:	21 e0       	ldi	r18, 0x01	; 1
    1e46:	8f 17       	cp	r24, r31
    1e48:	08 f0       	brcs	.+2      	; 0x1e4c <__vector_77+0x236>
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	92 2b       	or	r25, r18
    1e4e:	2e 2d       	mov	r18, r14
    1e50:	9e 0f       	add	r25, r30
    1e52:	02 e0       	ldi	r16, 0x02	; 2
    1e54:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__ashrdi3>
    1e58:	29 83       	std	Y+1, r18	; 0x01
    1e5a:	3a 83       	std	Y+2, r19	; 0x02
    1e5c:	4b 83       	std	Y+3, r20	; 0x03
    1e5e:	5c 83       	std	Y+4, r21	; 0x04
    1e60:	6d 83       	std	Y+5, r22	; 0x05
    1e62:	7e 83       	std	Y+6, r23	; 0x06
    1e64:	8f 83       	std	Y+7, r24	; 0x07
    1e66:	98 87       	std	Y+8, r25	; 0x08
	//get average of the 4 subsamples
	ADC_BUFFER[sampleCount%ADC_buffer_size] = (int32_t)(sum * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    1e68:	60 91 65 50 	lds	r22, 0x5065
    1e6c:	70 91 66 50 	lds	r23, 0x5066
    1e70:	80 91 67 50 	lds	r24, 0x5067
    1e74:	90 91 68 50 	lds	r25, 0x5068
    1e78:	19 81       	ldd	r17, Y+1	; 0x01
    1e7a:	0a 81       	ldd	r16, Y+2	; 0x02
    1e7c:	fb 80       	ldd	r15, Y+3	; 0x03
    1e7e:	ec 80       	ldd	r14, Y+4	; 0x04
    1e80:	dd 80       	ldd	r13, Y+5	; 0x05
    1e82:	ce 80       	ldd	r12, Y+6	; 0x06
    1e84:	bf 80       	ldd	r11, Y+7	; 0x07
    1e86:	a8 84       	ldd	r10, Y+8	; 0x08
    1e88:	20 91 a7 50 	lds	r18, 0x50A7
    1e8c:	30 91 a8 50 	lds	r19, 0x50A8
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	80 90 63 50 	lds	r8, 0x5063
    1ea8:	90 90 64 50 	lds	r9, 0x5064
    1eac:	88 0e       	add	r8, r24
    1eae:	99 1e       	adc	r9, r25
    1eb0:	21 2f       	mov	r18, r17
    1eb2:	30 2f       	mov	r19, r16
    1eb4:	4f 2d       	mov	r20, r15
    1eb6:	5e 2d       	mov	r21, r14
    1eb8:	6d 2d       	mov	r22, r13
    1eba:	7c 2d       	mov	r23, r12
    1ebc:	8b 2d       	mov	r24, r11
    1ebe:	9a 2d       	mov	r25, r10
    1ec0:	0f 2e       	mov	r0, r31
    1ec2:	f0 ea       	ldi	r31, 0xA0	; 160
    1ec4:	af 2e       	mov	r10, r31
    1ec6:	f0 2d       	mov	r31, r0
    1ec8:	0f 2e       	mov	r0, r31
    1eca:	f5 e2       	ldi	r31, 0x25	; 37
    1ecc:	bf 2e       	mov	r11, r31
    1ece:	f0 2d       	mov	r31, r0
    1ed0:	0f 2e       	mov	r0, r31
    1ed2:	f6 e2       	ldi	r31, 0x26	; 38
    1ed4:	cf 2e       	mov	r12, r31
    1ed6:	f0 2d       	mov	r31, r0
    1ed8:	dd 24       	eor	r13, r13
    1eda:	ee 24       	eor	r14, r14
    1edc:	ff 24       	eor	r15, r15
    1ede:	00 e0       	ldi	r16, 0x00	; 0
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <__muldi3>
    1ee6:	aa 24       	eor	r10, r10
    1ee8:	aa 94       	dec	r10
    1eea:	bb 24       	eor	r11, r11
    1eec:	ba 94       	dec	r11
    1eee:	0f 2e       	mov	r0, r31
    1ef0:	ff e7       	ldi	r31, 0x7F	; 127
    1ef2:	cf 2e       	mov	r12, r31
    1ef4:	f0 2d       	mov	r31, r0
    1ef6:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divdi3>
    1efa:	01 e0       	ldi	r16, 0x01	; 1
    1efc:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__ashldi3>
    1f00:	0f 2e       	mov	r0, r31
    1f02:	f3 e0       	ldi	r31, 0x03	; 3
    1f04:	af 2e       	mov	r10, r31
    1f06:	f0 2d       	mov	r31, r0
    1f08:	bb 24       	eor	r11, r11
    1f0a:	cc 24       	eor	r12, r12
    1f0c:	00 e0       	ldi	r16, 0x00	; 0
    1f0e:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divdi3>
    1f12:	f4 01       	movw	r30, r8
    1f14:	20 83       	st	Z, r18
    1f16:	31 83       	std	Z+1, r19	; 0x01
    1f18:	42 83       	std	Z+2, r20	; 0x02
    1f1a:	53 83       	std	Z+3, r21	; 0x03
	if(write_to_FRAM){
    1f1c:	80 91 48 40 	lds	r24, 0x4048
    1f20:	88 23       	and	r24, r24
    1f22:	e1 f0       	breq	.+56     	; 0x1f5c <__vector_77+0x346>
		writeFRAM(((uint8_t*)ADC_BUFFER)+(sampleCount%ADC_buffer_size), 1);
    1f24:	60 91 65 50 	lds	r22, 0x5065
    1f28:	70 91 66 50 	lds	r23, 0x5066
    1f2c:	80 91 67 50 	lds	r24, 0x5067
    1f30:	90 91 68 50 	lds	r25, 0x5068
    1f34:	20 91 a7 50 	lds	r18, 0x50A7
    1f38:	30 91 a8 50 	lds	r19, 0x50A8
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	20 91 63 50 	lds	r18, 0x5063
    1f4c:	30 91 64 50 	lds	r19, 0x5064
    1f50:	82 0f       	add	r24, r18
    1f52:	93 1f       	adc	r25, r19
    1f54:	61 e0       	ldi	r22, 0x01	; 1
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	0e 94 39 01 	call	0x272	; 0x272 <writeFRAM>
	}
	sampleCount++;
    1f5c:	80 91 65 50 	lds	r24, 0x5065
    1f60:	90 91 66 50 	lds	r25, 0x5066
    1f64:	a0 91 67 50 	lds	r26, 0x5067
    1f68:	b0 91 68 50 	lds	r27, 0x5068
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	a1 1d       	adc	r26, r1
    1f70:	b1 1d       	adc	r27, r1
    1f72:	80 93 65 50 	sts	0x5065, r24
    1f76:	90 93 66 50 	sts	0x5066, r25
    1f7a:	a0 93 67 50 	sts	0x5067, r26
    1f7e:	b0 93 68 50 	sts	0x5068, r27
}
    1f82:	2c 96       	adiw	r28, 0x0c	; 12
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	ff 91       	pop	r31
    1f8e:	ef 91       	pop	r30
    1f90:	bf 91       	pop	r27
    1f92:	af 91       	pop	r26
    1f94:	9f 91       	pop	r25
    1f96:	8f 91       	pop	r24
    1f98:	7f 91       	pop	r23
    1f9a:	6f 91       	pop	r22
    1f9c:	5f 91       	pop	r21
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	cf 90       	pop	r12
    1fb0:	bf 90       	pop	r11
    1fb2:	af 90       	pop	r10
    1fb4:	9f 90       	pop	r9
    1fb6:	8f 90       	pop	r8
    1fb8:	7f 90       	pop	r7
    1fba:	6f 90       	pop	r6
    1fbc:	0f 90       	pop	r0
    1fbe:	0b be       	out	0x3b, r0	; 59
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	0f 90       	pop	r0
    1fc6:	1f 90       	pop	r1
    1fc8:	18 95       	reti

00001fca <sampleCurrentChannel>:

//sample an axis of accelerometer with ADC
void sampleCurrentChannel() {
	
	PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	e0 ea       	ldi	r30, 0xA0	; 160
    1fce:	f6 e0       	ldi	r31, 0x06	; 6
    1fd0:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1fd2:	8a ea       	ldi	r24, 0xAA	; 170
    1fd4:	e0 ec       	ldi	r30, 0xC0	; 192
    1fd6:	f8 e0       	ldi	r31, 0x08	; 8
    1fd8:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	88 23       	and	r24, r24
    1fde:	ec f7       	brge	.-6      	; 0x1fda <sampleCurrentChannel+0x10>
	SPIBuffer[SPICount] = SPIC.DATA;
    1fe0:	90 91 a0 50 	lds	r25, 0x50A0
    1fe4:	e0 ec       	ldi	r30, 0xC0	; 192
    1fe6:	f8 e0       	ldi	r31, 0x08	; 8
    1fe8:	83 81       	ldd	r24, Z+3	; 0x03
    1fea:	a0 e2       	ldi	r26, 0x20	; 32
    1fec:	be e3       	ldi	r27, 0x3E	; 62
    1fee:	a9 0f       	add	r26, r25
    1ff0:	b1 1d       	adc	r27, r1
    1ff2:	8c 93       	st	X, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1ff4:	8a ea       	ldi	r24, 0xAA	; 170
    1ff6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	88 23       	and	r24, r24
    1ffc:	ec f7       	brge	.-6      	; 0x1ff8 <sampleCurrentChannel+0x2e>
	SPIBuffer[SPICount+1] = SPIC.DATA;
    1ffe:	a0 91 a0 50 	lds	r26, 0x50A0
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e0 ec       	ldi	r30, 0xC0	; 192
    2006:	f8 e0       	ldi	r31, 0x08	; 8
    2008:	83 81       	ldd	r24, Z+3	; 0x03
    200a:	af 5d       	subi	r26, 0xDF	; 223
    200c:	b1 4c       	sbci	r27, 0xC1	; 193
    200e:	8c 93       	st	X, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    2010:	8a ea       	ldi	r24, 0xAA	; 170
    2012:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	88 23       	and	r24, r24
    2018:	ec f7       	brge	.-6      	; 0x2014 <sampleCurrentChannel+0x4a>
	SPIBuffer[SPICount+2] = SPIC.DATA;
    201a:	e0 91 a0 50 	lds	r30, 0x50A0
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	a0 ec       	ldi	r26, 0xC0	; 192
    2022:	b8 e0       	ldi	r27, 0x08	; 8
    2024:	13 96       	adiw	r26, 0x03	; 3
    2026:	8c 91       	ld	r24, X
    2028:	13 97       	sbiw	r26, 0x03	; 3
    202a:	ee 5d       	subi	r30, 0xDE	; 222
    202c:	f1 4c       	sbci	r31, 0xC1	; 193
    202e:	80 83       	st	Z, r24
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	e0 ea       	ldi	r30, 0xA0	; 160
    2034:	f6 e0       	ldi	r31, 0x06	; 6
    2036:	85 83       	std	Z+5, r24	; 0x05
	SPICount +=3;
    2038:	80 91 a0 50 	lds	r24, 0x50A0
    203c:	8d 5f       	subi	r24, 0xFD	; 253
    203e:	80 93 a0 50 	sts	0x50A0, r24
}
    2042:	08 95       	ret

00002044 <__vector_82>:
ISR(TCD0_CCC_vect) {
	sampleCurrentChannel();
}

//final averaging point
ISR(TCD0_CCD_vect) {
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	0b b6       	in	r0, 0x3b	; 59
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
	sampleCurrentChannel();
    206a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sampleCurrentChannel>
	SPICount = 0;
    206e:	10 92 a0 50 	sts	0x50A0, r1
}
    2072:	ff 91       	pop	r31
    2074:	ef 91       	pop	r30
    2076:	bf 91       	pop	r27
    2078:	af 91       	pop	r26
    207a:	9f 91       	pop	r25
    207c:	8f 91       	pop	r24
    207e:	7f 91       	pop	r23
    2080:	6f 91       	pop	r22
    2082:	5f 91       	pop	r21
    2084:	4f 91       	pop	r20
    2086:	3f 91       	pop	r19
    2088:	2f 91       	pop	r18
    208a:	0f 90       	pop	r0
    208c:	0b be       	out	0x3b, r0	; 59
    208e:	0f 90       	pop	r0
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	0f 90       	pop	r0
    2094:	1f 90       	pop	r1
    2096:	18 95       	reti

00002098 <__vector_81>:
ISR(TCD0_CCB_vect) {
	sampleCurrentChannel();
}

//third averaging point
ISR(TCD0_CCC_vect) {
    2098:	1f 92       	push	r1
    209a:	0f 92       	push	r0
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	0f 92       	push	r0
    20a0:	0b b6       	in	r0, 0x3b	; 59
    20a2:	0f 92       	push	r0
    20a4:	11 24       	eor	r1, r1
    20a6:	2f 93       	push	r18
    20a8:	3f 93       	push	r19
    20aa:	4f 93       	push	r20
    20ac:	5f 93       	push	r21
    20ae:	6f 93       	push	r22
    20b0:	7f 93       	push	r23
    20b2:	8f 93       	push	r24
    20b4:	9f 93       	push	r25
    20b6:	af 93       	push	r26
    20b8:	bf 93       	push	r27
    20ba:	ef 93       	push	r30
    20bc:	ff 93       	push	r31
	sampleCurrentChannel();
    20be:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sampleCurrentChannel>
}
    20c2:	ff 91       	pop	r31
    20c4:	ef 91       	pop	r30
    20c6:	bf 91       	pop	r27
    20c8:	af 91       	pop	r26
    20ca:	9f 91       	pop	r25
    20cc:	8f 91       	pop	r24
    20ce:	7f 91       	pop	r23
    20d0:	6f 91       	pop	r22
    20d2:	5f 91       	pop	r21
    20d4:	4f 91       	pop	r20
    20d6:	3f 91       	pop	r19
    20d8:	2f 91       	pop	r18
    20da:	0f 90       	pop	r0
    20dc:	0b be       	out	0x3b, r0	; 59
    20de:	0f 90       	pop	r0
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	0f 90       	pop	r0
    20e4:	1f 90       	pop	r1
    20e6:	18 95       	reti

000020e8 <__vector_80>:
//first averaging point
ISR(TCD0_CCA_vect) {
	sampleCurrentChannel();
}
//second averaging point
ISR(TCD0_CCB_vect) {
    20e8:	1f 92       	push	r1
    20ea:	0f 92       	push	r0
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	0f 92       	push	r0
    20f0:	0b b6       	in	r0, 0x3b	; 59
    20f2:	0f 92       	push	r0
    20f4:	11 24       	eor	r1, r1
    20f6:	2f 93       	push	r18
    20f8:	3f 93       	push	r19
    20fa:	4f 93       	push	r20
    20fc:	5f 93       	push	r21
    20fe:	6f 93       	push	r22
    2100:	7f 93       	push	r23
    2102:	8f 93       	push	r24
    2104:	9f 93       	push	r25
    2106:	af 93       	push	r26
    2108:	bf 93       	push	r27
    210a:	ef 93       	push	r30
    210c:	ff 93       	push	r31
	sampleCurrentChannel();
    210e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sampleCurrentChannel>
}
    2112:	ff 91       	pop	r31
    2114:	ef 91       	pop	r30
    2116:	bf 91       	pop	r27
    2118:	af 91       	pop	r26
    211a:	9f 91       	pop	r25
    211c:	8f 91       	pop	r24
    211e:	7f 91       	pop	r23
    2120:	6f 91       	pop	r22
    2122:	5f 91       	pop	r21
    2124:	4f 91       	pop	r20
    2126:	3f 91       	pop	r19
    2128:	2f 91       	pop	r18
    212a:	0f 90       	pop	r0
    212c:	0b be       	out	0x3b, r0	; 59
    212e:	0f 90       	pop	r0
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	0f 90       	pop	r0
    2134:	1f 90       	pop	r1
    2136:	18 95       	reti

00002138 <__vector_79>:
// 	enableADCMUX(FALSE);
	
}

//first averaging point
ISR(TCD0_CCA_vect) {
    2138:	1f 92       	push	r1
    213a:	0f 92       	push	r0
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	0f 92       	push	r0
    2140:	0b b6       	in	r0, 0x3b	; 59
    2142:	0f 92       	push	r0
    2144:	11 24       	eor	r1, r1
    2146:	2f 93       	push	r18
    2148:	3f 93       	push	r19
    214a:	4f 93       	push	r20
    214c:	5f 93       	push	r21
    214e:	6f 93       	push	r22
    2150:	7f 93       	push	r23
    2152:	8f 93       	push	r24
    2154:	9f 93       	push	r25
    2156:	af 93       	push	r26
    2158:	bf 93       	push	r27
    215a:	ef 93       	push	r30
    215c:	ff 93       	push	r31
	sampleCurrentChannel();
    215e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sampleCurrentChannel>
}
    2162:	ff 91       	pop	r31
    2164:	ef 91       	pop	r30
    2166:	bf 91       	pop	r27
    2168:	af 91       	pop	r26
    216a:	9f 91       	pop	r25
    216c:	8f 91       	pop	r24
    216e:	7f 91       	pop	r23
    2170:	6f 91       	pop	r22
    2172:	5f 91       	pop	r21
    2174:	4f 91       	pop	r20
    2176:	3f 91       	pop	r19
    2178:	2f 91       	pop	r18
    217a:	0f 90       	pop	r0
    217c:	0b be       	out	0x3b, r0	; 59
    217e:	0f 90       	pop	r0
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	0f 90       	pop	r0
    2184:	1f 90       	pop	r1
    2186:	18 95       	reti

00002188 <__vector_19>:
ISR(TCC0_CCC_vect) {
	sampleCurrentChannel();
}

//final averaging point. Also change ADC channel to sample the next accelerometer axis
ISR(TCC0_CCD_vect) {
    2188:	1f 92       	push	r1
    218a:	0f 92       	push	r0
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	0f 92       	push	r0
    2190:	0b b6       	in	r0, 0x3b	; 59
    2192:	0f 92       	push	r0
    2194:	11 24       	eor	r1, r1
    2196:	2f 93       	push	r18
    2198:	3f 93       	push	r19
    219a:	4f 93       	push	r20
    219c:	5f 93       	push	r21
    219e:	6f 93       	push	r22
    21a0:	7f 93       	push	r23
    21a2:	8f 93       	push	r24
    21a4:	9f 93       	push	r25
    21a6:	af 93       	push	r26
    21a8:	bf 93       	push	r27
    21aa:	ef 93       	push	r30
    21ac:	ff 93       	push	r31
	sampleCurrentChannel();
    21ae:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sampleCurrentChannel>
	SPICount = 0;
    21b2:	10 92 a0 50 	sts	0x50A0, r1
	if(PORTB.OUT & PIN1_bm) {
    21b6:	e0 e2       	ldi	r30, 0x20	; 32
    21b8:	f6 e0       	ldi	r31, 0x06	; 6
    21ba:	84 81       	ldd	r24, Z+4	; 0x04
    21bc:	81 ff       	sbrs	r24, 1
    21be:	0f c0       	rjmp	.+30     	; 0x21de <__vector_19+0x56>
		if (PORTA.OUT & PIN6_bm) PORTB.OUTTGL = PIN1_bm;
    21c0:	e0 e0       	ldi	r30, 0x00	; 0
    21c2:	f6 e0       	ldi	r31, 0x06	; 6
    21c4:	84 81       	ldd	r24, Z+4	; 0x04
    21c6:	86 ff       	sbrs	r24, 6
    21c8:	05 c0       	rjmp	.+10     	; 0x21d4 <__vector_19+0x4c>
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	e0 e2       	ldi	r30, 0x20	; 32
    21ce:	f6 e0       	ldi	r31, 0x06	; 6
    21d0:	87 83       	std	Z+7, r24	; 0x07
    21d2:	0d c0       	rjmp	.+26     	; 0x21ee <__vector_19+0x66>
		else PORTA.OUTTGL = PIN6_bm;
    21d4:	80 e4       	ldi	r24, 0x40	; 64
    21d6:	e0 e0       	ldi	r30, 0x00	; 0
    21d8:	f6 e0       	ldi	r31, 0x06	; 6
    21da:	87 83       	std	Z+7, r24	; 0x07
    21dc:	08 c0       	rjmp	.+16     	; 0x21ee <__vector_19+0x66>
	} else {
		PORTA.OUTCLR = PIN6_bm;
    21de:	80 e4       	ldi	r24, 0x40	; 64
    21e0:	e0 e0       	ldi	r30, 0x00	; 0
    21e2:	f6 e0       	ldi	r31, 0x06	; 6
    21e4:	86 83       	std	Z+6, r24	; 0x06
		PORTB.OUTSET = PIN1_bm;
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	e0 e2       	ldi	r30, 0x20	; 32
    21ea:	f6 e0       	ldi	r31, 0x06	; 6
    21ec:	85 83       	std	Z+5, r24	; 0x05
	}
	
}
    21ee:	ff 91       	pop	r31
    21f0:	ef 91       	pop	r30
    21f2:	bf 91       	pop	r27
    21f4:	af 91       	pop	r26
    21f6:	9f 91       	pop	r25
    21f8:	8f 91       	pop	r24
    21fa:	7f 91       	pop	r23
    21fc:	6f 91       	pop	r22
    21fe:	5f 91       	pop	r21
    2200:	4f 91       	pop	r20
    2202:	3f 91       	pop	r19
    2204:	2f 91       	pop	r18
    2206:	0f 90       	pop	r0
    2208:	0b be       	out	0x3b, r0	; 59
    220a:	0f 90       	pop	r0
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	0f 90       	pop	r0
    2210:	1f 90       	pop	r1
    2212:	18 95       	reti

00002214 <__vector_18>:
ISR(TCC0_CCB_vect) {
	sampleCurrentChannel();
}

//third averaging point
ISR(TCC0_CCC_vect) {
    2214:	1f 92       	push	r1
    2216:	0f 92       	push	r0
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	0f 92       	push	r0
    221c:	0b b6       	in	r0, 0x3b	; 59
    221e:	0f 92       	push	r0
    2220:	11 24       	eor	r1, r1
    2222:	2f 93       	push	r18
    2224:	3f 93       	push	r19
    2226:	4f 93       	push	r20
    2228:	5f 93       	push	r21
    222a:	6f 93       	push	r22
    222c:	7f 93       	push	r23
    222e:	8f 93       	push	r24
    2230:	9f 93       	push	r25
    2232:	af 93       	push	r26
    2234:	bf 93       	push	r27
    2236:	ef 93       	push	r30
    2238:	ff 93       	push	r31
	sampleCurrentChannel();
    223a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sampleCurrentChannel>
}
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	bf 91       	pop	r27
    2244:	af 91       	pop	r26
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	7f 91       	pop	r23
    224c:	6f 91       	pop	r22
    224e:	5f 91       	pop	r21
    2250:	4f 91       	pop	r20
    2252:	3f 91       	pop	r19
    2254:	2f 91       	pop	r18
    2256:	0f 90       	pop	r0
    2258:	0b be       	out	0x3b, r0	; 59
    225a:	0f 90       	pop	r0
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	0f 90       	pop	r0
    2260:	1f 90       	pop	r1
    2262:	18 95       	reti

00002264 <__vector_17>:
ISR(TCC0_CCA_vect) {
	sampleCurrentChannel();
}

//second averaging point
ISR(TCC0_CCB_vect) {
    2264:	1f 92       	push	r1
    2266:	0f 92       	push	r0
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	0f 92       	push	r0
    226c:	0b b6       	in	r0, 0x3b	; 59
    226e:	0f 92       	push	r0
    2270:	11 24       	eor	r1, r1
    2272:	2f 93       	push	r18
    2274:	3f 93       	push	r19
    2276:	4f 93       	push	r20
    2278:	5f 93       	push	r21
    227a:	6f 93       	push	r22
    227c:	7f 93       	push	r23
    227e:	8f 93       	push	r24
    2280:	9f 93       	push	r25
    2282:	af 93       	push	r26
    2284:	bf 93       	push	r27
    2286:	ef 93       	push	r30
    2288:	ff 93       	push	r31
	sampleCurrentChannel();
    228a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sampleCurrentChannel>
}
    228e:	ff 91       	pop	r31
    2290:	ef 91       	pop	r30
    2292:	bf 91       	pop	r27
    2294:	af 91       	pop	r26
    2296:	9f 91       	pop	r25
    2298:	8f 91       	pop	r24
    229a:	7f 91       	pop	r23
    229c:	6f 91       	pop	r22
    229e:	5f 91       	pop	r21
    22a0:	4f 91       	pop	r20
    22a2:	3f 91       	pop	r19
    22a4:	2f 91       	pop	r18
    22a6:	0f 90       	pop	r0
    22a8:	0b be       	out	0x3b, r0	; 59
    22aa:	0f 90       	pop	r0
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	0f 90       	pop	r0
    22b0:	1f 90       	pop	r1
    22b2:	18 95       	reti

000022b4 <__vector_16>:
// 	enableADCMUX(FALSE);
	//ADCPower(FALSE);
}

//first averaging point
ISR(TCC0_CCA_vect) {
    22b4:	1f 92       	push	r1
    22b6:	0f 92       	push	r0
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	0f 92       	push	r0
    22bc:	0b b6       	in	r0, 0x3b	; 59
    22be:	0f 92       	push	r0
    22c0:	11 24       	eor	r1, r1
    22c2:	2f 93       	push	r18
    22c4:	3f 93       	push	r19
    22c6:	4f 93       	push	r20
    22c8:	5f 93       	push	r21
    22ca:	6f 93       	push	r22
    22cc:	7f 93       	push	r23
    22ce:	8f 93       	push	r24
    22d0:	9f 93       	push	r25
    22d2:	af 93       	push	r26
    22d4:	bf 93       	push	r27
    22d6:	ef 93       	push	r30
    22d8:	ff 93       	push	r31
	sampleCurrentChannel();
    22da:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sampleCurrentChannel>
}
    22de:	ff 91       	pop	r31
    22e0:	ef 91       	pop	r30
    22e2:	bf 91       	pop	r27
    22e4:	af 91       	pop	r26
    22e6:	9f 91       	pop	r25
    22e8:	8f 91       	pop	r24
    22ea:	7f 91       	pop	r23
    22ec:	6f 91       	pop	r22
    22ee:	5f 91       	pop	r21
    22f0:	4f 91       	pop	r20
    22f2:	3f 91       	pop	r19
    22f4:	2f 91       	pop	r18
    22f6:	0f 90       	pop	r0
    22f8:	0b be       	out	0x3b, r0	; 59
    22fa:	0f 90       	pop	r0
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	0f 90       	pop	r0
    2300:	1f 90       	pop	r1
    2302:	18 95       	reti

00002304 <writeSE2FRAM>:
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	28 97       	sbiw	r28, 0x08	; 8
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	de bf       	out	0x3e, r29	; 62

	volatile int32_t sum = 0;
    2318:	19 82       	std	Y+1, r1	; 0x01
    231a:	1a 82       	std	Y+2, r1	; 0x02
    231c:	1b 82       	std	Y+3, r1	; 0x03
    231e:	1c 82       	std	Y+4, r1	; 0x04
	volatile int32_t currentSample;
	sampleCount++;
    2320:	80 91 65 50 	lds	r24, 0x5065
    2324:	90 91 66 50 	lds	r25, 0x5066
    2328:	a0 91 67 50 	lds	r26, 0x5067
    232c:	b0 91 68 50 	lds	r27, 0x5068
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	a1 1d       	adc	r26, r1
    2334:	b1 1d       	adc	r27, r1
    2336:	80 93 65 50 	sts	0x5065, r24
    233a:	90 93 66 50 	sts	0x5066, r25
    233e:	a0 93 67 50 	sts	0x5067, r26
    2342:	b0 93 68 50 	sts	0x5068, r27
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2346:	80 ed       	ldi	r24, 0xD0	; 208
    2348:	80 93 c0 08 	sts	0x08C0, r24
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    2350:	00 e2       	ldi	r16, 0x20	; 32
    2352:	1e e3       	ldi	r17, 0x3E	; 62
    2354:	ff 24       	eor	r15, r15
    2356:	fa 94       	dec	r15
    2358:	c9 01       	movw	r24, r18
    235a:	f8 01       	movw	r30, r16
    235c:	e2 0f       	add	r30, r18
    235e:	f3 1f       	adc	r31, r19
    2360:	40 81       	ld	r20, Z
    2362:	44 23       	and	r20, r20
    2364:	14 f4       	brge	.+4      	; 0x236a <writeSE2FRAM+0x66>
    2366:	f8 86       	std	Y+8, r15	; 0x08
    2368:	01 c0       	rjmp	.+2      	; 0x236c <writeSE2FRAM+0x68>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    236a:	18 86       	std	Y+8, r1	; 0x08
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    236c:	80 0f       	add	r24, r16
    236e:	91 1f       	adc	r25, r17
    2370:	fc 01       	movw	r30, r24
    2372:	80 81       	ld	r24, Z
    2374:	8f 83       	std	Y+7, r24	; 0x07
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    2376:	f9 01       	movw	r30, r18
    2378:	31 96       	adiw	r30, 0x01	; 1
	
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    237a:	e0 0f       	add	r30, r16
    237c:	f1 1f       	adc	r31, r17
    237e:	80 81       	ld	r24, Z
    2380:	8e 83       	std	Y+6, r24	; 0x06
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    2382:	f9 01       	movw	r30, r18
    2384:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    2386:	e0 0f       	add	r30, r16
    2388:	f1 1f       	adc	r31, r17
    238a:	80 81       	ld	r24, Z
    238c:	8d 83       	std	Y+5, r24	; 0x05
		sum += currentSample;
    238e:	49 81       	ldd	r20, Y+1	; 0x01
    2390:	5a 81       	ldd	r21, Y+2	; 0x02
    2392:	6b 81       	ldd	r22, Y+3	; 0x03
    2394:	7c 81       	ldd	r23, Y+4	; 0x04
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	af 81       	ldd	r26, Y+7	; 0x07
    239c:	b8 85       	ldd	r27, Y+8	; 0x08
    239e:	84 0f       	add	r24, r20
    23a0:	95 1f       	adc	r25, r21
    23a2:	a6 1f       	adc	r26, r22
    23a4:	b7 1f       	adc	r27, r23
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	ab 83       	std	Y+3, r26	; 0x03
    23ac:	bc 83       	std	Y+4, r27	; 0x04
    23ae:	2d 5f       	subi	r18, 0xFD	; 253
    23b0:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile int32_t currentSample;
	sampleCount++;
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	
	for(uint8_t i = 0; i < 12; i+=3) {
    23b2:	2c 30       	cpi	r18, 0x0C	; 12
    23b4:	31 05       	cpc	r19, r1
    23b6:	81 f6       	brne	.-96     	; 0x2358 <writeSE2FRAM+0x54>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
	
	sum = sum / 4;
    23b8:	69 81       	ldd	r22, Y+1	; 0x01
    23ba:	7a 81       	ldd	r23, Y+2	; 0x02
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	24 e0       	ldi	r18, 0x04	; 4
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <__divmodsi4>
    23cc:	29 83       	std	Y+1, r18	; 0x01
    23ce:	3a 83       	std	Y+2, r19	; 0x02
    23d0:	4b 83       	std	Y+3, r20	; 0x03
    23d2:	5c 83       	std	Y+4, r21	; 0x04
	SPIBuffer[2] = *(((uint8_t*)&sum)+0);
    23d4:	29 81       	ldd	r18, Y+1	; 0x01
    23d6:	82 e2       	ldi	r24, 0x22	; 34
    23d8:	9e e3       	ldi	r25, 0x3E	; 62
    23da:	20 93 22 3e 	sts	0x3E22, r18
	SPIBuffer[1] = *(((uint8_t*)&sum)+1);
    23de:	2a 81       	ldd	r18, Y+2	; 0x02
    23e0:	fc 01       	movw	r30, r24
    23e2:	31 97       	sbiw	r30, 0x01	; 1
    23e4:	20 83       	st	Z, r18
	SPIBuffer[0] = *(((uint8_t*)&sum)+2);
    23e6:	2b 81       	ldd	r18, Y+3	; 0x03
    23e8:	02 97       	sbiw	r24, 0x02	; 2
    23ea:	fc 01       	movw	r30, r24
    23ec:	20 83       	st	Z, r18


	
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    23ee:	80 e1       	ldi	r24, 0x10	; 16
    23f0:	e0 e4       	ldi	r30, 0x40	; 64
    23f2:	f6 e0       	ldi	r31, 0x06	; 6
    23f4:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    23f6:	88 e0       	ldi	r24, 0x08	; 8
    23f8:	e0 e2       	ldi	r30, 0x20	; 32
    23fa:	f6 e0       	ldi	r31, 0x06	; 6
    23fc:	86 83       	std	Z+6, r24	; 0x06
	nop();
    23fe:	00 00       	nop
	SPIC.DATA = FR_WREN;
    2400:	86 e0       	ldi	r24, 0x06	; 6
    2402:	e0 ec       	ldi	r30, 0xC0	; 192
    2404:	f8 e0       	ldi	r31, 0x08	; 8
    2406:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	88 23       	and	r24, r24
    240c:	ec f7       	brge	.-6      	; 0x2408 <writeSE2FRAM+0x104>
	SPIBuffer[12] = SPIC.DATA;
    240e:	e0 ec       	ldi	r30, 0xC0	; 192
    2410:	f8 e0       	ldi	r31, 0x08	; 8
    2412:	83 81       	ldd	r24, Z+3	; 0x03
    2414:	80 93 2c 3e 	sts	0x3E2C, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
    2418:	a0 e2       	ldi	r26, 0x20	; 32
    241a:	b6 e0       	ldi	r27, 0x06	; 6
    241c:	88 e0       	ldi	r24, 0x08	; 8
    241e:	15 96       	adiw	r26, 0x05	; 5
    2420:	8c 93       	st	X, r24
    2422:	15 97       	sbiw	r26, 0x05	; 5
	nop(); // time for CS_FRAM to accept high signal
    2424:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2426:	16 96       	adiw	r26, 0x06	; 6
    2428:	8c 93       	st	X, r24
    242a:	16 97       	sbiw	r26, 0x06	; 6
	nop();
    242c:	00 00       	nop
	SPIC.DATA = FR_WRITE;
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	88 23       	and	r24, r24
    2436:	ec f7       	brge	.-6      	; 0x2432 <writeSE2FRAM+0x12e>
	SPIBuffer[12] = SPIC.DATA;
    2438:	e0 ec       	ldi	r30, 0xC0	; 192
    243a:	f8 e0       	ldi	r31, 0x08	; 8
    243c:	83 81       	ldd	r24, Z+3	; 0x03
    243e:	80 93 2c 3e 	sts	0x3E2C, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    2442:	80 91 1e 3e 	lds	r24, 0x3E1E
    2446:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	88 23       	and	r24, r24
    244c:	ec f7       	brge	.-6      	; 0x2448 <writeSE2FRAM+0x144>
	SPIBuffer[12] = SPIC.DATA;
    244e:	e0 ec       	ldi	r30, 0xC0	; 192
    2450:	f8 e0       	ldi	r31, 0x08	; 8
    2452:	83 81       	ldd	r24, Z+3	; 0x03
    2454:	80 93 2c 3e 	sts	0x3E2C, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
    2458:	80 91 1d 3e 	lds	r24, 0x3E1D
    245c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	88 23       	and	r24, r24
    2462:	ec f7       	brge	.-6      	; 0x245e <writeSE2FRAM+0x15a>
	SPIBuffer[12] = SPIC.DATA;
    2464:	e0 ec       	ldi	r30, 0xC0	; 192
    2466:	f8 e0       	ldi	r31, 0x08	; 8
    2468:	83 81       	ldd	r24, Z+3	; 0x03
    246a:	80 93 2c 3e 	sts	0x3E2C, r24
	SPIC.DATA = SPIBuffer[0];
    246e:	80 91 20 3e 	lds	r24, 0x3E20
    2472:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	88 23       	and	r24, r24
    2478:	ec f7       	brge	.-6      	; 0x2474 <writeSE2FRAM+0x170>
	SPIBuffer[12] = SPIC.DATA;
    247a:	e0 ec       	ldi	r30, 0xC0	; 192
    247c:	f8 e0       	ldi	r31, 0x08	; 8
    247e:	83 81       	ldd	r24, Z+3	; 0x03
    2480:	80 93 2c 3e 	sts	0x3E2C, r24
	SPIC.DATA = SPIBuffer[1];
    2484:	80 91 21 3e 	lds	r24, 0x3E21
    2488:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	88 23       	and	r24, r24
    248e:	ec f7       	brge	.-6      	; 0x248a <writeSE2FRAM+0x186>
	SPIBuffer[12] = SPIC.DATA;
    2490:	e0 ec       	ldi	r30, 0xC0	; 192
    2492:	f8 e0       	ldi	r31, 0x08	; 8
    2494:	83 81       	ldd	r24, Z+3	; 0x03
    2496:	80 93 2c 3e 	sts	0x3E2C, r24
	SPIC.DATA = SPIBuffer[2];
    249a:	80 91 22 3e 	lds	r24, 0x3E22
    249e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	88 23       	and	r24, r24
    24a4:	ec f7       	brge	.-6      	; 0x24a0 <writeSE2FRAM+0x19c>
	SPIBuffer[12] = SPIC.DATA;
    24a6:	a0 ec       	ldi	r26, 0xC0	; 192
    24a8:	b8 e0       	ldi	r27, 0x08	; 8
    24aa:	13 96       	adiw	r26, 0x03	; 3
    24ac:	8c 91       	ld	r24, X
    24ae:	13 97       	sbiw	r26, 0x03	; 3
    24b0:	80 93 2c 3e 	sts	0x3E2C, r24
	
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    24b4:	88 e0       	ldi	r24, 0x08	; 8
    24b6:	e0 e2       	ldi	r30, 0x20	; 32
    24b8:	f6 e0       	ldi	r31, 0x06	; 6
    24ba:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    24bc:	e0 e4       	ldi	r30, 0x40	; 64
    24be:	f6 e0       	ldi	r31, 0x06	; 6
    24c0:	80 e1       	ldi	r24, 0x10	; 16
    24c2:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    24c4:	94 e5       	ldi	r25, 0x54	; 84
    24c6:	9c 93       	st	X, r25
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    24c8:	86 83       	std	Z+6, r24	; 0x06
	
	FRAMAddress +=3;
    24ca:	80 91 1d 3e 	lds	r24, 0x3E1D
    24ce:	90 91 1e 3e 	lds	r25, 0x3E1E
    24d2:	03 96       	adiw	r24, 0x03	; 3
    24d4:	80 93 1d 3e 	sts	0x3E1D, r24
    24d8:	90 93 1e 3e 	sts	0x3E1E, r25
	checksumADC[0] += SPIBuffer[0];
    24dc:	80 91 11 21 	lds	r24, 0x2111
    24e0:	e0 e2       	ldi	r30, 0x20	; 32
    24e2:	fe e3       	ldi	r31, 0x3E	; 62
    24e4:	90 81       	ld	r25, Z
    24e6:	89 0f       	add	r24, r25
    24e8:	80 93 11 21 	sts	0x2111, r24
	checksumADC[1] += SPIBuffer[1];
    24ec:	80 91 12 21 	lds	r24, 0x2112
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	89 0f       	add	r24, r25
    24f4:	80 93 12 21 	sts	0x2112, r24
	checksumADC[2] += SPIBuffer[2];
    24f8:	80 91 13 21 	lds	r24, 0x2113
    24fc:	92 81       	ldd	r25, Z+2	; 0x02
    24fe:	89 0f       	add	r24, r25
    2500:	80 93 13 21 	sts	0x2113, r24
}
    2504:	28 96       	adiw	r28, 0x08	; 8
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	ff 90       	pop	r15
    2514:	08 95       	ret

00002516 <FRAMWriteKnowns>:
// 	}
// 	
// }

//test function for FRAM
void FRAMWriteKnowns() {
    2516:	2f 92       	push	r2
    2518:	3f 92       	push	r3
    251a:	4f 92       	push	r4
    251c:	5f 92       	push	r5
    251e:	6f 92       	push	r6
    2520:	7f 92       	push	r7
    2522:	8f 92       	push	r8
    2524:	9f 92       	push	r9
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
	FRAMAddress = FR_BASEADD;
    253a:	10 92 1d 3e 	sts	0x3E1D, r1
    253e:	10 92 1e 3e 	sts	0x3E1E, r1
	sampleCount = 0;
    2542:	10 92 65 50 	sts	0x5065, r1
    2546:	10 92 66 50 	sts	0x5066, r1
    254a:	10 92 67 50 	sts	0x5067, r1
    254e:	10 92 68 50 	sts	0x5068, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    2552:	83 e1       	ldi	r24, 0x13	; 19
    2554:	91 e2       	ldi	r25, 0x21	; 33
    2556:	10 92 13 21 	sts	0x2113, r1
    255a:	fc 01       	movw	r30, r24
    255c:	31 97       	sbiw	r30, 0x01	; 1
    255e:	10 82       	st	Z, r1
    2560:	02 97       	sbiw	r24, 0x02	; 2
    2562:	dc 01       	movw	r26, r24
    2564:	1c 92       	st	X, r1
	
	ADCPower(TRUE);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	SPIInit(SPI_MODE_1_gc);
    256c:	84 e0       	ldi	r24, 0x04	; 4
    256e:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2572:	80 ed       	ldi	r24, 0xD0	; 208
    2574:	80 93 c0 08 	sts	0x08C0, r24
	SPIBuffer[0] = 0x0D;
    2578:	8d e0       	ldi	r24, 0x0D	; 13
    257a:	80 93 20 3e 	sts	0x3E20, r24
	SPIBuffer[1] = 0xF3;
    257e:	83 ef       	ldi	r24, 0xF3	; 243
    2580:	80 93 21 3e 	sts	0x3E21, r24
	SPIBuffer[2] = 0x57;
    2584:	87 e5       	ldi	r24, 0x57	; 87
    2586:	80 93 22 3e 	sts	0x3E22, r24
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    258a:	80 91 65 50 	lds	r24, 0x5065
    258e:	90 91 66 50 	lds	r25, 0x5066
    2592:	a0 91 67 50 	lds	r26, 0x5067
    2596:	b0 91 68 50 	lds	r27, 0x5068
    259a:	83 35       	cpi	r24, 0x53	; 83
    259c:	e5 e5       	ldi	r30, 0x55	; 85
    259e:	9e 07       	cpc	r25, r30
    25a0:	e0 e0       	ldi	r30, 0x00	; 0
    25a2:	ae 07       	cpc	r26, r30
    25a4:	e0 e0       	ldi	r30, 0x00	; 0
    25a6:	be 07       	cpc	r27, r30
    25a8:	08 f0       	brcs	.+2      	; 0x25ac <FRAMWriteKnowns+0x96>
    25aa:	cc c0       	rjmp	.+408    	; 0x2744 <FRAMWriteKnowns+0x22e>
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    25ac:	0f 2e       	mov	r0, r31
    25ae:	f0 e4       	ldi	r31, 0x40	; 64
    25b0:	ef 2e       	mov	r14, r31
    25b2:	f6 e0       	ldi	r31, 0x06	; 6
    25b4:	ff 2e       	mov	r15, r31
    25b6:	f0 2d       	mov	r31, r0
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    25b8:	40 e2       	ldi	r20, 0x20	; 32
    25ba:	56 e0       	ldi	r21, 0x06	; 6
    25bc:	28 e0       	ldi	r18, 0x08	; 8
		nop();
		SPIC.DATA = FR_WREN;
    25be:	e0 ec       	ldi	r30, 0xC0	; 192
    25c0:	f8 e0       	ldi	r31, 0x08	; 8
    25c2:	0f 2e       	mov	r0, r31
    25c4:	f6 e0       	ldi	r31, 0x06	; 6
    25c6:	7f 2e       	mov	r7, r31
    25c8:	f0 2d       	mov	r31, r0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
    25ca:	cc e2       	ldi	r28, 0x2C	; 44
    25cc:	de e3       	ldi	r29, 0x3E	; 62
		PORTB.OUTSET = PIN3_bm;  // latch opcode
		nop(); // time for CS_FRAM to accept high signal
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
		nop();
		SPIC.DATA = FR_WRITE;
    25ce:	66 24       	eor	r6, r6
    25d0:	68 94       	set
    25d2:	61 f8       	bld	r6, 1
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    25d4:	0f 2e       	mov	r0, r31
    25d6:	fd e1       	ldi	r31, 0x1D	; 29
    25d8:	cf 2e       	mov	r12, r31
    25da:	fe e3       	ldi	r31, 0x3E	; 62
    25dc:	df 2e       	mov	r13, r31
    25de:	f0 2d       	mov	r31, r0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[0];
    25e0:	8e 01       	movw	r16, r28
    25e2:	0c 50       	subi	r16, 0x0C	; 12
    25e4:	10 40       	sbci	r17, 0x00	; 0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[1];
    25e6:	0f 2e       	mov	r0, r31
    25e8:	f5 ef       	ldi	r31, 0xF5	; 245
    25ea:	4f 2e       	mov	r4, r31
    25ec:	ff ef       	ldi	r31, 0xFF	; 255
    25ee:	5f 2e       	mov	r5, r31
    25f0:	f0 2d       	mov	r31, r0
    25f2:	4c 0e       	add	r4, r28
    25f4:	5d 1e       	adc	r5, r29
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[2];
    25f6:	0f 2e       	mov	r0, r31
    25f8:	f6 ef       	ldi	r31, 0xF6	; 246
    25fa:	2f 2e       	mov	r2, r31
    25fc:	ff ef       	ldi	r31, 0xFF	; 255
    25fe:	3f 2e       	mov	r3, r31
    2600:	f0 2d       	mov	r31, r0
    2602:	2c 0e       	add	r2, r28
    2604:	3d 1e       	adc	r3, r29
		
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
		
		FRAMAddress +=3;
		checksumADC[0] += SPIBuffer[0];
    2606:	61 e1       	ldi	r22, 0x11	; 17
    2608:	71 e2       	ldi	r23, 0x21	; 33
		checksumADC[1] += SPIBuffer[1];
    260a:	5b 01       	movw	r10, r22
    260c:	08 94       	sec
    260e:	a1 1c       	adc	r10, r1
    2610:	b1 1c       	adc	r11, r1
		checksumADC[2] += SPIBuffer[2];
    2612:	88 24       	eor	r8, r8
    2614:	99 24       	eor	r9, r9
    2616:	68 94       	set
    2618:	81 f8       	bld	r8, 1
    261a:	86 0e       	add	r8, r22
    261c:	97 1e       	adc	r9, r23
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    261e:	30 e1       	ldi	r19, 0x10	; 16
    2620:	d7 01       	movw	r26, r14
    2622:	16 96       	adiw	r26, 0x06	; 6
    2624:	3c 93       	st	X, r19
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2626:	da 01       	movw	r26, r20
    2628:	16 96       	adiw	r26, 0x06	; 6
    262a:	2c 93       	st	X, r18
    262c:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    262e:	00 00       	nop
		SPIC.DATA = FR_WREN;
    2630:	73 82       	std	Z+3, r7	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	88 23       	and	r24, r24
    2636:	ec f7       	brge	.-6      	; 0x2632 <FRAMWriteKnowns+0x11c>
		SPIBuffer[12] = SPIC.DATA;
    2638:	83 81       	ldd	r24, Z+3	; 0x03
    263a:	88 83       	st	Y, r24
		PORTB.OUTSET = PIN3_bm;  // latch opcode
    263c:	da 01       	movw	r26, r20
    263e:	15 96       	adiw	r26, 0x05	; 5
    2640:	2c 93       	st	X, r18
    2642:	15 97       	sbiw	r26, 0x05	; 5
		nop(); // time for CS_FRAM to accept high signal
    2644:	00 00       	nop
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2646:	16 96       	adiw	r26, 0x06	; 6
    2648:	2c 93       	st	X, r18
    264a:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    264c:	00 00       	nop
		SPIC.DATA = FR_WRITE;
    264e:	63 82       	std	Z+3, r6	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	88 23       	and	r24, r24
    2654:	ec f7       	brge	.-6      	; 0x2650 <FRAMWriteKnowns+0x13a>
		SPIBuffer[12] = SPIC.DATA;
    2656:	83 81       	ldd	r24, Z+3	; 0x03
    2658:	88 83       	st	Y, r24
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    265a:	d6 01       	movw	r26, r12
    265c:	11 96       	adiw	r26, 0x01	; 1
    265e:	8c 91       	ld	r24, X
    2660:	11 97       	sbiw	r26, 0x01	; 1
    2662:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	88 23       	and	r24, r24
    2668:	ec f7       	brge	.-6      	; 0x2664 <FRAMWriteKnowns+0x14e>
		SPIBuffer[12] = SPIC.DATA;
    266a:	83 81       	ldd	r24, Z+3	; 0x03
    266c:	88 83       	st	Y, r24
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
    266e:	d6 01       	movw	r26, r12
    2670:	8c 91       	ld	r24, X
    2672:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	88 23       	and	r24, r24
    2678:	ec f7       	brge	.-6      	; 0x2674 <FRAMWriteKnowns+0x15e>
		SPIBuffer[12] = SPIC.DATA;
    267a:	83 81       	ldd	r24, Z+3	; 0x03
    267c:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[0];
    267e:	d8 01       	movw	r26, r16
    2680:	8c 91       	ld	r24, X
    2682:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	88 23       	and	r24, r24
    2688:	ec f7       	brge	.-6      	; 0x2684 <FRAMWriteKnowns+0x16e>
		SPIBuffer[12] = SPIC.DATA;
    268a:	83 81       	ldd	r24, Z+3	; 0x03
    268c:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[1];
    268e:	d2 01       	movw	r26, r4
    2690:	8c 91       	ld	r24, X
    2692:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	88 23       	and	r24, r24
    2698:	ec f7       	brge	.-6      	; 0x2694 <FRAMWriteKnowns+0x17e>
		SPIBuffer[12] = SPIC.DATA;
    269a:	83 81       	ldd	r24, Z+3	; 0x03
    269c:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[2];
    269e:	d1 01       	movw	r26, r2
    26a0:	8c 91       	ld	r24, X
    26a2:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	88 23       	and	r24, r24
    26a8:	ec f7       	brge	.-6      	; 0x26a4 <FRAMWriteKnowns+0x18e>
		SPIBuffer[12] = SPIC.DATA;
    26aa:	83 81       	ldd	r24, Z+3	; 0x03
    26ac:	88 83       	st	Y, r24
		
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    26ae:	da 01       	movw	r26, r20
    26b0:	15 96       	adiw	r26, 0x05	; 5
    26b2:	2c 93       	st	X, r18
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    26b4:	30 e1       	ldi	r19, 0x10	; 16
    26b6:	d7 01       	movw	r26, r14
    26b8:	15 96       	adiw	r26, 0x05	; 5
    26ba:	3c 93       	st	X, r19
		
		FRAMAddress +=3;
    26bc:	80 91 1d 3e 	lds	r24, 0x3E1D
    26c0:	90 91 1e 3e 	lds	r25, 0x3E1E
    26c4:	03 96       	adiw	r24, 0x03	; 3
    26c6:	80 93 1d 3e 	sts	0x3E1D, r24
    26ca:	90 93 1e 3e 	sts	0x3E1E, r25
		checksumADC[0] += SPIBuffer[0];
    26ce:	db 01       	movw	r26, r22
    26d0:	8c 91       	ld	r24, X
    26d2:	d8 01       	movw	r26, r16
    26d4:	9c 91       	ld	r25, X
    26d6:	89 0f       	add	r24, r25
    26d8:	db 01       	movw	r26, r22
    26da:	8c 93       	st	X, r24
		checksumADC[1] += SPIBuffer[1];
    26dc:	d5 01       	movw	r26, r10
    26de:	8c 91       	ld	r24, X
    26e0:	a1 e2       	ldi	r26, 0x21	; 33
    26e2:	be e3       	ldi	r27, 0x3E	; 62
    26e4:	9c 91       	ld	r25, X
    26e6:	89 0f       	add	r24, r25
    26e8:	d5 01       	movw	r26, r10
    26ea:	8c 93       	st	X, r24
		checksumADC[2] += SPIBuffer[2];
    26ec:	d4 01       	movw	r26, r8
    26ee:	8c 91       	ld	r24, X
    26f0:	a2 e2       	ldi	r26, 0x22	; 34
    26f2:	be e3       	ldi	r27, 0x3E	; 62
    26f4:	9c 91       	ld	r25, X
    26f6:	89 0f       	add	r24, r25
    26f8:	d4 01       	movw	r26, r8
    26fa:	8c 93       	st	X, r24
		
		sampleCount++;
    26fc:	80 91 65 50 	lds	r24, 0x5065
    2700:	90 91 66 50 	lds	r25, 0x5066
    2704:	a0 91 67 50 	lds	r26, 0x5067
    2708:	b0 91 68 50 	lds	r27, 0x5068
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	a1 1d       	adc	r26, r1
    2710:	b1 1d       	adc	r27, r1
    2712:	80 93 65 50 	sts	0x5065, r24
    2716:	90 93 66 50 	sts	0x5066, r25
    271a:	a0 93 67 50 	sts	0x5067, r26
    271e:	b0 93 68 50 	sts	0x5068, r27
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    2722:	80 91 65 50 	lds	r24, 0x5065
    2726:	90 91 66 50 	lds	r25, 0x5066
    272a:	a0 91 67 50 	lds	r26, 0x5067
    272e:	b0 91 68 50 	lds	r27, 0x5068
    2732:	83 35       	cpi	r24, 0x53	; 83
    2734:	35 e5       	ldi	r19, 0x55	; 85
    2736:	93 07       	cpc	r25, r19
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	a3 07       	cpc	r26, r19
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	b3 07       	cpc	r27, r19
    2740:	08 f4       	brcc	.+2      	; 0x2744 <FRAMWriteKnowns+0x22e>
    2742:	6d cf       	rjmp	.-294    	; 0x261e <FRAMWriteKnowns+0x108>
		checksumADC[2] += SPIBuffer[2];
		
		sampleCount++;
	}
	
	SPIDisable();
    2744:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	ADCPower(FALSE);
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
}
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	df 90       	pop	r13
    275c:	cf 90       	pop	r12
    275e:	bf 90       	pop	r11
    2760:	af 90       	pop	r10
    2762:	9f 90       	pop	r9
    2764:	8f 90       	pop	r8
    2766:	7f 90       	pop	r7
    2768:	6f 90       	pop	r6
    276a:	5f 90       	pop	r5
    276c:	4f 90       	pop	r4
    276e:	3f 90       	pop	r3
    2770:	2f 90       	pop	r2
    2772:	08 95       	ret

00002774 <setADCInput>:

/*! \brief Sets input channel to AD7767 via the A0, A1, A2 control lines of ADG758
 */
void setADCInput(uint8_t channel) {
	// set bit A0 to LSB
	if(channel & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    2774:	80 ff       	sbrs	r24, 0
    2776:	05 c0       	rjmp	.+10     	; 0x2782 <setADCInput+0xe>
    2778:	20 e4       	ldi	r18, 0x40	; 64
    277a:	e0 e0       	ldi	r30, 0x00	; 0
    277c:	f6 e0       	ldi	r31, 0x06	; 6
    277e:	25 83       	std	Z+5, r18	; 0x05
    2780:	04 c0       	rjmp	.+8      	; 0x278a <setADCInput+0x16>
	else {PORTA.OUTCLR = PIN6_bm;}
    2782:	20 e4       	ldi	r18, 0x40	; 64
    2784:	e0 e0       	ldi	r30, 0x00	; 0
    2786:	f6 e0       	ldi	r31, 0x06	; 6
    2788:	26 83       	std	Z+6, r18	; 0x06
	// set bit A1 to second bit
	if(channel & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    278a:	81 ff       	sbrs	r24, 1
    278c:	05 c0       	rjmp	.+10     	; 0x2798 <setADCInput+0x24>
    278e:	22 e0       	ldi	r18, 0x02	; 2
    2790:	e0 e2       	ldi	r30, 0x20	; 32
    2792:	f6 e0       	ldi	r31, 0x06	; 6
    2794:	25 83       	std	Z+5, r18	; 0x05
    2796:	04 c0       	rjmp	.+8      	; 0x27a0 <setADCInput+0x2c>
	else {PORTB.OUTCLR = PIN1_bm;}
    2798:	22 e0       	ldi	r18, 0x02	; 2
    279a:	e0 e2       	ldi	r30, 0x20	; 32
    279c:	f6 e0       	ldi	r31, 0x06	; 6
    279e:	26 83       	std	Z+6, r18	; 0x06
	// set bit A3 to third bit
	if(channel & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    27a0:	82 ff       	sbrs	r24, 2
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <setADCInput+0x3a>
    27a4:	84 e0       	ldi	r24, 0x04	; 4
    27a6:	e0 e2       	ldi	r30, 0x20	; 32
    27a8:	f6 e0       	ldi	r31, 0x06	; 6
    27aa:	85 83       	std	Z+5, r24	; 0x05
    27ac:	08 95       	ret
	else {PORTB.OUTCLR = PIN2_bm;}
    27ae:	84 e0       	ldi	r24, 0x04	; 4
    27b0:	e0 e2       	ldi	r30, 0x20	; 32
    27b2:	f6 e0       	ldi	r31, 0x06	; 6
    27b4:	86 83       	std	Z+6, r24	; 0x06
    27b6:	08 95       	ret

000027b8 <CO_collectSeismic1Channel_ext>:
	averagingPtB, averagingPtC, averagingPtD, numOfSamples, DataArray, BufferSize, use_FRAM);
}

//collect data from 1 axis of accelerometer
void CO_collectSeismic1Channel_ext(uint8_t channel, uint8_t filterConfig, uint8_t gain, uint16_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable, uint16_t averagingPtA, 
								uint16_t averagingPtB, uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    27b8:	2f 92       	push	r2
    27ba:	3f 92       	push	r3
    27bc:	4f 92       	push	r4
    27be:	5f 92       	push	r5
    27c0:	7f 92       	push	r7
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	18 2f       	mov	r17, r24
    27e0:	76 2e       	mov	r7, r22
    27e2:	f4 2e       	mov	r15, r20
    27e4:	19 01       	movw	r2, r18
	
// 	#ifndef F_CPU
// 	#define F_CPU 32000000UL
// 	#endif
	
	ADC_BUFFER=DataArray;
    27e6:	89 8d       	ldd	r24, Y+25	; 0x19
    27e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27ea:	80 93 63 50 	sts	0x5063, r24
    27ee:	90 93 64 50 	sts	0x5064, r25
	ADC_Sampling_Finished = 0;
    27f2:	10 92 a6 50 	sts	0x50A6, r1
	ADC_buffer_size = BufferSize;
    27f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fa:	80 93 a7 50 	sts	0x50A7, r24
    27fe:	90 93 a8 50 	sts	0x50A8, r25
	if(use_FRAM){
    2802:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2804:	88 23       	and	r24, r24
    2806:	21 f0       	breq	.+8      	; 0x2810 <CO_collectSeismic1Channel_ext+0x58>
		write_to_FRAM = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	80 93 48 40 	sts	0x4048, r24
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <CO_collectSeismic1Channel_ext+0x5c>
	}
	else{
		write_to_FRAM = 0;
    2810:	10 92 48 40 	sts	0x4048, r1
	}
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	// Set gains, filters, and input channel
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gain);
    281a:	81 2f       	mov	r24, r17
    281c:	6f 2d       	mov	r22, r15
    281e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <set_ampGain>
	set_filter(filterConfig);
    2822:	87 2d       	mov	r24, r7
    2824:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
	ACC_DCPassEnable(DCPassEnable);
    2828:	8e 2d       	mov	r24, r14
    282a:	0e 94 21 0c 	call	0x1842	; 0x1842 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    282e:	84 e0       	ldi	r24, 0x04	; 4
    2830:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2834:	84 e5       	ldi	r24, 0x54	; 84
    2836:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	0e 94 45 0a 	call	0x148a	; 0x148a <enableADCMUX>
	setADCInput(channel);
    2840:	81 2f       	mov	r24, r17
    2842:	0e 94 ba 13 	call	0x2774	; 0x2774 <setADCInput>
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    2846:	e0 ea       	ldi	r30, 0xA0	; 160
    2848:	f6 e0       	ldi	r31, 0x06	; 6
    284a:	22 e0       	ldi	r18, 0x02	; 2
    284c:	20 8b       	std	Z+16, r18	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    284e:	77 24       	eor	r7, r7
    2850:	73 94       	inc	r7
    2852:	72 82       	std	Z+2, r7	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    2854:	0f 2e       	mov	r0, r31
    2856:	f0 e8       	ldi	r31, 0x80	; 128
    2858:	4f 2e       	mov	r4, r31
    285a:	f1 e0       	ldi	r31, 0x01	; 1
    285c:	5f 2e       	mov	r5, r31
    285e:	f0 2d       	mov	r31, r0
    2860:	88 e7       	ldi	r24, 0x78	; 120
    2862:	d2 01       	movw	r26, r4
    2864:	8c 93       	st	X, r24

	// Configure counter for IO13(PF0) events
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    2866:	e0 e0       	ldi	r30, 0x00	; 0
    2868:	f9 e0       	ldi	r31, 0x09	; 9
    286a:	80 ef       	ldi	r24, 0xF0	; 240
    286c:	81 83       	std	Z+1, r24	; 0x01
	TCD0.CCA = averagingPtA;
    286e:	c0 a6       	lds	r28, 0xb0
    2870:	d1 a6       	lds	r29, 0xb1
	TCD0.CCB = averagingPtB;
    2872:	a2 a6       	lds	r26, 0xb2
    2874:	b3 a6       	lds	r27, 0xb3
	TCD0.CCC = averagingPtC;
    2876:	84 a6       	lds	r24, 0xb4
    2878:	95 a6       	lds	r25, 0xb5
	TCD0.CCD = averagingPtD;
    287a:	8d 89       	ldd	r24, Y+21	; 0x15
    287c:	9e 89       	ldd	r25, Y+22	; 0x16
    287e:	86 a7       	lds	r24, 0x76
    2880:	97 a7       	lds	r25, 0x77
	TCD0.PER = subsamplesPerSample - 1;
    2882:	80 2f       	mov	r24, r16
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	86 a3       	lds	r24, 0x56
    288a:	97 a3       	lds	r25, 0x57
	TCD0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    288c:	26 83       	std	Z+6, r18	; 0x06
	TCD0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    288e:	8f ef       	ldi	r24, 0xFF	; 255
    2890:	87 83       	std	Z+7, r24	; 0x07
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    2892:	80 81       	ld	r24, Z
    2894:	80 7f       	andi	r24, 0xF0	; 240
    2896:	88 60       	ori	r24, 0x08	; 8
    2898:	80 83       	st	Z, r24

	//FRAMAddress = FR_BASEADD;
	sampleCount = 0;
    289a:	10 92 65 50 	sts	0x5065, r1
    289e:	10 92 66 50 	sts	0x5066, r1
    28a2:	10 92 67 50 	sts	0x5067, r1
    28a6:	10 92 68 50 	sts	0x5068, r1
	SPICount = 0;
    28aa:	10 92 a0 50 	sts	0x50A0, r1
	//checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    28ae:	e0 ea       	ldi	r30, 0xA0	; 160
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	87 60       	ori	r24, 0x07	; 7
    28b6:	82 83       	std	Z+2, r24	; 0x02
	sei();
    28b8:	78 94       	sei

	SPICS(TRUE);
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    28c0:	80 e2       	ldi	r24, 0x20	; 32
    28c2:	e0 e8       	ldi	r30, 0x80	; 128
    28c4:	f6 e0       	ldi	r31, 0x06	; 6
    28c6:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    28c8:	00 e4       	ldi	r16, 0x40	; 64
    28ca:	1a e0       	ldi	r17, 0x0A	; 10
    28cc:	83 e2       	ldi	r24, 0x23	; 35
    28ce:	f8 01       	movw	r30, r16
    28d0:	81 83       	std	Z+1, r24	; 0x01
	// set period
	//TCE1.PER = (0x20 << subsamplesPerSecond);
	//TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
	TCE1.PER = (F_CPU/16)/subsamplesPerSecond;
    28d2:	61 01       	movw	r12, r2
    28d4:	ee 24       	eor	r14, r14
    28d6:	ff 24       	eor	r15, r15
    28d8:	60 e8       	ldi	r22, 0x80	; 128
    28da:	74 e8       	ldi	r23, 0x84	; 132
    28dc:	8e e1       	ldi	r24, 0x1E	; 30
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a7 01       	movw	r20, r14
    28e2:	96 01       	movw	r18, r12
    28e4:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    28e8:	d8 01       	movw	r26, r16
    28ea:	96 96       	adiw	r26, 0x26	; 38
    28ec:	2d 93       	st	X+, r18
    28ee:	3c 93       	st	X, r19
    28f0:	97 97       	sbiw	r26, 0x27	; 39
	TCE1.CCBBUF = ((F_CPU/16)/subsamplesPerSecond)/2;
    28f2:	60 e4       	ldi	r22, 0x40	; 64
    28f4:	72 e4       	ldi	r23, 0x42	; 66
    28f6:	8f e0       	ldi	r24, 0x0F	; 15
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a7 01       	movw	r20, r14
    28fc:	96 01       	movw	r18, r12
    28fe:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    2902:	f8 01       	movw	r30, r16
    2904:	22 af       	sts	0x72, r18
    2906:	33 af       	sts	0x73, r19
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	//set the period as number of samples to know when to stop sampling
	TCC1.PER = numOfSamples;
    2908:	e0 e4       	ldi	r30, 0x40	; 64
    290a:	f8 e0       	ldi	r31, 0x08	; 8
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	86 a3       	lds	r24, 0x56
    2912:	97 a3       	lds	r25, 0x57
	//Configure IO13(PF0) to drive event channel that triggers event every time the 4 samples are collected and averaged
	EVSYS.CH1MUX = EVSYS_CHMUX_TCD0_OVF_gc;
    2914:	80 ed       	ldi	r24, 0xD0	; 208
    2916:	d2 01       	movw	r26, r4
    2918:	11 96       	adiw	r26, 0x01	; 1
    291a:	8c 93       	st	X, r24
    291c:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    291e:	76 82       	std	Z+6, r7	; 0x06
	//set event system to update counter of number of samples every sample event
	TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
    2920:	80 81       	ld	r24, Z
    2922:	80 7f       	andi	r24, 0xF0	; 240
    2924:	89 60       	ori	r24, 0x09	; 9
    2926:	80 83       	st	Z, r24
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2928:	f8 01       	movw	r30, r16
    292a:	80 81       	ld	r24, Z
    292c:	80 7f       	andi	r24, 0xF0	; 240
    292e:	81 60       	ori	r24, 0x01	; 1
    2930:	80 83       	st	Z, r24
// 
// 	SPICS(FALSE);
// 	SPIDisable();
// 	enableADCMUX(FALSE);
	
}
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	df 90       	pop	r13
    2940:	cf 90       	pop	r12
    2942:	bf 90       	pop	r11
    2944:	af 90       	pop	r10
    2946:	9f 90       	pop	r9
    2948:	8f 90       	pop	r8
    294a:	7f 90       	pop	r7
    294c:	5f 90       	pop	r5
    294e:	4f 90       	pop	r4
    2950:	3f 90       	pop	r3
    2952:	2f 90       	pop	r2
    2954:	08 95       	ret

00002956 <CO_collectSeismic1Channel>:
	sampleCount++;

}

void CO_collectSeismic1Channel(uint8_t channel, uint8_t gain, uint16_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable, uint16_t averagingPtA,
								uint16_t averagingPtB, uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    2956:	2f 92       	push	r2
    2958:	3f 92       	push	r3
    295a:	4f 92       	push	r4
    295c:	5f 92       	push	r5
    295e:	6f 92       	push	r6
    2960:	7f 92       	push	r7
    2962:	8f 92       	push	r8
    2964:	9f 92       	push	r9
    2966:	af 92       	push	r10
    2968:	bf 92       	push	r11
    296a:	cf 92       	push	r12
    296c:	df 92       	push	r13
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	0f 92       	push	r0
    297a:	0f 92       	push	r0
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	96 2f       	mov	r25, r22
    2982:	49 83       	std	Y+1, r20	; 0x01
    2984:	5a 83       	std	Y+2, r21	; 0x02
    2986:	52 2f       	mov	r21, r18
    2988:	70 2f       	mov	r23, r16
    298a:	37 01       	movw	r6, r14
    298c:	26 01       	movw	r4, r12
    298e:	15 01       	movw	r2, r10
	
	CO_collectSeismic1Channel_ext(channel, (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gain, subsamplesPerSecond, subsamplesPerSample, DCPassEnable, averagingPtA,
    2990:	2d b7       	in	r18, 0x3d	; 61
    2992:	3e b7       	in	r19, 0x3e	; 62
    2994:	29 50       	subi	r18, 0x09	; 9
    2996:	30 40       	sbci	r19, 0x00	; 0
    2998:	2d bf       	out	0x3d, r18	; 61
    299a:	3e bf       	out	0x3e, r19	; 62
    299c:	ed b7       	in	r30, 0x3d	; 61
    299e:	fe b7       	in	r31, 0x3e	; 62
    29a0:	31 96       	adiw	r30, 0x01	; 1
    29a2:	ad b7       	in	r26, 0x3d	; 61
    29a4:	be b7       	in	r27, 0x3e	; 62
    29a6:	11 96       	adiw	r26, 0x01	; 1
    29a8:	8d 92       	st	X+, r8
    29aa:	9c 92       	st	X, r9
    29ac:	12 97       	sbiw	r26, 0x02	; 2
    29ae:	2f 89       	ldd	r18, Y+23	; 0x17
    29b0:	38 8d       	ldd	r19, Y+24	; 0x18
    29b2:	22 83       	std	Z+2, r18	; 0x02
    29b4:	33 83       	std	Z+3, r19	; 0x03
    29b6:	29 8d       	ldd	r18, Y+25	; 0x19
    29b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    29ba:	24 83       	std	Z+4, r18	; 0x04
    29bc:	35 83       	std	Z+5, r19	; 0x05
    29be:	2b 8d       	ldd	r18, Y+27	; 0x1b
    29c0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    29c2:	26 83       	std	Z+6, r18	; 0x06
    29c4:	37 83       	std	Z+7, r19	; 0x07
    29c6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    29c8:	20 87       	std	Z+8, r18	; 0x08
    29ca:	64 ec       	ldi	r22, 0xC4	; 196
    29cc:	49 2f       	mov	r20, r25
    29ce:	29 81       	ldd	r18, Y+1	; 0x01
    29d0:	3a 81       	ldd	r19, Y+2	; 0x02
    29d2:	05 2f       	mov	r16, r21
    29d4:	e7 2e       	mov	r14, r23
    29d6:	63 01       	movw	r12, r6
    29d8:	52 01       	movw	r10, r4
    29da:	41 01       	movw	r8, r2
    29dc:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <CO_collectSeismic1Channel_ext>
    29e0:	2d b7       	in	r18, 0x3d	; 61
    29e2:	3e b7       	in	r19, 0x3e	; 62
    29e4:	27 5f       	subi	r18, 0xF7	; 247
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	2d bf       	out	0x3d, r18	; 61
    29ea:	3e bf       	out	0x3e, r19	; 62
	averagingPtB, averagingPtC, averagingPtD, numOfSamples, DataArray, BufferSize, use_FRAM);
}
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	0f 91       	pop	r16
    29f6:	ff 90       	pop	r15
    29f8:	ef 90       	pop	r14
    29fa:	df 90       	pop	r13
    29fc:	cf 90       	pop	r12
    29fe:	bf 90       	pop	r11
    2a00:	af 90       	pop	r10
    2a02:	9f 90       	pop	r9
    2a04:	8f 90       	pop	r8
    2a06:	7f 90       	pop	r7
    2a08:	6f 90       	pop	r6
    2a0a:	5f 90       	pop	r5
    2a0c:	4f 90       	pop	r4
    2a0e:	3f 90       	pop	r3
    2a10:	2f 90       	pop	r2
    2a12:	08 95       	ret

00002a14 <CO_collectSeismic3Axises_ext>:
	subsamplesPerChannel, DCPassEnable, averagingPtA, averagingPtB,
	averagingPtC, averagingPtD, numOfSamples, DataArray, BufferSize, use_FRAM);
}	
void CO_collectSeismic3Axises_ext(uint8_t filterConfig, uint8_t gain[], uint16_t subsamplesPerSecond,
uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    2a14:	2f 92       	push	r2
    2a16:	3f 92       	push	r3
    2a18:	5f 92       	push	r5
    2a1a:	6f 92       	push	r6
    2a1c:	7f 92       	push	r7
    2a1e:	8f 92       	push	r8
    2a20:	9f 92       	push	r9
    2a22:	af 92       	push	r10
    2a24:	bf 92       	push	r11
    2a26:	cf 92       	push	r12
    2a28:	df 92       	push	r13
    2a2a:	ef 92       	push	r14
    2a2c:	ff 92       	push	r15
    2a2e:	0f 93       	push	r16
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	0f 92       	push	r0
    2a38:	0f 92       	push	r0
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	18 2f       	mov	r17, r24
    2a40:	3b 01       	movw	r6, r22
    2a42:	49 83       	std	Y+1, r20	; 0x01
    2a44:	5a 83       	std	Y+2, r21	; 0x02
    2a46:	52 2e       	mov	r5, r18
	
// 	#ifndef F_CPU
// 	#define F_CPU 32000000UL
// 	#endif
	
	ADC_BUFFER = DataArray;
    2a48:	89 8d       	ldd	r24, Y+25	; 0x19
    2a4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a4c:	80 93 63 50 	sts	0x5063, r24
    2a50:	90 93 64 50 	sts	0x5064, r25
	ADC_Sampling_Finished = 0;
    2a54:	10 92 a6 50 	sts	0x50A6, r1
	ADC_buffer_size = BufferSize;
    2a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a5c:	80 93 a7 50 	sts	0x50A7, r24
    2a60:	90 93 a8 50 	sts	0x50A8, r25
	if(use_FRAM){
    2a64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a66:	88 23       	and	r24, r24
    2a68:	21 f0       	breq	.+8      	; 0x2a72 <CO_collectSeismic3Axises_ext+0x5e>
		write_to_FRAM = 1;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	80 93 48 40 	sts	0x4048, r24
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <CO_collectSeismic3Axises_ext+0x62>
	}
	else{
		write_to_FRAM = 0;
    2a72:	10 92 48 40 	sts	0x4048, r1
	}
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	// Set gains, filters, and input channel
	set_ampGain(ADC_CH_6_gc, gain[0]);
    2a7c:	85 e0       	ldi	r24, 0x05	; 5
    2a7e:	d3 01       	movw	r26, r6
    2a80:	6c 91       	ld	r22, X
    2a82:	0e 94 0c 0a 	call	0x1418	; 0x1418 <set_ampGain>
	set_ampGain(ADC_CH_7_gc, gain[1]);
    2a86:	86 e0       	ldi	r24, 0x06	; 6
    2a88:	f3 01       	movw	r30, r6
    2a8a:	61 81       	ldd	r22, Z+1	; 0x01
    2a8c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <set_ampGain>
	set_ampGain(ADC_CH_8_gc, gain[2]);
    2a90:	87 e0       	ldi	r24, 0x07	; 7
    2a92:	d3 01       	movw	r26, r6
    2a94:	12 96       	adiw	r26, 0x02	; 2
    2a96:	6c 91       	ld	r22, X
    2a98:	0e 94 0c 0a 	call	0x1418	; 0x1418 <set_ampGain>
	set_filter(filterConfig);
    2a9c:	81 2f       	mov	r24, r17
    2a9e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
	ACC_DCPassEnable(DCPassEnable);
    2aa2:	80 2f       	mov	r24, r16
    2aa4:	0e 94 21 0c 	call	0x1842	; 0x1842 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    2aa8:	84 e0       	ldi	r24, 0x04	; 4
    2aaa:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2aae:	84 e5       	ldi	r24, 0x54	; 84
    2ab0:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	0e 94 45 0a 	call	0x148a	; 0x148a <enableADCMUX>
	setADCInput(ADC_CH_6_gc);
    2aba:	85 e0       	ldi	r24, 0x05	; 5
    2abc:	0e 94 ba 13 	call	0x2774	; 0x2774 <setADCInput>
	

	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    2ac0:	e0 ea       	ldi	r30, 0xA0	; 160
    2ac2:	f6 e0       	ldi	r31, 0x06	; 6
    2ac4:	22 e0       	ldi	r18, 0x02	; 2
    2ac6:	20 8b       	std	Z+16, r18	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    2ac8:	66 24       	eor	r6, r6
    2aca:	63 94       	inc	r6
    2acc:	62 82       	std	Z+2, r6	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    2ace:	0f 2e       	mov	r0, r31
    2ad0:	f0 e8       	ldi	r31, 0x80	; 128
    2ad2:	2f 2e       	mov	r2, r31
    2ad4:	f1 e0       	ldi	r31, 0x01	; 1
    2ad6:	3f 2e       	mov	r3, r31
    2ad8:	f0 2d       	mov	r31, r0
    2ada:	88 e7       	ldi	r24, 0x78	; 120
    2adc:	f1 01       	movw	r30, r2
    2ade:	80 83       	st	Z, r24

	// Configure counter for IO13(PF0) events
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    2ae0:	e0 e0       	ldi	r30, 0x00	; 0
    2ae2:	f8 e0       	ldi	r31, 0x08	; 8
    2ae4:	80 ef       	ldi	r24, 0xF0	; 240
    2ae6:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CCA = averagingPtA;
    2ae8:	e0 a6       	lds	r30, 0xb0
    2aea:	f1 a6       	lds	r31, 0xb1
	TCC0.CCB = averagingPtB;
    2aec:	c2 a6       	lds	r28, 0xb2
    2aee:	d3 a6       	lds	r29, 0xb3
	TCC0.CCC = averagingPtC;
    2af0:	a4 a6       	lds	r26, 0xb4
    2af2:	b5 a6       	lds	r27, 0xb5
	TCC0.CCD = averagingPtD;
    2af4:	86 a6       	lds	r24, 0xb6
    2af6:	97 a6       	lds	r25, 0xb7
	TCC0.PER = subsamplesPerChannel - 1;
    2af8:	85 2d       	mov	r24, r5
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	86 a3       	lds	r24, 0x56
    2b00:	97 a3       	lds	r25, 0x57
	TCC0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    2b02:	26 83       	std	Z+6, r18	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    2b04:	8f ef       	ldi	r24, 0xFF	; 255
    2b06:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    2b08:	80 81       	ld	r24, Z
    2b0a:	80 7f       	andi	r24, 0xF0	; 240
    2b0c:	88 60       	ori	r24, 0x08	; 8
    2b0e:	80 83       	st	Z, r24

	sampleCount = 0;
    2b10:	10 92 65 50 	sts	0x5065, r1
    2b14:	10 92 66 50 	sts	0x5066, r1
    2b18:	10 92 67 50 	sts	0x5067, r1
    2b1c:	10 92 68 50 	sts	0x5068, r1
	SPICount = 0;
    2b20:	10 92 a0 50 	sts	0x50A0, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    2b24:	83 e1       	ldi	r24, 0x13	; 19
    2b26:	91 e2       	ldi	r25, 0x21	; 33
    2b28:	10 92 13 21 	sts	0x2113, r1
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	31 97       	sbiw	r30, 0x01	; 1
    2b30:	10 82       	st	Z, r1
    2b32:	02 97       	sbiw	r24, 0x02	; 2
    2b34:	dc 01       	movw	r26, r24
    2b36:	1c 92       	st	X, r1

	// Enable interrupts.
	PMIC.CTRL |= (PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm);
    2b38:	e0 ea       	ldi	r30, 0xA0	; 160
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	82 81       	ldd	r24, Z+2	; 0x02
    2b3e:	87 60       	ori	r24, 0x07	; 7
    2b40:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2b42:	78 94       	sei

	SPICS(TRUE);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    2b4a:	80 e2       	ldi	r24, 0x20	; 32
    2b4c:	e0 e8       	ldi	r30, 0x80	; 128
    2b4e:	f6 e0       	ldi	r31, 0x06	; 6
    2b50:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    2b52:	00 e4       	ldi	r16, 0x40	; 64
    2b54:	1a e0       	ldi	r17, 0x0A	; 10
    2b56:	83 e2       	ldi	r24, 0x23	; 35
    2b58:	f8 01       	movw	r30, r16
    2b5a:	81 83       	std	Z+1, r24	; 0x01
	// set period of waveform generator and duty cycle (want duty cycle to be half the period to get clean clock signal)
	//TCE1.PER = (0x20 << subsamplesPerSecond);
	TCE1.PER = (F_CPU/16)/subsamplesPerSecond;
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b60:	6c 01       	movw	r12, r24
    2b62:	ee 24       	eor	r14, r14
    2b64:	ff 24       	eor	r15, r15
    2b66:	60 e8       	ldi	r22, 0x80	; 128
    2b68:	74 e8       	ldi	r23, 0x84	; 132
    2b6a:	8e e1       	ldi	r24, 0x1E	; 30
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a7 01       	movw	r20, r14
    2b70:	96 01       	movw	r18, r12
    2b72:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    2b76:	d8 01       	movw	r26, r16
    2b78:	96 96       	adiw	r26, 0x26	; 38
    2b7a:	2d 93       	st	X+, r18
    2b7c:	3c 93       	st	X, r19
    2b7e:	97 97       	sbiw	r26, 0x27	; 39
	//TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
	TCE1.CCBBUF = ((F_CPU/16)/subsamplesPerSecond)/2;
    2b80:	60 e4       	ldi	r22, 0x40	; 64
    2b82:	72 e4       	ldi	r23, 0x42	; 66
    2b84:	8f e0       	ldi	r24, 0x0F	; 15
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a7 01       	movw	r20, r14
    2b8a:	96 01       	movw	r18, r12
    2b8c:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    2b90:	f8 01       	movw	r30, r16
    2b92:	22 af       	sts	0x72, r18
    2b94:	33 af       	sts	0x73, r19
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	//set the period as number of samples to know when to stop sampling
	TCC1.PER = numOfSamples;
    2b96:	e0 e4       	ldi	r30, 0x40	; 64
    2b98:	f8 e0       	ldi	r31, 0x08	; 8
    2b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9e:	86 a3       	lds	r24, 0x56
    2ba0:	97 a3       	lds	r25, 0x57
	//Configure IO13(PF0) to drive event channel that triggers event every time the 4 samples are collected and averaged
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    2ba2:	80 ec       	ldi	r24, 0xC0	; 192
    2ba4:	d1 01       	movw	r26, r2
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	8c 93       	st	X, r24
    2baa:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    2bac:	66 82       	std	Z+6, r6	; 0x06
	//set event system to update counter of number of samples every sample event
	TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
    2bae:	80 81       	ld	r24, Z
    2bb0:	80 7f       	andi	r24, 0xF0	; 240
    2bb2:	89 60       	ori	r24, 0x09	; 9
    2bb4:	80 83       	st	Z, r24
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	80 81       	ld	r24, Z
    2bba:	80 7f       	andi	r24, 0xF0	; 240
    2bbc:	81 60       	ori	r24, 0x01	; 1
    2bbe:	80 83       	st	Z, r24
// 
// 	SPICS(FALSE);
// 	SPIDisable();
// 	enableADCMUX(FALSE);
	//ADCPower(FALSE);
}
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	ff 90       	pop	r15
    2bce:	ef 90       	pop	r14
    2bd0:	df 90       	pop	r13
    2bd2:	cf 90       	pop	r12
    2bd4:	bf 90       	pop	r11
    2bd6:	af 90       	pop	r10
    2bd8:	9f 90       	pop	r9
    2bda:	8f 90       	pop	r8
    2bdc:	7f 90       	pop	r7
    2bde:	6f 90       	pop	r6
    2be0:	5f 90       	pop	r5
    2be2:	3f 90       	pop	r3
    2be4:	2f 90       	pop	r2
    2be6:	08 95       	ret

00002be8 <CO_collectSeismic3Axises>:
	ADCPower(FALSE);
	
}*/
void CO_collectSeismic3Axises(uint8_t gain[], uint16_t subsamplesPerSecond,
uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    2be8:	2f 92       	push	r2
    2bea:	3f 92       	push	r3
    2bec:	4f 92       	push	r4
    2bee:	5f 92       	push	r5
    2bf0:	6f 92       	push	r6
    2bf2:	7f 92       	push	r7
    2bf4:	8f 92       	push	r8
    2bf6:	9f 92       	push	r9
    2bf8:	af 92       	push	r10
    2bfa:	bf 92       	push	r11
    2bfc:	cf 92       	push	r12
    2bfe:	df 92       	push	r13
    2c00:	ef 92       	push	r14
    2c02:	ff 92       	push	r15
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <CO_collectSeismic3Axises+0x26>
    2c0e:	0f 92       	push	r0
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	dc 01       	movw	r26, r24
    2c16:	3b 01       	movw	r6, r22
    2c18:	94 2f       	mov	r25, r20
    2c1a:	32 2f       	mov	r19, r18
    2c1c:	28 01       	movw	r4, r16
    2c1e:	17 01       	movw	r2, r14
    2c20:	c9 82       	std	Y+1, r12	; 0x01
    2c22:	da 82       	std	Y+2, r13	; 0x02
    2c24:	ab 82       	std	Y+3, r10	; 0x03
    2c26:	bc 82       	std	Y+4, r11	; 0x04
	
	CO_collectSeismic3Axises_ext((uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gain, subsamplesPerSecond,
    2c28:	4d b7       	in	r20, 0x3d	; 61
    2c2a:	5e b7       	in	r21, 0x3e	; 62
    2c2c:	47 50       	subi	r20, 0x07	; 7
    2c2e:	50 40       	sbci	r21, 0x00	; 0
    2c30:	4d bf       	out	0x3d, r20	; 61
    2c32:	5e bf       	out	0x3e, r21	; 62
    2c34:	6d b7       	in	r22, 0x3d	; 61
    2c36:	7e b7       	in	r23, 0x3e	; 62
    2c38:	6f 5f       	subi	r22, 0xFF	; 255
    2c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3c:	ed b7       	in	r30, 0x3d	; 61
    2c3e:	fe b7       	in	r31, 0x3e	; 62
    2c40:	81 82       	std	Z+1, r8	; 0x01
    2c42:	92 82       	std	Z+2, r9	; 0x02
    2c44:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2c46:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2c48:	fb 01       	movw	r30, r22
    2c4a:	42 83       	std	Z+2, r20	; 0x02
    2c4c:	53 83       	std	Z+3, r21	; 0x03
    2c4e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2c50:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2c52:	44 83       	std	Z+4, r20	; 0x04
    2c54:	55 83       	std	Z+5, r21	; 0x05
    2c56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c58:	86 83       	std	Z+6, r24	; 0x06
    2c5a:	84 ec       	ldi	r24, 0xC4	; 196
    2c5c:	bd 01       	movw	r22, r26
    2c5e:	a3 01       	movw	r20, r6
    2c60:	29 2f       	mov	r18, r25
    2c62:	03 2f       	mov	r16, r19
    2c64:	72 01       	movw	r14, r4
    2c66:	61 01       	movw	r12, r2
    2c68:	a9 80       	ldd	r10, Y+1	; 0x01
    2c6a:	ba 80       	ldd	r11, Y+2	; 0x02
    2c6c:	8b 80       	ldd	r8, Y+3	; 0x03
    2c6e:	9c 80       	ldd	r9, Y+4	; 0x04
    2c70:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CO_collectSeismic3Axises_ext>
    2c74:	4d b7       	in	r20, 0x3d	; 61
    2c76:	5e b7       	in	r21, 0x3e	; 62
    2c78:	49 5f       	subi	r20, 0xF9	; 249
    2c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7c:	4d bf       	out	0x3d, r20	; 61
    2c7e:	5e bf       	out	0x3e, r21	; 62
	subsamplesPerChannel, DCPassEnable, averagingPtA, averagingPtB,
	averagingPtC, averagingPtD, numOfSamples, DataArray, BufferSize, use_FRAM);
}	
    2c80:	24 96       	adiw	r28, 0x04	; 4
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	ff 90       	pop	r15
    2c90:	ef 90       	pop	r14
    2c92:	df 90       	pop	r13
    2c94:	cf 90       	pop	r12
    2c96:	bf 90       	pop	r11
    2c98:	af 90       	pop	r10
    2c9a:	9f 90       	pop	r9
    2c9c:	8f 90       	pop	r8
    2c9e:	7f 90       	pop	r7
    2ca0:	6f 90       	pop	r6
    2ca2:	5f 90       	pop	r5
    2ca4:	4f 90       	pop	r4
    2ca6:	3f 90       	pop	r3
    2ca8:	2f 90       	pop	r2
    2caa:	08 95       	ret

00002cac <CO_collectADC_ext>:
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC_ext(uint8_t channel, uint8_t filterConfig, uint8_t gainExponent, uint16_t SPS, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    2cac:	6f 92       	push	r6
    2cae:	7f 92       	push	r7
    2cb0:	8f 92       	push	r8
    2cb2:	9f 92       	push	r9
    2cb4:	af 92       	push	r10
    2cb6:	bf 92       	push	r11
    2cb8:	cf 92       	push	r12
    2cba:	df 92       	push	r13
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
    2cc8:	c8 2f       	mov	r28, r24
    2cca:	b6 2e       	mov	r11, r22
    2ccc:	d4 2f       	mov	r29, r20
    2cce:	49 01       	movw	r8, r18
    2cd0:	38 01       	movw	r6, r16
// 	#ifndef F_CPU
// 	#define F_CPU 32000000UL
// 	#endif
	
	uint16_t period;
	ADC_BUFFER = DataArray;
    2cd2:	e0 92 63 50 	sts	0x5063, r14
    2cd6:	f0 92 64 50 	sts	0x5064, r15
	ADC_Sampling_Finished = 0;
    2cda:	10 92 a6 50 	sts	0x50A6, r1
	ADC_buffer_size = BufferSize;
    2cde:	c0 92 a7 50 	sts	0x50A7, r12
    2ce2:	d0 92 a8 50 	sts	0x50A8, r13
	if(use_FRAM){
    2ce6:	aa 20       	and	r10, r10
    2ce8:	21 f0       	breq	.+8      	; 0x2cf2 <CO_collectADC_ext+0x46>
		write_to_FRAM = 1;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	80 93 48 40 	sts	0x4048, r24
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <CO_collectADC_ext+0x4a>
	}
	else{
		write_to_FRAM = 0;
    2cf2:	10 92 48 40 	sts	0x4048, r1
	}
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gainExponent);
    2cfc:	8c 2f       	mov	r24, r28
    2cfe:	6d 2f       	mov	r22, r29
    2d00:	0e 94 0c 0a 	call	0x1418	; 0x1418 <set_ampGain>
	set_filter(filterConfig);
    2d04:	8b 2d       	mov	r24, r11
    2d06:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>

	// if acc channel then enable DC Pass 
	// it is assumed that if not using high frequency acc specific function then 
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
    2d0a:	8c 2f       	mov	r24, r28
    2d0c:	85 50       	subi	r24, 0x05	; 5
    2d0e:	83 30       	cpi	r24, 0x03	; 3
    2d10:	18 f4       	brcc	.+6      	; 0x2d18 <CO_collectADC_ext+0x6c>
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	0e 94 21 0c 	call	0x1842	; 0x1842 <ACC_DCPassEnable>

	enableADCMUX(TRUE);
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	0e 94 45 0a 	call	0x148a	; 0x148a <enableADCMUX>
	setADCInput(channel);
    2d1e:	8c 2f       	mov	r24, r28
    2d20:	0e 94 ba 13 	call	0x2774	; 0x2774 <setADCInput>
	SPIInit(SPI_MODE_1_gc);
    2d24:	84 e0       	ldi	r24, 0x04	; 4
    2d26:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2d2a:	84 e5       	ldi	r24, 0x54	; 84
    2d2c:	80 93 c0 08 	sts	0x08C0, r24
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.DIRCLR = PIN0_bm;
    2d30:	e0 ea       	ldi	r30, 0xA0	; 160
    2d32:	f6 e0       	ldi	r31, 0x06	; 6
    2d34:	ee 24       	eor	r14, r14
    2d36:	e3 94       	inc	r14
    2d38:	e2 82       	std	Z+2, r14	; 0x02
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.INT0MASK = PIN0_bm;
    2d3e:	e2 86       	std	Z+10, r14	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_MED_gc;				
    2d40:	81 87       	std	Z+9, r24	; 0x09

	// Configure clock for AD7767 MCLK for desired sample frequency
	// f_samples = f_MCLK / 16
	// f_MCLK = f_peripheral(2^25Hz) / (f_period + 1Hz)
	// Set IO14 (PE5) to output
	PORTE.DIRSET = PIN5_bm;
    2d42:	80 e2       	ldi	r24, 0x20	; 32
    2d44:	e0 e8       	ldi	r30, 0x80	; 128
    2d46:	f6 e0       	ldi	r31, 0x06	; 6
    2d48:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    2d4a:	c0 e4       	ldi	r28, 0x40	; 64
    2d4c:	da e0       	ldi	r29, 0x0A	; 10
    2d4e:	83 e2       	ldi	r24, 0x23	; 35
    2d50:	89 83       	std	Y+1, r24	; 0x01
	// set period of waveform generator and ccb as duty cycle (want half the period for duty cycle to have good clock signal)
	//period = (1 << (21 - spsExponent)) - 1;
	period = (F_CPU/16)/SPS;
    2d52:	94 01       	movw	r18, r8
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	50 e0       	ldi	r21, 0x00	; 0
    2d58:	60 e8       	ldi	r22, 0x80	; 128
    2d5a:	74 e8       	ldi	r23, 0x84	; 132
    2d5c:	8e e1       	ldi	r24, 0x1E	; 30
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    2d64:	89 01       	movw	r16, r18
    2d66:	9a 01       	movw	r18, r20
    2d68:	c8 01       	movw	r24, r16
	TCE1.PER = period;
    2d6a:	0e a3       	lds	r16, 0x5e
    2d6c:	1f a3       	lds	r17, 0x5f
	TCE1.CCBBUF = period / 2;
    2d6e:	96 95       	lsr	r25
    2d70:	87 95       	ror	r24
    2d72:	8a af       	sts	0x7a, r24
    2d74:	9b af       	sts	0x7b, r25
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//set the period as number of samples to know when to stop sampling (and compensate for discarded samples at start of sampling)
	TCC1.PER = numOfSamples;
    2d76:	e0 e4       	ldi	r30, 0x40	; 64
    2d78:	f8 e0       	ldi	r31, 0x08	; 8
    2d7a:	66 a2       	lds	r22, 0x96
    2d7c:	77 a2       	lds	r23, 0x97
	//Configure IO13(PF0) to drive event channel that triggers event every time a sample is collected
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    2d7e:	88 e7       	ldi	r24, 0x78	; 120
    2d80:	a0 e8       	ldi	r26, 0x80	; 128
    2d82:	b1 e0       	ldi	r27, 0x01	; 1
    2d84:	11 96       	adiw	r26, 0x01	; 1
    2d86:	8c 93       	st	X, r24
    2d88:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    2d8a:	e6 82       	std	Z+6, r14	; 0x06
	//TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2d8c:	88 81       	ld	r24, Y
    2d8e:	80 7f       	andi	r24, 0xF0	; 240
    2d90:	81 60       	ori	r24, 0x01	; 1
    2d92:	88 83       	st	Y, r24
	
	sampleCount = 0;
    2d94:	10 92 65 50 	sts	0x5065, r1
    2d98:	10 92 66 50 	sts	0x5066, r1
    2d9c:	10 92 67 50 	sts	0x5067, r1
    2da0:	10 92 68 50 	sts	0x5068, r1
	discardCount = 0;
    2da4:	10 92 5c 40 	sts	0x405C, r1
		
	// Enable interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
    2da8:	e0 ea       	ldi	r30, 0xA0	; 160
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	82 81       	ldd	r24, Z+2	; 0x02
    2dae:	83 60       	ori	r24, 0x03	; 3
    2db0:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2db2:	78 94       	sei
	//cli();

	//SPIDisable();	
	//enableADCMUX(FALSE);
	//ADCPower(FALSE);
}
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	ff 90       	pop	r15
    2dbe:	ef 90       	pop	r14
    2dc0:	df 90       	pop	r13
    2dc2:	cf 90       	pop	r12
    2dc4:	bf 90       	pop	r11
    2dc6:	af 90       	pop	r10
    2dc8:	9f 90       	pop	r9
    2dca:	8f 90       	pop	r8
    2dcc:	7f 90       	pop	r7
    2dce:	6f 90       	pop	r6
    2dd0:	08 95       	ret

00002dd2 <CO_collectADC>:
		PORTA.OUTCLR = PIN5_bm;
		PORTA.DIRCLR = PIN5_bm;
	}
}

void CO_collectADC(uint8_t channel, uint8_t gainExponent, uint16_t SPS, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    2dd2:	8f 92       	push	r8
    2dd4:	9f 92       	push	r9
    2dd6:	af 92       	push	r10
    2dd8:	cf 92       	push	r12
    2dda:	df 92       	push	r13
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	96 2f       	mov	r25, r22
    2dea:	fa 01       	movw	r30, r20
    2dec:	d9 01       	movw	r26, r18
    2dee:	e8 01       	movw	r28, r16
    2df0:	47 01       	movw	r8, r14
    2df2:	ac 2c       	mov	r10, r12
	
	CO_collectADC_ext(channel, (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gainExponent, SPS, numOfSamples, DataArray, BufferSize, use_FRAM);
    2df4:	61 ec       	ldi	r22, 0xC1	; 193
    2df6:	49 2f       	mov	r20, r25
    2df8:	9f 01       	movw	r18, r30
    2dfa:	8d 01       	movw	r16, r26
    2dfc:	7e 01       	movw	r14, r28
    2dfe:	64 01       	movw	r12, r8
    2e00:	0e 94 56 16 	call	0x2cac	; 0x2cac <CO_collectADC_ext>
}
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	ff 90       	pop	r15
    2e0e:	ef 90       	pop	r14
    2e10:	df 90       	pop	r13
    2e12:	cf 90       	pop	r12
    2e14:	af 90       	pop	r10
    2e16:	9f 90       	pop	r9
    2e18:	8f 90       	pop	r8
    2e1a:	08 95       	ret

00002e1c <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
    2e1c:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    2e22:	84 81       	ldd	r24, Z+4	; 0x04
    2e24:	95 81       	ldd	r25, Z+5	; 0x05
    2e26:	86 1b       	sub	r24, r22
    2e28:	91 09       	sbc	r25, r1

	return answer;
}
    2e2a:	08 95       	ret

00002e2c <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    2e2c:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    2e32:	84 81       	ldd	r24, Z+4	; 0x04
    2e34:	95 81       	ldd	r25, Z+5	; 0x05
    2e36:	77 27       	eor	r23, r23
    2e38:	67 fd       	sbrc	r22, 7
    2e3a:	70 95       	com	r23
    2e3c:	86 1b       	sub	r24, r22
    2e3e:	97 0b       	sbc	r25, r23

	return answer;
}
    2e40:	08 95       	ret

00002e42 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
    2e42:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    2e48:	84 81       	ldd	r24, Z+4	; 0x04
    2e4a:	95 81       	ldd	r25, Z+5	; 0x05
}
    2e4c:	08 95       	ret

00002e4e <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
    2e4e:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
    2e54:	84 81       	ldd	r24, Z+4	; 0x04
}
    2e56:	08 95       	ret

00002e58 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
    2e58:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
    2e5e:	85 81       	ldd	r24, Z+5	; 0x05
}
    2e60:	08 95       	ret

00002e62 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
    2e62:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    2e64:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
    2e66:	14 82       	std	Z+4, r1	; 0x04
    2e68:	9a e2       	ldi	r25, 0x2A	; 42
    2e6a:	9a 95       	dec	r25
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <ADC_Wait_8MHz+0x8>
    2e6e:	00 c0       	rjmp	.+0      	; 0x2e70 <ADC_Wait_8MHz+0xe>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    2e70:	84 83       	std	Z+4, r24	; 0x04
}
    2e72:	08 95       	ret

00002e74 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
    2e74:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    2e76:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
    2e78:	91 e0       	ldi	r25, 0x01	; 1
    2e7a:	94 83       	std	Z+4, r25	; 0x04
    2e7c:	95 e5       	ldi	r25, 0x55	; 85
    2e7e:	9a 95       	dec	r25
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <ADC_Wait_32MHz+0xa>
    2e82:	00 00       	nop

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    2e84:	84 83       	std	Z+4, r24	; 0x04
}
    2e86:	08 95       	ret

00002e88 <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    2e88:	ef 92       	push	r14
    2e8a:	ff 92       	push	r15
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	eb 01       	movw	r28, r22
    if (oversampling)
    2e96:	44 23       	and	r20, r20
    2e98:	c9 f0       	breq	.+50     	; 0x2ecc <ADC_Offset_Get_Unsigned+0x44>
    2e9a:	04 e0       	ldi	r16, 0x04	; 4
    2e9c:	10 e0       	ldi	r17, 0x00	; 0
    2e9e:	ee 24       	eor	r14, r14
    2ea0:	ff 24       	eor	r15, r15
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    2ea2:	88 81       	ld	r24, Y
    2ea4:	80 68       	ori	r24, 0x80	; 128
    2ea6:	88 83       	st	Y, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	80 ff       	sbrs	r24, 0
    2eac:	fd cf       	rjmp	.-6      	; 0x2ea8 <ADC_Offset_Get_Unsigned+0x20>
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
    2eae:	ce 01       	movw	r24, r28
    2eb0:	60 e0       	ldi	r22, 0x00	; 0
    2eb2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <ADC_ResultCh_GetWord_Unsigned>
    2eb6:	e8 0e       	add	r14, r24
    2eb8:	f9 1e       	adc	r15, r25
    2eba:	01 50       	subi	r16, 0x01	; 1
    2ebc:	10 40       	sbci	r17, 0x00	; 0
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
    2ebe:	89 f7       	brne	.-30     	; 0x2ea2 <ADC_Offset_Get_Unsigned+0x1a>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
    2ec0:	c7 01       	movw	r24, r14
    2ec2:	96 95       	lsr	r25
    2ec4:	87 95       	ror	r24
    2ec6:	96 95       	lsr	r25
    2ec8:	87 95       	ror	r24
    2eca:	09 c0       	rjmp	.+18     	; 0x2ede <ADC_Offset_Get_Unsigned+0x56>
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    2ecc:	88 81       	ld	r24, Y
    2ece:	80 68       	ori	r24, 0x80	; 128
    2ed0:	88 83       	st	Y, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	80 ff       	sbrs	r24, 0
    2ed6:	fd cf       	rjmp	.-6      	; 0x2ed2 <ADC_Offset_Get_Unsigned+0x4a>
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
    2ed8:	ce 01       	movw	r24, r28
    2eda:	0e 94 21 17 	call	0x2e42	; 0x2e42 <ADC_ResultCh_GetWord>
      
      return offset;
    }
}
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	08 95       	ret

00002eec <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	eb 01       	movw	r28, r22
    if (oversampling)
    2efa:	44 23       	and	r20, r20
    2efc:	e1 f0       	breq	.+56     	; 0x2f36 <ADC_Offset_Get_Signed+0x4a>
    2efe:	04 e0       	ldi	r16, 0x04	; 4
    2f00:	10 e0       	ldi	r17, 0x00	; 0
    2f02:	ee 24       	eor	r14, r14
    2f04:	ff 24       	eor	r15, r15
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    2f06:	88 81       	ld	r24, Y
    2f08:	80 68       	ori	r24, 0x80	; 128
    2f0a:	88 83       	st	Y, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	80 ff       	sbrs	r24, 0
    2f10:	fd cf       	rjmp	.-6      	; 0x2f0c <ADC_Offset_Get_Signed+0x20>
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
    2f12:	ce 01       	movw	r24, r28
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <ADC_ResultCh_GetWord_Signed>
    2f1a:	e8 0e       	add	r14, r24
    2f1c:	f9 1e       	adc	r15, r25
    2f1e:	01 50       	subi	r16, 0x01	; 1
    2f20:	10 40       	sbci	r17, 0x00	; 0
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
    2f22:	89 f7       	brne	.-30     	; 0x2f06 <ADC_Offset_Get_Signed+0x1a>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
    2f24:	c7 01       	movw	r24, r14
    2f26:	99 23       	and	r25, r25
    2f28:	0c f4       	brge	.+2      	; 0x2f2c <ADC_Offset_Get_Signed+0x40>
    2f2a:	03 96       	adiw	r24, 0x03	; 3
    2f2c:	95 95       	asr	r25
    2f2e:	87 95       	ror	r24
    2f30:	95 95       	asr	r25
    2f32:	87 95       	ror	r24
    2f34:	0a c0       	rjmp	.+20     	; 0x2f4a <ADC_Offset_Get_Signed+0x5e>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    2f36:	88 81       	ld	r24, Y
    2f38:	80 68       	ori	r24, 0x80	; 128
    2f3a:	88 83       	st	Y, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	80 ff       	sbrs	r24, 0
    2f40:	fd cf       	rjmp	.-6      	; 0x2f3c <ADC_Offset_Get_Signed+0x50>
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
    2f42:	ce 01       	movw	r24, r28
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <ADC_ResultCh_GetWord_Signed>
      
      return offset;
    }
}
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	08 95       	ret

00002f58 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    2f58:	aa ec       	ldi	r26, 0xCA	; 202
    2f5a:	b1 e0       	ldi	r27, 0x01	; 1
    2f5c:	92 e0       	ldi	r25, 0x02	; 2
    2f5e:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    2f60:	e8 2f       	mov	r30, r24
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    2f66:	1c 92       	st	X, r1

	return result;
}
    2f68:	08 95       	ret

00002f6a <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	c0 30       	cpi	r28, 0x00	; 0
    2f74:	d8 07       	cpc	r29, r24
    2f76:	59 f4       	brne	.+22     	; 0x2f8e <ADC_CalibrationValues_Load+0x24>
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    2f78:	80 e2       	ldi	r24, 0x20	; 32
    2f7a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <SP_ReadCalibrationByte>
    2f7e:	c0 e0       	ldi	r28, 0x00	; 0
    2f80:	d2 e0       	ldi	r29, 0x02	; 2
    2f82:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    2f84:	81 e2       	ldi	r24, 0x21	; 33
    2f86:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <SP_ReadCalibrationByte>
    2f8a:	8d 87       	std	Y+13, r24	; 0x0d
    2f8c:	08 c0       	rjmp	.+16     	; 0x2f9e <ADC_CalibrationValues_Load+0x34>
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    2f8e:	84 e2       	ldi	r24, 0x24	; 36
    2f90:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <SP_ReadCalibrationByte>
    2f94:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    2f96:	85 e2       	ldi	r24, 0x25	; 37
    2f98:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <SP_ReadCalibrationByte>
    2f9c:	8d 87       	std	Y+13, r24	; 0x0d
	}
}
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	08 95       	ret

00002fa4 <chb_init>:

*/
/**************************************************************************/
void chb_init()
{
    memset(&pcb, 0, sizeof(pcb_t));
    2fa4:	84 e1       	ldi	r24, 0x14	; 20
    2fa6:	e4 e1       	ldi	r30, 0x14	; 20
    2fa8:	f1 e2       	ldi	r31, 0x21	; 33
    2faa:	df 01       	movw	r26, r30
    2fac:	1d 92       	st	X+, r1
    2fae:	8a 95       	dec	r24
    2fb0:	e9 f7       	brne	.-6      	; 0x2fac <chb_init+0x8>
    pcb.src_addr = chb_get_short_addr();
    2fb2:	0e 94 33 19 	call	0x3266	; 0x3266 <chb_get_short_addr>
    2fb6:	80 93 14 21 	sts	0x2114, r24
    2fba:	90 93 15 21 	sts	0x2115, r25
    chb_drvr_init();
    2fbe:	0e 94 85 1b 	call	0x370a	; 0x370a <chb_drvr_init>
	//radio_msg_received_int_enable();
}
    2fc2:	08 95       	ret

00002fc4 <radio_msg_received_int_enable>:

// Configure PE2 to use as proxy interrupt for data being stored in radio buffer
void radio_msg_received_int_enable(){
	PORTE.DIRSET = PIN2_bm;
    2fc4:	e0 e8       	ldi	r30, 0x80	; 128
    2fc6:	f6 e0       	ldi	r31, 0x06	; 6
    2fc8:	84 e0       	ldi	r24, 0x04	; 4
    2fca:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTCLR = PIN2_bm;
    2fcc:	86 83       	std	Z+6, r24	; 0x06
	PORTE.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    2fce:	92 e0       	ldi	r25, 0x02	; 2
    2fd0:	90 8b       	std	Z+16, r25	; 0x10
	PORTE.INT0MASK = PIN2_bm;
    2fd2:	82 87       	std	Z+10, r24	; 0x0a
	PORTE.INTCTRL = PORT_INT0LVL_HI_gc;
    2fd4:	83 e0       	ldi	r24, 0x03	; 3
    2fd6:	81 87       	std	Z+9, r24	; 0x09
	// Enable low level interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    2fd8:	e0 ea       	ldi	r30, 0xA0	; 160
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	84 60       	ori	r24, 0x04	; 4
    2fe0:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2fe2:	78 94       	sei
}
    2fe4:	08 95       	ret

00002fe6 <chb_get_pcb>:
*/
/**************************************************************************/
pcb_t *chb_get_pcb()
{
    return &pcb;
}
    2fe6:	84 e1       	ldi	r24, 0x14	; 20
    2fe8:	91 e2       	ldi	r25, 0x21	; 33
    2fea:	08 95       	ret

00002fec <chb_write>:
/*!

*/
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U32 len)
{
    2fec:	2f 92       	push	r2
    2fee:	3f 92       	push	r3
    2ff0:	4f 92       	push	r4
    2ff2:	5f 92       	push	r5
    2ff4:	6f 92       	push	r6
    2ff6:	7f 92       	push	r7
    2ff8:	8f 92       	push	r8
    2ffa:	9f 92       	push	r9
    2ffc:	af 92       	push	r10
    2ffe:	bf 92       	push	r11
    3000:	cf 92       	push	r12
    3002:	df 92       	push	r13
    3004:	ef 92       	push	r14
    3006:	ff 92       	push	r15
    3008:	0f 93       	push	r16
    300a:	1f 93       	push	r17
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	2a 97       	sbiw	r28, 0x0a	; 10
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	2c 01       	movw	r4, r24
    301c:	1b 01       	movw	r2, r22
    301e:	69 01       	movw	r12, r18
    3020:	7a 01       	movw	r14, r20
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    while (len > 0)
    3022:	21 15       	cp	r18, r1
    3024:	31 05       	cpc	r19, r1
    3026:	41 05       	cpc	r20, r1
    3028:	51 05       	cpc	r21, r1
    302a:	09 f4       	brne	.+2      	; 0x302e <chb_write+0x42>
    302c:	68 c0       	rjmp	.+208    	; 0x30fe <chb_write+0x112>
    U8 status, frm_len, hdr[CHB_HDR_SZ + 1];
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    302e:	88 24       	eor	r8, r8
    3030:	99 24       	eor	r9, r9
    3032:	54 01       	movw	r10, r8
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    *hdr_ptr++ = CHB_FCF_BYTE_1;
    3034:	08 e9       	ldi	r16, 0x98	; 152

    *hdr_ptr++ = pcb.seq++;
    3036:	0f 2e       	mov	r0, r31
    3038:	f6 e1       	ldi	r31, 0x16	; 22
    303a:	6f 2e       	mov	r6, r31
    303c:	f1 e2       	ldi	r31, 0x21	; 33
    303e:	7f 2e       	mov	r7, r31
    3040:	f0 2d       	mov	r31, r0
	frm_offset = 0;
    while (len > 0)
    {
        // calculate which frame len to use. if greater than max payload, split
        // up operation.
        frm_len = (len > CHB_MAX_PAYLOAD) ? CHB_MAX_PAYLOAD : len;
    3042:	1c 2d       	mov	r17, r12
    3044:	85 e6       	ldi	r24, 0x65	; 101
    3046:	c8 16       	cp	r12, r24
    3048:	d1 04       	cpc	r13, r1
    304a:	e1 04       	cpc	r14, r1
    304c:	f1 04       	cpc	r15, r1
    304e:	08 f0       	brcs	.+2      	; 0x3052 <chb_write+0x66>
    3050:	14 e6       	ldi	r17, 0x64	; 100
{
    U8 *hdr_ptr = hdr;

    // calc frame size and put in 0 position of array
    // frame size = hdr sz + payload len + fcs len
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;
    3052:	81 2f       	mov	r24, r17
    3054:	85 5f       	subi	r24, 0xF5	; 245
    3056:	89 83       	std	Y+1, r24	; 0x01

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    3058:	9f ef       	ldi	r25, 0xFF	; 255
    305a:	49 16       	cp	r4, r25
    305c:	9f ef       	ldi	r25, 0xFF	; 255
    305e:	59 06       	cpc	r5, r25
    3060:	11 f0       	breq	.+4      	; 0x3066 <chb_write+0x7a>
    3062:	81 e6       	ldi	r24, 0x61	; 97
    3064:	01 c0       	rjmp	.+2      	; 0x3068 <chb_write+0x7c>
    3066:	81 e4       	ldi	r24, 0x41	; 65
    3068:	8a 83       	std	Y+2, r24	; 0x02
    *hdr_ptr++ = CHB_FCF_BYTE_1;
    306a:	0b 83       	std	Y+3, r16	; 0x03

    *hdr_ptr++ = pcb.seq++;
    306c:	f3 01       	movw	r30, r6
    306e:	80 81       	ld	r24, Z
    3070:	8c 83       	std	Y+4, r24	; 0x04
    3072:	8f 5f       	subi	r24, 0xFF	; 255
    3074:	80 83       	st	Z, r24

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
    3076:	84 e3       	ldi	r24, 0x34	; 52
    3078:	92 e1       	ldi	r25, 0x12	; 18
    307a:	8d 83       	std	Y+5, r24	; 0x05
    307c:	9e 83       	std	Y+6, r25	; 0x06
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = addr;
    307e:	4f 82       	std	Y+7, r4	; 0x07
    3080:	58 86       	std	Y+8, r5	; 0x08
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = pcb.src_addr;
    3082:	e4 e1       	ldi	r30, 0x14	; 20
    3084:	f1 e2       	ldi	r31, 0x21	; 33
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	89 87       	std	Y+9, r24	; 0x09
    308c:	9a 87       	std	Y+10, r25	; 0x0a
		chb_gen_hdr(hdr, addr, frm_len);

        // send data to chip
		//rtry = 0;
		//do{
        status = chb_tx(hdr, data+frm_offset, frm_len);			
    308e:	b1 01       	movw	r22, r2
    3090:	68 0d       	add	r22, r8
    3092:	79 1d       	adc	r23, r9
    3094:	ce 01       	movw	r24, r28
    3096:	01 96       	adiw	r24, 0x01	; 1
    3098:	41 2f       	mov	r20, r17
    309a:	0e 94 c1 1a 	call	0x3582	; 0x3582 <chb_tx>

             switch (status)
    309e:	83 30       	cpi	r24, 0x03	; 3
    30a0:	c9 f0       	breq	.+50     	; 0x30d4 <chb_write+0xe8>
    30a2:	84 30       	cpi	r24, 0x04	; 4
    30a4:	18 f4       	brcc	.+6      	; 0x30ac <chb_write+0xc0>
    30a6:	81 30       	cpi	r24, 0x01	; 1
    30a8:	e1 f4       	brne	.+56     	; 0x30e2 <chb_write+0xf6>
    30aa:	04 c0       	rjmp	.+8      	; 0x30b4 <chb_write+0xc8>
    30ac:	85 30       	cpi	r24, 0x05	; 5
    30ae:	51 f0       	breq	.+20     	; 0x30c4 <chb_write+0xd8>
    30b0:	80 34       	cpi	r24, 0x40	; 64
    30b2:	b9 f4       	brne	.+46     	; 0x30e2 <chb_write+0xf6>
             {
             case RADIO_SUCCESS:
                  //fall through
             case CHB_SUCCESS_DATA_PENDING:
                 pcb.txd_success++;
    30b4:	eb e1       	ldi	r30, 0x1B	; 27
    30b6:	f1 e2       	ldi	r31, 0x21	; 33
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	80 83       	st	Z, r24
    30c0:	91 83       	std	Z+1, r25	; 0x01
                 break;
    30c2:	0f c0       	rjmp	.+30     	; 0x30e2 <chb_write+0xf6>
 
             case CHB_NO_ACK:
                 pcb.txd_noack++;
    30c4:	ed e1       	ldi	r30, 0x1D	; 29
    30c6:	f1 e2       	ldi	r31, 0x21	; 33
    30c8:	80 81       	ld	r24, Z
    30ca:	91 81       	ldd	r25, Z+1	; 0x01
    30cc:	01 96       	adiw	r24, 0x01	; 1
    30ce:	80 83       	st	Z, r24
    30d0:	91 83       	std	Z+1, r25	; 0x01
				 //rtry++;
                 break;
    30d2:	07 c0       	rjmp	.+14     	; 0x30e2 <chb_write+0xf6>
 
             case CHB_CHANNEL_ACCESS_FAILURE:
                 pcb.txd_channel_fail++;
    30d4:	ef e1       	ldi	r30, 0x1F	; 31
    30d6:	f1 e2       	ldi	r31, 0x21	; 33
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	01 96       	adiw	r24, 0x01	; 1
    30de:	80 83       	st	Z, r24
    30e0:	91 83       	std	Z+1, r25	; 0x01
             }
			//if(rtry>0) _delay_us(10);		//if not successfully sent the first time, wait some time and try again
			//if(rtry==20) return status;;		//after 20 tries give up on sending the message	
		//} while(status != CHB_SUCCESS);			
        // adjust len and restart
		frm_offset += frm_len;
    30e2:	81 2f       	mov	r24, r17
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	a0 e0       	ldi	r26, 0x00	; 0
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	88 0e       	add	r8, r24
    30ec:	99 1e       	adc	r9, r25
    30ee:	aa 1e       	adc	r10, r26
    30f0:	bb 1e       	adc	r11, r27
        len = len - frm_len;
    30f2:	c8 1a       	sub	r12, r24
    30f4:	d9 0a       	sbc	r13, r25
    30f6:	ea 0a       	sbc	r14, r26
    30f8:	fb 0a       	sbc	r15, r27
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    while (len > 0)
    30fa:	09 f0       	breq	.+2      	; 0x30fe <chb_write+0x112>
    30fc:	a2 cf       	rjmp	.-188    	; 0x3042 <chb_write+0x56>
		frm_offset += frm_len;
        len = len - frm_len;
		//_delay_ms(100);				//wait a little before sending next message
    }
    return CHB_SUCCESS;
}
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	2a 96       	adiw	r28, 0x0a	; 10
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	ff 90       	pop	r15
    3110:	ef 90       	pop	r14
    3112:	df 90       	pop	r13
    3114:	cf 90       	pop	r12
    3116:	bf 90       	pop	r11
    3118:	af 90       	pop	r10
    311a:	9f 90       	pop	r9
    311c:	8f 90       	pop	r8
    311e:	7f 90       	pop	r7
    3120:	6f 90       	pop	r6
    3122:	5f 90       	pop	r5
    3124:	4f 90       	pop	r4
    3126:	3f 90       	pop	r3
    3128:	2f 90       	pop	r2
    312a:	08 95       	ret

0000312c <chb_read>:
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
{
    312c:	df 92       	push	r13
    312e:	ef 92       	push	r14
    3130:	ff 92       	push	r15
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	7c 01       	movw	r14, r24

    data_ptr = rx->data;

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    313c:	0e 94 11 19 	call	0x3222	; 0x3222 <chb_buf_read>
    3140:	d8 2e       	mov	r13, r24
    3142:	88 23       	and	r24, r24
    3144:	0c f4       	brge	.+2      	; 0x3148 <chb_read+0x1c>
    3146:	46 c0       	rjmp	.+140    	; 0x31d4 <chb_read+0xa8>
    {
        return 0;
    }
    *data_ptr++ = len;
    3148:	f7 01       	movw	r30, r14
    314a:	85 83       	std	Z+5, r24	; 0x05

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    314c:	88 23       	and	r24, r24
    314e:	71 f0       	breq	.+28     	; 0x316c <chb_read+0x40>
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    {
        return 0;
    }
    *data_ptr++ = len;
    3150:	e7 01       	movw	r28, r14
    3152:	26 96       	adiw	r28, 0x06	; 6
 
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
    3154:	87 01       	movw	r16, r14
    3156:	09 5f       	subi	r16, 0xF9	; 249
    3158:	1f 4f       	sbci	r17, 0xFF	; 255
    315a:	81 50       	subi	r24, 0x01	; 1
    315c:	08 0f       	add	r16, r24
    315e:	11 1d       	adc	r17, r1
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    {
        *data_ptr++ = chb_buf_read();
    3160:	0e 94 11 19 	call	0x3222	; 0x3222 <chb_buf_read>
    3164:	89 93       	st	Y+, r24
        return 0;
    }
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    3166:	c0 17       	cp	r28, r16
    3168:	d1 07       	cpc	r29, r17
    316a:	d1 f7       	brne	.-12     	; 0x3160 <chb_read+0x34>
    // we'll use it as temp storage to parse the frame. then move the frame
    // down so that only the payload will be in the buffer.

    // extract the sequence number
    data_ptr = rx->data + 3;    // location of sequence number
    seq = *data_ptr;
    316c:	f7 01       	movw	r30, r14
    316e:	c0 85       	ldd	r28, Z+8	; 0x08

    // parse the buffer and extract the dest and src addresses
    data_ptr = rx->data + 6;                // location of dest addr
    rx->dest_addr = *(U16 *)data_ptr;
    3170:	83 85       	ldd	r24, Z+11	; 0x0b
    3172:	94 85       	ldd	r25, Z+12	; 0x0c
    3174:	83 83       	std	Z+3, r24	; 0x03
    3176:	94 83       	std	Z+4, r25	; 0x04
    data_ptr += sizeof(U16);
    rx->src_addr = *(U16 *)data_ptr;
    3178:	85 85       	ldd	r24, Z+13	; 0x0d
    317a:	96 85       	ldd	r25, Z+14	; 0x0e
    317c:	81 83       	std	Z+1, r24	; 0x01
    317e:	92 83       	std	Z+2, r25	; 0x02
    data_ptr += sizeof(U16);

    // if the data in the rx buf is 0, then clear the rx_flag. otherwise, keep it raised
    if (!chb_buf_get_len())
    3180:	0e 94 28 19 	call	0x3250	; 0x3250 <chb_buf_get_len>
    3184:	88 23       	and	r24, r24
    3186:	11 f4       	brne	.+4      	; 0x318c <chb_read+0x60>
    {
        pcb.data_rcv = false;
    3188:	10 92 17 21 	sts	0x2117, r1
#else
    // duplicate frame check (dupe check). we want to remove frames that have been already been received since they 
    // are just retries. 
    // note: this dupe check only removes duplicate frames from the previous transfer. if another frame from a different
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    318c:	80 91 0a 20 	lds	r24, 0x200A
    3190:	c8 17       	cp	r28, r24
    3192:	51 f4       	brne	.+20     	; 0x31a8 <chb_read+0x7c>
    3194:	f7 01       	movw	r30, r14
    3196:	21 81       	ldd	r18, Z+1	; 0x01
    3198:	32 81       	ldd	r19, Z+2	; 0x02
    319a:	80 91 0b 20 	lds	r24, 0x200B
    319e:	90 91 0c 20 	lds	r25, 0x200C
    31a2:	28 17       	cp	r18, r24
    31a4:	39 07       	cpc	r19, r25
    31a6:	c1 f0       	breq	.+48     	; 0x31d8 <chb_read+0xac>
        // it properly. discard.
        return 0;
    }
    else
    {
        prev_seq = seq;
    31a8:	c0 93 0a 20 	sts	0x200A, r28
        prev_src_addr = rx->src_addr;
    31ac:	f7 01       	movw	r30, r14
    31ae:	81 81       	ldd	r24, Z+1	; 0x01
    31b0:	92 81       	ldd	r25, Z+2	; 0x02
    31b2:	80 93 0b 20 	sts	0x200B, r24
    31b6:	90 93 0c 20 	sts	0x200C, r25
    }

    // move the payload down to the beginning of the data buffer
    //memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	memmove(rx, data_ptr, len - CHB_HDR_SZ);
    31ba:	b7 01       	movw	r22, r14
    31bc:	61 5f       	subi	r22, 0xF1	; 241
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	4d 2d       	mov	r20, r13
    31c2:	50 e0       	ldi	r21, 0x00	; 0
    31c4:	49 50       	subi	r20, 0x09	; 9
    31c6:	50 40       	sbci	r21, 0x00	; 0
    31c8:	c7 01       	movw	r24, r14
    31ca:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <memmove>
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
    31ce:	8d 2d       	mov	r24, r13
    31d0:	8b 50       	subi	r24, 0x0B	; 11
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <chb_read+0xae>

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    {
        return 0;
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	01 c0       	rjmp	.+2      	; 0x31da <chb_read+0xae>
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    {
        // this is a duplicate frame from a retry. the remote node thinks we didn't receive 
        // it properly. discard.
        return 0;
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    //memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	memmove(rx, data_ptr, len - CHB_HDR_SZ);
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
#endif
}
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
    31e2:	ff 90       	pop	r15
    31e4:	ef 90       	pop	r14
    31e6:	df 90       	pop	r13
    31e8:	08 95       	ret

000031ea <chb_buf_init>:

*/
/**************************************************************************/
void chb_buf_init()
{
    rd_ptr = 0;
    31ea:	10 92 28 21 	sts	0x2128, r1
    wr_ptr = 0;
    31ee:	10 92 29 21 	sts	0x2129, r1
    len = 0;
    31f2:	10 92 2a 21 	sts	0x212A, r1
}
    31f6:	08 95       	ret

000031f8 <chb_buf_write>:

*/
/**************************************************************************/
void chb_buf_write(U8 data)
{
    chb_buf[wr_ptr] = data;
    31f8:	20 91 29 21 	lds	r18, 0x2129
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	f9 01       	movw	r30, r18
    3200:	e5 5d       	subi	r30, 0xD5	; 213
    3202:	fe 4d       	sbci	r31, 0xDE	; 222
    3204:	80 83       	st	Z, r24
    wr_ptr = (wr_ptr + 1) % CHB_BUF_SZ;
    3206:	c9 01       	movw	r24, r18
    3208:	01 96       	adiw	r24, 0x01	; 1
    320a:	60 e8       	ldi	r22, 0x80	; 128
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    3212:	80 93 29 21 	sts	0x2129, r24
    len++;
    3216:	80 91 2a 21 	lds	r24, 0x212A
    321a:	8f 5f       	subi	r24, 0xFF	; 255
    321c:	80 93 2a 21 	sts	0x212A, r24
}
    3220:	08 95       	ret

00003222 <chb_buf_read>:
/**************************************************************************/
U8 chb_buf_read()
{
    U8 data;

    data = chb_buf[rd_ptr];
    3222:	20 91 28 21 	lds	r18, 0x2128
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	f9 01       	movw	r30, r18
    322a:	e5 5d       	subi	r30, 0xD5	; 213
    322c:	fe 4d       	sbci	r31, 0xDE	; 222
    322e:	40 81       	ld	r20, Z
    rd_ptr = (rd_ptr + 1) % CHB_BUF_SZ;
    3230:	2f 5f       	subi	r18, 0xFF	; 255
    3232:	3f 4f       	sbci	r19, 0xFF	; 255
    3234:	c9 01       	movw	r24, r18
    3236:	60 e8       	ldi	r22, 0x80	; 128
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    323e:	80 93 28 21 	sts	0x2128, r24
    len--;
    3242:	80 91 2a 21 	lds	r24, 0x212A
    3246:	81 50       	subi	r24, 0x01	; 1
    3248:	80 93 2a 21 	sts	0x212A, r24
    return data;
}
    324c:	84 2f       	mov	r24, r20
    324e:	08 95       	ret

00003250 <chb_buf_get_len>:
*/
/**************************************************************************/
U8 chb_buf_get_len()
{
    return len;
}
    3250:	80 91 2a 21 	lds	r24, 0x212A
    3254:	08 95       	ret

00003256 <chb_get_ieee_addr>:
/*!

*/
/**************************************************************************/
void chb_get_ieee_addr(U8 *addr)
{
    3256:	bc 01       	movw	r22, r24
    chb_eeprom_read(CHB_EEPROM_IEEE_ADDR, addr, 8);
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	48 e0       	ldi	r20, 0x08	; 8
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <chb_eeprom_read>
}
    3264:	08 95       	ret

00003266 <chb_get_short_addr>:
/*!

*/
/**************************************************************************/
U16 chb_get_short_addr()
{
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	0f 92       	push	r0
    326c:	0f 92       	push	r0
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
    U8 addr[2];

    chb_eeprom_read(CHB_EEPROM_SHORT_ADDR, addr, 2);
    3272:	89 e0       	ldi	r24, 0x09	; 9
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	be 01       	movw	r22, r28
    3278:	6f 5f       	subi	r22, 0xFF	; 255
    327a:	7f 4f       	sbci	r23, 0xFF	; 255
    327c:	42 e0       	ldi	r20, 0x02	; 2
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <chb_eeprom_read>
    return *(U16 *)addr;
}
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	08 95       	ret

00003292 <RadioCS>:
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
}

//select radio SPI on port D with cs
void RadioCS(uint8_t status){
	if (status) PORTD.OUTCLR = PIN4_bm;
    3292:	88 23       	and	r24, r24
    3294:	29 f0       	breq	.+10     	; 0x32a0 <RadioCS+0xe>
    3296:	80 e1       	ldi	r24, 0x10	; 16
    3298:	e0 e6       	ldi	r30, 0x60	; 96
    329a:	f6 e0       	ldi	r31, 0x06	; 6
    329c:	86 83       	std	Z+6, r24	; 0x06
    329e:	08 95       	ret
	else {
		PORTD.OUTSET = PIN4_bm;
    32a0:	80 e1       	ldi	r24, 0x10	; 16
    32a2:	e0 e6       	ldi	r30, 0x60	; 96
    32a4:	f6 e0       	ldi	r31, 0x06	; 6
    32a6:	85 83       	std	Z+5, r24	; 0x05
    32a8:	08 95       	ret

000032aa <chb_frame_write>:
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
{
    32aa:	df 92       	push	r13
    32ac:	ef 92       	push	r14
    32ae:	ff 92       	push	r15
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	8c 01       	movw	r16, r24
    32ba:	c6 2f       	mov	r28, r22
    32bc:	7a 01       	movw	r14, r20
    32be:	d2 2e       	mov	r13, r18
    U8 i;
	//U8 dummy;
	
    // dont allow transmission longer than max frame size
    if ((hdr_len + data_len) > 127)
    32c0:	82 2f       	mov	r24, r18
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	86 0f       	add	r24, r22
    32c6:	91 1d       	adc	r25, r1
    32c8:	80 38       	cpi	r24, 0x80	; 128
    32ca:	91 05       	cpc	r25, r1
    32cc:	8c f5       	brge	.+98     	; 0x3330 <chb_frame_write+0x86>
    {
        return;
    }

    // initiate spi transaction
    CHB_ENTER_CRIT();
    32ce:	8f b7       	in	r24, 0x3f	; 63
    32d0:	80 93 57 40 	sts	0x4057, r24
    32d4:	f8 94       	cli
    RadioCS(TRUE); 
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>

    // send fifo write command
    //dummy = SPID_write(CHB_SPI_CMD_FW);
	SPID_write(CHB_SPI_CMD_FW);
    32dc:	80 e6       	ldi	r24, 0x60	; 96
    32de:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    32e2:	cc 23       	and	r28, r28
    32e4:	79 f0       	breq	.+30     	; 0x3304 <chb_frame_write+0x5a>
/**************************************************************************/
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
    32e6:	c8 01       	movw	r24, r16
    32e8:	01 96       	adiw	r24, 0x01	; 1
    32ea:	c1 50       	subi	r28, 0x01	; 1
    32ec:	9c 01       	movw	r18, r24
    32ee:	2c 0f       	add	r18, r28
    32f0:	31 1d       	adc	r19, r1
    32f2:	e9 01       	movw	r28, r18

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    {
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    32f4:	f8 01       	movw	r30, r16
    32f6:	81 91       	ld	r24, Z+
    32f8:	8f 01       	movw	r16, r30
    32fa:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
    // send fifo write command
    //dummy = SPID_write(CHB_SPI_CMD_FW);
	SPID_write(CHB_SPI_CMD_FW);

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    32fe:	0c 17       	cp	r16, r28
    3300:	1d 07       	cpc	r17, r29
    3302:	c1 f7       	brne	.-16     	; 0x32f4 <chb_frame_write+0x4a>
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    3304:	dd 20       	and	r13, r13
    3306:	69 f0       	breq	.+26     	; 0x3322 <chb_frame_write+0x78>
/**************************************************************************/
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
    3308:	e7 01       	movw	r28, r14
    330a:	21 96       	adiw	r28, 0x01	; 1
    330c:	da 94       	dec	r13
    330e:	cd 0d       	add	r28, r13
    3310:	d1 1d       	adc	r29, r1

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    {
        //dummy = SPID_write(*data++);
		SPID_write(*data++);
    3312:	f7 01       	movw	r30, r14
    3314:	81 91       	ld	r24, Z+
    3316:	7f 01       	movw	r14, r30
    3318:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    331c:	ec 16       	cp	r14, r28
    331e:	fd 06       	cpc	r15, r29
    3320:	c1 f7       	brne	.-16     	; 0x3312 <chb_frame_write+0x68>
        //dummy = SPID_write(*data++);
		SPID_write(*data++);
    }

    // terminate spi transaction
    RadioCS(FALSE); 
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>
    CHB_LEAVE_CRIT();
    3328:	80 91 57 40 	lds	r24, 0x4057
    332c:	8f bf       	out	0x3f, r24	; 63
    332e:	78 94       	sei
}
    3330:	df 91       	pop	r29
    3332:	cf 91       	pop	r28
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	ff 90       	pop	r15
    333a:	ef 90       	pop	r14
    333c:	df 90       	pop	r13
    333e:	08 95       	ret

00003340 <chb_reg_write>:
/*!

*/
/**************************************************************************/
void chb_reg_write(U8 addr, U8 val)
{
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	d8 2f       	mov	r29, r24
    3346:	c6 2f       	mov	r28, r22
    //U8 dummy; 

    /* Add the Register Write command to the address. */
    addr |= 0xC0;

    CHB_ENTER_CRIT();
    3348:	8f b7       	in	r24, 0x3f	; 63
    334a:	80 93 57 40 	sts	0x4057, r24
    334e:	f8 94       	cli
    RadioCS(TRUE);
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>

    /*Send Register address and write register content.*/
    //dummy = SPID_write(addr);
	SPID_write(addr);
    3356:	8d 2f       	mov	r24, r29
    3358:	80 6c       	ori	r24, 0xC0	; 192
    335a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
    //dummy = SPID_write(val);
	SPID_write(val);
    335e:	8c 2f       	mov	r24, r28
    3360:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>

    RadioCS(FALSE);
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>
    CHB_LEAVE_CRIT();
    336a:	80 91 57 40 	lds	r24, 0x4057
    336e:	8f bf       	out	0x3f, r24	; 63
    3370:	78 94       	sei
}
    3372:	df 91       	pop	r29
    3374:	cf 91       	pop	r28
    3376:	08 95       	ret

00003378 <chb_set_pwr>:
/*!
    Set the power level
*/
/**************************************************************************/
void chb_set_pwr(U8 val)
{
    3378:	68 2f       	mov	r22, r24
    chb_reg_write(PHY_TX_PWR, val);
    337a:	85 e0       	ldi	r24, 0x05	; 5
    337c:	0e 94 a0 19 	call	0x3340	; 0x3340 <chb_reg_write>
}
    3380:	08 95       	ret

00003382 <chb_reg_write64>:
/*!

*/
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	08 2f       	mov	r16, r24
    U8 i;

    for (i=0; i<8; i++)
    338c:	c6 2f       	mov	r28, r22
    338e:	d7 2f       	mov	r29, r23
    3390:	10 e0       	ldi	r17, 0x00	; 0
    {
        chb_reg_write(addr + i, *(val + i));
    3392:	69 91       	ld	r22, Y+
    3394:	81 2f       	mov	r24, r17
    3396:	80 0f       	add	r24, r16
    3398:	0e 94 a0 19 	call	0x3340	; 0x3340 <chb_reg_write>
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    U8 i;

    for (i=0; i<8; i++)
    339c:	1f 5f       	subi	r17, 0xFF	; 255
    339e:	18 30       	cpi	r17, 0x08	; 8
    33a0:	c1 f7       	brne	.-16     	; 0x3392 <chb_reg_write64+0x10>
    {
        chb_reg_write(addr + i, *(val + i));
    }
}
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	1f 91       	pop	r17
    33a8:	0f 91       	pop	r16
    33aa:	08 95       	ret

000033ac <chb_set_ieee_addr>:
/*! 
 
*/
/**************************************************************************/
void chb_set_ieee_addr(U8 *addr)
{
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	ec 01       	movw	r28, r24
    chb_eeprom_write(CHB_EEPROM_IEEE_ADDR, addr, 8); 
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	be 01       	movw	r22, r28
    33b8:	48 e0       	ldi	r20, 0x08	; 8
    33ba:	50 e0       	ldi	r21, 0x00	; 0
    33bc:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <chb_eeprom_write>
    chb_reg_write64(IEEE_ADDR_0, addr); 
    33c0:	84 e2       	ldi	r24, 0x24	; 36
    33c2:	be 01       	movw	r22, r28
    33c4:	0e 94 c1 19 	call	0x3382	; 0x3382 <chb_reg_write64>
}
    33c8:	df 91       	pop	r29
    33ca:	cf 91       	pop	r28
    33cc:	08 95       	ret

000033ce <chb_reg_write16>:
/*!

*/
/**************************************************************************/
void chb_reg_write16(U8 addr, U16 val)
{
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	c8 2f       	mov	r28, r24
    33d4:	d7 2f       	mov	r29, r23
    U8 i;

    for (i=0; i<2; i++)
    {
        chb_reg_write(addr + i, val >> (8 * i));
    33d6:	0e 94 a0 19 	call	0x3340	; 0x3340 <chb_reg_write>
    33da:	8c 2f       	mov	r24, r28
    33dc:	8f 5f       	subi	r24, 0xFF	; 255
    33de:	6d 2f       	mov	r22, r29
    33e0:	0e 94 a0 19 	call	0x3340	; 0x3340 <chb_reg_write>
    }
}
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	08 95       	ret

000033ea <chb_set_short_addr>:
/*!

*/
/**************************************************************************/
void chb_set_short_addr(U16 addr)
{
    33ea:	0f 93       	push	r16
    33ec:	1f 93       	push	r17
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	0f 92       	push	r0
    33f4:	0f 92       	push	r0
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    U8 *addr_ptr = (U8 *)&addr;
    pcb_t *pcb = chb_get_pcb();
    33fe:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <chb_get_pcb>
    3402:	8c 01       	movw	r16, r24

    chb_eeprom_write(CHB_EEPROM_SHORT_ADDR, addr_ptr, 2);
    3404:	89 e0       	ldi	r24, 0x09	; 9
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	be 01       	movw	r22, r28
    340a:	6f 5f       	subi	r22, 0xFF	; 255
    340c:	7f 4f       	sbci	r23, 0xFF	; 255
    340e:	42 e0       	ldi	r20, 0x02	; 2
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <chb_eeprom_write>
    chb_reg_write16(SHORT_ADDR_0, addr);
    3416:	69 81       	ldd	r22, Y+1	; 0x01
    3418:	7a 81       	ldd	r23, Y+2	; 0x02
    341a:	80 e2       	ldi	r24, 0x20	; 32
    341c:	0e 94 e7 19 	call	0x33ce	; 0x33ce <chb_reg_write16>
    pcb->src_addr = addr;
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	9a 81       	ldd	r25, Y+2	; 0x02
    3424:	f8 01       	movw	r30, r16
    3426:	80 83       	st	Z, r24
    3428:	91 83       	std	Z+1, r25	; 0x01
}
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    3436:	08 95       	ret

00003438 <chb_reg_read>:
/*!

*/
/**************************************************************************/
U8 chb_reg_read(U8 addr)
{
    3438:	cf 93       	push	r28
    343a:	c8 2f       	mov	r28, r24
    U8 val = 0;

    /* Add the register read command to the register address. */
    addr |= 0x80;

    CHB_ENTER_CRIT();
    343c:	8f b7       	in	r24, 0x3f	; 63
    343e:	80 93 57 40 	sts	0x4057, r24
    3442:	f8 94       	cli
    RadioCS(TRUE);
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>

    /*Send Register address and read register content.*/
    val = SPID_write(addr);
    344a:	8c 2f       	mov	r24, r28
    344c:	80 68       	ori	r24, 0x80	; 128
    344e:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
    val = SPID_write(val);
    3452:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
    3456:	c8 2f       	mov	r28, r24

    RadioCS(FALSE);
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>
    CHB_LEAVE_CRIT();
    345e:	80 91 57 40 	lds	r24, 0x4057
    3462:	8f bf       	out	0x3f, r24	; 63
    3464:	78 94       	sei

    return val;
}
    3466:	8c 2f       	mov	r24, r28
    3468:	cf 91       	pop	r28
    346a:	08 95       	ret

0000346c <chb_get_state>:

*/
/**************************************************************************/
static U8 chb_get_state()
{
    return chb_reg_read(TRX_STATUS) & 0x1f;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
}
    3472:	8f 71       	andi	r24, 0x1F	; 31
    3474:	08 95       	ret

00003476 <chb_reg_read_mod_write>:
/*!

*/
/**************************************************************************/
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    3476:	1f 93       	push	r17
    3478:	cf 93       	push	r28
    347a:	df 93       	push	r29
    347c:	c8 2f       	mov	r28, r24
    347e:	16 2f       	mov	r17, r22
    3480:	d4 2f       	mov	r29, r20
    U8 tmp;

    tmp = chb_reg_read(addr);
    3482:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    val &= mask;                // mask off stray bits from val
    tmp &= ~mask;               // mask off bits in reg val
    3486:	6d 2f       	mov	r22, r29
    3488:	60 95       	com	r22
    348a:	68 23       	and	r22, r24
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    U8 tmp;

    tmp = chb_reg_read(addr);
    val &= mask;                // mask off stray bits from val
    348c:	d1 23       	and	r29, r17
    tmp &= ~mask;               // mask off bits in reg val
    tmp |= val;                 // copy val into reg val
    348e:	6d 2b       	or	r22, r29
    chb_reg_write(addr, tmp);   // write back to reg
    3490:	8c 2f       	mov	r24, r28
    3492:	0e 94 a0 19 	call	0x3340	; 0x3340 <chb_reg_write>
}
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	08 95       	ret

0000349e <chb_set_state>:
    for certain operations. Check the datasheet for more details on the state 
    machine and manipulations.
*/
/**************************************************************************/
U8 chb_set_state(U8 state)
{
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	d8 2f       	mov	r29, r24
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    34a4:	80 91 64 06 	lds	r24, 0x0664
    34a8:	81 fd       	sbrc	r24, 1
    34aa:	4b c0       	rjmp	.+150    	; 0x3542 <chb_set_state+0xa4>
    {
        return RADIO_WRONG_STATE;
    }

    // if we're in a transition state, wait for the state to become stable
    curr_state = chb_get_state();
    34ac:	0e 94 36 1a 	call	0x346c	; 0x346c <chb_get_state>
    34b0:	c8 2f       	mov	r28, r24
    if ((curr_state == CHB_BUSY_TX_ARET) || (curr_state == CHB_BUSY_RX_AACK) || (curr_state == CHB_BUSY_RX) || (curr_state == CHB_BUSY_TX))
    34b2:	81 51       	subi	r24, 0x11	; 17
    34b4:	82 30       	cpi	r24, 0x02	; 2
    34b6:	20 f0       	brcs	.+8      	; 0x34c0 <chb_set_state+0x22>
    34b8:	c1 30       	cpi	r28, 0x01	; 1
    34ba:	11 f0       	breq	.+4      	; 0x34c0 <chb_set_state+0x22>
    34bc:	c2 30       	cpi	r28, 0x02	; 2
    34be:	21 f4       	brne	.+8      	; 0x34c8 <chb_set_state+0x2a>
    {
        while (chb_get_state() == curr_state);
    34c0:	0e 94 36 1a 	call	0x346c	; 0x346c <chb_get_state>
    34c4:	8c 17       	cp	r24, r28
    34c6:	e1 f3       	breq	.-8      	; 0x34c0 <chb_set_state+0x22>
    }

    // At this point it is clear that the requested new_state is:
    // TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
    // we need to handle some special cases before we transition to the new state
    switch (state)
    34c8:	d6 31       	cpi	r29, 0x16	; 22
    34ca:	f9 f0       	breq	.+62     	; 0x350a <chb_set_state+0x6c>
    34cc:	d9 31       	cpi	r29, 0x19	; 25
    34ce:	89 f0       	breq	.+34     	; 0x34f2 <chb_set_state+0x54>
    34d0:	d8 30       	cpi	r29, 0x08	; 8
    34d2:	31 f5       	brne	.+76     	; 0x3520 <chb_set_state+0x82>
    {
    case CHB_TRX_OFF:
        /* Go to TRX_OFF from any state. */
        CHB_SLPTR_DISABLE();
    34d4:	e4 e6       	ldi	r30, 0x64	; 100
    34d6:	f6 e0       	ldi	r31, 0x06	; 6
    34d8:	80 81       	ld	r24, Z
    34da:	8d 7f       	andi	r24, 0xFD	; 253
    34dc:	80 83       	st	Z, r24
        chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1f);
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	63 e0       	ldi	r22, 0x03	; 3
    34e2:	4f e1       	ldi	r20, 0x1F	; 31
    34e4:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
    34e8:	8a e0       	ldi	r24, 0x0A	; 10
    34ea:	8a 95       	dec	r24
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <chb_set_state+0x4c>
    34ee:	00 c0       	rjmp	.+0      	; 0x34f0 <chb_set_state+0x52>
    34f0:	17 c0       	rjmp	.+46     	; 0x3520 <chb_set_state+0x82>
        _delay_us(TIME_ALL_STATES_TRX_OFF);
        break;

    case CHB_TX_ARET_ON:
        if (curr_state == CHB_RX_AACK_ON)
    34f2:	c6 31       	cpi	r28, 0x16	; 22
    34f4:	a9 f4       	brne	.+42     	; 0x3520 <chb_set_state+0x82>
        {
            /* First do intermediate state transition to PLL_ON, then to TX_ARET_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
    34f6:	82 e0       	ldi	r24, 0x02	; 2
    34f8:	69 e0       	ldi	r22, 0x09	; 9
    34fa:	4f e1       	ldi	r20, 0x1F	; 31
    34fc:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
    3500:	9a e0       	ldi	r25, 0x0A	; 10
    3502:	9a 95       	dec	r25
    3504:	f1 f7       	brne	.-4      	; 0x3502 <chb_set_state+0x64>
    3506:	00 c0       	rjmp	.+0      	; 0x3508 <chb_set_state+0x6a>
    3508:	0b c0       	rjmp	.+22     	; 0x3520 <chb_set_state+0x82>
            _delay_us(TIME_RX_ON_PLL_ON);
        }
        break;

    case CHB_RX_AACK_ON:
        if (curr_state == CHB_TX_ARET_ON)
    350a:	c9 31       	cpi	r28, 0x19	; 25
    350c:	49 f4       	brne	.+18     	; 0x3520 <chb_set_state+0x82>
        {
            /* First do intermediate state transition to RX_ON, then to RX_AACK_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	69 e0       	ldi	r22, 0x09	; 9
    3512:	4f e1       	ldi	r20, 0x1F	; 31
    3514:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
    3518:	8a e0       	ldi	r24, 0x0A	; 10
    351a:	8a 95       	dec	r24
    351c:	f1 f7       	brne	.-4      	; 0x351a <chb_set_state+0x7c>
    351e:	00 c0       	rjmp	.+0      	; 0x3520 <chb_set_state+0x82>
        }
        break;
    }

    /* Now we're okay to transition to any new state. */
    chb_reg_read_mod_write(TRX_STATE, state, 0x1f);
    3520:	82 e0       	ldi	r24, 0x02	; 2
    3522:	6d 2f       	mov	r22, r29
    3524:	4f e1       	ldi	r20, 0x1F	; 31
    3526:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
    352a:	8f e6       	ldi	r24, 0x6F	; 111
    352c:	93 e0       	ldi	r25, 0x03	; 3
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <chb_set_state+0x90>
    3532:	00 c0       	rjmp	.+0      	; 0x3534 <chb_set_state+0x96>
    3534:	00 00       	nop

    /* When the PLL is active most states can be reached in 1us. However, from */
    /* TRX_OFF the PLL needs time to activate. */
    _delay_us(TIME_TRX_OFF_PLL_ON);

    if (chb_get_state() == state)
    3536:	0e 94 36 1a 	call	0x346c	; 0x346c <chb_get_state>
    353a:	8d 17       	cp	r24, r29
    353c:	21 f4       	brne	.+8      	; 0x3546 <chb_set_state+0xa8>
    {
        return RADIO_SUCCESS;
    353e:	80 e4       	ldi	r24, 0x40	; 64
    3540:	03 c0       	rjmp	.+6      	; 0x3548 <chb_set_state+0xaa>
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    {
        return RADIO_WRONG_STATE;
    3542:	84 e4       	ldi	r24, 0x44	; 68
    3544:	01 c0       	rjmp	.+2      	; 0x3548 <chb_set_state+0xaa>

    if (chb_get_state() == state)
    {
        return RADIO_SUCCESS;
    }
    return RADIO_TIMED_OUT;
    3546:	83 e4       	ldi	r24, 0x43	; 67
}
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	08 95       	ret

0000354e <chb_sleep>:
    Enable or disable the radio's sleep mode.
*/
/**************************************************************************/
void chb_sleep(U8 enb)
{
    if (enb)
    354e:	88 23       	and	r24, r24
    3550:	49 f0       	breq	.+18     	; 0x3564 <chb_sleep+0x16>
    {
        // first we need to go to TRX OFF state
        chb_set_state(CHB_TRX_OFF);
    3552:	88 e0       	ldi	r24, 0x08	; 8
    3554:	0e 94 4f 1a 	call	0x349e	; 0x349e <chb_set_state>

        // set the SLPTR pin
        CHB_SLPTR_PORT |= _BV(CHB_SLPTR_PIN);
    3558:	e4 e6       	ldi	r30, 0x64	; 100
    355a:	f6 e0       	ldi	r31, 0x06	; 6
    355c:	80 81       	ld	r24, Z
    355e:	82 60       	ori	r24, 0x02	; 2
    3560:	80 83       	st	Z, r24
    3562:	08 95       	ret
    }
    else
    {
        // make sure the SLPTR pin is low first
        CHB_SLPTR_PORT &= ~(_BV(CHB_SLPTR_PIN));
    3564:	e4 e6       	ldi	r30, 0x64	; 100
    3566:	f6 e0       	ldi	r31, 0x06	; 6
    3568:	80 81       	ld	r24, Z
    356a:	8d 7f       	andi	r24, 0xFD	; 253
    356c:	80 83       	st	Z, r24
    356e:	8f e7       	ldi	r24, 0x7F	; 127
    3570:	97 e0       	ldi	r25, 0x07	; 7
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <chb_sleep+0x24>
    3576:	00 c0       	rjmp	.+0      	; 0x3578 <chb_sleep+0x2a>
    3578:	00 00       	nop

        // we need to allow some time for the PLL to lock
        _delay_us(TIME_SLEEP_TO_TRX_OFF);

        // Turn the transceiver back on
        chb_set_state(RX_STATE);
    357a:	86 e1       	ldi	r24, 0x16	; 22
    357c:	0e 94 4f 1a 	call	0x349e	; 0x349e <chb_set_state>
    3580:	08 95       	ret

00003582 <chb_tx>:
    Load the data into the fifo, initiate a transmission attempt,
    and return the status of the transmission attempt.
*/
/**************************************************************************/
U8 chb_tx(U8 *hdr, U8 *data, U8 len)
{
    3582:	cf 92       	push	r12
    3584:	df 92       	push	r13
    3586:	ef 92       	push	r14
    3588:	ff 92       	push	r15
    358a:	0f 93       	push	r16
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	7c 01       	movw	r14, r24
    3594:	6b 01       	movw	r12, r22
    3596:	04 2f       	mov	r16, r20
    U8 state = chb_get_state();
    3598:	0e 94 36 1a 	call	0x346c	; 0x346c <chb_get_state>
    359c:	18 2f       	mov	r17, r24
    pcb_t *pcb = chb_get_pcb();
    359e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <chb_get_pcb>
    35a2:	ec 01       	movw	r28, r24

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    35a4:	12 30       	cpi	r17, 0x02	; 2
    35a6:	f1 f0       	breq	.+60     	; 0x35e4 <chb_tx+0x62>
    35a8:	12 31       	cpi	r17, 0x12	; 18
    35aa:	f1 f0       	breq	.+60     	; 0x35e8 <chb_tx+0x66>
    {
        return RADIO_WRONG_STATE;
    }

    // TODO: check why we need to transition to the off state before we go to tx_aret_on
    chb_set_state(CHB_TRX_OFF);
    35ac:	88 e0       	ldi	r24, 0x08	; 8
    35ae:	0e 94 4f 1a 	call	0x349e	; 0x349e <chb_set_state>
    chb_set_state(CHB_TX_ARET_ON);
    35b2:	89 e1       	ldi	r24, 0x19	; 25
    35b4:	0e 94 4f 1a 	call	0x349e	; 0x349e <chb_set_state>

    // TODO: try and start the frame transmission by writing TX_START command instead of toggling
    // sleep pin...i just feel like it's kind of weird...

    // write frame to buffer. first write header into buffer (add 1 for len byte), then data. 
    chb_frame_write(hdr, CHB_HDR_SZ + 1, data, len);
    35b8:	c7 01       	movw	r24, r14
    35ba:	6a e0       	ldi	r22, 0x0A	; 10
    35bc:	a6 01       	movw	r20, r12
    35be:	20 2f       	mov	r18, r16
    35c0:	0e 94 55 19 	call	0x32aa	; 0x32aa <chb_frame_write>

    //Do frame transmission. 
    chb_reg_read_mod_write(TRX_STATE, CMD_TX_START, 0x1F);
    35c4:	82 e0       	ldi	r24, 0x02	; 2
    35c6:	62 e0       	ldi	r22, 0x02	; 2
    35c8:	4f e1       	ldi	r20, 0x1F	; 31
    35ca:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>

    // wait for the transmission to end, signaled by the TRX END flag
    while (!pcb->tx_end);
    35ce:	8c 81       	ldd	r24, Y+4	; 0x04
    35d0:	88 23       	and	r24, r24
    35d2:	e9 f3       	breq	.-6      	; 0x35ce <chb_tx+0x4c>
    pcb->tx_end = false;
    35d4:	1c 82       	std	Y+4, r1	; 0x04

*/
/**************************************************************************/
static U8 chb_get_status()
{
    return chb_reg_read(TRX_STATE) >> CHB_TRAC_STATUS_POS;
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    35dc:	82 95       	swap	r24
    35de:	86 95       	lsr	r24
    35e0:	87 70       	andi	r24, 0x07	; 7
    // wait for the transmission to end, signaled by the TRX END flag
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
    35e2:	03 c0       	rjmp	.+6      	; 0x35ea <chb_tx+0x68>
    U8 state = chb_get_state();
    pcb_t *pcb = chb_get_pcb();

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    {
        return RADIO_WRONG_STATE;
    35e4:	84 e4       	ldi	r24, 0x44	; 68
    35e6:	01 c0       	rjmp	.+2      	; 0x35ea <chb_tx+0x68>
    35e8:	84 e4       	ldi	r24, 0x44	; 68
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
}
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	1f 91       	pop	r17
    35f0:	0f 91       	pop	r16
    35f2:	ff 90       	pop	r15
    35f4:	ef 90       	pop	r14
    35f6:	df 90       	pop	r13
    35f8:	cf 90       	pop	r12
    35fa:	08 95       	ret

000035fc <chb_set_mode>:
    Set the channel mode, BPSK, OQPSK, etc...
*/
/**************************************************************************/
void chb_set_mode(U8 mode)
{
    switch (mode)
    35fc:	81 30       	cpi	r24, 0x01	; 1
    35fe:	91 f0       	breq	.+36     	; 0x3624 <chb_set_mode+0x28>
    3600:	81 30       	cpi	r24, 0x01	; 1
    3602:	28 f0       	brcs	.+10     	; 0x360e <chb_set_mode+0x12>
    3604:	82 30       	cpi	r24, 0x02	; 2
    3606:	c9 f0       	breq	.+50     	; 0x363a <chb_set_mode+0x3e>
    3608:	83 30       	cpi	r24, 0x03	; 3
    360a:	61 f5       	brne	.+88     	; 0x3664 <chb_set_mode+0x68>
    360c:	21 c0       	rjmp	.+66     	; 0x3650 <chb_set_mode+0x54>
    {
    case OQPSK_868MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x08, 0x3f);                 // 802.15.4-2006, channel page 2, channel 0 (868 MHz, Europe)
    360e:	8c e0       	ldi	r24, 0x0C	; 12
    3610:	68 e0       	ldi	r22, 0x08	; 8
    3612:	4f e3       	ldi	r20, 0x3F	; 63
    3614:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    3618:	86 e1       	ldi	r24, 0x16	; 22
    361a:	62 e0       	ldi	r22, 0x02	; 2
    361c:	43 e0       	ldi	r20, 0x03	; 3
    361e:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
        break;
    3622:	08 95       	ret
    case OQPSK_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);                 // 802.15.4-2006, channel page 2, channels 1-10 (915 MHz, US)
    3624:	8c e0       	ldi	r24, 0x0C	; 12
    3626:	6c e0       	ldi	r22, 0x0C	; 12
    3628:	4f e3       	ldi	r20, 0x3F	; 63
    362a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    362e:	86 e1       	ldi	r24, 0x16	; 22
    3630:	62 e0       	ldi	r22, 0x02	; 2
    3632:	43 e0       	ldi	r20, 0x03	; 3
    3634:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
        break;
    3638:	08 95       	ret
    case OQPSK_780MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x1c, 0x3f);                 // 802.15.4-2006, channel page 5, channel 0-3 (780 MHz, China)
    363a:	8c e0       	ldi	r24, 0x0C	; 12
    363c:	6c e1       	ldi	r22, 0x1C	; 28
    363e:	4f e3       	ldi	r20, 0x3F	; 63
    3640:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    3644:	86 e1       	ldi	r24, 0x16	; 22
    3646:	62 e0       	ldi	r22, 0x02	; 2
    3648:	43 e0       	ldi	r20, 0x03	; 3
    364a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
        break;
    364e:	08 95       	ret
    case BPSK40_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x00, 0x3f);                 // 802.15.4-2006, BPSK, 40 kbps
    3650:	8c e0       	ldi	r24, 0x0C	; 12
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	4f e3       	ldi	r20, 0x3F	; 63
    3656:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_BPSK_TX_OFFSET, 0x3);     // this is according to table 7-16 in at86rf212 datasheet
    365a:	86 e1       	ldi	r24, 0x16	; 22
    365c:	63 e0       	ldi	r22, 0x03	; 3
    365e:	43 e0       	ldi	r20, 0x03	; 3
    3660:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
    3664:	08 95       	ret

00003666 <chb_set_channel>:
/*!

*/
/**************************************************************************/
U8 chb_set_channel(U8 channel)
{
    3666:	cf 93       	push	r28
    3668:	c8 2f       	mov	r28, r24
    //    {
    //        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);
    //    }
    //}
        
    chb_reg_read_mod_write(PHY_CC_CCA, channel, 0x1f); 
    366a:	88 e0       	ldi	r24, 0x08	; 8
    366c:	6c 2f       	mov	r22, r28
    366e:	4f e1       	ldi	r20, 0x1F	; 31
    3670:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
#endif

    // add a delay to allow the PLL to lock if in active mode.
    state = chb_get_state();
    3674:	0e 94 36 1a 	call	0x346c	; 0x346c <chb_get_state>
    if ((state == CHB_RX_ON) || (state == CHB_PLL_ON))
    3678:	86 30       	cpi	r24, 0x06	; 6
    367a:	11 f0       	breq	.+4      	; 0x3680 <chb_set_channel+0x1a>
    367c:	89 30       	cpi	r24, 0x09	; 9
    367e:	31 f4       	brne	.+12     	; 0x368c <chb_set_channel+0x26>
    3680:	8f e6       	ldi	r24, 0x6F	; 111
    3682:	93 e0       	ldi	r25, 0x03	; 3
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <chb_set_channel+0x1e>
    3688:	00 c0       	rjmp	.+0      	; 0x368a <chb_set_channel+0x24>
    368a:	00 00       	nop
    {
        _delay_us(TIME_PLL_LOCK_TIME);
    }

    return ((chb_reg_read(PHY_CC_CCA) & 0x1f) == channel) ? RADIO_SUCCESS : RADIO_TIMED_OUT;
    368c:	88 e0       	ldi	r24, 0x08	; 8
    368e:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	8f 71       	andi	r24, 0x1F	; 31
    3696:	90 70       	andi	r25, 0x00	; 0
    3698:	6c 2f       	mov	r22, r28
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	86 17       	cp	r24, r22
    369e:	97 07       	cpc	r25, r23
    36a0:	11 f4       	brne	.+4      	; 0x36a6 <chb_set_channel+0x40>
    36a2:	80 e4       	ldi	r24, 0x40	; 64
    36a4:	01 c0       	rjmp	.+2      	; 0x36a8 <chb_set_channel+0x42>
    36a6:	83 e4       	ldi	r24, 0x43	; 67
}
    36a8:	cf 91       	pop	r28
    36aa:	08 95       	ret

000036ac <chb_reg_read16>:
/*! 
 
*/
/**************************************************************************/
U16 chb_reg_read16(U8 addr)
{
    36ac:	cf 93       	push	r28
    36ae:	c8 2f       	mov	r28, r24
    U8 i;
    U16 val = 0;

    for (i=0; i<2; i++)
    {
        addr |= chb_reg_read(addr + i) << (8 * i);
    36b0:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    36b4:	8c 2b       	or	r24, r28
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    }
    return val;
}
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	cf 91       	pop	r28
    36c2:	08 95       	ret

000036c4 <chb_reset>:

*/
/**************************************************************************/
void chb_reset()
{
    CHB_RST_DISABLE();
    36c4:	e4 e6       	ldi	r30, 0x64	; 100
    36c6:	f6 e0       	ldi	r31, 0x06	; 6
    36c8:	80 81       	ld	r24, Z
    36ca:	81 60       	ori	r24, 0x01	; 1
    36cc:	80 83       	st	Z, r24
    CHB_SLPTR_DISABLE();
    36ce:	80 81       	ld	r24, Z
    36d0:	8d 7f       	andi	r24, 0xFD	; 253
    36d2:	80 83       	st	Z, r24
    36d4:	8f ed       	ldi	r24, 0xDF	; 223
    36d6:	9b e0       	ldi	r25, 0x0B	; 11
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <chb_reset+0x14>
    36dc:	00 c0       	rjmp	.+0      	; 0x36de <chb_reset+0x1a>
    36de:	00 00       	nop

    // wait a bit while transceiver wakes up
    _delay_us(TIME_P_ON_TO_CLKM_AVAIL);

    // reset the device
    CHB_RST_ENABLE();
    36e0:	80 81       	ld	r24, Z
    36e2:	8e 7f       	andi	r24, 0xFE	; 254
    36e4:	80 83       	st	Z, r24
    36e6:	9a e0       	ldi	r25, 0x0A	; 10
    36e8:	9a 95       	dec	r25
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <chb_reset+0x24>
    36ec:	00 c0       	rjmp	.+0      	; 0x36ee <chb_reset+0x2a>
    _delay_us(TIME_RST_PULSE_WIDTH);
    CHB_RST_DISABLE();
    36ee:	80 81       	ld	r24, Z
    36f0:	81 60       	ori	r24, 0x01	; 1
    36f2:	80 83       	st	Z, r24
    while (1)
    {
        // if you're stuck in this loop, that means that you're not reading
        // the version and part number register correctly. possible that version number
        // changes. if so, update version num in header file
        if ((chb_reg_read(VERSION_NUM) == CHB_AT86RF212_VER_NUM) && (chb_reg_read(PART_NUM) == CHB_AT86RF212_PART_NUM)) 
    36f4:	8d e1       	ldi	r24, 0x1D	; 29
    36f6:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	d9 f7       	brne	.-10     	; 0x36f4 <chb_reset+0x30>
    36fe:	8c e1       	ldi	r24, 0x1C	; 28
    3700:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    3704:	87 30       	cpi	r24, 0x07	; 7
    3706:	b1 f7       	brne	.-20     	; 0x36f4 <chb_reset+0x30>
            break;
        }
    }
	

}
    3708:	08 95       	ret

0000370a <chb_drvr_init>:
/*!

*/
/**************************************************************************/
void chb_drvr_init()
{
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	ea 97       	sbiw	r28, 0x3a	; 58
    3718:	cd bf       	out	0x3d, r28	; 61
    371a:	de bf       	out	0x3e, r29	; 62
    // config SPI for at86rf230 access
    chb_spi_init();
    371c:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <chb_spi_init>
	//SPIDInit(SPI_MODE0_bm);
	//RadioCS(FALSE);
    // configure IOs
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    3720:	e0 e6       	ldi	r30, 0x60	; 96
    3722:	f6 e0       	ldi	r31, 0x06	; 6
    3724:	80 81       	ld	r24, Z
    3726:	82 60       	ori	r24, 0x02	; 2
    3728:	80 83       	st	Z, r24
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));
    372a:	80 81       	ld	r24, Z
    372c:	81 60       	ori	r24, 0x01	; 1
    372e:	80 83       	st	Z, r24
static void chb_radio_init()
{
    U8 ieee_addr[8];

    // reset chip
    chb_reset();
    3730:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <chb_reset>

    // disable intps while we config the radio
    chb_reg_write(IRQ_MASK, 0);
    3734:	8e e0       	ldi	r24, 0x0E	; 14
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	0e 94 a0 19 	call	0x3340	; 0x3340 <chb_reg_write>

    // force transceiver off while we configure the intps
    chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1F);
    373c:	82 e0       	ldi	r24, 0x02	; 2
    373e:	63 e0       	ldi	r22, 0x03	; 3
    3740:	4f e1       	ldi	r20, 0x1F	; 31
    3742:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>

    // make sure the transceiver is in the off state before proceeding
    while ((chb_reg_read(TRX_STATUS) & 0x1f) != CHB_TRX_OFF);
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    374c:	8f 71       	andi	r24, 0x1F	; 31
    374e:	88 30       	cpi	r24, 0x08	; 8
    3750:	d1 f7       	brne	.-12     	; 0x3746 <chb_drvr_init+0x3c>
    //chb_ret_write(CSMA_SEED0, CHB_CSMA_SEED0);     
    //chb_reg_read_mod_write(PHY_CC_CCA, CHB_CCA_MODE << CHB_CCA_MODE_POS,0x3 << CHB_CCA_MODE_POS);
    //chb_reg_write(CCA_THRES, CHB_CCA_ED_THRES);

    // set frame version that we'll accept
    chb_reg_read_mod_write(CSMA_SEED_1, CHB_FRM_VER << CHB_FVN_POS, 3 << CHB_FVN_POS);
    3752:	8e e2       	ldi	r24, 0x2E	; 46
    3754:	60 e4       	ldi	r22, 0x40	; 64
    3756:	40 ec       	ldi	r20, 0xC0	; 192
    3758:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>

    // set interrupt mask
    // re-enable intps while we config the radio
    chb_reg_write(IRQ_MASK, (1<<IRQ_RX_START) | (1<<IRQ_TRX_END));
    375c:	8e e0       	ldi	r24, 0x0E	; 14
    375e:	6c e0       	ldi	r22, 0x0C	; 12
    3760:	0e 94 a0 19 	call	0x3340	; 0x3340 <chb_reg_write>

    #if (CHB_PROMISCUOUS == 0)
    // set autocrc mode
    chb_reg_read_mod_write(TRX_CTRL_1, 1 << CHB_AUTO_CRC_POS, 1 << CHB_AUTO_CRC_POS);
    3764:	84 e0       	ldi	r24, 0x04	; 4
    3766:	60 e2       	ldi	r22, 0x20	; 32
    3768:	40 e2       	ldi	r20, 0x20	; 32
    376a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <chb_reg_read_mod_write>
    #endif

    // set up default phy modulation and data rate - OQPSK, 250 kbps, 915 MHz
    chb_set_mode(CHB_INIT_MODE);
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <chb_set_mode>

    chb_set_channel(CHB_CHANNEL);
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	0e 94 33 1b 	call	0x3666	; 0x3666 <chb_set_channel>

    // set fsm state
    // put trx in rx auto ack mode
    chb_set_state(RX_STATE);
    377a:	86 e1       	ldi	r24, 0x16	; 22
    377c:	0e 94 4f 1a 	call	0x349e	; 0x349e <chb_set_state>

    // set pan ID
    chb_reg_write16(PAN_ID_0, CHB_PAN_ID);
    3780:	82 e2       	ldi	r24, 0x22	; 34
    3782:	64 e3       	ldi	r22, 0x34	; 52
    3784:	72 e1       	ldi	r23, 0x12	; 18
    3786:	0e 94 e7 19 	call	0x33ce	; 0x33ce <chb_reg_write16>

    // set short addr
    // NOTE: Possibly get this from EEPROM
    chb_reg_write16(SHORT_ADDR_0, chb_get_short_addr());
    378a:	0e 94 33 19 	call	0x3266	; 0x3266 <chb_get_short_addr>
    378e:	bc 01       	movw	r22, r24
    3790:	80 e2       	ldi	r24, 0x20	; 32
    3792:	0e 94 e7 19 	call	0x33ce	; 0x33ce <chb_reg_write16>

    // set long addr
    // NOTE: Possibly get this from EEPROM
    chb_get_ieee_addr(ieee_addr);
    3796:	ce 01       	movw	r24, r28
    3798:	01 96       	adiw	r24, 0x01	; 1
    379a:	0e 94 2b 19 	call	0x3256	; 0x3256 <chb_get_ieee_addr>
    chb_reg_write64(IEEE_ADDR_0, ieee_addr);
    379e:	84 e2       	ldi	r24, 0x24	; 36
    37a0:	be 01       	movw	r22, r28
    37a2:	6f 5f       	subi	r22, 0xFF	; 255
    37a4:	7f 4f       	sbci	r23, 0xFF	; 255
    37a6:	0e 94 c1 19 	call	0x3382	; 0x3382 <chb_reg_write64>
    // set power to 0 dBm if CC1190 is being used. 
    chb_set_pwr(0x24);   
#endif

    // enable mcu intp pin
    CFG_CHB_INTP_RISE_EDGE();
    37aa:	e2 e7       	ldi	r30, 0x72	; 114
    37ac:	f6 e0       	ldi	r31, 0x06	; 6
    37ae:	80 81       	ld	r24, Z
    37b0:	81 60       	ori	r24, 0x01	; 1
    37b2:	80 83       	st	Z, r24
    37b4:	e9 e6       	ldi	r30, 0x69	; 105
    37b6:	f6 e0       	ldi	r31, 0x06	; 6
    37b8:	80 81       	ld	r24, Z
    37ba:	83 60       	ori	r24, 0x03	; 3
    37bc:	80 83       	st	Z, r24
    37be:	ea e6       	ldi	r30, 0x6A	; 106
    37c0:	f6 e0       	ldi	r31, 0x06	; 6
    37c2:	80 81       	ld	r24, Z
    37c4:	84 60       	ori	r24, 0x04	; 4
    37c6:	80 83       	st	Z, r24
	PMIC.CTRL |= 0x07;	//enable interrupts on MCU
    37c8:	e0 ea       	ldi	r30, 0xA0	; 160
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	82 81       	ldd	r24, Z+2	; 0x02
    37ce:	87 60       	ori	r24, 0x07	; 7
    37d0:	82 83       	std	Z+2, r24	; 0x02

    if (chb_get_state() != RX_STATE)
    37d2:	0e 94 36 1a 	call	0x346c	; 0x346c <chb_get_state>
    37d6:	86 31       	cpi	r24, 0x16	; 22
    37d8:	91 f0       	breq	.+36     	; 0x37fe <chb_drvr_init+0xf4>
    {
        // ERROR occurred initializing the radio. Print out error message.
        char buf[50];

        // grab the error message from flash & print it out
        strcpy_P(buf, chb_err_init);
    37da:	8e 01       	movw	r16, r28
    37dc:	07 5f       	subi	r16, 0xF7	; 247
    37de:	1f 4f       	sbci	r17, 0xFF	; 255
    37e0:	c8 01       	movw	r24, r16
    37e2:	68 ee       	ldi	r22, 0xE8	; 232
    37e4:	71 e0       	ldi	r23, 0x01	; 1
    37e6:	0e 94 ae 37 	call	0x6f5c	; 0x6f5c <strcpy_P>
        printf(buf);
    37ea:	0f 92       	push	r0
    37ec:	0f 92       	push	r0
    37ee:	ed b7       	in	r30, 0x3d	; 61
    37f0:	fe b7       	in	r31, 0x3e	; 62
    37f2:	01 83       	std	Z+1, r16	; 0x01
    37f4:	12 83       	std	Z+2, r17	; 0x02
    37f6:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <printf>
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));

    // config radio
    chb_radio_init();
}
    37fe:	ea 96       	adiw	r28, 0x3a	; 58
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	df 91       	pop	r29
    3806:	cf 91       	pop	r28
    3808:	1f 91       	pop	r17
    380a:	0f 91       	pop	r16
    380c:	08 95       	ret

0000380e <__vector_64>:
/*!

*/
/**************************************************************************/
ISR(CHB_RADIO_IRQ)
{
    380e:	1f 92       	push	r1
    3810:	0f 92       	push	r0
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	0f 92       	push	r0
    3816:	0b b6       	in	r0, 0x3b	; 59
    3818:	0f 92       	push	r0
    381a:	11 24       	eor	r1, r1
    381c:	6f 92       	push	r6
    381e:	7f 92       	push	r7
    3820:	8f 92       	push	r8
    3822:	9f 92       	push	r9
    3824:	af 92       	push	r10
    3826:	bf 92       	push	r11
    3828:	df 92       	push	r13
    382a:	ef 92       	push	r14
    382c:	ff 92       	push	r15
    382e:	0f 93       	push	r16
    3830:	1f 93       	push	r17
    3832:	2f 93       	push	r18
    3834:	3f 93       	push	r19
    3836:	4f 93       	push	r20
    3838:	5f 93       	push	r21
    383a:	6f 93       	push	r22
    383c:	7f 93       	push	r23
    383e:	8f 93       	push	r24
    3840:	9f 93       	push	r25
    3842:	af 93       	push	r26
    3844:	bf 93       	push	r27
    3846:	ef 93       	push	r30
    3848:	ff 93       	push	r31
    384a:	cf 93       	push	r28
    384c:	df 93       	push	r29
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	e2 97       	sbiw	r28, 0x32	; 50
    3854:	cd bf       	out	0x3d, r28	; 61
    3856:	de bf       	out	0x3e, r29	; 62
    U8 state, intp_src = 0;
	//U8 dummy;
    pcb_t *pcb = chb_get_pcb();
    3858:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <chb_get_pcb>
    385c:	7c 01       	movw	r14, r24

    CHB_ENTER_CRIT();
    385e:	8f b7       	in	r24, 0x3f	; 63
    3860:	80 93 57 40 	sts	0x4057, r24
    3864:	f8 94       	cli

    /*Read Interrupt source.*/
    RadioCS(TRUE);   
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>

    /*Send Register address and read register content.*/
    //dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
	SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    386c:	8f e8       	ldi	r24, 0x8F	; 143
    386e:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
    intp_src = SPID_write(0);
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
    3878:	18 2f       	mov	r17, r24

    RadioCS(FALSE);
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>

    while (intp_src)
    3880:	11 23       	and	r17, r17
    3882:	09 f4       	brne	.+2      	; 0x3886 <__vector_64+0x78>
    3884:	ae c0       	rjmp	.+348    	; 0x39e2 <__vector_64+0x1d4>

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
    3886:	aa 24       	eor	r10, r10
    3888:	bb 24       	eor	r11, r11
    388a:	68 94       	set
    388c:	a7 f8       	bld	r10, 7

            // Increment the overflow stat
            pcb->overflow++;

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
    388e:	0f 2e       	mov	r0, r31
    3890:	f8 e0       	ldi	r31, 0x08	; 8
    3892:	8f 2e       	mov	r8, r31
    3894:	f2 e0       	ldi	r31, 0x02	; 2
    3896:	9f 2e       	mov	r9, r31
    3898:	f0 2d       	mov	r31, r0
    RadioCS(FALSE);

    while (intp_src)
    {
        /*Handle the incomming interrupt. Prioritized.*/
        if ((intp_src & CHB_IRQ_RX_START_MASK))
    389a:	12 ff       	sbrs	r17, 2
    389c:	02 c0       	rjmp	.+4      	; 0x38a2 <__vector_64+0x94>
        {
            intp_src &= ~CHB_IRQ_RX_START_MASK;
    389e:	1b 7f       	andi	r17, 0xFB	; 251
    38a0:	9d c0       	rjmp	.+314    	; 0x39dc <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_TRX_END_MASK)
    38a2:	13 ff       	sbrs	r17, 3
    38a4:	82 c0       	rjmp	.+260    	; 0x39aa <__vector_64+0x19c>
        {
            state = chb_get_state();
    38a6:	0e 94 36 1a 	call	0x346c	; 0x346c <chb_get_state>

            if ((state == CHB_RX_ON) || (state == CHB_RX_AACK_ON) || (state == CHB_BUSY_RX_AACK)){
    38aa:	86 30       	cpi	r24, 0x06	; 6
    38ac:	29 f0       	breq	.+10     	; 0x38b8 <__vector_64+0xaa>
    38ae:	86 31       	cpi	r24, 0x16	; 22
    38b0:	19 f0       	breq	.+6      	; 0x38b8 <__vector_64+0xaa>
    38b2:	81 31       	cpi	r24, 0x11	; 17
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <__vector_64+0xaa>
    38b6:	6f c0       	rjmp	.+222    	; 0x3996 <__vector_64+0x188>
				//go to TRX_OFF state to avoid data corruption due to reception of another message
				//chb_set_state(CHB_TRX_OFF);
                // get the ed measurement
                pcb->ed = chb_reg_read(PHY_ED_LEVEL);
    38b8:	87 e0       	ldi	r24, 0x07	; 7
    38ba:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    38be:	f7 01       	movw	r30, r14
    38c0:	82 8b       	std	Z+18, r24	; 0x12

                // get the crc
                pcb->crc = (chb_reg_read(PHY_RSSI) & (1<<7)) ? 1 : 0;
    38c2:	86 e0       	ldi	r24, 0x06	; 6
    38c4:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
    38c8:	88 1f       	adc	r24, r24
    38ca:	88 27       	eor	r24, r24
    38cc:	88 1f       	adc	r24, r24
    38ce:	f7 01       	movw	r30, r14
    38d0:	83 8b       	std	Z+19, r24	; 0x13

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc){
    38d2:	88 23       	and	r24, r24
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <__vector_64+0xca>
    38d6:	62 c0       	rjmp	.+196    	; 0x399c <__vector_64+0x18e>
/**************************************************************************/
static void chb_frame_read()
{
    U8 i, len, data;

    CHB_ENTER_CRIT();
    38d8:	8f b7       	in	r24, 0x3f	; 63
    38da:	80 93 57 40 	sts	0x4057, r24
    38de:	f8 94       	cli
    RadioCS(TRUE);
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>

    /*Send frame read command and read the length.*/
    SPID_write(CHB_SPI_CMD_FR);
    38e6:	80 e2       	ldi	r24, 0x20	; 32
    38e8:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
    len = SPID_write(0);
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
    38f2:	d8 2e       	mov	r13, r24

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    38f4:	83 50       	subi	r24, 0x03	; 3
    38f6:	8d 37       	cpi	r24, 0x7D	; 125
    38f8:	f0 f5       	brcc	.+124    	; 0x3976 <__vector_64+0x168>
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
    38fa:	0e 94 28 19 	call	0x3250	; 0x3250 <chb_buf_get_len>
    38fe:	2d 2d       	mov	r18, r13
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	a5 01       	movw	r20, r10
    3904:	48 1b       	sub	r20, r24
    3906:	51 09       	sbc	r21, r1
    3908:	24 17       	cp	r18, r20
    390a:	35 07       	cpc	r19, r21
    390c:	7c f4       	brge	.+30     	; 0x392c <__vector_64+0x11e>
        {
            chb_buf_write(len);
    390e:	8d 2d       	mov	r24, r13
    3910:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <chb_buf_write>
            
            for (i=0; i<len; i++)
    3914:	dd 20       	and	r13, r13
    3916:	79 f1       	breq	.+94     	; 0x3976 <__vector_64+0x168>
    3918:	00 e0       	ldi	r16, 0x00	; 0
            {
                data = SPID_write(0);
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
                chb_buf_write(data);
    3920:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <chb_buf_write>
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
        {
            chb_buf_write(len);
            
            for (i=0; i<len; i++)
    3924:	0f 5f       	subi	r16, 0xFF	; 255
    3926:	0d 15       	cp	r16, r13
    3928:	c1 f7       	brne	.-16     	; 0x391a <__vector_64+0x10c>
    392a:	25 c0       	rjmp	.+74     	; 0x3976 <__vector_64+0x168>
			//PORTE.OUTCLR = PIN2_bm;
        }
        else
        {
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
    392c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <chb_get_pcb>
    3930:	3c 01       	movw	r6, r24
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
    3932:	dd 20       	and	r13, r13
    3934:	39 f0       	breq	.+14     	; 0x3944 <__vector_64+0x136>
    3936:	00 e0       	ldi	r16, 0x00	; 0
            {
                data = SPID_write(0);
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <SPID_write>
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
    393e:	0f 5f       	subi	r16, 0xFF	; 255
    3940:	0d 15       	cp	r16, r13
    3942:	d1 f7       	brne	.-12     	; 0x3938 <__vector_64+0x12a>
            {
                data = SPID_write(0);
            }

            // Increment the overflow stat
            pcb->overflow++;
    3944:	f3 01       	movw	r30, r6
    3946:	85 85       	ldd	r24, Z+13	; 0x0d
    3948:	96 85       	ldd	r25, Z+14	; 0x0e
    394a:	01 96       	adiw	r24, 0x01	; 1
    394c:	85 87       	std	Z+13, r24	; 0x0d
    394e:	96 87       	std	Z+14, r25	; 0x0e

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
    3950:	ce 01       	movw	r24, r28
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	b4 01       	movw	r22, r8
    3956:	0e 94 ae 37 	call	0x6f5c	; 0x6f5c <strcpy_P>
            printf(buf);
    395a:	0f 92       	push	r0
    395c:	0f 92       	push	r0
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	50 e0       	ldi	r21, 0x00	; 0
    3962:	4c 0f       	add	r20, r28
    3964:	5d 1f       	adc	r21, r29
    3966:	ed b7       	in	r30, 0x3d	; 61
    3968:	fe b7       	in	r31, 0x3e	; 62
    396a:	41 83       	std	Z+1, r20	; 0x01
    396c:	52 83       	std	Z+2, r21	; 0x02
    396e:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <printf>
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
        }
    }

    RadioCS(FALSE);
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	0e 94 49 19 	call	0x3292	; 0x3292 <RadioCS>
    CHB_LEAVE_CRIT();
    397c:	80 91 57 40 	lds	r24, 0x4057
    3980:	8f bf       	out	0x3f, r24	; 63
    3982:	78 94       	sei

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc){
                    // get the data
                    chb_frame_read();
                    pcb->rcvd_xfers++;
    3984:	f7 01       	movw	r30, r14
    3986:	85 81       	ldd	r24, Z+5	; 0x05
    3988:	96 81       	ldd	r25, Z+6	; 0x06
    398a:	01 96       	adiw	r24, 0x01	; 1
    398c:	85 83       	std	Z+5, r24	; 0x05
    398e:	96 83       	std	Z+6, r25	; 0x06
                    pcb->data_rcv = true;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	83 83       	std	Z+3, r24	; 0x03
    3994:	03 c0       	rjmp	.+6      	; 0x399c <__vector_64+0x18e>
					if(StartOfFreeSpace+128 >= FR_READ_BUFFER_SIZE) StartOfFreeSpace = 0;	//wrap around to the start of the buffer (making circular buffer). This should be avoided as data in the buffer will be overwritten (i.e. lost).
					*/			
                }
            }
            else{
                pcb->tx_end = true;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	f7 01       	movw	r30, r14
    399a:	84 83       	std	Z+4, r24	; 0x04
            }
            intp_src &= ~CHB_IRQ_TRX_END_MASK;
    399c:	17 7f       	andi	r17, 0xF7	; 247
			//go to receive state
            while (chb_set_state(RX_STATE) != RADIO_SUCCESS);
    399e:	86 e1       	ldi	r24, 0x16	; 22
    39a0:	0e 94 4f 1a 	call	0x349e	; 0x349e <chb_set_state>
    39a4:	80 34       	cpi	r24, 0x40	; 64
    39a6:	d9 f7       	brne	.-10     	; 0x399e <__vector_64+0x190>
    39a8:	19 c0       	rjmp	.+50     	; 0x39dc <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_TRX_UR_MASK)
    39aa:	16 ff       	sbrs	r17, 6
    39ac:	08 c0       	rjmp	.+16     	; 0x39be <__vector_64+0x1b0>
        {
            intp_src &= ~CHB_IRQ_TRX_UR_MASK;
    39ae:	1f 7b       	andi	r17, 0xBF	; 191
            pcb->underrun++;
    39b0:	f7 01       	movw	r30, r14
    39b2:	87 85       	ldd	r24, Z+15	; 0x0f
    39b4:	90 89       	ldd	r25, Z+16	; 0x10
    39b6:	01 96       	adiw	r24, 0x01	; 1
    39b8:	87 87       	std	Z+15, r24	; 0x0f
    39ba:	90 8b       	std	Z+16, r25	; 0x10
    39bc:	0f c0       	rjmp	.+30     	; 0x39dc <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_PLL_UNLOCK_MASK)
    39be:	11 ff       	sbrs	r17, 1
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <__vector_64+0x1b8>
        {
            intp_src &= ~CHB_IRQ_PLL_UNLOCK_MASK;
    39c2:	1d 7f       	andi	r17, 0xFD	; 253
    39c4:	0b c0       	rjmp	.+22     	; 0x39dc <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_PLL_LOCK_MASK)
    39c6:	10 ff       	sbrs	r17, 0
    39c8:	02 c0       	rjmp	.+4      	; 0x39ce <__vector_64+0x1c0>
        {
            intp_src &= ~CHB_IRQ_PLL_LOCK_MASK;
    39ca:	1e 7f       	andi	r17, 0xFE	; 254
    39cc:	07 c0       	rjmp	.+14     	; 0x39dc <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_BAT_LOW_MASK)
    39ce:	11 23       	and	r17, r17
    39d0:	2c f4       	brge	.+10     	; 0x39dc <__vector_64+0x1ce>
        {
            intp_src &= ~CHB_IRQ_BAT_LOW_MASK;
    39d2:	1f 77       	andi	r17, 0x7F	; 127
            pcb->battlow++;
    39d4:	f7 01       	movw	r30, r14
    39d6:	81 89       	ldd	r24, Z+17	; 0x11
    39d8:	8f 5f       	subi	r24, 0xFF	; 255
    39da:	81 8b       	std	Z+17, r24	; 0x11
	SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    intp_src = SPID_write(0);

    RadioCS(FALSE);

    while (intp_src)
    39dc:	11 23       	and	r17, r17
    39de:	09 f0       	breq	.+2      	; 0x39e2 <__vector_64+0x1d4>
    39e0:	5c cf       	rjmp	.-328    	; 0x389a <__vector_64+0x8c>
        }
        else
        {
        }
    }
    CHB_LEAVE_CRIT();
    39e2:	80 91 57 40 	lds	r24, 0x4057
    39e6:	8f bf       	out	0x3f, r24	; 63
    39e8:	78 94       	sei
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
    39ea:	8f e0       	ldi	r24, 0x0F	; 15
    39ec:	0e 94 1c 1a 	call	0x3438	; 0x3438 <chb_reg_read>
}
    39f0:	e2 96       	adiw	r28, 0x32	; 50
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	df 91       	pop	r29
    39f8:	cf 91       	pop	r28
    39fa:	ff 91       	pop	r31
    39fc:	ef 91       	pop	r30
    39fe:	bf 91       	pop	r27
    3a00:	af 91       	pop	r26
    3a02:	9f 91       	pop	r25
    3a04:	8f 91       	pop	r24
    3a06:	7f 91       	pop	r23
    3a08:	6f 91       	pop	r22
    3a0a:	5f 91       	pop	r21
    3a0c:	4f 91       	pop	r20
    3a0e:	3f 91       	pop	r19
    3a10:	2f 91       	pop	r18
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	ff 90       	pop	r15
    3a18:	ef 90       	pop	r14
    3a1a:	df 90       	pop	r13
    3a1c:	bf 90       	pop	r11
    3a1e:	af 90       	pop	r10
    3a20:	9f 90       	pop	r9
    3a22:	8f 90       	pop	r8
    3a24:	7f 90       	pop	r7
    3a26:	6f 90       	pop	r6
    3a28:	0f 90       	pop	r0
    3a2a:	0b be       	out	0x3b, r0	; 59
    3a2c:	0f 90       	pop	r0
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	0f 90       	pop	r0
    3a32:	1f 90       	pop	r1
    3a34:	18 95       	reti

00003a36 <chb_eeprom_write>:
/*!

*/
/**************************************************************************/
void chb_eeprom_write(U16 addr, U8 *buf, U16 size)
{
    3a36:	0f 93       	push	r16
    3a38:	1f 93       	push	r17
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	8c 01       	movw	r16, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
    3a40:	e0 ec       	ldi	r30, 0xC0	; 192
    3a42:	f1 e0       	ldi	r31, 0x01	; 1
    3a44:	84 85       	ldd	r24, Z+12	; 0x0c
    3a46:	87 7f       	andi	r24, 0xF7	; 247
    3a48:	84 87       	std	Z+12, r24	; 0x0c

    // Write bytes
    for(U8 i=0; i<size; i++)
    3a4a:	41 15       	cp	r20, r1
    3a4c:	51 05       	cpc	r21, r1
    3a4e:	09 f4       	brne	.+2      	; 0x3a52 <chb_eeprom_write+0x1c>
    3a50:	50 c0       	rjmp	.+160    	; 0x3af2 <chb_eeprom_write+0xbc>
    3a52:	e0 e0       	ldi	r30, 0x00	; 0
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	20 e0       	ldi	r18, 0x00	; 0
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3a58:	a0 ec       	ldi	r26, 0xC0	; 192
    3a5a:	b1 e0       	ldi	r27, 0x01	; 1

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3a5c:	d6 e3       	ldi	r29, 0x36	; 54
        NVM_EXEC();
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3a5e:	c3 e3       	ldi	r28, 0x33	; 51

    // load the data to write
    NVM.DATA0 = value;

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3a60:	35 e3       	ldi	r19, 0x35	; 53
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
    {
        chb_eep_write_byte(addr+i, buf[i]);
    3a62:	cf 01       	movw	r24, r30
    3a64:	80 0f       	add	r24, r16
    3a66:	91 1f       	adc	r25, r17
    3a68:	e6 0f       	add	r30, r22
    3a6a:	f7 1f       	adc	r31, r23
    3a6c:	f0 81       	ld	r31, Z
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3a6e:	1f 96       	adiw	r26, 0x0f	; 15
    3a70:	ec 91       	ld	r30, X
    3a72:	1f 97       	sbiw	r26, 0x0f	; 15
    3a74:	ee 23       	and	r30, r30
    3a76:	dc f3       	brlt	.-10     	; 0x3a6e <chb_eeprom_write+0x38>

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3a78:	1f 96       	adiw	r26, 0x0f	; 15
    3a7a:	ec 91       	ld	r30, X
    3a7c:	1f 97       	sbiw	r26, 0x0f	; 15
    3a7e:	e1 ff       	sbrs	r30, 1
    3a80:	11 c0       	rjmp	.+34     	; 0x3aa4 <chb_eeprom_write+0x6e>
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3a82:	1a 96       	adiw	r26, 0x0a	; 10
    3a84:	dc 93       	st	X, r29
    3a86:	1a 97       	sbiw	r26, 0x0a	; 10
        NVM_EXEC();
    3a88:	ef 93       	push	r30
    3a8a:	ff 93       	push	r31
    3a8c:	0f 93       	push	r16
    3a8e:	2f 93       	push	r18
    3a90:	eb ec       	ldi	r30, 0xCB	; 203
    3a92:	f1 e0       	ldi	r31, 0x01	; 1
    3a94:	08 ed       	ldi	r16, 0xD8	; 216
    3a96:	21 e0       	ldi	r18, 0x01	; 1
    3a98:	04 bf       	out	0x34, r16	; 52
    3a9a:	20 83       	st	Z, r18
    3a9c:	2f 91       	pop	r18
    3a9e:	0f 91       	pop	r16
    3aa0:	ff 91       	pop	r31
    3aa2:	ef 91       	pop	r30
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3aa4:	1a 96       	adiw	r26, 0x0a	; 10
    3aa6:	cc 93       	st	X, r28
    3aa8:	1a 97       	sbiw	r26, 0x0a	; 10

    // load the address
    NVM.ADDR0 = addr & 0xFF;
    3aaa:	8c 93       	st	X, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    3aac:	89 2f       	mov	r24, r25
    3aae:	8f 71       	andi	r24, 0x1F	; 31
    3ab0:	11 96       	adiw	r26, 0x01	; 1
    3ab2:	8c 93       	st	X, r24
    3ab4:	11 97       	sbiw	r26, 0x01	; 1
    NVM.ADDR2 = 0x00;
    3ab6:	12 96       	adiw	r26, 0x02	; 2
    3ab8:	1c 92       	st	X, r1
    3aba:	12 97       	sbiw	r26, 0x02	; 2

    // load the data to write
    NVM.DATA0 = value;
    3abc:	14 96       	adiw	r26, 0x04	; 4
    3abe:	fc 93       	st	X, r31
    3ac0:	14 97       	sbiw	r26, 0x04	; 4

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3ac2:	1a 96       	adiw	r26, 0x0a	; 10
    3ac4:	3c 93       	st	X, r19
    3ac6:	1a 97       	sbiw	r26, 0x0a	; 10
    NVM_EXEC();
    3ac8:	ef 93       	push	r30
    3aca:	ff 93       	push	r31
    3acc:	0f 93       	push	r16
    3ace:	2f 93       	push	r18
    3ad0:	eb ec       	ldi	r30, 0xCB	; 203
    3ad2:	f1 e0       	ldi	r31, 0x01	; 1
    3ad4:	08 ed       	ldi	r16, 0xD8	; 216
    3ad6:	21 e0       	ldi	r18, 0x01	; 1
    3ad8:	04 bf       	out	0x34, r16	; 52
    3ada:	20 83       	st	Z, r18
    3adc:	2f 91       	pop	r18
    3ade:	0f 91       	pop	r16
    3ae0:	ff 91       	pop	r31
    3ae2:	ef 91       	pop	r30
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
    3ae4:	2f 5f       	subi	r18, 0xFF	; 255
    3ae6:	e2 2f       	mov	r30, r18
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	e4 17       	cp	r30, r20
    3aec:	f5 07       	cpc	r31, r21
    3aee:	08 f4       	brcc	.+2      	; 0x3af2 <chb_eeprom_write+0xbc>
    3af0:	b8 cf       	rjmp	.-144    	; 0x3a62 <chb_eeprom_write+0x2c>
    {
        chb_eep_write_byte(addr+i, buf[i]);
    }
}
    3af2:	df 91       	pop	r29
    3af4:	cf 91       	pop	r28
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

00003afc <chb_eeprom_read>:
/*!

*/
/**************************************************************************/
void chb_eeprom_read(U16 addr, U8 *buf, U16 size)
{
    3afc:	1f 93       	push	r17
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	9c 01       	movw	r18, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
    3b04:	e0 ec       	ldi	r30, 0xC0	; 192
    3b06:	f1 e0       	ldi	r31, 0x01	; 1
    3b08:	84 85       	ldd	r24, Z+12	; 0x0c
    3b0a:	87 7f       	andi	r24, 0xF7	; 247
    3b0c:	84 87       	std	Z+12, r24	; 0x0c

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    3b0e:	41 15       	cp	r20, r1
    3b10:	51 05       	cpc	r21, r1
    3b12:	41 f1       	breq	.+80     	; 0x3b64 <chb_eeprom_read+0x68>
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	c0 e0       	ldi	r28, 0x00	; 0
    NVM.ADDR0 = addr & 0xFF;
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    NVM.ADDR2 = 0x00;

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    3b1a:	d6 e0       	ldi	r29, 0x06	; 6
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
    3b1c:	db 01       	movw	r26, r22
    3b1e:	a8 0f       	add	r26, r24
    3b20:	b9 1f       	adc	r27, r25
    3b22:	82 0f       	add	r24, r18
    3b24:	93 1f       	adc	r25, r19
*/
/**************************************************************************/
static U8 chb_eep_read_byte(U16 addr)
{
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3b26:	17 85       	ldd	r17, Z+15	; 0x0f
    3b28:	11 23       	and	r17, r17
    3b2a:	ec f3       	brlt	.-6      	; 0x3b26 <chb_eeprom_read+0x2a>

    /* Set address to read from. */
    NVM.ADDR0 = addr & 0xFF;
    3b2c:	80 83       	st	Z, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    3b2e:	89 2f       	mov	r24, r25
    3b30:	8f 71       	andi	r24, 0x1F	; 31
    3b32:	81 83       	std	Z+1, r24	; 0x01
    NVM.ADDR2 = 0x00;
    3b34:	12 82       	std	Z+2, r1	; 0x02

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    3b36:	d2 87       	std	Z+10, r29	; 0x0a
    NVM_EXEC();
    3b38:	ef 93       	push	r30
    3b3a:	ff 93       	push	r31
    3b3c:	0f 93       	push	r16
    3b3e:	2f 93       	push	r18
    3b40:	eb ec       	ldi	r30, 0xCB	; 203
    3b42:	f1 e0       	ldi	r31, 0x01	; 1
    3b44:	08 ed       	ldi	r16, 0xD8	; 216
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	04 bf       	out	0x34, r16	; 52
    3b4a:	20 83       	st	Z, r18
    3b4c:	2f 91       	pop	r18
    3b4e:	0f 91       	pop	r16
    3b50:	ff 91       	pop	r31
    3b52:	ef 91       	pop	r30

    return NVM.DATA0;
    3b54:	84 81       	ldd	r24, Z+4	; 0x04
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
    3b56:	8c 93       	st	X, r24
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    3b58:	cf 5f       	subi	r28, 0xFF	; 255
    3b5a:	8c 2f       	mov	r24, r28
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	84 17       	cp	r24, r20
    3b60:	95 07       	cpc	r25, r21
    3b62:	e0 f2       	brcs	.-72     	; 0x3b1c <chb_eeprom_read+0x20>
    {
        buf[i] = chb_eep_read_byte(addr+i);
    }
}
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	08 95       	ret

00003b6c <chb_spi_init>:

void chb_spi_init()
{
    // configure the SPI slave_select, spi clk, and mosi pins as output. the miso pin
    // is cleared since its an input.
    CHB_SPI_DDIR |= (1<<CHB_SSPIN) | (1<<CHB_MOSI) | (1<<CHB_SCK);
    3b6c:	e0 e6       	ldi	r30, 0x60	; 96
    3b6e:	f6 e0       	ldi	r31, 0x06	; 6
    3b70:	80 81       	ld	r24, Z
    3b72:	80 6b       	ori	r24, 0xB0	; 176
    3b74:	80 83       	st	Z, r24
    CHB_SPI_PORT |= (1<<CHB_SSPIN);
    3b76:	e4 e6       	ldi	r30, 0x64	; 100
    3b78:	f6 e0       	ldi	r31, 0x06	; 6
    3b7a:	80 81       	ld	r24, Z
    3b7c:	80 61       	ori	r24, 0x10	; 16
    3b7e:	80 83       	st	Z, r24

    // set to master mode
    // set the clock freq to fck/16
    CHB_CTRL |= (1<<SPI_MASTER_bp) | (1<<SPI_ENABLE_bp) | (1<<SPI_PRESCALER_gp);
    3b80:	a0 ec       	ldi	r26, 0xC0	; 192
    3b82:	b9 e0       	ldi	r27, 0x09	; 9
    3b84:	8c 91       	ld	r24, X
    3b86:	81 65       	ori	r24, 0x51	; 81
    3b88:	8c 93       	st	X, r24

    // set the slave select to idle
    CHB_SPI_DISABLE();
    3b8a:	80 81       	ld	r24, Z
    3b8c:	80 61       	ori	r24, 0x10	; 16
    3b8e:	80 83       	st	Z, r24
}
    3b90:	08 95       	ret

00003b92 <SPID_write>:
    data is read byte val.
*/
/**************************************************************************/
uint8_t SPID_write(uint8_t byteToSend){
	uint8_t data;
	SPID.DATA = byteToSend;
    3b92:	e0 ec       	ldi	r30, 0xC0	; 192
    3b94:	f9 e0       	ldi	r31, 0x09	; 9
    3b96:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPID.STATUS & SPI_IF_bm)); //wait for byte to be sent
    3b98:	82 81       	ldd	r24, Z+2	; 0x02
    3b9a:	88 23       	and	r24, r24
    3b9c:	ec f7       	brge	.-6      	; 0x3b98 <SPID_write+0x6>
	data = SPID.DATA; //read SPI data register to reset status flag
    3b9e:	e0 ec       	ldi	r30, 0xC0	; 192
    3ba0:	f9 e0       	ldi	r31, 0x09	; 9
    3ba2:	83 81       	ldd	r24, Z+3	; 0x03
	return data;
    3ba4:	08 95       	ret

00003ba6 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3ba6:	0f 93       	push	r16
    3ba8:	cf 93       	push	r28
    3baa:	df 93       	push	r29
    3bac:	0f 92       	push	r0
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    3bb2:	2f b7       	in	r18, 0x3f	; 63
    3bb4:	29 83       	std	Y+1, r18	; 0x01
    3bb6:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3bb8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3bba:	fc 01       	movw	r30, r24
    3bbc:	08 ed       	ldi	r16, 0xD8	; 216
    3bbe:	04 bf       	out	0x34, r16	; 52
    3bc0:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3bc6:	0f 90       	pop	r0
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	0f 91       	pop	r16
    3bce:	08 95       	ret

00003bd0 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    3bd0:	66 23       	and	r22, r22
    3bd2:	11 f0       	breq	.+4      	; 0x3bd8 <CLKSYS_XOSC_Config+0x8>
    3bd4:	90 e2       	ldi	r25, 0x20	; 32
    3bd6:	01 c0       	rjmp	.+2      	; 0x3bda <CLKSYS_XOSC_Config+0xa>
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	84 2b       	or	r24, r20
    3bdc:	89 2b       	or	r24, r25
    3bde:	e0 e5       	ldi	r30, 0x50	; 80
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    3be4:	08 95       	ret

00003be6 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
    3be6:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    3be8:	86 2b       	or	r24, r22
    3bea:	e0 e5       	ldi	r30, 0x50	; 80
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	85 83       	std	Z+5, r24	; 0x05
}
    3bf0:	08 95       	ret

00003bf2 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    3bf2:	e0 e5       	ldi	r30, 0x50	; 80
    3bf4:	f0 e0       	ldi	r31, 0x00	; 0
    3bf6:	90 81       	ld	r25, Z
    3bf8:	28 2f       	mov	r18, r24
    3bfa:	20 95       	com	r18
    3bfc:	92 23       	and	r25, r18
    3bfe:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    3c00:	90 81       	ld	r25, Z
	return clkEnabled;
}
    3c02:	89 23       	and	r24, r25
    3c04:	08 95       	ret

00003c06 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    3c06:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
    3c08:	81 e4       	ldi	r24, 0x41	; 65
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <CCPWrite>
}
    3c10:	08 95       	ret

00003c12 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    3c12:	1f 93       	push	r17
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
    3c18:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    3c1a:	c0 e4       	ldi	r28, 0x40	; 64
    3c1c:	d0 e0       	ldi	r29, 0x00	; 0
    3c1e:	68 81       	ld	r22, Y
    3c20:	68 7f       	andi	r22, 0xF8	; 248
    3c22:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    3c24:	80 e4       	ldi	r24, 0x40	; 64
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    3c2c:	88 81       	ld	r24, Y
	return clkCtrl;
}
    3c2e:	81 23       	and	r24, r17
    3c30:	df 91       	pop	r29
    3c32:	cf 91       	pop	r28
    3c34:	1f 91       	pop	r17
    3c36:	08 95       	ret

00003c38 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    3c38:	e0 e4       	ldi	r30, 0x40	; 64
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	91 7f       	andi	r25, 0xF1	; 241
    3c40:	91 60       	ori	r25, 0x01	; 1
    3c42:	89 2b       	or	r24, r25
    3c44:	83 83       	std	Z+3, r24	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    3c46:	08 95       	ret

00003c48 <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    3c48:	e0 e5       	ldi	r30, 0x50	; 80
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	26 81       	ldd	r18, Z+6	; 0x06
    3c4e:	98 2f       	mov	r25, r24
    3c50:	38 2f       	mov	r19, r24
    3c52:	30 95       	com	r19
    3c54:	23 23       	and	r18, r19
    3c56:	66 23       	and	r22, r22
    3c58:	09 f4       	brne	.+2      	; 0x3c5c <CLKSYS_AutoCalibration_Enable+0x14>
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	92 2b       	or	r25, r18
    3c5e:	e0 e5       	ldi	r30, 0x50	; 80
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    3c64:	81 30       	cpi	r24, 0x01	; 1
    3c66:	31 f4       	brne	.+12     	; 0x3c74 <CLKSYS_AutoCalibration_Enable+0x2c>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    3c68:	e8 e6       	ldi	r30, 0x68	; 104
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	80 81       	ld	r24, Z
    3c6e:	81 60       	ori	r24, 0x01	; 1
    3c70:	80 83       	st	Z, r24
    3c72:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    3c74:	82 30       	cpi	r24, 0x02	; 2
    3c76:	29 f4       	brne	.+10     	; 0x3c82 <CLKSYS_AutoCalibration_Enable+0x3a>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    3c78:	e0 e6       	ldi	r30, 0x60	; 96
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
    3c7e:	81 60       	ori	r24, 0x01	; 1
    3c80:	80 83       	st	Z, r24
    3c82:	08 95       	ret

00003c84 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
    3c84:	83 e5       	ldi	r24, 0x53	; 83
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	63 e0       	ldi	r22, 0x03	; 3
    3c8a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <CCPWrite>
}
    3c8e:	08 95       	ret

00003c90 <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
    3c90:	82 e4       	ldi	r24, 0x42	; 66
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	61 e0       	ldi	r22, 0x01	; 1
    3c96:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <CCPWrite>
}
    3c9a:	08 95       	ret

00003c9c <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    3c9c:	cf 92       	push	r12
    3c9e:	df 92       	push	r13
    3ca0:	ef 92       	push	r14
    3ca2:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    3ca4:	20 91 69 50 	lds	r18, 0x5069
    3ca8:	30 91 6a 50 	lds	r19, 0x506A
    3cac:	c0 90 4d 40 	lds	r12, 0x404D
    3cb0:	d0 90 4e 40 	lds	r13, 0x404E
    3cb4:	e0 90 4f 40 	lds	r14, 0x404F
    3cb8:	f0 90 50 40 	lds	r15, 0x4050
    3cbc:	62 50       	subi	r22, 0x02	; 2
    3cbe:	70 40       	sbci	r23, 0x00	; 0
    3cc0:	80 40       	sbci	r24, 0x00	; 0
    3cc2:	90 40       	sbci	r25, 0x00	; 0
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	c8 0e       	add	r12, r24
    3cd2:	d9 1e       	adc	r13, r25
    3cd4:	ea 1e       	adc	r14, r26
    3cd6:	fb 1e       	adc	r15, r27
}
    3cd8:	6c 2d       	mov	r22, r12
    3cda:	7d 2d       	mov	r23, r13
    3cdc:	8e 2d       	mov	r24, r14
    3cde:	9f 2d       	mov	r25, r15
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	df 90       	pop	r13
    3ce6:	cf 90       	pop	r12
    3ce8:	08 95       	ret

00003cea <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    3cea:	3f 92       	push	r3
    3cec:	4f 92       	push	r4
    3cee:	5f 92       	push	r5
    3cf0:	6f 92       	push	r6
    3cf2:	7f 92       	push	r7
    3cf4:	8f 92       	push	r8
    3cf6:	9f 92       	push	r9
    3cf8:	af 92       	push	r10
    3cfa:	bf 92       	push	r11
    3cfc:	cf 92       	push	r12
    3cfe:	df 92       	push	r13
    3d00:	ef 92       	push	r14
    3d02:	ff 92       	push	r15
    3d04:	0f 93       	push	r16
    3d06:	1f 93       	push	r17
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	00 d0       	rcall	.+0      	; 0x3d0e <getSetNextCluster+0x24>
    3d0e:	0f 92       	push	r0
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	34 2e       	mov	r3, r20
    3d1a:	09 83       	std	Y+1, r16	; 0x01
    3d1c:	1a 83       	std	Y+2, r17	; 0x02
    3d1e:	2b 83       	std	Y+3, r18	; 0x03
    3d20:	3c 83       	std	Y+4, r19	; 0x04
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
//unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    3d22:	80 90 6f 50 	lds	r8, 0x506F
    3d26:	90 90 70 50 	lds	r9, 0x5070
    3d2a:	2c 01       	movw	r4, r24
    3d2c:	3d 01       	movw	r6, r26
    3d2e:	44 0c       	add	r4, r4
    3d30:	55 1c       	adc	r5, r5
    3d32:	66 1c       	adc	r6, r6
    3d34:	77 1c       	adc	r7, r7
    3d36:	44 0c       	add	r4, r4
    3d38:	55 1c       	adc	r5, r5
    3d3a:	66 1c       	adc	r6, r6
    3d3c:	77 1c       	adc	r7, r7
    3d3e:	20 91 55 40 	lds	r18, 0x4055
    3d42:	30 91 56 40 	lds	r19, 0x4056
    3d46:	aa 24       	eor	r10, r10
    3d48:	bb 24       	eor	r11, r11
    3d4a:	80 91 6b 50 	lds	r24, 0x506B
    3d4e:	90 91 6c 50 	lds	r25, 0x506C
    3d52:	a0 91 6d 50 	lds	r26, 0x506D
    3d56:	b0 91 6e 50 	lds	r27, 0x506E
    3d5a:	88 0e       	add	r8, r24
    3d5c:	99 1e       	adc	r9, r25
    3d5e:	aa 1e       	adc	r10, r26
    3d60:	bb 1e       	adc	r11, r27
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	c3 01       	movw	r24, r6
    3d68:	b2 01       	movw	r22, r4
    3d6a:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    3d6e:	69 01       	movw	r12, r18
    3d70:	7a 01       	movw	r14, r20
    3d72:	c8 0c       	add	r12, r8
    3d74:	d9 1c       	adc	r13, r9
    3d76:	ea 1c       	adc	r14, r10
    3d78:	fb 1c       	adc	r15, r11

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    3d7a:	00 91 55 40 	lds	r16, 0x4055
    3d7e:	10 91 56 40 	lds	r17, 0x4056

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);
    3d82:	c7 01       	movw	r24, r14
    3d84:	b6 01       	movw	r22, r12
    3d86:	48 e4       	ldi	r20, 0x48	; 72
    3d88:	5e e3       	ldi	r21, 0x3E	; 62
    3d8a:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    3d8e:	98 01       	movw	r18, r16
    3d90:	40 e0       	ldi	r20, 0x00	; 0
    3d92:	50 e0       	ldi	r21, 0x00	; 0
    3d94:	c3 01       	movw	r24, r6
    3d96:	b2 01       	movw	r22, r4
    3d98:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &SDBuffer[FATEntryOffset];
    3d9c:	68 5b       	subi	r22, 0xB8	; 184
    3d9e:	71 4c       	sbci	r23, 0xC1	; 193

if(get_set == GET)
    3da0:	33 20       	and	r3, r3
    3da2:	41 f4       	brne	.+16     	; 0x3db4 <getSetNextCluster+0xca>
  return ((*FATEntryValue) & 0x0fffffff);
    3da4:	db 01       	movw	r26, r22
    3da6:	0d 91       	ld	r16, X+
    3da8:	1d 91       	ld	r17, X+
    3daa:	2d 91       	ld	r18, X+
    3dac:	3c 91       	ld	r19, X
    3dae:	13 97       	sbiw	r26, 0x03	; 3
    3db0:	3f 70       	andi	r19, 0x0F	; 15
    3db2:	14 c0       	rjmp	.+40     	; 0x3ddc <getSetNextCluster+0xf2>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	9a 81       	ldd	r25, Y+2	; 0x02
    3db8:	ab 81       	ldd	r26, Y+3	; 0x03
    3dba:	bc 81       	ldd	r27, Y+4	; 0x04
    3dbc:	fb 01       	movw	r30, r22
    3dbe:	80 83       	st	Z, r24
    3dc0:	91 83       	std	Z+1, r25	; 0x01
    3dc2:	a2 83       	std	Z+2, r26	; 0x02
    3dc4:	b3 83       	std	Z+3, r27	; 0x03

SD_write_block(FATEntrySector,SDBuffer,512);
    3dc6:	c7 01       	movw	r24, r14
    3dc8:	b6 01       	movw	r22, r12
    3dca:	48 e4       	ldi	r20, 0x48	; 72
    3dcc:	5e e3       	ldi	r21, 0x3E	; 62
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	32 e0       	ldi	r19, 0x02	; 2
    3dd2:	0e 94 9f 28 	call	0x513e	; 0x513e <SD_write_block>

return (0);
    3dd6:	00 e0       	ldi	r16, 0x00	; 0
    3dd8:	10 e0       	ldi	r17, 0x00	; 0
    3dda:	98 01       	movw	r18, r16
}
    3ddc:	60 2f       	mov	r22, r16
    3dde:	71 2f       	mov	r23, r17
    3de0:	82 2f       	mov	r24, r18
    3de2:	93 2f       	mov	r25, r19
    3de4:	24 96       	adiw	r28, 0x04	; 4
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	1f 91       	pop	r17
    3df0:	0f 91       	pop	r16
    3df2:	ff 90       	pop	r15
    3df4:	ef 90       	pop	r14
    3df6:	df 90       	pop	r13
    3df8:	cf 90       	pop	r12
    3dfa:	bf 90       	pop	r11
    3dfc:	af 90       	pop	r10
    3dfe:	9f 90       	pop	r9
    3e00:	8f 90       	pop	r8
    3e02:	7f 90       	pop	r7
    3e04:	6f 90       	pop	r6
    3e06:	5f 90       	pop	r5
    3e08:	4f 90       	pop	r4
    3e0a:	3f 90       	pop	r3
    3e0c:	08 95       	ret

00003e0e <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    3e0e:	cf 92       	push	r12
    3e10:	df 92       	push	r13
    3e12:	ef 92       	push	r14
    3e14:	ff 92       	push	r15
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	cf 93       	push	r28
    3e1c:	c8 2f       	mov	r28, r24
    3e1e:	06 2f       	mov	r16, r22
    3e20:	69 01       	movw	r12, r18
    3e22:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;

SD_read_block(unusedSectors + 1,SDBuffer);
    3e24:	80 91 6b 50 	lds	r24, 0x506B
    3e28:	90 91 6c 50 	lds	r25, 0x506C
    3e2c:	a0 91 6d 50 	lds	r26, 0x506D
    3e30:	b0 91 6e 50 	lds	r27, 0x506E
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	6f 5f       	subi	r22, 0xFF	; 255
    3e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e40:	48 e4       	ldi	r20, 0x48	; 72
    3e42:	5e e3       	ldi	r21, 0x3E	; 62
    3e44:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    3e48:	80 91 48 3e 	lds	r24, 0x3E48
    3e4c:	90 91 49 3e 	lds	r25, 0x3E49
    3e50:	a0 91 4a 3e 	lds	r26, 0x3E4A
    3e54:	b0 91 4b 3e 	lds	r27, 0x3E4B
    3e58:	82 35       	cpi	r24, 0x52	; 82
    3e5a:	22 e5       	ldi	r18, 0x52	; 82
    3e5c:	92 07       	cpc	r25, r18
    3e5e:	21 e6       	ldi	r18, 0x61	; 97
    3e60:	a2 07       	cpc	r26, r18
    3e62:	21 e4       	ldi	r18, 0x41	; 65
    3e64:	b2 07       	cpc	r27, r18
    3e66:	09 f0       	breq	.+2      	; 0x3e6a <getSetFreeCluster+0x5c>
    3e68:	63 c0       	rjmp	.+198    	; 0x3f30 <getSetFreeCluster+0x122>
    3e6a:	80 91 2c 40 	lds	r24, 0x402C
    3e6e:	90 91 2d 40 	lds	r25, 0x402D
    3e72:	a0 91 2e 40 	lds	r26, 0x402E
    3e76:	b0 91 2f 40 	lds	r27, 0x402F
    3e7a:	82 37       	cpi	r24, 0x72	; 114
    3e7c:	22 e7       	ldi	r18, 0x72	; 114
    3e7e:	92 07       	cpc	r25, r18
    3e80:	21 e4       	ldi	r18, 0x41	; 65
    3e82:	a2 07       	cpc	r26, r18
    3e84:	21 e6       	ldi	r18, 0x61	; 97
    3e86:	b2 07       	cpc	r27, r18
    3e88:	09 f0       	breq	.+2      	; 0x3e8c <getSetFreeCluster+0x7e>
    3e8a:	56 c0       	rjmp	.+172    	; 0x3f38 <getSetFreeCluster+0x12a>
    3e8c:	80 91 44 40 	lds	r24, 0x4044
    3e90:	90 91 45 40 	lds	r25, 0x4045
    3e94:	a0 91 46 40 	lds	r26, 0x4046
    3e98:	b0 91 47 40 	lds	r27, 0x4047
    3e9c:	80 30       	cpi	r24, 0x00	; 0
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	92 07       	cpc	r25, r18
    3ea2:	25 e5       	ldi	r18, 0x55	; 85
    3ea4:	a2 07       	cpc	r26, r18
    3ea6:	2a ea       	ldi	r18, 0xAA	; 170
    3ea8:	b2 07       	cpc	r27, r18
    3eaa:	09 f0       	breq	.+2      	; 0x3eae <getSetFreeCluster+0xa0>
    3eac:	49 c0       	rjmp	.+146    	; 0x3f40 <getSetFreeCluster+0x132>
  return 0xffffffff;

 if(get_set == GET)
    3eae:	00 23       	and	r16, r16
    3eb0:	a1 f4       	brne	.+40     	; 0x3eda <getSetFreeCluster+0xcc>
 {
   if(totOrNext == TOTAL_FREE)
    3eb2:	c1 30       	cpi	r28, 0x01	; 1
    3eb4:	49 f4       	brne	.+18     	; 0x3ec8 <getSetFreeCluster+0xba>
      return(FS->freeClusterCount);
    3eb6:	00 91 30 40 	lds	r16, 0x4030
    3eba:	10 91 31 40 	lds	r17, 0x4031
    3ebe:	20 91 32 40 	lds	r18, 0x4032
    3ec2:	30 91 33 40 	lds	r19, 0x4033
    3ec6:	3f c0       	rjmp	.+126    	; 0x3f46 <getSetFreeCluster+0x138>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    3ec8:	00 91 34 40 	lds	r16, 0x4034
    3ecc:	10 91 35 40 	lds	r17, 0x4035
    3ed0:	20 91 36 40 	lds	r18, 0x4036
    3ed4:	30 91 37 40 	lds	r19, 0x4037
    3ed8:	36 c0       	rjmp	.+108    	; 0x3f46 <getSetFreeCluster+0x138>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    3eda:	c1 30       	cpi	r28, 0x01	; 1
    3edc:	49 f4       	brne	.+18     	; 0x3ef0 <getSetFreeCluster+0xe2>
      FS->freeClusterCount = FSEntry;
    3ede:	c0 92 30 40 	sts	0x4030, r12
    3ee2:	d0 92 31 40 	sts	0x4031, r13
    3ee6:	e0 92 32 40 	sts	0x4032, r14
    3eea:	f0 92 33 40 	sts	0x4033, r15
    3eee:	08 c0       	rjmp	.+16     	; 0x3f00 <getSetFreeCluster+0xf2>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    3ef0:	c0 92 34 40 	sts	0x4034, r12
    3ef4:	d0 92 35 40 	sts	0x4035, r13
    3ef8:	e0 92 36 40 	sts	0x4036, r14
    3efc:	f0 92 37 40 	sts	0x4037, r15
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
    3f00:	80 91 6b 50 	lds	r24, 0x506B
    3f04:	90 91 6c 50 	lds	r25, 0x506C
    3f08:	a0 91 6d 50 	lds	r26, 0x506D
    3f0c:	b0 91 6e 50 	lds	r27, 0x506E
    3f10:	bc 01       	movw	r22, r24
    3f12:	cd 01       	movw	r24, r26
    3f14:	6f 5f       	subi	r22, 0xFF	; 255
    3f16:	7f 4f       	sbci	r23, 0xFF	; 255
    3f18:	8f 4f       	sbci	r24, 0xFF	; 255
    3f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1c:	48 e4       	ldi	r20, 0x48	; 72
    3f1e:	5e e3       	ldi	r21, 0x3E	; 62
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	32 e0       	ldi	r19, 0x02	; 2
    3f24:	0e 94 9f 28 	call	0x513e	; 0x513e <SD_write_block>
 }
 return 0xffffffff;
    3f28:	0f ef       	ldi	r16, 0xFF	; 255
    3f2a:	1f ef       	ldi	r17, 0xFF	; 255
    3f2c:	98 01       	movw	r18, r16
    3f2e:	0b c0       	rjmp	.+22     	; 0x3f46 <getSetFreeCluster+0x138>
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;

SD_read_block(unusedSectors + 1,SDBuffer);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
    3f30:	0f ef       	ldi	r16, 0xFF	; 255
    3f32:	1f ef       	ldi	r17, 0xFF	; 255
    3f34:	98 01       	movw	r18, r16
    3f36:	07 c0       	rjmp	.+14     	; 0x3f46 <getSetFreeCluster+0x138>
    3f38:	0f ef       	ldi	r16, 0xFF	; 255
    3f3a:	1f ef       	ldi	r17, 0xFF	; 255
    3f3c:	98 01       	movw	r18, r16
    3f3e:	03 c0       	rjmp	.+6      	; 0x3f46 <getSetFreeCluster+0x138>
    3f40:	0f ef       	ldi	r16, 0xFF	; 255
    3f42:	1f ef       	ldi	r17, 0xFF	; 255
    3f44:	98 01       	movw	r18, r16
	  FS->nextFreeCluster = FSEntry;
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
 }
 return 0xffffffff;
}
    3f46:	60 2f       	mov	r22, r16
    3f48:	71 2f       	mov	r23, r17
    3f4a:	82 2f       	mov	r24, r18
    3f4c:	93 2f       	mov	r25, r19
    3f4e:	cf 91       	pop	r28
    3f50:	1f 91       	pop	r17
    3f52:	0f 91       	pop	r16
    3f54:	ff 90       	pop	r15
    3f56:	ef 90       	pop	r14
    3f58:	df 90       	pop	r13
    3f5a:	cf 90       	pop	r12
    3f5c:	08 95       	ret

00003f5e <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    3f5e:	ef 92       	push	r14
    3f60:	ff 92       	push	r15
    3f62:	0f 93       	push	r16
    3f64:	1f 93       	push	r17
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    3f6a:	10 92 6b 50 	sts	0x506B, r1
    3f6e:	10 92 6c 50 	sts	0x506C, r1
    3f72:	10 92 6d 50 	sts	0x506D, r1
    3f76:	10 92 6e 50 	sts	0x506E, r1

SD_read_block(0,SDBuffer);
    3f7a:	60 e0       	ldi	r22, 0x00	; 0
    3f7c:	70 e0       	ldi	r23, 0x00	; 0
    3f7e:	cb 01       	movw	r24, r22
    3f80:	48 e4       	ldi	r20, 0x48	; 72
    3f82:	5e e3       	ldi	r21, 0x3E	; 62
    3f84:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>
bpb = (struct BS_Structure *)SDBuffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    3f88:	80 91 48 3e 	lds	r24, 0x3E48
    3f8c:	89 3e       	cpi	r24, 0xE9	; 233
    3f8e:	31 f1       	breq	.+76     	; 0x3fdc <getBootSectorData+0x7e>
    3f90:	8b 3e       	cpi	r24, 0xEB	; 235
    3f92:	21 f1       	breq	.+72     	; 0x3fdc <getBootSectorData+0x7e>
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    3f94:	80 91 46 40 	lds	r24, 0x4046
    3f98:	90 91 47 40 	lds	r25, 0x4047
    3f9c:	2a ea       	ldi	r18, 0xAA	; 170
    3f9e:	85 35       	cpi	r24, 0x55	; 85
    3fa0:	92 07       	cpc	r25, r18
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <getBootSectorData+0x48>
    3fa4:	b7 c0       	rjmp	.+366    	; 0x4114 <getBootSectorData+0x1b6>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    3fa6:	60 91 0e 40 	lds	r22, 0x400E
    3faa:	70 91 0f 40 	lds	r23, 0x400F
    3fae:	80 91 10 40 	lds	r24, 0x4010
    3fb2:	90 91 11 40 	lds	r25, 0x4011
    3fb6:	60 93 6b 50 	sts	0x506B, r22
    3fba:	70 93 6c 50 	sts	0x506C, r23
    3fbe:	80 93 6d 50 	sts	0x506D, r24
    3fc2:	90 93 6e 50 	sts	0x506E, r25
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
    3fc6:	48 e4       	ldi	r20, 0x48	; 72
    3fc8:	5e e3       	ldi	r21, 0x3E	; 62
    3fca:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    3fce:	80 91 48 3e 	lds	r24, 0x3E48
    3fd2:	89 3e       	cpi	r24, 0xE9	; 233
    3fd4:	19 f0       	breq	.+6      	; 0x3fdc <getBootSectorData+0x7e>
    3fd6:	8b 3e       	cpi	r24, 0xEB	; 235
    3fd8:	09 f0       	breq	.+2      	; 0x3fdc <getBootSectorData+0x7e>
    3fda:	9e c0       	rjmp	.+316    	; 0x4118 <getBootSectorData+0x1ba>
}

bytesPerSector = bpb->bytesPerSector;
    3fdc:	80 91 53 3e 	lds	r24, 0x3E53
    3fe0:	90 91 54 3e 	lds	r25, 0x3E54
    3fe4:	80 93 55 40 	sts	0x4055, r24
    3fe8:	90 93 56 40 	sts	0x4056, r25
sectorPerCluster = bpb->sectorPerCluster;
    3fec:	80 91 55 3e 	lds	r24, 0x3E55
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	80 93 69 50 	sts	0x5069, r24
    3ff6:	90 93 6a 50 	sts	0x506A, r25
reservedSectorCount = bpb->reservedSectorCount;
    3ffa:	e0 90 56 3e 	lds	r14, 0x3E56
    3ffe:	f0 90 57 3e 	lds	r15, 0x3E57
    4002:	e0 92 6f 50 	sts	0x506F, r14
    4006:	f0 92 70 50 	sts	0x5070, r15
rootCluster = bpb->rootCluster;
    400a:	80 91 74 3e 	lds	r24, 0x3E74
    400e:	90 91 75 3e 	lds	r25, 0x3E75
    4012:	a0 91 76 3e 	lds	r26, 0x3E76
    4016:	b0 91 77 3e 	lds	r27, 0x3E77
    401a:	80 93 5d 40 	sts	0x405D, r24
    401e:	90 93 5e 40 	sts	0x405E, r25
    4022:	a0 93 5f 40 	sts	0x405F, r26
    4026:	b0 93 60 40 	sts	0x4060, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    402a:	c0 91 6f 50 	lds	r28, 0x506F
    402e:	d0 91 70 50 	lds	r29, 0x5070
    4032:	60 91 58 3e 	lds	r22, 0x3E58
    4036:	70 e0       	ldi	r23, 0x00	; 0
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	20 91 6c 3e 	lds	r18, 0x3E6C
    4040:	30 91 6d 3e 	lds	r19, 0x3E6D
    4044:	40 91 6e 3e 	lds	r20, 0x3E6E
    4048:	50 91 6f 3e 	lds	r21, 0x3E6F
    404c:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    4050:	8b 01       	movw	r16, r22
    4052:	9c 01       	movw	r18, r24
    4054:	ae 01       	movw	r20, r28
    4056:	60 e0       	ldi	r22, 0x00	; 0
    4058:	70 e0       	ldi	r23, 0x00	; 0
    405a:	80 91 64 3e 	lds	r24, 0x3E64
    405e:	90 91 65 3e 	lds	r25, 0x3E65
    4062:	a0 91 66 3e 	lds	r26, 0x3E66
    4066:	b0 91 67 3e 	lds	r27, 0x3E67
    406a:	84 0f       	add	r24, r20
    406c:	95 1f       	adc	r25, r21
    406e:	a6 1f       	adc	r26, r22
    4070:	b7 1f       	adc	r27, r23
    4072:	80 0f       	add	r24, r16
    4074:	91 1f       	adc	r25, r17
    4076:	a2 1f       	adc	r26, r18
    4078:	b3 1f       	adc	r27, r19
    407a:	80 93 4d 40 	sts	0x404D, r24
    407e:	90 93 4e 40 	sts	0x404E, r25
    4082:	a0 93 4f 40 	sts	0x404F, r26
    4086:	b0 93 50 40 	sts	0x4050, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    408a:	e0 91 69 50 	lds	r30, 0x5069
    408e:	f0 91 6a 50 	lds	r31, 0x506A
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
    4092:	c7 01       	movw	r24, r14
    4094:	a0 e0       	ldi	r26, 0x00	; 0
    4096:	b0 e0       	ldi	r27, 0x00	; 0
    4098:	40 91 68 3e 	lds	r20, 0x3E68
    409c:	50 91 69 3e 	lds	r21, 0x3E69
    40a0:	60 91 6a 3e 	lds	r22, 0x3E6A
    40a4:	70 91 6b 3e 	lds	r23, 0x3E6B
    40a8:	48 1b       	sub	r20, r24
    40aa:	59 0b       	sbc	r21, r25
    40ac:	6a 0b       	sbc	r22, r26
    40ae:	7b 0b       	sbc	r23, r27
sectorPerCluster = bpb->sectorPerCluster;
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
    40b0:	cb 01       	movw	r24, r22
    40b2:	ba 01       	movw	r22, r20
    40b4:	60 1b       	sub	r22, r16
    40b6:	71 0b       	sbc	r23, r17
    40b8:	82 0b       	sbc	r24, r18
    40ba:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    40bc:	9f 01       	movw	r18, r30
    40be:	40 e0       	ldi	r20, 0x00	; 0
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    40c6:	20 93 58 40 	sts	0x4058, r18
    40ca:	30 93 59 40 	sts	0x4059, r19
    40ce:	40 93 5a 40 	sts	0x405A, r20
    40d2:	50 93 5b 40 	sts	0x405B, r21


if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	60 e0       	ldi	r22, 0x00	; 0
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	a9 01       	movw	r20, r18
    40e0:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <getSetFreeCluster>
    40e4:	ab 01       	movw	r20, r22
    40e6:	bc 01       	movw	r22, r24
    40e8:	80 91 58 40 	lds	r24, 0x4058
    40ec:	90 91 59 40 	lds	r25, 0x4059
    40f0:	a0 91 5a 40 	lds	r26, 0x405A
    40f4:	b0 91 5b 40 	lds	r27, 0x405B
    40f8:	84 17       	cp	r24, r20
    40fa:	95 07       	cpc	r25, r21
    40fc:	a6 07       	cpc	r26, r22
    40fe:	b7 07       	cpc	r27, r23
    4100:	20 f4       	brcc	.+8      	; 0x410a <getBootSectorData+0x1ac>
     freeClusterCountUpdated = 0;
    4102:	10 92 a1 50 	sts	0x50A1, r1
else
	 freeClusterCountUpdated = 1;
return 0;
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	08 c0       	rjmp	.+16     	; 0x411a <getBootSectorData+0x1bc>


if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	80 93 a1 50 	sts	0x50A1, r24
return 0;
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	03 c0       	rjmp	.+6      	; 0x411a <getBootSectorData+0x1bc>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	01 c0       	rjmp	.+2      	; 0x411a <getBootSectorData+0x1bc>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    4118:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
    411a:	df 91       	pop	r29
    411c:	cf 91       	pop	r28
    411e:	1f 91       	pop	r17
    4120:	0f 91       	pop	r16
    4122:	ff 90       	pop	r15
    4124:	ef 90       	pop	r14
    4126:	08 95       	ret

00004128 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    4128:	0f 93       	push	r16
    412a:	1f 93       	push	r17
    412c:	cf 93       	push	r28
    412e:	df 93       	push	r29
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	2b 97       	sbiw	r28, 0x0b	; 11
    4136:	cd bf       	out	0x3d, r28	; 61
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	78 2f       	mov	r23, r24
    413c:	69 2f       	mov	r22, r25
unsigned char fileNameFAT[11];
unsigned char j, k;

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
    413e:	e8 2f       	mov	r30, r24
    4140:	f9 2f       	mov	r31, r25
    4142:	df 01       	movw	r26, r30
    4144:	0d 90       	ld	r0, X+
    4146:	00 20       	and	r0, r0
    4148:	e9 f7       	brne	.-6      	; 0x4144 <convertFileName+0x1c>
    414a:	11 97       	sbiw	r26, 0x01	; 1
    414c:	ae 1b       	sub	r26, r30
    414e:	bf 0b       	sbc	r27, r31
    4150:	a0 31       	cpi	r26, 0x10	; 16
    4152:	b1 05       	cpc	r27, r1
    4154:	08 f0       	brcs	.+2      	; 0x4158 <convertFileName+0x30>
    4156:	9c c0       	rjmp	.+312    	; 0x4290 <convertFileName+0x168>
    4158:	28 2f       	mov	r18, r24
    415a:	39 2f       	mov	r19, r25
    415c:	01 e9       	ldi	r16, 0x91	; 145
    415e:	10 e5       	ldi	r17, 0x50	; 80
    4160:	a8 01       	movw	r20, r16
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	07 c0       	rjmp	.+14     	; 0x4176 <convertFileName+0x4e>
int i=0;
for(; i < strlen((const char*)fileName); i++){
	Filename[i] = fileName[i];
    4168:	d9 01       	movw	r26, r18
    416a:	ed 91       	ld	r30, X+
    416c:	9d 01       	movw	r18, r26
    416e:	da 01       	movw	r26, r20
    4170:	ed 93       	st	X+, r30
    4172:	ad 01       	movw	r20, r26

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
int i=0;
for(; i < strlen((const char*)fileName); i++){
    4174:	01 96       	adiw	r24, 0x01	; 1
    4176:	a7 2f       	mov	r26, r23
    4178:	b6 2f       	mov	r27, r22
    417a:	fd 01       	movw	r30, r26
    417c:	01 90       	ld	r0, Z+
    417e:	00 20       	and	r0, r0
    4180:	e9 f7       	brne	.-6      	; 0x417c <convertFileName+0x54>
    4182:	31 97       	sbiw	r30, 0x01	; 1
    4184:	ea 1b       	sub	r30, r26
    4186:	fb 0b       	sbc	r31, r27
    4188:	8e 17       	cp	r24, r30
    418a:	9f 07       	cpc	r25, r31
    418c:	68 f3       	brcs	.-38     	; 0x4168 <convertFileName+0x40>
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';
    418e:	8f 30       	cpi	r24, 0x0F	; 15
    4190:	91 05       	cpc	r25, r1
    4192:	54 f4       	brge	.+20     	; 0x41a8 <convertFileName+0x80>
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    4194:	fc 01       	movw	r30, r24
    4196:	ef 56       	subi	r30, 0x6F	; 111
    4198:	ff 4a       	sbci	r31, 0xAF	; 175
    419a:	80 ea       	ldi	r24, 0xA0	; 160
    419c:	90 e5       	ldi	r25, 0x50	; 80
if(strlen((const char*)fileName) > 15) return 1;
int i=0;
for(; i < strlen((const char*)fileName); i++){
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';
    419e:	20 e2       	ldi	r18, 0x20	; 32
    41a0:	21 93       	st	Z+, r18
    41a2:	e8 17       	cp	r30, r24
    41a4:	f9 07       	cpc	r31, r25
    41a6:	e1 f7       	brne	.-8      	; 0x41a0 <convertFileName+0x78>


for(j=0; j<12; j++)
if(Filename[j] == '.') break;
    41a8:	80 91 91 50 	lds	r24, 0x5091
    41ac:	8e 32       	cpi	r24, 0x2E	; 46
    41ae:	91 f0       	breq	.+36     	; 0x41d4 <convertFileName+0xac>
    41b0:	e2 e9       	ldi	r30, 0x92	; 146
    41b2:	f0 e5       	ldi	r31, 0x50	; 80
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
    41b4:	21 e0       	ldi	r18, 0x01	; 1
if(Filename[j] == '.') break;
    41b6:	81 91       	ld	r24, Z+
    41b8:	8e 32       	cpi	r24, 0x2E	; 46
    41ba:	21 f0       	breq	.+8      	; 0x41c4 <convertFileName+0x9c>
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
    41bc:	2f 5f       	subi	r18, 0xFF	; 255
    41be:	2c 30       	cpi	r18, 0x0C	; 12
    41c0:	d1 f7       	brne	.-12     	; 0x41b6 <convertFileName+0x8e>
    41c2:	05 c0       	rjmp	.+10     	; 0x41ce <convertFileName+0xa6>
if(Filename[j] == '.') break;

if(j>8 && j<12) {//Invalid fileName
    41c4:	82 2f       	mov	r24, r18
    41c6:	89 50       	subi	r24, 0x09	; 9
    41c8:	83 30       	cpi	r24, 0x03	; 3
    41ca:	08 f4       	brcc	.+2      	; 0x41ce <convertFileName+0xa6>
    41cc:	63 c0       	rjmp	.+198    	; 0x4294 <convertFileName+0x16c>
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    41ce:	22 23       	and	r18, r18
    41d0:	29 f4       	brne	.+10     	; 0x41dc <convertFileName+0xb4>
    41d2:	01 c0       	rjmp	.+2      	; 0x41d6 <convertFileName+0xae>
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
if(Filename[j] == '.') break;
    41d4:	20 e0       	ldi	r18, 0x00	; 0
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    41d6:	82 2f       	mov	r24, r18

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    41d8:	90 e2       	ldi	r25, 0x20	; 32
    41da:	10 c0       	rjmp	.+32     	; 0x41fc <convertFileName+0xd4>

if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    41dc:	de 01       	movw	r26, r28
    41de:	11 96       	adiw	r26, 0x01	; 1
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    41e0:	82 2f       	mov	r24, r18
    41e2:	81 50       	subi	r24, 0x01	; 1
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	8e 56       	subi	r24, 0x6E	; 110
    41e8:	9f 4a       	sbci	r25, 0xAF	; 175
    41ea:	f8 01       	movw	r30, r16
if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];
    41ec:	31 91       	ld	r19, Z+
    41ee:	3d 93       	st	X+, r19

if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    41f0:	e8 17       	cp	r30, r24
    41f2:	f9 07       	cpc	r31, r25
    41f4:	d9 f7       	brne	.-10     	; 0x41ec <convertFileName+0xc4>
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    41f6:	28 30       	cpi	r18, 0x08	; 8
    41f8:	70 f3       	brcs	.-36     	; 0x41d6 <convertFileName+0xae>
    41fa:	0a c0       	rjmp	.+20     	; 0x4210 <convertFileName+0xe8>
  fileNameFAT[k] = ' ';
    41fc:	e1 e0       	ldi	r30, 0x01	; 1
    41fe:	f0 e0       	ldi	r31, 0x00	; 0
    4200:	ec 0f       	add	r30, r28
    4202:	fd 1f       	adc	r31, r29
    4204:	e8 0f       	add	r30, r24
    4206:	f1 1d       	adc	r31, r1
    4208:	90 83       	st	Z, r25
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    420a:	8f 5f       	subi	r24, 0xFF	; 255
    420c:	88 30       	cpi	r24, 0x08	; 8
    420e:	b0 f3       	brcs	.-20     	; 0x41fc <convertFileName+0xd4>
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
    4210:	2c 30       	cpi	r18, 0x0C	; 12
    4212:	09 f0       	breq	.+2      	; 0x4216 <convertFileName+0xee>
    4214:	2f 5f       	subi	r18, 0xFF	; 255
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    4216:	38 e0       	ldi	r19, 0x08	; 8
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    4218:	81 e9       	ldi	r24, 0x91	; 145
    421a:	90 e5       	ldi	r25, 0x50	; 80
    421c:	fc 01       	movw	r30, r24
    421e:	e2 0f       	add	r30, r18
    4220:	f1 1d       	adc	r31, r1
    4222:	40 81       	ld	r20, Z
    4224:	44 23       	and	r20, r20
    4226:	19 f4       	brne	.+6      	; 0x422e <convertFileName+0x106>
    fileNameFAT[k] = Filename[j++];
  else //filling extension trail with blanks
    while(k<11)
    4228:	3b 30       	cpi	r19, 0x0B	; 11
    422a:	50 f0       	brcs	.+20     	; 0x4240 <convertFileName+0x118>
    422c:	15 c0       	rjmp	.+42     	; 0x4258 <convertFileName+0x130>

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    fileNameFAT[k] = Filename[j++];
    422e:	e1 e0       	ldi	r30, 0x01	; 1
    4230:	f0 e0       	ldi	r31, 0x00	; 0
    4232:	ec 0f       	add	r30, r28
    4234:	fd 1f       	adc	r31, r29
    4236:	e3 0f       	add	r30, r19
    4238:	f1 1d       	adc	r31, r1
    423a:	40 83       	st	Z, r20
    423c:	2f 5f       	subi	r18, 0xFF	; 255
    423e:	0c c0       	rjmp	.+24     	; 0x4258 <convertFileName+0x130>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    4240:	80 e2       	ldi	r24, 0x20	; 32
    4242:	e1 e0       	ldi	r30, 0x01	; 1
    4244:	f0 e0       	ldi	r31, 0x00	; 0
    4246:	ec 0f       	add	r30, r28
    4248:	fd 1f       	adc	r31, r29
    424a:	e3 0f       	add	r30, r19
    424c:	f1 1d       	adc	r31, r1
    424e:	80 83       	st	Z, r24
    4250:	3f 5f       	subi	r19, 0xFF	; 255
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    fileNameFAT[k] = Filename[j++];
  else //filling extension trail with blanks
    while(k<11)
    4252:	3b 30       	cpi	r19, 0x0B	; 11
    4254:	b1 f7       	brne	.-20     	; 0x4242 <convertFileName+0x11a>
    4256:	03 c0       	rjmp	.+6      	; 0x425e <convertFileName+0x136>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
    4258:	3f 5f       	subi	r19, 0xFF	; 255
    425a:	3b 30       	cpi	r19, 0x0B	; 11
    425c:	f8 f2       	brcs	.-66     	; 0x421c <convertFileName+0xf4>
    425e:	de 01       	movw	r26, r28
    4260:	11 96       	adiw	r26, 0x01	; 1
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    4262:	ce 01       	movw	r24, r28
    4264:	0c 96       	adiw	r24, 0x0c	; 12
    4266:	fd 01       	movw	r30, r26
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    4268:	20 81       	ld	r18, Z
    426a:	32 2f       	mov	r19, r18
    426c:	31 56       	subi	r19, 0x61	; 97
    426e:	3a 31       	cpi	r19, 0x1A	; 26
    4270:	10 f4       	brcc	.+4      	; 0x4276 <convertFileName+0x14e>
    fileNameFAT[j] -= 0x20;
    4272:	20 52       	subi	r18, 0x20	; 32
    4274:	20 83       	st	Z, r18
    4276:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    4278:	e8 17       	cp	r30, r24
    427a:	f9 07       	cpc	r31, r25
    427c:	a9 f7       	brne	.-22     	; 0x4268 <convertFileName+0x140>
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  Filename[j] = fileNameFAT[j];
    427e:	2d 91       	ld	r18, X+
    4280:	f8 01       	movw	r30, r16
    4282:	21 93       	st	Z+, r18
    4284:	8f 01       	movw	r16, r30

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    4286:	a8 17       	cp	r26, r24
    4288:	b9 07       	cpc	r27, r25
    428a:	c9 f7       	brne	.-14     	; 0x427e <convertFileName+0x156>
  Filename[j] = fileNameFAT[j];

return 0;
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	03 c0       	rjmp	.+6      	; 0x4296 <convertFileName+0x16e>
unsigned char fileNameFAT[11];
unsigned char j, k;

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	01 c0       	rjmp	.+2      	; 0x4296 <convertFileName+0x16e>

for(j=0; j<12; j++)
if(Filename[j] == '.') break;

if(j>8 && j<12) {//Invalid fileName
	return 1;}
    4294:	81 e0       	ldi	r24, 0x01	; 1

for(j=0; j<11; j++)
  Filename[j] = fileNameFAT[j];

return 0;
}
    4296:	2b 96       	adiw	r28, 0x0b	; 11
    4298:	cd bf       	out	0x3d, r28	; 61
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	1f 91       	pop	r17
    42a2:	0f 91       	pop	r16
    42a4:	08 95       	ret

000042a6 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    42a6:	4f 92       	push	r4
    42a8:	5f 92       	push	r5
    42aa:	6f 92       	push	r6
    42ac:	7f 92       	push	r7
    42ae:	8f 92       	push	r8
    42b0:	9f 92       	push	r9
    42b2:	af 92       	push	r10
    42b4:	bf 92       	push	r11
    42b6:	cf 92       	push	r12
    42b8:	df 92       	push	r13
    42ba:	ef 92       	push	r14
    42bc:	ff 92       	push	r15
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	2b 01       	movw	r4, r22
    42c4:	3c 01       	movw	r6, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    42c6:	20 e8       	ldi	r18, 0x80	; 128
    42c8:	3f ef       	ldi	r19, 0xFF	; 255
    42ca:	4f ef       	ldi	r20, 0xFF	; 255
    42cc:	5f ef       	ldi	r21, 0xFF	; 255
    42ce:	42 22       	and	r4, r18
    42d0:	53 22       	and	r5, r19
    42d2:	64 22       	and	r6, r20
    42d4:	75 22       	and	r7, r21
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    42d6:	80 91 58 40 	lds	r24, 0x4058
    42da:	90 91 59 40 	lds	r25, 0x4059
    42de:	a0 91 5a 40 	lds	r26, 0x405A
    42e2:	b0 91 5b 40 	lds	r27, 0x405B
    42e6:	48 16       	cp	r4, r24
    42e8:	59 06       	cpc	r5, r25
    42ea:	6a 06       	cpc	r6, r26
    42ec:	7b 06       	cpc	r7, r27
    42ee:	08 f0       	brcs	.+2      	; 0x42f2 <searchNextFreeCluster+0x4c>
    42f0:	77 c0       	rjmp	.+238    	; 0x43e0 <searchNextFreeCluster+0x13a>
    42f2:	53 01       	movw	r10, r6
    42f4:	42 01       	movw	r8, r4
    42f6:	88 0c       	add	r8, r8
    42f8:	99 1c       	adc	r9, r9
    42fa:	aa 1c       	adc	r10, r10
    42fc:	bb 1c       	adc	r11, r11
    42fe:	88 0c       	add	r8, r8
    4300:	99 1c       	adc	r9, r9
    4302:	aa 1c       	adc	r10, r10
    4304:	bb 1c       	adc	r11, r11
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
    4306:	c8 e4       	ldi	r28, 0x48	; 72
    4308:	de e3       	ldi	r29, 0x3E	; 62
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    430a:	c0 90 6f 50 	lds	r12, 0x506F
    430e:	d0 90 70 50 	lds	r13, 0x5070
    4312:	20 91 55 40 	lds	r18, 0x4055
    4316:	30 91 56 40 	lds	r19, 0x4056
    431a:	ee 24       	eor	r14, r14
    431c:	ff 24       	eor	r15, r15
    431e:	80 91 6b 50 	lds	r24, 0x506B
    4322:	90 91 6c 50 	lds	r25, 0x506C
    4326:	a0 91 6d 50 	lds	r26, 0x506D
    432a:	b0 91 6e 50 	lds	r27, 0x506E
    432e:	c8 0e       	add	r12, r24
    4330:	d9 1e       	adc	r13, r25
    4332:	ea 1e       	adc	r14, r26
    4334:	fb 1e       	adc	r15, r27
    4336:	40 e0       	ldi	r20, 0x00	; 0
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	c5 01       	movw	r24, r10
    433c:	b4 01       	movw	r22, r8
    433e:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    4342:	c7 01       	movw	r24, r14
    4344:	b6 01       	movw	r22, r12
    4346:	62 0f       	add	r22, r18
    4348:	73 1f       	adc	r23, r19
    434a:	84 1f       	adc	r24, r20
    434c:	95 1f       	adc	r25, r21
      SD_read_block(sector,SDBuffer);
    434e:	ae 01       	movw	r20, r28
    4350:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    4354:	88 81       	ld	r24, Y
    4356:	99 81       	ldd	r25, Y+1	; 0x01
    4358:	aa 81       	ldd	r26, Y+2	; 0x02
    435a:	bb 81       	ldd	r27, Y+3	; 0x03
    435c:	bf 70       	andi	r27, 0x0F	; 15
    435e:	00 97       	sbiw	r24, 0x00	; 0
    4360:	a1 05       	cpc	r26, r1
    4362:	b1 05       	cpc	r27, r1
    4364:	99 f0       	breq	.+38     	; 0x438c <searchNextFreeCluster+0xe6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    4366:	21 e0       	ldi	r18, 0x01	; 1
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
    4368:	e2 2f       	mov	r30, r18
    436a:	f0 e0       	ldi	r31, 0x00	; 0
    436c:	ee 0f       	add	r30, r30
    436e:	ff 1f       	adc	r31, r31
    4370:	ee 0f       	add	r30, r30
    4372:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
    4374:	e8 5b       	subi	r30, 0xB8	; 184
    4376:	f1 4c       	sbci	r31, 0xC1	; 193
    4378:	80 81       	ld	r24, Z
    437a:	91 81       	ldd	r25, Z+1	; 0x01
    437c:	a2 81       	ldd	r26, Z+2	; 0x02
    437e:	b3 81       	ldd	r27, Z+3	; 0x03
    4380:	bf 70       	andi	r27, 0x0F	; 15
    4382:	00 97       	sbiw	r24, 0x00	; 0
    4384:	a1 05       	cpc	r26, r1
    4386:	b1 05       	cpc	r27, r1
    4388:	39 f4       	brne	.+14     	; 0x4398 <searchNextFreeCluster+0xf2>
    438a:	01 c0       	rjmp	.+2      	; 0x438e <searchNextFreeCluster+0xe8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    438c:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
    438e:	42 0e       	add	r4, r18
    4390:	51 1c       	adc	r5, r1
    4392:	61 1c       	adc	r6, r1
    4394:	71 1c       	adc	r7, r1
    4396:	27 c0       	rjmp	.+78     	; 0x43e6 <searchNextFreeCluster+0x140>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    4398:	2f 5f       	subi	r18, 0xFF	; 255
    439a:	32 f7       	brpl	.-52     	; 0x4368 <searchNextFreeCluster+0xc2>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    439c:	80 e8       	ldi	r24, 0x80	; 128
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	a0 e0       	ldi	r26, 0x00	; 0
    43a2:	b0 e0       	ldi	r27, 0x00	; 0
    43a4:	48 0e       	add	r4, r24
    43a6:	59 1e       	adc	r5, r25
    43a8:	6a 1e       	adc	r6, r26
    43aa:	7b 1e       	adc	r7, r27
    43ac:	80 91 58 40 	lds	r24, 0x4058
    43b0:	90 91 59 40 	lds	r25, 0x4059
    43b4:	a0 91 5a 40 	lds	r26, 0x405A
    43b8:	b0 91 5b 40 	lds	r27, 0x405B
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	32 e0       	ldi	r19, 0x02	; 2
    43c0:	40 e0       	ldi	r20, 0x00	; 0
    43c2:	50 e0       	ldi	r21, 0x00	; 0
    43c4:	82 0e       	add	r8, r18
    43c6:	93 1e       	adc	r9, r19
    43c8:	a4 1e       	adc	r10, r20
    43ca:	b5 1e       	adc	r11, r21
    43cc:	48 16       	cp	r4, r24
    43ce:	59 06       	cpc	r5, r25
    43d0:	6a 06       	cpc	r6, r26
    43d2:	7b 06       	cpc	r7, r27
    43d4:	08 f4       	brcc	.+2      	; 0x43d8 <searchNextFreeCluster+0x132>
    43d6:	99 cf       	rjmp	.-206    	; 0x430a <searchNextFreeCluster+0x64>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
    43d8:	44 24       	eor	r4, r4
    43da:	55 24       	eor	r5, r5
    43dc:	32 01       	movw	r6, r4
    43de:	03 c0       	rjmp	.+6      	; 0x43e6 <searchNextFreeCluster+0x140>
    43e0:	44 24       	eor	r4, r4
    43e2:	55 24       	eor	r5, r5
    43e4:	32 01       	movw	r6, r4
}
    43e6:	64 2d       	mov	r22, r4
    43e8:	75 2d       	mov	r23, r5
    43ea:	86 2d       	mov	r24, r6
    43ec:	97 2d       	mov	r25, r7
    43ee:	df 91       	pop	r29
    43f0:	cf 91       	pop	r28
    43f2:	ff 90       	pop	r15
    43f4:	ef 90       	pop	r14
    43f6:	df 90       	pop	r13
    43f8:	cf 90       	pop	r12
    43fa:	bf 90       	pop	r11
    43fc:	af 90       	pop	r10
    43fe:	9f 90       	pop	r9
    4400:	8f 90       	pop	r8
    4402:	7f 90       	pop	r7
    4404:	6f 90       	pop	r6
    4406:	5f 90       	pop	r5
    4408:	4f 90       	pop	r4
    440a:	08 95       	ret

0000440c <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    440c:	cf 92       	push	r12
    440e:	df 92       	push	r13
    4410:	ef 92       	push	r14
    4412:	ff 92       	push	r15
    4414:	cf 93       	push	r28
    4416:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    4418:	db 01       	movw	r26, r22
    441a:	ca 01       	movw	r24, r20
    441c:	91 70       	andi	r25, 0x01	; 1
    441e:	a0 70       	andi	r26, 0x00	; 0
    4420:	b0 70       	andi	r27, 0x00	; 0
    4422:	00 97       	sbiw	r24, 0x00	; 0
    4424:	a1 05       	cpc	r26, r1
    4426:	b1 05       	cpc	r27, r1
    4428:	51 f4       	brne	.+20     	; 0x443e <freeMemoryUpdate+0x32>
    442a:	03 2e       	mov	r0, r19
    442c:	39 e0       	ldi	r19, 0x09	; 9
    442e:	76 95       	lsr	r23
    4430:	67 95       	ror	r22
    4432:	57 95       	ror	r21
    4434:	47 95       	ror	r20
    4436:	3a 95       	dec	r19
    4438:	d1 f7       	brne	.-12     	; 0x442e <freeMemoryUpdate+0x22>
    443a:	30 2d       	mov	r19, r0
    443c:	0d c0       	rjmp	.+26     	; 0x4458 <freeMemoryUpdate+0x4c>
  else size = (size / 512) +1;
    443e:	03 2e       	mov	r0, r19
    4440:	39 e0       	ldi	r19, 0x09	; 9
    4442:	76 95       	lsr	r23
    4444:	67 95       	ror	r22
    4446:	57 95       	ror	r21
    4448:	47 95       	ror	r20
    444a:	3a 95       	dec	r19
    444c:	d1 f7       	brne	.-12     	; 0x4442 <freeMemoryUpdate+0x36>
    444e:	30 2d       	mov	r19, r0
    4450:	4f 5f       	subi	r20, 0xFF	; 255
    4452:	5f 4f       	sbci	r21, 0xFF	; 255
    4454:	6f 4f       	sbci	r22, 0xFF	; 255
    4456:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
    4458:	db 01       	movw	r26, r22
    445a:	ca 01       	movw	r24, r20
    445c:	87 70       	andi	r24, 0x07	; 7
    445e:	90 70       	andi	r25, 0x00	; 0
    4460:	a0 70       	andi	r26, 0x00	; 0
    4462:	b0 70       	andi	r27, 0x00	; 0
    4464:	00 97       	sbiw	r24, 0x00	; 0
    4466:	a1 05       	cpc	r26, r1
    4468:	b1 05       	cpc	r27, r1
    446a:	59 f4       	brne	.+22     	; 0x4482 <freeMemoryUpdate+0x76>
    446c:	6a 01       	movw	r12, r20
    446e:	7b 01       	movw	r14, r22
    4470:	68 94       	set
    4472:	12 f8       	bld	r1, 2
    4474:	f6 94       	lsr	r15
    4476:	e7 94       	ror	r14
    4478:	d7 94       	ror	r13
    447a:	c7 94       	ror	r12
    447c:	16 94       	lsr	r1
    447e:	d1 f7       	brne	.-12     	; 0x4474 <freeMemoryUpdate+0x68>
    4480:	0f c0       	rjmp	.+30     	; 0x44a0 <freeMemoryUpdate+0x94>
  else size = (size / 8) +1;
    4482:	6a 01       	movw	r12, r20
    4484:	7b 01       	movw	r14, r22
    4486:	68 94       	set
    4488:	12 f8       	bld	r1, 2
    448a:	f6 94       	lsr	r15
    448c:	e7 94       	ror	r14
    448e:	d7 94       	ror	r13
    4490:	c7 94       	ror	r12
    4492:	16 94       	lsr	r1
    4494:	d1 f7       	brne	.-12     	; 0x448a <freeMemoryUpdate+0x7e>
    4496:	08 94       	sec
    4498:	c1 1c       	adc	r12, r1
    449a:	d1 1c       	adc	r13, r1
    449c:	e1 1c       	adc	r14, r1
    449e:	f1 1c       	adc	r15, r1

  if(freeClusterCountUpdated)
    44a0:	80 91 a1 50 	lds	r24, 0x50A1
    44a4:	88 23       	and	r24, r24
    44a6:	d1 f0       	breq	.+52     	; 0x44dc <freeMemoryUpdate+0xd0>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	60 e0       	ldi	r22, 0x00	; 0
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	a9 01       	movw	r20, r18
    44b2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <getSetFreeCluster>
	if(flag == ADD)
    44b6:	cc 23       	and	r28, r28
    44b8:	39 f4       	brne	.+14     	; 0x44c8 <freeMemoryUpdate+0xbc>
  	   freeClusters = freeClusters + size;
    44ba:	9b 01       	movw	r18, r22
    44bc:	ac 01       	movw	r20, r24
    44be:	2c 0d       	add	r18, r12
    44c0:	3d 1d       	adc	r19, r13
    44c2:	4e 1d       	adc	r20, r14
    44c4:	5f 1d       	adc	r21, r15
    44c6:	06 c0       	rjmp	.+12     	; 0x44d4 <freeMemoryUpdate+0xc8>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    44c8:	9b 01       	movw	r18, r22
    44ca:	ac 01       	movw	r20, r24
    44cc:	2c 19       	sub	r18, r12
    44ce:	3d 09       	sbc	r19, r13
    44d0:	4e 09       	sbc	r20, r14
    44d2:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	61 e0       	ldi	r22, 0x01	; 1
    44d8:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <getSetFreeCluster>
  }
}
    44dc:	cf 91       	pop	r28
    44de:	ff 90       	pop	r15
    44e0:	ef 90       	pop	r14
    44e2:	df 90       	pop	r13
    44e4:	cf 90       	pop	r12
    44e6:	08 95       	ret

000044e8 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    44e8:	2f 92       	push	r2
    44ea:	3f 92       	push	r3
    44ec:	4f 92       	push	r4
    44ee:	5f 92       	push	r5
    44f0:	6f 92       	push	r6
    44f2:	7f 92       	push	r7
    44f4:	8f 92       	push	r8
    44f6:	9f 92       	push	r9
    44f8:	af 92       	push	r10
    44fa:	bf 92       	push	r11
    44fc:	cf 92       	push	r12
    44fe:	df 92       	push	r13
    4500:	ef 92       	push	r14
    4502:	ff 92       	push	r15
    4504:	0f 93       	push	r16
    4506:	1f 93       	push	r17
    4508:	cf 93       	push	r28
    450a:	df 93       	push	r29
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	2c 97       	sbiw	r28, 0x0c	; 12
    4512:	cd bf       	out	0x3d, r28	; 61
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	88 2e       	mov	r8, r24
    4518:	7b 01       	movw	r14, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    451a:	80 91 5d 40 	lds	r24, 0x405D
    451e:	90 91 5e 40 	lds	r25, 0x405E
    4522:	a0 91 5f 40 	lds	r26, 0x405F
    4526:	b0 91 60 40 	lds	r27, 0x4060
    452a:	89 87       	std	Y+9, r24	; 0x09
    452c:	9a 87       	std	Y+10, r25	; 0x0a
    452e:	ab 87       	std	Y+11, r26	; 0x0b
    4530:	bc 87       	std	Y+12, r27	; 0x0c
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4532:	0f 2e       	mov	r0, r31
    4534:	f8 e4       	ldi	r31, 0x48	; 72
    4536:	2f 2e       	mov	r2, r31
    4538:	fe e3       	ldi	r31, 0x3E	; 62
    453a:	3f 2e       	mov	r3, r31
    453c:	f0 2d       	mov	r31, r0
		{
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    453e:	c8 2c       	mov	r12, r8
    4540:	ca 94       	dec	r12
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4542:	d2 2c       	mov	r13, r2
    4544:	93 2c       	mov	r9, r3
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    4546:	5b 01       	movw	r10, r22
    4548:	08 94       	sec
    454a:	a1 1c       	adc	r10, r1
    454c:	b1 1c       	adc	r11, r1

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    454e:	69 85       	ldd	r22, Y+9	; 0x09
    4550:	7a 85       	ldd	r23, Y+10	; 0x0a
    4552:	8b 85       	ldd	r24, Y+11	; 0x0b
    4554:	9c 85       	ldd	r25, Y+12	; 0x0c
    4556:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <getFirstSector>
    455a:	6d 83       	std	Y+5, r22	; 0x05
    455c:	7e 83       	std	Y+6, r23	; 0x06
    455e:	8f 83       	std	Y+7, r24	; 0x07
    4560:	98 87       	std	Y+8, r25	; 0x08

   for(sector = 0; sector < sectorPerCluster; sector++)
    4562:	80 91 69 50 	lds	r24, 0x5069
    4566:	90 91 6a 50 	lds	r25, 0x506A
    456a:	00 97       	sbiw	r24, 0x00	; 0
    456c:	09 f4       	brne	.+2      	; 0x4570 <findFiles+0x88>
    456e:	13 c1       	rjmp	.+550    	; 0x4796 <findFiles+0x2ae>
    4570:	44 24       	eor	r4, r4
    4572:	55 24       	eor	r5, r5
    4574:	32 01       	movw	r6, r4
    4576:	1c 2d       	mov	r17, r12
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4578:	8d 81       	ldd	r24, Y+5	; 0x05
    457a:	9e 81       	ldd	r25, Y+6	; 0x06
    457c:	af 81       	ldd	r26, Y+7	; 0x07
    457e:	b8 85       	ldd	r27, Y+8	; 0x08
    4580:	84 0d       	add	r24, r4
    4582:	95 1d       	adc	r25, r5
    4584:	a6 1d       	adc	r26, r6
    4586:	b7 1d       	adc	r27, r7
    4588:	89 83       	std	Y+1, r24	; 0x01
    458a:	9a 83       	std	Y+2, r25	; 0x02
    458c:	ab 83       	std	Y+3, r26	; 0x03
    458e:	bc 83       	std	Y+4, r27	; 0x04
    4590:	bc 01       	movw	r22, r24
    4592:	cd 01       	movw	r24, r26
    4594:	4d 2d       	mov	r20, r13
    4596:	59 2d       	mov	r21, r9
    4598:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    459c:	80 91 55 40 	lds	r24, 0x4055
    45a0:	90 91 56 40 	lds	r25, 0x4056
    45a4:	00 97       	sbiw	r24, 0x00	; 0
    45a6:	09 f4       	brne	.+2      	; 0x45aa <findFiles+0xc2>
    45a8:	e4 c0       	rjmp	.+456    	; 0x4772 <findFiles+0x28a>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    45aa:	d1 01       	movw	r26, r2
    45ac:	8c 91       	ld	r24, X
    45ae:	88 23       	and	r24, r24
    45b0:	09 f4       	brne	.+2      	; 0x45b4 <findFiles+0xcc>
    45b2:	10 c1       	rjmp	.+544    	; 0x47d4 <findFiles+0x2ec>
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    45b4:	4d 2d       	mov	r20, r13
    45b6:	59 2d       	mov	r21, r9
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    45b8:	20 e0       	ldi	r18, 0x00	; 0
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	08 c0       	rjmp	.+16     	; 0x45ce <findFiles+0xe6>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    45be:	a9 01       	movw	r20, r18
    45c0:	48 5b       	subi	r20, 0xB8	; 184
    45c2:	51 4c       	sbci	r21, 0xC1	; 193

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    45c4:	fa 01       	movw	r30, r20
    45c6:	80 81       	ld	r24, Z
    45c8:	88 23       	and	r24, r24
    45ca:	09 f4       	brne	.+2      	; 0x45ce <findFiles+0xe6>
    45cc:	06 c1       	rjmp	.+524    	; 0x47da <findFiles+0x2f2>
		{
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    45ce:	85 3e       	cpi	r24, 0xE5	; 229
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <findFiles+0xec>
    45d2:	c5 c0       	rjmp	.+394    	; 0x475e <findFiles+0x276>
    45d4:	da 01       	movw	r26, r20
    45d6:	1b 96       	adiw	r26, 0x0b	; 11
    45d8:	8c 91       	ld	r24, X
    45da:	1b 97       	sbiw	r26, 0x0b	; 11
    45dc:	8f 30       	cpi	r24, 0x0F	; 15
    45de:	09 f4       	brne	.+2      	; 0x45e2 <findFiles+0xfa>
    45e0:	be c0       	rjmp	.+380    	; 0x475e <findFiles+0x276>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    45e2:	12 30       	cpi	r17, 0x02	; 2
    45e4:	08 f0       	brcs	.+2      	; 0x45e8 <findFiles+0x100>
    45e6:	fc c0       	rjmp	.+504    	; 0x47e0 <findFiles+0x2f8>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    45e8:	9c 91       	ld	r25, X
    45ea:	f7 01       	movw	r30, r14
    45ec:	80 81       	ld	r24, Z
    45ee:	98 17       	cp	r25, r24
    45f0:	09 f0       	breq	.+2      	; 0x45f4 <findFiles+0x10c>
    45f2:	b5 c0       	rjmp	.+362    	; 0x475e <findFiles+0x276>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    45f4:	fa 01       	movw	r30, r20
    45f6:	31 96       	adiw	r30, 0x01	; 1
    45f8:	d5 01       	movw	r26, r10
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	ba 01       	movw	r22, r20
            if(dir->name[j] != fileName[j]) break;
    45fe:	41 91       	ld	r20, Z+
    4600:	9d 91       	ld	r25, X+
    4602:	49 17       	cp	r20, r25
    4604:	31 f4       	brne	.+12     	; 0x4612 <findFiles+0x12a>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    4606:	8f 5f       	subi	r24, 0xFF	; 255
    4608:	8b 30       	cpi	r24, 0x0B	; 11
    460a:	c9 f7       	brne	.-14     	; 0x45fe <findFiles+0x116>
    460c:	8b 01       	movw	r16, r22
    460e:	6b 01       	movw	r12, r22
    4610:	05 c0       	rjmp	.+10     	; 0x461c <findFiles+0x134>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    4612:	8b 30       	cpi	r24, 0x0B	; 11
    4614:	09 f0       	breq	.+2      	; 0x4618 <findFiles+0x130>
    4616:	a3 c0       	rjmp	.+326    	; 0x475e <findFiles+0x276>
    4618:	8b 01       	movw	r16, r22
    461a:	6b 01       	movw	r12, r22
			{
			  if(flag == GET_FILE)
    461c:	f1 e0       	ldi	r31, 0x01	; 1
    461e:	8f 16       	cp	r8, r31
    4620:	09 f0       	breq	.+2      	; 0x4624 <findFiles+0x13c>
    4622:	41 c0       	rjmp	.+130    	; 0x46a6 <findFiles+0x1be>
              {
			    appendFileSector = firstSector + sector;
    4624:	89 81       	ldd	r24, Y+1	; 0x01
    4626:	9a 81       	ldd	r25, Y+2	; 0x02
    4628:	ab 81       	ldd	r26, Y+3	; 0x03
    462a:	bc 81       	ldd	r27, Y+4	; 0x04
    462c:	80 93 a2 50 	sts	0x50A2, r24
    4630:	90 93 a3 50 	sts	0x50A3, r25
    4634:	a0 93 a4 50 	sts	0x50A4, r26
    4638:	b0 93 a5 50 	sts	0x50A5, r27
				appendFileLocation = i;
    463c:	c9 01       	movw	r24, r18
    463e:	a0 e0       	ldi	r26, 0x00	; 0
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	80 93 49 40 	sts	0x4049, r24
    4646:	90 93 4a 40 	sts	0x404A, r25
    464a:	a0 93 4b 40 	sts	0x404B, r26
    464e:	b0 93 4c 40 	sts	0x404C, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    4652:	d6 01       	movw	r26, r12
    4654:	54 96       	adiw	r26, 0x14	; 20
    4656:	4d 91       	ld	r20, X+
    4658:	5c 91       	ld	r21, X
    465a:	55 97       	sbiw	r26, 0x15	; 21
    465c:	60 e0       	ldi	r22, 0x00	; 0
    465e:	70 e0       	ldi	r23, 0x00	; 0
    4660:	ba 01       	movw	r22, r20
    4662:	55 27       	eor	r21, r21
    4664:	44 27       	eor	r20, r20
    4666:	5a 96       	adiw	r26, 0x1a	; 26
    4668:	8d 91       	ld	r24, X+
    466a:	9c 91       	ld	r25, X
    466c:	5b 97       	sbiw	r26, 0x1b	; 27
    466e:	a0 e0       	ldi	r26, 0x00	; 0
    4670:	b0 e0       	ldi	r27, 0x00	; 0
    4672:	84 2b       	or	r24, r20
    4674:	95 2b       	or	r25, r21
    4676:	a6 2b       	or	r26, r22
    4678:	b7 2b       	or	r27, r23
    467a:	80 93 73 50 	sts	0x5073, r24
    467e:	90 93 74 50 	sts	0x5074, r25
    4682:	a0 93 75 50 	sts	0x5075, r26
    4686:	b0 93 76 50 	sts	0x5076, r27
				fileSize = dir->fileSize;
    468a:	f6 01       	movw	r30, r12
    468c:	84 8d       	ldd	r24, Z+28	; 0x1c
    468e:	95 8d       	ldd	r25, Z+29	; 0x1d
    4690:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4692:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4694:	80 93 51 40 	sts	0x4051, r24
    4698:	90 93 52 40 	sts	0x4052, r25
    469c:	a0 93 53 40 	sts	0x4053, r26
    46a0:	b0 93 54 40 	sts	0x4054, r27
			    return (dir);
    46a4:	a5 c0       	rjmp	.+330    	; 0x47f0 <findFiles+0x308>
			  }	
			  else    //when flag = DELETE
			  {
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    46a6:	d6 01       	movw	r26, r12
    46a8:	54 96       	adiw	r26, 0x14	; 20
    46aa:	8d 91       	ld	r24, X+
    46ac:	9c 91       	ld	r25, X
    46ae:	55 97       	sbiw	r26, 0x15	; 21
    46b0:	a0 e0       	ldi	r26, 0x00	; 0
    46b2:	b0 e0       	ldi	r27, 0x00	; 0
    46b4:	3c 01       	movw	r6, r24
    46b6:	55 24       	eor	r5, r5
    46b8:	44 24       	eor	r4, r4
    46ba:	f6 01       	movw	r30, r12
    46bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    46be:	93 8d       	ldd	r25, Z+27	; 0x1b
    46c0:	a0 e0       	ldi	r26, 0x00	; 0
    46c2:	b0 e0       	ldi	r27, 0x00	; 0
    46c4:	48 2a       	or	r4, r24
    46c6:	59 2a       	or	r5, r25
    46c8:	6a 2a       	or	r6, r26
    46ca:	7b 2a       	or	r7, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    46cc:	85 ee       	ldi	r24, 0xE5	; 229
    46ce:	80 83       	st	Z, r24
				 SD_write_block (firstSector+sector,SDBuffer,512);
    46d0:	69 81       	ldd	r22, Y+1	; 0x01
    46d2:	7a 81       	ldd	r23, Y+2	; 0x02
    46d4:	8b 81       	ldd	r24, Y+3	; 0x03
    46d6:	9c 81       	ldd	r25, Y+4	; 0x04
    46d8:	48 e4       	ldi	r20, 0x48	; 72
    46da:	5e e3       	ldi	r21, 0x3E	; 62
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	32 e0       	ldi	r19, 0x02	; 2
    46e0:	0e 94 9f 28 	call	0x513e	; 0x513e <SD_write_block>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    46e4:	d6 01       	movw	r26, r12
    46e6:	5c 96       	adiw	r26, 0x1c	; 28
    46e8:	4d 91       	ld	r20, X+
    46ea:	5d 91       	ld	r21, X+
    46ec:	6d 91       	ld	r22, X+
    46ee:	7c 91       	ld	r23, X
    46f0:	5f 97       	sbiw	r26, 0x1f	; 31
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	0e 94 06 22 	call	0x440c	; 0x440c <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    46f8:	82 e0       	ldi	r24, 0x02	; 2
    46fa:	60 e0       	ldi	r22, 0x00	; 0
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	a9 01       	movw	r20, r18
    4702:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <getSetFreeCluster>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
				 if(firstCluster < cluster)
    470a:	48 16       	cp	r4, r24
    470c:	59 06       	cpc	r5, r25
    470e:	6a 06       	cpc	r6, r26
    4710:	7b 06       	cpc	r7, r27
    4712:	30 f4       	brcc	.+12     	; 0x4720 <findFiles+0x238>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    4714:	82 e0       	ldi	r24, 0x02	; 2
    4716:	61 e0       	ldi	r22, 0x01	; 1
    4718:	a3 01       	movw	r20, r6
    471a:	92 01       	movw	r18, r4
    471c:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    4720:	c3 01       	movw	r24, r6
    4722:	b2 01       	movw	r22, r4
    4724:	40 e0       	ldi	r20, 0x00	; 0
    4726:	00 e0       	ldi	r16, 0x00	; 0
    4728:	10 e0       	ldi	r17, 0x00	; 0
    472a:	98 01       	movw	r18, r16
    472c:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
    4730:	6b 01       	movw	r12, r22
    4732:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    4734:	c3 01       	movw	r24, r6
    4736:	b2 01       	movw	r22, r4
    4738:	41 e0       	ldi	r20, 0x01	; 1
    473a:	00 e0       	ldi	r16, 0x00	; 0
    473c:	10 e0       	ldi	r17, 0x00	; 0
    473e:	98 01       	movw	r18, r16
    4740:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    4744:	b7 ef       	ldi	r27, 0xF7	; 247
    4746:	cb 16       	cp	r12, r27
    4748:	bf ef       	ldi	r27, 0xFF	; 255
    474a:	db 06       	cpc	r13, r27
    474c:	bf ef       	ldi	r27, 0xFF	; 255
    474e:	eb 06       	cpc	r14, r27
    4750:	bf e0       	ldi	r27, 0x0F	; 15
    4752:	fb 06       	cpc	r15, r27
    4754:	08 f0       	brcs	.+2      	; 0x4758 <findFiles+0x270>
    4756:	47 c0       	rjmp	.+142    	; 0x47e6 <findFiles+0x2fe>
					   {//file deleted
						   return 0;}
					firstCluster = nextCluster;
    4758:	26 01       	movw	r4, r12
    475a:	37 01       	movw	r6, r14
    475c:	e1 cf       	rjmp	.-62     	; 0x4720 <findFiles+0x238>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    475e:	20 5e       	subi	r18, 0xE0	; 224
    4760:	3f 4f       	sbci	r19, 0xFF	; 255
    4762:	80 91 55 40 	lds	r24, 0x4055
    4766:	90 91 56 40 	lds	r25, 0x4056
    476a:	28 17       	cp	r18, r24
    476c:	39 07       	cpc	r19, r25
    476e:	08 f4       	brcc	.+2      	; 0x4772 <findFiles+0x28a>
    4770:	26 cf       	rjmp	.-436    	; 0x45be <findFiles+0xd6>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    4772:	08 94       	sec
    4774:	41 1c       	adc	r4, r1
    4776:	51 1c       	adc	r5, r1
    4778:	61 1c       	adc	r6, r1
    477a:	71 1c       	adc	r7, r1
    477c:	80 91 69 50 	lds	r24, 0x5069
    4780:	90 91 6a 50 	lds	r25, 0x506A
    4784:	a0 e0       	ldi	r26, 0x00	; 0
    4786:	b0 e0       	ldi	r27, 0x00	; 0
    4788:	48 16       	cp	r4, r24
    478a:	59 06       	cpc	r5, r25
    478c:	6a 06       	cpc	r6, r26
    478e:	7b 06       	cpc	r7, r27
    4790:	08 f4       	brcc	.+2      	; 0x4794 <findFiles+0x2ac>
    4792:	f2 ce       	rjmp	.-540    	; 0x4578 <findFiles+0x90>
    4794:	c1 2e       	mov	r12, r17
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    4796:	69 85       	ldd	r22, Y+9	; 0x09
    4798:	7a 85       	ldd	r23, Y+10	; 0x0a
    479a:	8b 85       	ldd	r24, Y+11	; 0x0b
    479c:	9c 85       	ldd	r25, Y+12	; 0x0c
    479e:	40 e0       	ldi	r20, 0x00	; 0
    47a0:	00 e0       	ldi	r16, 0x00	; 0
    47a2:	10 e0       	ldi	r17, 0x00	; 0
    47a4:	98 01       	movw	r18, r16
    47a6:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
    47aa:	69 87       	std	Y+9, r22	; 0x09
    47ac:	7a 87       	std	Y+10, r23	; 0x0a
    47ae:	8b 87       	std	Y+11, r24	; 0x0b
    47b0:	9c 87       	std	Y+12, r25	; 0x0c

   if(cluster > 0x0ffffff6)
    47b2:	67 3f       	cpi	r22, 0xF7	; 247
    47b4:	ef ef       	ldi	r30, 0xFF	; 255
    47b6:	7e 07       	cpc	r23, r30
    47b8:	ef ef       	ldi	r30, 0xFF	; 255
    47ba:	8e 07       	cpc	r24, r30
    47bc:	ef e0       	ldi	r30, 0x0F	; 15
    47be:	9e 07       	cpc	r25, r30
    47c0:	a8 f4       	brcc	.+42     	; 0x47ec <findFiles+0x304>
   	 return 0;
   if(cluster == 0) 
    47c2:	61 15       	cp	r22, r1
    47c4:	71 05       	cpc	r23, r1
    47c6:	81 05       	cpc	r24, r1
    47c8:	91 05       	cpc	r25, r1
    47ca:	09 f0       	breq	.+2      	; 0x47ce <findFiles+0x2e6>
    47cc:	c0 ce       	rjmp	.-640    	; 0x454e <findFiles+0x66>
   {//error in getting cluster
	   return 0;}
    47ce:	00 e0       	ldi	r16, 0x00	; 0
    47d0:	10 e0       	ldi	r17, 0x00	; 0
    47d2:	0e c0       	rjmp	.+28     	; 0x47f0 <findFiles+0x308>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  return 0;   
    47d4:	00 e0       	ldi	r16, 0x00	; 0
    47d6:	10 e0       	ldi	r17, 0x00	; 0
    47d8:	0b c0       	rjmp	.+22     	; 0x47f0 <findFiles+0x308>
    47da:	00 e0       	ldi	r16, 0x00	; 0
    47dc:	10 e0       	ldi	r17, 0x00	; 0
    47de:	08 c0       	rjmp	.+16     	; 0x47f0 <findFiles+0x308>
			  }
            }
          }
          else  //invalid flag
		  {
			  return 0;
    47e0:	00 e0       	ldi	r16, 0x00	; 0
    47e2:	10 e0       	ldi	r17, 0x00	; 0
    47e4:	05 c0       	rjmp	.+10     	; 0x47f0 <findFiles+0x308>
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {//file deleted
						   return 0;}
    47e6:	00 e0       	ldi	r16, 0x00	; 0
    47e8:	10 e0       	ldi	r17, 0x00	; 0
    47ea:	02 c0       	rjmp	.+4      	; 0x47f0 <findFiles+0x308>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    47ec:	00 e0       	ldi	r16, 0x00	; 0
    47ee:	10 e0       	ldi	r17, 0x00	; 0
   if(cluster == 0) 
   {//error in getting cluster
	   return 0;}
 }
return 0;
}
    47f0:	80 2f       	mov	r24, r16
    47f2:	91 2f       	mov	r25, r17
    47f4:	2c 96       	adiw	r28, 0x0c	; 12
    47f6:	cd bf       	out	0x3d, r28	; 61
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	df 91       	pop	r29
    47fc:	cf 91       	pop	r28
    47fe:	1f 91       	pop	r17
    4800:	0f 91       	pop	r16
    4802:	ff 90       	pop	r15
    4804:	ef 90       	pop	r14
    4806:	df 90       	pop	r13
    4808:	cf 90       	pop	r12
    480a:	bf 90       	pop	r11
    480c:	af 90       	pop	r10
    480e:	9f 90       	pop	r9
    4810:	8f 90       	pop	r8
    4812:	7f 90       	pop	r7
    4814:	6f 90       	pop	r6
    4816:	5f 90       	pop	r5
    4818:	4f 90       	pop	r4
    481a:	3f 90       	pop	r3
    481c:	2f 90       	pop	r2
    481e:	08 95       	ret

00004820 <deleteFile>:
//********************************************************************
void deleteFile (unsigned char *fileName)
{
  unsigned char error;

  error = convertFileName (fileName);
    4820:	0e 94 94 20 	call	0x4128	; 0x4128 <convertFileName>
  if(error) return;
    4824:	88 23       	and	r24, r24
    4826:	29 f4       	brne	.+10     	; 0x4832 <deleteFile+0x12>

  findFiles (DELETE, Filename);
    4828:	82 e0       	ldi	r24, 0x02	; 2
    482a:	61 e9       	ldi	r22, 0x91	; 145
    482c:	70 e5       	ldi	r23, 0x50	; 80
    482e:	0e 94 74 22 	call	0x44e8	; 0x44e8 <findFiles>
    4832:	08 95       	ret

00004834 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    4834:	4f 92       	push	r4
    4836:	5f 92       	push	r5
    4838:	6f 92       	push	r6
    483a:	7f 92       	push	r7
    483c:	af 92       	push	r10
    483e:	bf 92       	push	r11
    4840:	cf 92       	push	r12
    4842:	df 92       	push	r13
    4844:	ef 92       	push	r14
    4846:	ff 92       	push	r15
    4848:	0f 93       	push	r16
    484a:	1f 93       	push	r17
    484c:	cf 93       	push	r28
    484e:	c8 2f       	mov	r28, r24
    4850:	cb 01       	movw	r24, r22
unsigned long cluster, firstSector;
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    4852:	0e 94 94 20 	call	0x4128	; 0x4128 <convertFileName>
if(error) return 2;
    4856:	88 23       	and	r24, r24
    4858:	09 f0       	breq	.+2      	; 0x485c <readFile+0x28>
    485a:	57 c0       	rjmp	.+174    	; 0x490a <readFile+0xd6>

dir = findFiles (GET_FILE, Filename); //get the file location
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	61 e9       	ldi	r22, 0x91	; 145
    4860:	70 e5       	ldi	r23, 0x50	; 80
    4862:	0e 94 74 22 	call	0x44e8	; 0x44e8 <findFiles>
    4866:	fc 01       	movw	r30, r24
if(dir == 0) 
    4868:	00 97       	sbiw	r24, 0x00	; 0
    486a:	31 f4       	brne	.+12     	; 0x4878 <readFile+0x44>
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	cc 23       	and	r28, r28
    4870:	09 f4       	brne	.+2      	; 0x4874 <readFile+0x40>
    4872:	4e c0       	rjmp	.+156    	; 0x4910 <readFile+0xdc>
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	4c c0       	rjmp	.+152    	; 0x4910 <readFile+0xdc>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    4878:	c1 30       	cpi	r28, 0x01	; 1
    487a:	09 f4       	brne	.+2      	; 0x487e <readFile+0x4a>
    487c:	48 c0       	rjmp	.+144    	; 0x490e <readFile+0xda>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    487e:	44 88       	ldd	r4, Z+20	; 0x14
    4880:	55 88       	ldd	r5, Z+21	; 0x15
    4882:	66 24       	eor	r6, r6
    4884:	77 24       	eor	r7, r7
    4886:	32 01       	movw	r6, r4
    4888:	55 24       	eor	r5, r5
    488a:	44 24       	eor	r4, r4
    488c:	82 8d       	ldd	r24, Z+26	; 0x1a
    488e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4890:	a0 e0       	ldi	r26, 0x00	; 0
    4892:	b0 e0       	ldi	r27, 0x00	; 0
    4894:	48 2a       	or	r4, r24
    4896:	59 2a       	or	r5, r25
    4898:	6a 2a       	or	r6, r26
    489a:	7b 2a       	or	r7, r27
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    489c:	0f 2e       	mov	r0, r31
    489e:	fc ea       	ldi	r31, 0xAC	; 172
    48a0:	af 2e       	mov	r10, r31
    48a2:	f1 e2       	ldi	r31, 0x21	; 33
    48a4:	bf 2e       	mov	r11, r31
    48a6:	f0 2d       	mov	r31, r0
//fileSize = dir->fileSize;


while(1)
{
  firstSector = getFirstSector (cluster);
    48a8:	c3 01       	movw	r24, r6
    48aa:	b2 01       	movw	r22, r4
    48ac:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <getFirstSector>
    48b0:	6b 01       	movw	r12, r22
    48b2:	7c 01       	movw	r14, r24

  for(j=0; j<sectorPerCluster; j++)
    48b4:	80 91 69 50 	lds	r24, 0x5069
    48b8:	90 91 6a 50 	lds	r25, 0x506A
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	a1 f0       	breq	.+40     	; 0x48e8 <readFile+0xb4>
    48c0:	c0 e0       	ldi	r28, 0x00	; 0
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    48c2:	c7 01       	movw	r24, r14
    48c4:	b6 01       	movw	r22, r12
    48c6:	6c 0f       	add	r22, r28
    48c8:	71 1d       	adc	r23, r1
    48ca:	81 1d       	adc	r24, r1
    48cc:	91 1d       	adc	r25, r1
    48ce:	a5 01       	movw	r20, r10
    48d0:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    48d4:	cf 5f       	subi	r28, 0xFF	; 255
    48d6:	80 91 69 50 	lds	r24, 0x5069
    48da:	90 91 6a 50 	lds	r25, 0x506A
    48de:	2c 2f       	mov	r18, r28
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	28 17       	cp	r18, r24
    48e4:	39 07       	cpc	r19, r25
    48e6:	68 f3       	brcs	.-38     	; 0x48c2 <readFile+0x8e>
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
	*/
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    48e8:	c3 01       	movw	r24, r6
    48ea:	b2 01       	movw	r22, r4
    48ec:	40 e0       	ldi	r20, 0x00	; 0
    48ee:	00 e0       	ldi	r16, 0x00	; 0
    48f0:	10 e0       	ldi	r17, 0x00	; 0
    48f2:	98 01       	movw	r18, r16
    48f4:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
    48f8:	2b 01       	movw	r4, r22
    48fa:	3c 01       	movw	r6, r24
  if(cluster == 0) {//Error in getting cluster
    48fc:	61 15       	cp	r22, r1
    48fe:	71 05       	cpc	r23, r1
    4900:	81 05       	cpc	r24, r1
    4902:	91 05       	cpc	r25, r1
    4904:	89 f6       	brne	.-94     	; 0x48a8 <readFile+0x74>
	  return 0;}
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	03 c0       	rjmp	.+6      	; 0x4910 <readFile+0xdc>
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    490a:	82 e0       	ldi	r24, 0x02	; 2
    490c:	01 c0       	rjmp	.+2      	; 0x4910 <readFile+0xdc>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    490e:	81 e0       	ldi	r24, 0x01	; 1
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {//Error in getting cluster
	  return 0;}
}
return 0;
}
    4910:	cf 91       	pop	r28
    4912:	1f 91       	pop	r17
    4914:	0f 91       	pop	r16
    4916:	ff 90       	pop	r15
    4918:	ef 90       	pop	r14
    491a:	df 90       	pop	r13
    491c:	cf 90       	pop	r12
    491e:	bf 90       	pop	r11
    4920:	af 90       	pop	r10
    4922:	7f 90       	pop	r7
    4924:	6f 90       	pop	r6
    4926:	5f 90       	pop	r5
    4928:	4f 90       	pop	r4
    492a:	08 95       	ret

0000492c <writeFile>:
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
    492c:	2f 92       	push	r2
    492e:	3f 92       	push	r3
    4930:	4f 92       	push	r4
    4932:	5f 92       	push	r5
    4934:	6f 92       	push	r6
    4936:	7f 92       	push	r7
    4938:	8f 92       	push	r8
    493a:	9f 92       	push	r9
    493c:	af 92       	push	r10
    493e:	bf 92       	push	r11
    4940:	cf 92       	push	r12
    4942:	df 92       	push	r13
    4944:	ef 92       	push	r14
    4946:	ff 92       	push	r15
    4948:	0f 93       	push	r16
    494a:	1f 93       	push	r17
    494c:	cf 93       	push	r28
    494e:	df 93       	push	r29
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
    4954:	60 97       	sbiw	r28, 0x10	; 16
    4956:	cd bf       	out	0x3d, r28	; 61
    4958:	de bf       	out	0x3e, r29	; 62
    495a:	fc 01       	movw	r30, r24
    495c:	6d 83       	std	Y+5, r22	; 0x05
    495e:	7e 83       	std	Y+6, r23	; 0x06
    4960:	49 01       	movw	r8, r18
    4962:	5a 01       	movw	r10, r20
unsigned int firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;


j = readFile (VERIFY, fileName);
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	bf 01       	movw	r22, r30
    4968:	0e 94 1a 24 	call	0x4834	; 0x4834 <readFile>

if(j == 1) 
    496c:	81 30       	cpi	r24, 0x01	; 1
    496e:	09 f0       	breq	.+2      	; 0x4972 <writeFile+0x46>
    4970:	7b c0       	rjmp	.+246    	; 0x4a68 <writeFile+0x13c>
{
  //File already exists, appending data
  appendFile = 1;
  //set cluster to write to as the first cluster of the file
  cluster = appendStartCluster;
    4972:	00 91 73 50 	lds	r16, 0x5073
    4976:	10 91 74 50 	lds	r17, 0x5074
    497a:	20 91 75 50 	lds	r18, 0x5075
    497e:	30 91 76 50 	lds	r19, 0x5076
    4982:	09 83       	std	Y+1, r16	; 0x01
    4984:	1a 83       	std	Y+2, r17	; 0x02
    4986:	2b 83       	std	Y+3, r18	; 0x03
    4988:	3c 83       	std	Y+4, r19	; 0x04
  clusterCount=0;
    498a:	cc 24       	eor	r12, r12
    498c:	dd 24       	eor	r13, r13
    498e:	76 01       	movw	r14, r12
    4990:	24 01       	movw	r4, r8
    4992:	35 01       	movw	r6, r10
    4994:	48 01       	movw	r8, r16
    4996:	59 01       	movw	r10, r18
  //iterate through the clusters in the file until the last incomplete cluster is found and set that to cluster
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    4998:	c5 01       	movw	r24, r10
    499a:	b4 01       	movw	r22, r8
    499c:	40 e0       	ldi	r20, 0x00	; 0
    499e:	00 e0       	ldi	r16, 0x00	; 0
    49a0:	10 e0       	ldi	r17, 0x00	; 0
    49a2:	98 01       	movw	r18, r16
    49a4:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
    49a8:	dc 01       	movw	r26, r24
    49aa:	cb 01       	movw	r24, r22
    if(nextCluster == EOF) break;
    49ac:	8f 3f       	cpi	r24, 0xFF	; 255
    49ae:	1f ef       	ldi	r17, 0xFF	; 255
    49b0:	91 07       	cpc	r25, r17
    49b2:	1f ef       	ldi	r17, 0xFF	; 255
    49b4:	a1 07       	cpc	r26, r17
    49b6:	1f ef       	ldi	r17, 0xFF	; 255
    49b8:	b1 07       	cpc	r27, r17
    49ba:	41 f0       	breq	.+16     	; 0x49cc <writeFile+0xa0>
	cluster = nextCluster;
	clusterCount++;
    49bc:	08 94       	sec
    49be:	c1 1c       	adc	r12, r1
    49c0:	d1 1c       	adc	r13, r1
    49c2:	e1 1c       	adc	r14, r1
    49c4:	f1 1c       	adc	r15, r1
  //iterate through the clusters in the file until the last incomplete cluster is found and set that to cluster
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    49c6:	4c 01       	movw	r8, r24
    49c8:	5d 01       	movw	r10, r26
	clusterCount++;
  }
    49ca:	e6 cf       	rjmp	.-52     	; 0x4998 <writeFile+0x6c>
    49cc:	89 82       	std	Y+1, r8	; 0x01
    49ce:	9a 82       	std	Y+2, r9	; 0x02
    49d0:	ab 82       	std	Y+3, r10	; 0x03
    49d2:	bc 82       	std	Y+4, r11	; 0x04
    49d4:	53 01       	movw	r10, r6
    49d6:	42 01       	movw	r8, r4
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    49d8:	20 91 69 50 	lds	r18, 0x5069
    49dc:	30 91 6a 50 	lds	r19, 0x506A
    49e0:	80 91 55 40 	lds	r24, 0x4055
    49e4:	90 91 56 40 	lds	r25, 0x4056
    49e8:	60 90 55 40 	lds	r6, 0x4055
    49ec:	70 90 56 40 	lds	r7, 0x4056
    49f0:	bc 01       	movw	r22, r24
    49f2:	80 e0       	ldi	r24, 0x00	; 0
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	40 e0       	ldi	r20, 0x00	; 0
    49f8:	50 e0       	ldi	r21, 0x00	; 0
    49fa:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    49fe:	a7 01       	movw	r20, r14
    4a00:	96 01       	movw	r18, r12
    4a02:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	40 91 51 40 	lds	r20, 0x4051
    4a0e:	50 91 52 40 	lds	r21, 0x4052
    4a12:	60 91 53 40 	lds	r22, 0x4053
    4a16:	70 91 54 40 	lds	r23, 0x4054
    4a1a:	8a 01       	movw	r16, r20
    4a1c:	9b 01       	movw	r18, r22
    4a1e:	08 1b       	sub	r16, r24
    4a20:	19 0b       	sbc	r17, r25
    4a22:	2a 0b       	sbc	r18, r26
    4a24:	3b 0b       	sbc	r19, r27
    4a26:	c9 01       	movw	r24, r18
    4a28:	b8 01       	movw	r22, r16
    4a2a:	93 01       	movw	r18, r6
    4a2c:	40 e0       	ldi	r20, 0x00	; 0
    4a2e:	50 e0       	ldi	r21, 0x00	; 0
    4a30:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    4a34:	02 2f       	mov	r16, r18

//start writing data here

if(start){
  start = 0;
  startBlock = getFirstSector (cluster) + sector;
    4a36:	69 81       	ldd	r22, Y+1	; 0x01
    4a38:	7a 81       	ldd	r23, Y+2	; 0x02
    4a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a3e:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <getFirstSector>
    4a42:	dc 01       	movw	r26, r24
    4a44:	cb 01       	movw	r24, r22
    4a46:	20 2e       	mov	r2, r16
    4a48:	33 24       	eor	r3, r3
    4a4a:	28 0e       	add	r2, r24
    4a4c:	39 1e       	adc	r3, r25
  SD_read_block (startBlock,SDBuffer);
    4a4e:	b1 01       	movw	r22, r2
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	48 e4       	ldi	r20, 0x48	; 72
    4a56:	5e e3       	ldi	r21, 0x3E	; 62
    4a58:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
//unsigned char error, data;
unsigned int firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
    4a5c:	1f 86       	std	Y+15, r1	; 0x0f
    4a5e:	18 8a       	std	Y+16, r1	; 0x10
    4a60:	19 86       	std	Y+9, r1	; 0x09
    4a62:	1a 86       	std	Y+10, r1	; 0x0a
	cluster = nextCluster;
	clusterCount++;
  }
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    4a64:	11 e0       	ldi	r17, 0x01	; 1
    4a66:	4c c0       	rjmp	.+152    	; 0x4b00 <writeFile+0x1d4>
}
else if(j == 2) 
    4a68:	82 30       	cpi	r24, 0x02	; 2
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <writeFile+0x142>
    4a6c:	0c c2       	rjmp	.+1048   	; 0x4e86 <writeFile+0x55a>

else
{
 //Creating File

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    4a6e:	82 e0       	ldi	r24, 0x02	; 2
    4a70:	60 e0       	ldi	r22, 0x00	; 0
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	a9 01       	movw	r20, r18
    4a78:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <getSetFreeCluster>
  if(cluster > totalClusters)
    4a7c:	00 91 58 40 	lds	r16, 0x4058
    4a80:	10 91 59 40 	lds	r17, 0x4059
    4a84:	20 91 5a 40 	lds	r18, 0x405A
    4a88:	30 91 5b 40 	lds	r19, 0x405B
    4a8c:	06 17       	cp	r16, r22
    4a8e:	17 07       	cpc	r17, r23
    4a90:	28 07       	cpc	r18, r24
    4a92:	39 07       	cpc	r19, r25
    4a94:	40 f4       	brcc	.+16     	; 0x4aa6 <writeFile+0x17a>
     cluster = rootCluster;
    4a96:	60 91 5d 40 	lds	r22, 0x405D
    4a9a:	70 91 5e 40 	lds	r23, 0x405E
    4a9e:	80 91 5f 40 	lds	r24, 0x405F
    4aa2:	90 91 60 40 	lds	r25, 0x4060

  cluster = searchNextFreeCluster(cluster);
    4aa6:	0e 94 53 21 	call	0x42a6	; 0x42a6 <searchNextFreeCluster>
    4aaa:	69 83       	std	Y+1, r22	; 0x01
    4aac:	7a 83       	std	Y+2, r23	; 0x02
    4aae:	8b 83       	std	Y+3, r24	; 0x03
    4ab0:	9c 83       	std	Y+4, r25	; 0x04
   if(cluster == 0)
    4ab2:	61 15       	cp	r22, r1
    4ab4:	71 05       	cpc	r23, r1
    4ab6:	81 05       	cpc	r24, r1
    4ab8:	91 05       	cpc	r25, r1
    4aba:	09 f4       	brne	.+2      	; 0x4abe <writeFile+0x192>
    4abc:	e6 c1       	rjmp	.+972    	; 0x4e8a <writeFile+0x55e>
   {
	   // No free cluster!
	  return 2;
   }
  getSetNextCluster(cluster, SET, EOF);   //set last cluster of the file, marked EOF
    4abe:	41 e0       	ldi	r20, 0x01	; 1
    4ac0:	0f ef       	ldi	r16, 0xFF	; 255
    4ac2:	1f ef       	ldi	r17, 0xFF	; 255
    4ac4:	98 01       	movw	r18, r16
    4ac6:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    4aca:	2b 81       	ldd	r18, Y+3	; 0x03
    4acc:	3c 81       	ldd	r19, Y+4	; 0x04
    4ace:	29 87       	std	Y+9, r18	; 0x09
    4ad0:	3a 87       	std	Y+10, r19	; 0x0a
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    4ad2:	89 81       	ldd	r24, Y+1	; 0x01
    4ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad6:	8f 87       	std	Y+15, r24	; 0x0f
    4ad8:	98 8b       	std	Y+16, r25	; 0x10
  fileSize = 0;
    4ada:	10 92 51 40 	sts	0x4051, r1
    4ade:	10 92 52 40 	sts	0x4052, r1
    4ae2:	10 92 53 40 	sts	0x4053, r1
    4ae6:	10 92 54 40 	sts	0x4054, r1
  startBlock = getFirstSector (cluster) + sector;
  SD_read_block (startBlock,SDBuffer);
  j = sector;
}
else{
  startBlock = getFirstSector (cluster);
    4aea:	69 81       	ldd	r22, Y+1	; 0x01
    4aec:	7a 81       	ldd	r23, Y+2	; 0x02
    4aee:	8b 81       	ldd	r24, Y+3	; 0x03
    4af0:	9c 81       	ldd	r25, Y+4	; 0x04
    4af2:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <getFirstSector>
    4af6:	dc 01       	movw	r26, r24
    4af8:	cb 01       	movw	r24, r22
    4afa:	1c 01       	movw	r2, r24
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    4afc:	10 e0       	ldi	r17, 0x00	; 0
  SD_read_block (startBlock,SDBuffer);
  j = sector;
}
else{
  startBlock = getFirstSector (cluster);
  j=0;
    4afe:	00 e0       	ldi	r16, 0x00	; 0
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
    4b00:	81 14       	cp	r8, r1
    4b02:	91 04       	cpc	r9, r1
    4b04:	a1 04       	cpc	r10, r1
    4b06:	b1 04       	cpc	r11, r1
    4b08:	09 f4       	brne	.+2      	; 0x4b0c <writeFile+0x1e0>
    4b0a:	8d c0       	rjmp	.+282    	; 0x4c26 <writeFile+0x2fa>
    4b0c:	44 24       	eor	r4, r4
    4b0e:	55 24       	eor	r5, r5
    4b10:	32 01       	movw	r6, r4
	//write 1 sector (512 bytes) to the cluster and increase file size by 512 bytes
	if(lengthOfData >= 512 ){
		 writtenData += 512;
		 dataToWrite = 512;
    4b12:	c0 2e       	mov	r12, r16
    4b14:	1b 87       	std	Y+11, r17	; 0x0b
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
	//write 1 sector (512 bytes) to the cluster and increase file size by 512 bytes
	if(lengthOfData >= 512 ){
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	89 16       	cp	r8, r25
    4b1a:	92 e0       	ldi	r25, 0x02	; 2
    4b1c:	99 06       	cpc	r9, r25
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	a9 06       	cpc	r10, r25
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	b9 06       	cpc	r11, r25
    4b26:	88 f0       	brcs	.+34     	; 0x4b4a <writeFile+0x21e>
		 writtenData += 512;
    4b28:	00 e0       	ldi	r16, 0x00	; 0
    4b2a:	12 e0       	ldi	r17, 0x02	; 2
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	40 0e       	add	r4, r16
    4b32:	51 1e       	adc	r5, r17
    4b34:	62 1e       	adc	r6, r18
    4b36:	73 1e       	adc	r7, r19
		 dataToWrite = 512;
		 lengthOfData -= 512;
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	9e ef       	ldi	r25, 0xFE	; 254
    4b3c:	af ef       	ldi	r26, 0xFF	; 255
    4b3e:	bf ef       	ldi	r27, 0xFF	; 255
    4b40:	88 0e       	add	r8, r24
    4b42:	99 1e       	adc	r9, r25
    4b44:	aa 1e       	adc	r10, r26
    4b46:	bb 1e       	adc	r11, r27
    4b48:	0c c0       	rjmp	.+24     	; 0x4b62 <writeFile+0x236>
	}
	else{
		writtenData += lengthOfData;
    4b4a:	48 0c       	add	r4, r8
    4b4c:	59 1c       	adc	r5, r9
    4b4e:	6a 1c       	adc	r6, r10
    4b50:	7b 1c       	adc	r7, r11
		dataToWrite = lengthOfData%512;
    4b52:	95 01       	movw	r18, r10
    4b54:	84 01       	movw	r16, r8
    4b56:	11 70       	andi	r17, 0x01	; 1
    4b58:	20 70       	andi	r18, 0x00	; 0
    4b5a:	30 70       	andi	r19, 0x00	; 0
		lengthOfData = 0;
    4b5c:	88 24       	eor	r8, r8
    4b5e:	99 24       	eor	r9, r9
    4b60:	54 01       	movw	r10, r8
	}		   
	fileSize += 512;	//always increment size of file by 512 to avoid losing data when appending to the file. Otherwise if there is data in an unfilled sector it will be overwritten.
    4b62:	80 91 51 40 	lds	r24, 0x4051
    4b66:	90 91 52 40 	lds	r25, 0x4052
    4b6a:	a0 91 53 40 	lds	r26, 0x4053
    4b6e:	b0 91 54 40 	lds	r27, 0x4054
    4b72:	80 50       	subi	r24, 0x00	; 0
    4b74:	9e 4f       	sbci	r25, 0xFE	; 254
    4b76:	af 4f       	sbci	r26, 0xFF	; 255
    4b78:	bf 4f       	sbci	r27, 0xFF	; 255
    4b7a:	80 93 51 40 	sts	0x4051, r24
    4b7e:	90 93 52 40 	sts	0x4052, r25
    4b82:	a0 93 53 40 	sts	0x4053, r26
    4b86:	b0 93 54 40 	sts	0x4054, r27
	SD_write_block (startBlock,dataArray+writtenData-dataToWrite,dataToWrite);
    4b8a:	b1 01       	movw	r22, r2
    4b8c:	80 e0       	ldi	r24, 0x00	; 0
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	a2 01       	movw	r20, r4
    4b92:	40 1b       	sub	r20, r16
    4b94:	51 0b       	sbc	r21, r17
    4b96:	ad 81       	ldd	r26, Y+5	; 0x05
    4b98:	be 81       	ldd	r27, Y+6	; 0x06
    4b9a:	4a 0f       	add	r20, r26
    4b9c:	5b 1f       	adc	r21, r27
    4b9e:	98 01       	movw	r18, r16
    4ba0:	0e 94 9f 28 	call	0x513e	; 0x513e <SD_write_block>
	j++;
    4ba4:	c3 94       	inc	r12
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
    4ba6:	20 91 69 50 	lds	r18, 0x5069
    4baa:	30 91 6a 50 	lds	r19, 0x506A
    4bae:	8c 2d       	mov	r24, r12
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	82 17       	cp	r24, r18
    4bb4:	93 07       	cpc	r25, r19
    4bb6:	29 f5       	brne	.+74     	; 0x4c02 <writeFile+0x2d6>
		j = 0; 
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    4bb8:	69 81       	ldd	r22, Y+1	; 0x01
    4bba:	7a 81       	ldd	r23, Y+2	; 0x02
    4bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc0:	0e 94 53 21 	call	0x42a6	; 0x42a6 <searchNextFreeCluster>
    4bc4:	6b 01       	movw	r12, r22
    4bc6:	7c 01       	movw	r14, r24
		if(cluster == 0){
    4bc8:	61 15       	cp	r22, r1
    4bca:	71 05       	cpc	r23, r1
    4bcc:	81 05       	cpc	r24, r1
    4bce:	91 05       	cpc	r25, r1
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <writeFile+0x2a8>
    4bd2:	5d c1       	rjmp	.+698    	; 0x4e8e <writeFile+0x562>
		  //No free cluster!
		  return 2;
	   }
		getSetNextCluster(prevCluster, SET, cluster);
    4bd4:	69 81       	ldd	r22, Y+1	; 0x01
    4bd6:	7a 81       	ldd	r23, Y+2	; 0x02
    4bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bda:	9c 81       	ldd	r25, Y+4	; 0x04
    4bdc:	41 e0       	ldi	r20, 0x01	; 1
    4bde:	97 01       	movw	r18, r14
    4be0:	86 01       	movw	r16, r12
    4be2:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    4be6:	c7 01       	movw	r24, r14
    4be8:	b6 01       	movw	r22, r12
    4bea:	41 e0       	ldi	r20, 0x01	; 1
    4bec:	0f ef       	ldi	r16, 0xFF	; 255
    4bee:	1f ef       	ldi	r17, 0xFF	; 255
    4bf0:	98 01       	movw	r18, r16
    4bf2:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
		j = 0; 
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    4bf6:	c9 82       	std	Y+1, r12	; 0x01
    4bf8:	da 82       	std	Y+2, r13	; 0x02
    4bfa:	eb 82       	std	Y+3, r14	; 0x03
    4bfc:	fc 82       	std	Y+4, r15	; 0x04
	fileSize += 512;	//always increment size of file by 512 to avoid losing data when appending to the file. Otherwise if there is data in an unfilled sector it will be overwritten.
	SD_write_block (startBlock,dataArray+writtenData-dataToWrite,dataToWrite);
	j++;
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
		j = 0; 
    4bfe:	cc 24       	eor	r12, r12
    4c00:	03 c0       	rjmp	.+6      	; 0x4c08 <writeFile+0x2dc>
	   }
		getSetNextCluster(prevCluster, SET, cluster);
		getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
	}
	//otherwise increment the sector offset 
	else startBlock++;       
    4c02:	08 94       	sec
    4c04:	21 1c       	adc	r2, r1
    4c06:	31 1c       	adc	r3, r1
	getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    4c08:	82 e0       	ldi	r24, 0x02	; 2
    4c0a:	61 e0       	ldi	r22, 0x01	; 1
    4c0c:	29 81       	ldd	r18, Y+1	; 0x01
    4c0e:	3a 81       	ldd	r19, Y+2	; 0x02
    4c10:	4b 81       	ldd	r20, Y+3	; 0x03
    4c12:	5c 81       	ldd	r21, Y+4	; 0x04
    4c14:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <getSetFreeCluster>
  startBlock = getFirstSector (cluster);
  j=0;
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
    4c18:	81 14       	cp	r8, r1
    4c1a:	91 04       	cpc	r9, r1
    4c1c:	a1 04       	cpc	r10, r1
    4c1e:	b1 04       	cpc	r11, r1
    4c20:	09 f0       	breq	.+2      	; 0x4c24 <writeFile+0x2f8>
    4c22:	79 cf       	rjmp	.-270    	; 0x4b16 <writeFile+0x1ea>
    4c24:	1b 85       	ldd	r17, Y+11	; 0x0b
	//otherwise increment the sector offset 
	else startBlock++;       
	getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
}

if(appendFile)  //executes this loop if file is to be appended (updates file information and reduce count of free memory)
    4c26:	11 23       	and	r17, r17
    4c28:	09 f4       	brne	.+2      	; 0x4c2c <writeFile+0x300>
    4c2a:	3f c0       	rjmp	.+126    	; 0x4caa <writeFile+0x37e>
{
  SD_read_block (appendFileSector,SDBuffer);    
    4c2c:	60 91 a2 50 	lds	r22, 0x50A2
    4c30:	70 91 a3 50 	lds	r23, 0x50A3
    4c34:	80 91 a4 50 	lds	r24, 0x50A4
    4c38:	90 91 a5 50 	lds	r25, 0x50A5
    4c3c:	08 e4       	ldi	r16, 0x48	; 72
    4c3e:	1e e3       	ldi	r17, 0x3E	; 62
    4c40:	a8 01       	movw	r20, r16
    4c42:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>
  dir = (struct dir_Structure *) &SDBuffer[appendFileLocation]; 
    4c46:	e0 91 49 40 	lds	r30, 0x4049
    4c4a:	f0 91 4a 40 	lds	r31, 0x404A
    4c4e:	e0 0f       	add	r30, r16
    4c50:	f1 1f       	adc	r31, r17

  dir->lastAccessDate = 0;   //date of last access ignored
    4c52:	12 8a       	std	Z+18, r1	; 0x12
    4c54:	13 8a       	std	Z+19, r1	; 0x13
  //dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
  //dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
  extraMemory = fileSize - dir->fileSize;
    4c56:	80 91 51 40 	lds	r24, 0x4051
    4c5a:	90 91 52 40 	lds	r25, 0x4052
    4c5e:	a0 91 53 40 	lds	r26, 0x4053
    4c62:	b0 91 54 40 	lds	r27, 0x4054
    4c66:	44 8d       	ldd	r20, Z+28	; 0x1c
    4c68:	55 8d       	ldd	r21, Z+29	; 0x1d
    4c6a:	66 8d       	ldd	r22, Z+30	; 0x1e
    4c6c:	77 8d       	ldd	r23, Z+31	; 0x1f
    4c6e:	6c 01       	movw	r12, r24
    4c70:	7d 01       	movw	r14, r26
    4c72:	c4 1a       	sub	r12, r20
    4c74:	d5 0a       	sbc	r13, r21
    4c76:	e6 0a       	sbc	r14, r22
    4c78:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    4c7a:	84 8f       	std	Z+28, r24	; 0x1c
    4c7c:	95 8f       	std	Z+29, r25	; 0x1d
    4c7e:	a6 8f       	std	Z+30, r26	; 0x1e
    4c80:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_write_block (appendFileSector,SDBuffer,512);
    4c82:	60 91 a2 50 	lds	r22, 0x50A2
    4c86:	70 91 a3 50 	lds	r23, 0x50A3
    4c8a:	80 91 a4 50 	lds	r24, 0x50A4
    4c8e:	90 91 a5 50 	lds	r25, 0x50A5
    4c92:	a8 01       	movw	r20, r16
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	32 e0       	ldi	r19, 0x02	; 2
    4c98:	0e 94 9f 28 	call	0x513e	; 0x513e <SD_write_block>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	a6 01       	movw	r20, r12
    4ca2:	0e 94 06 22 	call	0x440c	; 0x440c <freeMemoryUpdate>

 //File appended!
  return 0;
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
    4ca8:	f9 c0       	rjmp	.+498    	; 0x4e9c <writeFile+0x570>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    4caa:	00 91 5d 40 	lds	r16, 0x405D
    4cae:	10 91 5e 40 	lds	r17, 0x405E
    4cb2:	20 91 5f 40 	lds	r18, 0x405F
    4cb6:	30 91 60 40 	lds	r19, 0x4060
    4cba:	0b 87       	std	Y+11, r16	; 0x0b
    4cbc:	1c 87       	std	Y+12, r17	; 0x0c
    4cbe:	2d 87       	std	Y+13, r18	; 0x0d
    4cc0:	3e 87       	std	Y+14, r19	; 0x0e
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    4cc2:	77 24       	eor	r7, r7
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    4cc4:	81 e9       	ldi	r24, 0x91	; 145
    4cc6:	90 e5       	ldi	r25, 0x50	; 80
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
    4cc8:	0f 2e       	mov	r0, r31
    4cca:	fb e0       	ldi	r31, 0x0B	; 11
    4ccc:	af 2e       	mov	r10, r31
    4cce:	bb 24       	eor	r11, r11
    4cd0:	f0 2d       	mov	r31, r0
    4cd2:	a8 0e       	add	r10, r24
    4cd4:	b9 1e       	adc	r11, r25

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = Filename[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    4cd6:	88 24       	eor	r8, r8
    4cd8:	68 94       	set
    4cda:	85 f8       	bld	r8, 5
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4cdc:	0f 2e       	mov	r0, r31
    4cde:	f8 e4       	ldi	r31, 0x48	; 72
    4ce0:	4f 2e       	mov	r4, r31
    4ce2:	fe e3       	ldi	r31, 0x3E	; 62
    4ce4:	5f 2e       	mov	r5, r31
    4ce6:	f0 2d       	mov	r31, r0
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    4ce8:	28 2e       	mov	r2, r24
    4cea:	99 2e       	mov	r9, r25
    4cec:	37 2c       	mov	r3, r7
    4cee:	6f 84       	ldd	r6, Y+15	; 0x0f
    4cf0:	78 88       	ldd	r7, Y+16	; 0x10
    4cf2:	04 c0       	rjmp	.+8      	; 0x4cfc <writeFile+0x3d0>
   }
   if(cluster == 0) {//Error in getting cluster 
	   return 4;
	}
   
   prevCluster = cluster;
    4cf4:	cb 86       	std	Y+11, r12	; 0x0b
    4cf6:	dc 86       	std	Y+12, r13	; 0x0c
    4cf8:	ed 86       	std	Y+13, r14	; 0x0d
    4cfa:	fe 86       	std	Y+14, r15	; 0x0e

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    4cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d04:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <getFirstSector>
    4d08:	6d 83       	std	Y+5, r22	; 0x05
    4d0a:	7e 83       	std	Y+6, r23	; 0x06
    4d0c:	8f 83       	std	Y+7, r24	; 0x07
    4d0e:	98 87       	std	Y+8, r25	; 0x08

   for(sector = 0; sector < sectorPerCluster; sector++)
    4d10:	80 91 69 50 	lds	r24, 0x5069
    4d14:	90 91 6a 50 	lds	r25, 0x506A
    4d18:	00 97       	sbiw	r24, 0x00	; 0
    4d1a:	09 f4       	brne	.+2      	; 0x4d1e <writeFile+0x3f2>
    4d1c:	77 c0       	rjmp	.+238    	; 0x4e0c <writeFile+0x4e0>
    4d1e:	19 82       	std	Y+1, r1	; 0x01
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4d20:	cd 80       	ldd	r12, Y+5	; 0x05
    4d22:	de 80       	ldd	r13, Y+6	; 0x06
    4d24:	ef 80       	ldd	r14, Y+7	; 0x07
    4d26:	f8 84       	ldd	r15, Y+8	; 0x08
    4d28:	19 81       	ldd	r17, Y+1	; 0x01
    4d2a:	c1 0e       	add	r12, r17
    4d2c:	d1 1c       	adc	r13, r1
    4d2e:	e1 1c       	adc	r14, r1
    4d30:	f1 1c       	adc	r15, r1
    4d32:	c7 01       	movw	r24, r14
    4d34:	b6 01       	movw	r22, r12
    4d36:	a2 01       	movw	r20, r4
    4d38:	0e 94 54 29 	call	0x52a8	; 0x52a8 <SD_read_block>
	

     for(int i=0; i<bytesPerSector; i+=32)
    4d3c:	80 91 55 40 	lds	r24, 0x4055
    4d40:	90 91 56 40 	lds	r25, 0x4056
    4d44:	00 97       	sbiw	r24, 0x00	; 0
    4d46:	09 f4       	brne	.+2      	; 0x4d4a <writeFile+0x41e>
    4d48:	54 c0       	rjmp	.+168    	; 0x4df2 <writeFile+0x4c6>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    4d4a:	33 20       	and	r3, r3
    4d4c:	09 f0       	breq	.+2      	; 0x4d50 <writeFile+0x424>
    4d4e:	a1 c0       	rjmp	.+322    	; 0x4e92 <writeFile+0x566>
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    4d50:	a2 01       	movw	r20, r4
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
    4d52:	00 e0       	ldi	r16, 0x00	; 0
    4d54:	10 e0       	ldi	r17, 0x00	; 0
    4d56:	06 c0       	rjmp	.+12     	; 0x4d64 <writeFile+0x438>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    4d58:	a8 01       	movw	r20, r16
    4d5a:	48 5b       	subi	r20, 0xB8	; 184
    4d5c:	51 4c       	sbci	r21, 0xC1	; 193
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    4d5e:	22 23       	and	r18, r18
    4d60:	09 f0       	breq	.+2      	; 0x4d64 <writeFile+0x438>
    4d62:	99 c0       	rjmp	.+306    	; 0x4e96 <writeFile+0x56a>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    4d64:	da 01       	movw	r26, r20
    4d66:	8c 91       	ld	r24, X
    4d68:	88 23       	and	r24, r24
    4d6a:	21 f4       	brne	.+8      	; 0x4d74 <writeFile+0x448>
    4d6c:	e2 2d       	mov	r30, r2
    4d6e:	f9 2d       	mov	r31, r9
    4d70:	da 01       	movw	r26, r20
    4d72:	04 c0       	rjmp	.+8      	; 0x4d7c <writeFile+0x450>
    4d74:	85 3e       	cpi	r24, 0xE5	; 229
    4d76:	d1 f3       	breq	.-12     	; 0x4d6c <writeFile+0x440>
    4d78:	23 2d       	mov	r18, r3
    4d7a:	30 c0       	rjmp	.+96     	; 0x4ddc <writeFile+0x4b0>
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = Filename[j];
    4d7c:	81 91       	ld	r24, Z+
    4d7e:	8d 93       	st	X+, r24
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    4d80:	ea 15       	cp	r30, r10
    4d82:	fb 05       	cpc	r31, r11
    4d84:	d9 f7       	brne	.-10     	; 0x4d7c <writeFile+0x450>
  			dir->name[j] = Filename[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    4d86:	fa 01       	movw	r30, r20
    4d88:	83 86       	std	Z+11, r8	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    4d8a:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    4d8c:	15 86       	std	Z+13, r1	; 0x0d
		  //dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
    4d8e:	12 8a       	std	Z+18, r1	; 0x12
    4d90:	13 8a       	std	Z+19, r1	; 0x13
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
    4d92:	29 85       	ldd	r18, Y+9	; 0x09
    4d94:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d96:	24 8b       	std	Z+20, r18	; 0x14
    4d98:	35 8b       	std	Z+21, r19	; 0x15
		  dir->firstClusterLO = firstClusterLow;
    4d9a:	62 8e       	std	Z+26, r6	; 0x1a
    4d9c:	73 8e       	std	Z+27, r7	; 0x1b
		  dir->fileSize = fileSize;
    4d9e:	80 91 51 40 	lds	r24, 0x4051
    4da2:	90 91 52 40 	lds	r25, 0x4052
    4da6:	a0 91 53 40 	lds	r26, 0x4053
    4daa:	b0 91 54 40 	lds	r27, 0x4054
    4dae:	84 8f       	std	Z+28, r24	; 0x1c
    4db0:	95 8f       	std	Z+29, r25	; 0x1d
    4db2:	a6 8f       	std	Z+30, r26	; 0x1e
    4db4:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_write_block (firstSector + sector,SDBuffer,512);
    4db6:	c7 01       	movw	r24, r14
    4db8:	b6 01       	movw	r22, r12
    4dba:	a2 01       	movw	r20, r4
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	32 e0       	ldi	r19, 0x02	; 2
    4dc0:	0e 94 9f 28 	call	0x513e	; 0x513e <SD_write_block>
		  fileCreatedFlag = 1;

		  //File Created!

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    4dc4:	40 91 51 40 	lds	r20, 0x4051
    4dc8:	50 91 52 40 	lds	r21, 0x4052
    4dcc:	60 91 53 40 	lds	r22, 0x4053
    4dd0:	70 91 54 40 	lds	r23, 0x4054
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	0e 94 06 22 	call	0x440c	; 0x440c <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_write_block (firstSector + sector,SDBuffer,512);
		  fileCreatedFlag = 1;
    4dda:	21 e0       	ldi	r18, 0x01	; 1
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
    4ddc:	00 5e       	subi	r16, 0xE0	; 224
    4dde:	1f 4f       	sbci	r17, 0xFF	; 255
    4de0:	80 91 55 40 	lds	r24, 0x4055
    4de4:	90 91 56 40 	lds	r25, 0x4056
    4de8:	08 17       	cp	r16, r24
    4dea:	19 07       	cpc	r17, r25
    4dec:	08 f4       	brcc	.+2      	; 0x4df0 <writeFile+0x4c4>
    4dee:	b4 cf       	rjmp	.-152    	; 0x4d58 <writeFile+0x42c>
    4df0:	32 2e       	mov	r3, r18

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    4df2:	09 81       	ldd	r16, Y+1	; 0x01
    4df4:	0f 5f       	subi	r16, 0xFF	; 255
    4df6:	09 83       	std	Y+1, r16	; 0x01
    4df8:	20 91 69 50 	lds	r18, 0x5069
    4dfc:	30 91 6a 50 	lds	r19, 0x506A
    4e00:	80 2f       	mov	r24, r16
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	82 17       	cp	r24, r18
    4e06:	93 07       	cpc	r25, r19
    4e08:	08 f4       	brcc	.+2      	; 0x4e0c <writeFile+0x4e0>
    4e0a:	8a cf       	rjmp	.-236    	; 0x4d20 <writeFile+0x3f4>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    4e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e14:	40 e0       	ldi	r20, 0x00	; 0
    4e16:	00 e0       	ldi	r16, 0x00	; 0
    4e18:	10 e0       	ldi	r17, 0x00	; 0
    4e1a:	98 01       	movw	r18, r16
    4e1c:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
    4e20:	6b 01       	movw	r12, r22
    4e22:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    4e24:	67 3f       	cpi	r22, 0xF7	; 247
    4e26:	1f ef       	ldi	r17, 0xFF	; 255
    4e28:	71 07       	cpc	r23, r17
    4e2a:	1f ef       	ldi	r17, 0xFF	; 255
    4e2c:	81 07       	cpc	r24, r17
    4e2e:	1f e0       	ldi	r17, 0x0F	; 15
    4e30:	91 07       	cpc	r25, r17
    4e32:	08 f1       	brcs	.+66     	; 0x4e76 <writeFile+0x54a>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    4e34:	6f 3f       	cpi	r22, 0xFF	; 255
    4e36:	2f ef       	ldi	r18, 0xFF	; 255
    4e38:	72 07       	cpc	r23, r18
    4e3a:	2f ef       	ldi	r18, 0xFF	; 255
    4e3c:	82 07       	cpc	r24, r18
    4e3e:	2f ef       	ldi	r18, 0xFF	; 255
    4e40:	92 07       	cpc	r25, r18
    4e42:	59 f5       	brne	.+86     	; 0x4e9a <writeFile+0x56e>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    4e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e4c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <searchNextFreeCluster>
    4e50:	6b 01       	movw	r12, r22
    4e52:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    4e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e5c:	41 e0       	ldi	r20, 0x01	; 1
    4e5e:	97 01       	movw	r18, r14
    4e60:	86 01       	movw	r16, r12
    4e62:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    4e66:	c7 01       	movw	r24, r14
    4e68:	b6 01       	movw	r22, r12
    4e6a:	41 e0       	ldi	r20, 0x01	; 1
    4e6c:	0f ef       	ldi	r16, 0xFF	; 255
    4e6e:	1f ef       	ldi	r17, 0xFF	; 255
    4e70:	98 01       	movw	r18, r16
    4e72:	0e 94 75 1e 	call	0x3cea	; 0x3cea <getSetNextCluster>
      {	
	    //End of Cluster Chain 
	    return 3;
      }
   }
   if(cluster == 0) {//Error in getting cluster 
    4e76:	c1 14       	cp	r12, r1
    4e78:	d1 04       	cpc	r13, r1
    4e7a:	e1 04       	cpc	r14, r1
    4e7c:	f1 04       	cpc	r15, r1
    4e7e:	09 f0       	breq	.+2      	; 0x4e82 <writeFile+0x556>
    4e80:	39 cf       	rjmp	.-398    	; 0x4cf4 <writeFile+0x3c8>
	   return 4;
    4e82:	84 e0       	ldi	r24, 0x04	; 4
    4e84:	0b c0       	rjmp	.+22     	; 0x4e9c <writeFile+0x570>
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
   return 1; //invalid file name
    4e86:	81 e0       	ldi	r24, 0x01	; 1
    4e88:	09 c0       	rjmp	.+18     	; 0x4e9c <writeFile+0x570>

  cluster = searchNextFreeCluster(cluster);
   if(cluster == 0)
   {
	   // No free cluster!
	  return 2;
    4e8a:	82 e0       	ldi	r24, 0x02	; 2
    4e8c:	07 c0       	rjmp	.+14     	; 0x4e9c <writeFile+0x570>
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
		if(cluster == 0){
		  //No free cluster!
		  return 2;
    4e8e:	82 e0       	ldi	r24, 0x02	; 2
    4e90:	05 c0       	rjmp	.+10     	; 0x4e9c <writeFile+0x570>
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    4e92:	80 e0       	ldi	r24, 0x00	; 0
    4e94:	03 c0       	rjmp	.+6      	; 0x4e9c <writeFile+0x570>
    4e96:	80 e0       	ldi	r24, 0x00	; 0
    4e98:	01 c0       	rjmp	.+2      	; 0x4e9c <writeFile+0x570>
      } 

      else
      {	
	    //End of Cluster Chain 
	    return 3;
    4e9a:	83 e0       	ldi	r24, 0x03	; 3
   
   prevCluster = cluster;
 }
 
 return 0;
}
    4e9c:	60 96       	adiw	r28, 0x10	; 16
    4e9e:	cd bf       	out	0x3d, r28	; 61
    4ea0:	de bf       	out	0x3e, r29	; 62
    4ea2:	df 91       	pop	r29
    4ea4:	cf 91       	pop	r28
    4ea6:	1f 91       	pop	r17
    4ea8:	0f 91       	pop	r16
    4eaa:	ff 90       	pop	r15
    4eac:	ef 90       	pop	r14
    4eae:	df 90       	pop	r13
    4eb0:	cf 90       	pop	r12
    4eb2:	bf 90       	pop	r11
    4eb4:	af 90       	pop	r10
    4eb6:	9f 90       	pop	r9
    4eb8:	8f 90       	pop	r8
    4eba:	7f 90       	pop	r7
    4ebc:	6f 90       	pop	r6
    4ebe:	5f 90       	pop	r5
    4ec0:	4f 90       	pop	r4
    4ec2:	3f 90       	pop	r3
    4ec4:	2f 90       	pop	r2
    4ec6:	08 95       	ret

00004ec8 <SD_command>:
// 	data = SPIC.DATA; //read SPI data register to reset status flag
// 	return data;
// }

//the following command writes a command to the sd card and returns a response (if any) or 0xFF if no response
uint8_t SD_command(uint8_t cmd, uint32_t arg, uint8_t crc, int read) {
    4ec8:	8f 92       	push	r8
    4eca:	9f 92       	push	r9
    4ecc:	af 92       	push	r10
    4ece:	bf 92       	push	r11
    4ed0:	cf 92       	push	r12
    4ed2:	df 92       	push	r13
    4ed4:	ef 92       	push	r14
    4ed6:	ff 92       	push	r15
    4ed8:	0f 93       	push	r16
    4eda:	1f 93       	push	r17
    4edc:	cf 93       	push	r28
    4ede:	df 93       	push	r29
    4ee0:	84 2e       	mov	r8, r20
    4ee2:	a5 2e       	mov	r10, r21
    4ee4:	c6 2e       	mov	r12, r22
    4ee6:	c7 2f       	mov	r28, r23
    4ee8:	d2 2f       	mov	r29, r18
    4eea:	78 01       	movw	r14, r16
	
	SPI_write(SDHC_COMMAND_START | cmd);
    4eec:	80 64       	ori	r24, 0x40	; 64
    4eee:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(arg>>24 & LSBYTE_MASK);
    4ef2:	8c 2f       	mov	r24, r28
    4ef4:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(arg>>16 & LSBYTE_MASK);
    4ef8:	8c 2d       	mov	r24, r12
    4efa:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(arg>>8 & LSBYTE_MASK);
    4efe:	8a 2d       	mov	r24, r10
    4f00:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(arg & LSBYTE_MASK);
    4f04:	88 2d       	mov	r24, r8
    4f06:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(crc);
    4f0a:	8d 2f       	mov	r24, r29
    4f0c:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	
	for(int i=0; i<read; i++){
    4f10:	10 16       	cp	r1, r16
    4f12:	11 06       	cpc	r1, r17
    4f14:	64 f5       	brge	.+88     	; 0x4f6e <SD_command+0xa6>
    4f16:	00 e0       	ldi	r16, 0x00	; 0
    4f18:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(SDHC_DUMMY_BYTE);
    4f1a:	0f 2e       	mov	r0, r31
    4f1c:	fd e0       	ldi	r31, 0x0D	; 13
    4f1e:	cf 2e       	mov	r12, r31
    4f20:	dd 24       	eor	r13, r13
    4f22:	f0 2d       	mov	r31, r0
    4f24:	0f 2e       	mov	r0, r31
    4f26:	f4 e3       	ldi	r31, 0x34	; 52
    4f28:	af 2e       	mov	r10, r31
    4f2a:	fe e3       	ldi	r31, 0x3E	; 62
    4f2c:	bf 2e       	mov	r11, r31
    4f2e:	f0 2d       	mov	r31, r0
    4f30:	c8 01       	movw	r24, r16
    4f32:	b6 01       	movw	r22, r12
    4f34:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    4f38:	ec 01       	movw	r28, r24
    4f3a:	8f ef       	ldi	r24, 0xFF	; 255
    4f3c:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    4f40:	f5 01       	movw	r30, r10
    4f42:	ec 0f       	add	r30, r28
    4f44:	fd 1f       	adc	r31, r29
    4f46:	80 83       	st	Z, r24
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
    4f48:	80 81       	ld	r24, Z
    4f4a:	8f 3f       	cpi	r24, 0xFF	; 255
    4f4c:	49 f0       	breq	.+18     	; 0x4f60 <SD_command+0x98>
			Buffer[1] = Buffer[i%13];
    4f4e:	fe 01       	movw	r30, r28
    4f50:	ec 5c       	subi	r30, 0xCC	; 204
    4f52:	f1 4c       	sbci	r31, 0xC1	; 193
    4f54:	80 81       	ld	r24, Z
    4f56:	80 93 35 3e 	sts	0x3E35, r24
			return Buffer[1];
    4f5a:	80 91 35 3e 	lds	r24, 0x3E35
    4f5e:	08 c0       	rjmp	.+16     	; 0x4f70 <SD_command+0xa8>
	SPI_write(arg>>16 & LSBYTE_MASK);
	SPI_write(arg>>8 & LSBYTE_MASK);
	SPI_write(arg & LSBYTE_MASK);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    4f60:	0f 5f       	subi	r16, 0xFF	; 255
    4f62:	1f 4f       	sbci	r17, 0xFF	; 255
    4f64:	0e 15       	cp	r16, r14
    4f66:	1f 05       	cpc	r17, r15
    4f68:	19 f7       	brne	.-58     	; 0x4f30 <SD_command+0x68>
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
			Buffer[1] = Buffer[i%13];
			return Buffer[1];
		}
	}
	return SDHC_DUMMY_BYTE;
    4f6a:	8f ef       	ldi	r24, 0xFF	; 255
    4f6c:	01 c0       	rjmp	.+2      	; 0x4f70 <SD_command+0xa8>
    4f6e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f70:	df 91       	pop	r29
    4f72:	cf 91       	pop	r28
    4f74:	1f 91       	pop	r17
    4f76:	0f 91       	pop	r16
    4f78:	ff 90       	pop	r15
    4f7a:	ef 90       	pop	r14
    4f7c:	df 90       	pop	r13
    4f7e:	cf 90       	pop	r12
    4f80:	bf 90       	pop	r11
    4f82:	af 90       	pop	r10
    4f84:	9f 90       	pop	r9
    4f86:	8f 90       	pop	r8
    4f88:	08 95       	ret

00004f8a <SD_init>:
# include "SD_Card.h"

//the following function turns on power to the sd card and port expander and initializes the sdhc card in spi mode
//returns 0 if successful or 1 if not
uint8_t SD_init(void){
    4f8a:	ff 92       	push	r15
    4f8c:	0f 93       	push	r16
    4f8e:	1f 93       	push	r17
    4f90:	cf 93       	push	r28
    4f92:	df 93       	push	r29
	
	ADCPower(TRUE);				//power up portEX
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	Ext1Power(TRUE);			//power up SD card
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Ext1Power>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4fa0:	8f ef       	ldi	r24, 0xFF	; 255
    4fa2:	93 ec       	ldi	r25, 0xC3	; 195
    4fa4:	a9 e0       	ldi	r26, 0x09	; 9
    4fa6:	81 50       	subi	r24, 0x01	; 1
    4fa8:	90 40       	sbci	r25, 0x00	; 0
    4faa:	a0 40       	sbci	r26, 0x00	; 0
    4fac:	e1 f7       	brne	.-8      	; 0x4fa6 <SD_init+0x1c>
    4fae:	00 c0       	rjmp	.+0      	; 0x4fb0 <SD_init+0x26>
    4fb0:	00 00       	nop
	_delay_ms(100);				//wait for bootup
	uint8_t errorCode = 0;
	
	PortEx_DIRSET(BIT3_bm, PS_BANKB); //SD card CS
    4fb2:	88 e0       	ldi	r24, 0x08	; 8
    4fb4:	60 e0       	ldi	r22, 0x00	; 0
    4fb6:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB); //pull SD cs high
    4fba:	88 e0       	ldi	r24, 0x08	; 8
    4fbc:	60 e0       	ldi	r22, 0x00	; 0
    4fbe:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
	
	SPIInit2(SPI_MODE_0_gc, SPI_LOWEST_CLOCKRATE_PRESCALAR);
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	63 e0       	ldi	r22, 0x03	; 3
    4fc6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPIInit2>
	SPICS(TRUE);
    4fca:	81 e0       	ldi	r24, 0x01	; 1
    4fcc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
    4fd0:	8a e0       	ldi	r24, 0x0A	; 10
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
	
	//idle for 10 bytes / 80 clocks
	for(int i=0; i<10; i++){
		SPIC.DATA = SDHC_DUMMY_BYTE;
    4fd4:	e0 ec       	ldi	r30, 0xC0	; 192
    4fd6:	f8 e0       	ldi	r31, 0x08	; 8
    4fd8:	3f ef       	ldi	r19, 0xFF	; 255
		while(!(SPIC.STATUS & SPI_IF_bm));
		Buffer[12] = SPIC.DATA;
    4fda:	a0 e4       	ldi	r26, 0x40	; 64
    4fdc:	be e3       	ldi	r27, 0x3E	; 62
	SPIInit2(SPI_MODE_0_gc, SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	//idle for 10 bytes / 80 clocks
	for(int i=0; i<10; i++){
		SPIC.DATA = SDHC_DUMMY_BYTE;
    4fde:	33 83       	std	Z+3, r19	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    4fe0:	22 81       	ldd	r18, Z+2	; 0x02
    4fe2:	22 23       	and	r18, r18
    4fe4:	ec f7       	brge	.-6      	; 0x4fe0 <SD_init+0x56>
		Buffer[12] = SPIC.DATA;
    4fe6:	23 81       	ldd	r18, Z+3	; 0x03
    4fe8:	2c 93       	st	X, r18
    4fea:	01 97       	sbiw	r24, 0x01	; 1
	
	SPIInit2(SPI_MODE_0_gc, SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	//idle for 10 bytes / 80 clocks
	for(int i=0; i<10; i++){
    4fec:	c1 f7       	brne	.-16     	; 0x4fde <SD_init+0x54>
		SPIC.DATA = SDHC_DUMMY_BYTE;
		while(!(SPIC.STATUS & SPI_IF_bm));
		Buffer[12] = SPIC.DATA;
	}
	
	SPICS(FALSE);
    4fee:	80 e0       	ldi	r24, 0x00	; 0
    4ff0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    4ff4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    4ff8:	88 e0       	ldi	r24, 0x08	; 8
    4ffa:	60 e0       	ldi	r22, 0x00	; 0
    4ffc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    5000:	80 e0       	ldi	r24, 0x00	; 0
    5002:	63 e0       	ldi	r22, 0x03	; 3
    5004:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPIInit2>
	SPICS(TRUE);
    5008:	81 e0       	ldi	r24, 0x01	; 1
    500a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
	for(int i=0; SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){
    500e:	cb e0       	ldi	r28, 0x0B	; 11
    5010:	d0 e0       	ldi	r29, 0x00	; 0
    5012:	02 c0       	rjmp	.+4      	; 0x5018 <SD_init+0x8e>
    5014:	21 97       	sbiw	r28, 0x01	; 1
		//try command 10 times before timing out
		if (i >= 10) {
    5016:	69 f0       	breq	.+26     	; 0x5032 <SD_init+0xa8>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
	for(int i=0; SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	40 e0       	ldi	r20, 0x00	; 0
    501c:	50 e0       	ldi	r21, 0x00	; 0
    501e:	ba 01       	movw	r22, r20
    5020:	25 e9       	ldi	r18, 0x95	; 149
    5022:	08 e0       	ldi	r16, 0x08	; 8
    5024:	10 e0       	ldi	r17, 0x00	; 0
    5026:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
    502a:	81 30       	cpi	r24, 0x01	; 1
    502c:	99 f7       	brne	.-26     	; 0x5014 <SD_init+0x8a>
uint8_t SD_init(void){
	
	ADCPower(TRUE);				//power up portEX
	Ext1Power(TRUE);			//power up SD card
	_delay_ms(100);				//wait for bootup
	uint8_t errorCode = 0;
    502e:	ff 24       	eor	r15, r15
    5030:	02 c0       	rjmp	.+4      	; 0x5036 <SD_init+0xac>
	//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
	for(int i=0; SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){
		//try command 10 times before timing out
		if (i >= 10) {
			//there was no response to the first command
			errorCode = 1;
    5032:	ff 24       	eor	r15, r15
    5034:	f3 94       	inc	r15
    5036:	8f ef       	ldi	r24, 0xFF	; 255
    5038:	93 ec       	ldi	r25, 0xC3	; 195
    503a:	a9 e0       	ldi	r26, 0x09	; 9
    503c:	81 50       	subi	r24, 0x01	; 1
    503e:	90 40       	sbci	r25, 0x00	; 0
    5040:	a0 40       	sbci	r26, 0x00	; 0
    5042:	e1 f7       	brne	.-8      	; 0x503c <SD_init+0xb2>
    5044:	00 c0       	rjmp	.+0      	; 0x5046 <SD_init+0xbc>
    5046:	00 00       	nop
			break;
		}
	}
	_delay_ms(100);
	//check voltage range (used to indicate to sd card that we know it is an sdhc card)
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){
    5048:	cb e0       	ldi	r28, 0x0B	; 11
    504a:	d0 e0       	ldi	r29, 0x00	; 0
    504c:	02 c0       	rjmp	.+4      	; 0x5052 <SD_init+0xc8>
    504e:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    5050:	69 f0       	breq	.+26     	; 0x506c <SD_init+0xe2>
			break;
		}
	}
	_delay_ms(100);
	//check voltage range (used to indicate to sd card that we know it is an sdhc card)
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){
    5052:	88 e0       	ldi	r24, 0x08	; 8
    5054:	4a ea       	ldi	r20, 0xAA	; 170
    5056:	51 e0       	ldi	r21, 0x01	; 1
    5058:	60 e0       	ldi	r22, 0x00	; 0
    505a:	70 e0       	ldi	r23, 0x00	; 0
    505c:	27 e8       	ldi	r18, 0x87	; 135
    505e:	08 e0       	ldi	r16, 0x08	; 8
    5060:	10 e0       	ldi	r17, 0x00	; 0
    5062:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
    5066:	81 30       	cpi	r24, 0x01	; 1
    5068:	91 f7       	brne	.-28     	; 0x504e <SD_init+0xc4>
    506a:	02 c0       	rjmp	.+4      	; 0x5070 <SD_init+0xe6>
		if (i >= 10) {
			//there was no response to the command
			errorCode = 1;
    506c:	ff 24       	eor	r15, r15
    506e:	f3 94       	inc	r15
    5070:	c2 e0       	ldi	r28, 0x02	; 2
    5072:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}
	}
	for(int i=0;i<4;i++){
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
    5074:	04 e3       	ldi	r16, 0x34	; 52
    5076:	1e e3       	ldi	r17, 0x3E	; 62
    5078:	8f ef       	ldi	r24, 0xFF	; 255
    507a:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    507e:	f8 01       	movw	r30, r16
    5080:	ec 0f       	add	r30, r28
    5082:	fd 1f       	adc	r31, r29
    5084:	80 83       	st	Z, r24
    5086:	21 96       	adiw	r28, 0x01	; 1
			//there was no response to the command
			errorCode = 1;
			break;
		}
	}
	for(int i=0;i<4;i++){
    5088:	c6 30       	cpi	r28, 0x06	; 6
    508a:	d1 05       	cpc	r29, r1
    508c:	a9 f7       	brne	.-22     	; 0x5078 <SD_init+0xee>
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
	}
	//check that the response is the same as the argument sent in
	if((Buffer[4] != 0x01) || (Buffer[5] != 0xAA)){
    508e:	80 91 38 3e 	lds	r24, 0x3E38
    5092:	81 30       	cpi	r24, 0x01	; 1
    5094:	29 f4       	brne	.+10     	; 0x50a0 <SD_init+0x116>
    5096:	80 91 39 3e 	lds	r24, 0x3E39
    509a:	8a 3a       	cpi	r24, 0xAA	; 170
    509c:	21 f4       	brne	.+8      	; 0x50a6 <SD_init+0x11c>
    509e:	05 c0       	rjmp	.+10     	; 0x50aa <SD_init+0x120>
		//broken card or voltage out of operating range bounds
		errorCode = 1;
    50a0:	ff 24       	eor	r15, r15
    50a2:	f3 94       	inc	r15
    50a4:	02 c0       	rjmp	.+4      	; 0x50aa <SD_init+0x120>
    50a6:	ff 24       	eor	r15, r15
    50a8:	f3 94       	inc	r15
	do{
		//next command will be advanced
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);
		//initialize the SDHC card in SPI mode
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);
	} while(Buffer[1]!= 0x00);	
    50aa:	c5 e3       	ldi	r28, 0x35	; 53
    50ac:	de e3       	ldi	r29, 0x3E	; 62
		errorCode = 1;
	}
	//send second initialization command
	do{
		//next command will be advanced
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);
    50ae:	87 e3       	ldi	r24, 0x37	; 55
    50b0:	40 e0       	ldi	r20, 0x00	; 0
    50b2:	50 e0       	ldi	r21, 0x00	; 0
    50b4:	ba 01       	movw	r22, r20
    50b6:	2f ef       	ldi	r18, 0xFF	; 255
    50b8:	08 e0       	ldi	r16, 0x08	; 8
    50ba:	10 e0       	ldi	r17, 0x00	; 0
    50bc:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
		//initialize the SDHC card in SPI mode
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);
    50c0:	81 e0       	ldi	r24, 0x01	; 1
    50c2:	40 e0       	ldi	r20, 0x00	; 0
    50c4:	50 e0       	ldi	r21, 0x00	; 0
    50c6:	60 e0       	ldi	r22, 0x00	; 0
    50c8:	70 e4       	ldi	r23, 0x40	; 64
    50ca:	2f ef       	ldi	r18, 0xFF	; 255
    50cc:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
	} while(Buffer[1]!= 0x00);	
    50d0:	88 81       	ld	r24, Y
    50d2:	88 23       	and	r24, r24
    50d4:	61 f7       	brne	.-40     	; 0x50ae <SD_init+0x124>
    50d6:	cb e0       	ldi	r28, 0x0B	; 11
    50d8:	d0 e0       	ldi	r29, 0x00	; 0
    50da:	02 c0       	rjmp	.+4      	; 0x50e0 <SD_init+0x156>
    50dc:	21 97       	sbiw	r28, 0x01	; 1
	
	//check OCR register
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){
		if (i >= 10) {
    50de:	61 f0       	breq	.+24     	; 0x50f8 <SD_init+0x16e>
		//initialize the SDHC card in SPI mode
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);
	} while(Buffer[1]!= 0x00);	
	
	//check OCR register
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){
    50e0:	8a e3       	ldi	r24, 0x3A	; 58
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	50 e0       	ldi	r21, 0x00	; 0
    50e6:	ba 01       	movw	r22, r20
    50e8:	2f ef       	ldi	r18, 0xFF	; 255
    50ea:	08 e0       	ldi	r16, 0x08	; 8
    50ec:	10 e0       	ldi	r17, 0x00	; 0
    50ee:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
    50f2:	88 23       	and	r24, r24
    50f4:	99 f7       	brne	.-26     	; 0x50dc <SD_init+0x152>
    50f6:	02 c0       	rjmp	.+4      	; 0x50fc <SD_init+0x172>
		if (i >= 10) {
			//there was no response to the command
			errorCode = 1;
    50f8:	ff 24       	eor	r15, r15
    50fa:	f3 94       	inc	r15
			break;
		}
	}		
	for (int i=0;i<4;i++){
    50fc:	c0 e0       	ldi	r28, 0x00	; 0
    50fe:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
    5100:	04 e3       	ldi	r16, 0x34	; 52
    5102:	1e e3       	ldi	r17, 0x3E	; 62
    5104:	8f ef       	ldi	r24, 0xFF	; 255
    5106:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    510a:	f8 01       	movw	r30, r16
    510c:	ec 0f       	add	r30, r28
    510e:	fd 1f       	adc	r31, r29
    5110:	80 83       	st	Z, r24
			//there was no response to the command
			errorCode = 1;
			break;
		}
	}		
	for (int i=0;i<4;i++){
    5112:	21 96       	adiw	r28, 0x01	; 1
    5114:	c4 30       	cpi	r28, 0x04	; 4
    5116:	d1 05       	cpc	r29, r1
    5118:	a9 f7       	brne	.-22     	; 0x5104 <SD_init+0x17a>
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if (Buffer[0] & 0x40){
    511a:	80 91 34 3e 	lds	r24, 0x3E34
		//the card is addressed in 512 byte sectors
	}
	SPICS(FALSE);
    511e:	80 e0       	ldi	r24, 0x00	; 0
    5120:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    5124:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	//pull SD cs high
	PortEx_OUTSET(BIT3_bm, PS_BANKB);
    5128:	88 e0       	ldi	r24, 0x08	; 8
    512a:	60 e0       	ldi	r22, 0x00	; 0
    512c:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
	
	return errorCode;					
}
    5130:	8f 2d       	mov	r24, r15
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	1f 91       	pop	r17
    5138:	0f 91       	pop	r16
    513a:	ff 90       	pop	r15
    513c:	08 95       	ret

0000513e <SD_write_block>:
	}
	return SDHC_DUMMY_BYTE;
}

//the following command writes one sector to the sdhc card
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
    513e:	6f 92       	push	r6
    5140:	7f 92       	push	r7
    5142:	8f 92       	push	r8
    5144:	9f 92       	push	r9
    5146:	af 92       	push	r10
    5148:	bf 92       	push	r11
    514a:	cf 92       	push	r12
    514c:	df 92       	push	r13
    514e:	ef 92       	push	r14
    5150:	ff 92       	push	r15
    5152:	0f 93       	push	r16
    5154:	1f 93       	push	r17
    5156:	cf 93       	push	r28
    5158:	df 93       	push	r29
    515a:	4b 01       	movw	r8, r22
    515c:	5c 01       	movw	r10, r24
    515e:	74 2e       	mov	r7, r20
    5160:	65 2e       	mov	r6, r21
    5162:	69 01       	movw	r12, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5164:	88 e0       	ldi	r24, 0x08	; 8
    5166:	60 e0       	ldi	r22, 0x00	; 0
    5168:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	92 e0       	ldi	r25, 0x02	; 2
    517c:	7c 01       	movw	r14, r24
    517e:	ec 18       	sub	r14, r12
    5180:	fd 08       	sbc	r15, r13
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	e8 16       	cp	r14, r24
    5186:	82 e0       	ldi	r24, 0x02	; 2
    5188:	f8 06       	cpc	r15, r24
    518a:	11 f4       	brne	.+4      	; 0x5190 <SD_write_block+0x52>
    518c:	ee 24       	eor	r14, r14
    518e:	ff 24       	eor	r15, r15
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    5190:	cb e0       	ldi	r28, 0x0B	; 11
    5192:	d0 e0       	ldi	r29, 0x00	; 0
    5194:	03 c0       	rjmp	.+6      	; 0x519c <SD_write_block+0x5e>
    5196:	21 97       	sbiw	r28, 0x01	; 1
	if (i >= 10) {
    5198:	09 f4       	brne	.+2      	; 0x519c <SD_write_block+0x5e>
    519a:	ff cf       	rjmp	.-2      	; 0x519a <SD_write_block+0x5c>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    519c:	88 e1       	ldi	r24, 0x18	; 24
    519e:	b5 01       	movw	r22, r10
    51a0:	a4 01       	movw	r20, r8
    51a2:	2f ef       	ldi	r18, 0xFF	; 255
    51a4:	08 e0       	ldi	r16, 0x08	; 8
    51a6:	10 e0       	ldi	r17, 0x00	; 0
    51a8:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
    51ac:	88 23       	and	r24, r24
    51ae:	99 f7       	brne	.-26     	; 0x5196 <SD_write_block+0x58>
	if (i >= 10) {
		//there was no response to the command
		while(1);
	}
}
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
    51b0:	8f ef       	ldi	r24, 0xFF	; 255
    51b2:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    51b6:	80 93 34 3e 	sts	0x3E34, r24
SPI_write(SDHC_DATA_TOKEN);	//send data token
    51ba:	8e ef       	ldi	r24, 0xFE	; 254
    51bc:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    51c0:	1c 14       	cp	r1, r12
    51c2:	1d 04       	cpc	r1, r13
    51c4:	bc f4       	brge	.+46     	; 0x51f4 <SD_write_block+0xb6>
    51c6:	87 2c       	mov	r8, r7
    51c8:	96 2c       	mov	r9, r6
    51ca:	00 e0       	ldi	r16, 0x00	; 0
    51cc:	10 e0       	ldi	r17, 0x00	; 0
Buffer[i%13] = SPI_write(data[i]);
    51ce:	c8 01       	movw	r24, r16
    51d0:	6d e0       	ldi	r22, 0x0D	; 13
    51d2:	70 e0       	ldi	r23, 0x00	; 0
    51d4:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    51d8:	ec 01       	movw	r28, r24
    51da:	f4 01       	movw	r30, r8
    51dc:	81 91       	ld	r24, Z+
    51de:	4f 01       	movw	r8, r30
    51e0:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    51e4:	cc 5c       	subi	r28, 0xCC	; 204
    51e6:	d1 4c       	sbci	r29, 0xC1	; 193
    51e8:	88 83       	st	Y, r24
		while(1);
	}
}
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
SPI_write(SDHC_DATA_TOKEN);	//send data token
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    51ea:	0f 5f       	subi	r16, 0xFF	; 255
    51ec:	1f 4f       	sbci	r17, 0xFF	; 255
    51ee:	0c 15       	cp	r16, r12
    51f0:	1d 05       	cpc	r17, r13
    51f2:	69 f7       	brne	.-38     	; 0x51ce <SD_write_block+0x90>
Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    51f4:	1e 14       	cp	r1, r14
    51f6:	1f 04       	cpc	r1, r15
    51f8:	ec f4       	brge	.+58     	; 0x5234 <SD_write_block+0xf6>
    51fa:	00 e0       	ldi	r16, 0x00	; 0
    51fc:	10 e0       	ldi	r17, 0x00	; 0
	Buffer[i%13] = SPI_write(FILLER_BYTE);
    51fe:	0f 2e       	mov	r0, r31
    5200:	fd e0       	ldi	r31, 0x0D	; 13
    5202:	cf 2e       	mov	r12, r31
    5204:	dd 24       	eor	r13, r13
    5206:	f0 2d       	mov	r31, r0
    5208:	0f 2e       	mov	r0, r31
    520a:	f4 e3       	ldi	r31, 0x34	; 52
    520c:	8f 2e       	mov	r8, r31
    520e:	fe e3       	ldi	r31, 0x3E	; 62
    5210:	9f 2e       	mov	r9, r31
    5212:	f0 2d       	mov	r31, r0
    5214:	c8 01       	movw	r24, r16
    5216:	b6 01       	movw	r22, r12
    5218:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    521c:	ec 01       	movw	r28, r24
    521e:	80 e0       	ldi	r24, 0x00	; 0
    5220:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5224:	c8 0d       	add	r28, r8
    5226:	d9 1d       	adc	r29, r9
    5228:	88 83       	st	Y, r24
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
SPI_write(SDHC_DATA_TOKEN);	//send data token
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    522a:	0f 5f       	subi	r16, 0xFF	; 255
    522c:	1f 4f       	sbci	r17, 0xFF	; 255
    522e:	0e 15       	cp	r16, r14
    5230:	1f 05       	cpc	r17, r15
    5232:	81 f7       	brne	.-32     	; 0x5214 <SD_write_block+0xd6>
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
    5234:	8f ef       	ldi	r24, 0xFF	; 255
    5236:	80 93 34 3e 	sts	0x3E34, r24
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    523a:	c0 e0       	ldi	r28, 0x00	; 0
    523c:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
    523e:	04 e3       	ldi	r16, 0x34	; 52
    5240:	1e e3       	ldi	r17, 0x3E	; 62
    5242:	8f ef       	ldi	r24, 0xFF	; 255
    5244:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5248:	f8 01       	movw	r30, r16
    524a:	80 83       	st	Z, r24
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    524c:	21 96       	adiw	r28, 0x01	; 1
    524e:	c2 30       	cpi	r28, 0x02	; 2
    5250:	d1 05       	cpc	r29, r1
    5252:	bc f3       	brlt	.-18     	; 0x5242 <SD_write_block+0x104>
    5254:	80 81       	ld	r24, Z
    5256:	8f 3f       	cpi	r24, 0xFF	; 255
    5258:	a1 f3       	breq	.-24     	; 0x5242 <SD_write_block+0x104>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
	}
	if ((Buffer[0] & SDHC_RESPONSE_STATUS_MASK) == 0x02){
    525a:	80 91 34 3e 	lds	r24, 0x3E34
		//data was written successfully
	}
	while(Buffer[0] != SDHC_DUMMY_BYTE) Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to finish internal processes
    525e:	80 91 34 3e 	lds	r24, 0x3E34
    5262:	8f 3f       	cpi	r24, 0xFF	; 255
    5264:	49 f0       	breq	.+18     	; 0x5278 <SD_write_block+0x13a>
    5266:	c4 e3       	ldi	r28, 0x34	; 52
    5268:	de e3       	ldi	r29, 0x3E	; 62
    526a:	8f ef       	ldi	r24, 0xFF	; 255
    526c:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5270:	88 83       	st	Y, r24
    5272:	88 81       	ld	r24, Y
    5274:	8f 3f       	cpi	r24, 0xFF	; 255
    5276:	c9 f7       	brne	.-14     	; 0x526a <SD_write_block+0x12c>
	SPICS(FALSE);
    5278:	80 e0       	ldi	r24, 0x00	; 0
    527a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    527e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high	
    5282:	88 e0       	ldi	r24, 0x08	; 8
    5284:	60 e0       	ldi	r22, 0x00	; 0
    5286:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
}
    528a:	df 91       	pop	r29
    528c:	cf 91       	pop	r28
    528e:	1f 91       	pop	r17
    5290:	0f 91       	pop	r16
    5292:	ff 90       	pop	r15
    5294:	ef 90       	pop	r14
    5296:	df 90       	pop	r13
    5298:	cf 90       	pop	r12
    529a:	bf 90       	pop	r11
    529c:	af 90       	pop	r10
    529e:	9f 90       	pop	r9
    52a0:	8f 90       	pop	r8
    52a2:	7f 90       	pop	r7
    52a4:	6f 90       	pop	r6
    52a6:	08 95       	ret

000052a8 <SD_read_block>:

//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
    52a8:	af 92       	push	r10
    52aa:	bf 92       	push	r11
    52ac:	cf 92       	push	r12
    52ae:	df 92       	push	r13
    52b0:	ef 92       	push	r14
    52b2:	ff 92       	push	r15
    52b4:	0f 93       	push	r16
    52b6:	1f 93       	push	r17
    52b8:	cf 93       	push	r28
    52ba:	df 93       	push	r29
    52bc:	6b 01       	movw	r12, r22
    52be:	7c 01       	movw	r14, r24
    52c0:	b4 2e       	mov	r11, r20
    52c2:	a5 2e       	mov	r10, r21
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    52c4:	88 e0       	ldi	r24, 0x08	; 8
    52c6:	60 e0       	ldi	r22, 0x00	; 0
    52c8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    52d8:	cb e0       	ldi	r28, 0x0B	; 11
    52da:	d0 e0       	ldi	r29, 0x00	; 0
    52dc:	03 c0       	rjmp	.+6      	; 0x52e4 <SD_read_block+0x3c>
    52de:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <SD_read_block+0x3c>
    52e2:	ff cf       	rjmp	.-2      	; 0x52e2 <SD_read_block+0x3a>
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    52e4:	81 e1       	ldi	r24, 0x11	; 17
    52e6:	b7 01       	movw	r22, r14
    52e8:	a6 01       	movw	r20, r12
    52ea:	2f ef       	ldi	r18, 0xFF	; 255
    52ec:	08 e0       	ldi	r16, 0x08	; 8
    52ee:	10 e0       	ldi	r17, 0x00	; 0
    52f0:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
    52f4:	88 23       	and	r24, r24
    52f6:	99 f7       	brne	.-26     	; 0x52de <SD_read_block+0x36>
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
    52f8:	80 91 34 3e 	lds	r24, 0x3E34
    52fc:	8e 3f       	cpi	r24, 0xFE	; 254
    52fe:	49 f0       	breq	.+18     	; 0x5312 <SD_read_block+0x6a>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
    5300:	c4 e3       	ldi	r28, 0x34	; 52
    5302:	de e3       	ldi	r29, 0x3E	; 62
    5304:	8f ef       	ldi	r24, 0xFF	; 255
    5306:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    530a:	88 83       	st	Y, r24
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
    530c:	88 81       	ld	r24, Y
    530e:	8e 3f       	cpi	r24, 0xFE	; 254
    5310:	c9 f7       	brne	.-14     	; 0x5304 <SD_read_block+0x5c>
    5312:	0b 2d       	mov	r16, r11
    5314:	1a 2d       	mov	r17, r10
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    5316:	c0 e0       	ldi	r28, 0x00	; 0
    5318:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    531a:	8f ef       	ldi	r24, 0xFF	; 255
    531c:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5320:	f8 01       	movw	r30, r16
    5322:	81 93       	st	Z+, r24
    5324:	8f 01       	movw	r16, r30
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    5326:	21 96       	adiw	r28, 0x01	; 1
    5328:	f2 e0       	ldi	r31, 0x02	; 2
    532a:	c0 30       	cpi	r28, 0x00	; 0
    532c:	df 07       	cpc	r29, r31
    532e:	a9 f7       	brne	.-22     	; 0x531a <SD_read_block+0x72>
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
    5330:	10 92 40 3e 	sts	0x3E40, r1
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    5334:	80 91 40 3e 	lds	r24, 0x3E40
    5338:	8f 3f       	cpi	r24, 0xFF	; 255
    533a:	49 f0       	breq	.+18     	; 0x534e <SD_read_block+0xa6>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
    533c:	c0 e4       	ldi	r28, 0x40	; 64
    533e:	de e3       	ldi	r29, 0x3E	; 62
    5340:	8f ef       	ldi	r24, 0xFF	; 255
    5342:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5346:	88 83       	st	Y, r24
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    5348:	88 81       	ld	r24, Y
    534a:	8f 3f       	cpi	r24, 0xFF	; 255
    534c:	c9 f7       	brne	.-14     	; 0x5340 <SD_read_block+0x98>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
	}

	SPICS(FALSE);
    534e:	80 e0       	ldi	r24, 0x00	; 0
    5350:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    5354:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    5358:	88 e0       	ldi	r24, 0x08	; 8
    535a:	60 e0       	ldi	r22, 0x00	; 0
    535c:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
}
    5360:	df 91       	pop	r29
    5362:	cf 91       	pop	r28
    5364:	1f 91       	pop	r17
    5366:	0f 91       	pop	r16
    5368:	ff 90       	pop	r15
    536a:	ef 90       	pop	r14
    536c:	df 90       	pop	r13
    536e:	cf 90       	pop	r12
    5370:	bf 90       	pop	r11
    5372:	af 90       	pop	r10
    5374:	08 95       	ret

00005376 <SD_write_multiple_blocks>:

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    5376:	2f 92       	push	r2
    5378:	3f 92       	push	r3
    537a:	4f 92       	push	r4
    537c:	5f 92       	push	r5
    537e:	6f 92       	push	r6
    5380:	7f 92       	push	r7
    5382:	8f 92       	push	r8
    5384:	9f 92       	push	r9
    5386:	af 92       	push	r10
    5388:	bf 92       	push	r11
    538a:	cf 92       	push	r12
    538c:	df 92       	push	r13
    538e:	ef 92       	push	r14
    5390:	ff 92       	push	r15
    5392:	0f 93       	push	r16
    5394:	1f 93       	push	r17
    5396:	cf 93       	push	r28
    5398:	df 93       	push	r29
    539a:	cd b7       	in	r28, 0x3d	; 61
    539c:	de b7       	in	r29, 0x3e	; 62
    539e:	2a 97       	sbiw	r28, 0x0a	; 10
    53a0:	cd bf       	out	0x3d, r28	; 61
    53a2:	de bf       	out	0x3e, r29	; 62
    53a4:	6b 01       	movw	r12, r22
    53a6:	7c 01       	movw	r14, r24
    53a8:	4f 83       	std	Y+7, r20	; 0x07
    53aa:	58 87       	std	Y+8, r21	; 0x08
    53ac:	89 01       	movw	r16, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    53ae:	88 e0       	ldi	r24, 0x08	; 8
    53b0:	60 e0       	ldi	r22, 0x00	; 0
    53b2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    53bc:	81 e0       	ldi	r24, 0x01	; 1
    53be:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
    53c2:	c8 01       	movw	r24, r16
    53c4:	11 23       	and	r17, r17
    53c6:	14 f4       	brge	.+4      	; 0x53cc <SD_write_multiple_blocks+0x56>
    53c8:	81 50       	subi	r24, 0x01	; 1
    53ca:	9e 4f       	sbci	r25, 0xFE	; 254
    53cc:	9c 01       	movw	r18, r24
    53ce:	23 2f       	mov	r18, r19
    53d0:	33 0f       	add	r19, r19
    53d2:	33 0b       	sbc	r19, r19
    53d4:	25 95       	asr	r18
    53d6:	2b 83       	std	Y+3, r18	; 0x03
    53d8:	3c 83       	std	Y+4, r19	; 0x04
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
    53da:	20 e0       	ldi	r18, 0x00	; 0
    53dc:	32 e0       	ldi	r19, 0x02	; 2
    53de:	c8 01       	movw	r24, r16
    53e0:	b9 01       	movw	r22, r18
    53e2:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    53e6:	29 01       	movw	r4, r18
    53e8:	48 1a       	sub	r4, r24
    53ea:	59 0a       	sbc	r5, r25
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    53ec:	30 e0       	ldi	r19, 0x00	; 0
    53ee:	43 16       	cp	r4, r19
    53f0:	32 e0       	ldi	r19, 0x02	; 2
    53f2:	53 06       	cpc	r5, r19
    53f4:	31 f0       	breq	.+12     	; 0x5402 <SD_write_multiple_blocks+0x8c>
	else numSectors++;
    53f6:	8b 81       	ldd	r24, Y+3	; 0x03
    53f8:	9c 81       	ldd	r25, Y+4	; 0x04
    53fa:	01 96       	adiw	r24, 0x01	; 1
    53fc:	8b 83       	std	Y+3, r24	; 0x03
    53fe:	9c 83       	std	Y+4, r25	; 0x04
    5400:	02 c0       	rjmp	.+4      	; 0x5406 <SD_write_multiple_blocks+0x90>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    5402:	44 24       	eor	r4, r4
    5404:	55 24       	eor	r5, r5
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
    5406:	89 e1       	ldi	r24, 0x19	; 25
    5408:	b7 01       	movw	r22, r14
    540a:	a6 01       	movw	r20, r12
    540c:	2f ef       	ldi	r18, 0xFF	; 255
    540e:	08 e0       	ldi	r16, 0x08	; 8
    5410:	10 e0       	ldi	r17, 0x00	; 0
    5412:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
    5416:	88 23       	and	r24, r24
    5418:	b1 f7       	brne	.-20     	; 0x5406 <SD_write_multiple_blocks+0x90>
	for (int j=0;j<numSectors;j++){
    541a:	eb 81       	ldd	r30, Y+3	; 0x03
    541c:	fc 81       	ldd	r31, Y+4	; 0x04
    541e:	1e 16       	cp	r1, r30
    5420:	1f 06       	cpc	r1, r31
    5422:	0c f0       	brlt	.+2      	; 0x5426 <SD_write_multiple_blocks+0xb0>
    5424:	ac c0       	rjmp	.+344    	; 0x557e <SD_write_multiple_blocks+0x208>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    5426:	31 97       	sbiw	r30, 0x01	; 1
    5428:	ed 83       	std	Y+5, r30	; 0x05
    542a:	fe 83       	std	Y+6, r31	; 0x06
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    542c:	9f 01       	movw	r18, r30
    542e:	32 2f       	mov	r19, r18
    5430:	22 27       	eor	r18, r18
    5432:	33 0f       	add	r19, r19
    5434:	8f 81       	ldd	r24, Y+7	; 0x07
    5436:	98 85       	ldd	r25, Y+8	; 0x08
    5438:	89 83       	std	Y+1, r24	; 0x01
    543a:	9a 83       	std	Y+2, r25	; 0x02
    543c:	66 24       	eor	r6, r6
    543e:	77 24       	eor	r7, r7
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    5440:	0f 2e       	mov	r0, r31
    5442:	f5 e3       	ldi	r31, 0x35	; 53
    5444:	8f 2e       	mov	r8, r31
    5446:	fe e3       	ldi	r31, 0x3E	; 62
    5448:	9f 2e       	mov	r9, r31
    544a:	f0 2d       	mov	r31, r0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    544c:	0f 2e       	mov	r0, r31
    544e:	fc e0       	ldi	r31, 0x0C	; 12
    5450:	cf 2e       	mov	r12, r31
    5452:	dd 24       	eor	r13, r13
    5454:	f0 2d       	mov	r31, r0
    5456:	0f 2e       	mov	r0, r31
    5458:	f4 e3       	ldi	r31, 0x34	; 52
    545a:	af 2e       	mov	r10, r31
    545c:	fe e3       	ldi	r31, 0x3E	; 62
    545e:	bf 2e       	mov	r11, r31
    5460:	f0 2d       	mov	r31, r0
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    5462:	80 e0       	ldi	r24, 0x00	; 0
    5464:	92 e0       	ldi	r25, 0x02	; 2
    5466:	1c 01       	movw	r2, r24
    5468:	24 18       	sub	r2, r4
    546a:	35 08       	sbc	r3, r5
	SPIDisable();
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
}

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    546c:	ef 81       	ldd	r30, Y+7	; 0x07
    546e:	f8 85       	ldd	r31, Y+8	; 0x08
    5470:	e2 0f       	add	r30, r18
    5472:	f3 1f       	adc	r31, r19
    5474:	ef 83       	std	Y+7, r30	; 0x07
    5476:	f8 87       	std	Y+8, r31	; 0x08
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    5478:	8f ef       	ldi	r24, 0xFF	; 255
    547a:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    547e:	f4 01       	movw	r30, r8
    5480:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
    5482:	8c ef       	ldi	r24, 0xFC	; 252
    5484:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5488:	f4 01       	movw	r30, r8
    548a:	80 83       	st	Z, r24
		if(j == (numSectors-1)){
    548c:	2d 81       	ldd	r18, Y+5	; 0x05
    548e:	3e 81       	ldd	r19, Y+6	; 0x06
    5490:	26 15       	cp	r18, r6
    5492:	37 05       	cpc	r19, r7
    5494:	09 f0       	breq	.+2      	; 0x5498 <SD_write_multiple_blocks+0x122>
    5496:	41 c0       	rjmp	.+130    	; 0x551a <SD_write_multiple_blocks+0x1a4>
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    5498:	12 14       	cp	r1, r2
    549a:	13 04       	cpc	r1, r3
    549c:	cc f4       	brge	.+50     	; 0x54d0 <SD_write_multiple_blocks+0x15a>
	SPIDisable();
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
}

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    549e:	ef 80       	ldd	r14, Y+7	; 0x07
    54a0:	f8 84       	ldd	r15, Y+8	; 0x08
    54a2:	00 e0       	ldi	r16, 0x00	; 0
    54a4:	10 e0       	ldi	r17, 0x00	; 0
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    54a6:	c8 01       	movw	r24, r16
    54a8:	b6 01       	movw	r22, r12
    54aa:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    54ae:	89 87       	std	Y+9, r24	; 0x09
    54b0:	9a 87       	std	Y+10, r25	; 0x0a
    54b2:	f7 01       	movw	r30, r14
    54b4:	81 91       	ld	r24, Z+
    54b6:	7f 01       	movw	r14, r30
    54b8:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    54bc:	e9 85       	ldd	r30, Y+9	; 0x09
    54be:	fa 85       	ldd	r31, Y+10	; 0x0a
    54c0:	ea 0d       	add	r30, r10
    54c2:	fb 1d       	adc	r31, r11
    54c4:	80 83       	st	Z, r24
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    54c6:	0f 5f       	subi	r16, 0xFF	; 255
    54c8:	1f 4f       	sbci	r17, 0xFF	; 255
    54ca:	02 15       	cp	r16, r2
    54cc:	13 05       	cpc	r17, r3
    54ce:	59 f7       	brne	.-42     	; 0x54a6 <SD_write_multiple_blocks+0x130>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    54d0:	14 14       	cp	r1, r4
    54d2:	15 04       	cpc	r1, r5
    54d4:	9c f4       	brge	.+38     	; 0x54fc <SD_write_multiple_blocks+0x186>
    54d6:	00 e0       	ldi	r16, 0x00	; 0
    54d8:	10 e0       	ldi	r17, 0x00	; 0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
    54da:	c8 01       	movw	r24, r16
    54dc:	b6 01       	movw	r22, r12
    54de:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    54e2:	7c 01       	movw	r14, r24
    54e4:	80 e0       	ldi	r24, 0x00	; 0
    54e6:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    54ea:	f5 01       	movw	r30, r10
    54ec:	ee 0d       	add	r30, r14
    54ee:	ff 1d       	adc	r31, r15
    54f0:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    54f2:	0f 5f       	subi	r16, 0xFF	; 255
    54f4:	1f 4f       	sbci	r17, 0xFF	; 255
    54f6:	04 15       	cp	r16, r4
    54f8:	15 05       	cpc	r17, r5
    54fa:	79 f7       	brne	.-34     	; 0x54da <SD_write_multiple_blocks+0x164>
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
    54fc:	8f ef       	ldi	r24, 0xFF	; 255
    54fe:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5502:	f4 01       	movw	r30, r8
    5504:	80 83       	st	Z, r24
    5506:	8f ef       	ldi	r24, 0xFF	; 255
    5508:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    550c:	f4 01       	movw	r30, r8
    550e:	80 83       	st	Z, r24
		Buffer[1] = FILLER_BYTE;
    5510:	10 82       	st	Z, r1
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
    5512:	80 81       	ld	r24, Z
    5514:	8f 3f       	cpi	r24, 0xFF	; 255
    5516:	e1 f4       	brne	.+56     	; 0x5550 <SD_write_multiple_blocks+0x1da>
    5518:	23 c0       	rjmp	.+70     	; 0x5560 <SD_write_multiple_blocks+0x1ea>
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    551a:	e9 80       	ldd	r14, Y+1	; 0x01
    551c:	fa 80       	ldd	r15, Y+2	; 0x02
    551e:	00 e0       	ldi	r16, 0x00	; 0
    5520:	10 e0       	ldi	r17, 0x00	; 0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    5522:	c8 01       	movw	r24, r16
    5524:	b6 01       	movw	r22, r12
    5526:	0e 94 19 37 	call	0x6e32	; 0x6e32 <__divmodhi4>
    552a:	89 87       	std	Y+9, r24	; 0x09
    552c:	9a 87       	std	Y+10, r25	; 0x0a
    552e:	f7 01       	movw	r30, r14
    5530:	81 91       	ld	r24, Z+
    5532:	7f 01       	movw	r14, r30
    5534:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5538:	e9 85       	ldd	r30, Y+9	; 0x09
    553a:	fa 85       	ldd	r31, Y+10	; 0x0a
    553c:	ea 0d       	add	r30, r10
    553e:	fb 1d       	adc	r31, r11
    5540:	80 83       	st	Z, r24
			for (int i=0;i<fillerBytes;i++){
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    5542:	0f 5f       	subi	r16, 0xFF	; 255
    5544:	1f 4f       	sbci	r17, 0xFF	; 255
    5546:	f2 e0       	ldi	r31, 0x02	; 2
    5548:	00 30       	cpi	r16, 0x00	; 0
    554a:	1f 07       	cpc	r17, r31
    554c:	51 f7       	brne	.-44     	; 0x5522 <SD_write_multiple_blocks+0x1ac>
    554e:	d6 cf       	rjmp	.-84     	; 0x54fc <SD_write_multiple_blocks+0x186>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
    5550:	8f ef       	ldi	r24, 0xFF	; 255
    5552:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5556:	f4 01       	movw	r30, r8
    5558:	80 83       	st	Z, r24
    555a:	80 81       	ld	r24, Z
    555c:	8f 3f       	cpi	r24, 0xFF	; 255
    555e:	c1 f7       	brne	.-16     	; 0x5550 <SD_write_multiple_blocks+0x1da>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
    5560:	08 94       	sec
    5562:	61 1c       	adc	r6, r1
    5564:	71 1c       	adc	r7, r1
    5566:	29 81       	ldd	r18, Y+1	; 0x01
    5568:	3a 81       	ldd	r19, Y+2	; 0x02
    556a:	20 50       	subi	r18, 0x00	; 0
    556c:	3e 4f       	sbci	r19, 0xFE	; 254
    556e:	29 83       	std	Y+1, r18	; 0x01
    5570:	3a 83       	std	Y+2, r19	; 0x02
    5572:	8b 81       	ldd	r24, Y+3	; 0x03
    5574:	9c 81       	ldd	r25, Y+4	; 0x04
    5576:	68 16       	cp	r6, r24
    5578:	79 06       	cpc	r7, r25
    557a:	09 f0       	breq	.+2      	; 0x557e <SD_write_multiple_blocks+0x208>
    557c:	7d cf       	rjmp	.-262    	; 0x5478 <SD_write_multiple_blocks+0x102>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    557e:	ee 24       	eor	r14, r14
    5580:	ff 24       	eor	r15, r15
    5582:	68 94       	set
    5584:	e2 f8       	bld	r14, 2
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    5586:	05 e3       	ldi	r16, 0x35	; 53
    5588:	1e e3       	ldi	r17, 0x3E	; 62
    558a:	8f ef       	ldi	r24, 0xFF	; 255
    558c:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5590:	f8 01       	movw	r30, r16
    5592:	80 83       	st	Z, r24
    5594:	08 94       	sec
    5596:	e1 08       	sbc	r14, r1
    5598:	f1 08       	sbc	r15, r1
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
	}
	for(int i=0;i<4;i++){
    559a:	e1 14       	cp	r14, r1
    559c:	f1 04       	cpc	r15, r1
    559e:	a9 f7       	brne	.-22     	; 0x558a <SD_write_multiple_blocks+0x214>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
    55a0:	8d ef       	ldi	r24, 0xFD	; 253
    55a2:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    55a6:	80 93 35 3e 	sts	0x3E35, r24
    55aa:	ee 24       	eor	r14, r14
    55ac:	ff 24       	eor	r15, r15
    55ae:	68 94       	set
    55b0:	e2 f8       	bld	r14, 2
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    55b2:	05 e3       	ldi	r16, 0x35	; 53
    55b4:	1e e3       	ldi	r17, 0x3E	; 62
    55b6:	8f ef       	ldi	r24, 0xFF	; 255
    55b8:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    55bc:	f8 01       	movw	r30, r16
    55be:	80 83       	st	Z, r24
    55c0:	08 94       	sec
    55c2:	e1 08       	sbc	r14, r1
    55c4:	f1 08       	sbc	r15, r1
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
	for(int i=0;i<4;i++){
    55c6:	e1 14       	cp	r14, r1
    55c8:	f1 04       	cpc	r15, r1
    55ca:	a9 f7       	brne	.-22     	; 0x55b6 <SD_write_multiple_blocks+0x240>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = FILLER_BYTE;
    55cc:	10 92 35 3e 	sts	0x3E35, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    55d0:	80 91 35 3e 	lds	r24, 0x3E35
    55d4:	8f 3f       	cpi	r24, 0xFF	; 255
    55d6:	51 f0       	breq	.+20     	; 0x55ec <SD_write_multiple_blocks+0x276>
    55d8:	05 e3       	ldi	r16, 0x35	; 53
    55da:	1e e3       	ldi	r17, 0x3E	; 62
    55dc:	8f ef       	ldi	r24, 0xFF	; 255
    55de:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    55e2:	f8 01       	movw	r30, r16
    55e4:	80 83       	st	Z, r24
    55e6:	80 81       	ld	r24, Z
    55e8:	8f 3f       	cpi	r24, 0xFF	; 255
    55ea:	c1 f7       	brne	.-16     	; 0x55dc <SD_write_multiple_blocks+0x266>
	SPICS(FALSE);
    55ec:	80 e0       	ldi	r24, 0x00	; 0
    55ee:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    55f2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    55f6:	88 e0       	ldi	r24, 0x08	; 8
    55f8:	60 e0       	ldi	r22, 0x00	; 0
    55fa:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
}
    55fe:	2a 96       	adiw	r28, 0x0a	; 10
    5600:	cd bf       	out	0x3d, r28	; 61
    5602:	de bf       	out	0x3e, r29	; 62
    5604:	df 91       	pop	r29
    5606:	cf 91       	pop	r28
    5608:	1f 91       	pop	r17
    560a:	0f 91       	pop	r16
    560c:	ff 90       	pop	r15
    560e:	ef 90       	pop	r14
    5610:	df 90       	pop	r13
    5612:	cf 90       	pop	r12
    5614:	bf 90       	pop	r11
    5616:	af 90       	pop	r10
    5618:	9f 90       	pop	r9
    561a:	8f 90       	pop	r8
    561c:	7f 90       	pop	r7
    561e:	6f 90       	pop	r6
    5620:	5f 90       	pop	r5
    5622:	4f 90       	pop	r4
    5624:	3f 90       	pop	r3
    5626:	2f 90       	pop	r2
    5628:	08 95       	ret

0000562a <SD_read_multiple_blocks>:
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
    562a:	2f 92       	push	r2
    562c:	3f 92       	push	r3
    562e:	4f 92       	push	r4
    5630:	5f 92       	push	r5
    5632:	6f 92       	push	r6
    5634:	7f 92       	push	r7
    5636:	8f 92       	push	r8
    5638:	9f 92       	push	r9
    563a:	af 92       	push	r10
    563c:	bf 92       	push	r11
    563e:	cf 92       	push	r12
    5640:	df 92       	push	r13
    5642:	ef 92       	push	r14
    5644:	ff 92       	push	r15
    5646:	0f 93       	push	r16
    5648:	1f 93       	push	r17
    564a:	cf 93       	push	r28
    564c:	df 93       	push	r29
    564e:	6b 01       	movw	r12, r22
    5650:	7c 01       	movw	r14, r24
    5652:	c4 2f       	mov	r28, r20
    5654:	85 2e       	mov	r8, r21
    5656:	39 01       	movw	r6, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5658:	88 e0       	ldi	r24, 0x08	; 8
    565a:	60 e0       	ldi	r22, 0x00	; 0
    565c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    5660:	80 e0       	ldi	r24, 0x00	; 0
    5662:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    5666:	81 e0       	ldi	r24, 0x01	; 1
    5668:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
    566c:	82 e1       	ldi	r24, 0x12	; 18
    566e:	b7 01       	movw	r22, r14
    5670:	a6 01       	movw	r20, r12
    5672:	2f ef       	ldi	r18, 0xFF	; 255
    5674:	08 e0       	ldi	r16, 0x08	; 8
    5676:	10 e0       	ldi	r17, 0x00	; 0
    5678:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
    567c:	88 23       	and	r24, r24
    567e:	b1 f7       	brne	.-20     	; 0x566c <SD_read_multiple_blocks+0x42>
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    5680:	16 14       	cp	r1, r6
    5682:	17 04       	cpc	r1, r7
    5684:	0c f0       	brlt	.+2      	; 0x5688 <SD_read_multiple_blocks+0x5e>
    5686:	46 c0       	rjmp	.+140    	; 0x5714 <SD_read_multiple_blocks+0xea>
    5688:	ac 2e       	mov	r10, r28
    568a:	b8 2c       	mov	r11, r8
    568c:	88 24       	eor	r8, r8
    568e:	99 24       	eor	r9, r9
		Buffer[1]=SDHC_DUMMY_BYTE;
    5690:	0f 2e       	mov	r0, r31
    5692:	f5 e3       	ldi	r31, 0x35	; 53
    5694:	cf 2e       	mov	r12, r31
    5696:	fe e3       	ldi	r31, 0x3E	; 62
    5698:	df 2e       	mov	r13, r31
    569a:	f0 2d       	mov	r31, r0
    569c:	ff 24       	eor	r15, r15
    569e:	fa 94       	dec	r15
    56a0:	ef 2c       	mov	r14, r15
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    56a2:	0f 2e       	mov	r0, r31
    56a4:	f4 e3       	ldi	r31, 0x34	; 52
    56a6:	4f 2e       	mov	r4, r31
    56a8:	fe e3       	ldi	r31, 0x3E	; 62
    56aa:	5f 2e       	mov	r5, r31
    56ac:	f0 2d       	mov	r31, r0
    56ae:	12 01       	movw	r2, r4
    56b0:	08 94       	sec
    56b2:	21 1c       	adc	r2, r1
    56b4:	31 1c       	adc	r3, r1
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
    56b6:	f6 01       	movw	r30, r12
    56b8:	e0 82       	st	Z, r14
		while(Buffer[1] != SDHC_DATA_TOKEN){
    56ba:	80 81       	ld	r24, Z
    56bc:	8e 3f       	cpi	r24, 0xFE	; 254
    56be:	41 f0       	breq	.+16     	; 0x56d0 <SD_read_multiple_blocks+0xa6>
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
    56c0:	8f 2d       	mov	r24, r15
    56c2:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    56c6:	f6 01       	movw	r30, r12
    56c8:	80 83       	st	Z, r24
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
    56ca:	80 81       	ld	r24, Z
    56cc:	8e 3f       	cpi	r24, 0xFE	; 254
    56ce:	c1 f7       	brne	.-16     	; 0x56c0 <SD_read_multiple_blocks+0x96>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    56d0:	85 01       	movw	r16, r10
    56d2:	c0 e0       	ldi	r28, 0x00	; 0
    56d4:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    56d6:	8f 2d       	mov	r24, r15
    56d8:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    56dc:	f8 01       	movw	r30, r16
    56de:	81 93       	st	Z+, r24
    56e0:	8f 01       	movw	r16, r30
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    56e2:	21 96       	adiw	r28, 0x01	; 1
    56e4:	f2 e0       	ldi	r31, 0x02	; 2
    56e6:	c0 30       	cpi	r28, 0x00	; 0
    56e8:	df 07       	cpc	r29, r31
    56ea:	a9 f7       	brne	.-22     	; 0x56d6 <SD_read_multiple_blocks+0xac>
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    56ec:	8f 2d       	mov	r24, r15
    56ee:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    56f2:	f2 01       	movw	r30, r4
    56f4:	80 83       	st	Z, r24
    56f6:	8f 2d       	mov	r24, r15
    56f8:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    56fc:	f1 01       	movw	r30, r2
    56fe:	80 83       	st	Z, r24
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    5700:	08 94       	sec
    5702:	81 1c       	adc	r8, r1
    5704:	91 1c       	adc	r9, r1
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	92 e0       	ldi	r25, 0x02	; 2
    570a:	a8 0e       	add	r10, r24
    570c:	b9 1e       	adc	r11, r25
    570e:	86 14       	cp	r8, r6
    5710:	97 04       	cpc	r9, r7
    5712:	89 f6       	brne	.-94     	; 0x56b6 <SD_read_multiple_blocks+0x8c>
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
		}
	}
	SD_command(SDHC_CMD_STOP_TRANSMISSION,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//send command to stop reading data
    5714:	8c e0       	ldi	r24, 0x0C	; 12
    5716:	40 e0       	ldi	r20, 0x00	; 0
    5718:	50 e0       	ldi	r21, 0x00	; 0
    571a:	ba 01       	movw	r22, r20
    571c:	2f ef       	ldi	r18, 0xFF	; 255
    571e:	08 e0       	ldi	r16, 0x08	; 8
    5720:	10 e0       	ldi	r17, 0x00	; 0
    5722:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <SD_command>
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//read the stuff byte
    5726:	8f ef       	ldi	r24, 0xFF	; 255
    5728:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    572c:	80 93 34 3e 	sts	0x3E34, r24
	Buffer[1] = FILLER_BYTE;
    5730:	10 92 35 3e 	sts	0x3E35, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    5734:	80 91 35 3e 	lds	r24, 0x3E35
    5738:	8f 3f       	cpi	r24, 0xFF	; 255
    573a:	49 f0       	breq	.+18     	; 0x574e <SD_read_multiple_blocks+0x124>
    573c:	c5 e3       	ldi	r28, 0x35	; 53
    573e:	de e3       	ldi	r29, 0x3E	; 62
    5740:	8f ef       	ldi	r24, 0xFF	; 255
    5742:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5746:	88 83       	st	Y, r24
    5748:	88 81       	ld	r24, Y
    574a:	8f 3f       	cpi	r24, 0xFF	; 255
    574c:	c9 f7       	brne	.-14     	; 0x5740 <SD_read_multiple_blocks+0x116>
	SPICS(FALSE);
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    5754:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    5758:	88 e0       	ldi	r24, 0x08	; 8
    575a:	60 e0       	ldi	r22, 0x00	; 0
    575c:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
}
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	1f 91       	pop	r17
    5766:	0f 91       	pop	r16
    5768:	ff 90       	pop	r15
    576a:	ef 90       	pop	r14
    576c:	df 90       	pop	r13
    576e:	cf 90       	pop	r12
    5770:	bf 90       	pop	r11
    5772:	af 90       	pop	r10
    5774:	9f 90       	pop	r9
    5776:	8f 90       	pop	r8
    5778:	7f 90       	pop	r7
    577a:	6f 90       	pop	r6
    577c:	5f 90       	pop	r5
    577e:	4f 90       	pop	r4
    5780:	3f 90       	pop	r3
    5782:	2f 90       	pop	r2
    5784:	08 95       	ret

00005786 <SD_disable>:
//this function deselects the sd card and turns off power to the port expander and the sd card
void SD_disable(){
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //pull SD card CS high
    5786:	88 e0       	ldi	r24, 0x08	; 8
    5788:	60 e0       	ldi	r22, 0x00	; 0
    578a:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);
    578e:	88 e0       	ldi	r24, 0x08	; 8
    5790:	60 e0       	ldi	r22, 0x00	; 0
    5792:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
	SPIInit(SPI_MODE_0_gc);
    5796:	80 e0       	ldi	r24, 0x00	; 0
    5798:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    579c:	81 e0       	ldi	r24, 0x01	; 1
    579e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPI_write(SDHC_DUMMY_BYTE);	//must write a byte to spi when cd card cs is high to have sd card release MISO line
    57a2:	8f ef       	ldi	r24, 0xFF	; 255
    57a4:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPICS(FALSE);	//stop spi
    57a8:	80 e0       	ldi	r24, 0x00	; 0
    57aa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    57ae:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	
	ADCPower(FALSE);		//turn off portEX power
    57b2:	80 e0       	ldi	r24, 0x00	; 0
    57b4:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	Ext1Power(FALSE);			//power down SD card
    57b8:	80 e0       	ldi	r24, 0x00	; 0
    57ba:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Ext1Power>
}
    57be:	08 95       	ret

000057c0 <__muldi3>:
    57c0:	a0 e3       	ldi	r26, 0x30	; 48
    57c2:	b0 e0       	ldi	r27, 0x00	; 0
    57c4:	e6 ee       	ldi	r30, 0xE6	; 230
    57c6:	fb e2       	ldi	r31, 0x2B	; 43
    57c8:	0c 94 7f 37 	jmp	0x6efe	; 0x6efe <__prologue_saves__+0x4>
    57cc:	29 8f       	std	Y+25, r18	; 0x19
    57ce:	3a 8f       	std	Y+26, r19	; 0x1a
    57d0:	4b 8f       	std	Y+27, r20	; 0x1b
    57d2:	5c 8f       	std	Y+28, r21	; 0x1c
    57d4:	6d 8f       	std	Y+29, r22	; 0x1d
    57d6:	7e 8f       	std	Y+30, r23	; 0x1e
    57d8:	8f 8f       	std	Y+31, r24	; 0x1f
    57da:	98 a3       	lds	r25, 0x58
    57dc:	a9 8a       	std	Y+17, r10	; 0x11
    57de:	ba 8a       	std	Y+18, r11	; 0x12
    57e0:	cb 8a       	std	Y+19, r12	; 0x13
    57e2:	dc 8a       	std	Y+20, r13	; 0x14
    57e4:	ed 8a       	std	Y+21, r14	; 0x15
    57e6:	fe 8a       	std	Y+22, r15	; 0x16
    57e8:	0f 8b       	std	Y+23, r16	; 0x17
    57ea:	18 8f       	std	Y+24, r17	; 0x18
    57ec:	09 8d       	ldd	r16, Y+25	; 0x19
    57ee:	1a 8d       	ldd	r17, Y+26	; 0x1a
    57f0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    57f2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    57f4:	09 a3       	lds	r16, 0x59
    57f6:	1a a3       	lds	r17, 0x5a
    57f8:	2b a3       	lds	r18, 0x5b
    57fa:	3c a3       	lds	r19, 0x5c
    57fc:	68 01       	movw	r12, r16
    57fe:	79 01       	movw	r14, r18
    5800:	8f ef       	ldi	r24, 0xFF	; 255
    5802:	9f ef       	ldi	r25, 0xFF	; 255
    5804:	a0 e0       	ldi	r26, 0x00	; 0
    5806:	b0 e0       	ldi	r27, 0x00	; 0
    5808:	c8 22       	and	r12, r24
    580a:	d9 22       	and	r13, r25
    580c:	ea 22       	and	r14, r26
    580e:	fb 22       	and	r15, r27
    5810:	89 01       	movw	r16, r18
    5812:	22 27       	eor	r18, r18
    5814:	33 27       	eor	r19, r19
    5816:	09 a7       	lds	r16, 0x79
    5818:	1a a7       	lds	r17, 0x7a
    581a:	2b a7       	lds	r18, 0x7b
    581c:	3c a7       	lds	r19, 0x7c
    581e:	09 89       	ldd	r16, Y+17	; 0x11
    5820:	1a 89       	ldd	r17, Y+18	; 0x12
    5822:	2b 89       	ldd	r18, Y+19	; 0x13
    5824:	3c 89       	ldd	r19, Y+20	; 0x14
    5826:	0d a3       	lds	r16, 0x5d
    5828:	1e a3       	lds	r17, 0x5e
    582a:	2f a3       	lds	r18, 0x5f
    582c:	38 a7       	lds	r19, 0x78
    582e:	48 01       	movw	r8, r16
    5830:	59 01       	movw	r10, r18
    5832:	88 22       	and	r8, r24
    5834:	99 22       	and	r9, r25
    5836:	aa 22       	and	r10, r26
    5838:	bb 22       	and	r11, r27
    583a:	29 01       	movw	r4, r18
    583c:	66 24       	eor	r6, r6
    583e:	77 24       	eor	r7, r7
    5840:	c5 01       	movw	r24, r10
    5842:	b4 01       	movw	r22, r8
    5844:	a7 01       	movw	r20, r14
    5846:	96 01       	movw	r18, r12
    5848:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    584c:	6d a7       	lds	r22, 0x7d
    584e:	7e a7       	lds	r23, 0x7e
    5850:	8f a7       	lds	r24, 0x7f
    5852:	98 ab       	sts	0x58, r25
    5854:	c3 01       	movw	r24, r6
    5856:	b2 01       	movw	r22, r4
    5858:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    585c:	6b 01       	movw	r12, r22
    585e:	7c 01       	movw	r14, r24
    5860:	c5 01       	movw	r24, r10
    5862:	b4 01       	movw	r22, r8
    5864:	29 a5       	lds	r18, 0x69
    5866:	3a a5       	lds	r19, 0x6a
    5868:	4b a5       	lds	r20, 0x6b
    586a:	5c a5       	lds	r21, 0x6c
    586c:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    5870:	4b 01       	movw	r8, r22
    5872:	5c 01       	movw	r10, r24
    5874:	c3 01       	movw	r24, r6
    5876:	b2 01       	movw	r22, r4
    5878:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    587c:	ab 01       	movw	r20, r22
    587e:	bc 01       	movw	r22, r24
    5880:	c8 0c       	add	r12, r8
    5882:	d9 1c       	adc	r13, r9
    5884:	ea 1c       	adc	r14, r10
    5886:	fb 1c       	adc	r15, r11
    5888:	0d a5       	lds	r16, 0x6d
    588a:	1e a5       	lds	r17, 0x6e
    588c:	2f a5       	lds	r18, 0x6f
    588e:	38 a9       	sts	0x48, r19
    5890:	c9 01       	movw	r24, r18
    5892:	aa 27       	eor	r26, r26
    5894:	bb 27       	eor	r27, r27
    5896:	c8 0e       	add	r12, r24
    5898:	d9 1e       	adc	r13, r25
    589a:	ea 1e       	adc	r14, r26
    589c:	fb 1e       	adc	r15, r27
    589e:	c8 14       	cp	r12, r8
    58a0:	d9 04       	cpc	r13, r9
    58a2:	ea 04       	cpc	r14, r10
    58a4:	fb 04       	cpc	r15, r11
    58a6:	20 f4       	brcc	.+8      	; 0x58b0 <__muldi3+0xf0>
    58a8:	40 50       	subi	r20, 0x00	; 0
    58aa:	50 40       	sbci	r21, 0x00	; 0
    58ac:	6f 4f       	sbci	r22, 0xFF	; 255
    58ae:	7f 4f       	sbci	r23, 0xFF	; 255
    58b0:	c7 01       	movw	r24, r14
    58b2:	aa 27       	eor	r26, r26
    58b4:	bb 27       	eor	r27, r27
    58b6:	84 0f       	add	r24, r20
    58b8:	95 1f       	adc	r25, r21
    58ba:	a6 1f       	adc	r26, r22
    58bc:	b7 1f       	adc	r27, r23
    58be:	8d 83       	std	Y+5, r24	; 0x05
    58c0:	9e 83       	std	Y+6, r25	; 0x06
    58c2:	af 83       	std	Y+7, r26	; 0x07
    58c4:	b8 87       	std	Y+8, r27	; 0x08
    58c6:	76 01       	movw	r14, r12
    58c8:	dd 24       	eor	r13, r13
    58ca:	cc 24       	eor	r12, r12
    58cc:	4d a5       	lds	r20, 0x6d
    58ce:	5e a5       	lds	r21, 0x6e
    58d0:	6f a5       	lds	r22, 0x6f
    58d2:	78 a9       	sts	0x48, r23
    58d4:	60 70       	andi	r22, 0x00	; 0
    58d6:	70 70       	andi	r23, 0x00	; 0
    58d8:	c4 0e       	add	r12, r20
    58da:	d5 1e       	adc	r13, r21
    58dc:	e6 1e       	adc	r14, r22
    58de:	f7 1e       	adc	r15, r23
    58e0:	c9 82       	std	Y+1, r12	; 0x01
    58e2:	da 82       	std	Y+2, r13	; 0x02
    58e4:	eb 82       	std	Y+3, r14	; 0x03
    58e6:	fc 82       	std	Y+4, r15	; 0x04
    58e8:	1c 2d       	mov	r17, r12
    58ea:	0a 81       	ldd	r16, Y+2	; 0x02
    58ec:	8b 80       	ldd	r8, Y+3	; 0x03
    58ee:	4c 80       	ldd	r4, Y+4	; 0x04
    58f0:	8d 87       	std	Y+13, r24	; 0x0d
    58f2:	8e 81       	ldd	r24, Y+6	; 0x06
    58f4:	8e 87       	std	Y+14, r24	; 0x0e
    58f6:	8f 81       	ldd	r24, Y+7	; 0x07
    58f8:	8f 87       	std	Y+15, r24	; 0x0f
    58fa:	88 85       	ldd	r24, Y+8	; 0x08
    58fc:	88 8b       	std	Y+16, r24	; 0x10
    58fe:	2d 89       	ldd	r18, Y+21	; 0x15
    5900:	3e 89       	ldd	r19, Y+22	; 0x16
    5902:	4f 89       	ldd	r20, Y+23	; 0x17
    5904:	58 8d       	ldd	r21, Y+24	; 0x18
    5906:	69 a1       	lds	r22, 0x49
    5908:	7a a1       	lds	r23, 0x4a
    590a:	8b a1       	lds	r24, 0x4b
    590c:	9c a1       	lds	r25, 0x4c
    590e:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    5912:	6b 01       	movw	r12, r22
    5914:	7c 01       	movw	r14, r24
    5916:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5918:	3e 8d       	ldd	r19, Y+30	; 0x1e
    591a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    591c:	58 a1       	lds	r21, 0x48
    591e:	6d a1       	lds	r22, 0x4d
    5920:	7e a1       	lds	r23, 0x4e
    5922:	8f a1       	lds	r24, 0x4f
    5924:	98 a5       	lds	r25, 0x68
    5926:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    592a:	dc 01       	movw	r26, r24
    592c:	cb 01       	movw	r24, r22
    592e:	c8 0e       	add	r12, r24
    5930:	d9 1e       	adc	r13, r25
    5932:	ea 1e       	adc	r14, r26
    5934:	fb 1e       	adc	r15, r27
    5936:	8d 85       	ldd	r24, Y+13	; 0x0d
    5938:	9e 85       	ldd	r25, Y+14	; 0x0e
    593a:	af 85       	ldd	r26, Y+15	; 0x0f
    593c:	b8 89       	ldd	r27, Y+16	; 0x10
    593e:	8c 0d       	add	r24, r12
    5940:	9d 1d       	adc	r25, r13
    5942:	ae 1d       	adc	r26, r14
    5944:	bf 1d       	adc	r27, r15
    5946:	8d 87       	std	Y+13, r24	; 0x0d
    5948:	9e 87       	std	Y+14, r25	; 0x0e
    594a:	af 87       	std	Y+15, r26	; 0x0f
    594c:	b8 8b       	std	Y+16, r27	; 0x10
    594e:	68 2f       	mov	r22, r24
    5950:	7e 85       	ldd	r23, Y+14	; 0x0e
    5952:	21 2f       	mov	r18, r17
    5954:	30 2f       	mov	r19, r16
    5956:	48 2d       	mov	r20, r8
    5958:	54 2d       	mov	r21, r4
    595a:	8f 85       	ldd	r24, Y+15	; 0x0f
    595c:	98 89       	ldd	r25, Y+16	; 0x10
    595e:	e0 96       	adiw	r28, 0x30	; 48
    5960:	e0 e1       	ldi	r30, 0x10	; 16
    5962:	0c 94 98 37 	jmp	0x6f30	; 0x6f30 <__epilogue_restores__+0x4>

00005966 <__ashldi3>:
    5966:	cf 92       	push	r12
    5968:	df 92       	push	r13
    596a:	ef 92       	push	r14
    596c:	ff 92       	push	r15
    596e:	0f 93       	push	r16
    5970:	cf 93       	push	r28
    5972:	df 93       	push	r29
    5974:	cd b7       	in	r28, 0x3d	; 61
    5976:	de b7       	in	r29, 0x3e	; 62
    5978:	60 97       	sbiw	r28, 0x10	; 16
    597a:	cd bf       	out	0x3d, r28	; 61
    597c:	de bf       	out	0x3e, r29	; 62
    597e:	00 23       	and	r16, r16
    5980:	09 f4       	brne	.+2      	; 0x5984 <__ashldi3+0x1e>
    5982:	5a c0       	rjmp	.+180    	; 0x5a38 <__ashldi3+0xd2>
    5984:	29 87       	std	Y+9, r18	; 0x09
    5986:	3a 87       	std	Y+10, r19	; 0x0a
    5988:	4b 87       	std	Y+11, r20	; 0x0b
    598a:	5c 87       	std	Y+12, r21	; 0x0c
    598c:	6d 87       	std	Y+13, r22	; 0x0d
    598e:	7e 87       	std	Y+14, r23	; 0x0e
    5990:	8f 87       	std	Y+15, r24	; 0x0f
    5992:	98 8b       	std	Y+16, r25	; 0x10
    5994:	80 e2       	ldi	r24, 0x20	; 32
    5996:	80 1b       	sub	r24, r16
    5998:	49 85       	ldd	r20, Y+9	; 0x09
    599a:	5a 85       	ldd	r21, Y+10	; 0x0a
    599c:	6b 85       	ldd	r22, Y+11	; 0x0b
    599e:	7c 85       	ldd	r23, Y+12	; 0x0c
    59a0:	18 16       	cp	r1, r24
    59a2:	b4 f0       	brlt	.+44     	; 0x59d0 <__ashldi3+0x6a>
    59a4:	19 82       	std	Y+1, r1	; 0x01
    59a6:	1a 82       	std	Y+2, r1	; 0x02
    59a8:	1b 82       	std	Y+3, r1	; 0x03
    59aa:	1c 82       	std	Y+4, r1	; 0x04
    59ac:	99 27       	eor	r25, r25
    59ae:	87 fd       	sbrc	r24, 7
    59b0:	90 95       	com	r25
    59b2:	90 95       	com	r25
    59b4:	81 95       	neg	r24
    59b6:	9f 4f       	sbci	r25, 0xFF	; 255
    59b8:	04 c0       	rjmp	.+8      	; 0x59c2 <__ashldi3+0x5c>
    59ba:	44 0f       	add	r20, r20
    59bc:	55 1f       	adc	r21, r21
    59be:	66 1f       	adc	r22, r22
    59c0:	77 1f       	adc	r23, r23
    59c2:	8a 95       	dec	r24
    59c4:	d2 f7       	brpl	.-12     	; 0x59ba <__ashldi3+0x54>
    59c6:	4d 83       	std	Y+5, r20	; 0x05
    59c8:	5e 83       	std	Y+6, r21	; 0x06
    59ca:	6f 83       	std	Y+7, r22	; 0x07
    59cc:	78 87       	std	Y+8, r23	; 0x08
    59ce:	2c c0       	rjmp	.+88     	; 0x5a28 <__ashldi3+0xc2>
    59d0:	6a 01       	movw	r12, r20
    59d2:	7b 01       	movw	r14, r22
    59d4:	00 2e       	mov	r0, r16
    59d6:	04 c0       	rjmp	.+8      	; 0x59e0 <__ashldi3+0x7a>
    59d8:	cc 0c       	add	r12, r12
    59da:	dd 1c       	adc	r13, r13
    59dc:	ee 1c       	adc	r14, r14
    59de:	ff 1c       	adc	r15, r15
    59e0:	0a 94       	dec	r0
    59e2:	d2 f7       	brpl	.-12     	; 0x59d8 <__ashldi3+0x72>
    59e4:	c9 82       	std	Y+1, r12	; 0x01
    59e6:	da 82       	std	Y+2, r13	; 0x02
    59e8:	eb 82       	std	Y+3, r14	; 0x03
    59ea:	fc 82       	std	Y+4, r15	; 0x04
    59ec:	6a 01       	movw	r12, r20
    59ee:	7b 01       	movw	r14, r22
    59f0:	04 c0       	rjmp	.+8      	; 0x59fa <__ashldi3+0x94>
    59f2:	f6 94       	lsr	r15
    59f4:	e7 94       	ror	r14
    59f6:	d7 94       	ror	r13
    59f8:	c7 94       	ror	r12
    59fa:	8a 95       	dec	r24
    59fc:	d2 f7       	brpl	.-12     	; 0x59f2 <__ashldi3+0x8c>
    59fe:	d7 01       	movw	r26, r14
    5a00:	c6 01       	movw	r24, r12
    5a02:	4d 85       	ldd	r20, Y+13	; 0x0d
    5a04:	5e 85       	ldd	r21, Y+14	; 0x0e
    5a06:	6f 85       	ldd	r22, Y+15	; 0x0f
    5a08:	78 89       	ldd	r23, Y+16	; 0x10
    5a0a:	04 c0       	rjmp	.+8      	; 0x5a14 <__ashldi3+0xae>
    5a0c:	44 0f       	add	r20, r20
    5a0e:	55 1f       	adc	r21, r21
    5a10:	66 1f       	adc	r22, r22
    5a12:	77 1f       	adc	r23, r23
    5a14:	0a 95       	dec	r16
    5a16:	d2 f7       	brpl	.-12     	; 0x5a0c <__ashldi3+0xa6>
    5a18:	84 2b       	or	r24, r20
    5a1a:	95 2b       	or	r25, r21
    5a1c:	a6 2b       	or	r26, r22
    5a1e:	b7 2b       	or	r27, r23
    5a20:	8d 83       	std	Y+5, r24	; 0x05
    5a22:	9e 83       	std	Y+6, r25	; 0x06
    5a24:	af 83       	std	Y+7, r26	; 0x07
    5a26:	b8 87       	std	Y+8, r27	; 0x08
    5a28:	29 81       	ldd	r18, Y+1	; 0x01
    5a2a:	3a 81       	ldd	r19, Y+2	; 0x02
    5a2c:	4b 81       	ldd	r20, Y+3	; 0x03
    5a2e:	5c 81       	ldd	r21, Y+4	; 0x04
    5a30:	6d 81       	ldd	r22, Y+5	; 0x05
    5a32:	7e 81       	ldd	r23, Y+6	; 0x06
    5a34:	8f 81       	ldd	r24, Y+7	; 0x07
    5a36:	98 85       	ldd	r25, Y+8	; 0x08
    5a38:	60 96       	adiw	r28, 0x10	; 16
    5a3a:	cd bf       	out	0x3d, r28	; 61
    5a3c:	de bf       	out	0x3e, r29	; 62
    5a3e:	df 91       	pop	r29
    5a40:	cf 91       	pop	r28
    5a42:	0f 91       	pop	r16
    5a44:	ff 90       	pop	r15
    5a46:	ef 90       	pop	r14
    5a48:	df 90       	pop	r13
    5a4a:	cf 90       	pop	r12
    5a4c:	08 95       	ret

00005a4e <__ashrdi3>:
    5a4e:	0f 93       	push	r16
    5a50:	cf 93       	push	r28
    5a52:	df 93       	push	r29
    5a54:	cd b7       	in	r28, 0x3d	; 61
    5a56:	de b7       	in	r29, 0x3e	; 62
    5a58:	60 97       	sbiw	r28, 0x10	; 16
    5a5a:	cd bf       	out	0x3d, r28	; 61
    5a5c:	de bf       	out	0x3e, r29	; 62
    5a5e:	00 23       	and	r16, r16
    5a60:	09 f4       	brne	.+2      	; 0x5a64 <__ashrdi3+0x16>
    5a62:	56 c0       	rjmp	.+172    	; 0x5b10 <__ashrdi3+0xc2>
    5a64:	29 87       	std	Y+9, r18	; 0x09
    5a66:	3a 87       	std	Y+10, r19	; 0x0a
    5a68:	4b 87       	std	Y+11, r20	; 0x0b
    5a6a:	5c 87       	std	Y+12, r21	; 0x0c
    5a6c:	6d 87       	std	Y+13, r22	; 0x0d
    5a6e:	7e 87       	std	Y+14, r23	; 0x0e
    5a70:	8f 87       	std	Y+15, r24	; 0x0f
    5a72:	98 8b       	std	Y+16, r25	; 0x10
    5a74:	20 e2       	ldi	r18, 0x20	; 32
    5a76:	20 1b       	sub	r18, r16
    5a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a7c:	af 85       	ldd	r26, Y+15	; 0x0f
    5a7e:	b8 89       	ldd	r27, Y+16	; 0x10
    5a80:	ac 01       	movw	r20, r24
    5a82:	bd 01       	movw	r22, r26
    5a84:	12 16       	cp	r1, r18
    5a86:	b4 f0       	brlt	.+44     	; 0x5ab4 <__ashrdi3+0x66>
    5a88:	77 0f       	add	r23, r23
    5a8a:	44 0b       	sbc	r20, r20
    5a8c:	54 2f       	mov	r21, r20
    5a8e:	ba 01       	movw	r22, r20
    5a90:	4d 83       	std	Y+5, r20	; 0x05
    5a92:	5e 83       	std	Y+6, r21	; 0x06
    5a94:	6f 83       	std	Y+7, r22	; 0x07
    5a96:	78 87       	std	Y+8, r23	; 0x08
    5a98:	33 27       	eor	r19, r19
    5a9a:	27 fd       	sbrc	r18, 7
    5a9c:	30 95       	com	r19
    5a9e:	30 95       	com	r19
    5aa0:	21 95       	neg	r18
    5aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    5aa4:	04 c0       	rjmp	.+8      	; 0x5aae <__ashrdi3+0x60>
    5aa6:	b5 95       	asr	r27
    5aa8:	a7 95       	ror	r26
    5aaa:	97 95       	ror	r25
    5aac:	87 95       	ror	r24
    5aae:	2a 95       	dec	r18
    5ab0:	d2 f7       	brpl	.-12     	; 0x5aa6 <__ashrdi3+0x58>
    5ab2:	22 c0       	rjmp	.+68     	; 0x5af8 <__ashrdi3+0xaa>
    5ab4:	00 2e       	mov	r0, r16
    5ab6:	04 c0       	rjmp	.+8      	; 0x5ac0 <__ashrdi3+0x72>
    5ab8:	75 95       	asr	r23
    5aba:	67 95       	ror	r22
    5abc:	57 95       	ror	r21
    5abe:	47 95       	ror	r20
    5ac0:	0a 94       	dec	r0
    5ac2:	d2 f7       	brpl	.-12     	; 0x5ab8 <__ashrdi3+0x6a>
    5ac4:	4d 83       	std	Y+5, r20	; 0x05
    5ac6:	5e 83       	std	Y+6, r21	; 0x06
    5ac8:	6f 83       	std	Y+7, r22	; 0x07
    5aca:	78 87       	std	Y+8, r23	; 0x08
    5acc:	04 c0       	rjmp	.+8      	; 0x5ad6 <__ashrdi3+0x88>
    5ace:	88 0f       	add	r24, r24
    5ad0:	99 1f       	adc	r25, r25
    5ad2:	aa 1f       	adc	r26, r26
    5ad4:	bb 1f       	adc	r27, r27
    5ad6:	2a 95       	dec	r18
    5ad8:	d2 f7       	brpl	.-12     	; 0x5ace <__ashrdi3+0x80>
    5ada:	49 85       	ldd	r20, Y+9	; 0x09
    5adc:	5a 85       	ldd	r21, Y+10	; 0x0a
    5ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ae2:	04 c0       	rjmp	.+8      	; 0x5aec <__ashrdi3+0x9e>
    5ae4:	76 95       	lsr	r23
    5ae6:	67 95       	ror	r22
    5ae8:	57 95       	ror	r21
    5aea:	47 95       	ror	r20
    5aec:	0a 95       	dec	r16
    5aee:	d2 f7       	brpl	.-12     	; 0x5ae4 <__ashrdi3+0x96>
    5af0:	84 2b       	or	r24, r20
    5af2:	95 2b       	or	r25, r21
    5af4:	a6 2b       	or	r26, r22
    5af6:	b7 2b       	or	r27, r23
    5af8:	89 83       	std	Y+1, r24	; 0x01
    5afa:	9a 83       	std	Y+2, r25	; 0x02
    5afc:	ab 83       	std	Y+3, r26	; 0x03
    5afe:	bc 83       	std	Y+4, r27	; 0x04
    5b00:	29 81       	ldd	r18, Y+1	; 0x01
    5b02:	3a 81       	ldd	r19, Y+2	; 0x02
    5b04:	4b 81       	ldd	r20, Y+3	; 0x03
    5b06:	5c 81       	ldd	r21, Y+4	; 0x04
    5b08:	6d 81       	ldd	r22, Y+5	; 0x05
    5b0a:	7e 81       	ldd	r23, Y+6	; 0x06
    5b0c:	8f 81       	ldd	r24, Y+7	; 0x07
    5b0e:	98 85       	ldd	r25, Y+8	; 0x08
    5b10:	60 96       	adiw	r28, 0x10	; 16
    5b12:	cd bf       	out	0x3d, r28	; 61
    5b14:	de bf       	out	0x3e, r29	; 62
    5b16:	df 91       	pop	r29
    5b18:	cf 91       	pop	r28
    5b1a:	0f 91       	pop	r16
    5b1c:	08 95       	ret

00005b1e <__divdi3>:
    5b1e:	a8 e4       	ldi	r26, 0x48	; 72
    5b20:	b0 e0       	ldi	r27, 0x00	; 0
    5b22:	e5 e9       	ldi	r30, 0x95	; 149
    5b24:	fd e2       	ldi	r31, 0x2D	; 45
    5b26:	0c 94 7e 37 	jmp	0x6efc	; 0x6efc <__prologue_saves__+0x2>
    5b2a:	f5 01       	movw	r30, r10
    5b2c:	29 a3       	lds	r18, 0x59
    5b2e:	3a a3       	lds	r19, 0x5a
    5b30:	4b a3       	lds	r20, 0x5b
    5b32:	5c a3       	lds	r21, 0x5c
    5b34:	6d a3       	lds	r22, 0x5d
    5b36:	7e a3       	lds	r23, 0x5e
    5b38:	8f a3       	lds	r24, 0x5f
    5b3a:	98 a7       	lds	r25, 0x78
    5b3c:	a9 8e       	std	Y+25, r10	; 0x19
    5b3e:	fa 8f       	std	Y+26, r31	; 0x1a
    5b40:	cb 8e       	std	Y+27, r12	; 0x1b
    5b42:	dc 8e       	std	Y+28, r13	; 0x1c
    5b44:	ed 8e       	std	Y+29, r14	; 0x1d
    5b46:	fe 8e       	std	Y+30, r15	; 0x1e
    5b48:	0f 8f       	std	Y+31, r16	; 0x1f
    5b4a:	18 a3       	lds	r17, 0x58
    5b4c:	8d a0       	lds	r24, 0x8d
    5b4e:	9e a0       	lds	r25, 0x8e
    5b50:	af a0       	lds	r26, 0x8f
    5b52:	b8 a4       	lds	r27, 0xa8
    5b54:	b7 fe       	sbrs	r11, 7
    5b56:	67 c0       	rjmp	.+206    	; 0x5c26 <__divdi3+0x108>
    5b58:	21 95       	neg	r18
    5b5a:	b1 e0       	ldi	r27, 0x01	; 1
    5b5c:	12 16       	cp	r1, r18
    5b5e:	08 f0       	brcs	.+2      	; 0x5b62 <__divdi3+0x44>
    5b60:	b0 e0       	ldi	r27, 0x00	; 0
    5b62:	31 95       	neg	r19
    5b64:	a1 e0       	ldi	r26, 0x01	; 1
    5b66:	13 16       	cp	r1, r19
    5b68:	08 f0       	brcs	.+2      	; 0x5b6c <__divdi3+0x4e>
    5b6a:	a0 e0       	ldi	r26, 0x00	; 0
    5b6c:	b3 2e       	mov	r11, r19
    5b6e:	bb 1a       	sub	r11, r27
    5b70:	bb 2d       	mov	r27, r11
    5b72:	88 24       	eor	r8, r8
    5b74:	83 94       	inc	r8
    5b76:	3b 15       	cp	r19, r11
    5b78:	08 f0       	brcs	.+2      	; 0x5b7c <__divdi3+0x5e>
    5b7a:	88 24       	eor	r8, r8
    5b7c:	a8 29       	or	r26, r8
    5b7e:	41 95       	neg	r20
    5b80:	31 e0       	ldi	r19, 0x01	; 1
    5b82:	14 16       	cp	r1, r20
    5b84:	08 f0       	brcs	.+2      	; 0x5b88 <__divdi3+0x6a>
    5b86:	30 e0       	ldi	r19, 0x00	; 0
    5b88:	b4 2e       	mov	r11, r20
    5b8a:	ba 1a       	sub	r11, r26
    5b8c:	ab 2d       	mov	r26, r11
    5b8e:	88 24       	eor	r8, r8
    5b90:	83 94       	inc	r8
    5b92:	4b 15       	cp	r20, r11
    5b94:	08 f0       	brcs	.+2      	; 0x5b98 <__divdi3+0x7a>
    5b96:	88 24       	eor	r8, r8
    5b98:	38 29       	or	r19, r8
    5b9a:	51 95       	neg	r21
    5b9c:	41 e0       	ldi	r20, 0x01	; 1
    5b9e:	15 16       	cp	r1, r21
    5ba0:	08 f0       	brcs	.+2      	; 0x5ba4 <__divdi3+0x86>
    5ba2:	40 e0       	ldi	r20, 0x00	; 0
    5ba4:	45 2e       	mov	r4, r21
    5ba6:	43 1a       	sub	r4, r19
    5ba8:	31 e0       	ldi	r19, 0x01	; 1
    5baa:	54 15       	cp	r21, r4
    5bac:	08 f0       	brcs	.+2      	; 0x5bb0 <__divdi3+0x92>
    5bae:	30 e0       	ldi	r19, 0x00	; 0
    5bb0:	43 2b       	or	r20, r19
    5bb2:	61 95       	neg	r22
    5bb4:	31 e0       	ldi	r19, 0x01	; 1
    5bb6:	16 16       	cp	r1, r22
    5bb8:	08 f0       	brcs	.+2      	; 0x5bbc <__divdi3+0x9e>
    5bba:	30 e0       	ldi	r19, 0x00	; 0
    5bbc:	86 2e       	mov	r8, r22
    5bbe:	84 1a       	sub	r8, r20
    5bc0:	41 e0       	ldi	r20, 0x01	; 1
    5bc2:	68 15       	cp	r22, r8
    5bc4:	08 f0       	brcs	.+2      	; 0x5bc8 <__divdi3+0xaa>
    5bc6:	40 e0       	ldi	r20, 0x00	; 0
    5bc8:	34 2b       	or	r19, r20
    5bca:	71 95       	neg	r23
    5bcc:	41 e0       	ldi	r20, 0x01	; 1
    5bce:	17 16       	cp	r1, r23
    5bd0:	08 f0       	brcs	.+2      	; 0x5bd4 <__divdi3+0xb6>
    5bd2:	40 e0       	ldi	r20, 0x00	; 0
    5bd4:	57 2f       	mov	r21, r23
    5bd6:	53 1b       	sub	r21, r19
    5bd8:	31 e0       	ldi	r19, 0x01	; 1
    5bda:	75 17       	cp	r23, r21
    5bdc:	08 f0       	brcs	.+2      	; 0x5be0 <__divdi3+0xc2>
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	43 2b       	or	r20, r19
    5be2:	81 95       	neg	r24
    5be4:	31 e0       	ldi	r19, 0x01	; 1
    5be6:	18 16       	cp	r1, r24
    5be8:	08 f0       	brcs	.+2      	; 0x5bec <__divdi3+0xce>
    5bea:	30 e0       	ldi	r19, 0x00	; 0
    5bec:	68 2f       	mov	r22, r24
    5bee:	64 1b       	sub	r22, r20
    5bf0:	46 2f       	mov	r20, r22
    5bf2:	61 e0       	ldi	r22, 0x01	; 1
    5bf4:	84 17       	cp	r24, r20
    5bf6:	08 f0       	brcs	.+2      	; 0x5bfa <__divdi3+0xdc>
    5bf8:	60 e0       	ldi	r22, 0x00	; 0
    5bfa:	36 2b       	or	r19, r22
    5bfc:	91 95       	neg	r25
    5bfe:	93 1b       	sub	r25, r19
    5c00:	29 a3       	lds	r18, 0x59
    5c02:	ba a3       	lds	r27, 0x5a
    5c04:	ab a3       	lds	r26, 0x5b
    5c06:	4c a2       	lds	r20, 0x9c
    5c08:	8d a2       	lds	r24, 0x9d
    5c0a:	5e a3       	lds	r21, 0x5e
    5c0c:	4f a3       	lds	r20, 0x5f
    5c0e:	98 a7       	lds	r25, 0x78
    5c10:	8f ef       	ldi	r24, 0xFF	; 255
    5c12:	9f ef       	ldi	r25, 0xFF	; 255
    5c14:	af ef       	ldi	r26, 0xFF	; 255
    5c16:	bf ef       	ldi	r27, 0xFF	; 255
    5c18:	25 96       	adiw	r28, 0x05	; 5
    5c1a:	8c af       	sts	0x7c, r24
    5c1c:	9d af       	sts	0x7d, r25
    5c1e:	ae af       	sts	0x7e, r26
    5c20:	bf af       	sts	0x7f, r27
    5c22:	25 97       	sbiw	r28, 0x05	; 5
    5c24:	06 c0       	rjmp	.+12     	; 0x5c32 <__divdi3+0x114>
    5c26:	25 96       	adiw	r28, 0x05	; 5
    5c28:	1c ae       	sts	0xbc, r17
    5c2a:	1d ae       	sts	0xbd, r17
    5c2c:	1e ae       	sts	0xbe, r17
    5c2e:	1f ae       	sts	0xbf, r17
    5c30:	25 97       	sbiw	r28, 0x05	; 5
    5c32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c36:	af 8d       	ldd	r26, Y+31	; 0x1f
    5c38:	b8 a1       	lds	r27, 0x48
    5c3a:	b7 ff       	sbrs	r27, 7
    5c3c:	68 c0       	rjmp	.+208    	; 0x5d0e <__divdi3+0x1f0>
    5c3e:	25 96       	adiw	r28, 0x05	; 5
    5c40:	2c ad       	sts	0x6c, r18
    5c42:	3d ad       	sts	0x6d, r19
    5c44:	4e ad       	sts	0x6e, r20
    5c46:	5f ad       	sts	0x6f, r21
    5c48:	25 97       	sbiw	r28, 0x05	; 5
    5c4a:	20 95       	com	r18
    5c4c:	30 95       	com	r19
    5c4e:	40 95       	com	r20
    5c50:	50 95       	com	r21
    5c52:	25 96       	adiw	r28, 0x05	; 5
    5c54:	2c af       	sts	0x7c, r18
    5c56:	3d af       	sts	0x7d, r19
    5c58:	4e af       	sts	0x7e, r20
    5c5a:	5f af       	sts	0x7f, r21
    5c5c:	25 97       	sbiw	r28, 0x05	; 5
    5c5e:	e1 95       	neg	r30
    5c60:	81 e0       	ldi	r24, 0x01	; 1
    5c62:	1e 16       	cp	r1, r30
    5c64:	08 f0       	brcs	.+2      	; 0x5c68 <__divdi3+0x14a>
    5c66:	80 e0       	ldi	r24, 0x00	; 0
    5c68:	f1 95       	neg	r31
    5c6a:	91 e0       	ldi	r25, 0x01	; 1
    5c6c:	1f 16       	cp	r1, r31
    5c6e:	08 f0       	brcs	.+2      	; 0x5c72 <__divdi3+0x154>
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	4f 2f       	mov	r20, r31
    5c74:	48 1b       	sub	r20, r24
    5c76:	81 e0       	ldi	r24, 0x01	; 1
    5c78:	f4 17       	cp	r31, r20
    5c7a:	08 f0       	brcs	.+2      	; 0x5c7e <__divdi3+0x160>
    5c7c:	80 e0       	ldi	r24, 0x00	; 0
    5c7e:	98 2b       	or	r25, r24
    5c80:	c1 94       	neg	r12
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	1c 14       	cp	r1, r12
    5c86:	08 f0       	brcs	.+2      	; 0x5c8a <__divdi3+0x16c>
    5c88:	80 e0       	ldi	r24, 0x00	; 0
    5c8a:	6c 2d       	mov	r22, r12
    5c8c:	69 1b       	sub	r22, r25
    5c8e:	91 e0       	ldi	r25, 0x01	; 1
    5c90:	c6 16       	cp	r12, r22
    5c92:	08 f0       	brcs	.+2      	; 0x5c96 <__divdi3+0x178>
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	89 2b       	or	r24, r25
    5c98:	d1 94       	neg	r13
    5c9a:	91 e0       	ldi	r25, 0x01	; 1
    5c9c:	1d 14       	cp	r1, r13
    5c9e:	08 f0       	brcs	.+2      	; 0x5ca2 <__divdi3+0x184>
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	5d 2d       	mov	r21, r13
    5ca4:	58 1b       	sub	r21, r24
    5ca6:	81 e0       	ldi	r24, 0x01	; 1
    5ca8:	d5 16       	cp	r13, r21
    5caa:	08 f0       	brcs	.+2      	; 0x5cae <__divdi3+0x190>
    5cac:	80 e0       	ldi	r24, 0x00	; 0
    5cae:	98 2b       	or	r25, r24
    5cb0:	e1 94       	neg	r14
    5cb2:	81 e0       	ldi	r24, 0x01	; 1
    5cb4:	1e 14       	cp	r1, r14
    5cb6:	08 f0       	brcs	.+2      	; 0x5cba <__divdi3+0x19c>
    5cb8:	80 e0       	ldi	r24, 0x00	; 0
    5cba:	3e 2d       	mov	r19, r14
    5cbc:	39 1b       	sub	r19, r25
    5cbe:	91 e0       	ldi	r25, 0x01	; 1
    5cc0:	e3 16       	cp	r14, r19
    5cc2:	08 f0       	brcs	.+2      	; 0x5cc6 <__divdi3+0x1a8>
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	89 2b       	or	r24, r25
    5cc8:	f1 94       	neg	r15
    5cca:	91 e0       	ldi	r25, 0x01	; 1
    5ccc:	1f 14       	cp	r1, r15
    5cce:	08 f0       	brcs	.+2      	; 0x5cd2 <__divdi3+0x1b4>
    5cd0:	90 e0       	ldi	r25, 0x00	; 0
    5cd2:	2f 2d       	mov	r18, r15
    5cd4:	28 1b       	sub	r18, r24
    5cd6:	81 e0       	ldi	r24, 0x01	; 1
    5cd8:	f2 16       	cp	r15, r18
    5cda:	08 f0       	brcs	.+2      	; 0x5cde <__divdi3+0x1c0>
    5cdc:	80 e0       	ldi	r24, 0x00	; 0
    5cde:	98 2b       	or	r25, r24
    5ce0:	01 95       	neg	r16
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	10 16       	cp	r1, r16
    5ce6:	08 f0       	brcs	.+2      	; 0x5cea <__divdi3+0x1cc>
    5ce8:	80 e0       	ldi	r24, 0x00	; 0
    5cea:	70 2f       	mov	r23, r16
    5cec:	79 1b       	sub	r23, r25
    5cee:	97 2f       	mov	r25, r23
    5cf0:	71 e0       	ldi	r23, 0x01	; 1
    5cf2:	09 17       	cp	r16, r25
    5cf4:	08 f0       	brcs	.+2      	; 0x5cf8 <__divdi3+0x1da>
    5cf6:	70 e0       	ldi	r23, 0x00	; 0
    5cf8:	87 2b       	or	r24, r23
    5cfa:	11 95       	neg	r17
    5cfc:	18 1b       	sub	r17, r24
    5cfe:	e9 8f       	std	Y+25, r30	; 0x19
    5d00:	4a 8f       	std	Y+26, r20	; 0x1a
    5d02:	6b 8f       	std	Y+27, r22	; 0x1b
    5d04:	5c 8f       	std	Y+28, r21	; 0x1c
    5d06:	3d 8f       	std	Y+29, r19	; 0x1d
    5d08:	2e 8f       	std	Y+30, r18	; 0x1e
    5d0a:	9f 8f       	std	Y+31, r25	; 0x1f
    5d0c:	18 a3       	lds	r17, 0x58
    5d0e:	79 8d       	ldd	r23, Y+25	; 0x19
    5d10:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5d12:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5d14:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5d16:	3d 8d       	ldd	r19, Y+29	; 0x1d
    5d18:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5d1a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5d1c:	88 a1       	lds	r24, 0x48
    5d1e:	e9 a1       	lds	r30, 0x49
    5d20:	e9 8b       	std	Y+17, r30	; 0x11
    5d22:	ea a1       	lds	r30, 0x4a
    5d24:	ea 8b       	std	Y+18, r30	; 0x12
    5d26:	eb a1       	lds	r30, 0x4b
    5d28:	eb 8b       	std	Y+19, r30	; 0x13
    5d2a:	ec a1       	lds	r30, 0x4c
    5d2c:	ec 8b       	std	Y+20, r30	; 0x14
    5d2e:	ed a1       	lds	r30, 0x4d
    5d30:	ed 8b       	std	Y+21, r30	; 0x15
    5d32:	ee a1       	lds	r30, 0x4e
    5d34:	ee 8b       	std	Y+22, r30	; 0x16
    5d36:	ef a1       	lds	r30, 0x4f
    5d38:	ef 8b       	std	Y+23, r30	; 0x17
    5d3a:	e8 a5       	lds	r30, 0x68
    5d3c:	e8 8f       	std	Y+24, r30	; 0x18
    5d3e:	79 87       	std	Y+9, r23	; 0x09
    5d40:	6a 87       	std	Y+10, r22	; 0x0a
    5d42:	5b 87       	std	Y+11, r21	; 0x0b
    5d44:	4c 87       	std	Y+12, r20	; 0x0c
    5d46:	3d 87       	std	Y+13, r19	; 0x0d
    5d48:	2e 87       	std	Y+14, r18	; 0x0e
    5d4a:	9f 87       	std	Y+15, r25	; 0x0f
    5d4c:	88 8b       	std	Y+16, r24	; 0x10
    5d4e:	89 84       	ldd	r8, Y+9	; 0x09
    5d50:	9a 84       	ldd	r9, Y+10	; 0x0a
    5d52:	ab 84       	ldd	r10, Y+11	; 0x0b
    5d54:	bc 84       	ldd	r11, Y+12	; 0x0c
    5d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d5a:	af 85       	ldd	r26, Y+15	; 0x0f
    5d5c:	b8 89       	ldd	r27, Y+16	; 0x10
    5d5e:	e9 88       	ldd	r14, Y+17	; 0x11
    5d60:	fa 88       	ldd	r15, Y+18	; 0x12
    5d62:	0b 89       	ldd	r16, Y+19	; 0x13
    5d64:	1c 89       	ldd	r17, Y+20	; 0x14
    5d66:	ed aa       	sts	0x9d, r30
    5d68:	fe aa       	sts	0x9e, r31
    5d6a:	0f ab       	sts	0x5f, r16
    5d6c:	18 af       	sts	0x78, r17
    5d6e:	cd 88       	ldd	r12, Y+21	; 0x15
    5d70:	de 88       	ldd	r13, Y+22	; 0x16
    5d72:	ef 88       	ldd	r14, Y+23	; 0x17
    5d74:	f8 8c       	ldd	r15, Y+24	; 0x18
    5d76:	00 97       	sbiw	r24, 0x00	; 0
    5d78:	a1 05       	cpc	r26, r1
    5d7a:	b1 05       	cpc	r27, r1
    5d7c:	09 f0       	breq	.+2      	; 0x5d80 <__divdi3+0x262>
    5d7e:	bd c3       	rjmp	.+1914   	; 0x64fa <__stack+0x4fb>
    5d80:	c8 14       	cp	r12, r8
    5d82:	d9 04       	cpc	r13, r9
    5d84:	ea 04       	cpc	r14, r10
    5d86:	fb 04       	cpc	r15, r11
    5d88:	08 f0       	brcs	.+2      	; 0x5d8c <__divdi3+0x26e>
    5d8a:	4d c1       	rjmp	.+666    	; 0x6026 <__stack+0x27>
    5d8c:	00 e0       	ldi	r16, 0x00	; 0
    5d8e:	80 16       	cp	r8, r16
    5d90:	00 e0       	ldi	r16, 0x00	; 0
    5d92:	90 06       	cpc	r9, r16
    5d94:	01 e0       	ldi	r16, 0x01	; 1
    5d96:	a0 06       	cpc	r10, r16
    5d98:	00 e0       	ldi	r16, 0x00	; 0
    5d9a:	b0 06       	cpc	r11, r16
    5d9c:	58 f4       	brcc	.+22     	; 0x5db4 <__divdi3+0x296>
    5d9e:	1f ef       	ldi	r17, 0xFF	; 255
    5da0:	81 16       	cp	r8, r17
    5da2:	91 04       	cpc	r9, r1
    5da4:	a1 04       	cpc	r10, r1
    5da6:	b1 04       	cpc	r11, r1
    5da8:	09 f0       	breq	.+2      	; 0x5dac <__divdi3+0x28e>
    5daa:	90 f4       	brcc	.+36     	; 0x5dd0 <__divdi3+0x2b2>
    5dac:	80 e0       	ldi	r24, 0x00	; 0
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	dc 01       	movw	r26, r24
    5db2:	17 c0       	rjmp	.+46     	; 0x5de2 <__divdi3+0x2c4>
    5db4:	20 e0       	ldi	r18, 0x00	; 0
    5db6:	82 16       	cp	r8, r18
    5db8:	20 e0       	ldi	r18, 0x00	; 0
    5dba:	92 06       	cpc	r9, r18
    5dbc:	20 e0       	ldi	r18, 0x00	; 0
    5dbe:	a2 06       	cpc	r10, r18
    5dc0:	21 e0       	ldi	r18, 0x01	; 1
    5dc2:	b2 06       	cpc	r11, r18
    5dc4:	50 f4       	brcc	.+20     	; 0x5dda <__divdi3+0x2bc>
    5dc6:	80 e1       	ldi	r24, 0x10	; 16
    5dc8:	90 e0       	ldi	r25, 0x00	; 0
    5dca:	a0 e0       	ldi	r26, 0x00	; 0
    5dcc:	b0 e0       	ldi	r27, 0x00	; 0
    5dce:	09 c0       	rjmp	.+18     	; 0x5de2 <__divdi3+0x2c4>
    5dd0:	88 e0       	ldi	r24, 0x08	; 8
    5dd2:	90 e0       	ldi	r25, 0x00	; 0
    5dd4:	a0 e0       	ldi	r26, 0x00	; 0
    5dd6:	b0 e0       	ldi	r27, 0x00	; 0
    5dd8:	04 c0       	rjmp	.+8      	; 0x5de2 <__divdi3+0x2c4>
    5dda:	88 e1       	ldi	r24, 0x18	; 24
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	a0 e0       	ldi	r26, 0x00	; 0
    5de0:	b0 e0       	ldi	r27, 0x00	; 0
    5de2:	b5 01       	movw	r22, r10
    5de4:	a4 01       	movw	r20, r8
    5de6:	08 2e       	mov	r0, r24
    5de8:	04 c0       	rjmp	.+8      	; 0x5df2 <__divdi3+0x2d4>
    5dea:	76 95       	lsr	r23
    5dec:	67 95       	ror	r22
    5dee:	57 95       	ror	r21
    5df0:	47 95       	ror	r20
    5df2:	0a 94       	dec	r0
    5df4:	d2 f7       	brpl	.-12     	; 0x5dea <__divdi3+0x2cc>
    5df6:	fa 01       	movw	r30, r20
    5df8:	e3 5f       	subi	r30, 0xF3	; 243
    5dfa:	ff 4d       	sbci	r31, 0xDF	; 223
    5dfc:	20 81       	ld	r18, Z
    5dfe:	40 e2       	ldi	r20, 0x20	; 32
    5e00:	50 e0       	ldi	r21, 0x00	; 0
    5e02:	60 e0       	ldi	r22, 0x00	; 0
    5e04:	70 e0       	ldi	r23, 0x00	; 0
    5e06:	48 1b       	sub	r20, r24
    5e08:	59 0b       	sbc	r21, r25
    5e0a:	6a 0b       	sbc	r22, r26
    5e0c:	7b 0b       	sbc	r23, r27
    5e0e:	42 1b       	sub	r20, r18
    5e10:	51 09       	sbc	r21, r1
    5e12:	61 09       	sbc	r22, r1
    5e14:	71 09       	sbc	r23, r1
    5e16:	41 15       	cp	r20, r1
    5e18:	51 05       	cpc	r21, r1
    5e1a:	61 05       	cpc	r22, r1
    5e1c:	71 05       	cpc	r23, r1
    5e1e:	a1 f1       	breq	.+104    	; 0x5e88 <__divdi3+0x36a>
    5e20:	04 2e       	mov	r0, r20
    5e22:	04 c0       	rjmp	.+8      	; 0x5e2c <__divdi3+0x30e>
    5e24:	88 0c       	add	r8, r8
    5e26:	99 1c       	adc	r9, r9
    5e28:	aa 1c       	adc	r10, r10
    5e2a:	bb 1c       	adc	r11, r11
    5e2c:	0a 94       	dec	r0
    5e2e:	d2 f7       	brpl	.-12     	; 0x5e24 <__divdi3+0x306>
    5e30:	97 01       	movw	r18, r14
    5e32:	86 01       	movw	r16, r12
    5e34:	04 2e       	mov	r0, r20
    5e36:	04 c0       	rjmp	.+8      	; 0x5e40 <__divdi3+0x322>
    5e38:	00 0f       	add	r16, r16
    5e3a:	11 1f       	adc	r17, r17
    5e3c:	22 1f       	adc	r18, r18
    5e3e:	33 1f       	adc	r19, r19
    5e40:	0a 94       	dec	r0
    5e42:	d2 f7       	brpl	.-12     	; 0x5e38 <__divdi3+0x31a>
    5e44:	80 e2       	ldi	r24, 0x20	; 32
    5e46:	90 e0       	ldi	r25, 0x00	; 0
    5e48:	84 1b       	sub	r24, r20
    5e4a:	95 0b       	sbc	r25, r21
    5e4c:	cd a8       	sts	0x8d, r28
    5e4e:	de a8       	sts	0x8e, r29
    5e50:	ef a8       	sts	0x8f, r30
    5e52:	f8 ac       	sts	0xa8, r31
    5e54:	04 c0       	rjmp	.+8      	; 0x5e5e <__divdi3+0x340>
    5e56:	f6 94       	lsr	r15
    5e58:	e7 94       	ror	r14
    5e5a:	d7 94       	ror	r13
    5e5c:	c7 94       	ror	r12
    5e5e:	8a 95       	dec	r24
    5e60:	d2 f7       	brpl	.-12     	; 0x5e56 <__divdi3+0x338>
    5e62:	c0 2a       	or	r12, r16
    5e64:	d1 2a       	or	r13, r17
    5e66:	e2 2a       	or	r14, r18
    5e68:	f3 2a       	or	r15, r19
    5e6a:	0d a9       	sts	0x4d, r16
    5e6c:	1e a9       	sts	0x4e, r17
    5e6e:	2f a9       	sts	0x4f, r18
    5e70:	38 ad       	sts	0x68, r19
    5e72:	04 c0       	rjmp	.+8      	; 0x5e7c <__divdi3+0x35e>
    5e74:	00 0f       	add	r16, r16
    5e76:	11 1f       	adc	r17, r17
    5e78:	22 1f       	adc	r18, r18
    5e7a:	33 1f       	adc	r19, r19
    5e7c:	4a 95       	dec	r20
    5e7e:	d2 f7       	brpl	.-12     	; 0x5e74 <__divdi3+0x356>
    5e80:	0d ab       	sts	0x5d, r16
    5e82:	1e ab       	sts	0x5e, r17
    5e84:	2f ab       	sts	0x5f, r18
    5e86:	38 af       	sts	0x78, r19
    5e88:	25 01       	movw	r4, r10
    5e8a:	66 24       	eor	r6, r6
    5e8c:	77 24       	eor	r7, r7
    5e8e:	95 01       	movw	r18, r10
    5e90:	84 01       	movw	r16, r8
    5e92:	20 70       	andi	r18, 0x00	; 0
    5e94:	30 70       	andi	r19, 0x00	; 0
    5e96:	09 ab       	sts	0x59, r16
    5e98:	1a ab       	sts	0x5a, r17
    5e9a:	2b ab       	sts	0x5b, r18
    5e9c:	3c ab       	sts	0x5c, r19
    5e9e:	c7 01       	movw	r24, r14
    5ea0:	b6 01       	movw	r22, r12
    5ea2:	a3 01       	movw	r20, r6
    5ea4:	92 01       	movw	r18, r4
    5ea6:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    5eaa:	2d a7       	lds	r18, 0x7d
    5eac:	3e a7       	lds	r19, 0x7e
    5eae:	4f a7       	lds	r20, 0x7f
    5eb0:	58 ab       	sts	0x58, r21
    5eb2:	69 a7       	lds	r22, 0x79
    5eb4:	7a a7       	lds	r23, 0x7a
    5eb6:	8b a7       	lds	r24, 0x7b
    5eb8:	9c a7       	lds	r25, 0x7c
    5eba:	c7 01       	movw	r24, r14
    5ebc:	b6 01       	movw	r22, r12
    5ebe:	a3 01       	movw	r20, r6
    5ec0:	92 01       	movw	r18, r4
    5ec2:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    5ec6:	ca 01       	movw	r24, r20
    5ec8:	b9 01       	movw	r22, r18
    5eca:	29 a9       	sts	0x49, r18
    5ecc:	3a a9       	sts	0x4a, r19
    5ece:	4b a9       	sts	0x4b, r20
    5ed0:	5c a9       	sts	0x4c, r21
    5ed2:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    5ed6:	ab 01       	movw	r20, r22
    5ed8:	bc 01       	movw	r22, r24
    5eda:	09 a5       	lds	r16, 0x69
    5edc:	1a a5       	lds	r17, 0x6a
    5ede:	2b a5       	lds	r18, 0x6b
    5ee0:	3c a5       	lds	r19, 0x6c
    5ee2:	78 01       	movw	r14, r16
    5ee4:	dd 24       	eor	r13, r13
    5ee6:	cc 24       	eor	r12, r12
    5ee8:	0d a9       	sts	0x4d, r16
    5eea:	1e a9       	sts	0x4e, r17
    5eec:	2f a9       	sts	0x4f, r18
    5eee:	38 ad       	sts	0x68, r19
    5ef0:	c9 01       	movw	r24, r18
    5ef2:	aa 27       	eor	r26, r26
    5ef4:	bb 27       	eor	r27, r27
    5ef6:	c8 2a       	or	r12, r24
    5ef8:	d9 2a       	or	r13, r25
    5efa:	ea 2a       	or	r14, r26
    5efc:	fb 2a       	or	r15, r27
    5efe:	0d a5       	lds	r16, 0x6d
    5f00:	1e a5       	lds	r17, 0x6e
    5f02:	2f a5       	lds	r18, 0x6f
    5f04:	38 a9       	sts	0x48, r19
    5f06:	c4 16       	cp	r12, r20
    5f08:	d5 06       	cpc	r13, r21
    5f0a:	e6 06       	cpc	r14, r22
    5f0c:	f7 06       	cpc	r15, r23
    5f0e:	38 f5       	brcc	.+78     	; 0x5f5e <__divdi3+0x440>
    5f10:	01 50       	subi	r16, 0x01	; 1
    5f12:	10 40       	sbci	r17, 0x00	; 0
    5f14:	20 40       	sbci	r18, 0x00	; 0
    5f16:	30 40       	sbci	r19, 0x00	; 0
    5f18:	09 a7       	lds	r16, 0x79
    5f1a:	1a a7       	lds	r17, 0x7a
    5f1c:	2b a7       	lds	r18, 0x7b
    5f1e:	3c a7       	lds	r19, 0x7c
    5f20:	c8 0c       	add	r12, r8
    5f22:	d9 1c       	adc	r13, r9
    5f24:	ea 1c       	adc	r14, r10
    5f26:	fb 1c       	adc	r15, r11
    5f28:	c8 14       	cp	r12, r8
    5f2a:	d9 04       	cpc	r13, r9
    5f2c:	ea 04       	cpc	r14, r10
    5f2e:	fb 04       	cpc	r15, r11
    5f30:	d0 f0       	brcs	.+52     	; 0x5f66 <__divdi3+0x448>
    5f32:	c4 16       	cp	r12, r20
    5f34:	d5 06       	cpc	r13, r21
    5f36:	e6 06       	cpc	r14, r22
    5f38:	f7 06       	cpc	r15, r23
    5f3a:	a8 f4       	brcc	.+42     	; 0x5f66 <__divdi3+0x448>
    5f3c:	0d a5       	lds	r16, 0x6d
    5f3e:	1e a5       	lds	r17, 0x6e
    5f40:	2f a5       	lds	r18, 0x6f
    5f42:	38 a9       	sts	0x48, r19
    5f44:	02 50       	subi	r16, 0x02	; 2
    5f46:	10 40       	sbci	r17, 0x00	; 0
    5f48:	20 40       	sbci	r18, 0x00	; 0
    5f4a:	30 40       	sbci	r19, 0x00	; 0
    5f4c:	09 a7       	lds	r16, 0x79
    5f4e:	1a a7       	lds	r17, 0x7a
    5f50:	2b a7       	lds	r18, 0x7b
    5f52:	3c a7       	lds	r19, 0x7c
    5f54:	c8 0c       	add	r12, r8
    5f56:	d9 1c       	adc	r13, r9
    5f58:	ea 1c       	adc	r14, r10
    5f5a:	fb 1c       	adc	r15, r11
    5f5c:	04 c0       	rjmp	.+8      	; 0x5f66 <__divdi3+0x448>
    5f5e:	09 a7       	lds	r16, 0x79
    5f60:	1a a7       	lds	r17, 0x7a
    5f62:	2b a7       	lds	r18, 0x7b
    5f64:	3c a7       	lds	r19, 0x7c
    5f66:	c4 1a       	sub	r12, r20
    5f68:	d5 0a       	sbc	r13, r21
    5f6a:	e6 0a       	sbc	r14, r22
    5f6c:	f7 0a       	sbc	r15, r23
    5f6e:	c7 01       	movw	r24, r14
    5f70:	b6 01       	movw	r22, r12
    5f72:	a3 01       	movw	r20, r6
    5f74:	92 01       	movw	r18, r4
    5f76:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    5f7a:	2d a7       	lds	r18, 0x7d
    5f7c:	3e a7       	lds	r19, 0x7e
    5f7e:	4f a7       	lds	r20, 0x7f
    5f80:	58 ab       	sts	0x58, r21
    5f82:	69 af       	sts	0x79, r22
    5f84:	7a af       	sts	0x7a, r23
    5f86:	8b af       	sts	0x7b, r24
    5f88:	9c af       	sts	0x7c, r25
    5f8a:	c7 01       	movw	r24, r14
    5f8c:	b6 01       	movw	r22, r12
    5f8e:	a3 01       	movw	r20, r6
    5f90:	92 01       	movw	r18, r4
    5f92:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    5f96:	ca 01       	movw	r24, r20
    5f98:	b9 01       	movw	r22, r18
    5f9a:	29 a9       	sts	0x49, r18
    5f9c:	3a a9       	sts	0x4a, r19
    5f9e:	4b a9       	sts	0x4b, r20
    5fa0:	5c a9       	sts	0x4c, r21
    5fa2:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    5fa6:	6b 01       	movw	r12, r22
    5fa8:	7c 01       	movw	r14, r24
    5faa:	49 ad       	sts	0x69, r20
    5fac:	5a ad       	sts	0x6a, r21
    5fae:	6b ad       	sts	0x6b, r22
    5fb0:	7c ad       	sts	0x6c, r23
    5fb2:	9a 01       	movw	r18, r20
    5fb4:	11 27       	eor	r17, r17
    5fb6:	00 27       	eor	r16, r16
    5fb8:	4d a9       	sts	0x4d, r20
    5fba:	5e a9       	sts	0x4e, r21
    5fbc:	6f a9       	sts	0x4f, r22
    5fbe:	78 ad       	sts	0x68, r23
    5fc0:	60 70       	andi	r22, 0x00	; 0
    5fc2:	70 70       	andi	r23, 0x00	; 0
    5fc4:	04 2b       	or	r16, r20
    5fc6:	15 2b       	or	r17, r21
    5fc8:	26 2b       	or	r18, r22
    5fca:	37 2b       	or	r19, r23
    5fcc:	8d a5       	lds	r24, 0x6d
    5fce:	9e a5       	lds	r25, 0x6e
    5fd0:	af a5       	lds	r26, 0x6f
    5fd2:	b8 a9       	sts	0x48, r27
    5fd4:	0c 15       	cp	r16, r12
    5fd6:	1d 05       	cpc	r17, r13
    5fd8:	2e 05       	cpc	r18, r14
    5fda:	3f 05       	cpc	r19, r15
    5fdc:	c0 f4       	brcc	.+48     	; 0x600e <__stack+0xf>
    5fde:	01 97       	sbiw	r24, 0x01	; 1
    5fe0:	a1 09       	sbc	r26, r1
    5fe2:	b1 09       	sbc	r27, r1
    5fe4:	08 0d       	add	r16, r8
    5fe6:	19 1d       	adc	r17, r9
    5fe8:	2a 1d       	adc	r18, r10
    5fea:	3b 1d       	adc	r19, r11
    5fec:	08 15       	cp	r16, r8
    5fee:	19 05       	cpc	r17, r9
    5ff0:	2a 05       	cpc	r18, r10
    5ff2:	3b 05       	cpc	r19, r11
    5ff4:	60 f0       	brcs	.+24     	; 0x600e <__stack+0xf>
    5ff6:	0c 15       	cp	r16, r12
    5ff8:	1d 05       	cpc	r17, r13
    5ffa:	2e 05       	cpc	r18, r14
    5ffc:	3f 05       	cpc	r19, r15
    5ffe:	38 f4       	brcc	.+14     	; 0x600e <__stack+0xf>
    6000:	8d a5       	lds	r24, 0x6d
    6002:	9e a5       	lds	r25, 0x6e
    6004:	af a5       	lds	r26, 0x6f
    6006:	b8 a9       	sts	0x48, r27
    6008:	02 97       	sbiw	r24, 0x02	; 2
    600a:	a1 09       	sbc	r26, r1
    600c:	b1 09       	sbc	r27, r1
    600e:	09 a5       	lds	r16, 0x69
    6010:	1a a5       	lds	r17, 0x6a
    6012:	2b a5       	lds	r18, 0x6b
    6014:	3c a5       	lds	r19, 0x6c
    6016:	78 01       	movw	r14, r16
    6018:	dd 24       	eor	r13, r13
    601a:	cc 24       	eor	r12, r12
    601c:	c8 2a       	or	r12, r24
    601e:	d9 2a       	or	r13, r25
    6020:	ea 2a       	or	r14, r26
    6022:	fb 2a       	or	r15, r27
    6024:	b7 c4       	rjmp	.+2414   	; 0x6994 <__stack+0x995>
    6026:	81 14       	cp	r8, r1
    6028:	91 04       	cpc	r9, r1
    602a:	a1 04       	cpc	r10, r1
    602c:	b1 04       	cpc	r11, r1
    602e:	51 f4       	brne	.+20     	; 0x6044 <__stack+0x45>
    6030:	61 e0       	ldi	r22, 0x01	; 1
    6032:	70 e0       	ldi	r23, 0x00	; 0
    6034:	80 e0       	ldi	r24, 0x00	; 0
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	a5 01       	movw	r20, r10
    603a:	94 01       	movw	r18, r8
    603c:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    6040:	49 01       	movw	r8, r18
    6042:	5a 01       	movw	r10, r20
    6044:	10 e0       	ldi	r17, 0x00	; 0
    6046:	81 16       	cp	r8, r17
    6048:	10 e0       	ldi	r17, 0x00	; 0
    604a:	91 06       	cpc	r9, r17
    604c:	11 e0       	ldi	r17, 0x01	; 1
    604e:	a1 06       	cpc	r10, r17
    6050:	10 e0       	ldi	r17, 0x00	; 0
    6052:	b1 06       	cpc	r11, r17
    6054:	58 f4       	brcc	.+22     	; 0x606c <__stack+0x6d>
    6056:	2f ef       	ldi	r18, 0xFF	; 255
    6058:	82 16       	cp	r8, r18
    605a:	91 04       	cpc	r9, r1
    605c:	a1 04       	cpc	r10, r1
    605e:	b1 04       	cpc	r11, r1
    6060:	09 f0       	breq	.+2      	; 0x6064 <__stack+0x65>
    6062:	90 f4       	brcc	.+36     	; 0x6088 <__stack+0x89>
    6064:	80 e0       	ldi	r24, 0x00	; 0
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	dc 01       	movw	r26, r24
    606a:	17 c0       	rjmp	.+46     	; 0x609a <__stack+0x9b>
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	83 16       	cp	r8, r19
    6070:	30 e0       	ldi	r19, 0x00	; 0
    6072:	93 06       	cpc	r9, r19
    6074:	30 e0       	ldi	r19, 0x00	; 0
    6076:	a3 06       	cpc	r10, r19
    6078:	31 e0       	ldi	r19, 0x01	; 1
    607a:	b3 06       	cpc	r11, r19
    607c:	50 f4       	brcc	.+20     	; 0x6092 <__stack+0x93>
    607e:	80 e1       	ldi	r24, 0x10	; 16
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	a0 e0       	ldi	r26, 0x00	; 0
    6084:	b0 e0       	ldi	r27, 0x00	; 0
    6086:	09 c0       	rjmp	.+18     	; 0x609a <__stack+0x9b>
    6088:	88 e0       	ldi	r24, 0x08	; 8
    608a:	90 e0       	ldi	r25, 0x00	; 0
    608c:	a0 e0       	ldi	r26, 0x00	; 0
    608e:	b0 e0       	ldi	r27, 0x00	; 0
    6090:	04 c0       	rjmp	.+8      	; 0x609a <__stack+0x9b>
    6092:	88 e1       	ldi	r24, 0x18	; 24
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	a0 e0       	ldi	r26, 0x00	; 0
    6098:	b0 e0       	ldi	r27, 0x00	; 0
    609a:	b5 01       	movw	r22, r10
    609c:	a4 01       	movw	r20, r8
    609e:	08 2e       	mov	r0, r24
    60a0:	04 c0       	rjmp	.+8      	; 0x60aa <__stack+0xab>
    60a2:	76 95       	lsr	r23
    60a4:	67 95       	ror	r22
    60a6:	57 95       	ror	r21
    60a8:	47 95       	ror	r20
    60aa:	0a 94       	dec	r0
    60ac:	d2 f7       	brpl	.-12     	; 0x60a2 <__stack+0xa3>
    60ae:	fa 01       	movw	r30, r20
    60b0:	e3 5f       	subi	r30, 0xF3	; 243
    60b2:	ff 4d       	sbci	r31, 0xDF	; 223
    60b4:	20 81       	ld	r18, Z
    60b6:	ac 01       	movw	r20, r24
    60b8:	bd 01       	movw	r22, r26
    60ba:	42 0f       	add	r20, r18
    60bc:	51 1d       	adc	r21, r1
    60be:	61 1d       	adc	r22, r1
    60c0:	71 1d       	adc	r23, r1
    60c2:	80 e2       	ldi	r24, 0x20	; 32
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	a0 e0       	ldi	r26, 0x00	; 0
    60c8:	b0 e0       	ldi	r27, 0x00	; 0
    60ca:	84 1b       	sub	r24, r20
    60cc:	95 0b       	sbc	r25, r21
    60ce:	a6 0b       	sbc	r26, r22
    60d0:	b7 0b       	sbc	r27, r23
    60d2:	51 f4       	brne	.+20     	; 0x60e8 <__stack+0xe9>
    60d4:	c8 18       	sub	r12, r8
    60d6:	d9 08       	sbc	r13, r9
    60d8:	ea 08       	sbc	r14, r10
    60da:	fb 08       	sbc	r15, r11
    60dc:	f1 e0       	ldi	r31, 0x01	; 1
    60de:	4f 2e       	mov	r4, r31
    60e0:	51 2c       	mov	r5, r1
    60e2:	61 2c       	mov	r6, r1
    60e4:	71 2c       	mov	r7, r1
    60e6:	28 c1       	rjmp	.+592    	; 0x6338 <__stack+0x339>
    60e8:	08 2e       	mov	r0, r24
    60ea:	04 c0       	rjmp	.+8      	; 0x60f4 <__stack+0xf5>
    60ec:	88 0c       	add	r8, r8
    60ee:	99 1c       	adc	r9, r9
    60f0:	aa 1c       	adc	r10, r10
    60f2:	bb 1c       	adc	r11, r11
    60f4:	0a 94       	dec	r0
    60f6:	d2 f7       	brpl	.-12     	; 0x60ec <__stack+0xed>
    60f8:	97 01       	movw	r18, r14
    60fa:	86 01       	movw	r16, r12
    60fc:	04 2e       	mov	r0, r20
    60fe:	04 c0       	rjmp	.+8      	; 0x6108 <__stack+0x109>
    6100:	36 95       	lsr	r19
    6102:	27 95       	ror	r18
    6104:	17 95       	ror	r17
    6106:	07 95       	ror	r16
    6108:	0a 94       	dec	r0
    610a:	d2 f7       	brpl	.-12     	; 0x6100 <__stack+0x101>
    610c:	09 ab       	sts	0x59, r16
    610e:	1a ab       	sts	0x5a, r17
    6110:	2b ab       	sts	0x5b, r18
    6112:	3c ab       	sts	0x5c, r19
    6114:	97 01       	movw	r18, r14
    6116:	86 01       	movw	r16, r12
    6118:	08 2e       	mov	r0, r24
    611a:	04 c0       	rjmp	.+8      	; 0x6124 <__stack+0x125>
    611c:	00 0f       	add	r16, r16
    611e:	11 1f       	adc	r17, r17
    6120:	22 1f       	adc	r18, r18
    6122:	33 1f       	adc	r19, r19
    6124:	0a 94       	dec	r0
    6126:	d2 f7       	brpl	.-12     	; 0x611c <__stack+0x11d>
    6128:	0d a7       	lds	r16, 0x7d
    612a:	1e a7       	lds	r17, 0x7e
    612c:	2f a7       	lds	r18, 0x7f
    612e:	38 ab       	sts	0x58, r19
    6130:	ed a8       	sts	0x8d, r30
    6132:	fe a8       	sts	0x8e, r31
    6134:	0f a9       	sts	0x4f, r16
    6136:	18 ad       	sts	0x68, r17
    6138:	04 c0       	rjmp	.+8      	; 0x6142 <__stack+0x143>
    613a:	16 95       	lsr	r17
    613c:	07 95       	ror	r16
    613e:	f7 94       	ror	r15
    6140:	e7 94       	ror	r14
    6142:	4a 95       	dec	r20
    6144:	d2 f7       	brpl	.-12     	; 0x613a <__stack+0x13b>
    6146:	b8 01       	movw	r22, r16
    6148:	a7 01       	movw	r20, r14
    614a:	0d a5       	lds	r16, 0x6d
    614c:	1e a5       	lds	r17, 0x6e
    614e:	2f a5       	lds	r18, 0x6f
    6150:	38 a9       	sts	0x48, r19
    6152:	04 2b       	or	r16, r20
    6154:	15 2b       	or	r17, r21
    6156:	26 2b       	or	r18, r22
    6158:	37 2b       	or	r19, r23
    615a:	0d a7       	lds	r16, 0x7d
    615c:	1e a7       	lds	r17, 0x7e
    615e:	2f a7       	lds	r18, 0x7f
    6160:	38 ab       	sts	0x58, r19
    6162:	ed a8       	sts	0x8d, r30
    6164:	fe a8       	sts	0x8e, r31
    6166:	0f a9       	sts	0x4f, r16
    6168:	18 ad       	sts	0x68, r17
    616a:	04 c0       	rjmp	.+8      	; 0x6174 <__stack+0x175>
    616c:	ee 0c       	add	r14, r14
    616e:	ff 1c       	adc	r15, r15
    6170:	00 1f       	adc	r16, r16
    6172:	11 1f       	adc	r17, r17
    6174:	8a 95       	dec	r24
    6176:	d2 f7       	brpl	.-12     	; 0x616c <__stack+0x16d>
    6178:	ed aa       	sts	0x9d, r30
    617a:	fe aa       	sts	0x9e, r31
    617c:	0f ab       	sts	0x5f, r16
    617e:	18 af       	sts	0x78, r17
    6180:	25 01       	movw	r4, r10
    6182:	66 24       	eor	r6, r6
    6184:	77 24       	eor	r7, r7
    6186:	95 01       	movw	r18, r10
    6188:	84 01       	movw	r16, r8
    618a:	20 70       	andi	r18, 0x00	; 0
    618c:	30 70       	andi	r19, 0x00	; 0
    618e:	09 af       	sts	0x79, r16
    6190:	1a af       	sts	0x7a, r17
    6192:	2b af       	sts	0x7b, r18
    6194:	3c af       	sts	0x7c, r19
    6196:	69 a9       	sts	0x49, r22
    6198:	7a a9       	sts	0x4a, r23
    619a:	8b a9       	sts	0x4b, r24
    619c:	9c a9       	sts	0x4c, r25
    619e:	a3 01       	movw	r20, r6
    61a0:	92 01       	movw	r18, r4
    61a2:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    61a6:	29 a7       	lds	r18, 0x79
    61a8:	3a a7       	lds	r19, 0x7a
    61aa:	4b a7       	lds	r20, 0x7b
    61ac:	5c a7       	lds	r21, 0x7c
    61ae:	6b 01       	movw	r12, r22
    61b0:	7c 01       	movw	r14, r24
    61b2:	69 a9       	sts	0x49, r22
    61b4:	7a a9       	sts	0x4a, r23
    61b6:	8b a9       	sts	0x4b, r24
    61b8:	9c a9       	sts	0x4c, r25
    61ba:	a3 01       	movw	r20, r6
    61bc:	92 01       	movw	r18, r4
    61be:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    61c2:	ca 01       	movw	r24, r20
    61c4:	b9 01       	movw	r22, r18
    61c6:	29 ad       	sts	0x69, r18
    61c8:	3a ad       	sts	0x6a, r19
    61ca:	4b ad       	sts	0x6b, r20
    61cc:	5c ad       	sts	0x6c, r21
    61ce:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    61d2:	ab 01       	movw	r20, r22
    61d4:	bc 01       	movw	r22, r24
    61d6:	76 01       	movw	r14, r12
    61d8:	dd 24       	eor	r13, r13
    61da:	cc 24       	eor	r12, r12
    61dc:	0d a5       	lds	r16, 0x6d
    61de:	1e a5       	lds	r17, 0x6e
    61e0:	2f a5       	lds	r18, 0x6f
    61e2:	38 a9       	sts	0x48, r19
    61e4:	c9 01       	movw	r24, r18
    61e6:	aa 27       	eor	r26, r26
    61e8:	bb 27       	eor	r27, r27
    61ea:	c8 2a       	or	r12, r24
    61ec:	d9 2a       	or	r13, r25
    61ee:	ea 2a       	or	r14, r26
    61f0:	fb 2a       	or	r15, r27
    61f2:	09 a5       	lds	r16, 0x69
    61f4:	1a a5       	lds	r17, 0x6a
    61f6:	2b a5       	lds	r18, 0x6b
    61f8:	3c a5       	lds	r19, 0x6c
    61fa:	c4 16       	cp	r12, r20
    61fc:	d5 06       	cpc	r13, r21
    61fe:	e6 06       	cpc	r14, r22
    6200:	f7 06       	cpc	r15, r23
    6202:	38 f5       	brcc	.+78     	; 0x6252 <__stack+0x253>
    6204:	01 50       	subi	r16, 0x01	; 1
    6206:	10 40       	sbci	r17, 0x00	; 0
    6208:	20 40       	sbci	r18, 0x00	; 0
    620a:	30 40       	sbci	r19, 0x00	; 0
    620c:	09 ab       	sts	0x59, r16
    620e:	1a ab       	sts	0x5a, r17
    6210:	2b ab       	sts	0x5b, r18
    6212:	3c ab       	sts	0x5c, r19
    6214:	c8 0c       	add	r12, r8
    6216:	d9 1c       	adc	r13, r9
    6218:	ea 1c       	adc	r14, r10
    621a:	fb 1c       	adc	r15, r11
    621c:	c8 14       	cp	r12, r8
    621e:	d9 04       	cpc	r13, r9
    6220:	ea 04       	cpc	r14, r10
    6222:	fb 04       	cpc	r15, r11
    6224:	d0 f0       	brcs	.+52     	; 0x625a <__stack+0x25b>
    6226:	c4 16       	cp	r12, r20
    6228:	d5 06       	cpc	r13, r21
    622a:	e6 06       	cpc	r14, r22
    622c:	f7 06       	cpc	r15, r23
    622e:	a8 f4       	brcc	.+42     	; 0x625a <__stack+0x25b>
    6230:	09 a5       	lds	r16, 0x69
    6232:	1a a5       	lds	r17, 0x6a
    6234:	2b a5       	lds	r18, 0x6b
    6236:	3c a5       	lds	r19, 0x6c
    6238:	02 50       	subi	r16, 0x02	; 2
    623a:	10 40       	sbci	r17, 0x00	; 0
    623c:	20 40       	sbci	r18, 0x00	; 0
    623e:	30 40       	sbci	r19, 0x00	; 0
    6240:	09 ab       	sts	0x59, r16
    6242:	1a ab       	sts	0x5a, r17
    6244:	2b ab       	sts	0x5b, r18
    6246:	3c ab       	sts	0x5c, r19
    6248:	c8 0c       	add	r12, r8
    624a:	d9 1c       	adc	r13, r9
    624c:	ea 1c       	adc	r14, r10
    624e:	fb 1c       	adc	r15, r11
    6250:	04 c0       	rjmp	.+8      	; 0x625a <__stack+0x25b>
    6252:	09 ab       	sts	0x59, r16
    6254:	1a ab       	sts	0x5a, r17
    6256:	2b ab       	sts	0x5b, r18
    6258:	3c ab       	sts	0x5c, r19
    625a:	c4 1a       	sub	r12, r20
    625c:	d5 0a       	sbc	r13, r21
    625e:	e6 0a       	sbc	r14, r22
    6260:	f7 0a       	sbc	r15, r23
    6262:	c7 01       	movw	r24, r14
    6264:	b6 01       	movw	r22, r12
    6266:	a3 01       	movw	r20, r6
    6268:	92 01       	movw	r18, r4
    626a:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    626e:	29 a7       	lds	r18, 0x79
    6270:	3a a7       	lds	r19, 0x7a
    6272:	4b a7       	lds	r20, 0x7b
    6274:	5c a7       	lds	r21, 0x7c
    6276:	21 96       	adiw	r28, 0x01	; 1
    6278:	6c af       	sts	0x7c, r22
    627a:	7d af       	sts	0x7d, r23
    627c:	8e af       	sts	0x7e, r24
    627e:	9f af       	sts	0x7f, r25
    6280:	21 97       	sbiw	r28, 0x01	; 1
    6282:	c7 01       	movw	r24, r14
    6284:	b6 01       	movw	r22, r12
    6286:	a3 01       	movw	r20, r6
    6288:	92 01       	movw	r18, r4
    628a:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    628e:	ca 01       	movw	r24, r20
    6290:	b9 01       	movw	r22, r18
    6292:	29 ad       	sts	0x69, r18
    6294:	3a ad       	sts	0x6a, r19
    6296:	4b ad       	sts	0x6b, r20
    6298:	5c ad       	sts	0x6c, r21
    629a:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    629e:	8b 01       	movw	r16, r22
    62a0:	9c 01       	movw	r18, r24
    62a2:	21 96       	adiw	r28, 0x01	; 1
    62a4:	4c ad       	sts	0x6c, r20
    62a6:	5d ad       	sts	0x6d, r21
    62a8:	6e ad       	sts	0x6e, r22
    62aa:	7f ad       	sts	0x6f, r23
    62ac:	21 97       	sbiw	r28, 0x01	; 1
    62ae:	da 01       	movw	r26, r20
    62b0:	99 27       	eor	r25, r25
    62b2:	88 27       	eor	r24, r24
    62b4:	4d a5       	lds	r20, 0x6d
    62b6:	5e a5       	lds	r21, 0x6e
    62b8:	6f a5       	lds	r22, 0x6f
    62ba:	78 a9       	sts	0x48, r23
    62bc:	60 70       	andi	r22, 0x00	; 0
    62be:	70 70       	andi	r23, 0x00	; 0
    62c0:	84 2b       	or	r24, r20
    62c2:	95 2b       	or	r25, r21
    62c4:	a6 2b       	or	r26, r22
    62c6:	b7 2b       	or	r27, r23
    62c8:	49 a5       	lds	r20, 0x69
    62ca:	5a a5       	lds	r21, 0x6a
    62cc:	6b a5       	lds	r22, 0x6b
    62ce:	7c a5       	lds	r23, 0x6c
    62d0:	80 17       	cp	r24, r16
    62d2:	91 07       	cpc	r25, r17
    62d4:	a2 07       	cpc	r26, r18
    62d6:	b3 07       	cpc	r27, r19
    62d8:	f0 f4       	brcc	.+60     	; 0x6316 <__stack+0x317>
    62da:	41 50       	subi	r20, 0x01	; 1
    62dc:	50 40       	sbci	r21, 0x00	; 0
    62de:	60 40       	sbci	r22, 0x00	; 0
    62e0:	70 40       	sbci	r23, 0x00	; 0
    62e2:	88 0d       	add	r24, r8
    62e4:	99 1d       	adc	r25, r9
    62e6:	aa 1d       	adc	r26, r10
    62e8:	bb 1d       	adc	r27, r11
    62ea:	88 15       	cp	r24, r8
    62ec:	99 05       	cpc	r25, r9
    62ee:	aa 05       	cpc	r26, r10
    62f0:	bb 05       	cpc	r27, r11
    62f2:	88 f0       	brcs	.+34     	; 0x6316 <__stack+0x317>
    62f4:	80 17       	cp	r24, r16
    62f6:	91 07       	cpc	r25, r17
    62f8:	a2 07       	cpc	r26, r18
    62fa:	b3 07       	cpc	r27, r19
    62fc:	60 f4       	brcc	.+24     	; 0x6316 <__stack+0x317>
    62fe:	49 a5       	lds	r20, 0x69
    6300:	5a a5       	lds	r21, 0x6a
    6302:	6b a5       	lds	r22, 0x6b
    6304:	7c a5       	lds	r23, 0x6c
    6306:	42 50       	subi	r20, 0x02	; 2
    6308:	50 40       	sbci	r21, 0x00	; 0
    630a:	60 40       	sbci	r22, 0x00	; 0
    630c:	70 40       	sbci	r23, 0x00	; 0
    630e:	88 0d       	add	r24, r8
    6310:	99 1d       	adc	r25, r9
    6312:	aa 1d       	adc	r26, r10
    6314:	bb 1d       	adc	r27, r11
    6316:	6c 01       	movw	r12, r24
    6318:	7d 01       	movw	r14, r26
    631a:	c0 1a       	sub	r12, r16
    631c:	d1 0a       	sbc	r13, r17
    631e:	e2 0a       	sbc	r14, r18
    6320:	f3 0a       	sbc	r15, r19
    6322:	09 a9       	sts	0x49, r16
    6324:	1a a9       	sts	0x4a, r17
    6326:	2b a9       	sts	0x4b, r18
    6328:	3c a9       	sts	0x4c, r19
    632a:	38 01       	movw	r6, r16
    632c:	55 24       	eor	r5, r5
    632e:	44 24       	eor	r4, r4
    6330:	44 2a       	or	r4, r20
    6332:	55 2a       	or	r5, r21
    6334:	66 2a       	or	r6, r22
    6336:	77 2a       	or	r7, r23
    6338:	85 01       	movw	r16, r10
    633a:	22 27       	eor	r18, r18
    633c:	33 27       	eor	r19, r19
    633e:	0d a7       	lds	r16, 0x7d
    6340:	1e a7       	lds	r17, 0x7e
    6342:	2f a7       	lds	r18, 0x7f
    6344:	38 ab       	sts	0x58, r19
    6346:	95 01       	movw	r18, r10
    6348:	84 01       	movw	r16, r8
    634a:	20 70       	andi	r18, 0x00	; 0
    634c:	30 70       	andi	r19, 0x00	; 0
    634e:	09 af       	sts	0x79, r16
    6350:	1a af       	sts	0x7a, r17
    6352:	2b af       	sts	0x7b, r18
    6354:	3c af       	sts	0x7c, r19
    6356:	c7 01       	movw	r24, r14
    6358:	b6 01       	movw	r22, r12
    635a:	2d a5       	lds	r18, 0x6d
    635c:	3e a5       	lds	r19, 0x6e
    635e:	4f a5       	lds	r20, 0x6f
    6360:	58 a9       	sts	0x48, r21
    6362:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    6366:	29 a7       	lds	r18, 0x79
    6368:	3a a7       	lds	r19, 0x7a
    636a:	4b a7       	lds	r20, 0x7b
    636c:	5c a7       	lds	r21, 0x7c
    636e:	69 ab       	sts	0x59, r22
    6370:	7a ab       	sts	0x5a, r23
    6372:	8b ab       	sts	0x5b, r24
    6374:	9c ab       	sts	0x5c, r25
    6376:	c7 01       	movw	r24, r14
    6378:	b6 01       	movw	r22, r12
    637a:	2d a5       	lds	r18, 0x6d
    637c:	3e a5       	lds	r19, 0x6e
    637e:	4f a5       	lds	r20, 0x6f
    6380:	58 a9       	sts	0x48, r21
    6382:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    6386:	ca 01       	movw	r24, r20
    6388:	b9 01       	movw	r22, r18
    638a:	29 ad       	sts	0x69, r18
    638c:	3a ad       	sts	0x6a, r19
    638e:	4b ad       	sts	0x6b, r20
    6390:	5c ad       	sts	0x6c, r21
    6392:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    6396:	ab 01       	movw	r20, r22
    6398:	bc 01       	movw	r22, r24
    639a:	09 a9       	sts	0x49, r16
    639c:	1a a9       	sts	0x4a, r17
    639e:	2b a9       	sts	0x4b, r18
    63a0:	3c a9       	sts	0x4c, r19
    63a2:	78 01       	movw	r14, r16
    63a4:	dd 24       	eor	r13, r13
    63a6:	cc 24       	eor	r12, r12
    63a8:	0d a9       	sts	0x4d, r16
    63aa:	1e a9       	sts	0x4e, r17
    63ac:	2f a9       	sts	0x4f, r18
    63ae:	38 ad       	sts	0x68, r19
    63b0:	c9 01       	movw	r24, r18
    63b2:	aa 27       	eor	r26, r26
    63b4:	bb 27       	eor	r27, r27
    63b6:	c8 2a       	or	r12, r24
    63b8:	d9 2a       	or	r13, r25
    63ba:	ea 2a       	or	r14, r26
    63bc:	fb 2a       	or	r15, r27
    63be:	09 a5       	lds	r16, 0x69
    63c0:	1a a5       	lds	r17, 0x6a
    63c2:	2b a5       	lds	r18, 0x6b
    63c4:	3c a5       	lds	r19, 0x6c
    63c6:	c4 16       	cp	r12, r20
    63c8:	d5 06       	cpc	r13, r21
    63ca:	e6 06       	cpc	r14, r22
    63cc:	f7 06       	cpc	r15, r23
    63ce:	38 f5       	brcc	.+78     	; 0x641e <__stack+0x41f>
    63d0:	01 50       	subi	r16, 0x01	; 1
    63d2:	10 40       	sbci	r17, 0x00	; 0
    63d4:	20 40       	sbci	r18, 0x00	; 0
    63d6:	30 40       	sbci	r19, 0x00	; 0
    63d8:	09 ab       	sts	0x59, r16
    63da:	1a ab       	sts	0x5a, r17
    63dc:	2b ab       	sts	0x5b, r18
    63de:	3c ab       	sts	0x5c, r19
    63e0:	c8 0c       	add	r12, r8
    63e2:	d9 1c       	adc	r13, r9
    63e4:	ea 1c       	adc	r14, r10
    63e6:	fb 1c       	adc	r15, r11
    63e8:	c8 14       	cp	r12, r8
    63ea:	d9 04       	cpc	r13, r9
    63ec:	ea 04       	cpc	r14, r10
    63ee:	fb 04       	cpc	r15, r11
    63f0:	d0 f0       	brcs	.+52     	; 0x6426 <__stack+0x427>
    63f2:	c4 16       	cp	r12, r20
    63f4:	d5 06       	cpc	r13, r21
    63f6:	e6 06       	cpc	r14, r22
    63f8:	f7 06       	cpc	r15, r23
    63fa:	a8 f4       	brcc	.+42     	; 0x6426 <__stack+0x427>
    63fc:	09 a5       	lds	r16, 0x69
    63fe:	1a a5       	lds	r17, 0x6a
    6400:	2b a5       	lds	r18, 0x6b
    6402:	3c a5       	lds	r19, 0x6c
    6404:	02 50       	subi	r16, 0x02	; 2
    6406:	10 40       	sbci	r17, 0x00	; 0
    6408:	20 40       	sbci	r18, 0x00	; 0
    640a:	30 40       	sbci	r19, 0x00	; 0
    640c:	09 ab       	sts	0x59, r16
    640e:	1a ab       	sts	0x5a, r17
    6410:	2b ab       	sts	0x5b, r18
    6412:	3c ab       	sts	0x5c, r19
    6414:	c8 0c       	add	r12, r8
    6416:	d9 1c       	adc	r13, r9
    6418:	ea 1c       	adc	r14, r10
    641a:	fb 1c       	adc	r15, r11
    641c:	04 c0       	rjmp	.+8      	; 0x6426 <__stack+0x427>
    641e:	09 ab       	sts	0x59, r16
    6420:	1a ab       	sts	0x5a, r17
    6422:	2b ab       	sts	0x5b, r18
    6424:	3c ab       	sts	0x5c, r19
    6426:	c4 1a       	sub	r12, r20
    6428:	d5 0a       	sbc	r13, r21
    642a:	e6 0a       	sbc	r14, r22
    642c:	f7 0a       	sbc	r15, r23
    642e:	c7 01       	movw	r24, r14
    6430:	b6 01       	movw	r22, r12
    6432:	2d a5       	lds	r18, 0x6d
    6434:	3e a5       	lds	r19, 0x6e
    6436:	4f a5       	lds	r20, 0x6f
    6438:	58 a9       	sts	0x48, r21
    643a:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    643e:	29 a7       	lds	r18, 0x79
    6440:	3a a7       	lds	r19, 0x7a
    6442:	4b a7       	lds	r20, 0x7b
    6444:	5c a7       	lds	r21, 0x7c
    6446:	21 96       	adiw	r28, 0x01	; 1
    6448:	6c af       	sts	0x7c, r22
    644a:	7d af       	sts	0x7d, r23
    644c:	8e af       	sts	0x7e, r24
    644e:	9f af       	sts	0x7f, r25
    6450:	21 97       	sbiw	r28, 0x01	; 1
    6452:	c7 01       	movw	r24, r14
    6454:	b6 01       	movw	r22, r12
    6456:	2d a5       	lds	r18, 0x6d
    6458:	3e a5       	lds	r19, 0x6e
    645a:	4f a5       	lds	r20, 0x6f
    645c:	58 a9       	sts	0x48, r21
    645e:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    6462:	ca 01       	movw	r24, r20
    6464:	b9 01       	movw	r22, r18
    6466:	29 ad       	sts	0x69, r18
    6468:	3a ad       	sts	0x6a, r19
    646a:	4b ad       	sts	0x6b, r20
    646c:	5c ad       	sts	0x6c, r21
    646e:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    6472:	8b 01       	movw	r16, r22
    6474:	9c 01       	movw	r18, r24
    6476:	21 96       	adiw	r28, 0x01	; 1
    6478:	4c ad       	sts	0x6c, r20
    647a:	5d ad       	sts	0x6d, r21
    647c:	6e ad       	sts	0x6e, r22
    647e:	7f ad       	sts	0x6f, r23
    6480:	21 97       	sbiw	r28, 0x01	; 1
    6482:	da 01       	movw	r26, r20
    6484:	99 27       	eor	r25, r25
    6486:	88 27       	eor	r24, r24
    6488:	4d a9       	sts	0x4d, r20
    648a:	5e a9       	sts	0x4e, r21
    648c:	6f a9       	sts	0x4f, r22
    648e:	78 ad       	sts	0x68, r23
    6490:	60 70       	andi	r22, 0x00	; 0
    6492:	70 70       	andi	r23, 0x00	; 0
    6494:	84 2b       	or	r24, r20
    6496:	95 2b       	or	r25, r21
    6498:	a6 2b       	or	r26, r22
    649a:	b7 2b       	or	r27, r23
    649c:	49 a5       	lds	r20, 0x69
    649e:	5a a5       	lds	r21, 0x6a
    64a0:	6b a5       	lds	r22, 0x6b
    64a2:	7c a5       	lds	r23, 0x6c
    64a4:	80 17       	cp	r24, r16
    64a6:	91 07       	cpc	r25, r17
    64a8:	a2 07       	cpc	r26, r18
    64aa:	b3 07       	cpc	r27, r19
    64ac:	d0 f4       	brcc	.+52     	; 0x64e2 <__stack+0x4e3>
    64ae:	41 50       	subi	r20, 0x01	; 1
    64b0:	50 40       	sbci	r21, 0x00	; 0
    64b2:	60 40       	sbci	r22, 0x00	; 0
    64b4:	70 40       	sbci	r23, 0x00	; 0
    64b6:	88 0d       	add	r24, r8
    64b8:	99 1d       	adc	r25, r9
    64ba:	aa 1d       	adc	r26, r10
    64bc:	bb 1d       	adc	r27, r11
    64be:	88 15       	cp	r24, r8
    64c0:	99 05       	cpc	r25, r9
    64c2:	aa 05       	cpc	r26, r10
    64c4:	bb 05       	cpc	r27, r11
    64c6:	68 f0       	brcs	.+26     	; 0x64e2 <__stack+0x4e3>
    64c8:	80 17       	cp	r24, r16
    64ca:	91 07       	cpc	r25, r17
    64cc:	a2 07       	cpc	r26, r18
    64ce:	b3 07       	cpc	r27, r19
    64d0:	40 f4       	brcc	.+16     	; 0x64e2 <__stack+0x4e3>
    64d2:	49 a5       	lds	r20, 0x69
    64d4:	5a a5       	lds	r21, 0x6a
    64d6:	6b a5       	lds	r22, 0x6b
    64d8:	7c a5       	lds	r23, 0x6c
    64da:	42 50       	subi	r20, 0x02	; 2
    64dc:	50 40       	sbci	r21, 0x00	; 0
    64de:	60 40       	sbci	r22, 0x00	; 0
    64e0:	70 40       	sbci	r23, 0x00	; 0
    64e2:	09 a9       	sts	0x49, r16
    64e4:	1a a9       	sts	0x4a, r17
    64e6:	2b a9       	sts	0x4b, r18
    64e8:	3c a9       	sts	0x4c, r19
    64ea:	78 01       	movw	r14, r16
    64ec:	dd 24       	eor	r13, r13
    64ee:	cc 24       	eor	r12, r12
    64f0:	c4 2a       	or	r12, r20
    64f2:	d5 2a       	or	r13, r21
    64f4:	e6 2a       	or	r14, r22
    64f6:	f7 2a       	or	r15, r23
    64f8:	50 c2       	rjmp	.+1184   	; 0x699a <__stack+0x99b>
    64fa:	c8 16       	cp	r12, r24
    64fc:	d9 06       	cpc	r13, r25
    64fe:	ea 06       	cpc	r14, r26
    6500:	fb 06       	cpc	r15, r27
    6502:	08 f4       	brcc	.+2      	; 0x6506 <__stack+0x507>
    6504:	37 c2       	rjmp	.+1134   	; 0x6974 <__stack+0x975>
    6506:	80 30       	cpi	r24, 0x00	; 0
    6508:	10 e0       	ldi	r17, 0x00	; 0
    650a:	91 07       	cpc	r25, r17
    650c:	11 e0       	ldi	r17, 0x01	; 1
    650e:	a1 07       	cpc	r26, r17
    6510:	10 e0       	ldi	r17, 0x00	; 0
    6512:	b1 07       	cpc	r27, r17
    6514:	50 f4       	brcc	.+20     	; 0x652a <__stack+0x52b>
    6516:	8f 3f       	cpi	r24, 0xFF	; 255
    6518:	91 05       	cpc	r25, r1
    651a:	a1 05       	cpc	r26, r1
    651c:	b1 05       	cpc	r27, r1
    651e:	09 f0       	breq	.+2      	; 0x6522 <__stack+0x523>
    6520:	88 f4       	brcc	.+34     	; 0x6544 <__stack+0x545>
    6522:	00 e0       	ldi	r16, 0x00	; 0
    6524:	10 e0       	ldi	r17, 0x00	; 0
    6526:	98 01       	movw	r18, r16
    6528:	16 c0       	rjmp	.+44     	; 0x6556 <__stack+0x557>
    652a:	80 30       	cpi	r24, 0x00	; 0
    652c:	20 e0       	ldi	r18, 0x00	; 0
    652e:	92 07       	cpc	r25, r18
    6530:	20 e0       	ldi	r18, 0x00	; 0
    6532:	a2 07       	cpc	r26, r18
    6534:	21 e0       	ldi	r18, 0x01	; 1
    6536:	b2 07       	cpc	r27, r18
    6538:	50 f4       	brcc	.+20     	; 0x654e <__stack+0x54f>
    653a:	00 e1       	ldi	r16, 0x10	; 16
    653c:	10 e0       	ldi	r17, 0x00	; 0
    653e:	20 e0       	ldi	r18, 0x00	; 0
    6540:	30 e0       	ldi	r19, 0x00	; 0
    6542:	09 c0       	rjmp	.+18     	; 0x6556 <__stack+0x557>
    6544:	08 e0       	ldi	r16, 0x08	; 8
    6546:	10 e0       	ldi	r17, 0x00	; 0
    6548:	20 e0       	ldi	r18, 0x00	; 0
    654a:	30 e0       	ldi	r19, 0x00	; 0
    654c:	04 c0       	rjmp	.+8      	; 0x6556 <__stack+0x557>
    654e:	08 e1       	ldi	r16, 0x18	; 24
    6550:	10 e0       	ldi	r17, 0x00	; 0
    6552:	20 e0       	ldi	r18, 0x00	; 0
    6554:	30 e0       	ldi	r19, 0x00	; 0
    6556:	ac 01       	movw	r20, r24
    6558:	bd 01       	movw	r22, r26
    655a:	00 2e       	mov	r0, r16
    655c:	04 c0       	rjmp	.+8      	; 0x6566 <__stack+0x567>
    655e:	76 95       	lsr	r23
    6560:	67 95       	ror	r22
    6562:	57 95       	ror	r21
    6564:	47 95       	ror	r20
    6566:	0a 94       	dec	r0
    6568:	d2 f7       	brpl	.-12     	; 0x655e <__stack+0x55f>
    656a:	fa 01       	movw	r30, r20
    656c:	e3 5f       	subi	r30, 0xF3	; 243
    656e:	ff 4d       	sbci	r31, 0xDF	; 223
    6570:	40 81       	ld	r20, Z
    6572:	04 0f       	add	r16, r20
    6574:	11 1d       	adc	r17, r1
    6576:	21 1d       	adc	r18, r1
    6578:	31 1d       	adc	r19, r1
    657a:	40 e2       	ldi	r20, 0x20	; 32
    657c:	50 e0       	ldi	r21, 0x00	; 0
    657e:	60 e0       	ldi	r22, 0x00	; 0
    6580:	70 e0       	ldi	r23, 0x00	; 0
    6582:	40 1b       	sub	r20, r16
    6584:	51 0b       	sbc	r21, r17
    6586:	62 0b       	sbc	r22, r18
    6588:	73 0b       	sbc	r23, r19
    658a:	a1 f4       	brne	.+40     	; 0x65b4 <__stack+0x5b5>
    658c:	8c 15       	cp	r24, r12
    658e:	9d 05       	cpc	r25, r13
    6590:	ae 05       	cpc	r26, r14
    6592:	bf 05       	cpc	r27, r15
    6594:	08 f4       	brcc	.+2      	; 0x6598 <__stack+0x599>
    6596:	f5 c1       	rjmp	.+1002   	; 0x6982 <__stack+0x983>
    6598:	ed a8       	sts	0x8d, r30
    659a:	fe a8       	sts	0x8e, r31
    659c:	0f a9       	sts	0x4f, r16
    659e:	18 ad       	sts	0x68, r17
    65a0:	44 24       	eor	r4, r4
    65a2:	55 24       	eor	r5, r5
    65a4:	32 01       	movw	r6, r4
    65a6:	e8 14       	cp	r14, r8
    65a8:	f9 04       	cpc	r15, r9
    65aa:	0a 05       	cpc	r16, r10
    65ac:	1b 05       	cpc	r17, r11
    65ae:	08 f0       	brcs	.+2      	; 0x65b2 <__stack+0x5b3>
    65b0:	eb c1       	rjmp	.+982    	; 0x6988 <__stack+0x989>
    65b2:	e3 c1       	rjmp	.+966    	; 0x697a <__stack+0x97b>
    65b4:	34 2e       	mov	r3, r20
    65b6:	2c 01       	movw	r4, r24
    65b8:	3d 01       	movw	r6, r26
    65ba:	04 c0       	rjmp	.+8      	; 0x65c4 <__stack+0x5c5>
    65bc:	44 0c       	add	r4, r4
    65be:	55 1c       	adc	r5, r5
    65c0:	66 1c       	adc	r6, r6
    65c2:	77 1c       	adc	r7, r7
    65c4:	4a 95       	dec	r20
    65c6:	d2 f7       	brpl	.-12     	; 0x65bc <__stack+0x5bd>
    65c8:	d5 01       	movw	r26, r10
    65ca:	c4 01       	movw	r24, r8
    65cc:	00 2e       	mov	r0, r16
    65ce:	04 c0       	rjmp	.+8      	; 0x65d8 <__stack+0x5d9>
    65d0:	b6 95       	lsr	r27
    65d2:	a7 95       	ror	r26
    65d4:	97 95       	ror	r25
    65d6:	87 95       	ror	r24
    65d8:	0a 94       	dec	r0
    65da:	d2 f7       	brpl	.-12     	; 0x65d0 <__stack+0x5d1>
    65dc:	48 2a       	or	r4, r24
    65de:	59 2a       	or	r5, r25
    65e0:	6a 2a       	or	r6, r26
    65e2:	7b 2a       	or	r7, r27
    65e4:	a5 01       	movw	r20, r10
    65e6:	94 01       	movw	r18, r8
    65e8:	03 2c       	mov	r0, r3
    65ea:	04 c0       	rjmp	.+8      	; 0x65f4 <__stack+0x5f5>
    65ec:	22 0f       	add	r18, r18
    65ee:	33 1f       	adc	r19, r19
    65f0:	44 1f       	adc	r20, r20
    65f2:	55 1f       	adc	r21, r21
    65f4:	0a 94       	dec	r0
    65f6:	d2 f7       	brpl	.-12     	; 0x65ec <__stack+0x5ed>
    65f8:	29 af       	sts	0x79, r18
    65fa:	3a af       	sts	0x7a, r19
    65fc:	4b af       	sts	0x7b, r20
    65fe:	5c af       	sts	0x7c, r21
    6600:	b7 01       	movw	r22, r14
    6602:	a6 01       	movw	r20, r12
    6604:	00 2e       	mov	r0, r16
    6606:	04 c0       	rjmp	.+8      	; 0x6610 <__stack+0x611>
    6608:	76 95       	lsr	r23
    660a:	67 95       	ror	r22
    660c:	57 95       	ror	r21
    660e:	47 95       	ror	r20
    6610:	0a 94       	dec	r0
    6612:	d2 f7       	brpl	.-12     	; 0x6608 <__stack+0x609>
    6614:	49 ab       	sts	0x59, r20
    6616:	5a ab       	sts	0x5a, r21
    6618:	6b ab       	sts	0x5b, r22
    661a:	7c ab       	sts	0x5c, r23
    661c:	c7 01       	movw	r24, r14
    661e:	b6 01       	movw	r22, r12
    6620:	03 2c       	mov	r0, r3
    6622:	04 c0       	rjmp	.+8      	; 0x662c <__stack+0x62d>
    6624:	66 0f       	add	r22, r22
    6626:	77 1f       	adc	r23, r23
    6628:	88 1f       	adc	r24, r24
    662a:	99 1f       	adc	r25, r25
    662c:	0a 94       	dec	r0
    662e:	d2 f7       	brpl	.-12     	; 0x6624 <__stack+0x625>
    6630:	6d a7       	lds	r22, 0x7d
    6632:	7e a7       	lds	r23, 0x7e
    6634:	8f a7       	lds	r24, 0x7f
    6636:	98 ab       	sts	0x58, r25
    6638:	8d a9       	sts	0x4d, r24
    663a:	9e a9       	sts	0x4e, r25
    663c:	af a9       	sts	0x4f, r26
    663e:	b8 ad       	sts	0x68, r27
    6640:	04 c0       	rjmp	.+8      	; 0x664a <__stack+0x64b>
    6642:	b6 95       	lsr	r27
    6644:	a7 95       	ror	r26
    6646:	97 95       	ror	r25
    6648:	87 95       	ror	r24
    664a:	0a 95       	dec	r16
    664c:	d2 f7       	brpl	.-12     	; 0x6642 <__stack+0x643>
    664e:	4d a5       	lds	r20, 0x6d
    6650:	5e a5       	lds	r21, 0x6e
    6652:	6f a5       	lds	r22, 0x6f
    6654:	78 a9       	sts	0x48, r23
    6656:	48 2b       	or	r20, r24
    6658:	59 2b       	or	r21, r25
    665a:	6a 2b       	or	r22, r26
    665c:	7b 2b       	or	r23, r27
    665e:	4d a7       	lds	r20, 0x7d
    6660:	5e a7       	lds	r21, 0x7e
    6662:	6f a7       	lds	r22, 0x7f
    6664:	78 ab       	sts	0x58, r23
    6666:	43 01       	movw	r8, r6
    6668:	aa 24       	eor	r10, r10
    666a:	bb 24       	eor	r11, r11
    666c:	93 01       	movw	r18, r6
    666e:	82 01       	movw	r16, r4
    6670:	20 70       	andi	r18, 0x00	; 0
    6672:	30 70       	andi	r19, 0x00	; 0
    6674:	21 96       	adiw	r28, 0x01	; 1
    6676:	0c af       	sts	0x7c, r16
    6678:	1d af       	sts	0x7d, r17
    667a:	2e af       	sts	0x7e, r18
    667c:	3f af       	sts	0x7f, r19
    667e:	21 97       	sbiw	r28, 0x01	; 1
    6680:	69 a9       	sts	0x49, r22
    6682:	7a a9       	sts	0x4a, r23
    6684:	8b a9       	sts	0x4b, r24
    6686:	9c a9       	sts	0x4c, r25
    6688:	a5 01       	movw	r20, r10
    668a:	94 01       	movw	r18, r8
    668c:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    6690:	29 a7       	lds	r18, 0x79
    6692:	3a a7       	lds	r19, 0x7a
    6694:	4b a7       	lds	r20, 0x7b
    6696:	5c a7       	lds	r21, 0x7c
    6698:	6b 01       	movw	r12, r22
    669a:	7c 01       	movw	r14, r24
    669c:	69 a9       	sts	0x49, r22
    669e:	7a a9       	sts	0x4a, r23
    66a0:	8b a9       	sts	0x4b, r24
    66a2:	9c a9       	sts	0x4c, r25
    66a4:	a5 01       	movw	r20, r10
    66a6:	94 01       	movw	r18, r8
    66a8:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    66ac:	ca 01       	movw	r24, r20
    66ae:	b9 01       	movw	r22, r18
    66b0:	21 96       	adiw	r28, 0x01	; 1
    66b2:	2c ad       	sts	0x6c, r18
    66b4:	3d ad       	sts	0x6d, r19
    66b6:	4e ad       	sts	0x6e, r20
    66b8:	5f ad       	sts	0x6f, r21
    66ba:	21 97       	sbiw	r28, 0x01	; 1
    66bc:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    66c0:	dc 01       	movw	r26, r24
    66c2:	cb 01       	movw	r24, r22
    66c4:	76 01       	movw	r14, r12
    66c6:	dd 24       	eor	r13, r13
    66c8:	cc 24       	eor	r12, r12
    66ca:	0d a5       	lds	r16, 0x6d
    66cc:	1e a5       	lds	r17, 0x6e
    66ce:	2f a5       	lds	r18, 0x6f
    66d0:	38 a9       	sts	0x48, r19
    66d2:	a9 01       	movw	r20, r18
    66d4:	66 27       	eor	r22, r22
    66d6:	77 27       	eor	r23, r23
    66d8:	c4 2a       	or	r12, r20
    66da:	d5 2a       	or	r13, r21
    66dc:	e6 2a       	or	r14, r22
    66de:	f7 2a       	or	r15, r23
    66e0:	09 a5       	lds	r16, 0x69
    66e2:	1a a5       	lds	r17, 0x6a
    66e4:	2b a5       	lds	r18, 0x6b
    66e6:	3c a5       	lds	r19, 0x6c
    66e8:	c8 16       	cp	r12, r24
    66ea:	d9 06       	cpc	r13, r25
    66ec:	ea 06       	cpc	r14, r26
    66ee:	fb 06       	cpc	r15, r27
    66f0:	38 f5       	brcc	.+78     	; 0x6740 <__stack+0x741>
    66f2:	01 50       	subi	r16, 0x01	; 1
    66f4:	10 40       	sbci	r17, 0x00	; 0
    66f6:	20 40       	sbci	r18, 0x00	; 0
    66f8:	30 40       	sbci	r19, 0x00	; 0
    66fa:	09 ab       	sts	0x59, r16
    66fc:	1a ab       	sts	0x5a, r17
    66fe:	2b ab       	sts	0x5b, r18
    6700:	3c ab       	sts	0x5c, r19
    6702:	c4 0c       	add	r12, r4
    6704:	d5 1c       	adc	r13, r5
    6706:	e6 1c       	adc	r14, r6
    6708:	f7 1c       	adc	r15, r7
    670a:	c4 14       	cp	r12, r4
    670c:	d5 04       	cpc	r13, r5
    670e:	e6 04       	cpc	r14, r6
    6710:	f7 04       	cpc	r15, r7
    6712:	d0 f0       	brcs	.+52     	; 0x6748 <__stack+0x749>
    6714:	c8 16       	cp	r12, r24
    6716:	d9 06       	cpc	r13, r25
    6718:	ea 06       	cpc	r14, r26
    671a:	fb 06       	cpc	r15, r27
    671c:	a8 f4       	brcc	.+42     	; 0x6748 <__stack+0x749>
    671e:	09 a5       	lds	r16, 0x69
    6720:	1a a5       	lds	r17, 0x6a
    6722:	2b a5       	lds	r18, 0x6b
    6724:	3c a5       	lds	r19, 0x6c
    6726:	02 50       	subi	r16, 0x02	; 2
    6728:	10 40       	sbci	r17, 0x00	; 0
    672a:	20 40       	sbci	r18, 0x00	; 0
    672c:	30 40       	sbci	r19, 0x00	; 0
    672e:	09 ab       	sts	0x59, r16
    6730:	1a ab       	sts	0x5a, r17
    6732:	2b ab       	sts	0x5b, r18
    6734:	3c ab       	sts	0x5c, r19
    6736:	c4 0c       	add	r12, r4
    6738:	d5 1c       	adc	r13, r5
    673a:	e6 1c       	adc	r14, r6
    673c:	f7 1c       	adc	r15, r7
    673e:	04 c0       	rjmp	.+8      	; 0x6748 <__stack+0x749>
    6740:	09 ab       	sts	0x59, r16
    6742:	1a ab       	sts	0x5a, r17
    6744:	2b ab       	sts	0x5b, r18
    6746:	3c ab       	sts	0x5c, r19
    6748:	c8 1a       	sub	r12, r24
    674a:	d9 0a       	sbc	r13, r25
    674c:	ea 0a       	sbc	r14, r26
    674e:	fb 0a       	sbc	r15, r27
    6750:	c7 01       	movw	r24, r14
    6752:	b6 01       	movw	r22, r12
    6754:	a5 01       	movw	r20, r10
    6756:	94 01       	movw	r18, r8
    6758:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    675c:	29 a7       	lds	r18, 0x79
    675e:	3a a7       	lds	r19, 0x7a
    6760:	4b a7       	lds	r20, 0x7b
    6762:	5c a7       	lds	r21, 0x7c
    6764:	29 96       	adiw	r28, 0x09	; 9
    6766:	6c af       	sts	0x7c, r22
    6768:	7d af       	sts	0x7d, r23
    676a:	8e af       	sts	0x7e, r24
    676c:	9f af       	sts	0x7f, r25
    676e:	29 97       	sbiw	r28, 0x09	; 9
    6770:	c7 01       	movw	r24, r14
    6772:	b6 01       	movw	r22, r12
    6774:	a5 01       	movw	r20, r10
    6776:	94 01       	movw	r18, r8
    6778:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__udivmodsi4>
    677c:	ca 01       	movw	r24, r20
    677e:	b9 01       	movw	r22, r18
    6780:	21 96       	adiw	r28, 0x01	; 1
    6782:	2c ad       	sts	0x6c, r18
    6784:	3d ad       	sts	0x6d, r19
    6786:	4e ad       	sts	0x6e, r20
    6788:	5f ad       	sts	0x6f, r21
    678a:	21 97       	sbiw	r28, 0x01	; 1
    678c:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    6790:	4b 01       	movw	r8, r22
    6792:	5c 01       	movw	r10, r24
    6794:	29 96       	adiw	r28, 0x09	; 9
    6796:	4c ad       	sts	0x6c, r20
    6798:	5d ad       	sts	0x6d, r21
    679a:	6e ad       	sts	0x6e, r22
    679c:	7f ad       	sts	0x6f, r23
    679e:	29 97       	sbiw	r28, 0x09	; 9
    67a0:	9a 01       	movw	r18, r20
    67a2:	11 27       	eor	r17, r17
    67a4:	00 27       	eor	r16, r16
    67a6:	8d a5       	lds	r24, 0x6d
    67a8:	9e a5       	lds	r25, 0x6e
    67aa:	af a5       	lds	r26, 0x6f
    67ac:	b8 a9       	sts	0x48, r27
    67ae:	a0 70       	andi	r26, 0x00	; 0
    67b0:	b0 70       	andi	r27, 0x00	; 0
    67b2:	08 2b       	or	r16, r24
    67b4:	19 2b       	or	r17, r25
    67b6:	2a 2b       	or	r18, r26
    67b8:	3b 2b       	or	r19, r27
    67ba:	89 a5       	lds	r24, 0x69
    67bc:	9a a5       	lds	r25, 0x6a
    67be:	ab a5       	lds	r26, 0x6b
    67c0:	bc a5       	lds	r27, 0x6c
    67c2:	08 15       	cp	r16, r8
    67c4:	19 05       	cpc	r17, r9
    67c6:	2a 05       	cpc	r18, r10
    67c8:	3b 05       	cpc	r19, r11
    67ca:	e0 f4       	brcc	.+56     	; 0x6804 <__stack+0x805>
    67cc:	01 97       	sbiw	r24, 0x01	; 1
    67ce:	a1 09       	sbc	r26, r1
    67d0:	b1 09       	sbc	r27, r1
    67d2:	04 0d       	add	r16, r4
    67d4:	15 1d       	adc	r17, r5
    67d6:	26 1d       	adc	r18, r6
    67d8:	37 1d       	adc	r19, r7
    67da:	04 15       	cp	r16, r4
    67dc:	15 05       	cpc	r17, r5
    67de:	26 05       	cpc	r18, r6
    67e0:	37 05       	cpc	r19, r7
    67e2:	80 f0       	brcs	.+32     	; 0x6804 <__stack+0x805>
    67e4:	08 15       	cp	r16, r8
    67e6:	19 05       	cpc	r17, r9
    67e8:	2a 05       	cpc	r18, r10
    67ea:	3b 05       	cpc	r19, r11
    67ec:	58 f4       	brcc	.+22     	; 0x6804 <__stack+0x805>
    67ee:	89 a5       	lds	r24, 0x69
    67f0:	9a a5       	lds	r25, 0x6a
    67f2:	ab a5       	lds	r26, 0x6b
    67f4:	bc a5       	lds	r27, 0x6c
    67f6:	02 97       	sbiw	r24, 0x02	; 2
    67f8:	a1 09       	sbc	r26, r1
    67fa:	b1 09       	sbc	r27, r1
    67fc:	04 0d       	add	r16, r4
    67fe:	15 1d       	adc	r17, r5
    6800:	26 1d       	adc	r18, r6
    6802:	37 1d       	adc	r19, r7
    6804:	b9 01       	movw	r22, r18
    6806:	a8 01       	movw	r20, r16
    6808:	48 19       	sub	r20, r8
    680a:	59 09       	sbc	r21, r9
    680c:	6a 09       	sbc	r22, r10
    680e:	7b 09       	sbc	r23, r11
    6810:	4d a7       	lds	r20, 0x7d
    6812:	5e a7       	lds	r21, 0x7e
    6814:	6f a7       	lds	r22, 0x7f
    6816:	78 ab       	sts	0x58, r23
    6818:	09 a9       	sts	0x49, r16
    681a:	1a a9       	sts	0x4a, r17
    681c:	2b a9       	sts	0x4b, r18
    681e:	3c a9       	sts	0x4c, r19
    6820:	78 01       	movw	r14, r16
    6822:	dd 24       	eor	r13, r13
    6824:	cc 24       	eor	r12, r12
    6826:	c8 2a       	or	r12, r24
    6828:	d9 2a       	or	r13, r25
    682a:	ea 2a       	or	r14, r26
    682c:	fb 2a       	or	r15, r27
    682e:	ff ef       	ldi	r31, 0xFF	; 255
    6830:	8f 2e       	mov	r8, r31
    6832:	ff ef       	ldi	r31, 0xFF	; 255
    6834:	9f 2e       	mov	r9, r31
    6836:	a1 2c       	mov	r10, r1
    6838:	b1 2c       	mov	r11, r1
    683a:	8c 20       	and	r8, r12
    683c:	9d 20       	and	r9, r13
    683e:	ae 20       	and	r10, r14
    6840:	bf 20       	and	r11, r15
    6842:	87 01       	movw	r16, r14
    6844:	22 27       	eor	r18, r18
    6846:	33 27       	eor	r19, r19
    6848:	09 a7       	lds	r16, 0x79
    684a:	1a a7       	lds	r17, 0x7a
    684c:	2b a7       	lds	r18, 0x7b
    684e:	3c a7       	lds	r19, 0x7c
    6850:	49 ac       	sts	0xa9, r20
    6852:	5a ac       	sts	0xaa, r21
    6854:	6b ac       	sts	0xab, r22
    6856:	7c ac       	sts	0xac, r23
    6858:	2f ef       	ldi	r18, 0xFF	; 255
    685a:	3f ef       	ldi	r19, 0xFF	; 255
    685c:	40 e0       	ldi	r20, 0x00	; 0
    685e:	50 e0       	ldi	r21, 0x00	; 0
    6860:	42 22       	and	r4, r18
    6862:	53 22       	and	r5, r19
    6864:	64 22       	and	r6, r20
    6866:	75 22       	and	r7, r21
    6868:	29 ad       	sts	0x69, r18
    686a:	3a ad       	sts	0x6a, r19
    686c:	4b ad       	sts	0x6b, r20
    686e:	5c ad       	sts	0x6c, r21
    6870:	8a 01       	movw	r16, r20
    6872:	22 27       	eor	r18, r18
    6874:	33 27       	eor	r19, r19
    6876:	09 ab       	sts	0x59, r16
    6878:	1a ab       	sts	0x5a, r17
    687a:	2b ab       	sts	0x5b, r18
    687c:	3c ab       	sts	0x5c, r19
    687e:	c5 01       	movw	r24, r10
    6880:	b4 01       	movw	r22, r8
    6882:	a3 01       	movw	r20, r6
    6884:	92 01       	movw	r18, r4
    6886:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    688a:	69 af       	sts	0x79, r22
    688c:	7a af       	sts	0x7a, r23
    688e:	8b af       	sts	0x7b, r24
    6890:	9c af       	sts	0x7c, r25
    6892:	c5 01       	movw	r24, r10
    6894:	b4 01       	movw	r22, r8
    6896:	29 a9       	sts	0x49, r18
    6898:	3a a9       	sts	0x4a, r19
    689a:	4b a9       	sts	0x4b, r20
    689c:	5c a9       	sts	0x4c, r21
    689e:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    68a2:	4b 01       	movw	r8, r22
    68a4:	5c 01       	movw	r10, r24
    68a6:	69 a5       	lds	r22, 0x69
    68a8:	7a a5       	lds	r23, 0x6a
    68aa:	8b a5       	lds	r24, 0x6b
    68ac:	9c a5       	lds	r25, 0x6c
    68ae:	a3 01       	movw	r20, r6
    68b0:	92 01       	movw	r18, r4
    68b2:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    68b6:	2b 01       	movw	r4, r22
    68b8:	3c 01       	movw	r6, r24
    68ba:	69 a5       	lds	r22, 0x69
    68bc:	7a a5       	lds	r23, 0x6a
    68be:	8b a5       	lds	r24, 0x6b
    68c0:	9c a5       	lds	r25, 0x6c
    68c2:	29 a9       	sts	0x49, r18
    68c4:	3a a9       	sts	0x4a, r19
    68c6:	4b a9       	sts	0x4b, r20
    68c8:	5c a9       	sts	0x4c, r21
    68ca:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <__mulsi3>
    68ce:	ab 01       	movw	r20, r22
    68d0:	bc 01       	movw	r22, r24
    68d2:	84 0c       	add	r8, r4
    68d4:	95 1c       	adc	r9, r5
    68d6:	a6 1c       	adc	r10, r6
    68d8:	b7 1c       	adc	r11, r7
    68da:	09 ad       	sts	0x69, r16
    68dc:	1a ad       	sts	0x6a, r17
    68de:	2b ad       	sts	0x6b, r18
    68e0:	3c ad       	sts	0x6c, r19
    68e2:	c9 01       	movw	r24, r18
    68e4:	aa 27       	eor	r26, r26
    68e6:	bb 27       	eor	r27, r27
    68e8:	88 0e       	add	r8, r24
    68ea:	99 1e       	adc	r9, r25
    68ec:	aa 1e       	adc	r10, r26
    68ee:	bb 1e       	adc	r11, r27
    68f0:	84 14       	cp	r8, r4
    68f2:	95 04       	cpc	r9, r5
    68f4:	a6 04       	cpc	r10, r6
    68f6:	b7 04       	cpc	r11, r7
    68f8:	20 f4       	brcc	.+8      	; 0x6902 <__stack+0x903>
    68fa:	40 50       	subi	r20, 0x00	; 0
    68fc:	50 40       	sbci	r21, 0x00	; 0
    68fe:	6f 4f       	sbci	r22, 0xFF	; 255
    6900:	7f 4f       	sbci	r23, 0xFF	; 255
    6902:	c5 01       	movw	r24, r10
    6904:	aa 27       	eor	r26, r26
    6906:	bb 27       	eor	r27, r27
    6908:	84 0f       	add	r24, r20
    690a:	95 1f       	adc	r25, r21
    690c:	a6 1f       	adc	r26, r22
    690e:	b7 1f       	adc	r27, r23
    6910:	0d a5       	lds	r16, 0x6d
    6912:	1e a5       	lds	r17, 0x6e
    6914:	2f a5       	lds	r18, 0x6f
    6916:	38 a9       	sts	0x48, r19
    6918:	08 17       	cp	r16, r24
    691a:	19 07       	cpc	r17, r25
    691c:	2a 07       	cpc	r18, r26
    691e:	3b 07       	cpc	r19, r27
    6920:	18 f1       	brcs	.+70     	; 0x6968 <__stack+0x969>
    6922:	80 17       	cp	r24, r16
    6924:	91 07       	cpc	r25, r17
    6926:	a2 07       	cpc	r26, r18
    6928:	b3 07       	cpc	r27, r19
    692a:	a1 f5       	brne	.+104    	; 0x6994 <__stack+0x995>
    692c:	54 01       	movw	r10, r8
    692e:	99 24       	eor	r9, r9
    6930:	88 24       	eor	r8, r8
    6932:	89 ad       	sts	0x69, r24
    6934:	9a ad       	sts	0x6a, r25
    6936:	ab ad       	sts	0x6b, r26
    6938:	bc ad       	sts	0x6c, r27
    693a:	a0 70       	andi	r26, 0x00	; 0
    693c:	b0 70       	andi	r27, 0x00	; 0
    693e:	88 0e       	add	r8, r24
    6940:	99 1e       	adc	r9, r25
    6942:	aa 1e       	adc	r10, r26
    6944:	bb 1e       	adc	r11, r27
    6946:	4d a9       	sts	0x4d, r20
    6948:	5e a9       	sts	0x4e, r21
    694a:	6f a9       	sts	0x4f, r22
    694c:	78 ad       	sts	0x68, r23
    694e:	03 2c       	mov	r0, r3
    6950:	04 c0       	rjmp	.+8      	; 0x695a <__stack+0x95b>
    6952:	44 0f       	add	r20, r20
    6954:	55 1f       	adc	r21, r21
    6956:	66 1f       	adc	r22, r22
    6958:	77 1f       	adc	r23, r23
    695a:	0a 94       	dec	r0
    695c:	d2 f7       	brpl	.-12     	; 0x6952 <__stack+0x953>
    695e:	48 15       	cp	r20, r8
    6960:	59 05       	cpc	r21, r9
    6962:	6a 05       	cpc	r22, r10
    6964:	7b 05       	cpc	r23, r11
    6966:	b0 f4       	brcc	.+44     	; 0x6994 <__stack+0x995>
    6968:	08 94       	sec
    696a:	c1 08       	sbc	r12, r1
    696c:	d1 08       	sbc	r13, r1
    696e:	e1 08       	sbc	r14, r1
    6970:	f1 08       	sbc	r15, r1
    6972:	10 c0       	rjmp	.+32     	; 0x6994 <__stack+0x995>
    6974:	44 24       	eor	r4, r4
    6976:	55 24       	eor	r5, r5
    6978:	32 01       	movw	r6, r4
    697a:	cc 24       	eor	r12, r12
    697c:	dd 24       	eor	r13, r13
    697e:	76 01       	movw	r14, r12
    6980:	0c c0       	rjmp	.+24     	; 0x699a <__stack+0x99b>
    6982:	44 24       	eor	r4, r4
    6984:	55 24       	eor	r5, r5
    6986:	32 01       	movw	r6, r4
    6988:	81 e0       	ldi	r24, 0x01	; 1
    698a:	c8 2e       	mov	r12, r24
    698c:	d1 2c       	mov	r13, r1
    698e:	e1 2c       	mov	r14, r1
    6990:	f1 2c       	mov	r15, r1
    6992:	03 c0       	rjmp	.+6      	; 0x699a <__stack+0x99b>
    6994:	44 24       	eor	r4, r4
    6996:	55 24       	eor	r5, r5
    6998:	32 01       	movw	r6, r4
    699a:	fe 01       	movw	r30, r28
    699c:	31 96       	adiw	r30, 0x01	; 1
    699e:	88 e0       	ldi	r24, 0x08	; 8
    69a0:	df 01       	movw	r26, r30
    69a2:	1d 92       	st	X+, r1
    69a4:	8a 95       	dec	r24
    69a6:	e9 f7       	brne	.-6      	; 0x69a2 <__stack+0x9a3>
    69a8:	c9 82       	std	Y+1, r12	; 0x01
    69aa:	da 82       	std	Y+2, r13	; 0x02
    69ac:	eb 82       	std	Y+3, r14	; 0x03
    69ae:	fc 82       	std	Y+4, r15	; 0x04
    69b0:	4d 82       	std	Y+5, r4	; 0x05
    69b2:	5e 82       	std	Y+6, r5	; 0x06
    69b4:	6f 82       	std	Y+7, r6	; 0x07
    69b6:	78 86       	std	Y+8, r7	; 0x08
    69b8:	2c 2d       	mov	r18, r12
    69ba:	3a 81       	ldd	r19, Y+2	; 0x02
    69bc:	4b 81       	ldd	r20, Y+3	; 0x03
    69be:	5c 81       	ldd	r21, Y+4	; 0x04
    69c0:	64 2d       	mov	r22, r4
    69c2:	7e 81       	ldd	r23, Y+6	; 0x06
    69c4:	8f 81       	ldd	r24, Y+7	; 0x07
    69c6:	98 85       	ldd	r25, Y+8	; 0x08
    69c8:	25 96       	adiw	r28, 0x05	; 5
    69ca:	ec ac       	sts	0xac, r30
    69cc:	fd ac       	sts	0xad, r31
    69ce:	0e ad       	sts	0x6e, r16
    69d0:	1f ad       	sts	0x6f, r17
    69d2:	25 97       	sbiw	r28, 0x05	; 5
    69d4:	e1 14       	cp	r14, r1
    69d6:	f1 04       	cpc	r15, r1
    69d8:	01 05       	cpc	r16, r1
    69da:	11 05       	cpc	r17, r1
    69dc:	09 f4       	brne	.+2      	; 0x69e0 <__stack+0x9e1>
    69de:	56 c0       	rjmp	.+172    	; 0x6a8c <__stack+0xa8d>
    69e0:	21 95       	neg	r18
    69e2:	e1 e0       	ldi	r30, 0x01	; 1
    69e4:	12 16       	cp	r1, r18
    69e6:	08 f0       	brcs	.+2      	; 0x69ea <__stack+0x9eb>
    69e8:	e0 e0       	ldi	r30, 0x00	; 0
    69ea:	31 95       	neg	r19
    69ec:	f1 e0       	ldi	r31, 0x01	; 1
    69ee:	13 16       	cp	r1, r19
    69f0:	08 f0       	brcs	.+2      	; 0x69f4 <__stack+0x9f5>
    69f2:	f0 e0       	ldi	r31, 0x00	; 0
    69f4:	03 2f       	mov	r16, r19
    69f6:	0e 1b       	sub	r16, r30
    69f8:	e1 e0       	ldi	r30, 0x01	; 1
    69fa:	30 17       	cp	r19, r16
    69fc:	08 f0       	brcs	.+2      	; 0x6a00 <__stack+0xa01>
    69fe:	e0 e0       	ldi	r30, 0x00	; 0
    6a00:	fe 2b       	or	r31, r30
    6a02:	41 95       	neg	r20
    6a04:	e1 e0       	ldi	r30, 0x01	; 1
    6a06:	14 16       	cp	r1, r20
    6a08:	08 f0       	brcs	.+2      	; 0x6a0c <__stack+0xa0d>
    6a0a:	e0 e0       	ldi	r30, 0x00	; 0
    6a0c:	14 2f       	mov	r17, r20
    6a0e:	1f 1b       	sub	r17, r31
    6a10:	31 e0       	ldi	r19, 0x01	; 1
    6a12:	41 17       	cp	r20, r17
    6a14:	08 f0       	brcs	.+2      	; 0x6a18 <__stack+0xa19>
    6a16:	30 e0       	ldi	r19, 0x00	; 0
    6a18:	e3 2b       	or	r30, r19
    6a1a:	51 95       	neg	r21
    6a1c:	f1 e0       	ldi	r31, 0x01	; 1
    6a1e:	15 16       	cp	r1, r21
    6a20:	08 f0       	brcs	.+2      	; 0x6a24 <__stack+0xa25>
    6a22:	f0 e0       	ldi	r31, 0x00	; 0
    6a24:	b5 2f       	mov	r27, r21
    6a26:	be 1b       	sub	r27, r30
    6a28:	31 e0       	ldi	r19, 0x01	; 1
    6a2a:	5b 17       	cp	r21, r27
    6a2c:	08 f0       	brcs	.+2      	; 0x6a30 <__stack+0xa31>
    6a2e:	30 e0       	ldi	r19, 0x00	; 0
    6a30:	f3 2b       	or	r31, r19
    6a32:	61 95       	neg	r22
    6a34:	e1 e0       	ldi	r30, 0x01	; 1
    6a36:	16 16       	cp	r1, r22
    6a38:	08 f0       	brcs	.+2      	; 0x6a3c <__stack+0xa3d>
    6a3a:	e0 e0       	ldi	r30, 0x00	; 0
    6a3c:	46 2e       	mov	r4, r22
    6a3e:	4f 1a       	sub	r4, r31
    6a40:	31 e0       	ldi	r19, 0x01	; 1
    6a42:	64 15       	cp	r22, r4
    6a44:	08 f0       	brcs	.+2      	; 0x6a48 <__stack+0xa49>
    6a46:	30 e0       	ldi	r19, 0x00	; 0
    6a48:	e3 2b       	or	r30, r19
    6a4a:	71 95       	neg	r23
    6a4c:	f1 e0       	ldi	r31, 0x01	; 1
    6a4e:	17 16       	cp	r1, r23
    6a50:	08 f0       	brcs	.+2      	; 0x6a54 <__stack+0xa55>
    6a52:	f0 e0       	ldi	r31, 0x00	; 0
    6a54:	a7 2f       	mov	r26, r23
    6a56:	ae 1b       	sub	r26, r30
    6a58:	31 e0       	ldi	r19, 0x01	; 1
    6a5a:	7a 17       	cp	r23, r26
    6a5c:	08 f0       	brcs	.+2      	; 0x6a60 <__stack+0xa61>
    6a5e:	30 e0       	ldi	r19, 0x00	; 0
    6a60:	f3 2b       	or	r31, r19
    6a62:	81 95       	neg	r24
    6a64:	e1 e0       	ldi	r30, 0x01	; 1
    6a66:	18 16       	cp	r1, r24
    6a68:	08 f0       	brcs	.+2      	; 0x6a6c <__stack+0xa6d>
    6a6a:	e0 e0       	ldi	r30, 0x00	; 0
    6a6c:	f8 2e       	mov	r15, r24
    6a6e:	ff 1a       	sub	r15, r31
    6a70:	ff 2d       	mov	r31, r15
    6a72:	31 e0       	ldi	r19, 0x01	; 1
    6a74:	8f 15       	cp	r24, r15
    6a76:	08 f0       	brcs	.+2      	; 0x6a7a <__stack+0xa7b>
    6a78:	30 e0       	ldi	r19, 0x00	; 0
    6a7a:	e3 2b       	or	r30, r19
    6a7c:	91 95       	neg	r25
    6a7e:	30 2f       	mov	r19, r16
    6a80:	41 2f       	mov	r20, r17
    6a82:	5b 2f       	mov	r21, r27
    6a84:	64 2d       	mov	r22, r4
    6a86:	7a 2f       	mov	r23, r26
    6a88:	8f 2f       	mov	r24, r31
    6a8a:	9e 1b       	sub	r25, r30
    6a8c:	c8 5b       	subi	r28, 0xB8	; 184
    6a8e:	df 4f       	sbci	r29, 0xFF	; 255
    6a90:	e1 e1       	ldi	r30, 0x11	; 17
    6a92:	0c 94 97 37 	jmp	0x6f2e	; 0x6f2e <__epilogue_restores__+0x2>

00006a96 <__subsf3>:
    6a96:	50 58       	subi	r21, 0x80	; 128

00006a98 <__addsf3>:
    6a98:	bb 27       	eor	r27, r27
    6a9a:	aa 27       	eor	r26, r26
    6a9c:	0e d0       	rcall	.+28     	; 0x6aba <__addsf3x>
    6a9e:	48 c1       	rjmp	.+656    	; 0x6d30 <__fp_round>
    6aa0:	39 d1       	rcall	.+626    	; 0x6d14 <__fp_pscA>
    6aa2:	30 f0       	brcs	.+12     	; 0x6ab0 <__addsf3+0x18>
    6aa4:	3e d1       	rcall	.+636    	; 0x6d22 <__fp_pscB>
    6aa6:	20 f0       	brcs	.+8      	; 0x6ab0 <__addsf3+0x18>
    6aa8:	31 f4       	brne	.+12     	; 0x6ab6 <__addsf3+0x1e>
    6aaa:	9f 3f       	cpi	r25, 0xFF	; 255
    6aac:	11 f4       	brne	.+4      	; 0x6ab2 <__addsf3+0x1a>
    6aae:	1e f4       	brtc	.+6      	; 0x6ab6 <__addsf3+0x1e>
    6ab0:	2e c1       	rjmp	.+604    	; 0x6d0e <__fp_nan>
    6ab2:	0e f4       	brtc	.+2      	; 0x6ab6 <__addsf3+0x1e>
    6ab4:	e0 95       	com	r30
    6ab6:	e7 fb       	bst	r30, 7
    6ab8:	24 c1       	rjmp	.+584    	; 0x6d02 <__fp_inf>

00006aba <__addsf3x>:
    6aba:	e9 2f       	mov	r30, r25
    6abc:	4a d1       	rcall	.+660    	; 0x6d52 <__fp_split3>
    6abe:	80 f3       	brcs	.-32     	; 0x6aa0 <__addsf3+0x8>
    6ac0:	ba 17       	cp	r27, r26
    6ac2:	62 07       	cpc	r22, r18
    6ac4:	73 07       	cpc	r23, r19
    6ac6:	84 07       	cpc	r24, r20
    6ac8:	95 07       	cpc	r25, r21
    6aca:	18 f0       	brcs	.+6      	; 0x6ad2 <__addsf3x+0x18>
    6acc:	71 f4       	brne	.+28     	; 0x6aea <__addsf3x+0x30>
    6ace:	9e f5       	brtc	.+102    	; 0x6b36 <__addsf3x+0x7c>
    6ad0:	62 c1       	rjmp	.+708    	; 0x6d96 <__fp_zero>
    6ad2:	0e f4       	brtc	.+2      	; 0x6ad6 <__addsf3x+0x1c>
    6ad4:	e0 95       	com	r30
    6ad6:	0b 2e       	mov	r0, r27
    6ad8:	ba 2f       	mov	r27, r26
    6ada:	a0 2d       	mov	r26, r0
    6adc:	0b 01       	movw	r0, r22
    6ade:	b9 01       	movw	r22, r18
    6ae0:	90 01       	movw	r18, r0
    6ae2:	0c 01       	movw	r0, r24
    6ae4:	ca 01       	movw	r24, r20
    6ae6:	a0 01       	movw	r20, r0
    6ae8:	11 24       	eor	r1, r1
    6aea:	ff 27       	eor	r31, r31
    6aec:	59 1b       	sub	r21, r25
    6aee:	99 f0       	breq	.+38     	; 0x6b16 <__addsf3x+0x5c>
    6af0:	59 3f       	cpi	r21, 0xF9	; 249
    6af2:	50 f4       	brcc	.+20     	; 0x6b08 <__addsf3x+0x4e>
    6af4:	50 3e       	cpi	r21, 0xE0	; 224
    6af6:	68 f1       	brcs	.+90     	; 0x6b52 <__addsf3x+0x98>
    6af8:	1a 16       	cp	r1, r26
    6afa:	f0 40       	sbci	r31, 0x00	; 0
    6afc:	a2 2f       	mov	r26, r18
    6afe:	23 2f       	mov	r18, r19
    6b00:	34 2f       	mov	r19, r20
    6b02:	44 27       	eor	r20, r20
    6b04:	58 5f       	subi	r21, 0xF8	; 248
    6b06:	f3 cf       	rjmp	.-26     	; 0x6aee <__addsf3x+0x34>
    6b08:	46 95       	lsr	r20
    6b0a:	37 95       	ror	r19
    6b0c:	27 95       	ror	r18
    6b0e:	a7 95       	ror	r26
    6b10:	f0 40       	sbci	r31, 0x00	; 0
    6b12:	53 95       	inc	r21
    6b14:	c9 f7       	brne	.-14     	; 0x6b08 <__addsf3x+0x4e>
    6b16:	7e f4       	brtc	.+30     	; 0x6b36 <__addsf3x+0x7c>
    6b18:	1f 16       	cp	r1, r31
    6b1a:	ba 0b       	sbc	r27, r26
    6b1c:	62 0b       	sbc	r22, r18
    6b1e:	73 0b       	sbc	r23, r19
    6b20:	84 0b       	sbc	r24, r20
    6b22:	ba f0       	brmi	.+46     	; 0x6b52 <__addsf3x+0x98>
    6b24:	91 50       	subi	r25, 0x01	; 1
    6b26:	a1 f0       	breq	.+40     	; 0x6b50 <__addsf3x+0x96>
    6b28:	ff 0f       	add	r31, r31
    6b2a:	bb 1f       	adc	r27, r27
    6b2c:	66 1f       	adc	r22, r22
    6b2e:	77 1f       	adc	r23, r23
    6b30:	88 1f       	adc	r24, r24
    6b32:	c2 f7       	brpl	.-16     	; 0x6b24 <__addsf3x+0x6a>
    6b34:	0e c0       	rjmp	.+28     	; 0x6b52 <__addsf3x+0x98>
    6b36:	ba 0f       	add	r27, r26
    6b38:	62 1f       	adc	r22, r18
    6b3a:	73 1f       	adc	r23, r19
    6b3c:	84 1f       	adc	r24, r20
    6b3e:	48 f4       	brcc	.+18     	; 0x6b52 <__addsf3x+0x98>
    6b40:	87 95       	ror	r24
    6b42:	77 95       	ror	r23
    6b44:	67 95       	ror	r22
    6b46:	b7 95       	ror	r27
    6b48:	f7 95       	ror	r31
    6b4a:	9e 3f       	cpi	r25, 0xFE	; 254
    6b4c:	08 f0       	brcs	.+2      	; 0x6b50 <__addsf3x+0x96>
    6b4e:	b3 cf       	rjmp	.-154    	; 0x6ab6 <__addsf3+0x1e>
    6b50:	93 95       	inc	r25
    6b52:	88 0f       	add	r24, r24
    6b54:	08 f0       	brcs	.+2      	; 0x6b58 <__addsf3x+0x9e>
    6b56:	99 27       	eor	r25, r25
    6b58:	ee 0f       	add	r30, r30
    6b5a:	97 95       	ror	r25
    6b5c:	87 95       	ror	r24
    6b5e:	08 95       	ret

00006b60 <__divsf3>:
    6b60:	0c d0       	rcall	.+24     	; 0x6b7a <__divsf3x>
    6b62:	e6 c0       	rjmp	.+460    	; 0x6d30 <__fp_round>
    6b64:	de d0       	rcall	.+444    	; 0x6d22 <__fp_pscB>
    6b66:	40 f0       	brcs	.+16     	; 0x6b78 <__divsf3+0x18>
    6b68:	d5 d0       	rcall	.+426    	; 0x6d14 <__fp_pscA>
    6b6a:	30 f0       	brcs	.+12     	; 0x6b78 <__divsf3+0x18>
    6b6c:	21 f4       	brne	.+8      	; 0x6b76 <__divsf3+0x16>
    6b6e:	5f 3f       	cpi	r21, 0xFF	; 255
    6b70:	19 f0       	breq	.+6      	; 0x6b78 <__divsf3+0x18>
    6b72:	c7 c0       	rjmp	.+398    	; 0x6d02 <__fp_inf>
    6b74:	51 11       	cpse	r21, r1
    6b76:	10 c1       	rjmp	.+544    	; 0x6d98 <__fp_szero>
    6b78:	ca c0       	rjmp	.+404    	; 0x6d0e <__fp_nan>

00006b7a <__divsf3x>:
    6b7a:	eb d0       	rcall	.+470    	; 0x6d52 <__fp_split3>
    6b7c:	98 f3       	brcs	.-26     	; 0x6b64 <__divsf3+0x4>

00006b7e <__divsf3_pse>:
    6b7e:	99 23       	and	r25, r25
    6b80:	c9 f3       	breq	.-14     	; 0x6b74 <__divsf3+0x14>
    6b82:	55 23       	and	r21, r21
    6b84:	b1 f3       	breq	.-20     	; 0x6b72 <__divsf3+0x12>
    6b86:	95 1b       	sub	r25, r21
    6b88:	55 0b       	sbc	r21, r21
    6b8a:	bb 27       	eor	r27, r27
    6b8c:	aa 27       	eor	r26, r26
    6b8e:	62 17       	cp	r22, r18
    6b90:	73 07       	cpc	r23, r19
    6b92:	84 07       	cpc	r24, r20
    6b94:	38 f0       	brcs	.+14     	; 0x6ba4 <__divsf3_pse+0x26>
    6b96:	9f 5f       	subi	r25, 0xFF	; 255
    6b98:	5f 4f       	sbci	r21, 0xFF	; 255
    6b9a:	22 0f       	add	r18, r18
    6b9c:	33 1f       	adc	r19, r19
    6b9e:	44 1f       	adc	r20, r20
    6ba0:	aa 1f       	adc	r26, r26
    6ba2:	a9 f3       	breq	.-22     	; 0x6b8e <__divsf3_pse+0x10>
    6ba4:	33 d0       	rcall	.+102    	; 0x6c0c <__divsf3_pse+0x8e>
    6ba6:	0e 2e       	mov	r0, r30
    6ba8:	3a f0       	brmi	.+14     	; 0x6bb8 <__divsf3_pse+0x3a>
    6baa:	e0 e8       	ldi	r30, 0x80	; 128
    6bac:	30 d0       	rcall	.+96     	; 0x6c0e <__divsf3_pse+0x90>
    6bae:	91 50       	subi	r25, 0x01	; 1
    6bb0:	50 40       	sbci	r21, 0x00	; 0
    6bb2:	e6 95       	lsr	r30
    6bb4:	00 1c       	adc	r0, r0
    6bb6:	ca f7       	brpl	.-14     	; 0x6baa <__divsf3_pse+0x2c>
    6bb8:	29 d0       	rcall	.+82     	; 0x6c0c <__divsf3_pse+0x8e>
    6bba:	fe 2f       	mov	r31, r30
    6bbc:	27 d0       	rcall	.+78     	; 0x6c0c <__divsf3_pse+0x8e>
    6bbe:	66 0f       	add	r22, r22
    6bc0:	77 1f       	adc	r23, r23
    6bc2:	88 1f       	adc	r24, r24
    6bc4:	bb 1f       	adc	r27, r27
    6bc6:	26 17       	cp	r18, r22
    6bc8:	37 07       	cpc	r19, r23
    6bca:	48 07       	cpc	r20, r24
    6bcc:	ab 07       	cpc	r26, r27
    6bce:	b0 e8       	ldi	r27, 0x80	; 128
    6bd0:	09 f0       	breq	.+2      	; 0x6bd4 <__divsf3_pse+0x56>
    6bd2:	bb 0b       	sbc	r27, r27
    6bd4:	80 2d       	mov	r24, r0
    6bd6:	bf 01       	movw	r22, r30
    6bd8:	ff 27       	eor	r31, r31
    6bda:	93 58       	subi	r25, 0x83	; 131
    6bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    6bde:	2a f0       	brmi	.+10     	; 0x6bea <__divsf3_pse+0x6c>
    6be0:	9e 3f       	cpi	r25, 0xFE	; 254
    6be2:	51 05       	cpc	r21, r1
    6be4:	68 f0       	brcs	.+26     	; 0x6c00 <__divsf3_pse+0x82>
    6be6:	8d c0       	rjmp	.+282    	; 0x6d02 <__fp_inf>
    6be8:	d7 c0       	rjmp	.+430    	; 0x6d98 <__fp_szero>
    6bea:	5f 3f       	cpi	r21, 0xFF	; 255
    6bec:	ec f3       	brlt	.-6      	; 0x6be8 <__divsf3_pse+0x6a>
    6bee:	98 3e       	cpi	r25, 0xE8	; 232
    6bf0:	dc f3       	brlt	.-10     	; 0x6be8 <__divsf3_pse+0x6a>
    6bf2:	86 95       	lsr	r24
    6bf4:	77 95       	ror	r23
    6bf6:	67 95       	ror	r22
    6bf8:	b7 95       	ror	r27
    6bfa:	f7 95       	ror	r31
    6bfc:	9f 5f       	subi	r25, 0xFF	; 255
    6bfe:	c9 f7       	brne	.-14     	; 0x6bf2 <__divsf3_pse+0x74>
    6c00:	88 0f       	add	r24, r24
    6c02:	91 1d       	adc	r25, r1
    6c04:	96 95       	lsr	r25
    6c06:	87 95       	ror	r24
    6c08:	97 f9       	bld	r25, 7
    6c0a:	08 95       	ret
    6c0c:	e1 e0       	ldi	r30, 0x01	; 1
    6c0e:	66 0f       	add	r22, r22
    6c10:	77 1f       	adc	r23, r23
    6c12:	88 1f       	adc	r24, r24
    6c14:	bb 1f       	adc	r27, r27
    6c16:	62 17       	cp	r22, r18
    6c18:	73 07       	cpc	r23, r19
    6c1a:	84 07       	cpc	r24, r20
    6c1c:	ba 07       	cpc	r27, r26
    6c1e:	20 f0       	brcs	.+8      	; 0x6c28 <__divsf3_pse+0xaa>
    6c20:	62 1b       	sub	r22, r18
    6c22:	73 0b       	sbc	r23, r19
    6c24:	84 0b       	sbc	r24, r20
    6c26:	ba 0b       	sbc	r27, r26
    6c28:	ee 1f       	adc	r30, r30
    6c2a:	88 f7       	brcc	.-30     	; 0x6c0e <__divsf3_pse+0x90>
    6c2c:	e0 95       	com	r30
    6c2e:	08 95       	ret

00006c30 <__fixunssfsi>:
    6c30:	98 d0       	rcall	.+304    	; 0x6d62 <__fp_splitA>
    6c32:	88 f0       	brcs	.+34     	; 0x6c56 <__fixunssfsi+0x26>
    6c34:	9f 57       	subi	r25, 0x7F	; 127
    6c36:	90 f0       	brcs	.+36     	; 0x6c5c <__fixunssfsi+0x2c>
    6c38:	b9 2f       	mov	r27, r25
    6c3a:	99 27       	eor	r25, r25
    6c3c:	b7 51       	subi	r27, 0x17	; 23
    6c3e:	a0 f0       	brcs	.+40     	; 0x6c68 <__fixunssfsi+0x38>
    6c40:	d1 f0       	breq	.+52     	; 0x6c76 <__fixunssfsi+0x46>
    6c42:	66 0f       	add	r22, r22
    6c44:	77 1f       	adc	r23, r23
    6c46:	88 1f       	adc	r24, r24
    6c48:	99 1f       	adc	r25, r25
    6c4a:	1a f0       	brmi	.+6      	; 0x6c52 <__fixunssfsi+0x22>
    6c4c:	ba 95       	dec	r27
    6c4e:	c9 f7       	brne	.-14     	; 0x6c42 <__fixunssfsi+0x12>
    6c50:	12 c0       	rjmp	.+36     	; 0x6c76 <__fixunssfsi+0x46>
    6c52:	b1 30       	cpi	r27, 0x01	; 1
    6c54:	81 f0       	breq	.+32     	; 0x6c76 <__fixunssfsi+0x46>
    6c56:	9f d0       	rcall	.+318    	; 0x6d96 <__fp_zero>
    6c58:	b1 e0       	ldi	r27, 0x01	; 1
    6c5a:	08 95       	ret
    6c5c:	9c c0       	rjmp	.+312    	; 0x6d96 <__fp_zero>
    6c5e:	67 2f       	mov	r22, r23
    6c60:	78 2f       	mov	r23, r24
    6c62:	88 27       	eor	r24, r24
    6c64:	b8 5f       	subi	r27, 0xF8	; 248
    6c66:	39 f0       	breq	.+14     	; 0x6c76 <__fixunssfsi+0x46>
    6c68:	b9 3f       	cpi	r27, 0xF9	; 249
    6c6a:	cc f3       	brlt	.-14     	; 0x6c5e <__fixunssfsi+0x2e>
    6c6c:	86 95       	lsr	r24
    6c6e:	77 95       	ror	r23
    6c70:	67 95       	ror	r22
    6c72:	b3 95       	inc	r27
    6c74:	d9 f7       	brne	.-10     	; 0x6c6c <__fixunssfsi+0x3c>
    6c76:	3e f4       	brtc	.+14     	; 0x6c86 <__fixunssfsi+0x56>
    6c78:	90 95       	com	r25
    6c7a:	80 95       	com	r24
    6c7c:	70 95       	com	r23
    6c7e:	61 95       	neg	r22
    6c80:	7f 4f       	sbci	r23, 0xFF	; 255
    6c82:	8f 4f       	sbci	r24, 0xFF	; 255
    6c84:	9f 4f       	sbci	r25, 0xFF	; 255
    6c86:	08 95       	ret

00006c88 <__floatunsisf>:
    6c88:	e8 94       	clt
    6c8a:	09 c0       	rjmp	.+18     	; 0x6c9e <__floatsisf+0x12>

00006c8c <__floatsisf>:
    6c8c:	97 fb       	bst	r25, 7
    6c8e:	3e f4       	brtc	.+14     	; 0x6c9e <__floatsisf+0x12>
    6c90:	90 95       	com	r25
    6c92:	80 95       	com	r24
    6c94:	70 95       	com	r23
    6c96:	61 95       	neg	r22
    6c98:	7f 4f       	sbci	r23, 0xFF	; 255
    6c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    6c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c9e:	99 23       	and	r25, r25
    6ca0:	a9 f0       	breq	.+42     	; 0x6ccc <__floatsisf+0x40>
    6ca2:	f9 2f       	mov	r31, r25
    6ca4:	96 e9       	ldi	r25, 0x96	; 150
    6ca6:	bb 27       	eor	r27, r27
    6ca8:	93 95       	inc	r25
    6caa:	f6 95       	lsr	r31
    6cac:	87 95       	ror	r24
    6cae:	77 95       	ror	r23
    6cb0:	67 95       	ror	r22
    6cb2:	b7 95       	ror	r27
    6cb4:	f1 11       	cpse	r31, r1
    6cb6:	f8 cf       	rjmp	.-16     	; 0x6ca8 <__floatsisf+0x1c>
    6cb8:	fa f4       	brpl	.+62     	; 0x6cf8 <__floatsisf+0x6c>
    6cba:	bb 0f       	add	r27, r27
    6cbc:	11 f4       	brne	.+4      	; 0x6cc2 <__floatsisf+0x36>
    6cbe:	60 ff       	sbrs	r22, 0
    6cc0:	1b c0       	rjmp	.+54     	; 0x6cf8 <__floatsisf+0x6c>
    6cc2:	6f 5f       	subi	r22, 0xFF	; 255
    6cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    6cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    6cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cca:	16 c0       	rjmp	.+44     	; 0x6cf8 <__floatsisf+0x6c>
    6ccc:	88 23       	and	r24, r24
    6cce:	11 f0       	breq	.+4      	; 0x6cd4 <__floatsisf+0x48>
    6cd0:	96 e9       	ldi	r25, 0x96	; 150
    6cd2:	11 c0       	rjmp	.+34     	; 0x6cf6 <__floatsisf+0x6a>
    6cd4:	77 23       	and	r23, r23
    6cd6:	21 f0       	breq	.+8      	; 0x6ce0 <__floatsisf+0x54>
    6cd8:	9e e8       	ldi	r25, 0x8E	; 142
    6cda:	87 2f       	mov	r24, r23
    6cdc:	76 2f       	mov	r23, r22
    6cde:	05 c0       	rjmp	.+10     	; 0x6cea <__floatsisf+0x5e>
    6ce0:	66 23       	and	r22, r22
    6ce2:	71 f0       	breq	.+28     	; 0x6d00 <__floatsisf+0x74>
    6ce4:	96 e8       	ldi	r25, 0x86	; 134
    6ce6:	86 2f       	mov	r24, r22
    6ce8:	70 e0       	ldi	r23, 0x00	; 0
    6cea:	60 e0       	ldi	r22, 0x00	; 0
    6cec:	2a f0       	brmi	.+10     	; 0x6cf8 <__floatsisf+0x6c>
    6cee:	9a 95       	dec	r25
    6cf0:	66 0f       	add	r22, r22
    6cf2:	77 1f       	adc	r23, r23
    6cf4:	88 1f       	adc	r24, r24
    6cf6:	da f7       	brpl	.-10     	; 0x6cee <__floatsisf+0x62>
    6cf8:	88 0f       	add	r24, r24
    6cfa:	96 95       	lsr	r25
    6cfc:	87 95       	ror	r24
    6cfe:	97 f9       	bld	r25, 7
    6d00:	08 95       	ret

00006d02 <__fp_inf>:
    6d02:	97 f9       	bld	r25, 7
    6d04:	9f 67       	ori	r25, 0x7F	; 127
    6d06:	80 e8       	ldi	r24, 0x80	; 128
    6d08:	70 e0       	ldi	r23, 0x00	; 0
    6d0a:	60 e0       	ldi	r22, 0x00	; 0
    6d0c:	08 95       	ret

00006d0e <__fp_nan>:
    6d0e:	9f ef       	ldi	r25, 0xFF	; 255
    6d10:	80 ec       	ldi	r24, 0xC0	; 192
    6d12:	08 95       	ret

00006d14 <__fp_pscA>:
    6d14:	00 24       	eor	r0, r0
    6d16:	0a 94       	dec	r0
    6d18:	16 16       	cp	r1, r22
    6d1a:	17 06       	cpc	r1, r23
    6d1c:	18 06       	cpc	r1, r24
    6d1e:	09 06       	cpc	r0, r25
    6d20:	08 95       	ret

00006d22 <__fp_pscB>:
    6d22:	00 24       	eor	r0, r0
    6d24:	0a 94       	dec	r0
    6d26:	12 16       	cp	r1, r18
    6d28:	13 06       	cpc	r1, r19
    6d2a:	14 06       	cpc	r1, r20
    6d2c:	05 06       	cpc	r0, r21
    6d2e:	08 95       	ret

00006d30 <__fp_round>:
    6d30:	09 2e       	mov	r0, r25
    6d32:	03 94       	inc	r0
    6d34:	00 0c       	add	r0, r0
    6d36:	11 f4       	brne	.+4      	; 0x6d3c <__fp_round+0xc>
    6d38:	88 23       	and	r24, r24
    6d3a:	52 f0       	brmi	.+20     	; 0x6d50 <__fp_round+0x20>
    6d3c:	bb 0f       	add	r27, r27
    6d3e:	40 f4       	brcc	.+16     	; 0x6d50 <__fp_round+0x20>
    6d40:	bf 2b       	or	r27, r31
    6d42:	11 f4       	brne	.+4      	; 0x6d48 <__fp_round+0x18>
    6d44:	60 ff       	sbrs	r22, 0
    6d46:	04 c0       	rjmp	.+8      	; 0x6d50 <__fp_round+0x20>
    6d48:	6f 5f       	subi	r22, 0xFF	; 255
    6d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    6d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6d50:	08 95       	ret

00006d52 <__fp_split3>:
    6d52:	57 fd       	sbrc	r21, 7
    6d54:	90 58       	subi	r25, 0x80	; 128
    6d56:	44 0f       	add	r20, r20
    6d58:	55 1f       	adc	r21, r21
    6d5a:	59 f0       	breq	.+22     	; 0x6d72 <__fp_splitA+0x10>
    6d5c:	5f 3f       	cpi	r21, 0xFF	; 255
    6d5e:	71 f0       	breq	.+28     	; 0x6d7c <__fp_splitA+0x1a>
    6d60:	47 95       	ror	r20

00006d62 <__fp_splitA>:
    6d62:	88 0f       	add	r24, r24
    6d64:	97 fb       	bst	r25, 7
    6d66:	99 1f       	adc	r25, r25
    6d68:	61 f0       	breq	.+24     	; 0x6d82 <__fp_splitA+0x20>
    6d6a:	9f 3f       	cpi	r25, 0xFF	; 255
    6d6c:	79 f0       	breq	.+30     	; 0x6d8c <__fp_splitA+0x2a>
    6d6e:	87 95       	ror	r24
    6d70:	08 95       	ret
    6d72:	12 16       	cp	r1, r18
    6d74:	13 06       	cpc	r1, r19
    6d76:	14 06       	cpc	r1, r20
    6d78:	55 1f       	adc	r21, r21
    6d7a:	f2 cf       	rjmp	.-28     	; 0x6d60 <__fp_split3+0xe>
    6d7c:	46 95       	lsr	r20
    6d7e:	f1 df       	rcall	.-30     	; 0x6d62 <__fp_splitA>
    6d80:	08 c0       	rjmp	.+16     	; 0x6d92 <__fp_splitA+0x30>
    6d82:	16 16       	cp	r1, r22
    6d84:	17 06       	cpc	r1, r23
    6d86:	18 06       	cpc	r1, r24
    6d88:	99 1f       	adc	r25, r25
    6d8a:	f1 cf       	rjmp	.-30     	; 0x6d6e <__fp_splitA+0xc>
    6d8c:	86 95       	lsr	r24
    6d8e:	71 05       	cpc	r23, r1
    6d90:	61 05       	cpc	r22, r1
    6d92:	08 94       	sec
    6d94:	08 95       	ret

00006d96 <__fp_zero>:
    6d96:	e8 94       	clt

00006d98 <__fp_szero>:
    6d98:	bb 27       	eor	r27, r27
    6d9a:	66 27       	eor	r22, r22
    6d9c:	77 27       	eor	r23, r23
    6d9e:	cb 01       	movw	r24, r22
    6da0:	97 f9       	bld	r25, 7
    6da2:	08 95       	ret

00006da4 <__gesf2>:
    6da4:	03 d0       	rcall	.+6      	; 0x6dac <__fp_cmp>
    6da6:	08 f4       	brcc	.+2      	; 0x6daa <__gesf2+0x6>
    6da8:	8f ef       	ldi	r24, 0xFF	; 255
    6daa:	08 95       	ret

00006dac <__fp_cmp>:
    6dac:	99 0f       	add	r25, r25
    6dae:	00 08       	sbc	r0, r0
    6db0:	55 0f       	add	r21, r21
    6db2:	aa 0b       	sbc	r26, r26
    6db4:	e0 e8       	ldi	r30, 0x80	; 128
    6db6:	fe ef       	ldi	r31, 0xFE	; 254
    6db8:	16 16       	cp	r1, r22
    6dba:	17 06       	cpc	r1, r23
    6dbc:	e8 07       	cpc	r30, r24
    6dbe:	f9 07       	cpc	r31, r25
    6dc0:	c0 f0       	brcs	.+48     	; 0x6df2 <__fp_cmp+0x46>
    6dc2:	12 16       	cp	r1, r18
    6dc4:	13 06       	cpc	r1, r19
    6dc6:	e4 07       	cpc	r30, r20
    6dc8:	f5 07       	cpc	r31, r21
    6dca:	98 f0       	brcs	.+38     	; 0x6df2 <__fp_cmp+0x46>
    6dcc:	62 1b       	sub	r22, r18
    6dce:	73 0b       	sbc	r23, r19
    6dd0:	84 0b       	sbc	r24, r20
    6dd2:	95 0b       	sbc	r25, r21
    6dd4:	39 f4       	brne	.+14     	; 0x6de4 <__fp_cmp+0x38>
    6dd6:	0a 26       	eor	r0, r26
    6dd8:	61 f0       	breq	.+24     	; 0x6df2 <__fp_cmp+0x46>
    6dda:	23 2b       	or	r18, r19
    6ddc:	24 2b       	or	r18, r20
    6dde:	25 2b       	or	r18, r21
    6de0:	21 f4       	brne	.+8      	; 0x6dea <__fp_cmp+0x3e>
    6de2:	08 95       	ret
    6de4:	0a 26       	eor	r0, r26
    6de6:	09 f4       	brne	.+2      	; 0x6dea <__fp_cmp+0x3e>
    6de8:	a1 40       	sbci	r26, 0x01	; 1
    6dea:	a6 95       	lsr	r26
    6dec:	8f ef       	ldi	r24, 0xFF	; 255
    6dee:	81 1d       	adc	r24, r1
    6df0:	81 1d       	adc	r24, r1
    6df2:	08 95       	ret

00006df4 <__mulsi3>:
    6df4:	62 9f       	mul	r22, r18
    6df6:	d0 01       	movw	r26, r0
    6df8:	73 9f       	mul	r23, r19
    6dfa:	f0 01       	movw	r30, r0
    6dfc:	82 9f       	mul	r24, r18
    6dfe:	e0 0d       	add	r30, r0
    6e00:	f1 1d       	adc	r31, r1
    6e02:	64 9f       	mul	r22, r20
    6e04:	e0 0d       	add	r30, r0
    6e06:	f1 1d       	adc	r31, r1
    6e08:	92 9f       	mul	r25, r18
    6e0a:	f0 0d       	add	r31, r0
    6e0c:	83 9f       	mul	r24, r19
    6e0e:	f0 0d       	add	r31, r0
    6e10:	74 9f       	mul	r23, r20
    6e12:	f0 0d       	add	r31, r0
    6e14:	65 9f       	mul	r22, r21
    6e16:	f0 0d       	add	r31, r0
    6e18:	99 27       	eor	r25, r25
    6e1a:	72 9f       	mul	r23, r18
    6e1c:	b0 0d       	add	r27, r0
    6e1e:	e1 1d       	adc	r30, r1
    6e20:	f9 1f       	adc	r31, r25
    6e22:	63 9f       	mul	r22, r19
    6e24:	b0 0d       	add	r27, r0
    6e26:	e1 1d       	adc	r30, r1
    6e28:	f9 1f       	adc	r31, r25
    6e2a:	bd 01       	movw	r22, r26
    6e2c:	cf 01       	movw	r24, r30
    6e2e:	11 24       	eor	r1, r1
    6e30:	08 95       	ret

00006e32 <__divmodhi4>:
    6e32:	97 fb       	bst	r25, 7
    6e34:	09 2e       	mov	r0, r25
    6e36:	07 26       	eor	r0, r23
    6e38:	0a d0       	rcall	.+20     	; 0x6e4e <__divmodhi4_neg1>
    6e3a:	77 fd       	sbrc	r23, 7
    6e3c:	04 d0       	rcall	.+8      	; 0x6e46 <__divmodhi4_neg2>
    6e3e:	49 d0       	rcall	.+146    	; 0x6ed2 <__udivmodhi4>
    6e40:	06 d0       	rcall	.+12     	; 0x6e4e <__divmodhi4_neg1>
    6e42:	00 20       	and	r0, r0
    6e44:	1a f4       	brpl	.+6      	; 0x6e4c <__divmodhi4_exit>

00006e46 <__divmodhi4_neg2>:
    6e46:	70 95       	com	r23
    6e48:	61 95       	neg	r22
    6e4a:	7f 4f       	sbci	r23, 0xFF	; 255

00006e4c <__divmodhi4_exit>:
    6e4c:	08 95       	ret

00006e4e <__divmodhi4_neg1>:
    6e4e:	f6 f7       	brtc	.-4      	; 0x6e4c <__divmodhi4_exit>
    6e50:	90 95       	com	r25
    6e52:	81 95       	neg	r24
    6e54:	9f 4f       	sbci	r25, 0xFF	; 255
    6e56:	08 95       	ret

00006e58 <__udivmodsi4>:
    6e58:	a1 e2       	ldi	r26, 0x21	; 33
    6e5a:	1a 2e       	mov	r1, r26
    6e5c:	aa 1b       	sub	r26, r26
    6e5e:	bb 1b       	sub	r27, r27
    6e60:	fd 01       	movw	r30, r26
    6e62:	0d c0       	rjmp	.+26     	; 0x6e7e <__udivmodsi4_ep>

00006e64 <__udivmodsi4_loop>:
    6e64:	aa 1f       	adc	r26, r26
    6e66:	bb 1f       	adc	r27, r27
    6e68:	ee 1f       	adc	r30, r30
    6e6a:	ff 1f       	adc	r31, r31
    6e6c:	a2 17       	cp	r26, r18
    6e6e:	b3 07       	cpc	r27, r19
    6e70:	e4 07       	cpc	r30, r20
    6e72:	f5 07       	cpc	r31, r21
    6e74:	20 f0       	brcs	.+8      	; 0x6e7e <__udivmodsi4_ep>
    6e76:	a2 1b       	sub	r26, r18
    6e78:	b3 0b       	sbc	r27, r19
    6e7a:	e4 0b       	sbc	r30, r20
    6e7c:	f5 0b       	sbc	r31, r21

00006e7e <__udivmodsi4_ep>:
    6e7e:	66 1f       	adc	r22, r22
    6e80:	77 1f       	adc	r23, r23
    6e82:	88 1f       	adc	r24, r24
    6e84:	99 1f       	adc	r25, r25
    6e86:	1a 94       	dec	r1
    6e88:	69 f7       	brne	.-38     	; 0x6e64 <__udivmodsi4_loop>
    6e8a:	60 95       	com	r22
    6e8c:	70 95       	com	r23
    6e8e:	80 95       	com	r24
    6e90:	90 95       	com	r25
    6e92:	9b 01       	movw	r18, r22
    6e94:	ac 01       	movw	r20, r24
    6e96:	bd 01       	movw	r22, r26
    6e98:	cf 01       	movw	r24, r30
    6e9a:	08 95       	ret

00006e9c <__divmodsi4>:
    6e9c:	97 fb       	bst	r25, 7
    6e9e:	09 2e       	mov	r0, r25
    6ea0:	05 26       	eor	r0, r21
    6ea2:	0e d0       	rcall	.+28     	; 0x6ec0 <__divmodsi4_neg1>
    6ea4:	57 fd       	sbrc	r21, 7
    6ea6:	04 d0       	rcall	.+8      	; 0x6eb0 <__divmodsi4_neg2>
    6ea8:	d7 df       	rcall	.-82     	; 0x6e58 <__udivmodsi4>
    6eaa:	0a d0       	rcall	.+20     	; 0x6ec0 <__divmodsi4_neg1>
    6eac:	00 1c       	adc	r0, r0
    6eae:	38 f4       	brcc	.+14     	; 0x6ebe <__divmodsi4_exit>

00006eb0 <__divmodsi4_neg2>:
    6eb0:	50 95       	com	r21
    6eb2:	40 95       	com	r20
    6eb4:	30 95       	com	r19
    6eb6:	21 95       	neg	r18
    6eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    6eba:	4f 4f       	sbci	r20, 0xFF	; 255
    6ebc:	5f 4f       	sbci	r21, 0xFF	; 255

00006ebe <__divmodsi4_exit>:
    6ebe:	08 95       	ret

00006ec0 <__divmodsi4_neg1>:
    6ec0:	f6 f7       	brtc	.-4      	; 0x6ebe <__divmodsi4_exit>
    6ec2:	90 95       	com	r25
    6ec4:	80 95       	com	r24
    6ec6:	70 95       	com	r23
    6ec8:	61 95       	neg	r22
    6eca:	7f 4f       	sbci	r23, 0xFF	; 255
    6ecc:	8f 4f       	sbci	r24, 0xFF	; 255
    6ece:	9f 4f       	sbci	r25, 0xFF	; 255
    6ed0:	08 95       	ret

00006ed2 <__udivmodhi4>:
    6ed2:	aa 1b       	sub	r26, r26
    6ed4:	bb 1b       	sub	r27, r27
    6ed6:	51 e1       	ldi	r21, 0x11	; 17
    6ed8:	07 c0       	rjmp	.+14     	; 0x6ee8 <__udivmodhi4_ep>

00006eda <__udivmodhi4_loop>:
    6eda:	aa 1f       	adc	r26, r26
    6edc:	bb 1f       	adc	r27, r27
    6ede:	a6 17       	cp	r26, r22
    6ee0:	b7 07       	cpc	r27, r23
    6ee2:	10 f0       	brcs	.+4      	; 0x6ee8 <__udivmodhi4_ep>
    6ee4:	a6 1b       	sub	r26, r22
    6ee6:	b7 0b       	sbc	r27, r23

00006ee8 <__udivmodhi4_ep>:
    6ee8:	88 1f       	adc	r24, r24
    6eea:	99 1f       	adc	r25, r25
    6eec:	5a 95       	dec	r21
    6eee:	a9 f7       	brne	.-22     	; 0x6eda <__udivmodhi4_loop>
    6ef0:	80 95       	com	r24
    6ef2:	90 95       	com	r25
    6ef4:	bc 01       	movw	r22, r24
    6ef6:	cd 01       	movw	r24, r26
    6ef8:	08 95       	ret

00006efa <__prologue_saves__>:
    6efa:	2f 92       	push	r2
    6efc:	3f 92       	push	r3
    6efe:	4f 92       	push	r4
    6f00:	5f 92       	push	r5
    6f02:	6f 92       	push	r6
    6f04:	7f 92       	push	r7
    6f06:	8f 92       	push	r8
    6f08:	9f 92       	push	r9
    6f0a:	af 92       	push	r10
    6f0c:	bf 92       	push	r11
    6f0e:	cf 92       	push	r12
    6f10:	df 92       	push	r13
    6f12:	ef 92       	push	r14
    6f14:	ff 92       	push	r15
    6f16:	0f 93       	push	r16
    6f18:	1f 93       	push	r17
    6f1a:	cf 93       	push	r28
    6f1c:	df 93       	push	r29
    6f1e:	cd b7       	in	r28, 0x3d	; 61
    6f20:	de b7       	in	r29, 0x3e	; 62
    6f22:	ca 1b       	sub	r28, r26
    6f24:	db 0b       	sbc	r29, r27
    6f26:	cd bf       	out	0x3d, r28	; 61
    6f28:	de bf       	out	0x3e, r29	; 62
    6f2a:	19 94       	eijmp

00006f2c <__epilogue_restores__>:
    6f2c:	2a 88       	ldd	r2, Y+18	; 0x12
    6f2e:	39 88       	ldd	r3, Y+17	; 0x11
    6f30:	48 88       	ldd	r4, Y+16	; 0x10
    6f32:	5f 84       	ldd	r5, Y+15	; 0x0f
    6f34:	6e 84       	ldd	r6, Y+14	; 0x0e
    6f36:	7d 84       	ldd	r7, Y+13	; 0x0d
    6f38:	8c 84       	ldd	r8, Y+12	; 0x0c
    6f3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    6f3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    6f3e:	b9 84       	ldd	r11, Y+9	; 0x09
    6f40:	c8 84       	ldd	r12, Y+8	; 0x08
    6f42:	df 80       	ldd	r13, Y+7	; 0x07
    6f44:	ee 80       	ldd	r14, Y+6	; 0x06
    6f46:	fd 80       	ldd	r15, Y+5	; 0x05
    6f48:	0c 81       	ldd	r16, Y+4	; 0x04
    6f4a:	1b 81       	ldd	r17, Y+3	; 0x03
    6f4c:	aa 81       	ldd	r26, Y+2	; 0x02
    6f4e:	b9 81       	ldd	r27, Y+1	; 0x01
    6f50:	ce 0f       	add	r28, r30
    6f52:	d1 1d       	adc	r29, r1
    6f54:	cd bf       	out	0x3d, r28	; 61
    6f56:	de bf       	out	0x3e, r29	; 62
    6f58:	ed 01       	movw	r28, r26
    6f5a:	08 95       	ret

00006f5c <strcpy_P>:
    6f5c:	fb 01       	movw	r30, r22
    6f5e:	dc 01       	movw	r26, r24
    6f60:	05 90       	lpm	r0, Z+
    6f62:	0d 92       	st	X+, r0
    6f64:	00 20       	and	r0, r0
    6f66:	e1 f7       	brne	.-8      	; 0x6f60 <strcpy_P+0x4>
    6f68:	08 95       	ret

00006f6a <memmove>:
    6f6a:	68 17       	cp	r22, r24
    6f6c:	79 07       	cpc	r23, r25
    6f6e:	68 f4       	brcc	.+26     	; 0x6f8a <memmove+0x20>
    6f70:	fb 01       	movw	r30, r22
    6f72:	dc 01       	movw	r26, r24
    6f74:	e4 0f       	add	r30, r20
    6f76:	f5 1f       	adc	r31, r21
    6f78:	a4 0f       	add	r26, r20
    6f7a:	b5 1f       	adc	r27, r21
    6f7c:	02 c0       	rjmp	.+4      	; 0x6f82 <memmove+0x18>
    6f7e:	02 90       	ld	r0, -Z
    6f80:	0e 92       	st	-X, r0
    6f82:	41 50       	subi	r20, 0x01	; 1
    6f84:	50 40       	sbci	r21, 0x00	; 0
    6f86:	d8 f7       	brcc	.-10     	; 0x6f7e <memmove+0x14>
    6f88:	08 95       	ret
    6f8a:	0c 94 3a 3a 	jmp	0x7474	; 0x7474 <memcpy>

00006f8e <strcat>:
    6f8e:	fb 01       	movw	r30, r22
    6f90:	dc 01       	movw	r26, r24
    6f92:	0d 90       	ld	r0, X+
    6f94:	00 20       	and	r0, r0
    6f96:	e9 f7       	brne	.-6      	; 0x6f92 <strcat+0x4>
    6f98:	11 97       	sbiw	r26, 0x01	; 1
    6f9a:	01 90       	ld	r0, Z+
    6f9c:	0d 92       	st	X+, r0
    6f9e:	00 20       	and	r0, r0
    6fa0:	e1 f7       	brne	.-8      	; 0x6f9a <strcat+0xc>
    6fa2:	08 95       	ret

00006fa4 <itoa>:
    6fa4:	fb 01       	movw	r30, r22
    6fa6:	9f 01       	movw	r18, r30
    6fa8:	e8 94       	clt
    6faa:	42 30       	cpi	r20, 0x02	; 2
    6fac:	c4 f0       	brlt	.+48     	; 0x6fde <itoa+0x3a>
    6fae:	45 32       	cpi	r20, 0x25	; 37
    6fb0:	b4 f4       	brge	.+44     	; 0x6fde <itoa+0x3a>
    6fb2:	4a 30       	cpi	r20, 0x0A	; 10
    6fb4:	29 f4       	brne	.+10     	; 0x6fc0 <itoa+0x1c>
    6fb6:	97 fb       	bst	r25, 7
    6fb8:	1e f4       	brtc	.+6      	; 0x6fc0 <itoa+0x1c>
    6fba:	90 95       	com	r25
    6fbc:	81 95       	neg	r24
    6fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    6fc0:	64 2f       	mov	r22, r20
    6fc2:	77 27       	eor	r23, r23
    6fc4:	0e 94 69 37 	call	0x6ed2	; 0x6ed2 <__udivmodhi4>
    6fc8:	80 5d       	subi	r24, 0xD0	; 208
    6fca:	8a 33       	cpi	r24, 0x3A	; 58
    6fcc:	0c f0       	brlt	.+2      	; 0x6fd0 <itoa+0x2c>
    6fce:	89 5d       	subi	r24, 0xD9	; 217
    6fd0:	81 93       	st	Z+, r24
    6fd2:	cb 01       	movw	r24, r22
    6fd4:	00 97       	sbiw	r24, 0x00	; 0
    6fd6:	a1 f7       	brne	.-24     	; 0x6fc0 <itoa+0x1c>
    6fd8:	16 f4       	brtc	.+4      	; 0x6fde <itoa+0x3a>
    6fda:	5d e2       	ldi	r21, 0x2D	; 45
    6fdc:	51 93       	st	Z+, r21
    6fde:	10 82       	st	Z, r1
    6fe0:	c9 01       	movw	r24, r18
    6fe2:	0c 94 4e 3a 	jmp	0x749c	; 0x749c <strrev>

00006fe6 <printf>:
    6fe6:	cf 93       	push	r28
    6fe8:	df 93       	push	r29
    6fea:	cd b7       	in	r28, 0x3d	; 61
    6fec:	de b7       	in	r29, 0x3e	; 62
    6fee:	fe 01       	movw	r30, r28
    6ff0:	36 96       	adiw	r30, 0x06	; 6
    6ff2:	61 91       	ld	r22, Z+
    6ff4:	71 91       	ld	r23, Z+
    6ff6:	80 91 b3 50 	lds	r24, 0x50B3
    6ffa:	90 91 b4 50 	lds	r25, 0x50B4
    6ffe:	af 01       	movw	r20, r30
    7000:	0e 94 2e 38 	call	0x705c	; 0x705c <vfprintf>
    7004:	df 91       	pop	r29
    7006:	cf 91       	pop	r28
    7008:	08 95       	ret

0000700a <sprintf>:
    700a:	0f 93       	push	r16
    700c:	1f 93       	push	r17
    700e:	cf 93       	push	r28
    7010:	df 93       	push	r29
    7012:	cd b7       	in	r28, 0x3d	; 61
    7014:	de b7       	in	r29, 0x3e	; 62
    7016:	2e 97       	sbiw	r28, 0x0e	; 14
    7018:	cd bf       	out	0x3d, r28	; 61
    701a:	de bf       	out	0x3e, r29	; 62
    701c:	0e 89       	ldd	r16, Y+22	; 0x16
    701e:	1f 89       	ldd	r17, Y+23	; 0x17
    7020:	86 e0       	ldi	r24, 0x06	; 6
    7022:	8c 83       	std	Y+4, r24	; 0x04
    7024:	09 83       	std	Y+1, r16	; 0x01
    7026:	1a 83       	std	Y+2, r17	; 0x02
    7028:	8f ef       	ldi	r24, 0xFF	; 255
    702a:	9f e7       	ldi	r25, 0x7F	; 127
    702c:	8d 83       	std	Y+5, r24	; 0x05
    702e:	9e 83       	std	Y+6, r25	; 0x06
    7030:	ae 01       	movw	r20, r28
    7032:	46 5e       	subi	r20, 0xE6	; 230
    7034:	5f 4f       	sbci	r21, 0xFF	; 255
    7036:	ce 01       	movw	r24, r28
    7038:	01 96       	adiw	r24, 0x01	; 1
    703a:	68 8d       	ldd	r22, Y+24	; 0x18
    703c:	79 8d       	ldd	r23, Y+25	; 0x19
    703e:	0e 94 2e 38 	call	0x705c	; 0x705c <vfprintf>
    7042:	ef 81       	ldd	r30, Y+7	; 0x07
    7044:	f8 85       	ldd	r31, Y+8	; 0x08
    7046:	e0 0f       	add	r30, r16
    7048:	f1 1f       	adc	r31, r17
    704a:	10 82       	st	Z, r1
    704c:	2e 96       	adiw	r28, 0x0e	; 14
    704e:	cd bf       	out	0x3d, r28	; 61
    7050:	de bf       	out	0x3e, r29	; 62
    7052:	df 91       	pop	r29
    7054:	cf 91       	pop	r28
    7056:	1f 91       	pop	r17
    7058:	0f 91       	pop	r16
    705a:	08 95       	ret

0000705c <vfprintf>:
    705c:	2f 92       	push	r2
    705e:	3f 92       	push	r3
    7060:	4f 92       	push	r4
    7062:	5f 92       	push	r5
    7064:	6f 92       	push	r6
    7066:	7f 92       	push	r7
    7068:	8f 92       	push	r8
    706a:	9f 92       	push	r9
    706c:	af 92       	push	r10
    706e:	bf 92       	push	r11
    7070:	cf 92       	push	r12
    7072:	df 92       	push	r13
    7074:	ef 92       	push	r14
    7076:	ff 92       	push	r15
    7078:	0f 93       	push	r16
    707a:	1f 93       	push	r17
    707c:	cf 93       	push	r28
    707e:	df 93       	push	r29
    7080:	cd b7       	in	r28, 0x3d	; 61
    7082:	de b7       	in	r29, 0x3e	; 62
    7084:	2d 97       	sbiw	r28, 0x0d	; 13
    7086:	cd bf       	out	0x3d, r28	; 61
    7088:	de bf       	out	0x3e, r29	; 62
    708a:	3c 01       	movw	r6, r24
    708c:	6c 87       	std	Y+12, r22	; 0x0c
    708e:	7d 87       	std	Y+13, r23	; 0x0d
    7090:	5a 01       	movw	r10, r20
    7092:	fc 01       	movw	r30, r24
    7094:	16 82       	std	Z+6, r1	; 0x06
    7096:	17 82       	std	Z+7, r1	; 0x07
    7098:	83 81       	ldd	r24, Z+3	; 0x03
    709a:	81 ff       	sbrs	r24, 1
    709c:	c8 c1       	rjmp	.+912    	; 0x742e <vfprintf+0x3d2>
    709e:	2e 01       	movw	r4, r28
    70a0:	08 94       	sec
    70a2:	41 1c       	adc	r4, r1
    70a4:	51 1c       	adc	r5, r1
    70a6:	f3 01       	movw	r30, r6
    70a8:	93 81       	ldd	r25, Z+3	; 0x03
    70aa:	ec 85       	ldd	r30, Y+12	; 0x0c
    70ac:	fd 85       	ldd	r31, Y+13	; 0x0d
    70ae:	93 fd       	sbrc	r25, 3
    70b0:	85 91       	lpm	r24, Z+
    70b2:	93 ff       	sbrs	r25, 3
    70b4:	81 91       	ld	r24, Z+
    70b6:	ec 87       	std	Y+12, r30	; 0x0c
    70b8:	fd 87       	std	Y+13, r31	; 0x0d
    70ba:	88 23       	and	r24, r24
    70bc:	09 f4       	brne	.+2      	; 0x70c0 <vfprintf+0x64>
    70be:	b3 c1       	rjmp	.+870    	; 0x7426 <vfprintf+0x3ca>
    70c0:	85 32       	cpi	r24, 0x25	; 37
    70c2:	41 f4       	brne	.+16     	; 0x70d4 <vfprintf+0x78>
    70c4:	93 fd       	sbrc	r25, 3
    70c6:	85 91       	lpm	r24, Z+
    70c8:	93 ff       	sbrs	r25, 3
    70ca:	81 91       	ld	r24, Z+
    70cc:	ec 87       	std	Y+12, r30	; 0x0c
    70ce:	fd 87       	std	Y+13, r31	; 0x0d
    70d0:	85 32       	cpi	r24, 0x25	; 37
    70d2:	29 f4       	brne	.+10     	; 0x70de <vfprintf+0x82>
    70d4:	90 e0       	ldi	r25, 0x00	; 0
    70d6:	b3 01       	movw	r22, r6
    70d8:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    70dc:	e4 cf       	rjmp	.-56     	; 0x70a6 <vfprintf+0x4a>
    70de:	ff 24       	eor	r15, r15
    70e0:	ee 24       	eor	r14, r14
    70e2:	10 e0       	ldi	r17, 0x00	; 0
    70e4:	10 32       	cpi	r17, 0x20	; 32
    70e6:	b0 f4       	brcc	.+44     	; 0x7114 <vfprintf+0xb8>
    70e8:	8b 32       	cpi	r24, 0x2B	; 43
    70ea:	69 f0       	breq	.+26     	; 0x7106 <vfprintf+0xaa>
    70ec:	8c 32       	cpi	r24, 0x2C	; 44
    70ee:	28 f4       	brcc	.+10     	; 0x70fa <vfprintf+0x9e>
    70f0:	80 32       	cpi	r24, 0x20	; 32
    70f2:	51 f0       	breq	.+20     	; 0x7108 <vfprintf+0xac>
    70f4:	83 32       	cpi	r24, 0x23	; 35
    70f6:	71 f4       	brne	.+28     	; 0x7114 <vfprintf+0xb8>
    70f8:	0b c0       	rjmp	.+22     	; 0x7110 <vfprintf+0xb4>
    70fa:	8d 32       	cpi	r24, 0x2D	; 45
    70fc:	39 f0       	breq	.+14     	; 0x710c <vfprintf+0xb0>
    70fe:	80 33       	cpi	r24, 0x30	; 48
    7100:	49 f4       	brne	.+18     	; 0x7114 <vfprintf+0xb8>
    7102:	11 60       	ori	r17, 0x01	; 1
    7104:	2c c0       	rjmp	.+88     	; 0x715e <vfprintf+0x102>
    7106:	12 60       	ori	r17, 0x02	; 2
    7108:	14 60       	ori	r17, 0x04	; 4
    710a:	29 c0       	rjmp	.+82     	; 0x715e <vfprintf+0x102>
    710c:	18 60       	ori	r17, 0x08	; 8
    710e:	27 c0       	rjmp	.+78     	; 0x715e <vfprintf+0x102>
    7110:	10 61       	ori	r17, 0x10	; 16
    7112:	25 c0       	rjmp	.+74     	; 0x715e <vfprintf+0x102>
    7114:	17 fd       	sbrc	r17, 7
    7116:	2e c0       	rjmp	.+92     	; 0x7174 <vfprintf+0x118>
    7118:	28 2f       	mov	r18, r24
    711a:	20 53       	subi	r18, 0x30	; 48
    711c:	2a 30       	cpi	r18, 0x0A	; 10
    711e:	98 f4       	brcc	.+38     	; 0x7146 <vfprintf+0xea>
    7120:	16 ff       	sbrs	r17, 6
    7122:	08 c0       	rjmp	.+16     	; 0x7134 <vfprintf+0xd8>
    7124:	8f 2d       	mov	r24, r15
    7126:	88 0f       	add	r24, r24
    7128:	f8 2e       	mov	r15, r24
    712a:	ff 0c       	add	r15, r15
    712c:	ff 0c       	add	r15, r15
    712e:	f8 0e       	add	r15, r24
    7130:	f2 0e       	add	r15, r18
    7132:	15 c0       	rjmp	.+42     	; 0x715e <vfprintf+0x102>
    7134:	8e 2d       	mov	r24, r14
    7136:	88 0f       	add	r24, r24
    7138:	e8 2e       	mov	r14, r24
    713a:	ee 0c       	add	r14, r14
    713c:	ee 0c       	add	r14, r14
    713e:	e8 0e       	add	r14, r24
    7140:	e2 0e       	add	r14, r18
    7142:	10 62       	ori	r17, 0x20	; 32
    7144:	0c c0       	rjmp	.+24     	; 0x715e <vfprintf+0x102>
    7146:	8e 32       	cpi	r24, 0x2E	; 46
    7148:	21 f4       	brne	.+8      	; 0x7152 <vfprintf+0xf6>
    714a:	16 fd       	sbrc	r17, 6
    714c:	6c c1       	rjmp	.+728    	; 0x7426 <vfprintf+0x3ca>
    714e:	10 64       	ori	r17, 0x40	; 64
    7150:	06 c0       	rjmp	.+12     	; 0x715e <vfprintf+0x102>
    7152:	8c 36       	cpi	r24, 0x6C	; 108
    7154:	11 f4       	brne	.+4      	; 0x715a <vfprintf+0xfe>
    7156:	10 68       	ori	r17, 0x80	; 128
    7158:	02 c0       	rjmp	.+4      	; 0x715e <vfprintf+0x102>
    715a:	88 36       	cpi	r24, 0x68	; 104
    715c:	59 f4       	brne	.+22     	; 0x7174 <vfprintf+0x118>
    715e:	ec 85       	ldd	r30, Y+12	; 0x0c
    7160:	fd 85       	ldd	r31, Y+13	; 0x0d
    7162:	93 fd       	sbrc	r25, 3
    7164:	85 91       	lpm	r24, Z+
    7166:	93 ff       	sbrs	r25, 3
    7168:	81 91       	ld	r24, Z+
    716a:	ec 87       	std	Y+12, r30	; 0x0c
    716c:	fd 87       	std	Y+13, r31	; 0x0d
    716e:	88 23       	and	r24, r24
    7170:	09 f0       	breq	.+2      	; 0x7174 <vfprintf+0x118>
    7172:	b8 cf       	rjmp	.-144    	; 0x70e4 <vfprintf+0x88>
    7174:	98 2f       	mov	r25, r24
    7176:	95 54       	subi	r25, 0x45	; 69
    7178:	93 30       	cpi	r25, 0x03	; 3
    717a:	18 f0       	brcs	.+6      	; 0x7182 <vfprintf+0x126>
    717c:	90 52       	subi	r25, 0x20	; 32
    717e:	93 30       	cpi	r25, 0x03	; 3
    7180:	38 f4       	brcc	.+14     	; 0x7190 <vfprintf+0x134>
    7182:	24 e0       	ldi	r18, 0x04	; 4
    7184:	30 e0       	ldi	r19, 0x00	; 0
    7186:	a2 0e       	add	r10, r18
    7188:	b3 1e       	adc	r11, r19
    718a:	3f e3       	ldi	r19, 0x3F	; 63
    718c:	39 83       	std	Y+1, r19	; 0x01
    718e:	0f c0       	rjmp	.+30     	; 0x71ae <vfprintf+0x152>
    7190:	83 36       	cpi	r24, 0x63	; 99
    7192:	31 f0       	breq	.+12     	; 0x71a0 <vfprintf+0x144>
    7194:	83 37       	cpi	r24, 0x73	; 115
    7196:	81 f0       	breq	.+32     	; 0x71b8 <vfprintf+0x15c>
    7198:	83 35       	cpi	r24, 0x53	; 83
    719a:	09 f0       	breq	.+2      	; 0x719e <vfprintf+0x142>
    719c:	5a c0       	rjmp	.+180    	; 0x7252 <vfprintf+0x1f6>
    719e:	22 c0       	rjmp	.+68     	; 0x71e4 <vfprintf+0x188>
    71a0:	f5 01       	movw	r30, r10
    71a2:	80 81       	ld	r24, Z
    71a4:	89 83       	std	Y+1, r24	; 0x01
    71a6:	22 e0       	ldi	r18, 0x02	; 2
    71a8:	30 e0       	ldi	r19, 0x00	; 0
    71aa:	a2 0e       	add	r10, r18
    71ac:	b3 1e       	adc	r11, r19
    71ae:	21 e0       	ldi	r18, 0x01	; 1
    71b0:	c2 2e       	mov	r12, r18
    71b2:	d1 2c       	mov	r13, r1
    71b4:	42 01       	movw	r8, r4
    71b6:	14 c0       	rjmp	.+40     	; 0x71e0 <vfprintf+0x184>
    71b8:	92 e0       	ldi	r25, 0x02	; 2
    71ba:	29 2e       	mov	r2, r25
    71bc:	31 2c       	mov	r3, r1
    71be:	2a 0c       	add	r2, r10
    71c0:	3b 1c       	adc	r3, r11
    71c2:	f5 01       	movw	r30, r10
    71c4:	80 80       	ld	r8, Z
    71c6:	91 80       	ldd	r9, Z+1	; 0x01
    71c8:	16 ff       	sbrs	r17, 6
    71ca:	03 c0       	rjmp	.+6      	; 0x71d2 <vfprintf+0x176>
    71cc:	6f 2d       	mov	r22, r15
    71ce:	70 e0       	ldi	r23, 0x00	; 0
    71d0:	02 c0       	rjmp	.+4      	; 0x71d6 <vfprintf+0x17a>
    71d2:	6f ef       	ldi	r22, 0xFF	; 255
    71d4:	7f ef       	ldi	r23, 0xFF	; 255
    71d6:	c4 01       	movw	r24, r8
    71d8:	0e 94 43 3a 	call	0x7486	; 0x7486 <strnlen>
    71dc:	6c 01       	movw	r12, r24
    71de:	51 01       	movw	r10, r2
    71e0:	1f 77       	andi	r17, 0x7F	; 127
    71e2:	15 c0       	rjmp	.+42     	; 0x720e <vfprintf+0x1b2>
    71e4:	82 e0       	ldi	r24, 0x02	; 2
    71e6:	28 2e       	mov	r2, r24
    71e8:	31 2c       	mov	r3, r1
    71ea:	2a 0c       	add	r2, r10
    71ec:	3b 1c       	adc	r3, r11
    71ee:	f5 01       	movw	r30, r10
    71f0:	80 80       	ld	r8, Z
    71f2:	91 80       	ldd	r9, Z+1	; 0x01
    71f4:	16 ff       	sbrs	r17, 6
    71f6:	03 c0       	rjmp	.+6      	; 0x71fe <vfprintf+0x1a2>
    71f8:	6f 2d       	mov	r22, r15
    71fa:	70 e0       	ldi	r23, 0x00	; 0
    71fc:	02 c0       	rjmp	.+4      	; 0x7202 <vfprintf+0x1a6>
    71fe:	6f ef       	ldi	r22, 0xFF	; 255
    7200:	7f ef       	ldi	r23, 0xFF	; 255
    7202:	c4 01       	movw	r24, r8
    7204:	0e 94 2f 3a 	call	0x745e	; 0x745e <strnlen_P>
    7208:	6c 01       	movw	r12, r24
    720a:	10 68       	ori	r17, 0x80	; 128
    720c:	51 01       	movw	r10, r2
    720e:	13 fd       	sbrc	r17, 3
    7210:	1c c0       	rjmp	.+56     	; 0x724a <vfprintf+0x1ee>
    7212:	06 c0       	rjmp	.+12     	; 0x7220 <vfprintf+0x1c4>
    7214:	80 e2       	ldi	r24, 0x20	; 32
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	b3 01       	movw	r22, r6
    721a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    721e:	ea 94       	dec	r14
    7220:	8e 2d       	mov	r24, r14
    7222:	90 e0       	ldi	r25, 0x00	; 0
    7224:	c8 16       	cp	r12, r24
    7226:	d9 06       	cpc	r13, r25
    7228:	a8 f3       	brcs	.-22     	; 0x7214 <vfprintf+0x1b8>
    722a:	0f c0       	rjmp	.+30     	; 0x724a <vfprintf+0x1ee>
    722c:	f4 01       	movw	r30, r8
    722e:	17 fd       	sbrc	r17, 7
    7230:	85 91       	lpm	r24, Z+
    7232:	17 ff       	sbrs	r17, 7
    7234:	81 91       	ld	r24, Z+
    7236:	4f 01       	movw	r8, r30
    7238:	90 e0       	ldi	r25, 0x00	; 0
    723a:	b3 01       	movw	r22, r6
    723c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    7240:	e1 10       	cpse	r14, r1
    7242:	ea 94       	dec	r14
    7244:	08 94       	sec
    7246:	c1 08       	sbc	r12, r1
    7248:	d1 08       	sbc	r13, r1
    724a:	c1 14       	cp	r12, r1
    724c:	d1 04       	cpc	r13, r1
    724e:	71 f7       	brne	.-36     	; 0x722c <vfprintf+0x1d0>
    7250:	e7 c0       	rjmp	.+462    	; 0x7420 <vfprintf+0x3c4>
    7252:	84 36       	cpi	r24, 0x64	; 100
    7254:	11 f0       	breq	.+4      	; 0x725a <vfprintf+0x1fe>
    7256:	89 36       	cpi	r24, 0x69	; 105
    7258:	51 f5       	brne	.+84     	; 0x72ae <vfprintf+0x252>
    725a:	f5 01       	movw	r30, r10
    725c:	17 ff       	sbrs	r17, 7
    725e:	07 c0       	rjmp	.+14     	; 0x726e <vfprintf+0x212>
    7260:	80 81       	ld	r24, Z
    7262:	91 81       	ldd	r25, Z+1	; 0x01
    7264:	a2 81       	ldd	r26, Z+2	; 0x02
    7266:	b3 81       	ldd	r27, Z+3	; 0x03
    7268:	24 e0       	ldi	r18, 0x04	; 4
    726a:	30 e0       	ldi	r19, 0x00	; 0
    726c:	08 c0       	rjmp	.+16     	; 0x727e <vfprintf+0x222>
    726e:	80 81       	ld	r24, Z
    7270:	91 81       	ldd	r25, Z+1	; 0x01
    7272:	aa 27       	eor	r26, r26
    7274:	97 fd       	sbrc	r25, 7
    7276:	a0 95       	com	r26
    7278:	ba 2f       	mov	r27, r26
    727a:	22 e0       	ldi	r18, 0x02	; 2
    727c:	30 e0       	ldi	r19, 0x00	; 0
    727e:	a2 0e       	add	r10, r18
    7280:	b3 1e       	adc	r11, r19
    7282:	01 2f       	mov	r16, r17
    7284:	0f 76       	andi	r16, 0x6F	; 111
    7286:	b7 ff       	sbrs	r27, 7
    7288:	08 c0       	rjmp	.+16     	; 0x729a <vfprintf+0x23e>
    728a:	b0 95       	com	r27
    728c:	a0 95       	com	r26
    728e:	90 95       	com	r25
    7290:	81 95       	neg	r24
    7292:	9f 4f       	sbci	r25, 0xFF	; 255
    7294:	af 4f       	sbci	r26, 0xFF	; 255
    7296:	bf 4f       	sbci	r27, 0xFF	; 255
    7298:	00 68       	ori	r16, 0x80	; 128
    729a:	bc 01       	movw	r22, r24
    729c:	cd 01       	movw	r24, r26
    729e:	a2 01       	movw	r20, r4
    72a0:	2a e0       	ldi	r18, 0x0A	; 10
    72a2:	30 e0       	ldi	r19, 0x00	; 0
    72a4:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__ultoa_invert>
    72a8:	d8 2e       	mov	r13, r24
    72aa:	d4 18       	sub	r13, r4
    72ac:	3f c0       	rjmp	.+126    	; 0x732c <vfprintf+0x2d0>
    72ae:	85 37       	cpi	r24, 0x75	; 117
    72b0:	21 f4       	brne	.+8      	; 0x72ba <vfprintf+0x25e>
    72b2:	1f 7e       	andi	r17, 0xEF	; 239
    72b4:	2a e0       	ldi	r18, 0x0A	; 10
    72b6:	30 e0       	ldi	r19, 0x00	; 0
    72b8:	20 c0       	rjmp	.+64     	; 0x72fa <vfprintf+0x29e>
    72ba:	19 7f       	andi	r17, 0xF9	; 249
    72bc:	8f 36       	cpi	r24, 0x6F	; 111
    72be:	a9 f0       	breq	.+42     	; 0x72ea <vfprintf+0x28e>
    72c0:	80 37       	cpi	r24, 0x70	; 112
    72c2:	20 f4       	brcc	.+8      	; 0x72cc <vfprintf+0x270>
    72c4:	88 35       	cpi	r24, 0x58	; 88
    72c6:	09 f0       	breq	.+2      	; 0x72ca <vfprintf+0x26e>
    72c8:	ae c0       	rjmp	.+348    	; 0x7426 <vfprintf+0x3ca>
    72ca:	0b c0       	rjmp	.+22     	; 0x72e2 <vfprintf+0x286>
    72cc:	80 37       	cpi	r24, 0x70	; 112
    72ce:	21 f0       	breq	.+8      	; 0x72d8 <vfprintf+0x27c>
    72d0:	88 37       	cpi	r24, 0x78	; 120
    72d2:	09 f0       	breq	.+2      	; 0x72d6 <vfprintf+0x27a>
    72d4:	a8 c0       	rjmp	.+336    	; 0x7426 <vfprintf+0x3ca>
    72d6:	01 c0       	rjmp	.+2      	; 0x72da <vfprintf+0x27e>
    72d8:	10 61       	ori	r17, 0x10	; 16
    72da:	14 ff       	sbrs	r17, 4
    72dc:	09 c0       	rjmp	.+18     	; 0x72f0 <vfprintf+0x294>
    72de:	14 60       	ori	r17, 0x04	; 4
    72e0:	07 c0       	rjmp	.+14     	; 0x72f0 <vfprintf+0x294>
    72e2:	14 ff       	sbrs	r17, 4
    72e4:	08 c0       	rjmp	.+16     	; 0x72f6 <vfprintf+0x29a>
    72e6:	16 60       	ori	r17, 0x06	; 6
    72e8:	06 c0       	rjmp	.+12     	; 0x72f6 <vfprintf+0x29a>
    72ea:	28 e0       	ldi	r18, 0x08	; 8
    72ec:	30 e0       	ldi	r19, 0x00	; 0
    72ee:	05 c0       	rjmp	.+10     	; 0x72fa <vfprintf+0x29e>
    72f0:	20 e1       	ldi	r18, 0x10	; 16
    72f2:	30 e0       	ldi	r19, 0x00	; 0
    72f4:	02 c0       	rjmp	.+4      	; 0x72fa <vfprintf+0x29e>
    72f6:	20 e1       	ldi	r18, 0x10	; 16
    72f8:	32 e0       	ldi	r19, 0x02	; 2
    72fa:	f5 01       	movw	r30, r10
    72fc:	17 ff       	sbrs	r17, 7
    72fe:	07 c0       	rjmp	.+14     	; 0x730e <vfprintf+0x2b2>
    7300:	60 81       	ld	r22, Z
    7302:	71 81       	ldd	r23, Z+1	; 0x01
    7304:	82 81       	ldd	r24, Z+2	; 0x02
    7306:	93 81       	ldd	r25, Z+3	; 0x03
    7308:	44 e0       	ldi	r20, 0x04	; 4
    730a:	50 e0       	ldi	r21, 0x00	; 0
    730c:	06 c0       	rjmp	.+12     	; 0x731a <vfprintf+0x2be>
    730e:	60 81       	ld	r22, Z
    7310:	71 81       	ldd	r23, Z+1	; 0x01
    7312:	80 e0       	ldi	r24, 0x00	; 0
    7314:	90 e0       	ldi	r25, 0x00	; 0
    7316:	42 e0       	ldi	r20, 0x02	; 2
    7318:	50 e0       	ldi	r21, 0x00	; 0
    731a:	a4 0e       	add	r10, r20
    731c:	b5 1e       	adc	r11, r21
    731e:	a2 01       	movw	r20, r4
    7320:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__ultoa_invert>
    7324:	d8 2e       	mov	r13, r24
    7326:	d4 18       	sub	r13, r4
    7328:	01 2f       	mov	r16, r17
    732a:	0f 77       	andi	r16, 0x7F	; 127
    732c:	06 ff       	sbrs	r16, 6
    732e:	09 c0       	rjmp	.+18     	; 0x7342 <vfprintf+0x2e6>
    7330:	0e 7f       	andi	r16, 0xFE	; 254
    7332:	df 14       	cp	r13, r15
    7334:	30 f4       	brcc	.+12     	; 0x7342 <vfprintf+0x2e6>
    7336:	04 ff       	sbrs	r16, 4
    7338:	06 c0       	rjmp	.+12     	; 0x7346 <vfprintf+0x2ea>
    733a:	02 fd       	sbrc	r16, 2
    733c:	04 c0       	rjmp	.+8      	; 0x7346 <vfprintf+0x2ea>
    733e:	0f 7e       	andi	r16, 0xEF	; 239
    7340:	02 c0       	rjmp	.+4      	; 0x7346 <vfprintf+0x2ea>
    7342:	1d 2d       	mov	r17, r13
    7344:	01 c0       	rjmp	.+2      	; 0x7348 <vfprintf+0x2ec>
    7346:	1f 2d       	mov	r17, r15
    7348:	80 2f       	mov	r24, r16
    734a:	90 e0       	ldi	r25, 0x00	; 0
    734c:	04 ff       	sbrs	r16, 4
    734e:	0c c0       	rjmp	.+24     	; 0x7368 <vfprintf+0x30c>
    7350:	fe 01       	movw	r30, r28
    7352:	ed 0d       	add	r30, r13
    7354:	f1 1d       	adc	r31, r1
    7356:	20 81       	ld	r18, Z
    7358:	20 33       	cpi	r18, 0x30	; 48
    735a:	11 f4       	brne	.+4      	; 0x7360 <vfprintf+0x304>
    735c:	09 7e       	andi	r16, 0xE9	; 233
    735e:	09 c0       	rjmp	.+18     	; 0x7372 <vfprintf+0x316>
    7360:	02 ff       	sbrs	r16, 2
    7362:	06 c0       	rjmp	.+12     	; 0x7370 <vfprintf+0x314>
    7364:	1e 5f       	subi	r17, 0xFE	; 254
    7366:	05 c0       	rjmp	.+10     	; 0x7372 <vfprintf+0x316>
    7368:	86 78       	andi	r24, 0x86	; 134
    736a:	90 70       	andi	r25, 0x00	; 0
    736c:	00 97       	sbiw	r24, 0x00	; 0
    736e:	09 f0       	breq	.+2      	; 0x7372 <vfprintf+0x316>
    7370:	1f 5f       	subi	r17, 0xFF	; 255
    7372:	80 2e       	mov	r8, r16
    7374:	99 24       	eor	r9, r9
    7376:	03 fd       	sbrc	r16, 3
    7378:	12 c0       	rjmp	.+36     	; 0x739e <vfprintf+0x342>
    737a:	00 ff       	sbrs	r16, 0
    737c:	0d c0       	rjmp	.+26     	; 0x7398 <vfprintf+0x33c>
    737e:	fd 2c       	mov	r15, r13
    7380:	1e 15       	cp	r17, r14
    7382:	50 f4       	brcc	.+20     	; 0x7398 <vfprintf+0x33c>
    7384:	fe 0c       	add	r15, r14
    7386:	f1 1a       	sub	r15, r17
    7388:	1e 2d       	mov	r17, r14
    738a:	06 c0       	rjmp	.+12     	; 0x7398 <vfprintf+0x33c>
    738c:	80 e2       	ldi	r24, 0x20	; 32
    738e:	90 e0       	ldi	r25, 0x00	; 0
    7390:	b3 01       	movw	r22, r6
    7392:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    7396:	1f 5f       	subi	r17, 0xFF	; 255
    7398:	1e 15       	cp	r17, r14
    739a:	c0 f3       	brcs	.-16     	; 0x738c <vfprintf+0x330>
    739c:	04 c0       	rjmp	.+8      	; 0x73a6 <vfprintf+0x34a>
    739e:	1e 15       	cp	r17, r14
    73a0:	10 f4       	brcc	.+4      	; 0x73a6 <vfprintf+0x34a>
    73a2:	e1 1a       	sub	r14, r17
    73a4:	01 c0       	rjmp	.+2      	; 0x73a8 <vfprintf+0x34c>
    73a6:	ee 24       	eor	r14, r14
    73a8:	84 fe       	sbrs	r8, 4
    73aa:	0f c0       	rjmp	.+30     	; 0x73ca <vfprintf+0x36e>
    73ac:	80 e3       	ldi	r24, 0x30	; 48
    73ae:	90 e0       	ldi	r25, 0x00	; 0
    73b0:	b3 01       	movw	r22, r6
    73b2:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    73b6:	82 fe       	sbrs	r8, 2
    73b8:	1f c0       	rjmp	.+62     	; 0x73f8 <vfprintf+0x39c>
    73ba:	81 fe       	sbrs	r8, 1
    73bc:	03 c0       	rjmp	.+6      	; 0x73c4 <vfprintf+0x368>
    73be:	88 e5       	ldi	r24, 0x58	; 88
    73c0:	90 e0       	ldi	r25, 0x00	; 0
    73c2:	10 c0       	rjmp	.+32     	; 0x73e4 <vfprintf+0x388>
    73c4:	88 e7       	ldi	r24, 0x78	; 120
    73c6:	90 e0       	ldi	r25, 0x00	; 0
    73c8:	0d c0       	rjmp	.+26     	; 0x73e4 <vfprintf+0x388>
    73ca:	c4 01       	movw	r24, r8
    73cc:	86 78       	andi	r24, 0x86	; 134
    73ce:	90 70       	andi	r25, 0x00	; 0
    73d0:	00 97       	sbiw	r24, 0x00	; 0
    73d2:	91 f0       	breq	.+36     	; 0x73f8 <vfprintf+0x39c>
    73d4:	81 fc       	sbrc	r8, 1
    73d6:	02 c0       	rjmp	.+4      	; 0x73dc <vfprintf+0x380>
    73d8:	80 e2       	ldi	r24, 0x20	; 32
    73da:	01 c0       	rjmp	.+2      	; 0x73de <vfprintf+0x382>
    73dc:	8b e2       	ldi	r24, 0x2B	; 43
    73de:	07 fd       	sbrc	r16, 7
    73e0:	8d e2       	ldi	r24, 0x2D	; 45
    73e2:	90 e0       	ldi	r25, 0x00	; 0
    73e4:	b3 01       	movw	r22, r6
    73e6:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    73ea:	06 c0       	rjmp	.+12     	; 0x73f8 <vfprintf+0x39c>
    73ec:	80 e3       	ldi	r24, 0x30	; 48
    73ee:	90 e0       	ldi	r25, 0x00	; 0
    73f0:	b3 01       	movw	r22, r6
    73f2:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    73f6:	fa 94       	dec	r15
    73f8:	df 14       	cp	r13, r15
    73fa:	c0 f3       	brcs	.-16     	; 0x73ec <vfprintf+0x390>
    73fc:	da 94       	dec	r13
    73fe:	f2 01       	movw	r30, r4
    7400:	ed 0d       	add	r30, r13
    7402:	f1 1d       	adc	r31, r1
    7404:	80 81       	ld	r24, Z
    7406:	90 e0       	ldi	r25, 0x00	; 0
    7408:	b3 01       	movw	r22, r6
    740a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    740e:	dd 20       	and	r13, r13
    7410:	a9 f7       	brne	.-22     	; 0x73fc <vfprintf+0x3a0>
    7412:	06 c0       	rjmp	.+12     	; 0x7420 <vfprintf+0x3c4>
    7414:	80 e2       	ldi	r24, 0x20	; 32
    7416:	90 e0       	ldi	r25, 0x00	; 0
    7418:	b3 01       	movw	r22, r6
    741a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <fputc>
    741e:	ea 94       	dec	r14
    7420:	ee 20       	and	r14, r14
    7422:	c1 f7       	brne	.-16     	; 0x7414 <vfprintf+0x3b8>
    7424:	40 ce       	rjmp	.-896    	; 0x70a6 <vfprintf+0x4a>
    7426:	f3 01       	movw	r30, r6
    7428:	86 81       	ldd	r24, Z+6	; 0x06
    742a:	97 81       	ldd	r25, Z+7	; 0x07
    742c:	02 c0       	rjmp	.+4      	; 0x7432 <vfprintf+0x3d6>
    742e:	8f ef       	ldi	r24, 0xFF	; 255
    7430:	9f ef       	ldi	r25, 0xFF	; 255
    7432:	2d 96       	adiw	r28, 0x0d	; 13
    7434:	cd bf       	out	0x3d, r28	; 61
    7436:	de bf       	out	0x3e, r29	; 62
    7438:	df 91       	pop	r29
    743a:	cf 91       	pop	r28
    743c:	1f 91       	pop	r17
    743e:	0f 91       	pop	r16
    7440:	ff 90       	pop	r15
    7442:	ef 90       	pop	r14
    7444:	df 90       	pop	r13
    7446:	cf 90       	pop	r12
    7448:	bf 90       	pop	r11
    744a:	af 90       	pop	r10
    744c:	9f 90       	pop	r9
    744e:	8f 90       	pop	r8
    7450:	7f 90       	pop	r7
    7452:	6f 90       	pop	r6
    7454:	5f 90       	pop	r5
    7456:	4f 90       	pop	r4
    7458:	3f 90       	pop	r3
    745a:	2f 90       	pop	r2
    745c:	08 95       	ret

0000745e <strnlen_P>:
    745e:	fc 01       	movw	r30, r24
    7460:	05 90       	lpm	r0, Z+
    7462:	61 50       	subi	r22, 0x01	; 1
    7464:	70 40       	sbci	r23, 0x00	; 0
    7466:	01 10       	cpse	r0, r1
    7468:	d8 f7       	brcc	.-10     	; 0x7460 <strnlen_P+0x2>
    746a:	80 95       	com	r24
    746c:	90 95       	com	r25
    746e:	8e 0f       	add	r24, r30
    7470:	9f 1f       	adc	r25, r31
    7472:	08 95       	ret

00007474 <memcpy>:
    7474:	fb 01       	movw	r30, r22
    7476:	dc 01       	movw	r26, r24
    7478:	02 c0       	rjmp	.+4      	; 0x747e <memcpy+0xa>
    747a:	01 90       	ld	r0, Z+
    747c:	0d 92       	st	X+, r0
    747e:	41 50       	subi	r20, 0x01	; 1
    7480:	50 40       	sbci	r21, 0x00	; 0
    7482:	d8 f7       	brcc	.-10     	; 0x747a <memcpy+0x6>
    7484:	08 95       	ret

00007486 <strnlen>:
    7486:	fc 01       	movw	r30, r24
    7488:	61 50       	subi	r22, 0x01	; 1
    748a:	70 40       	sbci	r23, 0x00	; 0
    748c:	01 90       	ld	r0, Z+
    748e:	01 10       	cpse	r0, r1
    7490:	d8 f7       	brcc	.-10     	; 0x7488 <strnlen+0x2>
    7492:	80 95       	com	r24
    7494:	90 95       	com	r25
    7496:	8e 0f       	add	r24, r30
    7498:	9f 1f       	adc	r25, r31
    749a:	08 95       	ret

0000749c <strrev>:
    749c:	dc 01       	movw	r26, r24
    749e:	fc 01       	movw	r30, r24
    74a0:	67 2f       	mov	r22, r23
    74a2:	71 91       	ld	r23, Z+
    74a4:	77 23       	and	r23, r23
    74a6:	e1 f7       	brne	.-8      	; 0x74a0 <strrev+0x4>
    74a8:	32 97       	sbiw	r30, 0x02	; 2
    74aa:	04 c0       	rjmp	.+8      	; 0x74b4 <strrev+0x18>
    74ac:	7c 91       	ld	r23, X
    74ae:	6d 93       	st	X+, r22
    74b0:	70 83       	st	Z, r23
    74b2:	62 91       	ld	r22, -Z
    74b4:	ae 17       	cp	r26, r30
    74b6:	bf 07       	cpc	r27, r31
    74b8:	c8 f3       	brcs	.-14     	; 0x74ac <strrev+0x10>
    74ba:	08 95       	ret

000074bc <fputc>:
    74bc:	0f 93       	push	r16
    74be:	1f 93       	push	r17
    74c0:	cf 93       	push	r28
    74c2:	df 93       	push	r29
    74c4:	8c 01       	movw	r16, r24
    74c6:	eb 01       	movw	r28, r22
    74c8:	8b 81       	ldd	r24, Y+3	; 0x03
    74ca:	81 ff       	sbrs	r24, 1
    74cc:	1b c0       	rjmp	.+54     	; 0x7504 <fputc+0x48>
    74ce:	82 ff       	sbrs	r24, 2
    74d0:	0d c0       	rjmp	.+26     	; 0x74ec <fputc+0x30>
    74d2:	2e 81       	ldd	r18, Y+6	; 0x06
    74d4:	3f 81       	ldd	r19, Y+7	; 0x07
    74d6:	8c 81       	ldd	r24, Y+4	; 0x04
    74d8:	9d 81       	ldd	r25, Y+5	; 0x05
    74da:	28 17       	cp	r18, r24
    74dc:	39 07       	cpc	r19, r25
    74de:	64 f4       	brge	.+24     	; 0x74f8 <fputc+0x3c>
    74e0:	e8 81       	ld	r30, Y
    74e2:	f9 81       	ldd	r31, Y+1	; 0x01
    74e4:	01 93       	st	Z+, r16
    74e6:	e8 83       	st	Y, r30
    74e8:	f9 83       	std	Y+1, r31	; 0x01
    74ea:	06 c0       	rjmp	.+12     	; 0x74f8 <fputc+0x3c>
    74ec:	e8 85       	ldd	r30, Y+8	; 0x08
    74ee:	f9 85       	ldd	r31, Y+9	; 0x09
    74f0:	80 2f       	mov	r24, r16
    74f2:	19 95       	eicall
    74f4:	00 97       	sbiw	r24, 0x00	; 0
    74f6:	31 f4       	brne	.+12     	; 0x7504 <fputc+0x48>
    74f8:	8e 81       	ldd	r24, Y+6	; 0x06
    74fa:	9f 81       	ldd	r25, Y+7	; 0x07
    74fc:	01 96       	adiw	r24, 0x01	; 1
    74fe:	8e 83       	std	Y+6, r24	; 0x06
    7500:	9f 83       	std	Y+7, r25	; 0x07
    7502:	02 c0       	rjmp	.+4      	; 0x7508 <fputc+0x4c>
    7504:	0f ef       	ldi	r16, 0xFF	; 255
    7506:	1f ef       	ldi	r17, 0xFF	; 255
    7508:	c8 01       	movw	r24, r16
    750a:	df 91       	pop	r29
    750c:	cf 91       	pop	r28
    750e:	1f 91       	pop	r17
    7510:	0f 91       	pop	r16
    7512:	08 95       	ret

00007514 <__ultoa_invert>:
    7514:	fa 01       	movw	r30, r20
    7516:	aa 27       	eor	r26, r26
    7518:	28 30       	cpi	r18, 0x08	; 8
    751a:	51 f1       	breq	.+84     	; 0x7570 <__ultoa_invert+0x5c>
    751c:	20 31       	cpi	r18, 0x10	; 16
    751e:	81 f1       	breq	.+96     	; 0x7580 <__ultoa_invert+0x6c>
    7520:	e8 94       	clt
    7522:	6f 93       	push	r22
    7524:	6e 7f       	andi	r22, 0xFE	; 254
    7526:	6e 5f       	subi	r22, 0xFE	; 254
    7528:	7f 4f       	sbci	r23, 0xFF	; 255
    752a:	8f 4f       	sbci	r24, 0xFF	; 255
    752c:	9f 4f       	sbci	r25, 0xFF	; 255
    752e:	af 4f       	sbci	r26, 0xFF	; 255
    7530:	b1 e0       	ldi	r27, 0x01	; 1
    7532:	3e d0       	rcall	.+124    	; 0x75b0 <__ultoa_invert+0x9c>
    7534:	b4 e0       	ldi	r27, 0x04	; 4
    7536:	3c d0       	rcall	.+120    	; 0x75b0 <__ultoa_invert+0x9c>
    7538:	67 0f       	add	r22, r23
    753a:	78 1f       	adc	r23, r24
    753c:	89 1f       	adc	r24, r25
    753e:	9a 1f       	adc	r25, r26
    7540:	a1 1d       	adc	r26, r1
    7542:	68 0f       	add	r22, r24
    7544:	79 1f       	adc	r23, r25
    7546:	8a 1f       	adc	r24, r26
    7548:	91 1d       	adc	r25, r1
    754a:	a1 1d       	adc	r26, r1
    754c:	6a 0f       	add	r22, r26
    754e:	71 1d       	adc	r23, r1
    7550:	81 1d       	adc	r24, r1
    7552:	91 1d       	adc	r25, r1
    7554:	a1 1d       	adc	r26, r1
    7556:	20 d0       	rcall	.+64     	; 0x7598 <__ultoa_invert+0x84>
    7558:	09 f4       	brne	.+2      	; 0x755c <__ultoa_invert+0x48>
    755a:	68 94       	set
    755c:	3f 91       	pop	r19
    755e:	2a e0       	ldi	r18, 0x0A	; 10
    7560:	26 9f       	mul	r18, r22
    7562:	11 24       	eor	r1, r1
    7564:	30 19       	sub	r19, r0
    7566:	30 5d       	subi	r19, 0xD0	; 208
    7568:	31 93       	st	Z+, r19
    756a:	de f6       	brtc	.-74     	; 0x7522 <__ultoa_invert+0xe>
    756c:	cf 01       	movw	r24, r30
    756e:	08 95       	ret
    7570:	46 2f       	mov	r20, r22
    7572:	47 70       	andi	r20, 0x07	; 7
    7574:	40 5d       	subi	r20, 0xD0	; 208
    7576:	41 93       	st	Z+, r20
    7578:	b3 e0       	ldi	r27, 0x03	; 3
    757a:	0f d0       	rcall	.+30     	; 0x759a <__ultoa_invert+0x86>
    757c:	c9 f7       	brne	.-14     	; 0x7570 <__ultoa_invert+0x5c>
    757e:	f6 cf       	rjmp	.-20     	; 0x756c <__ultoa_invert+0x58>
    7580:	46 2f       	mov	r20, r22
    7582:	4f 70       	andi	r20, 0x0F	; 15
    7584:	40 5d       	subi	r20, 0xD0	; 208
    7586:	4a 33       	cpi	r20, 0x3A	; 58
    7588:	18 f0       	brcs	.+6      	; 0x7590 <__ultoa_invert+0x7c>
    758a:	49 5d       	subi	r20, 0xD9	; 217
    758c:	31 fd       	sbrc	r19, 1
    758e:	40 52       	subi	r20, 0x20	; 32
    7590:	41 93       	st	Z+, r20
    7592:	02 d0       	rcall	.+4      	; 0x7598 <__ultoa_invert+0x84>
    7594:	a9 f7       	brne	.-22     	; 0x7580 <__ultoa_invert+0x6c>
    7596:	ea cf       	rjmp	.-44     	; 0x756c <__ultoa_invert+0x58>
    7598:	b4 e0       	ldi	r27, 0x04	; 4
    759a:	a6 95       	lsr	r26
    759c:	97 95       	ror	r25
    759e:	87 95       	ror	r24
    75a0:	77 95       	ror	r23
    75a2:	67 95       	ror	r22
    75a4:	ba 95       	dec	r27
    75a6:	c9 f7       	brne	.-14     	; 0x759a <__ultoa_invert+0x86>
    75a8:	00 97       	sbiw	r24, 0x00	; 0
    75aa:	61 05       	cpc	r22, r1
    75ac:	71 05       	cpc	r23, r1
    75ae:	08 95       	ret
    75b0:	9b 01       	movw	r18, r22
    75b2:	ac 01       	movw	r20, r24
    75b4:	0a 2e       	mov	r0, r26
    75b6:	06 94       	lsr	r0
    75b8:	57 95       	ror	r21
    75ba:	47 95       	ror	r20
    75bc:	37 95       	ror	r19
    75be:	27 95       	ror	r18
    75c0:	ba 95       	dec	r27
    75c2:	c9 f7       	brne	.-14     	; 0x75b6 <__ultoa_invert+0xa2>
    75c4:	62 0f       	add	r22, r18
    75c6:	73 1f       	adc	r23, r19
    75c8:	84 1f       	adc	r24, r20
    75ca:	95 1f       	adc	r25, r21
    75cc:	a0 1d       	adc	r26, r0
    75ce:	08 95       	ret

000075d0 <_exit>:
    75d0:	f8 94       	cli

000075d2 <__stop_program>:
    75d2:	ff cf       	rjmp	.-2      	; 0x75d2 <__stop_program>
