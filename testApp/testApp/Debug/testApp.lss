
testApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00802000  00007a2c  00007ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002faa  0080210e  0080210e  00007bce  2**0
                  ALLOC
  3 .stab         000028f8  00000000  00000000  00007bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009ca  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000420  00000000  00000000  0000ae98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c192  00000000  00000000  0000b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000270c  00000000  00000000  0001744a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000058de  00000000  00000000  00019b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001bec  00000000  00000000  0001f434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004676  00000000  00000000  00021020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008293  00000000  00000000  00025696  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0017fd97  00000000  00000000  0002d929  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  001ad6c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      38:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__vector_14>
      3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      40:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__vector_16>
      44:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__vector_17>
      48:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__vector_18>
      4c:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__vector_19>
      50:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__vector_20>
      54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      bc:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_47>
      c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     100:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__vector_64>
     104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     134:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__vector_77>
     138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     13c:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__vector_79>
     140:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__vector_80>
     144:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__vector_81>
     148:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__vector_82>
     14c:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_83>
     150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a0:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_104>
     1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001e8 <chb_err_init>:
     1e8:	52 41 44 49 4f 20 4e 4f 54 20 49 4e 49 54 49 41     RADIO NOT INITIA
     1f8:	4c 49 5a 45 44 20 50 52 4f 50 45 52 4c 59 0a 00     LIZED PROPERLY..

00000208 <chb_err_overflow>:
     208:	42 55 46 46 45 52 20 46 55 4c 4c 2e 20 54 4f 53     BUFFER FULL. TOS
     218:	53 49 4e 47 20 49 4e 43 4f 4d 49 4e 47 20 44 41     SING INCOMING DA
     228:	54 41 0a 00                                         TA..

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	df e5       	ldi	r29, 0x5F	; 95
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	ec e2       	ldi	r30, 0x2C	; 44
     244:	fa e7       	ldi	r31, 0x7A	; 122
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	ae 30       	cpi	r26, 0x0E	; 14
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	10 e5       	ldi	r17, 0x50	; 80
     258:	ae e0       	ldi	r26, 0x0E	; 14
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a8 3b       	cpi	r26, 0xB8	; 184
     262:	b1 07       	cpc	r27, r17
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 db 06 	call	0xdb6	; 0xdb6 <main>
     26a:	0c 94 14 3d 	jmp	0x7a28	; 0x7a28 <_exit>

0000026e <__bad_interrupt>:
     26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <writeFRAM>:
 * Created: 3/8/2014 11:40:36 AM
 *  Author: VLAD
 */ 
#include "FRAM.h"

void writeFRAM(uint8_t* buffer, uint16_t length) {
     272:	af 92       	push	r10
     274:	bf 92       	push	r11
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	e8 2e       	mov	r14, r24
     286:	d9 2e       	mov	r13, r25
     288:	8b 01       	movw	r16, r22
	
	uint8_t prev_SPI_settings;
	ADCPower(TRUE);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	prev_SPI_settings = SPIC.CTRL;
     290:	c0 ec       	ldi	r28, 0xC0	; 192
     292:	d8 e0       	ldi	r29, 0x08	; 8
     294:	f8 80       	ld	r15, Y
	SPIInit(SPI_MODE_0_gc);
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
     29c:	80 ed       	ldi	r24, 0xD0	; 208
     29e:	88 83       	st	Y, r24
	SPICS(TRUE);
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	e0 e2       	ldi	r30, 0x20	; 32
     2aa:	f6 e0       	ldi	r31, 0x06	; 6
     2ac:	86 83       	std	Z+6, r24	; 0x06
	nop();
     2ae:	00 00       	nop
	SPIC.DATA = FR_WREN;
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	8b 83       	std	Y+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     2b4:	e0 ec       	ldi	r30, 0xC0	; 192
     2b6:	f8 e0       	ldi	r31, 0x08	; 8
     2b8:	82 81       	ldd	r24, Z+2	; 0x02
     2ba:	88 23       	and	r24, r24
     2bc:	ec f7       	brge	.-6      	; 0x2b8 <writeFRAM+0x46>
	SPIBuffer[12] = SPIC.DATA;
     2be:	e0 ec       	ldi	r30, 0xC0	; 192
     2c0:	f8 e0       	ldi	r31, 0x08	; 8
     2c2:	83 81       	ldd	r24, Z+3	; 0x03
     2c4:	80 93 2d 3e 	sts	0x3E2D, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b6 e0       	ldi	r27, 0x06	; 6
     2cc:	88 e0       	ldi	r24, 0x08	; 8
     2ce:	15 96       	adiw	r26, 0x05	; 5
     2d0:	8c 93       	st	X, r24
     2d2:	15 97       	sbiw	r26, 0x05	; 5
	nop(); // time for CS_FRAM to accept high signal
     2d4:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
     2d6:	16 96       	adiw	r26, 0x06	; 6
     2d8:	8c 93       	st	X, r24
     2da:	16 97       	sbiw	r26, 0x06	; 6
	nop();
     2dc:	00 00       	nop
	SPIC.DATA = FR_WRITE;
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	88 23       	and	r24, r24
     2e6:	ec f7       	brge	.-6      	; 0x2e2 <writeFRAM+0x70>
	SPIBuffer[12] = SPIC.DATA;
     2e8:	e0 ec       	ldi	r30, 0xC0	; 192
     2ea:	f8 e0       	ldi	r31, 0x08	; 8
     2ec:	83 81       	ldd	r24, Z+3	; 0x03
     2ee:	80 93 2d 3e 	sts	0x3E2D, r24
	//send address at which to start writing data
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
     2f2:	80 91 1f 3e 	lds	r24, 0x3E1F
     2f6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     2f8:	82 81       	ldd	r24, Z+2	; 0x02
     2fa:	88 23       	and	r24, r24
     2fc:	ec f7       	brge	.-6      	; 0x2f8 <writeFRAM+0x86>
	SPIBuffer[12] = SPIC.DATA;
     2fe:	e0 ec       	ldi	r30, 0xC0	; 192
     300:	f8 e0       	ldi	r31, 0x08	; 8
     302:	83 81       	ldd	r24, Z+3	; 0x03
     304:	80 93 2d 3e 	sts	0x3E2D, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
     308:	80 91 1e 3e 	lds	r24, 0x3E1E
     30c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	88 23       	and	r24, r24
     312:	ec f7       	brge	.-6      	; 0x30e <writeFRAM+0x9c>
	SPIBuffer[12] = SPIC.DATA;
     314:	e0 ec       	ldi	r30, 0xC0	; 192
     316:	f8 e0       	ldi	r31, 0x08	; 8
     318:	83 81       	ldd	r24, Z+3	; 0x03
     31a:	80 93 2d 3e 	sts	0x3E2D, r24
	//write data to FRAM
	for(uint32_t i = 0; i< length; i++){
     31e:	a8 01       	movw	r20, r16
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	41 15       	cp	r20, r1
     326:	51 05       	cpc	r21, r1
     328:	61 05       	cpc	r22, r1
     32a:	71 05       	cpc	r23, r1
     32c:	c9 f0       	breq	.+50     	; 0x360 <writeFRAM+0xee>
     32e:	ae 2c       	mov	r10, r14
     330:	bd 2c       	mov	r11, r13
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	dc 01       	movw	r26, r24
		SPIC.DATA = buffer[i];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     338:	2d e2       	ldi	r18, 0x2D	; 45
     33a:	3e e3       	ldi	r19, 0x3E	; 62
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	//write data to FRAM
	for(uint32_t i = 0; i< length; i++){
		SPIC.DATA = buffer[i];
     33c:	e5 01       	movw	r28, r10
     33e:	e9 90       	ld	r14, Y+
     340:	5e 01       	movw	r10, r28
     342:	e3 82       	std	Z+3, r14	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
     344:	e2 80       	ldd	r14, Z+2	; 0x02
     346:	ee 20       	and	r14, r14
     348:	ec f7       	brge	.-6      	; 0x344 <writeFRAM+0xd2>
		SPIBuffer[12] = SPIC.DATA;
     34a:	e3 80       	ldd	r14, Z+3	; 0x03
     34c:	e9 01       	movw	r28, r18
     34e:	e8 82       	st	Y, r14
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	//write data to FRAM
	for(uint32_t i = 0; i< length; i++){
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	a1 1d       	adc	r26, r1
     354:	b1 1d       	adc	r27, r1
     356:	84 17       	cp	r24, r20
     358:	95 07       	cpc	r25, r21
     35a:	a6 07       	cpc	r26, r22
     35c:	b7 07       	cpc	r27, r23
     35e:	70 f3       	brcs	.-36     	; 0x33c <writeFRAM+0xca>
		SPIC.DATA = buffer[i];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}
	
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
     360:	88 e0       	ldi	r24, 0x08	; 8
     362:	e0 e2       	ldi	r30, 0x20	; 32
     364:	f6 e0       	ldi	r31, 0x06	; 6
     366:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIC.CTRL = prev_SPI_settings;
     36e:	f0 92 c0 08 	sts	0x08C0, r15
	//SPIC.CTRL = ADC_SPI_CONFIG_gc;
	//PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
	
	//increment address by the written length
	FRAMAddress +=length;
     372:	80 91 1e 3e 	lds	r24, 0x3E1E
     376:	90 91 1f 3e 	lds	r25, 0x3E1F
     37a:	08 0f       	add	r16, r24
     37c:	19 1f       	adc	r17, r25
     37e:	00 93 1e 3e 	sts	0x3E1E, r16
     382:	10 93 1f 3e 	sts	0x3E1F, r17
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	08 95       	ret

0000039a <readFRAM>:

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes, uint16_t startAddress) {
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	0f 92       	push	r0
     3aa:	0f 92       	push	r0
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	7c 01       	movw	r14, r24
     3b2:	69 83       	std	Y+1, r22	; 0x01
     3b4:	7a 83       	std	Y+2, r23	; 0x02
	
	//save SPI registers
	uint8_t prev_SPI_settings;
	ADCPower(TRUE);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	prev_SPI_settings = SPIC.CTRL;
     3bc:	00 ec       	ldi	r16, 0xC0	; 192
     3be:	18 e0       	ldi	r17, 0x08	; 8
     3c0:	f8 01       	movw	r30, r16
     3c2:	d0 80       	ld	r13, Z
	SPIInit(SPI_MODE_0_gc);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
     3ca:	80 ed       	ldi	r24, 0xD0	; 208
     3cc:	f8 01       	movw	r30, r16
     3ce:	80 83       	st	Z, r24
	SPICS(TRUE);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	e0 e2       	ldi	r30, 0x20	; 32
     3da:	f6 e0       	ldi	r31, 0x06	; 6
     3dc:	86 83       	std	Z+6, r24	; 0x06
	nop();
     3de:	00 00       	nop
	
	SPIC.DATA = FR_READ;
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	f8 01       	movw	r30, r16
     3e4:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     3e6:	82 81       	ldd	r24, Z+2	; 0x02
     3e8:	88 23       	and	r24, r24
     3ea:	ec f7       	brge	.-6      	; 0x3e6 <readFRAM+0x4c>
	SPIBuffer[12] = SPIC.DATA;
     3ec:	e0 ec       	ldi	r30, 0xC0	; 192
     3ee:	f8 e0       	ldi	r31, 0x08	; 8
     3f0:	83 81       	ldd	r24, Z+3	; 0x03
     3f2:	80 93 2d 3e 	sts	0x3E2D, r24
	SPIC.DATA = *(((uint8_t*)&startAddress) + 1);;
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	88 23       	and	r24, r24
     3fe:	ec f7       	brge	.-6      	; 0x3fa <readFRAM+0x60>
	SPIBuffer[12] = SPIC.DATA;
     400:	e0 ec       	ldi	r30, 0xC0	; 192
     402:	f8 e0       	ldi	r31, 0x08	; 8
     404:	83 81       	ldd	r24, Z+3	; 0x03
     406:	80 93 2d 3e 	sts	0x3E2D, r24
	SPIC.DATA = *(((uint8_t*)&startAddress) + 0);;
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	88 23       	and	r24, r24
     412:	ec f7       	brge	.-6      	; 0x40e <readFRAM+0x74>
	SPIBuffer[12] = SPIC.DATA;
     414:	e0 ec       	ldi	r30, 0xC0	; 192
     416:	f8 e0       	ldi	r31, 0x08	; 8
     418:	83 81       	ldd	r24, Z+3	; 0x03
     41a:	80 93 2d 3e 	sts	0x3E2D, r24
	
	for(uint16_t i = 0; i < numBytes; i++) {
     41e:	e1 14       	cp	r14, r1
     420:	f1 04       	cpc	r15, r1
     422:	b9 f0       	breq	.+46     	; 0x452 <readFRAM+0xb8>
     424:	ed ea       	ldi	r30, 0xAD	; 173
     426:	f1 e2       	ldi	r31, 0x21	; 33
	FRAMAddress +=length;
}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes, uint16_t startAddress) {
     428:	c7 01       	movw	r24, r14
     42a:	8e 0f       	add	r24, r30
     42c:	9f 1f       	adc	r25, r31
	SPIC.DATA = *(((uint8_t*)&startAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) {
		SPIC.DATA = 0xAA;
     42e:	a0 ec       	ldi	r26, 0xC0	; 192
     430:	b8 e0       	ldi	r27, 0x08	; 8
     432:	3a ea       	ldi	r19, 0xAA	; 170
     434:	13 96       	adiw	r26, 0x03	; 3
     436:	3c 93       	st	X, r19
     438:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     43a:	12 96       	adiw	r26, 0x02	; 2
     43c:	2c 91       	ld	r18, X
     43e:	12 97       	sbiw	r26, 0x02	; 2
     440:	22 23       	and	r18, r18
     442:	dc f7       	brge	.-10     	; 0x43a <readFRAM+0xa0>
		FRAMReadBuffer[i] = SPIC.DATA;
     444:	13 96       	adiw	r26, 0x03	; 3
     446:	2c 91       	ld	r18, X
     448:	13 97       	sbiw	r26, 0x03	; 3
     44a:	21 93       	st	Z+, r18
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&startAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) {
     44c:	e8 17       	cp	r30, r24
     44e:	f9 07       	cpc	r31, r25
     450:	89 f7       	brne	.-30     	; 0x434 <readFRAM+0x9a>
		SPIC.DATA = 0xAA;
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
	}

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
     452:	88 e0       	ldi	r24, 0x08	; 8
     454:	e0 e2       	ldi	r30, 0x20	; 32
     456:	f6 e0       	ldi	r31, 0x06	; 6
     458:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIC.CTRL = prev_SPI_settings;
     460:	d0 92 c0 08 	sts	0x08C0, r13

}
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	08 95       	ret

00000478 <StartSerial>:
 * Created: 9/20/2013 9:50:45 AM
 *  Author: Vlad
 */ 
#include "SerialUSB.h"

bool StartSerial(uint32_t BaudRate){
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	6b 01       	movw	r12, r22
     48a:	7c 01       	movw	r14, r24
	uint16_t prescaler;
	if(BaudRate <600 || BaudRate >1000000){
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	88 55       	subi	r24, 0x58	; 88
     492:	92 40       	sbci	r25, 0x02	; 2
     494:	a0 40       	sbci	r26, 0x00	; 0
     496:	b0 40       	sbci	r27, 0x00	; 0
     498:	89 3e       	cpi	r24, 0xE9	; 233
     49a:	2f e3       	ldi	r18, 0x3F	; 63
     49c:	92 07       	cpc	r25, r18
     49e:	2f e0       	ldi	r18, 0x0F	; 15
     4a0:	a2 07       	cpc	r26, r18
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	b2 07       	cpc	r27, r18
     4a6:	08 f0       	brcs	.+2      	; 0x4aa <StartSerial+0x32>
     4a8:	5c c0       	rjmp	.+184    	; 0x562 <StartSerial+0xea>
		//baud rate too fast or too slow
		return false;
	}
	//set F_CPU/F_PER to 32 MHz (default is the 2 MHz RC oscillator)
	set_32MHz();
     4aa:	0e 94 3c 03 	call	0x678	; 0x678 <set_32MHz>
	//set output on transmit pin
	PORTC.DIRSET = PIN3_bm;
     4ae:	e0 e4       	ldi	r30, 0x40	; 64
     4b0:	f6 e0       	ldi	r31, 0x06	; 6
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = PIN3_bm;
     4b6:	85 83       	std	Z+5, r24	; 0x05
	//set input on receive pin
	PORTC.DIRCLR = PIN2_bm;
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	82 83       	std	Z+2, r24	; 0x02
	//prescalar of 15: baud = F_CPU/((2^bscale)*16*(scaler+1)) = 125000 (almost 128000)
	prescaler = (uint32_t)((((float)F_CPU)/((float)(16*BaudRate)))-1);
     4bc:	cc 0c       	add	r12, r12
     4be:	dd 1c       	adc	r13, r13
     4c0:	ee 1c       	adc	r14, r14
     4c2:	ff 1c       	adc	r15, r15
     4c4:	cc 0c       	add	r12, r12
     4c6:	dd 1c       	adc	r13, r13
     4c8:	ee 1c       	adc	r14, r14
     4ca:	ff 1c       	adc	r15, r15
     4cc:	c7 01       	movw	r24, r14
     4ce:	b6 01       	movw	r22, r12
     4d0:	66 0f       	add	r22, r22
     4d2:	77 1f       	adc	r23, r23
     4d4:	88 1f       	adc	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	66 0f       	add	r22, r22
     4da:	77 1f       	adc	r23, r23
     4dc:	88 1f       	adc	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__floatunsisf>
     4e4:	9b 01       	movw	r18, r22
     4e6:	ac 01       	movw	r20, r24
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	74 e2       	ldi	r23, 0x24	; 36
     4ec:	84 ef       	ldi	r24, 0xF4	; 244
     4ee:	9b e4       	ldi	r25, 0x4B	; 75
     4f0:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <__divsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e8       	ldi	r20, 0x80	; 128
     4fa:	5f e3       	ldi	r21, 0x3F	; 63
     4fc:	0e 94 77 37 	call	0x6eee	; 0x6eee <__subsf3>
     500:	c6 2f       	mov	r28, r22
     502:	d7 2f       	mov	r29, r23
     504:	18 2f       	mov	r17, r24
     506:	09 2f       	mov	r16, r25
     508:	86 2f       	mov	r24, r22
     50a:	9d 2f       	mov	r25, r29
     50c:	a1 2f       	mov	r26, r17
     50e:	b0 2f       	mov	r27, r16
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	0e 94 44 38 	call	0x7088	; 0x7088 <__fixunssfsi>
     518:	6b 01       	movw	r12, r22
     51a:	7c 01       	movw	r14, r24
	//increment prescaler if truncated part was >= 0.5
	if((((float)F_CPU/((float)(16*BaudRate)))-1)-prescaler >= 0.5) prescaler++;
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__floatunsisf>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	8c 2f       	mov	r24, r28
     52a:	9d 2f       	mov	r25, r29
     52c:	a1 2f       	mov	r26, r17
     52e:	b0 2f       	mov	r27, r16
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	0e 94 77 37 	call	0x6eee	; 0x6eee <__subsf3>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	5f e3       	ldi	r21, 0x3F	; 63
     540:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__gesf2>
     544:	88 23       	and	r24, r24
     546:	1c f0       	brlt	.+6      	; 0x54e <StartSerial+0xd6>
     548:	08 94       	sec
     54a:	c1 1c       	adc	r12, r1
     54c:	d1 1c       	adc	r13, r1
	
	USARTC0.BAUDCTRLA = prescaler & 0xFF;
     54e:	e0 ea       	ldi	r30, 0xA0	; 160
     550:	f8 e0       	ldi	r31, 0x08	; 8
     552:	c6 82       	std	Z+6, r12	; 0x06
	USARTC0.BAUDCTRLB = prescaler >>8;
     554:	d7 82       	std	Z+7, r13	; 0x07
	//8 data bits no parity 1 stop bit
	USARTC0.CTRLC = 3;
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	85 83       	std	Z+5, r24	; 0x05
	//turn on Rx and Tx for USART
	USARTC0.CTRLB = BIT4_bm | BIT3_bm;
     55a:	88 e1       	ldi	r24, 0x18	; 24
     55c:	84 83       	std	Z+4, r24	; 0x04
	return true;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	01 c0       	rjmp	.+2      	; 0x564 <StartSerial+0xec>

bool StartSerial(uint32_t BaudRate){
	uint16_t prescaler;
	if(BaudRate <600 || BaudRate >1000000){
		//baud rate too fast or too slow
		return false;
     562:	80 e0       	ldi	r24, 0x00	; 0
	//8 data bits no parity 1 stop bit
	USARTC0.CTRLC = 3;
	//turn on Rx and Tx for USART
	USARTC0.CTRLB = BIT4_bm | BIT3_bm;
	return true;
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	08 95       	ret

00000576 <SerialWriteByte>:

void SerialWriteByte(uint8_t byte){
	//wait for transmit buffer to become available
	while((USARTC0.STATUS & BIT5_bm) != BIT5_bm){
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f8 e0       	ldi	r31, 0x08	; 8
     57a:	91 81       	ldd	r25, Z+1	; 0x01
     57c:	95 ff       	sbrs	r25, 5
     57e:	fd cf       	rjmp	.-6      	; 0x57a <SerialWriteByte+0x4>
		//wait
	}
	//send byte
	USARTC0.DATA = byte;
     580:	80 93 a0 08 	sts	0x08A0, r24
	//wait for transmit to finish
	//while((USARTC0.STATUS & BIT6_bm) != BIT6_bm) {
		//wait
	//}
}
     584:	08 95       	ret

00000586 <SerialReadByte>:

uint8_t SerialReadByte(){
	uint8_t byte;
	//wait for reception of message
	while ((USARTC0.STATUS & BIT7_bm) != BIT7_bm){
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f8 e0       	ldi	r31, 0x08	; 8
     58a:	81 81       	ldd	r24, Z+1	; 0x01
     58c:	88 23       	and	r24, r24
     58e:	ec f7       	brge	.-6      	; 0x58a <SerialReadByte+0x4>
		//add timeout logic
	}	
	//read in byte
	byte = USARTC0.DATA;
     590:	80 91 a0 08 	lds	r24, 0x08A0
	return byte;	
}
     594:	08 95       	ret

00000596 <SerialWriteBuffer>:

void SerialWriteBuffer(uint8_t* buffer, uint32_t length){
     596:	8f 92       	push	r8
     598:	9f 92       	push	r9
     59a:	af 92       	push	r10
     59c:	bf 92       	push	r11
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	6a 01       	movw	r12, r20
     5ac:	7b 01       	movw	r14, r22
	uint32_t i;
	for(i=0;i<length;i++){
     5ae:	41 15       	cp	r20, r1
     5b0:	51 05       	cpc	r21, r1
     5b2:	61 05       	cpc	r22, r1
     5b4:	71 05       	cpc	r23, r1
     5b6:	91 f0       	breq	.+36     	; 0x5dc <SerialWriteBuffer+0x46>
     5b8:	c8 2f       	mov	r28, r24
     5ba:	d9 2f       	mov	r29, r25
     5bc:	88 24       	eor	r8, r8
     5be:	99 24       	eor	r9, r9
     5c0:	54 01       	movw	r10, r8
		SerialWriteByte(buffer[i]);
     5c2:	89 91       	ld	r24, Y+
     5c4:	0e 94 bb 02 	call	0x576	; 0x576 <SerialWriteByte>
	return byte;	
}

void SerialWriteBuffer(uint8_t* buffer, uint32_t length){
	uint32_t i;
	for(i=0;i<length;i++){
     5c8:	08 94       	sec
     5ca:	81 1c       	adc	r8, r1
     5cc:	91 1c       	adc	r9, r1
     5ce:	a1 1c       	adc	r10, r1
     5d0:	b1 1c       	adc	r11, r1
     5d2:	8c 14       	cp	r8, r12
     5d4:	9d 04       	cpc	r9, r13
     5d6:	ae 04       	cpc	r10, r14
     5d8:	bf 04       	cpc	r11, r15
     5da:	99 f7       	brne	.-26     	; 0x5c2 <SerialWriteBuffer+0x2c>
		SerialWriteByte(buffer[i]);
	}
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	9f 90       	pop	r9
     5ee:	8f 90       	pop	r8
     5f0:	08 95       	ret

000005f2 <StopSerial>:

void StopSerial(){
	//turn off Rx and Tx for USART
	USARTC0.CTRLB &= ~(BIT4_bm | BIT3_bm);
     5f2:	e0 ea       	ldi	r30, 0xA0	; 160
     5f4:	f8 e0       	ldi	r31, 0x08	; 8
     5f6:	84 81       	ldd	r24, Z+4	; 0x04
     5f8:	87 7e       	andi	r24, 0xE7	; 231
     5fa:	84 83       	std	Z+4, r24	; 0x04
	//clear output pin
	PORTC.OUTCLR = PIN3_bm;
     5fc:	e0 e4       	ldi	r30, 0x40	; 64
     5fe:	f6 e0       	ldi	r31, 0x06	; 6
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN3_bm;
     604:	82 83       	std	Z+2, r24	; 0x02
     606:	08 95       	ret

00000608 <init>:
//  - LS900-SI-02 does not contain the crystal
//  - SFLX02-A03 does contain the crystal
// The high frequency crystal is required to clock the ADC without jitter

void init(){
	ADC_POWER_ON = 0;
     608:	10 92 33 3e 	sts	0x3E33, r1
}
     60c:	08 95       	ret

0000060e <setXOSC_32MHz>:

void setXOSC_32MHz() {
	// configure the crystal to match the chip
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc,
     60e:	80 ec       	ldi	r24, 0xC0	; 192
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	4b e0       	ldi	r20, 0x0B	; 11
     614:	0e 94 14 20 	call	0x4028	; 0x4028 <CLKSYS_XOSC_Config>
	false,
	OSC_XOSCSEL_XTAL_16KCLK_gc );
	CLKSYS_Enable(OSC_XOSCEN_bm);
     618:	e0 e5       	ldi	r30, 0x50	; 80
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	88 60       	ori	r24, 0x08	; 8
     620:	80 83       	st	Z, r24
	// wait for signal to stabilize
do {} while (CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     622:	81 81       	ldd	r24, Z+1	; 0x01
     624:	83 ff       	sbrs	r24, 3
     626:	fd cf       	rjmp	.-6      	; 0x622 <setXOSC_32MHz+0x14>
// configure PLL to use the crystal and turn on
CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     628:	80 ec       	ldi	r24, 0xC0	; 192
     62a:	62 e0       	ldi	r22, 0x02	; 2
     62c:	0e 94 1f 20 	call	0x403e	; 0x403e <CLKSYS_PLL_Config>
CLKSYS_Enable( OSC_PLLEN_bm );
     630:	e0 e5       	ldi	r30, 0x50	; 80
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	80 61       	ori	r24, 0x10	; 16
     638:	80 83       	st	Z, r24
// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     63a:	81 81       	ldd	r24, Z+1	; 0x01
     63c:	84 ff       	sbrs	r24, 4
     63e:	fd cf       	rjmp	.-6      	; 0x63a <setXOSC_32MHz+0x2c>
	// set as system clock and disable unused RC oscillator
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     640:	84 e0       	ldi	r24, 0x04	; 4
     642:	0e 94 35 20 	call	0x406a	; 0x406a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0e 94 25 20 	call	0x404a	; 0x404a <CLKSYS_Disable>
}
     64c:	08 95       	ret

0000064e <set_16MHz>:

// produces consistent but inaccurate clock period.
void set_16MHz() {
	// select 32MHz Oscillator and prescale by 1/2
	CLKSYS_Enable(OSC_RC32MEN_bm);
     64e:	e0 e5       	ldi	r30, 0x50	; 80
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	82 60       	ori	r24, 0x02	; 2
     656:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	0e 94 2f 20 	call	0x405e	; 0x405e <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
     660:	e0 e5       	ldi	r30, 0x50	; 80
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	81 81       	ldd	r24, Z+1	; 0x01
     666:	81 ff       	sbrs	r24, 1
     668:	fd cf       	rjmp	.-6      	; 0x664 <set_16MHz+0x16>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 35 20 	call	0x406a	; 0x406a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 25 20 	call	0x404a	; 0x404a <CLKSYS_Disable>
	
}
     676:	08 95       	ret

00000678 <set_32MHz>:

// produces consistent but inaccurate clock period.
void set_32MHz() {
	#define F_CPU 32000000UL
	// select 32MHz Oscillator and prescale by 1
	CLKSYS_Enable(OSC_RC32MEN_bm);
     678:	e0 e5       	ldi	r30, 0x50	; 80
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	82 60       	ori	r24, 0x02	; 2
     680:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	0e 94 2f 20 	call	0x405e	; 0x405e <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
     68a:	e0 e5       	ldi	r30, 0x50	; 80
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	81 81       	ldd	r24, Z+1	; 0x01
     690:	81 ff       	sbrs	r24, 1
     692:	fd cf       	rjmp	.-6      	; 0x68e <set_32MHz+0x16>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 35 20 	call	0x406a	; 0x406a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 25 20 	call	0x404a	; 0x404a <CLKSYS_Disable>
	
}
     6a0:	08 95       	ret

000006a2 <portExCS>:


void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     6a2:	88 23       	and	r24, r24
     6a4:	29 f0       	breq	.+10     	; 0x6b0 <portExCS+0xe>
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	e0 e0       	ldi	r30, 0x00	; 0
     6aa:	f6 e0       	ldi	r31, 0x06	; 6
     6ac:	86 83       	std	Z+6, r24	; 0x06
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <portExCS+0x16>
	else {
		PORTA.OUTSET = PIN3_bm;
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	e0 e0       	ldi	r30, 0x00	; 0
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b8:	8a e6       	ldi	r24, 0x6A	; 106
     6ba:	8a 95       	dec	r24
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <portExCS+0x18>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <portExCS+0x1e>
	}
	_delay_us(10);
}
     6c0:	08 95       	ret

000006c2 <Ext1Power>:
	SPIDisable();
}

void Ext1Power(uint8_t on) {
	
	if (on) {
     6c2:	88 23       	and	r24, r24
     6c4:	79 f0       	breq	.+30     	; 0x6e4 <Ext1Power+0x22>
		PORTF.DIRSET = PIN5_bm;
     6c6:	e0 ea       	ldi	r30, 0xA0	; 160
     6c8:	f6 e0       	ldi	r31, 0x06	; 6
     6ca:	80 e2       	ldi	r24, 0x20	; 32
     6cc:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN5_bm;
     6ce:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	93 ec       	ldi	r25, 0xC3	; 195
     6d4:	a9 e0       	ldi	r26, 0x09	; 9
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	90 40       	sbci	r25, 0x00	; 0
     6da:	a0 40       	sbci	r26, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <Ext1Power+0x14>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <Ext1Power+0x1e>
     6e0:	00 00       	nop
     6e2:	08 95       	ret
		//PortEx_DIRSET(PIN3_bm, PS_BANKB);
		//PortEx_OUTSET(PIN3_bm, PS_BANKB);  //write protect SDHC
		_delay_ms(100);
		
	} else {
		PORTF.OUTCLR = PIN5_bm;
     6e4:	e0 ea       	ldi	r30, 0xA0	; 160
     6e6:	f6 e0       	ldi	r31, 0x06	; 6
     6e8:	80 e2       	ldi	r24, 0x20	; 32
     6ea:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN5_bm;
     6ec:	82 83       	std	Z+2, r24	; 0x02
     6ee:	08 95       	ret

000006f0 <Ext2Power>:
	}
}

void Ext2Power(uint8_t on) {
	
	if (on) {
     6f0:	88 23       	and	r24, r24
     6f2:	79 f0       	breq	.+30     	; 0x712 <Ext2Power+0x22>
		PORTF.DIRSET = PIN6_bm;
     6f4:	e0 ea       	ldi	r30, 0xA0	; 160
     6f6:	f6 e0       	ldi	r31, 0x06	; 6
     6f8:	80 e4       	ldi	r24, 0x40	; 64
     6fa:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN6_bm;
     6fc:	85 83       	std	Z+5, r24	; 0x05
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	93 ec       	ldi	r25, 0xC3	; 195
     702:	a9 e0       	ldi	r26, 0x09	; 9
     704:	81 50       	subi	r24, 0x01	; 1
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	a0 40       	sbci	r26, 0x00	; 0
     70a:	e1 f7       	brne	.-8      	; 0x704 <Ext2Power+0x14>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <Ext2Power+0x1e>
     70e:	00 00       	nop
     710:	08 95       	ret
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN6_bm;
     712:	e0 ea       	ldi	r30, 0xA0	; 160
     714:	f6 e0       	ldi	r31, 0x06	; 6
     716:	80 e4       	ldi	r24, 0x40	; 64
     718:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN6_bm;
     71a:	82 83       	std	Z+2, r24	; 0x02
     71c:	08 95       	ret

0000071e <HVPower>:
	}
}

void HVPower(uint8_t on) {
	
	if (on) {
     71e:	88 23       	and	r24, r24
     720:	79 f0       	breq	.+30     	; 0x740 <HVPower+0x22>
		PORTF.DIRSET = PIN7_bm;
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f6 e0       	ldi	r31, 0x06	; 6
     726:	80 e8       	ldi	r24, 0x80	; 128
     728:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN7_bm;
     72a:	85 83       	std	Z+5, r24	; 0x05
     72c:	8f ef       	ldi	r24, 0xFF	; 255
     72e:	93 ec       	ldi	r25, 0xC3	; 195
     730:	a9 e0       	ldi	r26, 0x09	; 9
     732:	81 50       	subi	r24, 0x01	; 1
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	a0 40       	sbci	r26, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <HVPower+0x14>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <HVPower+0x1e>
     73c:	00 00       	nop
     73e:	05 c0       	rjmp	.+10     	; 0x74a <HVPower+0x2c>
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN7_bm;
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f6 e0       	ldi	r31, 0x06	; 6
     744:	80 e8       	ldi	r24, 0x80	; 128
     746:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN7_bm;
     748:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     74a:	af e3       	ldi	r26, 0x3F	; 63
     74c:	bf e1       	ldi	r27, 0x1F	; 31
     74e:	11 97       	sbiw	r26, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <HVPower+0x30>
     752:	00 c0       	rjmp	.+0      	; 0x754 <HVPower+0x36>
     754:	00 00       	nop
	}
	_delay_us(1000);
}
     756:	08 95       	ret

00000758 <lowerMuxCS>:


void lowerMuxCS(uint8_t write) {
	
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
     758:	88 23       	and	r24, r24
     75a:	29 f0       	breq	.+10     	; 0x766 <lowerMuxCS+0xe>
     75c:	80 e1       	ldi	r24, 0x10	; 16
     75e:	e0 e8       	ldi	r30, 0x80	; 128
     760:	f6 e0       	ldi	r31, 0x06	; 6
     762:	86 83       	std	Z+6, r24	; 0x06
     764:	08 95       	ret
	else PORTE.OUTSET = PIN4_bm;
     766:	80 e1       	ldi	r24, 0x10	; 16
     768:	e0 e8       	ldi	r30, 0x80	; 128
     76a:	f6 e0       	ldi	r31, 0x06	; 6
     76c:	85 83       	std	Z+5, r24	; 0x05
     76e:	08 95       	ret

00000770 <upperMuxCS>:
}

void upperMuxCS(uint8_t write) {
	
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
     770:	88 23       	and	r24, r24
     772:	29 f0       	breq	.+10     	; 0x77e <upperMuxCS+0xe>
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	e0 e4       	ldi	r30, 0x40	; 64
     778:	f6 e0       	ldi	r31, 0x06	; 6
     77a:	86 83       	std	Z+6, r24	; 0x06
     77c:	08 95       	ret
	else PORTC.OUTSET = PIN1_bm;
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	e0 e4       	ldi	r30, 0x40	; 64
     782:	f6 e0       	ldi	r31, 0x06	; 6
     784:	85 83       	std	Z+5, r24	; 0x05
     786:	08 95       	ret

00000788 <SPIInit>:
}

void SPIInit(uint8_t mode) {
	
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
     788:	e0 e4       	ldi	r30, 0x40	; 64
     78a:	f6 e0       	ldi	r31, 0x06	; 6
     78c:	90 e1       	ldi	r25, 0x10	; 16
     78e:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
     790:	28 e3       	ldi	r18, 0x38	; 56
     792:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
     794:	95 83       	std	Z+5, r25	; 0x05

	// init SPI
	SPIC.CTRL =	SPI_PRESCALER |  // set clock speed
     796:	81 65       	ori	r24, 0x51	; 81
     798:	a0 ec       	ldi	r26, 0xC0	; 192
     79a:	b8 e0       	ldi	r27, 0x08	; 8
     79c:	8c 93       	st	X, r24
	0x00 |  // set data order msb first
	SPI_MASTER_bm | // set SPI master
	mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	1c 92       	st	X, r1
     7a2:	11 97       	sbiw	r26, 0x01	; 1

	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
     7a4:	80 ea       	ldi	r24, 0xA0	; 160
     7a6:	81 83       	std	Z+1, r24	; 0x01

	
}
     7a8:	08 95       	ret

000007aa <SPIInit2>:

//use this if using a prescalar
void SPIInit2(uint8_t mode, uint8_t prescalar) {
	
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
     7aa:	e0 e4       	ldi	r30, 0x40	; 64
     7ac:	f6 e0       	ldi	r31, 0x06	; 6
     7ae:	90 e1       	ldi	r25, 0x10	; 16
     7b0:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
     7b2:	28 e3       	ldi	r18, 0x38	; 56
     7b4:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
     7b6:	95 83       	std	Z+5, r25	; 0x05
	

	// init SPI
	SPIC.CTRL =	prescalar |  // set clock speed
     7b8:	80 65       	ori	r24, 0x50	; 80
     7ba:	68 2b       	or	r22, r24
     7bc:	a0 ec       	ldi	r26, 0xC0	; 192
     7be:	b8 e0       	ldi	r27, 0x08	; 8
     7c0:	6c 93       	st	X, r22
	0x00 |  // set data order msb first
	SPI_MASTER_bm | // set SPI master
	mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     7c2:	11 96       	adiw	r26, 0x01	; 1
     7c4:	1c 92       	st	X, r1
     7c6:	11 97       	sbiw	r26, 0x01	; 1

	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	81 83       	std	Z+1, r24	; 0x01
}
     7cc:	08 95       	ret

000007ce <SPICS>:

void SPICS(uint8_t enable) {
	
	if (enable) PORTC.OUTCLR = PIN4_bm;
     7ce:	88 23       	and	r24, r24
     7d0:	29 f0       	breq	.+10     	; 0x7dc <SPICS+0xe>
     7d2:	80 e1       	ldi	r24, 0x10	; 16
     7d4:	e0 e4       	ldi	r30, 0x40	; 64
     7d6:	f6 e0       	ldi	r31, 0x06	; 6
     7d8:	86 83       	std	Z+6, r24	; 0x06
     7da:	08 95       	ret
	else {
		PORTC.OUTSET = PIN4_bm;
     7dc:	80 e1       	ldi	r24, 0x10	; 16
     7de:	e0 e4       	ldi	r30, 0x40	; 64
     7e0:	f6 e0       	ldi	r31, 0x06	; 6
     7e2:	85 83       	std	Z+5, r24	; 0x05
     7e4:	08 95       	ret

000007e6 <SPIDisable>:
	}
}

void SPIDisable() {
	
	PORTC.OUTSET = PIN4_bm;
     7e6:	e0 e4       	ldi	r30, 0x40	; 64
     7e8:	f6 e0       	ldi	r31, 0x06	; 6
     7ea:	80 e1       	ldi	r24, 0x10	; 16
     7ec:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
     7ee:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     7f2:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     7f4:	80 eb       	ldi	r24, 0xB0	; 176
     7f6:	82 83       	std	Z+2, r24	; 0x02

}
     7f8:	08 95       	ret

000007fa <set_filter>:
 *	filterConfig[2]	Channel 3 and 7 mask
 *	filterConfig[3]	Channel 4 and 8 mask
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
*/
void set_filter(uint8_t filterConfig) {
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
	// hack to get ADC to work
	//filterConfig |= 0x0F;

	// boolean flags for upper/lower channels CS
	uint8_t lowerCS = filterConfig & 0x03; 
     7fe:	c8 2f       	mov	r28, r24
     800:	c3 70       	andi	r28, 0x03	; 3
	uint8_t upperCS = filterConfig & 0x0C;
     802:	d8 2f       	mov	r29, r24
     804:	dc 70       	andi	r29, 0x0C	; 12

	// update left and right channel status
	if (filterConfig & (BIT0_bm | BIT2_bm)) channelStatus = 
     806:	28 2f       	mov	r18, r24
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	a9 01       	movw	r20, r18
     80c:	45 70       	andi	r20, 0x05	; 5
     80e:	50 70       	andi	r21, 0x00	; 0
     810:	41 15       	cp	r20, r1
     812:	51 05       	cpc	r21, r1
     814:	49 f0       	breq	.+18     	; 0x828 <set_filter+0x2e>
     816:	90 91 31 3e 	lds	r25, 0x3E31
     81a:	48 2f       	mov	r20, r24
     81c:	42 95       	swap	r20
     81e:	4f 70       	andi	r20, 0x0F	; 15
     820:	90 7f       	andi	r25, 0xF0	; 240
     822:	94 2b       	or	r25, r20
     824:	90 93 31 3e 	sts	0x3E31, r25
		(0xF0 & channelStatus) | (filterConfig >> 4);  //right
	if (filterConfig & (BIT1_bm | BIT3_bm)) channelStatus =
     828:	2a 70       	andi	r18, 0x0A	; 10
     82a:	30 70       	andi	r19, 0x00	; 0
     82c:	21 15       	cp	r18, r1
     82e:	31 05       	cpc	r19, r1
     830:	39 f0       	breq	.+14     	; 0x840 <set_filter+0x46>
     832:	90 91 31 3e 	lds	r25, 0x3E31
     836:	80 7f       	andi	r24, 0xF0	; 240
     838:	9f 70       	andi	r25, 0x0F	; 15
     83a:	89 2b       	or	r24, r25
     83c:	80 93 31 3e 	sts	0x3E31, r24
		(0xF0 & filterConfig) | (0x0F & channelStatus); //left
		
	SPIInit(SPI_MODE_1_gc);
     840:	84 e0       	ldi	r24, 0x04	; 4
     842:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>

	
	SPIBuffer[0] = channelStatus;
     846:	80 91 31 3e 	lds	r24, 0x3E31
     84a:	80 93 21 3e 	sts	0x3E21, r24
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
     84e:	cc 23       	and	r28, r28
     850:	19 f0       	breq	.+6      	; 0x858 <set_filter+0x5e>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 ac 03 	call	0x758	; 0x758 <lowerMuxCS>
	if (upperCS) upperMuxCS(TRUE);
     858:	dd 23       	and	r29, r29
     85a:	19 f0       	breq	.+6      	; 0x862 <set_filter+0x68>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	0e 94 b8 03 	call	0x770	; 0x770 <upperMuxCS>

	SPICS(TRUE);
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>

	// Send all logic high to ensure that the SDO line on the chip is
	// left in high Z state after SPI transaction.
	// The t-1 SDI transaction is output on the SDO and the pin left in the configuration.
	// of the last bit
	SPIC.DATA = 0xFF;
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	e0 ec       	ldi	r30, 0xC0	; 192
     86c:	f8 e0       	ldi	r31, 0x08	; 8
     86e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     870:	82 81       	ldd	r24, Z+2	; 0x02
     872:	88 23       	and	r24, r24
     874:	ec f7       	brge	.-6      	; 0x870 <set_filter+0x76>
	SPIBuffer[12] = SPIC.DATA;
     876:	e0 ec       	ldi	r30, 0xC0	; 192
     878:	f8 e0       	ldi	r31, 0x08	; 8
     87a:	83 81       	ldd	r24, Z+3	; 0x03
     87c:	80 93 2d 3e 	sts	0x3E2D, r24

	nop();
     880:	00 00       	nop

	SPIC.DATA = SPIBuffer[0];
     882:	ad e2       	ldi	r26, 0x2D	; 45
     884:	be e3       	ldi	r27, 0x3E	; 62
     886:	1c 97       	sbiw	r26, 0x0c	; 12
     888:	8c 91       	ld	r24, X
     88a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	88 23       	and	r24, r24
     890:	ec f7       	brge	.-6      	; 0x88c <set_filter+0x92>
	SPIBuffer[12] = SPIC.DATA;
     892:	e0 ec       	ldi	r30, 0xC0	; 192
     894:	f8 e0       	ldi	r31, 0x08	; 8
     896:	83 81       	ldd	r24, Z+3	; 0x03
     898:	80 93 2d 3e 	sts	0x3E2D, r24
	SPICS(FALSE);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>

	if (lowerCS) lowerMuxCS(FALSE);
     8a2:	cc 23       	and	r28, r28
     8a4:	19 f0       	breq	.+6      	; 0x8ac <set_filter+0xb2>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 ac 03 	call	0x758	; 0x758 <lowerMuxCS>
	if (upperCS) upperMuxCS(FALSE);
     8ac:	dd 23       	and	r29, r29
     8ae:	19 f0       	breq	.+6      	; 0x8b6 <set_filter+0xbc>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 b8 03 	call	0x770	; 0x770 <upperMuxCS>
	SPIDisable();
     8b6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <PortEx_OUTCLR>:
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	c8 2f       	mov	r28, r24
     8c6:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(TRUE);
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
     8da:	dd 23       	and	r29, r29
     8dc:	89 f0       	breq	.+34     	; 0x900 <PortEx_OUTCLR+0x40>
     8de:	80 91 ac 21 	lds	r24, 0x21AC
     8e2:	c0 95       	com	r28
     8e4:	c8 23       	and	r28, r24
     8e6:	c0 93 ac 21 	sts	0x21AC, r28
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
	
	SPIBuffer[0] = PS_WRITE;
     8ea:	80 e4       	ldi	r24, 0x40	; 64
     8ec:	80 93 21 3e 	sts	0x3E21, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
     8f0:	84 e1       	ldi	r24, 0x14	; 20
     8f2:	80 93 22 3e 	sts	0x3E22, r24
		SPIBuffer[2] = bankA_OUT;
     8f6:	80 91 ac 21 	lds	r24, 0x21AC
     8fa:	80 93 23 3e 	sts	0x3E23, r24
     8fe:	10 c0       	rjmp	.+32     	; 0x920 <PortEx_OUTCLR+0x60>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
     900:	80 91 32 3e 	lds	r24, 0x3E32
     904:	c0 95       	com	r28
     906:	c8 23       	and	r28, r24
     908:	c0 93 32 3e 	sts	0x3E32, r28
	
	SPIBuffer[0] = PS_WRITE;
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	80 93 21 3e 	sts	0x3E21, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
		SPIBuffer[2] = bankA_OUT;
	} else {
		SPIBuffer[1]=PS_OLATB;
     912:	85 e1       	ldi	r24, 0x15	; 21
     914:	80 93 22 3e 	sts	0x3E22, r24
		SPIBuffer[2] = bankB_OUT; 
     918:	80 91 32 3e 	lds	r24, 0x3E32
     91c:	80 93 23 3e 	sts	0x3E23, r24
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     924:	21 e2       	ldi	r18, 0x21	; 33
     926:	3e e3       	ldi	r19, 0x3E	; 62
     928:	a0 ec       	ldi	r26, 0xC0	; 192
     92a:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     92c:	cd e2       	ldi	r28, 0x2D	; 45
     92e:	de e3       	ldi	r29, 0x3E	; 62
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     930:	f9 01       	movw	r30, r18
     932:	e8 0f       	add	r30, r24
     934:	f9 1f       	adc	r31, r25
     936:	40 81       	ld	r20, Z
     938:	13 96       	adiw	r26, 0x03	; 3
     93a:	4c 93       	st	X, r20
     93c:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     93e:	12 96       	adiw	r26, 0x02	; 2
     940:	4c 91       	ld	r20, X
     942:	12 97       	sbiw	r26, 0x02	; 2
     944:	44 23       	and	r20, r20
     946:	dc f7       	brge	.-10     	; 0x93e <PortEx_OUTCLR+0x7e>
		SPIBuffer[12] = SPIC.DATA;
     948:	13 96       	adiw	r26, 0x03	; 3
     94a:	4c 91       	ld	r20, X
     94c:	13 97       	sbiw	r26, 0x03	; 3
     94e:	48 83       	st	Y, r20
     950:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	91 05       	cpc	r25, r1
     956:	61 f7       	brne	.-40     	; 0x930 <PortEx_OUTCLR+0x70>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(FALSE);
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	SPIDisable();
     964:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <PortEx_OUTSET>:
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	c8 2f       	mov	r28, r24
     974:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(TRUE);
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
     988:	dd 23       	and	r29, r29
     98a:	81 f0       	breq	.+32     	; 0x9ac <PortEx_OUTSET+0x3e>
     98c:	80 91 ac 21 	lds	r24, 0x21AC
     990:	c8 2b       	or	r28, r24
     992:	c0 93 ac 21 	sts	0x21AC, r28
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
	
	SPIBuffer[0] = PS_WRITE;
     996:	80 e4       	ldi	r24, 0x40	; 64
     998:	80 93 21 3e 	sts	0x3E21, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
     99c:	84 e1       	ldi	r24, 0x14	; 20
     99e:	80 93 22 3e 	sts	0x3E22, r24
		SPIBuffer[2] = bankA_OUT;
     9a2:	80 91 ac 21 	lds	r24, 0x21AC
     9a6:	80 93 23 3e 	sts	0x3E23, r24
     9aa:	0f c0       	rjmp	.+30     	; 0x9ca <PortEx_OUTSET+0x5c>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
     9ac:	80 91 32 3e 	lds	r24, 0x3E32
     9b0:	c8 2b       	or	r28, r24
     9b2:	c0 93 32 3e 	sts	0x3E32, r28
	
	SPIBuffer[0] = PS_WRITE;
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	80 93 21 3e 	sts	0x3E21, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
		SPIBuffer[2] = bankA_OUT;
	} else {
		SPIBuffer[1]=PS_OLATB;
     9bc:	85 e1       	ldi	r24, 0x15	; 21
     9be:	80 93 22 3e 	sts	0x3E22, r24
		SPIBuffer[2] = bankB_OUT; 
     9c2:	80 91 32 3e 	lds	r24, 0x3E32
     9c6:	80 93 23 3e 	sts	0x3E23, r24
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     9ce:	21 e2       	ldi	r18, 0x21	; 33
     9d0:	3e e3       	ldi	r19, 0x3E	; 62
     9d2:	a0 ec       	ldi	r26, 0xC0	; 192
     9d4:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     9d6:	cd e2       	ldi	r28, 0x2D	; 45
     9d8:	de e3       	ldi	r29, 0x3E	; 62
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     9da:	f9 01       	movw	r30, r18
     9dc:	e8 0f       	add	r30, r24
     9de:	f9 1f       	adc	r31, r25
     9e0:	40 81       	ld	r20, Z
     9e2:	13 96       	adiw	r26, 0x03	; 3
     9e4:	4c 93       	st	X, r20
     9e6:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     9e8:	12 96       	adiw	r26, 0x02	; 2
     9ea:	4c 91       	ld	r20, X
     9ec:	12 97       	sbiw	r26, 0x02	; 2
     9ee:	44 23       	and	r20, r20
     9f0:	dc f7       	brge	.-10     	; 0x9e8 <PortEx_OUTSET+0x7a>
		SPIBuffer[12] = SPIC.DATA;
     9f2:	13 96       	adiw	r26, 0x03	; 3
     9f4:	4c 91       	ld	r20, X
     9f6:	13 97       	sbiw	r26, 0x03	; 3
     9f8:	48 83       	st	Y, r20
     9fa:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     9fc:	83 30       	cpi	r24, 0x03	; 3
     9fe:	91 05       	cpc	r25, r1
     a00:	61 f7       	brne	.-40     	; 0x9da <PortEx_OUTSET+0x6c>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(FALSE);
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	SPIDisable();
     a0e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <PortEx_DIRCLR>:
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	c8 2f       	mov	r28, r24
     a1e:	d6 2f       	mov	r29, r22
	
	SPIInit(PS_SPI_MODE);
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(TRUE);
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
     a32:	dd 23       	and	r29, r29
     a34:	89 f0       	breq	.+34     	; 0xa58 <PortEx_DIRCLR+0x40>
     a36:	80 91 30 3e 	lds	r24, 0x3E30
     a3a:	80 95       	com	r24
     a3c:	c8 23       	and	r28, r24
     a3e:	c0 93 30 3e 	sts	0x3E30, r28
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
	
	SPIBuffer[0] = PS_WRITE;
     a42:	80 e4       	ldi	r24, 0x40	; 64
     a44:	80 93 21 3e 	sts	0x3E21, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
     a48:	10 92 22 3e 	sts	0x3E22, r1
		SPIBuffer[2] = ~bankA_DIR; 
     a4c:	80 91 30 3e 	lds	r24, 0x3E30
     a50:	80 95       	com	r24
     a52:	80 93 23 3e 	sts	0x3E23, r24
     a56:	11 c0       	rjmp	.+34     	; 0xa7a <PortEx_DIRCLR+0x62>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
     a58:	80 91 47 3e 	lds	r24, 0x3E47
     a5c:	80 95       	com	r24
     a5e:	c8 23       	and	r28, r24
     a60:	c0 93 47 3e 	sts	0x3E47, r28
	
	SPIBuffer[0] = PS_WRITE;
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	80 93 21 3e 	sts	0x3E21, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
		SPIBuffer[2] = ~bankA_DIR; 
	} else {
		SPIBuffer[1]=PS_IODIRB;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 22 3e 	sts	0x3E22, r24
		SPIBuffer[2] = ~bankB_DIR;
     a70:	80 91 47 3e 	lds	r24, 0x3E47
     a74:	80 95       	com	r24
     a76:	80 93 23 3e 	sts	0x3E23, r24
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     a7e:	21 e2       	ldi	r18, 0x21	; 33
     a80:	3e e3       	ldi	r19, 0x3E	; 62
     a82:	a0 ec       	ldi	r26, 0xC0	; 192
     a84:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     a86:	cd e2       	ldi	r28, 0x2D	; 45
     a88:	de e3       	ldi	r29, 0x3E	; 62
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     a8a:	f9 01       	movw	r30, r18
     a8c:	e8 0f       	add	r30, r24
     a8e:	f9 1f       	adc	r31, r25
     a90:	40 81       	ld	r20, Z
     a92:	13 96       	adiw	r26, 0x03	; 3
     a94:	4c 93       	st	X, r20
     a96:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     a98:	12 96       	adiw	r26, 0x02	; 2
     a9a:	4c 91       	ld	r20, X
     a9c:	12 97       	sbiw	r26, 0x02	; 2
     a9e:	44 23       	and	r20, r20
     aa0:	dc f7       	brge	.-10     	; 0xa98 <PortEx_DIRCLR+0x80>
		SPIBuffer[12] = SPIC.DATA;
     aa2:	13 96       	adiw	r26, 0x03	; 3
     aa4:	4c 91       	ld	r20, X
     aa6:	13 97       	sbiw	r26, 0x03	; 3
     aa8:	48 83       	st	Y, r20
     aaa:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     aac:	83 30       	cpi	r24, 0x03	; 3
     aae:	91 05       	cpc	r25, r1
     ab0:	61 f7       	brne	.-40     	; 0xa8a <PortEx_DIRCLR+0x72>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(FALSE);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	SPIDisable();
     abe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <PortEx_DIRSET>:
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	c8 2f       	mov	r28, r24
     ace:	d6 2f       	mov	r29, r22
	SPIInit(PS_SPI_MODE);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	portExCS(TRUE);
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
     ae2:	dd 23       	and	r29, r29
     ae4:	81 f0       	breq	.+32     	; 0xb06 <PortEx_DIRSET+0x3e>
     ae6:	80 91 30 3e 	lds	r24, 0x3E30
     aea:	c8 2b       	or	r28, r24
     aec:	c0 93 30 3e 	sts	0x3E30, r28
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
	
	SPIBuffer[0] = PS_WRITE;
     af0:	80 e4       	ldi	r24, 0x40	; 64
     af2:	80 93 21 3e 	sts	0x3E21, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
     af6:	10 92 22 3e 	sts	0x3E22, r1
		SPIBuffer[2] = ~bankA_DIR; 
     afa:	80 91 30 3e 	lds	r24, 0x3E30
     afe:	80 95       	com	r24
     b00:	80 93 23 3e 	sts	0x3E23, r24
     b04:	10 c0       	rjmp	.+32     	; 0xb26 <PortEx_DIRSET+0x5e>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
     b06:	80 91 47 3e 	lds	r24, 0x3E47
     b0a:	c8 2b       	or	r28, r24
     b0c:	c0 93 47 3e 	sts	0x3E47, r28
	
	SPIBuffer[0] = PS_WRITE;
     b10:	80 e4       	ldi	r24, 0x40	; 64
     b12:	80 93 21 3e 	sts	0x3E21, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
		SPIBuffer[2] = ~bankA_DIR; 
	} else {
		SPIBuffer[1]=PS_IODIRB;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 22 3e 	sts	0x3E22, r24
		SPIBuffer[2] = ~bankB_DIR;
     b1c:	80 91 47 3e 	lds	r24, 0x3E47
     b20:	80 95       	com	r24
     b22:	80 93 23 3e 	sts	0x3E23, r24
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     b2a:	21 e2       	ldi	r18, 0x21	; 33
     b2c:	3e e3       	ldi	r19, 0x3E	; 62
     b2e:	a0 ec       	ldi	r26, 0xC0	; 192
     b30:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
     b32:	cd e2       	ldi	r28, 0x2D	; 45
     b34:	de e3       	ldi	r29, 0x3E	; 62
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     b36:	f9 01       	movw	r30, r18
     b38:	e8 0f       	add	r30, r24
     b3a:	f9 1f       	adc	r31, r25
     b3c:	40 81       	ld	r20, Z
     b3e:	13 96       	adiw	r26, 0x03	; 3
     b40:	4c 93       	st	X, r20
     b42:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
     b44:	12 96       	adiw	r26, 0x02	; 2
     b46:	4c 91       	ld	r20, X
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	44 23       	and	r20, r20
     b4c:	dc f7       	brge	.-10     	; 0xb44 <PortEx_DIRSET+0x7c>
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
     b4e:	13 96       	adiw	r26, 0x03	; 3
     b50:	4c 91       	ld	r20, X
     b52:	13 97       	sbiw	r26, 0x03	; 3
     b54:	48 83       	st	Y, r20
     b56:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     b58:	83 30       	cpi	r24, 0x03	; 3
     b5a:	91 05       	cpc	r25, r1
     b5c:	61 f7       	brne	.-40     	; 0xb36 <PortEx_DIRSET+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
	}

	portExCS(FALSE);
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portExCS>
	SPICS(FALSE);
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
     b6a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>


}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <ADCPower>:
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
	else PORTC.OUTSET = PIN1_bm;
}

void ADCPower(uint8_t on) {
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
	
	if (on && !ADC_POWER_ON) {
     b7c:	88 23       	and	r24, r24
     b7e:	09 f4       	brne	.+2      	; 0xb82 <ADCPower+0xe>
     b80:	4e c0       	rjmp	.+156    	; 0xc1e <ADCPower+0xaa>
     b82:	80 91 33 3e 	lds	r24, 0x3E33
     b86:	88 23       	and	r24, r24
     b88:	09 f0       	breq	.+2      	; 0xb8c <ADCPower+0x18>
     b8a:	81 c0       	rjmp	.+258    	; 0xc8e <ADCPower+0x11a>
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
     b8c:	00 e0       	ldi	r16, 0x00	; 0
     b8e:	16 e0       	ldi	r17, 0x06	; 6
     b90:	8e ed       	ldi	r24, 0xDE	; 222
     b92:	d8 01       	movw	r26, r16
     b94:	11 96       	adiw	r26, 0x01	; 1
     b96:	8c 93       	st	X, r24
		PORTB.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     b98:	c0 e2       	ldi	r28, 0x20	; 32
     b9a:	d6 e0       	ldi	r29, 0x06	; 6
     b9c:	4e e0       	ldi	r20, 0x0E	; 14
     b9e:	49 83       	std	Y+1, r20	; 0x01
		PORTC.DIRSET = PIN0_bm | PIN1_bm;// VDCA and VDC-2 and MUX-SYNC1
     ba0:	e0 e4       	ldi	r30, 0x40	; 64
     ba2:	f6 e0       	ldi	r31, 0x06	; 6
     ba4:	63 e0       	ldi	r22, 0x03	; 3
     ba6:	61 83       	std	Z+1, r22	; 0x01
		PORTE.DIRSET = PIN4_bm; // MUX-SYNC2
     ba8:	80 e8       	ldi	r24, 0x80	; 128
     baa:	96 e0       	ldi	r25, 0x06	; 6
     bac:	50 e1       	ldi	r21, 0x10	; 16
     bae:	dc 01       	movw	r26, r24
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	5c 93       	st	X, r21
		PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; // DAC LDAC and CS
     bb4:	20 ea       	ldi	r18, 0xA0	; 160
     bb6:	36 e0       	ldi	r19, 0x06	; 6
     bb8:	d9 01       	movw	r26, r18
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	4c 93       	st	X, r20

		// high signal to write protect
		PORTA.OUTSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm; // portEx-CS
     bbe:	7e e9       	ldi	r23, 0x9E	; 158
     bc0:	d8 01       	movw	r26, r16
     bc2:	15 96       	adiw	r26, 0x05	; 5
     bc4:	7c 93       	st	X, r23
		PORTB.OUTSET = PIN3_bm; // FRAM-CS
     bc6:	78 e0       	ldi	r23, 0x08	; 8
     bc8:	7d 83       	std	Y+5, r23	; 0x05
		PORTC.OUTSET = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     bca:	65 83       	std	Z+5, r22	; 0x05
		PORTE.OUTSET = PIN4_bm; // MUX-SYNC2
     bcc:	ec 01       	movw	r28, r24
     bce:	5d 83       	std	Y+5, r21	; 0x05
		PORTF.OUTSET = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     bd0:	d9 01       	movw	r26, r18
     bd2:	15 96       	adiw	r26, 0x05	; 5
     bd4:	4c 93       	st	X, r20
		channelStatus = 0x00; // POR to zeros
     bd6:	10 92 31 3e 	sts	0x3E31, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	93 ec       	ldi	r25, 0xC3	; 195
     bde:	a9 e0       	ldi	r26, 0x09	; 9
     be0:	81 50       	subi	r24, 0x01	; 1
     be2:	90 40       	sbci	r25, 0x00	; 0
     be4:	a0 40       	sbci	r26, 0x00	; 0
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <ADCPower+0x6c>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <ADCPower+0x76>
     bea:	00 00       	nop
		_delay_ms(100);

		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     bec:	80 e4       	ldi	r24, 0x40	; 64
     bee:	82 83       	std	Z+2, r24	; 0x02
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     bf0:	10 92 32 3e 	sts	0x3E32, r1
     bf4:	10 92 47 3e 	sts	0x3E47, r1
     bf8:	10 92 ac 21 	sts	0x21AC, r1
     bfc:	10 92 30 3e 	sts	0x3E30, r1
		PortEx_DIRSET(0xFF, PS_BANKA);
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
		PortEx_OUTSET(0xFF, PS_BANKA);  //write protect IN-AMP 1 thru 8
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
		//setPortEx(0xFF, PS_BANKA);
		set_filter(0xFF);  // set filters initially to ensure data out pulled high
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
		ADC_POWER_ON = TRUE;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 33 3e 	sts	0x3E33, r24
     c1c:	38 c0       	rjmp	.+112    	; 0xc8e <ADCPower+0x11a>

	} else if(!on && ADC_POWER_ON) {
     c1e:	80 91 33 3e 	lds	r24, 0x3E33
     c22:	88 23       	and	r24, r24
     c24:	a1 f1       	breq	.+104    	; 0xc8e <ADCPower+0x11a>
		// low signal for low power
		PORTA.OUTCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and A0
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	16 e0       	ldi	r17, 0x06	; 6
     c2a:	7e ed       	ldi	r23, 0xDE	; 222
     c2c:	d8 01       	movw	r26, r16
     c2e:	16 96       	adiw	r26, 0x06	; 6
     c30:	7c 93       	st	X, r23
		PORTB.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     c32:	a0 e2       	ldi	r26, 0x20	; 32
     c34:	b6 e0       	ldi	r27, 0x06	; 6
     c36:	4e e0       	ldi	r20, 0x0E	; 14
     c38:	16 96       	adiw	r26, 0x06	; 6
     c3a:	4c 93       	st	X, r20
     c3c:	16 97       	sbiw	r26, 0x06	; 6
		PORTC.OUTCLR = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     c3e:	20 e4       	ldi	r18, 0x40	; 64
     c40:	36 e0       	ldi	r19, 0x06	; 6
     c42:	63 e0       	ldi	r22, 0x03	; 3
     c44:	e9 01       	movw	r28, r18
     c46:	6e 83       	std	Y+6, r22	; 0x06
		PORTE.OUTCLR = PIN4_bm; // MUX-SYNC2
     c48:	c0 e8       	ldi	r28, 0x80	; 128
     c4a:	d6 e0       	ldi	r29, 0x06	; 6
     c4c:	50 e1       	ldi	r21, 0x10	; 16
     c4e:	5e 83       	std	Y+6, r21	; 0x06
		PORTF.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     c50:	80 ea       	ldi	r24, 0xA0	; 160
     c52:	96 e0       	ldi	r25, 0x06	; 6
     c54:	fc 01       	movw	r30, r24
     c56:	46 83       	std	Z+6, r20	; 0x06


		PORTA.DIRCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm | PIN6_bm;
     c58:	f8 01       	movw	r30, r16
     c5a:	72 83       	std	Z+2, r23	; 0x02
		PORTB.DIRCLR = PIN1_bm | PIN2_bm| PIN3_bm;
     c5c:	12 96       	adiw	r26, 0x02	; 2
     c5e:	4c 93       	st	X, r20
		PORTC.DIRCLR = PIN0_bm | PIN1_bm;
     c60:	d9 01       	movw	r26, r18
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	6c 93       	st	X, r22
     c66:	12 97       	sbiw	r26, 0x02	; 2
		PORTE.DIRCLR = PIN4_bm;
     c68:	5a 83       	std	Y+2, r21	; 0x02
		PORTF.DIRCLR = PIN1_bm | PIN2_bm | PIN3_bm;
     c6a:	ec 01       	movw	r28, r24
     c6c:	4a 83       	std	Y+2, r20	; 0x02
		
		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     c6e:	80 e4       	ldi	r24, 0x40	; 64
     c70:	12 96       	adiw	r26, 0x02	; 2
     c72:	8c 93       	st	X, r24
     c74:	12 97       	sbiw	r26, 0x02	; 2
		
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     c76:	10 92 32 3e 	sts	0x3E32, r1
     c7a:	10 92 47 3e 	sts	0x3E47, r1
     c7e:	10 92 ac 21 	sts	0x21AC, r1
     c82:	10 92 30 3e 	sts	0x3E30, r1
		channelStatus = 0x00;
     c86:	10 92 31 3e 	sts	0x3E31, r1
		ADC_POWER_ON = FALSE;
     c8a:	10 92 33 3e 	sts	0x3E33, r1
	}
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <DeciToString>:
	PORTC.OUTCLR = PIN4_bm;
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;

}

void DeciToString(int32_t* DecimalArray, uint32_t length, char* ReturnString){
     c98:	2f 92       	push	r2
     c9a:	3f 92       	push	r3
     c9c:	4f 92       	push	r4
     c9e:	5f 92       	push	r5
     ca0:	6f 92       	push	r6
     ca2:	7f 92       	push	r7
     ca4:	8f 92       	push	r8
     ca6:	9f 92       	push	r9
     ca8:	af 92       	push	r10
     caa:	bf 92       	push	r11
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	64 97       	sbiw	r28, 0x14	; 20
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	2a 01       	movw	r4, r20
     cc8:	3b 01       	movw	r6, r22
     cca:	89 01       	movw	r16, r18
	char b[20];
	//int written;
	uint32_t i;
	ReturnString[0] = 0;
     ccc:	f9 01       	movw	r30, r18
     cce:	10 82       	st	Z, r1
	for(i=0;i<length;i++){
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <DeciToString+0x44>
     cda:	4d c0       	rjmp	.+154    	; 0xd76 <DeciToString+0xde>
     cdc:	88 2e       	mov	r8, r24
     cde:	99 2e       	mov	r9, r25
     ce0:	cc 24       	eor	r12, r12
     ce2:	dd 24       	eor	r13, r13
     ce4:	76 01       	movw	r14, r12
		//written = sprintf(b,"%ld",DecimalArray[i]);
		sprintf(b,"%ld",DecimalArray[i]);
     ce6:	5e 01       	movw	r10, r28
     ce8:	08 94       	sec
     cea:	a1 1c       	adc	r10, r1
     cec:	b1 1c       	adc	r11, r1
     cee:	0f 2e       	mov	r0, r31
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	2f 2e       	mov	r2, r31
     cf4:	f0 e2       	ldi	r31, 0x20	; 32
     cf6:	3f 2e       	mov	r3, r31
     cf8:	f0 2d       	mov	r31, r0
     cfa:	f4 01       	movw	r30, r8
     cfc:	81 91       	ld	r24, Z+
     cfe:	91 91       	ld	r25, Z+
     d00:	a1 91       	ld	r26, Z+
     d02:	b1 91       	ld	r27, Z+
     d04:	4f 01       	movw	r8, r30
     d06:	2d b7       	in	r18, 0x3d	; 61
     d08:	3e b7       	in	r19, 0x3e	; 62
     d0a:	28 50       	subi	r18, 0x08	; 8
     d0c:	30 40       	sbci	r19, 0x00	; 0
     d0e:	2d bf       	out	0x3d, r18	; 61
     d10:	3e bf       	out	0x3e, r19	; 62
     d12:	2f 5f       	subi	r18, 0xFF	; 255
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	ed b7       	in	r30, 0x3d	; 61
     d18:	fe b7       	in	r31, 0x3e	; 62
     d1a:	a1 82       	std	Z+1, r10	; 0x01
     d1c:	b2 82       	std	Z+2, r11	; 0x02
     d1e:	f9 01       	movw	r30, r18
     d20:	22 82       	std	Z+2, r2	; 0x02
     d22:	33 82       	std	Z+3, r3	; 0x03
     d24:	84 83       	std	Z+4, r24	; 0x04
     d26:	95 83       	std	Z+5, r25	; 0x05
     d28:	a6 83       	std	Z+6, r26	; 0x06
     d2a:	b7 83       	std	Z+7, r27	; 0x07
     d2c:	0e 94 31 3a 	call	0x7462	; 0x7462 <sprintf>
		strcat(ReturnString,b);
     d30:	2d b7       	in	r18, 0x3d	; 61
     d32:	3e b7       	in	r19, 0x3e	; 62
     d34:	28 5f       	subi	r18, 0xF8	; 248
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	2d bf       	out	0x3d, r18	; 61
     d3a:	3e bf       	out	0x3e, r19	; 62
     d3c:	c8 01       	movw	r24, r16
     d3e:	b5 01       	movw	r22, r10
     d40:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <strcat>
		//add a space between each value
		strcat(ReturnString,"\n");
     d44:	a0 2f       	mov	r26, r16
     d46:	b1 2f       	mov	r27, r17
     d48:	fd 01       	movw	r30, r26
     d4a:	01 90       	ld	r0, Z+
     d4c:	00 20       	and	r0, r0
     d4e:	e9 f7       	brne	.-6      	; 0xd4a <DeciToString+0xb2>
     d50:	31 97       	sbiw	r30, 0x01	; 1
     d52:	ea 1b       	sub	r30, r26
     d54:	fb 0b       	sbc	r31, r27
     d56:	e0 0f       	add	r30, r16
     d58:	f1 1f       	adc	r31, r17
     d5a:	8a e0       	ldi	r24, 0x0A	; 10
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	80 83       	st	Z, r24
     d60:	91 83       	std	Z+1, r25	; 0x01
void DeciToString(int32_t* DecimalArray, uint32_t length, char* ReturnString){
	char b[20];
	//int written;
	uint32_t i;
	ReturnString[0] = 0;
	for(i=0;i<length;i++){
     d62:	08 94       	sec
     d64:	c1 1c       	adc	r12, r1
     d66:	d1 1c       	adc	r13, r1
     d68:	e1 1c       	adc	r14, r1
     d6a:	f1 1c       	adc	r15, r1
     d6c:	c4 14       	cp	r12, r4
     d6e:	d5 04       	cpc	r13, r5
     d70:	e6 04       	cpc	r14, r6
     d72:	f7 04       	cpc	r15, r7
     d74:	11 f6       	brne	.-124    	; 0xcfa <DeciToString+0x62>
		sprintf(b,"%ld",DecimalArray[i]);
		strcat(ReturnString,b);
		//add a space between each value
		strcat(ReturnString,"\n");
	}
}
     d76:	64 96       	adiw	r28, 0x14	; 20
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	9f 90       	pop	r9
     d92:	8f 90       	pop	r8
     d94:	7f 90       	pop	r7
     d96:	6f 90       	pop	r6
     d98:	5f 90       	pop	r5
     d9a:	4f 90       	pop	r4
     d9c:	3f 90       	pop	r3
     d9e:	2f 90       	pop	r2
     da0:	08 95       	ret

00000da2 <SPI_write>:

//the following command writes/reads a byte via spi
uint8_t SPI_write(uint8_t byteToSend){
	uint8_t data;
	SPIC.DATA = byteToSend;
     da2:	e0 ec       	ldi	r30, 0xC0	; 192
     da4:	f8 e0       	ldi	r31, 0x08	; 8
     da6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	88 23       	and	r24, r24
     dac:	ec f7       	brge	.-6      	; 0xda8 <SPI_write+0x6>
	data = SPIC.DATA; //read SPI data register to reset status flag
     dae:	e0 ec       	ldi	r30, 0xC0	; 192
     db0:	f8 e0       	ldi	r31, 0x08	; 8
     db2:	83 81       	ldd	r24, Z+3	; 0x03
	return data;
     db4:	08 95       	ret

00000db6 <main>:
 */ 
#include "E-000001-000009_firmware_rev_1_0.h"

volatile uint8_t TimedOut = 0;

int main(){
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	6e 97       	sbiw	r28, 0x1e	; 30
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	de bf       	out	0x3e, r29	; 62
	
	uint8_t length;
	uint8_t gain = GAIN_1_gc;
	uint16_t ack = 0;
     dc4:	19 82       	std	Y+1, r1	; 0x01
     dc6:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t RawGain;
	uint16_t freq = 2000;
	volatile uint32_t samples = 0;
     dc8:	1c 82       	std	Y+4, r1	; 0x04
     dca:	1d 82       	std	Y+5, r1	; 0x05
     dcc:	1e 82       	std	Y+6, r1	; 0x06
     dce:	1f 82       	std	Y+7, r1	; 0x07
	DataAvailable = 0;
     dd0:	10 92 48 3e 	sts	0x3E48, r1
	ADC_Sampling_Finished = 1;
     dd4:	01 e0       	ldi	r16, 0x01	; 1
     dd6:	00 93 a7 50 	sts	0x50A7, r16
	uint8_t RadioMessageBuffer[20];
	unsigned char ofile[] = {'o','u','t','p','u','t'};
	set_32MHz();
     dda:	0e 94 3c 03 	call	0x678	; 0x678 <set_32MHz>
	chb_init();
     dde:	0e 94 fe 19 	call	0x33fc	; 0x33fc <chb_init>
	chb_set_channel(1);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <chb_set_channel>
	chb_set_short_addr(0x0001);
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 21 1c 	call	0x3842	; 0x3842 <chb_set_short_addr>
	pcb_t* pcb = chb_get_pcb();
     df0:	0e 94 1f 1a 	call	0x343e	; 0x343e <chb_get_pcb>
     df4:	3c 01       	movw	r6, r24
	//SD_init();
	//getBootSectorData();
	
	//setup timeout timer
	//approx 2 seconds to wait (using largest prescaler of 1024)
	TCE0.PER = 4000;
     df6:	e0 e0       	ldi	r30, 0x00	; 0
     df8:	fa e0       	ldi	r31, 0x0A	; 10
     dfa:	80 ea       	ldi	r24, 0xA0	; 160
     dfc:	9f e0       	ldi	r25, 0x0F	; 15
     dfe:	86 a3       	lds	r24, 0x56
     e00:	97 a3       	lds	r25, 0x57
	TCE0.CTRLFSET = 0x08;
     e02:	88 e0       	ldi	r24, 0x08	; 8
     e04:	81 87       	std	Z+9, r24	; 0x09
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     e06:	06 83       	std	Z+6, r16	; 0x06
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     e08:	e0 ea       	ldi	r30, 0xA0	; 160
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	82 83       	std	Z+2, r24	; 0x02
	sei();
     e12:	78 94       	sei
	
	uint8_t length;
	uint8_t gain = GAIN_1_gc;
	uint16_t ack = 0;
	volatile uint8_t RawGain;
	uint16_t freq = 2000;
     e14:	0f 2e       	mov	r0, r31
     e16:	f0 ed       	ldi	r31, 0xD0	; 208
     e18:	2f 2e       	mov	r2, r31
     e1a:	f7 e0       	ldi	r31, 0x07	; 7
     e1c:	3f 2e       	mov	r3, r31
     e1e:	f0 2d       	mov	r31, r0
volatile uint8_t TimedOut = 0;

int main(){
	
	uint8_t length;
	uint8_t gain = GAIN_1_gc;
     e20:	1e 8e       	std	Y+30, r1	; 0x1e
									while(chb_write(0x0000,FRAMReadBuffer,100) != CHB_SUCCESS);
									i += 100;
								}
								else{
									readFRAM(samples*4 - i,(FRAMAddress-(samples*4))+i);
									while(chb_write(0x0000,FRAMReadBuffer,samples*4 - i) != CHB_SUCCESS);
     e22:	8d ea       	ldi	r24, 0xAD	; 173
     e24:	91 e2       	ldi	r25, 0x21	; 33
     e26:	58 2e       	mov	r5, r24
     e28:	49 2e       	mov	r4, r25
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	sei();
	
	while(1){
		if(pcb->data_rcv){
     e2a:	d3 01       	movw	r26, r6
     e2c:	13 96       	adiw	r26, 0x03	; 3
     e2e:	8c 91       	ld	r24, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	88 23       	and	r24, r24
     e34:	d1 f3       	breq	.-12     	; 0xe2a <main+0x74>
			//read the data
			length = chb_read((chb_rx_data_t*)RadioMessageBuffer);
     e36:	ce 01       	movw	r24, r28
     e38:	08 96       	adiw	r24, 0x08	; 8
     e3a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <chb_read>
			//length should be >1 for setting gain/freq commands: the value is likely sent in a separate message
				switch ( RadioMessageBuffer[0])
     e3e:	88 85       	ldd	r24, Y+8	; 0x08
     e40:	82 35       	cpi	r24, 0x52	; 82
     e42:	71 f0       	breq	.+28     	; 0xe60 <main+0xaa>
     e44:	83 35       	cpi	r24, 0x53	; 83
     e46:	30 f4       	brcc	.+12     	; 0xe54 <main+0x9e>
     e48:	86 34       	cpi	r24, 0x46	; 70
     e4a:	09 f4       	brne	.+2      	; 0xe4e <main+0x98>
     e4c:	89 c0       	rjmp	.+274    	; 0xf60 <main+0x1aa>
     e4e:	87 34       	cpi	r24, 0x47	; 71
     e50:	61 f7       	brne	.-40     	; 0xe2a <main+0x74>
     e52:	4a c0       	rjmp	.+148    	; 0xee8 <main+0x132>
     e54:	83 35       	cpi	r24, 0x53	; 83
     e56:	09 f4       	brne	.+2      	; 0xe5a <main+0xa4>
     e58:	91 c0       	rjmp	.+290    	; 0xf7c <main+0x1c6>
     e5a:	84 35       	cpi	r24, 0x54	; 84
     e5c:	31 f7       	brne	.-52     	; 0xe2a <main+0x74>
     e5e:	a0 c0       	rjmp	.+320    	; 0xfa0 <main+0x1ea>
				{
				case 'R':
					//collect data if the ADC is not collecting any data right now
					if(ADC_Sampling_Finished){
     e60:	80 91 a7 50 	lds	r24, 0x50A7
     e64:	88 23       	and	r24, r24
     e66:	a1 f1       	breq	.+104    	; 0xed0 <main+0x11a>
						//CO_collectADC(ADC_CH_1_gc, gain, freq, 10000, (int32_t*)FRAMReadBuffer, FR_READ_BUFFER_SIZE/4, TRUE);
						CO_collectSeismic1Channel(ADC_CH_8_gc, gain, freq, 6, FALSE, 1, 2, 3, 4, 10000,(int32_t*)FRAMReadBuffer, FR_READ_BUFFER_SIZE/4, TRUE);
     e68:	ed b7       	in	r30, 0x3d	; 61
     e6a:	fe b7       	in	r31, 0x3e	; 62
     e6c:	37 97       	sbiw	r30, 0x07	; 7
     e6e:	ed bf       	out	0x3d, r30	; 61
     e70:	fe bf       	out	0x3e, r31	; 62
     e72:	31 96       	adiw	r30, 0x01	; 1
     e74:	80 e1       	ldi	r24, 0x10	; 16
     e76:	97 e2       	ldi	r25, 0x27	; 39
     e78:	ad b7       	in	r26, 0x3d	; 61
     e7a:	be b7       	in	r27, 0x3e	; 62
     e7c:	11 96       	adiw	r26, 0x01	; 1
     e7e:	8d 93       	st	X+, r24
     e80:	9c 93       	st	X, r25
     e82:	12 97       	sbiw	r26, 0x02	; 2
     e84:	ad ea       	ldi	r26, 0xAD	; 173
     e86:	b1 e2       	ldi	r27, 0x21	; 33
     e88:	a2 83       	std	Z+2, r26	; 0x02
     e8a:	b3 83       	std	Z+3, r27	; 0x03
     e8c:	8c e1       	ldi	r24, 0x1C	; 28
     e8e:	97 e0       	ldi	r25, 0x07	; 7
     e90:	84 83       	std	Z+4, r24	; 0x04
     e92:	95 83       	std	Z+5, r25	; 0x05
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	86 83       	std	Z+6, r24	; 0x06
     e98:	87 e0       	ldi	r24, 0x07	; 7
     e9a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e9c:	a1 01       	movw	r20, r2
     e9e:	26 e0       	ldi	r18, 0x06	; 6
     ea0:	00 e0       	ldi	r16, 0x00	; 0
     ea2:	ee 24       	eor	r14, r14
     ea4:	ff 24       	eor	r15, r15
     ea6:	e3 94       	inc	r14
     ea8:	cc 24       	eor	r12, r12
     eaa:	dd 24       	eor	r13, r13
     eac:	68 94       	set
     eae:	c1 f8       	bld	r12, 1
     eb0:	0f 2e       	mov	r0, r31
     eb2:	f3 e0       	ldi	r31, 0x03	; 3
     eb4:	af 2e       	mov	r10, r31
     eb6:	bb 24       	eor	r11, r11
     eb8:	f0 2d       	mov	r31, r0
     eba:	88 24       	eor	r8, r8
     ebc:	99 24       	eor	r9, r9
     ebe:	68 94       	set
     ec0:	82 f8       	bld	r8, 2
     ec2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <CO_collectSeismic1Channel>
     ec6:	ad b7       	in	r26, 0x3d	; 61
     ec8:	be b7       	in	r27, 0x3e	; 62
     eca:	17 96       	adiw	r26, 0x07	; 7
     ecc:	ad bf       	out	0x3d, r26	; 61
     ece:	be bf       	out	0x3e, r27	; 62
					}
					//send acknowledgment
					chb_write(0x0000,(uint8_t*)(&ack),2);						
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	be 01       	movw	r22, r28
     ed6:	6f 5f       	subi	r22, 0xFF	; 255
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	22 e0       	ldi	r18, 0x02	; 2
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
					break;
     ee6:	a1 cf       	rjmp	.-190    	; 0xe2a <main+0x74>
				case 'G':
					//while(!pcb->data_rcv);
					//length = chb_read((chb_rx_data_t*)RadioMessageBuffer);
					//set gain to what is specified
					RawGain = (uint8_t)(*(int32_t*)(RadioMessageBuffer+1));
     ee8:	89 85       	ldd	r24, Y+9	; 0x09
     eea:	8b 83       	std	Y+3, r24	; 0x03
					switch(RawGain){
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	88 30       	cpi	r24, 0x08	; 8
     ef0:	d9 f0       	breq	.+54     	; 0xf28 <main+0x172>
     ef2:	89 30       	cpi	r24, 0x09	; 9
     ef4:	38 f4       	brcc	.+14     	; 0xf04 <main+0x14e>
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	89 f0       	breq	.+34     	; 0xf1c <main+0x166>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	91 f0       	breq	.+36     	; 0xf22 <main+0x16c>
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	19 f5       	brne	.+70     	; 0xf48 <main+0x192>
     f02:	21 c0       	rjmp	.+66     	; 0xf46 <main+0x190>
     f04:	80 32       	cpi	r24, 0x20	; 32
     f06:	b1 f0       	breq	.+44     	; 0xf34 <main+0x17e>
     f08:	81 32       	cpi	r24, 0x21	; 33
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <main+0x15c>
     f0c:	80 31       	cpi	r24, 0x10	; 16
     f0e:	e1 f4       	brne	.+56     	; 0xf48 <main+0x192>
     f10:	0e c0       	rjmp	.+28     	; 0xf2e <main+0x178>
     f12:	80 34       	cpi	r24, 0x40	; 64
     f14:	91 f0       	breq	.+36     	; 0xf3a <main+0x184>
     f16:	80 38       	cpi	r24, 0x80	; 128
     f18:	b9 f4       	brne	.+46     	; 0xf48 <main+0x192>
     f1a:	12 c0       	rjmp	.+36     	; 0xf40 <main+0x18a>
						case 1:
							gain = GAIN_1_gc;
							break;
						case 2:
							gain = GAIN_2_gc;
     f1c:	b1 e0       	ldi	r27, 0x01	; 1
     f1e:	be 8f       	std	Y+30, r27	; 0x1e
							break;
     f20:	13 c0       	rjmp	.+38     	; 0xf48 <main+0x192>
						case 4:
							gain = GAIN_4_gc;
     f22:	e2 e0       	ldi	r30, 0x02	; 2
     f24:	ee 8f       	std	Y+30, r30	; 0x1e
							break;
     f26:	10 c0       	rjmp	.+32     	; 0xf48 <main+0x192>
						case 8:
							gain = GAIN_8_gc;
     f28:	f3 e0       	ldi	r31, 0x03	; 3
     f2a:	fe 8f       	std	Y+30, r31	; 0x1e
							break;
     f2c:	0d c0       	rjmp	.+26     	; 0xf48 <main+0x192>
						case 16:
							gain = GAIN_16_gc;
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	8e 8f       	std	Y+30, r24	; 0x1e
							break;
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <main+0x192>
						case 32:
							gain = GAIN_32_gc;
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	9e 8f       	std	Y+30, r25	; 0x1e
							break;
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <main+0x192>
						case 64:
							gain = GAIN_64_gc;
     f3a:	a6 e0       	ldi	r26, 0x06	; 6
     f3c:	ae 8f       	std	Y+30, r26	; 0x1e
							break;
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <main+0x192>
						case 128:
							gain = GAIN_128_gc;
     f40:	b7 e0       	ldi	r27, 0x07	; 7
     f42:	be 8f       	std	Y+30, r27	; 0x1e
							break;
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <main+0x192>
					//length = chb_read((chb_rx_data_t*)RadioMessageBuffer);
					//set gain to what is specified
					RawGain = (uint8_t)(*(int32_t*)(RadioMessageBuffer+1));
					switch(RawGain){
						case 1:
							gain = GAIN_1_gc;
     f46:	1e 8e       	std	Y+30, r1	; 0x1e
						default:
							//chb_write(0x0000,(uint8_t*)"invalid gain",strlen("invalid gain"));
							break;
					}
					//send acknowledgment
					chb_write(0x0000,(uint8_t*)(&ack),2);					
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	be 01       	movw	r22, r28
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	22 e0       	ldi	r18, 0x02	; 2
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
					break;
     f5e:	65 cf       	rjmp	.-310    	; 0xe2a <main+0x74>
				case 'F':

					//while(!pcb->data_rcv);
					//length = chb_read((chb_rx_data_t*)RadioMessageBuffer);
					//set sampling frequency to what is specified
					freq = (uint16_t)(*(int32_t*)(RadioMessageBuffer+1));
     f60:	29 84       	ldd	r2, Y+9	; 0x09
     f62:	3a 84       	ldd	r3, Y+10	; 0x0a
					//send acknowledgment
					chb_write(0x0000,(uint8_t*)(&ack),2);
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	be 01       	movw	r22, r28
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	22 e0       	ldi	r18, 0x02	; 2
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
					break;
     f7a:	57 cf       	rjmp	.-338    	; 0xe2a <main+0x74>
				case 'S':
					//stop the ADC if it is not already
					if(!ADC_Sampling_Finished){
     f7c:	80 91 a7 50 	lds	r24, 0x50A7
     f80:	88 23       	and	r24, r24
     f82:	11 f4       	brne	.+4      	; 0xf88 <main+0x1d2>
						ADC_Stop_Sampling();
     f84:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_Stop_Sampling>
					}
					//otherwise, the ADC has finished sampling on its own and the data is ready to be transmitted
					//send acknowledgment
					chb_write(0x0000,(uint8_t*)(&ack),2);
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	be 01       	movw	r22, r28
     f8e:	6f 5f       	subi	r22, 0xFF	; 255
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	22 e0       	ldi	r18, 0x02	; 2
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
					break;
     f9e:	45 cf       	rjmp	.-374    	; 0xe2a <main+0x74>
				case 'T':
					if(ADC_Sampling_Finished && DataAvailable){
     fa0:	80 91 a7 50 	lds	r24, 0x50A7
     fa4:	88 23       	and	r24, r24
     fa6:	09 f4       	brne	.+2      	; 0xfaa <main+0x1f4>
     fa8:	43 c1       	rjmp	.+646    	; 0x1230 <main+0x47a>
     faa:	80 91 48 3e 	lds	r24, 0x3E48
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <main+0x1fe>
     fb2:	3e c1       	rjmp	.+636    	; 0x1230 <main+0x47a>
						//get number of data points collected
						samples = ADC_Get_Num_Samples();
     fb4:	0e 94 cf 0c 	call	0x199e	; 0x199e <ADC_Get_Num_Samples>
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	8c 83       	std	Y+4, r24	; 0x04
     fbe:	9d 83       	std	Y+5, r25	; 0x05
     fc0:	ae 83       	std	Y+6, r26	; 0x06
     fc2:	bf 83       	std	Y+7, r27	; 0x07
						if(samples > 0){	
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	9d 81       	ldd	r25, Y+5	; 0x05
     fc8:	ae 81       	ldd	r26, Y+6	; 0x06
     fca:	bf 81       	ldd	r27, Y+7	; 0x07
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	a1 05       	cpc	r26, r1
     fd0:	b1 05       	cpc	r27, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <main+0x220>
     fd4:	20 c1       	rjmp	.+576    	; 0x1216 <main+0x460>
							uint16_t NumMessages = ((samples*4)/CHB_MAX_PAYLOAD);
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	ae 81       	ldd	r26, Y+6	; 0x06
     fdc:	bf 81       	ldd	r27, Y+7	; 0x07
     fde:	bc 01       	movw	r22, r24
     fe0:	cd 01       	movw	r24, r26
     fe2:	66 0f       	add	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	88 1f       	adc	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	66 0f       	add	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0f 2e       	mov	r0, r31
     ff4:	f4 e6       	ldi	r31, 0x64	; 100
     ff6:	cf 2e       	mov	r12, r31
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	df 2e       	mov	r13, r31
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ef 2e       	mov	r14, r31
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	ff 2e       	mov	r15, r31
    1004:	f0 2d       	mov	r31, r0
    1006:	a7 01       	movw	r20, r14
    1008:	96 01       	movw	r18, r12
    100a:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    100e:	89 01       	movw	r16, r18
    1010:	9a 01       	movw	r18, r20
    1012:	58 01       	movw	r10, r16
    1014:	0c 8f       	std	Y+28, r16	; 0x1c
    1016:	1d 8f       	std	Y+29, r17	; 0x1d
							if ((samples*4)%CHB_MAX_PAYLOAD > 0) NumMessages++;
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	ae 81       	ldd	r26, Y+6	; 0x06
    101e:	bf 81       	ldd	r27, Y+7	; 0x07
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	66 0f       	add	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	66 0f       	add	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	88 1f       	adc	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	a7 01       	movw	r20, r14
    1036:	96 01       	movw	r18, r12
    1038:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	a1 05       	cpc	r26, r1
    1044:	b1 05       	cpc	r27, r1
    1046:	21 f0       	breq	.+8      	; 0x1050 <main+0x29a>
    1048:	c5 01       	movw	r24, r10
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	8c 8f       	std	Y+28, r24	; 0x1c
    104e:	9d 8f       	std	Y+29, r25	; 0x1d
							//start timeout timer
							TCE0.CTRLA = 0x07;
    1050:	87 e0       	ldi	r24, 0x07	; 7
    1052:	e0 e0       	ldi	r30, 0x00	; 0
    1054:	fa e0       	ldi	r31, 0x0A	; 10
    1056:	80 83       	st	Z, r24
							TimedOut = 0;
    1058:	10 92 0e 21 	sts	0x210E, r1
							//send the number of messages the base station should expect after this message
							while(chb_write(0x0000,(uint8_t*)(&NumMessages),2) != CHB_SUCCESS){
    105c:	04 c0       	rjmp	.+8      	; 0x1066 <main+0x2b0>
								if(TimedOut) break;
    105e:	80 91 0e 21 	lds	r24, 0x210E
    1062:	88 23       	and	r24, r24
    1064:	69 f4       	brne	.+26     	; 0x1080 <main+0x2ca>
							if ((samples*4)%CHB_MAX_PAYLOAD > 0) NumMessages++;
							//start timeout timer
							TCE0.CTRLA = 0x07;
							TimedOut = 0;
							//send the number of messages the base station should expect after this message
							while(chb_write(0x0000,(uint8_t*)(&NumMessages),2) != CHB_SUCCESS){
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	be 01       	movw	r22, r28
    106c:	64 5e       	subi	r22, 0xE4	; 228
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	22 e0       	ldi	r18, 0x02	; 2
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
    107c:	88 23       	and	r24, r24
    107e:	79 f7       	brne	.-34     	; 0x105e <main+0x2a8>
								if(TimedOut) break;
							}
							if(TimedOut){
    1080:	80 91 0e 21 	lds	r24, 0x210E
    1084:	88 23       	and	r24, r24
    1086:	31 f0       	breq	.+12     	; 0x1094 <main+0x2de>
								//stop timeout counter and go back to waiting for command
								TimedOut = 0;
    1088:	10 92 0e 21 	sts	0x210E, r1
								TCE0.CTRLA = 0;
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	ba e0       	ldi	r27, 0x0A	; 10
    1090:	1c 92       	st	X, r1
								break;
    1092:	cb ce       	rjmp	.-618    	; 0xe2a <main+0x74>
							}
							//reset timeout timer
							TimedOut = 0;
    1094:	10 92 0e 21 	sts	0x210E, r1
							TCE0.CTRLFSET = 0x08;  
    1098:	b8 e0       	ldi	r27, 0x08	; 8
    109a:	b0 93 09 0a 	sts	0x0A09, r27
							//read the data from FRAM and send it
							for(uint16_t i =0; i<(samples*4);){	
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	ae 81       	ldd	r26, Y+6	; 0x06
    10a4:	bf 81       	ldd	r27, Y+7	; 0x07
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	aa 1f       	adc	r26, r26
    10ac:	bb 1f       	adc	r27, r27
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	aa 1f       	adc	r26, r26
    10b4:	bb 1f       	adc	r27, r27
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	a1 05       	cpc	r26, r1
    10ba:	b1 05       	cpc	r27, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <main+0x30a>
    10be:	ab c0       	rjmp	.+342    	; 0x1216 <main+0x460>
    10c0:	cc 24       	eor	r12, r12
    10c2:	dd 24       	eor	r13, r13
    10c4:	76 01       	movw	r14, r12
    10c6:	00 e0       	ldi	r16, 0x00	; 0
    10c8:	10 e0       	ldi	r17, 0x00	; 0
								if(samples*4 - i >= 100){
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	ae 81       	ldd	r26, Y+6	; 0x06
    10d0:	bf 81       	ldd	r27, Y+7	; 0x07
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	aa 1f       	adc	r26, r26
    10d8:	bb 1f       	adc	r27, r27
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	aa 1f       	adc	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	8c 19       	sub	r24, r12
    10e4:	9d 09       	sbc	r25, r13
    10e6:	ae 09       	sbc	r26, r14
    10e8:	bf 09       	sbc	r27, r15
    10ea:	84 36       	cpi	r24, 0x64	; 100
    10ec:	91 05       	cpc	r25, r1
    10ee:	a1 05       	cpc	r26, r1
    10f0:	b1 05       	cpc	r27, r1
    10f2:	18 f1       	brcs	.+70     	; 0x113a <main+0x384>
									readFRAM(100,(FRAMAddress-(samples*4))+i);						
    10f4:	60 91 1e 3e 	lds	r22, 0x3E1E
    10f8:	70 91 1f 3e 	lds	r23, 0x3E1F
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	ae 81       	ldd	r26, Y+6	; 0x06
    1102:	bf 81       	ldd	r27, Y+7	; 0x07
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	68 1b       	sub	r22, r24
    110e:	79 0b       	sbc	r23, r25
    1110:	60 0f       	add	r22, r16
    1112:	71 1f       	adc	r23, r17
    1114:	84 e6       	ldi	r24, 0x64	; 100
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 cd 01 	call	0x39a	; 0x39a <readFRAM>
									while(chb_write(0x0000,FRAMReadBuffer,100) != CHB_SUCCESS);
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	65 2d       	mov	r22, r5
    1122:	74 2d       	mov	r23, r4
    1124:	24 e6       	ldi	r18, 0x64	; 100
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
    1130:	88 23       	and	r24, r24
    1132:	a1 f7       	brne	.-24     	; 0x111c <main+0x366>
									i += 100;
    1134:	0c 59       	subi	r16, 0x9C	; 156
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	42 c0       	rjmp	.+132    	; 0x11be <main+0x408>
								}
								else{
									readFRAM(samples*4 - i,(FRAMAddress-(samples*4))+i);
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	ae 81       	ldd	r26, Y+6	; 0x06
    1140:	bf 81       	ldd	r27, Y+7	; 0x07
    1142:	e0 91 1e 3e 	lds	r30, 0x3E1E
    1146:	f0 91 1f 3e 	lds	r31, 0x3E1F
    114a:	4c 81       	ldd	r20, Y+4	; 0x04
    114c:	5d 81       	ldd	r21, Y+5	; 0x05
    114e:	6e 81       	ldd	r22, Y+6	; 0x06
    1150:	7f 81       	ldd	r23, Y+7	; 0x07
    1152:	9c 01       	movw	r18, r24
    1154:	22 0f       	add	r18, r18
    1156:	33 1f       	adc	r19, r19
    1158:	22 0f       	add	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	ca 01       	movw	r24, r20
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	bf 01       	movw	r22, r30
    1168:	68 1b       	sub	r22, r24
    116a:	79 0b       	sbc	r23, r25
    116c:	60 0f       	add	r22, r16
    116e:	71 1f       	adc	r23, r17
    1170:	c9 01       	movw	r24, r18
    1172:	80 1b       	sub	r24, r16
    1174:	91 0b       	sbc	r25, r17
    1176:	0e 94 cd 01 	call	0x39a	; 0x39a <readFRAM>
									while(chb_write(0x0000,FRAMReadBuffer,samples*4 - i) != CHB_SUCCESS);
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	ae 81       	ldd	r26, Y+6	; 0x06
    1180:	bf 81       	ldd	r27, Y+7	; 0x07
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	aa 1f       	adc	r26, r26
    1188:	bb 1f       	adc	r27, r27
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	aa 1f       	adc	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	9c 01       	movw	r18, r24
    1194:	ad 01       	movw	r20, r26
    1196:	2c 19       	sub	r18, r12
    1198:	3d 09       	sbc	r19, r13
    119a:	4e 09       	sbc	r20, r14
    119c:	5f 09       	sbc	r21, r15
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	65 2d       	mov	r22, r5
    11a4:	74 2d       	mov	r23, r4
    11a6:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
    11aa:	88 23       	and	r24, r24
    11ac:	31 f7       	brne	.-52     	; 0x117a <main+0x3c4>
									i += samples*4 - i;
    11ae:	0c 81       	ldd	r16, Y+4	; 0x04
    11b0:	1d 81       	ldd	r17, Y+5	; 0x05
    11b2:	2e 81       	ldd	r18, Y+6	; 0x06
    11b4:	3f 81       	ldd	r19, Y+7	; 0x07
    11b6:	00 0f       	add	r16, r16
    11b8:	11 1f       	adc	r17, r17
    11ba:	00 0f       	add	r16, r16
    11bc:	11 1f       	adc	r17, r17
								}
								//reset timeout timer
								TimedOut = 0;
    11be:	10 92 0e 21 	sts	0x210E, r1
								TCE0.CTRLFSET = 0x08;
    11c2:	e8 e0       	ldi	r30, 0x08	; 8
    11c4:	e0 93 09 0a 	sts	0x0A09, r30
    11c8:	f3 01       	movw	r30, r6
								while(!pcb->data_rcv){
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <main+0x41e>
									//break if timed out waiting for response
									if(TimedOut) break;
    11cc:	80 91 0e 21 	lds	r24, 0x210E
    11d0:	88 23       	and	r24, r24
    11d2:	19 f4       	brne	.+6      	; 0x11da <main+0x424>
									i += samples*4 - i;
								}
								//reset timeout timer
								TimedOut = 0;
								TCE0.CTRLFSET = 0x08;
								while(!pcb->data_rcv){
    11d4:	83 81       	ldd	r24, Z+3	; 0x03
    11d6:	88 23       	and	r24, r24
    11d8:	c9 f3       	breq	.-14     	; 0x11cc <main+0x416>
    11da:	3f 01       	movw	r6, r30
									//break if timed out waiting for response
									if(TimedOut) break;
								}
								if(TimedOut) break;		
    11dc:	80 91 0e 21 	lds	r24, 0x210E
    11e0:	88 23       	and	r24, r24
    11e2:	c9 f4       	brne	.+50     	; 0x1216 <main+0x460>
								length = chb_read((chb_rx_data_t*)RadioMessageBuffer);							
    11e4:	ce 01       	movw	r24, r28
    11e6:	08 96       	adiw	r24, 0x08	; 8
    11e8:	0e 94 c2 1a 	call	0x3584	; 0x3584 <chb_read>
							}
							//reset timeout timer
							TimedOut = 0;
							TCE0.CTRLFSET = 0x08;  
							//read the data from FRAM and send it
							for(uint16_t i =0; i<(samples*4);){	
    11ec:	68 01       	movw	r12, r16
    11ee:	ee 24       	eor	r14, r14
    11f0:	ff 24       	eor	r15, r15
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	ae 81       	ldd	r26, Y+6	; 0x06
    11f8:	bf 81       	ldd	r27, Y+7	; 0x07
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	aa 1f       	adc	r26, r26
    1200:	bb 1f       	adc	r27, r27
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	aa 1f       	adc	r26, r26
    1208:	bb 1f       	adc	r27, r27
    120a:	c8 16       	cp	r12, r24
    120c:	d9 06       	cpc	r13, r25
    120e:	ea 06       	cpc	r14, r26
    1210:	fb 06       	cpc	r15, r27
    1212:	08 f4       	brcc	.+2      	; 0x1216 <main+0x460>
    1214:	5a cf       	rjmp	.-332    	; 0x10ca <main+0x314>
							}
							//chb_write(0x0000,FRAMReadBuffer,samples*4);								
							//write the data to SD card for good measure (make sure transmitted and collected data is the same)	
							//writeFile(ofile, FRAMReadBuffer, samples*4);			
						}
						if(TimedOut){
    1216:	80 91 0e 21 	lds	r24, 0x210E
    121a:	88 23       	and	r24, r24
    121c:	31 f0       	breq	.+12     	; 0x122a <main+0x474>
							//stop timeout counter and go back to waiting for command
							TimedOut = 0;
    121e:	10 92 0e 21 	sts	0x210E, r1
							TCE0.CTRLA = 0; 
    1222:	a0 e0       	ldi	r26, 0x00	; 0
    1224:	ba e0       	ldi	r27, 0x0A	; 10
    1226:	1c 92       	st	X, r1
							break;
    1228:	00 ce       	rjmp	.-1024   	; 0xe2a <main+0x74>
						}														
						DataAvailable = 0;
    122a:	10 92 48 3e 	sts	0x3E48, r1
    122e:	fd cd       	rjmp	.-1030   	; 0xe2a <main+0x74>
					}
					else {
						while(chb_write(0x0000,(uint8_t*)(&ack),2) != CHB_SUCCESS);
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	be 01       	movw	r22, r28
    1236:	6f 5f       	subi	r22, 0xFF	; 255
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	22 e0       	ldi	r18, 0x02	; 2
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
    1246:	88 23       	and	r24, r24
    1248:	99 f7       	brne	.-26     	; 0x1230 <main+0x47a>
    124a:	ef cd       	rjmp	.-1058   	; 0xe2a <main+0x74>

0000124c <__vector_47>:
				}		
		}		
	}	
}

ISR(TCE0_OVF_vect){
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	8f 93       	push	r24
	TimedOut = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 0e 21 	sts	0x210E, r24
    125e:	8f 91       	pop	r24
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <synch>:
#include "E-000001-000009_firmware_rev_1_0.h"


char buff[8];
//creates a system for syncing ADC sampling with other motes through the base station every SynchPer seconds
void synch(int SynchPer){
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	8c 01       	movw	r16, r24
	moteID = 1;
    1272:	c1 e0       	ldi	r28, 0x01	; 1
    1274:	c0 93 46 3e 	sts	0x3E46, r28
	RadioMonitorMode = SYNCHED;		//initialize the RadioMonitorMode to synched 
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	80 93 20 3e 	sts	0x3E20, r24
	chb_init();
    127e:	0e 94 fe 19 	call	0x33fc	; 0x33fc <chb_init>
	chb_set_short_addr(moteID);
    1282:	80 91 46 3e 	lds	r24, 0x3E46
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 21 1c 	call	0x3842	; 0x3842 <chb_set_short_addr>
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC1_OVF_gc;	//set overflow of lower 16 bits of the counter as event on channel 1
    128c:	88 ec       	ldi	r24, 0xC8	; 200
    128e:	e0 e8       	ldi	r30, 0x80	; 128
    1290:	f1 e0       	ldi	r31, 0x01	; 1
    1292:	81 83       	std	Z+1, r24	; 0x01
	TCD1.CTRLA = TC_CLKSEL_EVCH1_gc; //select event channel 1 as input clock to the upper 16 bits of the counter
    1294:	e0 e4       	ldi	r30, 0x40	; 64
    1296:	f9 e0       	ldi	r31, 0x09	; 9
    1298:	89 e0       	ldi	r24, 0x09	; 9
    129a:	80 83       	st	Z, r24
	TCD1.INTCTRLA = 0x02;	//enable timer overflow interrupt as high priority interrupt
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	86 83       	std	Z+6, r24	; 0x06
	TCD1.PER = SynchPer*500; //upper 16 bits of the 32-bit joint timer
    12a0:	24 ef       	ldi	r18, 0xF4	; 244
    12a2:	31 e0       	ldi	r19, 0x01	; 1
    12a4:	02 9f       	mul	r16, r18
    12a6:	c0 01       	movw	r24, r0
    12a8:	03 9f       	mul	r16, r19
    12aa:	90 0d       	add	r25, r0
    12ac:	12 9f       	mul	r17, r18
    12ae:	90 0d       	add	r25, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	86 a3       	lds	r24, 0x56
    12b4:	97 a3       	lds	r25, 0x57
		
	TCC1.PER = 64000;	//64000 cycles of cpu at 32MHz equals one 500 Hz interval
    12b6:	e0 e4       	ldi	r30, 0x40	; 64
    12b8:	f8 e0       	ldi	r31, 0x08	; 8
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	9a ef       	ldi	r25, 0xFA	; 250
    12be:	86 a3       	lds	r24, 0x56
    12c0:	97 a3       	lds	r25, 0x57
	TCC1.INTCTRLA = 0x01;  //enable timer overflow interrupt as medium priority interrupt
    12c2:	c6 83       	std	Z+6, r28	; 0x06
	TCC1.CTRLA = 0x01;  //start timer with clock precision of cpu clock (32MHz)
    12c4:	c0 83       	st	Z, r28
	PMIC.CTRL |= ENABLE_ALL_INTERRUPT_LEVELS;
    12c6:	e0 ea       	ldi	r30, 0xA0	; 160
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	87 60       	ori	r24, 0x07	; 7
    12ce:	82 83       	std	Z+2, r24	; 0x02
	sei(); //  Enable global interrupts
    12d0:	78 94       	sei
}
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <__vector_83>:

ISR(TCD1_OVF_vect, ISR_NOBLOCK) {
    12da:	78 94       	sei
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	0b b6       	in	r0, 0x3b	; 59
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	2f 93       	push	r18
    12f4:	3f 93       	push	r19
    12f6:	4f 93       	push	r20
    12f8:	5f 93       	push	r21
    12fa:	6f 93       	push	r22
    12fc:	7f 93       	push	r23
    12fe:	8f 93       	push	r24
    1300:	9f 93       	push	r25
    1302:	af 93       	push	r26
    1304:	bf 93       	push	r27
    1306:	ef 93       	push	r30
    1308:	ff 93       	push	r31
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	28 97       	sbiw	r28, 0x08	; 8
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	de bf       	out	0x3e, r29	; 62
	TCC1.CTRLA = 0x00; //turn off the counter while synching
    1318:	10 92 40 08 	sts	0x0840, r1
	TCD1.CTRLA = 0x00;
    131c:	10 92 40 09 	sts	0x0940, r1
	//TCC1.CTRLFSET = 0x0C;	//reset the value of the counter to 0
	//TCD1.CTRLFSET = 0x0C;
	RadioMonitorMode = TIME_SYNCH;
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	80 93 20 3e 	sts	0x3E20, r24
	char message[8];
	strcpy(message,"reset");
    1326:	de 01       	movw	r26, r28
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	e4 e0       	ldi	r30, 0x04	; 4
    132c:	f0 e2       	ldi	r31, 0x20	; 32
    132e:	86 e0       	ldi	r24, 0x06	; 6
    1330:	01 90       	ld	r0, Z+
    1332:	0d 92       	st	X+, r0
    1334:	81 50       	subi	r24, 0x01	; 1
    1336:	e1 f7       	brne	.-8      	; 0x1330 <__vector_83+0x56>
	itoa((int)(moteID),buff,10);
    1338:	0a ea       	ldi	r16, 0xAA	; 170
    133a:	10 e5       	ldi	r17, 0x50	; 80
    133c:	80 91 46 3e 	lds	r24, 0x3E46
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	b8 01       	movw	r22, r16
    1344:	4a e0       	ldi	r20, 0x0A	; 10
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	0e 94 fe 39 	call	0x73fc	; 0x73fc <itoa>
	strcat(message,buff);
    134c:	7e 01       	movw	r14, r28
    134e:	08 94       	sec
    1350:	e1 1c       	adc	r14, r1
    1352:	f1 1c       	adc	r15, r1
    1354:	c7 01       	movw	r24, r14
    1356:	b8 01       	movw	r22, r16
    1358:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <strcat>
	ADC_Pause_Sampling();	//pause the ADC while synching
    135c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <ADC_Pause_Sampling>
	chb_write(0x0000,(unsigned char*)message,strlen(message));
    1360:	f7 01       	movw	r30, r14
    1362:	01 90       	ld	r0, Z+
    1364:	00 20       	and	r0, r0
    1366:	e9 f7       	brne	.-6      	; 0x1362 <__vector_83+0x88>
    1368:	31 97       	sbiw	r30, 0x01	; 1
    136a:	ee 19       	sub	r30, r14
    136c:	ff 09       	sbc	r31, r15
    136e:	9f 01       	movw	r18, r30
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	b7 01       	movw	r22, r14
    137a:	0e 94 22 1a 	call	0x3444	; 0x3444 <chb_write>
}	
    137e:	28 96       	adiw	r28, 0x08	; 8
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	0f 90       	pop	r0
    13aa:	0b be       	out	0x3b, r0	; 59
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <CO_collectTemp>:

volatile uint8_t checksumADC[3] = {0};  // checksum for FRAM test
volatile uint8_t checksumFRAM[3] = {0};  // checksum for FRAM test


void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    13b6:	4f 92       	push	r4
    13b8:	5f 92       	push	r5
    13ba:	6f 92       	push	r6
    13bc:	7f 92       	push	r7
    13be:	8f 92       	push	r8
    13c0:	9f 92       	push	r9
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	2b 97       	sbiw	r28, 0x0b	; 11
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	8e 83       	std	Y+6, r24	; 0x06
    13de:	9f 83       	std	Y+7, r25	; 0x07
    13e0:	68 87       	std	Y+8, r22	; 0x08
    13e2:	79 87       	std	Y+9, r23	; 0x09
    13e4:	4a 87       	std	Y+10, r20	; 0x0a
    13e6:	5b 87       	std	Y+11, r21	; 0x0b
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>

	/* Move stored calibration values to ADCA. */
	ADC_CalibrationValues_Load(&ADCA);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    13f6:	00 e0       	ldi	r16, 0x00	; 0
    13f8:	12 e0       	ldi	r17, 0x02	; 2
    13fa:	d8 01       	movw	r26, r16
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	8c 91       	ld	r24, X
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	89 7e       	andi	r24, 0xE9	; 233
    1404:	11 96       	adiw	r26, 0x01	; 1
    1406:	8c 93       	st	X, r24
    1408:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV32_gc);
    140a:	14 96       	adiw	r26, 0x04	; 4
    140c:	8c 91       	ld	r24, X
    140e:	14 97       	sbiw	r26, 0x04	; 4
    1410:	88 7f       	andi	r24, 0xF8	; 248
    1412:	83 60       	ori	r24, 0x03	; 3
    1414:	14 96       	adiw	r26, 0x04	; 4
    1416:	8c 93       	st	X, r24
    1418:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCA to be 1.0 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_INT1V_gc); 
    141a:	12 96       	adiw	r26, 0x02	; 2
    141c:	8c 91       	ld	r24, X
    141e:	12 97       	sbiw	r26, 0x02	; 2
    1420:	8f 7c       	andi	r24, 0xCF	; 207
    1422:	12 96       	adiw	r26, 0x02	; 2
    1424:	8c 93       	st	X, r24
    1426:	12 97       	sbiw	r26, 0x02	; 2

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
    1428:	0f 2e       	mov	r0, r31
    142a:	f0 e2       	ldi	r31, 0x20	; 32
    142c:	ef 2e       	mov	r14, r31
    142e:	f2 e0       	ldi	r31, 0x02	; 2
    1430:	ff 2e       	mov	r15, r31
    1432:	f0 2d       	mov	r31, r0
    1434:	f7 01       	movw	r30, r14
    1436:	80 81       	ld	r24, Z
    1438:	80 7e       	andi	r24, 0xE0	; 224
    143a:	81 60       	ori	r24, 0x01	; 1
    143c:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	/* Get offset value for ADCA. */
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    143e:	89 e0       	ldi	r24, 0x09	; 9
    1440:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
    1442:	8c 91       	ld	r24, X
    1444:	81 60       	ori	r24, 0x01	; 1
    1446:	8c 93       	st	X, r24
	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_Wait_32MHz>
 	offset = ADC_Offset_Get_Unsigned(&ADCA, &ADCA.CH0, false);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	60 e2       	ldi	r22, 0x20	; 32
    1456:	72 e0       	ldi	r23, 0x02	; 2
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <ADC_Offset_Get_Unsigned>
    145e:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCA);
    1460:	d8 01       	movw	r26, r16
    1462:	8c 91       	ld	r24, X
    1464:	8e 7f       	andi	r24, 0xFE	; 254
    1466:	8c 93       	st	X, r24
    
	/* Set input to the channels in ADCA */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    1468:	f7 01       	movw	r30, r14
    146a:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
    146c:	13 96       	adiw	r26, 0x03	; 3
    146e:	8c 91       	ld	r24, X
    1470:	13 97       	sbiw	r26, 0x03	; 3
    1472:	8f 73       	andi	r24, 0x3F	; 63
    1474:	13 96       	adiw	r26, 0x03	; 3
    1476:	8c 93       	st	X, r24
    1478:	13 97       	sbiw	r26, 0x03	; 3

	/* Enable ADC .*/
	ADC_Enable(&ADCA);
    147a:	8c 91       	ld	r24, X
    147c:	81 60       	ori	r24, 0x01	; 1
    147e:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	92 e0       	ldi	r25, 0x02	; 2
    1484:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
    1488:	d8 01       	movw	r26, r16
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	8c 91       	ld	r24, X
    148e:	11 97       	sbiw	r26, 0x01	; 1
    1490:	88 60       	ori	r24, 0x08	; 8
    1492:	11 96       	adiw	r26, 0x01	; 1
    1494:	8c 93       	st	X, r24
    1496:	ee 24       	eor	r14, r14
    1498:	ff 24       	eor	r15, r15
    149a:	68 94       	set
    149c:	f2 f8       	bld	r15, 2
	
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    149e:	44 24       	eor	r4, r4
    14a0:	55 24       	eor	r5, r5
    14a2:	32 01       	movw	r6, r4
void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e1       	ldi	r19, 0x10	; 16
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	2a 83       	std	Y+2, r18	; 0x02
    14ae:	3b 83       	std	Y+3, r19	; 0x03
    14b0:	4c 83       	std	Y+4, r20	; 0x04
    14b2:	5d 83       	std	Y+5, r21	; 0x05
volatile uint8_t checksumFRAM[3] = {0};  // checksum for FRAM test


void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
    14b4:	88 24       	eor	r8, r8
    14b6:	99 24       	eor	r9, r9
    14b8:	54 01       	movw	r10, r8
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
    14ba:	00 e2       	ldi	r16, 0x20	; 32
    14bc:	12 e0       	ldi	r17, 0x02	; 2
    14be:	d8 01       	movw	r26, r16
    14c0:	13 96       	adiw	r26, 0x03	; 3
    14c2:	8c 91       	ld	r24, X
    14c4:	13 97       	sbiw	r26, 0x03	; 3
    14c6:	80 ff       	sbrs	r24, 0
    14c8:	fa cf       	rjmp	.-12     	; 0x14be <CO_collectTemp+0x108>
		tempResult = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
    14ca:	69 81       	ldd	r22, Y+1	; 0x01
    14cc:	c8 01       	movw	r24, r16
    14ce:	0e 94 42 19 	call	0x3284	; 0x3284 <ADC_ResultCh_GetWord_Signed>
		sum+=tempResult;
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	88 0e       	add	r8, r24
    14d8:	99 1e       	adc	r9, r25
    14da:	aa 1e       	adc	r10, r26
    14dc:	bb 1e       	adc	r11, r27
    14de:	48 16       	cp	r4, r24
    14e0:	59 06       	cpc	r5, r25
    14e2:	6a 06       	cpc	r6, r26
    14e4:	7b 06       	cpc	r7, r27
    14e6:	10 f4       	brcc	.+4      	; 0x14ec <CO_collectTemp+0x136>
    14e8:	2c 01       	movw	r4, r24
    14ea:	3d 01       	movw	r6, r26
    14ec:	2a 81       	ldd	r18, Y+2	; 0x02
    14ee:	3b 81       	ldd	r19, Y+3	; 0x03
    14f0:	4c 81       	ldd	r20, Y+4	; 0x04
    14f2:	5d 81       	ldd	r21, Y+5	; 0x05
    14f4:	82 17       	cp	r24, r18
    14f6:	93 07       	cpc	r25, r19
    14f8:	a4 07       	cpc	r26, r20
    14fa:	b5 07       	cpc	r27, r21
    14fc:	20 f4       	brcc	.+8      	; 0x1506 <CO_collectTemp+0x150>
    14fe:	8a 83       	std	Y+2, r24	; 0x02
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	ac 83       	std	Y+4, r26	; 0x04
    1504:	bd 83       	std	Y+5, r27	; 0x05
    1506:	08 94       	sec
    1508:	e1 08       	sbc	r14, r1
    150a:	f1 08       	sbc	r15, r1

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);

	/* Sample onboard ADC.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    150c:	e1 14       	cp	r14, r1
    150e:	f1 04       	cpc	r15, r1
    1510:	b1 f6       	brne	.-84     	; 0x14be <CO_collectTemp+0x108>
		if (min > tempResult) { min = tempResult;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCA);
    1512:	e0 e0       	ldi	r30, 0x00	; 0
    1514:	f2 e0       	ldi	r31, 0x02	; 2
    1516:	81 81       	ldd	r24, Z+1	; 0x01
    1518:	87 7f       	andi	r24, 0xF7	; 247
    151a:	81 83       	std	Z+1, r24	; 0x01
	ADC_Pipeline_Flush(&ADCA);
    151c:	80 81       	ld	r24, Z
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	80 83       	st	Z, r24
	ADC_Disable(&ADCA);
    1522:	80 81       	ld	r24, Z
    1524:	8e 7f       	andi	r24, 0xFE	; 254
    1526:	80 83       	st	Z, r24

	ADCPower(FALSE);
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>

	average = sum / NUM_SAMPLES;
    152e:	c5 01       	movw	r24, r10
    1530:	b4 01       	movw	r22, r8
    1532:	05 2e       	mov	r0, r21
    1534:	5a e0       	ldi	r21, 0x0A	; 10
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	5a 95       	dec	r21
    1540:	d1 f7       	brne	.-12     	; 0x1536 <CO_collectTemp+0x180>
    1542:	50 2d       	mov	r21, r0

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    1544:	28 ee       	ldi	r18, 0xE8	; 232
    1546:	33 e0       	ldi	r19, 0x03	; 3
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    1550:	0f 2e       	mov	r0, r31
    1552:	ff ef       	ldi	r31, 0xFF	; 255
    1554:	8f 2e       	mov	r8, r31
    1556:	ff e0       	ldi	r31, 0x0F	; 15
    1558:	9f 2e       	mov	r9, r31
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	af 2e       	mov	r10, r31
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	bf 2e       	mov	r11, r31
    1562:	f0 2d       	mov	r31, r0
    1564:	a5 01       	movw	r20, r10
    1566:	94 01       	movw	r18, r8
    1568:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    156c:	c9 01       	movw	r24, r18
    156e:	c2 97       	sbiw	r24, 0x32	; 50
    1570:	ae 81       	ldd	r26, Y+6	; 0x06
    1572:	bf 81       	ldd	r27, Y+7	; 0x07
    1574:	8d 93       	st	X+, r24
    1576:	9c 93       	st	X, r25
	*maxV = (max * 1000 / 4095) - 50;
    1578:	c3 01       	movw	r24, r6
    157a:	b2 01       	movw	r22, r4
    157c:	28 ee       	ldi	r18, 0xE8	; 232
    157e:	33 e0       	ldi	r19, 0x03	; 3
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    1588:	a5 01       	movw	r20, r10
    158a:	94 01       	movw	r18, r8
    158c:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    1590:	c9 01       	movw	r24, r18
    1592:	c2 97       	sbiw	r24, 0x32	; 50
    1594:	ea 85       	ldd	r30, Y+10	; 0x0a
    1596:	fb 85       	ldd	r31, Y+11	; 0x0b
    1598:	80 83       	st	Z, r24
    159a:	91 83       	std	Z+1, r25	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    159c:	6a 81       	ldd	r22, Y+2	; 0x02
    159e:	7b 81       	ldd	r23, Y+3	; 0x03
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	28 ee       	ldi	r18, 0xE8	; 232
    15a6:	33 e0       	ldi	r19, 0x03	; 3
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    15b0:	a5 01       	movw	r20, r10
    15b2:	94 01       	movw	r18, r8
    15b4:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    15b8:	22 53       	subi	r18, 0x32	; 50
    15ba:	30 40       	sbci	r19, 0x00	; 0
    15bc:	a8 85       	ldd	r26, Y+8	; 0x08
    15be:	b9 85       	ldd	r27, Y+9	; 0x09
    15c0:	2d 93       	st	X+, r18
    15c2:	3c 93       	st	X, r19
    15c4:	11 97       	sbiw	r26, 0x01	; 1
}
    15c6:	2b 96       	adiw	r28, 0x0b	; 11
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	bf 90       	pop	r11
    15da:	af 90       	pop	r10
    15dc:	9f 90       	pop	r9
    15de:	8f 90       	pop	r8
    15e0:	7f 90       	pop	r7
    15e2:	6f 90       	pop	r6
    15e4:	5f 90       	pop	r5
    15e6:	4f 90       	pop	r4
    15e8:	08 95       	ret

000015ea <CO_collectBatt>:

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    15ea:	4f 92       	push	r4
    15ec:	5f 92       	push	r5
    15ee:	6f 92       	push	r6
    15f0:	7f 92       	push	r7
    15f2:	8f 92       	push	r8
    15f4:	9f 92       	push	r9
    15f6:	af 92       	push	r10
    15f8:	bf 92       	push	r11
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	2b 97       	sbiw	r28, 0x0b	; 11
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	8e 83       	std	Y+6, r24	; 0x06
    1612:	9f 83       	std	Y+7, r25	; 0x07
    1614:	68 87       	std	Y+8, r22	; 0x08
    1616:	79 87       	std	Y+9, r23	; 0x09
    1618:	4a 87       	std	Y+10, r20	; 0x0a
    161a:	5b 87       	std	Y+11, r21	; 0x0b
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	PortEx_DIRSET(BIT2_bm, PS_BANKB);
    1622:	84 e0       	ldi	r24, 0x04	; 4
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
	PortEx_OUTSET(BIT2_bm, PS_BANKB); // activate PIO24 (VBATT)
    162a:	84 e0       	ldi	r24, 0x04	; 4
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
    1632:	2f ef       	ldi	r18, 0xFF	; 255
    1634:	33 ec       	ldi	r19, 0xC3	; 195
    1636:	49 e0       	ldi	r20, 0x09	; 9
    1638:	21 50       	subi	r18, 0x01	; 1
    163a:	30 40       	sbci	r19, 0x00	; 0
    163c:	40 40       	sbci	r20, 0x00	; 0
    163e:	e1 f7       	brne	.-8      	; 0x1638 <CO_collectBatt+0x4e>
    1640:	00 c0       	rjmp	.+0      	; 0x1642 <CO_collectBatt+0x58>
    1642:	00 00       	nop
	_delay_ms(100);
	//setPortEx(BIT2_bm, PS_BANKB);
		
	/* Move stored calibration values to ADCB. */
	ADC_CalibrationValues_Load(&ADCB);
    1644:	80 e4       	ldi	r24, 0x40	; 64
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    164c:	00 e4       	ldi	r16, 0x40	; 64
    164e:	12 e0       	ldi	r17, 0x02	; 2
    1650:	d8 01       	movw	r26, r16
    1652:	11 96       	adiw	r26, 0x01	; 1
    1654:	8c 91       	ld	r24, X
    1656:	11 97       	sbiw	r26, 0x01	; 1
    1658:	89 7e       	andi	r24, 0xE9	; 233
    165a:	11 96       	adiw	r26, 0x01	; 1
    165c:	8c 93       	st	X, r24
    165e:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV32_gc);
    1660:	14 96       	adiw	r26, 0x04	; 4
    1662:	8c 91       	ld	r24, X
    1664:	14 97       	sbiw	r26, 0x04	; 4
    1666:	88 7f       	andi	r24, 0xF8	; 248
    1668:	83 60       	ori	r24, 0x03	; 3
    166a:	14 96       	adiw	r26, 0x04	; 4
    166c:	8c 93       	st	X, r24
    166e:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCB to be 1.0 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_INT1V_gc); 
    1670:	12 96       	adiw	r26, 0x02	; 2
    1672:	8c 91       	ld	r24, X
    1674:	12 97       	sbiw	r26, 0x02	; 2
    1676:	8f 7c       	andi	r24, 0xCF	; 207
    1678:	12 96       	adiw	r26, 0x02	; 2
    167a:	8c 93       	st	X, r24
    167c:	12 97       	sbiw	r26, 0x02	; 2

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
    167e:	0f 2e       	mov	r0, r31
    1680:	f0 e6       	ldi	r31, 0x60	; 96
    1682:	ef 2e       	mov	r14, r31
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	ff 2e       	mov	r15, r31
    1688:	f0 2d       	mov	r31, r0
    168a:	f7 01       	movw	r30, r14
    168c:	80 81       	ld	r24, Z
    168e:	80 7e       	andi	r24, 0xE0	; 224
    1690:	81 60       	ori	r24, 0x01	; 1
    1692:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	// Get offset value for ADCB.
   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    1694:	89 e0       	ldi	r24, 0x09	; 9
    1696:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
    1698:	8c 91       	ld	r24, X
    169a:	81 60       	ori	r24, 0x01	; 1
    169c:	8c 93       	st	X, r24
	// Wait until common mode voltage is stable. Default clk is 16MHz
	ADC_Wait_32MHz(&ADCB);
    169e:	80 e4       	ldi	r24, 0x40	; 64
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_Wait_32MHz>
	offset = ADC_Offset_Get_Unsigned(&ADCB, &ADCB.CH0, false);
    16a6:	80 e4       	ldi	r24, 0x40	; 64
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	60 e6       	ldi	r22, 0x60	; 96
    16ac:	72 e0       	ldi	r23, 0x02	; 2
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	0e 94 70 19 	call	0x32e0	; 0x32e0 <ADC_Offset_Get_Unsigned>
    16b4:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCB);
    16b6:	d8 01       	movw	r26, r16
    16b8:	8c 91       	ld	r24, X
    16ba:	8e 7f       	andi	r24, 0xFE	; 254
    16bc:	8c 93       	st	X, r24
    
	/* Set input to the channels in ADC B */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    16be:	f7 01       	movw	r30, r14
    16c0:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0_gc);
    16c2:	13 96       	adiw	r26, 0x03	; 3
    16c4:	8c 91       	ld	r24, X
    16c6:	13 97       	sbiw	r26, 0x03	; 3
    16c8:	8f 73       	andi	r24, 0x3F	; 63
    16ca:	13 96       	adiw	r26, 0x03	; 3
    16cc:	8c 93       	st	X, r24
    16ce:	13 97       	sbiw	r26, 0x03	; 3

	/* Enable ADC .*/
	ADC_Enable(&ADCB);
    16d0:	8c 91       	ld	r24, X
    16d2:	81 60       	ori	r24, 0x01	; 1
    16d4:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
    16d6:	80 e4       	ldi	r24, 0x40	; 64
    16d8:	92 e0       	ldi	r25, 0x02	; 2
    16da:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);
    16de:	d8 01       	movw	r26, r16
    16e0:	11 96       	adiw	r26, 0x01	; 1
    16e2:	8c 91       	ld	r24, X
    16e4:	11 97       	sbiw	r26, 0x01	; 1
    16e6:	88 60       	ori	r24, 0x08	; 8
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	8c 93       	st	X, r24
    16ec:	ee 24       	eor	r14, r14
    16ee:	ff 24       	eor	r15, r15
    16f0:	68 94       	set
    16f2:	f2 f8       	bld	r15, 2
	
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    16f4:	44 24       	eor	r4, r4
    16f6:	55 24       	eor	r5, r5
    16f8:	32 01       	movw	r6, r4
void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e1       	ldi	r19, 0x10	; 16
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	2a 83       	std	Y+2, r18	; 0x02
    1704:	3b 83       	std	Y+3, r19	; 0x03
    1706:	4c 83       	std	Y+4, r20	; 0x04
    1708:	5d 83       	std	Y+5, r21	; 0x05
	*minV = (min * 1000  / 4095) - 50;
}

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	
	uint32_t sum = 0;
    170a:	88 24       	eor	r8, r8
    170c:	99 24       	eor	r9, r9
    170e:	54 01       	movw	r10, r8
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCB channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCB.CH0));
    1710:	00 e6       	ldi	r16, 0x60	; 96
    1712:	12 e0       	ldi	r17, 0x02	; 2
    1714:	d8 01       	movw	r26, r16
    1716:	13 96       	adiw	r26, 0x03	; 3
    1718:	8c 91       	ld	r24, X
    171a:	13 97       	sbiw	r26, 0x03	; 3
    171c:	80 ff       	sbrs	r24, 0
    171e:	fa cf       	rjmp	.-12     	; 0x1714 <CO_collectBatt+0x12a>
		tempResultB = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, offset);
    1720:	69 81       	ldd	r22, Y+1	; 0x01
    1722:	c8 01       	movw	r24, r16
    1724:	0e 94 42 19 	call	0x3284	; 0x3284 <ADC_ResultCh_GetWord_Signed>
		sum+=tempResultB;
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	88 0e       	add	r8, r24
    172e:	99 1e       	adc	r9, r25
    1730:	aa 1e       	adc	r10, r26
    1732:	bb 1e       	adc	r11, r27
    1734:	48 16       	cp	r4, r24
    1736:	59 06       	cpc	r5, r25
    1738:	6a 06       	cpc	r6, r26
    173a:	7b 06       	cpc	r7, r27
    173c:	10 f4       	brcc	.+4      	; 0x1742 <CO_collectBatt+0x158>
    173e:	2c 01       	movw	r4, r24
    1740:	3d 01       	movw	r6, r26
    1742:	2a 81       	ldd	r18, Y+2	; 0x02
    1744:	3b 81       	ldd	r19, Y+3	; 0x03
    1746:	4c 81       	ldd	r20, Y+4	; 0x04
    1748:	5d 81       	ldd	r21, Y+5	; 0x05
    174a:	82 17       	cp	r24, r18
    174c:	93 07       	cpc	r25, r19
    174e:	a4 07       	cpc	r26, r20
    1750:	b5 07       	cpc	r27, r21
    1752:	20 f4       	brcc	.+8      	; 0x175c <CO_collectBatt+0x172>
    1754:	8a 83       	std	Y+2, r24	; 0x02
    1756:	9b 83       	std	Y+3, r25	; 0x03
    1758:	ac 83       	std	Y+4, r26	; 0x04
    175a:	bd 83       	std	Y+5, r27	; 0x05
    175c:	08 94       	sec
    175e:	e1 08       	sbc	r14, r1
    1760:	f1 08       	sbc	r15, r1

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);

	/* Store samples.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    1762:	e1 14       	cp	r14, r1
    1764:	f1 04       	cpc	r15, r1
    1766:	b1 f6       	brne	.-84     	; 0x1714 <CO_collectBatt+0x12a>
		if (min > tempResultB) { min = tempResultB;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
    1768:	e0 e4       	ldi	r30, 0x40	; 64
    176a:	f2 e0       	ldi	r31, 0x02	; 2
    176c:	81 81       	ldd	r24, Z+1	; 0x01
    176e:	87 7f       	andi	r24, 0xF7	; 247
    1770:	81 83       	std	Z+1, r24	; 0x01
	ADC_Disable(&ADCB);
    1772:	80 81       	ld	r24, Z
    1774:	8e 7f       	andi	r24, 0xFE	; 254
    1776:	80 83       	st	Z, r24

	average = sum / NUM_SAMPLES;
	
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
    1778:	84 e0       	ldi	r24, 0x04	; 4
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	0e 94 0c 05 	call	0xa18	; 0xa18 <PortEx_DIRCLR>
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
	ADC_Disable(&ADCB);

	average = sum / NUM_SAMPLES;
    1786:	c5 01       	movw	r24, r10
    1788:	b4 01       	movw	r22, r8
    178a:	05 2e       	mov	r0, r21
    178c:	5a e0       	ldi	r21, 0x0A	; 10
    178e:	96 95       	lsr	r25
    1790:	87 95       	ror	r24
    1792:	77 95       	ror	r23
    1794:	67 95       	ror	r22
    1796:	5a 95       	dec	r21
    1798:	d1 f7       	brne	.-12     	; 0x178e <CO_collectBatt+0x1a4>
    179a:	50 2d       	mov	r21, r0
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    179c:	28 ee       	ldi	r18, 0xE8	; 232
    179e:	33 e0       	ldi	r19, 0x03	; 3
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    17a8:	0f 2e       	mov	r0, r31
    17aa:	ff ef       	ldi	r31, 0xFF	; 255
    17ac:	8f 2e       	mov	r8, r31
    17ae:	ff e0       	ldi	r31, 0x0F	; 15
    17b0:	9f 2e       	mov	r9, r31
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	af 2e       	mov	r10, r31
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	bf 2e       	mov	r11, r31
    17ba:	f0 2d       	mov	r31, r0
    17bc:	a5 01       	movw	r20, r10
    17be:	94 01       	movw	r18, r8
    17c0:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    17c4:	c9 01       	movw	r24, r18
    17c6:	c2 97       	sbiw	r24, 0x32	; 50
    17c8:	ae 81       	ldd	r26, Y+6	; 0x06
    17ca:	bf 81       	ldd	r27, Y+7	; 0x07
    17cc:	8d 93       	st	X+, r24
    17ce:	9c 93       	st	X, r25
	*maxV = (max * 1000 / 4095) - 50;
    17d0:	c3 01       	movw	r24, r6
    17d2:	b2 01       	movw	r22, r4
    17d4:	28 ee       	ldi	r18, 0xE8	; 232
    17d6:	33 e0       	ldi	r19, 0x03	; 3
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    17e0:	a5 01       	movw	r20, r10
    17e2:	94 01       	movw	r18, r8
    17e4:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    17e8:	c9 01       	movw	r24, r18
    17ea:	c2 97       	sbiw	r24, 0x32	; 50
    17ec:	ea 85       	ldd	r30, Y+10	; 0x0a
    17ee:	fb 85       	ldd	r31, Y+11	; 0x0b
    17f0:	80 83       	st	Z, r24
    17f2:	91 83       	std	Z+1, r25	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    17f4:	6a 81       	ldd	r22, Y+2	; 0x02
    17f6:	7b 81       	ldd	r23, Y+3	; 0x03
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	9d 81       	ldd	r25, Y+5	; 0x05
    17fc:	28 ee       	ldi	r18, 0xE8	; 232
    17fe:	33 e0       	ldi	r19, 0x03	; 3
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    1808:	a5 01       	movw	r20, r10
    180a:	94 01       	movw	r18, r8
    180c:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    1810:	22 53       	subi	r18, 0x32	; 50
    1812:	30 40       	sbci	r19, 0x00	; 0
    1814:	a8 85       	ldd	r26, Y+8	; 0x08
    1816:	b9 85       	ldd	r27, Y+9	; 0x09
    1818:	2d 93       	st	X+, r18
    181a:	3c 93       	st	X, r19
    181c:	11 97       	sbiw	r26, 0x01	; 1
}
    181e:	2b 96       	adiw	r28, 0x0b	; 11
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	9f 90       	pop	r9
    1836:	8f 90       	pop	r8
    1838:	7f 90       	pop	r7
    183a:	6f 90       	pop	r6
    183c:	5f 90       	pop	r5
    183e:	4f 90       	pop	r4
    1840:	08 95       	ret

00001842 <set_ampGain>:
 *	All selected op-amps will be set to the same gain value.
 *
 *	\param channel	channel for gain to be set
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 */
void set_ampGain(uint8_t channel, uint8_t gainExponent) {
    1842:	cf 93       	push	r28
    1844:	c6 2f       	mov	r28, r22
	
	// set chip select.  note: AD8231 CS is select on low
	PortEx_OUTCLR((1 << channel), PS_BANKA);
    1846:	21 e0       	ldi	r18, 0x01	; 1
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	a9 01       	movw	r20, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <set_ampGain+0x10>
    184e:	44 0f       	add	r20, r20
    1850:	55 1f       	adc	r21, r21
    1852:	8a 95       	dec	r24
    1854:	e2 f7       	brpl	.-8      	; 0x184e <set_ampGain+0xc>
    1856:	ca 01       	movw	r24, r20
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	//setPortEx(~(1 << channel), PS_BANKA);
	// set gain
	// set bit A0
	if(gainExponent & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    185e:	c0 ff       	sbrs	r28, 0
    1860:	05 c0       	rjmp	.+10     	; 0x186c <set_ampGain+0x2a>
    1862:	80 e4       	ldi	r24, 0x40	; 64
    1864:	e0 e0       	ldi	r30, 0x00	; 0
    1866:	f6 e0       	ldi	r31, 0x06	; 6
    1868:	85 83       	std	Z+5, r24	; 0x05
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <set_ampGain+0x32>
	else {PORTA.OUTCLR = PIN6_bm;}
    186c:	80 e4       	ldi	r24, 0x40	; 64
    186e:	e0 e0       	ldi	r30, 0x00	; 0
    1870:	f6 e0       	ldi	r31, 0x06	; 6
    1872:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1
	if(gainExponent & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    1874:	c1 ff       	sbrs	r28, 1
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <set_ampGain+0x40>
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	e0 e2       	ldi	r30, 0x20	; 32
    187c:	f6 e0       	ldi	r31, 0x06	; 6
    187e:	85 83       	std	Z+5, r24	; 0x05
    1880:	04 c0       	rjmp	.+8      	; 0x188a <set_ampGain+0x48>
	else {PORTB.OUTCLR = PIN1_bm;}
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	e0 e2       	ldi	r30, 0x20	; 32
    1886:	f6 e0       	ldi	r31, 0x06	; 6
    1888:	86 83       	std	Z+6, r24	; 0x06
	// set bit A2
	if(gainExponent & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    188a:	c2 ff       	sbrs	r28, 2
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <set_ampGain+0x56>
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	e0 e2       	ldi	r30, 0x20	; 32
    1892:	f6 e0       	ldi	r31, 0x06	; 6
    1894:	85 83       	std	Z+5, r24	; 0x05
    1896:	04 c0       	rjmp	.+8      	; 0x18a0 <set_ampGain+0x5e>
	else {PORTB.OUTCLR = PIN2_bm;}
    1898:	84 e0       	ldi	r24, 0x04	; 4
    189a:	e0 e2       	ldi	r30, 0x20	; 32
    189c:	f6 e0       	ldi	r31, 0x06	; 6
    189e:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18a0:	5a e0       	ldi	r21, 0x0A	; 10
    18a2:	5a 95       	dec	r21
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <set_ampGain+0x60>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <set_ampGain+0x66>

	_delay_us(1);

	PortEx_OUTSET(0xFF, PS_BANKA);	// write protect all AD8231 amps
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
	//setPortEx(0xFF, PS_BANKA);

}
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <enableADCMUX>:

void enableADCMUX(uint8_t on) {
	
	if(on) {
    18b4:	88 23       	and	r24, r24
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <enableADCMUX+0x10>
		PORTA.DIRSET = PIN5_bm;
    18b8:	e0 e0       	ldi	r30, 0x00	; 0
    18ba:	f6 e0       	ldi	r31, 0x06	; 6
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
    18c0:	85 83       	std	Z+5, r24	; 0x05
    18c2:	08 95       	ret
	} else {
		PORTA.OUTCLR = PIN5_bm;
    18c4:	e0 e0       	ldi	r30, 0x00	; 0
    18c6:	f6 e0       	ldi	r31, 0x06	; 6
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
    18cc:	82 83       	std	Z+2, r24	; 0x02
    18ce:	08 95       	ret

000018d0 <__vector_20>:
	//enableADCMUX(FALSE);
	//ADCPower(FALSE);
}

//triggers when specified number of samples has been collected by ADC
ISR(TCC1_OVF_vect){
    18d0:	1f 92       	push	r1
    18d2:	0f 92       	push	r0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	0f 92       	push	r0
    18d8:	0b b6       	in	r0, 0x3b	; 59
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31

	// turn off ADC timer(s)
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    18f6:	e0 e4       	ldi	r30, 0x40	; 64
    18f8:	fa e0       	ldi	r31, 0x0A	; 10
    18fa:	80 81       	ld	r24, Z
    18fc:	80 7f       	andi	r24, 0xF0	; 240
    18fe:	80 83       	st	Z, r24
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b8 e0       	ldi	r27, 0x08	; 8
    1904:	8c 91       	ld	r24, X
    1906:	80 7f       	andi	r24, 0xF0	; 240
    1908:	8c 93       	st	X, r24
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b9 e0       	ldi	r27, 0x09	; 9
    190e:	8c 91       	ld	r24, X
    1910:	80 7f       	andi	r24, 0xF0	; 240
    1912:	8c 93       	st	X, r24
	TCC1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1914:	80 81       	ld	r24, Z
    1916:	80 7f       	andi	r24, 0xF0	; 240
    1918:	80 93 40 08 	sts	0x0840, r24

	//turn off SPI bus and ADC MUX used by ADC
	SPICS(FALSE);
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    1922:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	enableADCMUX(FALSE);
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <enableADCMUX>
	
	//set a global flag to tell system that all the samples have been collected
	ADC_Sampling_Finished = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	80 93 a7 50 	sts	0x50A7, r24
	DataAvailable = 1;
    1932:	80 93 48 3e 	sts	0x3E48, r24
}
    1936:	ff 91       	pop	r31
    1938:	ef 91       	pop	r30
    193a:	bf 91       	pop	r27
    193c:	af 91       	pop	r26
    193e:	9f 91       	pop	r25
    1940:	8f 91       	pop	r24
    1942:	7f 91       	pop	r23
    1944:	6f 91       	pop	r22
    1946:	5f 91       	pop	r21
    1948:	4f 91       	pop	r20
    194a:	3f 91       	pop	r19
    194c:	2f 91       	pop	r18
    194e:	0f 90       	pop	r0
    1950:	0b be       	out	0x3b, r0	; 59
    1952:	0f 90       	pop	r0
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	0f 90       	pop	r0
    1958:	1f 90       	pop	r1
    195a:	18 95       	reti

0000195c <ADC_Stop_Sampling>:

//turns off ADC timers/counters and spi bus 
void ADC_Stop_Sampling(){
	
	// turn off ADC timer(s)
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    195c:	e0 e4       	ldi	r30, 0x40	; 64
    195e:	fa e0       	ldi	r31, 0x0A	; 10
    1960:	80 81       	ld	r24, Z
    1962:	80 7f       	andi	r24, 0xF0	; 240
    1964:	80 83       	st	Z, r24
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1966:	a0 e0       	ldi	r26, 0x00	; 0
    1968:	b8 e0       	ldi	r27, 0x08	; 8
    196a:	8c 91       	ld	r24, X
    196c:	80 7f       	andi	r24, 0xF0	; 240
    196e:	8c 93       	st	X, r24
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1970:	a0 e0       	ldi	r26, 0x00	; 0
    1972:	b9 e0       	ldi	r27, 0x09	; 9
    1974:	8c 91       	ld	r24, X
    1976:	80 7f       	andi	r24, 0xF0	; 240
    1978:	8c 93       	st	X, r24
	TCC1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    197a:	80 81       	ld	r24, Z
    197c:	80 7f       	andi	r24, 0xF0	; 240
    197e:	80 93 40 08 	sts	0x0840, r24

	//turn off SPI bus and ADC MUX used by ADC
	SPICS(FALSE);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    1988:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	enableADCMUX(FALSE);
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <enableADCMUX>
	ADC_Sampling_Finished = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	80 93 a7 50 	sts	0x50A7, r24
	DataAvailable = 1;
    1998:	80 93 48 3e 	sts	0x3E48, r24
}
    199c:	08 95       	ret

0000199e <ADC_Get_Num_Samples>:

//returns number of samples collected by last ADC sampling time
uint16_t ADC_Get_Num_Samples(){
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	0f 92       	push	r0
    19a4:	0f 92       	push	r0
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
	
	if(ADC_Sampling_Finished){
    19aa:	80 91 a7 50 	lds	r24, 0x50A7
    19ae:	88 23       	and	r24, r24
    19b0:	89 f0       	breq	.+34     	; 0x19d4 <ADC_Get_Num_Samples+0x36>
		volatile uint16_t count;
		count = TCC1.CNT;
    19b2:	e0 e4       	ldi	r30, 0x40	; 64
    19b4:	f8 e0       	ldi	r31, 0x08	; 8
    19b6:	80 a1       	lds	r24, 0x40
    19b8:	91 a1       	lds	r25, 0x41
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	9a 83       	std	Y+2, r25	; 0x02
		if(count == 0) count = TCC1.PER;
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	21 f4       	brne	.+8      	; 0x19ce <ADC_Get_Num_Samples+0x30>
    19c6:	86 a1       	lds	r24, 0x46
    19c8:	97 a1       	lds	r25, 0x47
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	9a 83       	std	Y+2, r25	; 0x02
		return count;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <ADC_Get_Num_Samples+0x3a>
	}
	else return 0;		
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <ADC_Pause_Sampling>:

void ADC_Pause_Sampling(){
		//ignore interrupts from the ADC...don't turn it off to avoid the boot up time
	PORTF.INT1MASK = 0x00;
    19e2:	e0 ea       	ldi	r30, 0xA0	; 160
    19e4:	f6 e0       	ldi	r31, 0x06	; 6
    19e6:	13 86       	std	Z+11, r1	; 0x0b
}
    19e8:	08 95       	ret

000019ea <ADC_Resume_Sampling>:

void ADC_Resume_Sampling(){
	//re-enable interrupt on port F which the ADC uses
	PORTF.INT1MASK = PIN0_bm;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	e0 ea       	ldi	r30, 0xA0	; 160
    19ee:	f6 e0       	ldi	r31, 0x06	; 6
    19f0:	83 87       	std	Z+11, r24	; 0x0b
}	
    19f2:	08 95       	ret

000019f4 <__vector_104>:
// 	}	
// 	}	
// }

//ISR used by CO_collectADC function
ISR(PORTF_INT0_vect) {
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	0b b6       	in	r0, 0x3b	; 59
    19fe:	0f 92       	push	r0
    1a00:	11 24       	eor	r1, r1
    1a02:	6f 92       	push	r6
    1a04:	7f 92       	push	r7
    1a06:	8f 92       	push	r8
    1a08:	9f 92       	push	r9
    1a0a:	af 92       	push	r10
    1a0c:	bf 92       	push	r11
    1a0e:	cf 92       	push	r12
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	2f 93       	push	r18
    1a1c:	3f 93       	push	r19
    1a1e:	4f 93       	push	r20
    1a20:	5f 93       	push	r21
    1a22:	6f 93       	push	r22
    1a24:	7f 93       	push	r23
    1a26:	8f 93       	push	r24
    1a28:	9f 93       	push	r25
    1a2a:	af 93       	push	r26
    1a2c:	bf 93       	push	r27
    1a2e:	ef 93       	push	r30
    1a30:	ff 93       	push	r31
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	2c 97       	sbiw	r28, 0x0c	; 12
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	de bf       	out	0x3e, r29	; 62
	// skip first samples because cannot perform recommended reset
	volatile int32_t currentSample;
	volatile int64_t var;
	if (discardCount < ADC_DISCARD) {
    1a40:	80 91 5d 40 	lds	r24, 0x405D
    1a44:	88 23       	and	r24, r24
    1a46:	8c f0       	brlt	.+34     	; 0x1a6a <__vector_104+0x76>
		discardCount++;
    1a48:	80 91 5d 40 	lds	r24, 0x405D
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	80 93 5d 40 	sts	0x405D, r24
		if(discardCount == ADC_DISCARD){
    1a52:	80 91 5d 40 	lds	r24, 0x405D
    1a56:	80 38       	cpi	r24, 0x80	; 128
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <__vector_104+0x68>
    1a5a:	e9 c0       	rjmp	.+466    	; 0x1c2e <__vector_104+0x23a>
			//set event system to update counter of number of samples every sample event from now on
			TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
    1a5c:	e0 e4       	ldi	r30, 0x40	; 64
    1a5e:	f8 e0       	ldi	r31, 0x08	; 8
    1a60:	80 81       	ld	r24, Z
    1a62:	80 7f       	andi	r24, 0xF0	; 240
    1a64:	89 60       	ori	r24, 0x09	; 9
    1a66:	80 83       	st	Z, r24
    1a68:	e2 c0       	rjmp	.+452    	; 0x1c2e <__vector_104+0x23a>
		}
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	e0 ea       	ldi	r30, 0xA0	; 160
    1a74:	f6 e0       	ldi	r31, 0x06	; 6
    1a76:	86 83       	std	Z+6, r24	; 0x06
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1a7c:	e0 ec       	ldi	r30, 0xC0	; 192
    1a7e:	f8 e0       	ldi	r31, 0x08	; 8
    1a80:	5a ea       	ldi	r21, 0xAA	; 170
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
    1a82:	21 e2       	ldi	r18, 0x21	; 33
    1a84:	3e e3       	ldi	r19, 0x3E	; 62
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1a86:	53 83       	std	Z+3, r21	; 0x03
			while(!(SPIC.STATUS & SPI_IF_bm));
    1a88:	42 81       	ldd	r20, Z+2	; 0x02
    1a8a:	44 23       	and	r20, r20
    1a8c:	ec f7       	brge	.-6      	; 0x1a88 <__vector_104+0x94>
			SPIBuffer[bufIndex] = SPIC.DATA;
    1a8e:	43 81       	ldd	r20, Z+3	; 0x03
    1a90:	d9 01       	movw	r26, r18
    1a92:	a8 0f       	add	r26, r24
    1a94:	b9 1f       	adc	r27, r25
    1a96:	4c 93       	st	X, r20
    1a98:	01 96       	adiw	r24, 0x01	; 1
		}
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    1a9a:	83 30       	cpi	r24, 0x03	; 3
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	99 f7       	brne	.-26     	; 0x1a86 <__vector_104+0x92>
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	e0 ea       	ldi	r30, 0xA0	; 160
    1aa4:	f6 e0       	ldi	r31, 0x06	; 6
    1aa6:	85 83       	std	Z+5, r24	; 0x05
		SPICS(FALSE);
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>

		// create 32 bits from SPIBuffer[0:2] with sign extension of SPIBuffer[0][7]
		if(SPIBuffer[0] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    1aae:	80 91 21 3e 	lds	r24, 0x3E21
    1ab2:	88 23       	and	r24, r24
    1ab4:	1c f4       	brge	.+6      	; 0x1abc <__vector_104+0xc8>
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	8c 83       	std	Y+4, r24	; 0x04
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <__vector_104+0xca>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    1abc:	1c 82       	std	Y+4, r1	; 0x04
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[0];
    1abe:	80 91 21 3e 	lds	r24, 0x3E21
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[1];
    1ac4:	80 91 22 3e 	lds	r24, 0x3E22
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[2];
    1aca:	80 91 23 3e 	lds	r24, 0x3E23
    1ace:	89 83       	std	Y+1, r24	; 0x01
		
		//ADC_BUFFER[sampleCount] = (int32_t) -((uint64_t)currentSample * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
		var = currentSample;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ad6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ad8:	ac 01       	movw	r20, r24
    1ada:	bd 01       	movw	r22, r26
    1adc:	77 0f       	add	r23, r23
    1ade:	44 0b       	sbc	r20, r20
    1ae0:	54 2f       	mov	r21, r20
    1ae2:	ba 01       	movw	r22, r20
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	af 83       	std	Y+7, r26	; 0x07
    1aea:	b8 87       	std	Y+8, r27	; 0x08
    1aec:	49 87       	std	Y+9, r20	; 0x09
    1aee:	4a 87       	std	Y+10, r20	; 0x0a
    1af0:	4b 87       	std	Y+11, r20	; 0x0b
    1af2:	4c 87       	std	Y+12, r20	; 0x0c
		ADC_BUFFER[sampleCount%ADC_buffer_size] = (int32_t) -(var * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    1af4:	60 91 66 50 	lds	r22, 0x5066
    1af8:	70 91 67 50 	lds	r23, 0x5067
    1afc:	80 91 68 50 	lds	r24, 0x5068
    1b00:	90 91 69 50 	lds	r25, 0x5069
    1b04:	8d 80       	ldd	r8, Y+5	; 0x05
    1b06:	1e 81       	ldd	r17, Y+6	; 0x06
    1b08:	0f 81       	ldd	r16, Y+7	; 0x07
    1b0a:	f8 84       	ldd	r15, Y+8	; 0x08
    1b0c:	e9 84       	ldd	r14, Y+9	; 0x09
    1b0e:	da 84       	ldd	r13, Y+10	; 0x0a
    1b10:	cb 84       	ldd	r12, Y+11	; 0x0b
    1b12:	bc 84       	ldd	r11, Y+12	; 0x0c
    1b14:	20 91 a8 50 	lds	r18, 0x50A8
    1b18:	30 91 a9 50 	lds	r19, 0x50A9
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    1b24:	66 0f       	add	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	66 0f       	add	r22, r22
    1b2a:	77 1f       	adc	r23, r23
    1b2c:	80 91 64 50 	lds	r24, 0x5064
    1b30:	90 91 65 50 	lds	r25, 0x5065
    1b34:	3c 01       	movw	r6, r24
    1b36:	66 0e       	add	r6, r22
    1b38:	77 1e       	adc	r7, r23
    1b3a:	28 2d       	mov	r18, r8
    1b3c:	31 2f       	mov	r19, r17
    1b3e:	40 2f       	mov	r20, r16
    1b40:	5f 2d       	mov	r21, r15
    1b42:	6e 2d       	mov	r22, r14
    1b44:	7d 2d       	mov	r23, r13
    1b46:	8c 2d       	mov	r24, r12
    1b48:	9b 2d       	mov	r25, r11
    1b4a:	0f 2e       	mov	r0, r31
    1b4c:	f0 ea       	ldi	r31, 0xA0	; 160
    1b4e:	af 2e       	mov	r10, r31
    1b50:	f0 2d       	mov	r31, r0
    1b52:	0f 2e       	mov	r0, r31
    1b54:	f5 e2       	ldi	r31, 0x25	; 37
    1b56:	bf 2e       	mov	r11, r31
    1b58:	f0 2d       	mov	r31, r0
    1b5a:	0f 2e       	mov	r0, r31
    1b5c:	f6 e2       	ldi	r31, 0x26	; 38
    1b5e:	cf 2e       	mov	r12, r31
    1b60:	f0 2d       	mov	r31, r0
    1b62:	dd 24       	eor	r13, r13
    1b64:	ee 24       	eor	r14, r14
    1b66:	ff 24       	eor	r15, r15
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__muldi3>
    1b70:	aa 24       	eor	r10, r10
    1b72:	aa 94       	dec	r10
    1b74:	bb 24       	eor	r11, r11
    1b76:	ba 94       	dec	r11
    1b78:	0f 2e       	mov	r0, r31
    1b7a:	ff e7       	ldi	r31, 0x7F	; 127
    1b7c:	cf 2e       	mov	r12, r31
    1b7e:	f0 2d       	mov	r31, r0
    1b80:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__divdi3>
    1b84:	01 e0       	ldi	r16, 0x01	; 1
    1b86:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <__ashldi3>
    1b8a:	0f 2e       	mov	r0, r31
    1b8c:	f3 e0       	ldi	r31, 0x03	; 3
    1b8e:	af 2e       	mov	r10, r31
    1b90:	f0 2d       	mov	r31, r0
    1b92:	bb 24       	eor	r11, r11
    1b94:	cc 24       	eor	r12, r12
    1b96:	00 e0       	ldi	r16, 0x00	; 0
    1b98:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__divdi3>
    1b9c:	82 2e       	mov	r8, r18
    1b9e:	93 2e       	mov	r9, r19
    1ba0:	a4 2e       	mov	r10, r20
    1ba2:	b5 2e       	mov	r11, r21
    1ba4:	b0 94       	com	r11
    1ba6:	a0 94       	com	r10
    1ba8:	90 94       	com	r9
    1baa:	80 94       	com	r8
    1bac:	81 1c       	adc	r8, r1
    1bae:	91 1c       	adc	r9, r1
    1bb0:	a1 1c       	adc	r10, r1
    1bb2:	b1 1c       	adc	r11, r1
    1bb4:	f3 01       	movw	r30, r6
    1bb6:	80 82       	st	Z, r8
    1bb8:	91 82       	std	Z+1, r9	; 0x01
    1bba:	a2 82       	std	Z+2, r10	; 0x02
    1bbc:	b3 82       	std	Z+3, r11	; 0x03
		if(write_to_FRAM){
    1bbe:	80 91 49 40 	lds	r24, 0x4049
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f1       	breq	.+66     	; 0x1c08 <__vector_104+0x214>
			writeFRAM((uint8_t*)(ADC_BUFFER+(sampleCount%ADC_buffer_size)), 4);
    1bc6:	60 91 66 50 	lds	r22, 0x5066
    1bca:	70 91 67 50 	lds	r23, 0x5067
    1bce:	80 91 68 50 	lds	r24, 0x5068
    1bd2:	90 91 69 50 	lds	r25, 0x5069
    1bd6:	20 91 a8 50 	lds	r18, 0x50A8
    1bda:	30 91 a9 50 	lds	r19, 0x50A9
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9c 01       	movw	r18, r24
    1bec:	22 0f       	add	r18, r18
    1bee:	33 1f       	adc	r19, r19
    1bf0:	22 0f       	add	r18, r18
    1bf2:	33 1f       	adc	r19, r19
    1bf4:	80 91 64 50 	lds	r24, 0x5064
    1bf8:	90 91 65 50 	lds	r25, 0x5065
    1bfc:	82 0f       	add	r24, r18
    1bfe:	93 1f       	adc	r25, r19
    1c00:	64 e0       	ldi	r22, 0x04	; 4
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	0e 94 39 01 	call	0x272	; 0x272 <writeFRAM>
		}
		sampleCount++;
    1c08:	80 91 66 50 	lds	r24, 0x5066
    1c0c:	90 91 67 50 	lds	r25, 0x5067
    1c10:	a0 91 68 50 	lds	r26, 0x5068
    1c14:	b0 91 69 50 	lds	r27, 0x5069
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	a1 1d       	adc	r26, r1
    1c1c:	b1 1d       	adc	r27, r1
    1c1e:	80 93 66 50 	sts	0x5066, r24
    1c22:	90 93 67 50 	sts	0x5067, r25
    1c26:	a0 93 68 50 	sts	0x5068, r26
    1c2a:	b0 93 69 50 	sts	0x5069, r27
	}
}
    1c2e:	2c 96       	adiw	r28, 0x0c	; 12
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	ff 91       	pop	r31
    1c3a:	ef 91       	pop	r30
    1c3c:	bf 91       	pop	r27
    1c3e:	af 91       	pop	r26
    1c40:	9f 91       	pop	r25
    1c42:	8f 91       	pop	r24
    1c44:	7f 91       	pop	r23
    1c46:	6f 91       	pop	r22
    1c48:	5f 91       	pop	r21
    1c4a:	4f 91       	pop	r20
    1c4c:	3f 91       	pop	r19
    1c4e:	2f 91       	pop	r18
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	cf 90       	pop	r12
    1c5c:	bf 90       	pop	r11
    1c5e:	af 90       	pop	r10
    1c60:	9f 90       	pop	r9
    1c62:	8f 90       	pop	r8
    1c64:	7f 90       	pop	r7
    1c66:	6f 90       	pop	r6
    1c68:	0f 90       	pop	r0
    1c6a:	0b be       	out	0x3b, r0	; 59
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <ACC_DCPassEnable>:

// Enable DC Pass for acc
// Pull PIO27 high to enable
void ACC_DCPassEnable(uint8_t enable) {
	if (enable) {
    1c76:	88 23       	and	r24, r24
    1c78:	49 f0       	breq	.+18     	; 0x1c8c <ACC_DCPassEnable+0x16>
		PortEx_DIRSET(BIT5_bm, PS_BANKB);
    1c7a:	80 e2       	ldi	r24, 0x20	; 32
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
		PortEx_OUTSET(BIT5_bm, PS_BANKB);
    1c82:	80 e2       	ldi	r24, 0x20	; 32
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
    1c8a:	08 95       	ret
		//setPortEx(BIT5_bm, PS_BANKB);
	} else {
		PortEx_DIRCLR(BIT5_bm, PS_BANKB);
    1c8c:	80 e2       	ldi	r24, 0x20	; 32
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	0e 94 0c 05 	call	0xa18	; 0xa18 <PortEx_DIRCLR>
    1c94:	08 95       	ret

00001c96 <__vector_14>:
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    1c96:	1f 92       	push	r1
    1c98:	0f 92       	push	r0
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	0f 92       	push	r0
    1c9e:	0b b6       	in	r0, 0x3b	; 59
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	6f 92       	push	r6
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	2f 93       	push	r18
    1cbe:	3f 93       	push	r19
    1cc0:	4f 93       	push	r20
    1cc2:	5f 93       	push	r21
    1cc4:	6f 93       	push	r22
    1cc6:	7f 93       	push	r23
    1cc8:	8f 93       	push	r24
    1cca:	9f 93       	push	r25
    1ccc:	af 93       	push	r26
    1cce:	bf 93       	push	r27
    1cd0:	ef 93       	push	r30
    1cd2:	ff 93       	push	r31
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	2c 97       	sbiw	r28, 0x0c	; 12
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	de bf       	out	0x3e, r29	; 62
	volatile int64_t sum = 0;
    1ce2:	19 82       	std	Y+1, r1	; 0x01
    1ce4:	1a 82       	std	Y+2, r1	; 0x02
    1ce6:	1b 82       	std	Y+3, r1	; 0x03
    1ce8:	1c 82       	std	Y+4, r1	; 0x04
    1cea:	1d 82       	std	Y+5, r1	; 0x05
    1cec:	1e 82       	std	Y+6, r1	; 0x06
    1cee:	1f 82       	std	Y+7, r1	; 0x07
    1cf0:	18 86       	std	Y+8, r1	; 0x08
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    1cf6:	21 e2       	ldi	r18, 0x21	; 33
    1cf8:	3e e3       	ldi	r19, 0x3E	; 62
    1cfa:	88 24       	eor	r8, r8
    1cfc:	8a 94       	dec	r8
    1cfe:	ac 01       	movw	r20, r24
    1d00:	f9 01       	movw	r30, r18
    1d02:	e8 0f       	add	r30, r24
    1d04:	f9 1f       	adc	r31, r25
    1d06:	60 81       	ld	r22, Z
    1d08:	66 23       	and	r22, r22
    1d0a:	14 f4       	brge	.+4      	; 0x1d10 <__vector_14+0x7a>
    1d0c:	8c 86       	std	Y+12, r8	; 0x0c
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <__vector_14+0x7c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    1d10:	1c 86       	std	Y+12, r1	; 0x0c
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    1d12:	42 0f       	add	r20, r18
    1d14:	53 1f       	adc	r21, r19
    1d16:	fa 01       	movw	r30, r20
    1d18:	40 81       	ld	r20, Z
    1d1a:	4b 87       	std	Y+11, r20	; 0x0b
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	31 96       	adiw	r30, 0x01	; 1
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    1d20:	e2 0f       	add	r30, r18
    1d22:	f3 1f       	adc	r31, r19
    1d24:	40 81       	ld	r20, Z
    1d26:	4a 87       	std	Y+10, r20	; 0x0a
	}
	
}

//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
    1d28:	fc 01       	movw	r30, r24
    1d2a:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    1d2c:	e2 0f       	add	r30, r18
    1d2e:	f3 1f       	adc	r31, r19
    1d30:	40 81       	ld	r20, Z
    1d32:	49 87       	std	Y+9, r20	; 0x09
		sum += currentSample;
    1d34:	49 85       	ldd	r20, Y+9	; 0x09
    1d36:	5a 85       	ldd	r21, Y+10	; 0x0a
    1d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3c:	a9 80       	ldd	r10, Y+1	; 0x01
    1d3e:	ba 80       	ldd	r11, Y+2	; 0x02
    1d40:	cb 80       	ldd	r12, Y+3	; 0x03
    1d42:	dc 80       	ldd	r13, Y+4	; 0x04
    1d44:	ed 80       	ldd	r14, Y+5	; 0x05
    1d46:	fe 80       	ldd	r15, Y+6	; 0x06
    1d48:	0f 81       	ldd	r16, Y+7	; 0x07
    1d4a:	18 85       	ldd	r17, Y+8	; 0x08
    1d4c:	b4 2f       	mov	r27, r20
    1d4e:	a5 2f       	mov	r26, r21
    1d50:	f6 2f       	mov	r31, r22
    1d52:	e7 2f       	mov	r30, r23
    1d54:	77 0f       	add	r23, r23
    1d56:	44 0b       	sbc	r20, r20
    1d58:	54 2f       	mov	r21, r20
    1d5a:	ba 01       	movw	r22, r20
    1d5c:	64 2e       	mov	r6, r20
    1d5e:	74 2e       	mov	r7, r20
    1d60:	94 2e       	mov	r9, r20
    1d62:	ab 0e       	add	r10, r27
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	ab 16       	cp	r10, r27
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <__vector_14+0xd6>
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	ba 0e       	add	r11, r26
    1d6e:	51 e0       	ldi	r21, 0x01	; 1
    1d70:	ba 16       	cp	r11, r26
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <__vector_14+0xe0>
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	a6 2f       	mov	r26, r22
    1d78:	ab 0d       	add	r26, r11
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	ab 15       	cp	r26, r11
    1d7e:	08 f0       	brcs	.+2      	; 0x1d82 <__vector_14+0xec>
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	56 2b       	or	r21, r22
    1d84:	cf 0e       	add	r12, r31
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	cf 16       	cp	r12, r31
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <__vector_14+0xf8>
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	f5 2f       	mov	r31, r21
    1d90:	fc 0d       	add	r31, r12
    1d92:	51 e0       	ldi	r21, 0x01	; 1
    1d94:	fc 15       	cp	r31, r12
    1d96:	08 f0       	brcs	.+2      	; 0x1d9a <__vector_14+0x104>
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	65 2b       	or	r22, r21
    1d9c:	de 0e       	add	r13, r30
    1d9e:	51 e0       	ldi	r21, 0x01	; 1
    1da0:	de 16       	cp	r13, r30
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <__vector_14+0x110>
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	e6 2f       	mov	r30, r22
    1da8:	ed 0d       	add	r30, r13
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	ed 15       	cp	r30, r13
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <__vector_14+0x11c>
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	56 2b       	or	r21, r22
    1db4:	e6 0c       	add	r14, r6
    1db6:	71 e0       	ldi	r23, 0x01	; 1
    1db8:	e6 14       	cp	r14, r6
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <__vector_14+0x128>
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	b5 2f       	mov	r27, r21
    1dc0:	be 0d       	add	r27, r14
    1dc2:	51 e0       	ldi	r21, 0x01	; 1
    1dc4:	be 15       	cp	r27, r14
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <__vector_14+0x134>
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	75 2b       	or	r23, r21
    1dcc:	f7 0c       	add	r15, r7
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	f7 14       	cp	r15, r7
    1dd2:	08 f0       	brcs	.+2      	; 0x1dd6 <__vector_14+0x140>
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	7f 0d       	add	r23, r15
    1dd8:	51 e0       	ldi	r21, 0x01	; 1
    1dda:	7f 15       	cp	r23, r15
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <__vector_14+0x14a>
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	65 2b       	or	r22, r21
    1de2:	09 0d       	add	r16, r9
    1de4:	51 e0       	ldi	r21, 0x01	; 1
    1de6:	09 15       	cp	r16, r9
    1de8:	08 f0       	brcs	.+2      	; 0x1dec <__vector_14+0x156>
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	60 0f       	add	r22, r16
    1dee:	ff 24       	eor	r15, r15
    1df0:	f3 94       	inc	r15
    1df2:	60 17       	cp	r22, r16
    1df4:	08 f0       	brcs	.+2      	; 0x1df8 <__vector_14+0x162>
    1df6:	ff 24       	eor	r15, r15
    1df8:	5f 29       	or	r21, r15
    1dfa:	41 0f       	add	r20, r17
    1dfc:	54 0f       	add	r21, r20
    1dfe:	a9 82       	std	Y+1, r10	; 0x01
    1e00:	aa 83       	std	Y+2, r26	; 0x02
    1e02:	fb 83       	std	Y+3, r31	; 0x03
    1e04:	ec 83       	std	Y+4, r30	; 0x04
    1e06:	bd 83       	std	Y+5, r27	; 0x05
    1e08:	7e 83       	std	Y+6, r23	; 0x06
    1e0a:	6f 83       	std	Y+7, r22	; 0x07
    1e0c:	58 87       	std	Y+8, r21	; 0x08
    1e0e:	03 96       	adiw	r24, 0x03	; 3
//consolidate the 4 averaging points
ISR(TCC0_OVF_vect) {
	volatile int64_t sum = 0;
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    1e10:	8c 30       	cpi	r24, 0x0C	; 12
    1e12:	91 05       	cpc	r25, r1
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <__vector_14+0x182>
    1e16:	73 cf       	rjmp	.-282    	; 0x1cfe <__vector_14+0x68>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
		
	sum = sum / 4;
    1e18:	e9 80       	ldd	r14, Y+1	; 0x01
    1e1a:	fa 80       	ldd	r15, Y+2	; 0x02
    1e1c:	0b 81       	ldd	r16, Y+3	; 0x03
    1e1e:	1c 81       	ldd	r17, Y+4	; 0x04
    1e20:	bd 81       	ldd	r27, Y+5	; 0x05
    1e22:	ae 81       	ldd	r26, Y+6	; 0x06
    1e24:	ff 81       	ldd	r31, Y+7	; 0x07
    1e26:	e8 85       	ldd	r30, Y+8	; 0x08
    1e28:	2e 2d       	mov	r18, r14
    1e2a:	3f 2d       	mov	r19, r15
    1e2c:	40 2f       	mov	r20, r16
    1e2e:	51 2f       	mov	r21, r17
    1e30:	6b 2f       	mov	r22, r27
    1e32:	7a 2f       	mov	r23, r26
    1e34:	8f 2f       	mov	r24, r31
    1e36:	9e 2f       	mov	r25, r30
    1e38:	ee 23       	and	r30, r30
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <__vector_14+0x1a8>
    1e3c:	4a c0       	rjmp	.+148    	; 0x1ed2 <__vector_14+0x23c>
    1e3e:	93 e0       	ldi	r25, 0x03	; 3
    1e40:	e9 0e       	add	r14, r25
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	e2 16       	cp	r14, r18
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <__vector_14+0x1b4>
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	21 e0       	ldi	r18, 0x01	; 1
    1e4c:	f3 16       	cp	r15, r19
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <__vector_14+0x1bc>
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	39 2f       	mov	r19, r25
    1e54:	3f 0d       	add	r19, r15
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	3f 15       	cp	r19, r15
    1e5a:	08 f0       	brcs	.+2      	; 0x1e5e <__vector_14+0x1c8>
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	29 2b       	or	r18, r25
    1e60:	91 e0       	ldi	r25, 0x01	; 1
    1e62:	04 17       	cp	r16, r20
    1e64:	08 f0       	brcs	.+2      	; 0x1e68 <__vector_14+0x1d2>
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	42 2f       	mov	r20, r18
    1e6a:	40 0f       	add	r20, r16
    1e6c:	21 e0       	ldi	r18, 0x01	; 1
    1e6e:	40 17       	cp	r20, r16
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <__vector_14+0x1de>
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	92 2b       	or	r25, r18
    1e76:	21 e0       	ldi	r18, 0x01	; 1
    1e78:	15 17       	cp	r17, r21
    1e7a:	08 f0       	brcs	.+2      	; 0x1e7e <__vector_14+0x1e8>
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	59 2f       	mov	r21, r25
    1e80:	51 0f       	add	r21, r17
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	51 17       	cp	r21, r17
    1e86:	08 f0       	brcs	.+2      	; 0x1e8a <__vector_14+0x1f4>
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	29 2b       	or	r18, r25
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	b6 17       	cp	r27, r22
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <__vector_14+0x1fe>
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	62 2f       	mov	r22, r18
    1e96:	6b 0f       	add	r22, r27
    1e98:	21 e0       	ldi	r18, 0x01	; 1
    1e9a:	6b 17       	cp	r22, r27
    1e9c:	08 f0       	brcs	.+2      	; 0x1ea0 <__vector_14+0x20a>
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	92 2b       	or	r25, r18
    1ea2:	21 e0       	ldi	r18, 0x01	; 1
    1ea4:	a7 17       	cp	r26, r23
    1ea6:	08 f0       	brcs	.+2      	; 0x1eaa <__vector_14+0x214>
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	79 2f       	mov	r23, r25
    1eac:	7a 0f       	add	r23, r26
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	7a 17       	cp	r23, r26
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <__vector_14+0x220>
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	29 2b       	or	r18, r25
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	f8 17       	cp	r31, r24
    1ebc:	08 f0       	brcs	.+2      	; 0x1ec0 <__vector_14+0x22a>
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	82 2f       	mov	r24, r18
    1ec2:	8f 0f       	add	r24, r31
    1ec4:	21 e0       	ldi	r18, 0x01	; 1
    1ec6:	8f 17       	cp	r24, r31
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <__vector_14+0x236>
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	92 2b       	or	r25, r18
    1ece:	2e 2d       	mov	r18, r14
    1ed0:	9e 0f       	add	r25, r30
    1ed2:	02 e0       	ldi	r16, 0x02	; 2
    1ed4:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <__ashrdi3>
    1ed8:	29 83       	std	Y+1, r18	; 0x01
    1eda:	3a 83       	std	Y+2, r19	; 0x02
    1edc:	4b 83       	std	Y+3, r20	; 0x03
    1ede:	5c 83       	std	Y+4, r21	; 0x04
    1ee0:	6d 83       	std	Y+5, r22	; 0x05
    1ee2:	7e 83       	std	Y+6, r23	; 0x06
    1ee4:	8f 83       	std	Y+7, r24	; 0x07
    1ee6:	98 87       	std	Y+8, r25	; 0x08
	ADC_BUFFER[sampleCount%ADC_buffer_size] = (int32_t)(sum * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    1ee8:	60 91 66 50 	lds	r22, 0x5066
    1eec:	70 91 67 50 	lds	r23, 0x5067
    1ef0:	80 91 68 50 	lds	r24, 0x5068
    1ef4:	90 91 69 50 	lds	r25, 0x5069
    1ef8:	19 81       	ldd	r17, Y+1	; 0x01
    1efa:	0a 81       	ldd	r16, Y+2	; 0x02
    1efc:	fb 80       	ldd	r15, Y+3	; 0x03
    1efe:	ec 80       	ldd	r14, Y+4	; 0x04
    1f00:	dd 80       	ldd	r13, Y+5	; 0x05
    1f02:	ce 80       	ldd	r12, Y+6	; 0x06
    1f04:	bf 80       	ldd	r11, Y+7	; 0x07
    1f06:	a8 84       	ldd	r10, Y+8	; 0x08
    1f08:	20 91 a8 50 	lds	r18, 0x50A8
    1f0c:	30 91 a9 50 	lds	r19, 0x50A9
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	80 90 64 50 	lds	r8, 0x5064
    1f28:	90 90 65 50 	lds	r9, 0x5065
    1f2c:	88 0e       	add	r8, r24
    1f2e:	99 1e       	adc	r9, r25
    1f30:	21 2f       	mov	r18, r17
    1f32:	30 2f       	mov	r19, r16
    1f34:	4f 2d       	mov	r20, r15
    1f36:	5e 2d       	mov	r21, r14
    1f38:	6d 2d       	mov	r22, r13
    1f3a:	7c 2d       	mov	r23, r12
    1f3c:	8b 2d       	mov	r24, r11
    1f3e:	9a 2d       	mov	r25, r10
    1f40:	0f 2e       	mov	r0, r31
    1f42:	f0 ea       	ldi	r31, 0xA0	; 160
    1f44:	af 2e       	mov	r10, r31
    1f46:	f0 2d       	mov	r31, r0
    1f48:	0f 2e       	mov	r0, r31
    1f4a:	f5 e2       	ldi	r31, 0x25	; 37
    1f4c:	bf 2e       	mov	r11, r31
    1f4e:	f0 2d       	mov	r31, r0
    1f50:	0f 2e       	mov	r0, r31
    1f52:	f6 e2       	ldi	r31, 0x26	; 38
    1f54:	cf 2e       	mov	r12, r31
    1f56:	f0 2d       	mov	r31, r0
    1f58:	dd 24       	eor	r13, r13
    1f5a:	ee 24       	eor	r14, r14
    1f5c:	ff 24       	eor	r15, r15
    1f5e:	00 e0       	ldi	r16, 0x00	; 0
    1f60:	10 e0       	ldi	r17, 0x00	; 0
    1f62:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__muldi3>
    1f66:	aa 24       	eor	r10, r10
    1f68:	aa 94       	dec	r10
    1f6a:	bb 24       	eor	r11, r11
    1f6c:	ba 94       	dec	r11
    1f6e:	0f 2e       	mov	r0, r31
    1f70:	ff e7       	ldi	r31, 0x7F	; 127
    1f72:	cf 2e       	mov	r12, r31
    1f74:	f0 2d       	mov	r31, r0
    1f76:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__divdi3>
    1f7a:	01 e0       	ldi	r16, 0x01	; 1
    1f7c:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <__ashldi3>
    1f80:	0f 2e       	mov	r0, r31
    1f82:	f3 e0       	ldi	r31, 0x03	; 3
    1f84:	af 2e       	mov	r10, r31
    1f86:	f0 2d       	mov	r31, r0
    1f88:	bb 24       	eor	r11, r11
    1f8a:	cc 24       	eor	r12, r12
    1f8c:	00 e0       	ldi	r16, 0x00	; 0
    1f8e:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__divdi3>
    1f92:	f4 01       	movw	r30, r8
    1f94:	20 83       	st	Z, r18
    1f96:	31 83       	std	Z+1, r19	; 0x01
    1f98:	42 83       	std	Z+2, r20	; 0x02
    1f9a:	53 83       	std	Z+3, r21	; 0x03
	if(write_to_FRAM){
    1f9c:	80 91 49 40 	lds	r24, 0x4049
    1fa0:	88 23       	and	r24, r24
    1fa2:	09 f1       	breq	.+66     	; 0x1fe6 <__vector_14+0x350>
		writeFRAM((uint8_t*)(ADC_BUFFER+(sampleCount%ADC_buffer_size)), 4);
    1fa4:	60 91 66 50 	lds	r22, 0x5066
    1fa8:	70 91 67 50 	lds	r23, 0x5067
    1fac:	80 91 68 50 	lds	r24, 0x5068
    1fb0:	90 91 69 50 	lds	r25, 0x5069
    1fb4:	20 91 a8 50 	lds	r18, 0x50A8
    1fb8:	30 91 a9 50 	lds	r19, 0x50A9
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9c 01       	movw	r18, r24
    1fca:	22 0f       	add	r18, r18
    1fcc:	33 1f       	adc	r19, r19
    1fce:	22 0f       	add	r18, r18
    1fd0:	33 1f       	adc	r19, r19
    1fd2:	80 91 64 50 	lds	r24, 0x5064
    1fd6:	90 91 65 50 	lds	r25, 0x5065
    1fda:	82 0f       	add	r24, r18
    1fdc:	93 1f       	adc	r25, r19
    1fde:	64 e0       	ldi	r22, 0x04	; 4
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	0e 94 39 01 	call	0x272	; 0x272 <writeFRAM>
	}
	sampleCount++;
    1fe6:	80 91 66 50 	lds	r24, 0x5066
    1fea:	90 91 67 50 	lds	r25, 0x5067
    1fee:	a0 91 68 50 	lds	r26, 0x5068
    1ff2:	b0 91 69 50 	lds	r27, 0x5069
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	b1 1d       	adc	r27, r1
    1ffc:	80 93 66 50 	sts	0x5066, r24
    2000:	90 93 67 50 	sts	0x5067, r25
    2004:	a0 93 68 50 	sts	0x5068, r26
    2008:	b0 93 69 50 	sts	0x5069, r27

}
    200c:	2c 96       	adiw	r28, 0x0c	; 12
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	ff 91       	pop	r31
    2018:	ef 91       	pop	r30
    201a:	bf 91       	pop	r27
    201c:	af 91       	pop	r26
    201e:	9f 91       	pop	r25
    2020:	8f 91       	pop	r24
    2022:	7f 91       	pop	r23
    2024:	6f 91       	pop	r22
    2026:	5f 91       	pop	r21
    2028:	4f 91       	pop	r20
    202a:	3f 91       	pop	r19
    202c:	2f 91       	pop	r18
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	df 90       	pop	r13
    2038:	cf 90       	pop	r12
    203a:	bf 90       	pop	r11
    203c:	af 90       	pop	r10
    203e:	9f 90       	pop	r9
    2040:	8f 90       	pop	r8
    2042:	7f 90       	pop	r7
    2044:	6f 90       	pop	r6
    2046:	0f 90       	pop	r0
    2048:	0b be       	out	0x3b, r0	; 59
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <__vector_77>:
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    2054:	1f 92       	push	r1
    2056:	0f 92       	push	r0
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	0f 92       	push	r0
    205c:	0b b6       	in	r0, 0x3b	; 59
    205e:	0f 92       	push	r0
    2060:	11 24       	eor	r1, r1
    2062:	6f 92       	push	r6
    2064:	7f 92       	push	r7
    2066:	8f 92       	push	r8
    2068:	9f 92       	push	r9
    206a:	af 92       	push	r10
    206c:	bf 92       	push	r11
    206e:	cf 92       	push	r12
    2070:	df 92       	push	r13
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	2f 93       	push	r18
    207c:	3f 93       	push	r19
    207e:	4f 93       	push	r20
    2080:	5f 93       	push	r21
    2082:	6f 93       	push	r22
    2084:	7f 93       	push	r23
    2086:	8f 93       	push	r24
    2088:	9f 93       	push	r25
    208a:	af 93       	push	r26
    208c:	bf 93       	push	r27
    208e:	ef 93       	push	r30
    2090:	ff 93       	push	r31
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	2c 97       	sbiw	r28, 0x0c	; 12
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	de bf       	out	0x3e, r29	; 62

	volatile int64_t sum = 0;
    20a0:	19 82       	std	Y+1, r1	; 0x01
    20a2:	1a 82       	std	Y+2, r1	; 0x02
    20a4:	1b 82       	std	Y+3, r1	; 0x03
    20a6:	1c 82       	std	Y+4, r1	; 0x04
    20a8:	1d 82       	std	Y+5, r1	; 0x05
    20aa:	1e 82       	std	Y+6, r1	; 0x06
    20ac:	1f 82       	std	Y+7, r1	; 0x07
    20ae:	18 86       	std	Y+8, r1	; 0x08
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    20b4:	21 e2       	ldi	r18, 0x21	; 33
    20b6:	3e e3       	ldi	r19, 0x3E	; 62
    20b8:	88 24       	eor	r8, r8
    20ba:	8a 94       	dec	r8
    20bc:	ac 01       	movw	r20, r24
    20be:	f9 01       	movw	r30, r18
    20c0:	e8 0f       	add	r30, r24
    20c2:	f9 1f       	adc	r31, r25
    20c4:	60 81       	ld	r22, Z
    20c6:	66 23       	and	r22, r22
    20c8:	14 f4       	brge	.+4      	; 0x20ce <__vector_77+0x7a>
    20ca:	8c 86       	std	Y+12, r8	; 0x0c
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <__vector_77+0x7c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    20ce:	1c 86       	std	Y+12, r1	; 0x0c
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    20d0:	42 0f       	add	r20, r18
    20d2:	53 1f       	adc	r21, r19
    20d4:	fa 01       	movw	r30, r20
    20d6:	40 81       	ld	r20, Z
    20d8:	4b 87       	std	Y+11, r20	; 0x0b
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    20da:	fc 01       	movw	r30, r24
    20dc:	31 96       	adiw	r30, 0x01	; 1
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    20de:	e2 0f       	add	r30, r18
    20e0:	f3 1f       	adc	r31, r19
    20e2:	40 81       	ld	r20, Z
    20e4:	4a 87       	std	Y+10, r20	; 0x0a
	sampleCurrentChannel();
	SPICount = 0;
}

//consolidate the 4 averaging points
ISR(TCD0_OVF_vect) {
    20e6:	fc 01       	movw	r30, r24
    20e8:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	40 81       	ld	r20, Z
    20f0:	49 87       	std	Y+9, r20	; 0x09
		sum += currentSample;
    20f2:	49 85       	ldd	r20, Y+9	; 0x09
    20f4:	5a 85       	ldd	r21, Y+10	; 0x0a
    20f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fa:	a9 80       	ldd	r10, Y+1	; 0x01
    20fc:	ba 80       	ldd	r11, Y+2	; 0x02
    20fe:	cb 80       	ldd	r12, Y+3	; 0x03
    2100:	dc 80       	ldd	r13, Y+4	; 0x04
    2102:	ed 80       	ldd	r14, Y+5	; 0x05
    2104:	fe 80       	ldd	r15, Y+6	; 0x06
    2106:	0f 81       	ldd	r16, Y+7	; 0x07
    2108:	18 85       	ldd	r17, Y+8	; 0x08
    210a:	b4 2f       	mov	r27, r20
    210c:	a5 2f       	mov	r26, r21
    210e:	f6 2f       	mov	r31, r22
    2110:	e7 2f       	mov	r30, r23
    2112:	77 0f       	add	r23, r23
    2114:	44 0b       	sbc	r20, r20
    2116:	54 2f       	mov	r21, r20
    2118:	ba 01       	movw	r22, r20
    211a:	64 2e       	mov	r6, r20
    211c:	74 2e       	mov	r7, r20
    211e:	94 2e       	mov	r9, r20
    2120:	ab 0e       	add	r10, r27
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	ab 16       	cp	r10, r27
    2126:	08 f0       	brcs	.+2      	; 0x212a <__vector_77+0xd6>
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	ba 0e       	add	r11, r26
    212c:	51 e0       	ldi	r21, 0x01	; 1
    212e:	ba 16       	cp	r11, r26
    2130:	08 f0       	brcs	.+2      	; 0x2134 <__vector_77+0xe0>
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	a6 2f       	mov	r26, r22
    2136:	ab 0d       	add	r26, r11
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	ab 15       	cp	r26, r11
    213c:	08 f0       	brcs	.+2      	; 0x2140 <__vector_77+0xec>
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	56 2b       	or	r21, r22
    2142:	cf 0e       	add	r12, r31
    2144:	61 e0       	ldi	r22, 0x01	; 1
    2146:	cf 16       	cp	r12, r31
    2148:	08 f0       	brcs	.+2      	; 0x214c <__vector_77+0xf8>
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	f5 2f       	mov	r31, r21
    214e:	fc 0d       	add	r31, r12
    2150:	51 e0       	ldi	r21, 0x01	; 1
    2152:	fc 15       	cp	r31, r12
    2154:	08 f0       	brcs	.+2      	; 0x2158 <__vector_77+0x104>
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	65 2b       	or	r22, r21
    215a:	de 0e       	add	r13, r30
    215c:	51 e0       	ldi	r21, 0x01	; 1
    215e:	de 16       	cp	r13, r30
    2160:	08 f0       	brcs	.+2      	; 0x2164 <__vector_77+0x110>
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	e6 2f       	mov	r30, r22
    2166:	ed 0d       	add	r30, r13
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	ed 15       	cp	r30, r13
    216c:	08 f0       	brcs	.+2      	; 0x2170 <__vector_77+0x11c>
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	56 2b       	or	r21, r22
    2172:	e6 0c       	add	r14, r6
    2174:	71 e0       	ldi	r23, 0x01	; 1
    2176:	e6 14       	cp	r14, r6
    2178:	08 f0       	brcs	.+2      	; 0x217c <__vector_77+0x128>
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	b5 2f       	mov	r27, r21
    217e:	be 0d       	add	r27, r14
    2180:	51 e0       	ldi	r21, 0x01	; 1
    2182:	be 15       	cp	r27, r14
    2184:	08 f0       	brcs	.+2      	; 0x2188 <__vector_77+0x134>
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	75 2b       	or	r23, r21
    218a:	f7 0c       	add	r15, r7
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	f7 14       	cp	r15, r7
    2190:	08 f0       	brcs	.+2      	; 0x2194 <__vector_77+0x140>
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	7f 0d       	add	r23, r15
    2196:	51 e0       	ldi	r21, 0x01	; 1
    2198:	7f 15       	cp	r23, r15
    219a:	08 f0       	brcs	.+2      	; 0x219e <__vector_77+0x14a>
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	65 2b       	or	r22, r21
    21a0:	09 0d       	add	r16, r9
    21a2:	51 e0       	ldi	r21, 0x01	; 1
    21a4:	09 15       	cp	r16, r9
    21a6:	08 f0       	brcs	.+2      	; 0x21aa <__vector_77+0x156>
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	60 0f       	add	r22, r16
    21ac:	ff 24       	eor	r15, r15
    21ae:	f3 94       	inc	r15
    21b0:	60 17       	cp	r22, r16
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <__vector_77+0x162>
    21b4:	ff 24       	eor	r15, r15
    21b6:	5f 29       	or	r21, r15
    21b8:	41 0f       	add	r20, r17
    21ba:	54 0f       	add	r21, r20
    21bc:	a9 82       	std	Y+1, r10	; 0x01
    21be:	aa 83       	std	Y+2, r26	; 0x02
    21c0:	fb 83       	std	Y+3, r31	; 0x03
    21c2:	ec 83       	std	Y+4, r30	; 0x04
    21c4:	bd 83       	std	Y+5, r27	; 0x05
    21c6:	7e 83       	std	Y+6, r23	; 0x06
    21c8:	6f 83       	std	Y+7, r22	; 0x07
    21ca:	58 87       	std	Y+8, r21	; 0x08
    21cc:	03 96       	adiw	r24, 0x03	; 3
ISR(TCD0_OVF_vect) {

	volatile int64_t sum = 0;
	volatile int32_t currentSample;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    21ce:	8c 30       	cpi	r24, 0x0C	; 12
    21d0:	91 05       	cpc	r25, r1
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <__vector_77+0x182>
    21d4:	73 cf       	rjmp	.-282    	; 0x20bc <__vector_77+0x68>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
		
	sum = sum / 4;
    21d6:	e9 80       	ldd	r14, Y+1	; 0x01
    21d8:	fa 80       	ldd	r15, Y+2	; 0x02
    21da:	0b 81       	ldd	r16, Y+3	; 0x03
    21dc:	1c 81       	ldd	r17, Y+4	; 0x04
    21de:	bd 81       	ldd	r27, Y+5	; 0x05
    21e0:	ae 81       	ldd	r26, Y+6	; 0x06
    21e2:	ff 81       	ldd	r31, Y+7	; 0x07
    21e4:	e8 85       	ldd	r30, Y+8	; 0x08
    21e6:	2e 2d       	mov	r18, r14
    21e8:	3f 2d       	mov	r19, r15
    21ea:	40 2f       	mov	r20, r16
    21ec:	51 2f       	mov	r21, r17
    21ee:	6b 2f       	mov	r22, r27
    21f0:	7a 2f       	mov	r23, r26
    21f2:	8f 2f       	mov	r24, r31
    21f4:	9e 2f       	mov	r25, r30
    21f6:	ee 23       	and	r30, r30
    21f8:	0c f0       	brlt	.+2      	; 0x21fc <__vector_77+0x1a8>
    21fa:	4a c0       	rjmp	.+148    	; 0x2290 <__vector_77+0x23c>
    21fc:	93 e0       	ldi	r25, 0x03	; 3
    21fe:	e9 0e       	add	r14, r25
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	e2 16       	cp	r14, r18
    2204:	08 f0       	brcs	.+2      	; 0x2208 <__vector_77+0x1b4>
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	21 e0       	ldi	r18, 0x01	; 1
    220a:	f3 16       	cp	r15, r19
    220c:	08 f0       	brcs	.+2      	; 0x2210 <__vector_77+0x1bc>
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	39 2f       	mov	r19, r25
    2212:	3f 0d       	add	r19, r15
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	3f 15       	cp	r19, r15
    2218:	08 f0       	brcs	.+2      	; 0x221c <__vector_77+0x1c8>
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	29 2b       	or	r18, r25
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	04 17       	cp	r16, r20
    2222:	08 f0       	brcs	.+2      	; 0x2226 <__vector_77+0x1d2>
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	42 2f       	mov	r20, r18
    2228:	40 0f       	add	r20, r16
    222a:	21 e0       	ldi	r18, 0x01	; 1
    222c:	40 17       	cp	r20, r16
    222e:	08 f0       	brcs	.+2      	; 0x2232 <__vector_77+0x1de>
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	92 2b       	or	r25, r18
    2234:	21 e0       	ldi	r18, 0x01	; 1
    2236:	15 17       	cp	r17, r21
    2238:	08 f0       	brcs	.+2      	; 0x223c <__vector_77+0x1e8>
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	59 2f       	mov	r21, r25
    223e:	51 0f       	add	r21, r17
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	51 17       	cp	r21, r17
    2244:	08 f0       	brcs	.+2      	; 0x2248 <__vector_77+0x1f4>
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	29 2b       	or	r18, r25
    224a:	91 e0       	ldi	r25, 0x01	; 1
    224c:	b6 17       	cp	r27, r22
    224e:	08 f0       	brcs	.+2      	; 0x2252 <__vector_77+0x1fe>
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	62 2f       	mov	r22, r18
    2254:	6b 0f       	add	r22, r27
    2256:	21 e0       	ldi	r18, 0x01	; 1
    2258:	6b 17       	cp	r22, r27
    225a:	08 f0       	brcs	.+2      	; 0x225e <__vector_77+0x20a>
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	92 2b       	or	r25, r18
    2260:	21 e0       	ldi	r18, 0x01	; 1
    2262:	a7 17       	cp	r26, r23
    2264:	08 f0       	brcs	.+2      	; 0x2268 <__vector_77+0x214>
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	79 2f       	mov	r23, r25
    226a:	7a 0f       	add	r23, r26
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	7a 17       	cp	r23, r26
    2270:	08 f0       	brcs	.+2      	; 0x2274 <__vector_77+0x220>
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	29 2b       	or	r18, r25
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	f8 17       	cp	r31, r24
    227a:	08 f0       	brcs	.+2      	; 0x227e <__vector_77+0x22a>
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	82 2f       	mov	r24, r18
    2280:	8f 0f       	add	r24, r31
    2282:	21 e0       	ldi	r18, 0x01	; 1
    2284:	8f 17       	cp	r24, r31
    2286:	08 f0       	brcs	.+2      	; 0x228a <__vector_77+0x236>
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	92 2b       	or	r25, r18
    228c:	2e 2d       	mov	r18, r14
    228e:	9e 0f       	add	r25, r30
    2290:	02 e0       	ldi	r16, 0x02	; 2
    2292:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <__ashrdi3>
    2296:	29 83       	std	Y+1, r18	; 0x01
    2298:	3a 83       	std	Y+2, r19	; 0x02
    229a:	4b 83       	std	Y+3, r20	; 0x03
    229c:	5c 83       	std	Y+4, r21	; 0x04
    229e:	6d 83       	std	Y+5, r22	; 0x05
    22a0:	7e 83       	std	Y+6, r23	; 0x06
    22a2:	8f 83       	std	Y+7, r24	; 0x07
    22a4:	98 87       	std	Y+8, r25	; 0x08
	//get average of the 4 subsamples
	ADC_BUFFER[sampleCount%ADC_buffer_size] = (int32_t)(sum * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    22a6:	60 91 66 50 	lds	r22, 0x5066
    22aa:	70 91 67 50 	lds	r23, 0x5067
    22ae:	80 91 68 50 	lds	r24, 0x5068
    22b2:	90 91 69 50 	lds	r25, 0x5069
    22b6:	19 81       	ldd	r17, Y+1	; 0x01
    22b8:	0a 81       	ldd	r16, Y+2	; 0x02
    22ba:	fb 80       	ldd	r15, Y+3	; 0x03
    22bc:	ec 80       	ldd	r14, Y+4	; 0x04
    22be:	dd 80       	ldd	r13, Y+5	; 0x05
    22c0:	ce 80       	ldd	r12, Y+6	; 0x06
    22c2:	bf 80       	ldd	r11, Y+7	; 0x07
    22c4:	a8 84       	ldd	r10, Y+8	; 0x08
    22c6:	20 91 a8 50 	lds	r18, 0x50A8
    22ca:	30 91 a9 50 	lds	r19, 0x50A9
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	80 90 64 50 	lds	r8, 0x5064
    22e6:	90 90 65 50 	lds	r9, 0x5065
    22ea:	88 0e       	add	r8, r24
    22ec:	99 1e       	adc	r9, r25
    22ee:	21 2f       	mov	r18, r17
    22f0:	30 2f       	mov	r19, r16
    22f2:	4f 2d       	mov	r20, r15
    22f4:	5e 2d       	mov	r21, r14
    22f6:	6d 2d       	mov	r22, r13
    22f8:	7c 2d       	mov	r23, r12
    22fa:	8b 2d       	mov	r24, r11
    22fc:	9a 2d       	mov	r25, r10
    22fe:	0f 2e       	mov	r0, r31
    2300:	f0 ea       	ldi	r31, 0xA0	; 160
    2302:	af 2e       	mov	r10, r31
    2304:	f0 2d       	mov	r31, r0
    2306:	0f 2e       	mov	r0, r31
    2308:	f5 e2       	ldi	r31, 0x25	; 37
    230a:	bf 2e       	mov	r11, r31
    230c:	f0 2d       	mov	r31, r0
    230e:	0f 2e       	mov	r0, r31
    2310:	f6 e2       	ldi	r31, 0x26	; 38
    2312:	cf 2e       	mov	r12, r31
    2314:	f0 2d       	mov	r31, r0
    2316:	dd 24       	eor	r13, r13
    2318:	ee 24       	eor	r14, r14
    231a:	ff 24       	eor	r15, r15
    231c:	00 e0       	ldi	r16, 0x00	; 0
    231e:	10 e0       	ldi	r17, 0x00	; 0
    2320:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__muldi3>
    2324:	aa 24       	eor	r10, r10
    2326:	aa 94       	dec	r10
    2328:	bb 24       	eor	r11, r11
    232a:	ba 94       	dec	r11
    232c:	0f 2e       	mov	r0, r31
    232e:	ff e7       	ldi	r31, 0x7F	; 127
    2330:	cf 2e       	mov	r12, r31
    2332:	f0 2d       	mov	r31, r0
    2334:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__divdi3>
    2338:	01 e0       	ldi	r16, 0x01	; 1
    233a:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <__ashldi3>
    233e:	0f 2e       	mov	r0, r31
    2340:	f3 e0       	ldi	r31, 0x03	; 3
    2342:	af 2e       	mov	r10, r31
    2344:	f0 2d       	mov	r31, r0
    2346:	bb 24       	eor	r11, r11
    2348:	cc 24       	eor	r12, r12
    234a:	00 e0       	ldi	r16, 0x00	; 0
    234c:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__divdi3>
    2350:	f4 01       	movw	r30, r8
    2352:	20 83       	st	Z, r18
    2354:	31 83       	std	Z+1, r19	; 0x01
    2356:	42 83       	std	Z+2, r20	; 0x02
    2358:	53 83       	std	Z+3, r21	; 0x03
	if(write_to_FRAM){
    235a:	80 91 49 40 	lds	r24, 0x4049
    235e:	88 23       	and	r24, r24
    2360:	09 f1       	breq	.+66     	; 0x23a4 <__vector_77+0x350>
		writeFRAM((uint8_t*)(ADC_BUFFER+(sampleCount%ADC_buffer_size)), 4);
    2362:	60 91 66 50 	lds	r22, 0x5066
    2366:	70 91 67 50 	lds	r23, 0x5067
    236a:	80 91 68 50 	lds	r24, 0x5068
    236e:	90 91 69 50 	lds	r25, 0x5069
    2372:	20 91 a8 50 	lds	r18, 0x50A8
    2376:	30 91 a9 50 	lds	r19, 0x50A9
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9c 01       	movw	r18, r24
    2388:	22 0f       	add	r18, r18
    238a:	33 1f       	adc	r19, r19
    238c:	22 0f       	add	r18, r18
    238e:	33 1f       	adc	r19, r19
    2390:	80 91 64 50 	lds	r24, 0x5064
    2394:	90 91 65 50 	lds	r25, 0x5065
    2398:	82 0f       	add	r24, r18
    239a:	93 1f       	adc	r25, r19
    239c:	64 e0       	ldi	r22, 0x04	; 4
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	0e 94 39 01 	call	0x272	; 0x272 <writeFRAM>
	}
	sampleCount++;
    23a4:	80 91 66 50 	lds	r24, 0x5066
    23a8:	90 91 67 50 	lds	r25, 0x5067
    23ac:	a0 91 68 50 	lds	r26, 0x5068
    23b0:	b0 91 69 50 	lds	r27, 0x5069
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	a1 1d       	adc	r26, r1
    23b8:	b1 1d       	adc	r27, r1
    23ba:	80 93 66 50 	sts	0x5066, r24
    23be:	90 93 67 50 	sts	0x5067, r25
    23c2:	a0 93 68 50 	sts	0x5068, r26
    23c6:	b0 93 69 50 	sts	0x5069, r27
}
    23ca:	2c 96       	adiw	r28, 0x0c	; 12
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	ff 91       	pop	r31
    23d6:	ef 91       	pop	r30
    23d8:	bf 91       	pop	r27
    23da:	af 91       	pop	r26
    23dc:	9f 91       	pop	r25
    23de:	8f 91       	pop	r24
    23e0:	7f 91       	pop	r23
    23e2:	6f 91       	pop	r22
    23e4:	5f 91       	pop	r21
    23e6:	4f 91       	pop	r20
    23e8:	3f 91       	pop	r19
    23ea:	2f 91       	pop	r18
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	ff 90       	pop	r15
    23f2:	ef 90       	pop	r14
    23f4:	df 90       	pop	r13
    23f6:	cf 90       	pop	r12
    23f8:	bf 90       	pop	r11
    23fa:	af 90       	pop	r10
    23fc:	9f 90       	pop	r9
    23fe:	8f 90       	pop	r8
    2400:	7f 90       	pop	r7
    2402:	6f 90       	pop	r6
    2404:	0f 90       	pop	r0
    2406:	0b be       	out	0x3b, r0	; 59
    2408:	0f 90       	pop	r0
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	0f 90       	pop	r0
    240e:	1f 90       	pop	r1
    2410:	18 95       	reti

00002412 <sampleCurrentChannel>:

//sample an axis of accelerometer with ADC
void sampleCurrentChannel() {
	
	SPICS(TRUE);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	e0 ea       	ldi	r30, 0xA0	; 160
    241c:	f6 e0       	ldi	r31, 0x06	; 6
    241e:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    2420:	8a ea       	ldi	r24, 0xAA	; 170
    2422:	e0 ec       	ldi	r30, 0xC0	; 192
    2424:	f8 e0       	ldi	r31, 0x08	; 8
    2426:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	88 23       	and	r24, r24
    242c:	ec f7       	brge	.-6      	; 0x2428 <sampleCurrentChannel+0x16>
	SPIBuffer[SPICount] = SPIC.DATA;
    242e:	90 91 a1 50 	lds	r25, 0x50A1
    2432:	e0 ec       	ldi	r30, 0xC0	; 192
    2434:	f8 e0       	ldi	r31, 0x08	; 8
    2436:	83 81       	ldd	r24, Z+3	; 0x03
    2438:	a1 e2       	ldi	r26, 0x21	; 33
    243a:	be e3       	ldi	r27, 0x3E	; 62
    243c:	a9 0f       	add	r26, r25
    243e:	b1 1d       	adc	r27, r1
    2440:	8c 93       	st	X, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    2442:	8a ea       	ldi	r24, 0xAA	; 170
    2444:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	88 23       	and	r24, r24
    244a:	ec f7       	brge	.-6      	; 0x2446 <sampleCurrentChannel+0x34>
	SPIBuffer[SPICount+1] = SPIC.DATA;
    244c:	a0 91 a1 50 	lds	r26, 0x50A1
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e0 ec       	ldi	r30, 0xC0	; 192
    2454:	f8 e0       	ldi	r31, 0x08	; 8
    2456:	83 81       	ldd	r24, Z+3	; 0x03
    2458:	ae 5d       	subi	r26, 0xDE	; 222
    245a:	b1 4c       	sbci	r27, 0xC1	; 193
    245c:	8c 93       	st	X, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    245e:	8a ea       	ldi	r24, 0xAA	; 170
    2460:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	88 23       	and	r24, r24
    2466:	ec f7       	brge	.-6      	; 0x2462 <sampleCurrentChannel+0x50>
	SPIBuffer[SPICount+2] = SPIC.DATA;
    2468:	e0 91 a1 50 	lds	r30, 0x50A1
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	a0 ec       	ldi	r26, 0xC0	; 192
    2470:	b8 e0       	ldi	r27, 0x08	; 8
    2472:	13 96       	adiw	r26, 0x03	; 3
    2474:	8c 91       	ld	r24, X
    2476:	ed 5d       	subi	r30, 0xDD	; 221
    2478:	f1 4c       	sbci	r31, 0xC1	; 193
    247a:	80 83       	st	Z, r24
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	e0 ea       	ldi	r30, 0xA0	; 160
    2480:	f6 e0       	ldi	r31, 0x06	; 6
    2482:	85 83       	std	Z+5, r24	; 0x05
	SPICount +=3;
    2484:	80 91 a1 50 	lds	r24, 0x50A1
    2488:	8d 5f       	subi	r24, 0xFD	; 253
    248a:	80 93 a1 50 	sts	0x50A1, r24
	SPICS(FALSE);
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
}
    2494:	08 95       	ret

00002496 <__vector_82>:
ISR(TCD0_CCC_vect) {
	sampleCurrentChannel();
}

//final averaging point
ISR(TCD0_CCD_vect) {
    2496:	1f 92       	push	r1
    2498:	0f 92       	push	r0
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	0f 92       	push	r0
    249e:	0b b6       	in	r0, 0x3b	; 59
    24a0:	0f 92       	push	r0
    24a2:	11 24       	eor	r1, r1
    24a4:	2f 93       	push	r18
    24a6:	3f 93       	push	r19
    24a8:	4f 93       	push	r20
    24aa:	5f 93       	push	r21
    24ac:	6f 93       	push	r22
    24ae:	7f 93       	push	r23
    24b0:	8f 93       	push	r24
    24b2:	9f 93       	push	r25
    24b4:	af 93       	push	r26
    24b6:	bf 93       	push	r27
    24b8:	ef 93       	push	r30
    24ba:	ff 93       	push	r31
	sampleCurrentChannel();
    24bc:	0e 94 09 12 	call	0x2412	; 0x2412 <sampleCurrentChannel>
	SPICount = 0;
    24c0:	10 92 a1 50 	sts	0x50A1, r1
}
    24c4:	ff 91       	pop	r31
    24c6:	ef 91       	pop	r30
    24c8:	bf 91       	pop	r27
    24ca:	af 91       	pop	r26
    24cc:	9f 91       	pop	r25
    24ce:	8f 91       	pop	r24
    24d0:	7f 91       	pop	r23
    24d2:	6f 91       	pop	r22
    24d4:	5f 91       	pop	r21
    24d6:	4f 91       	pop	r20
    24d8:	3f 91       	pop	r19
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	0b be       	out	0x3b, r0	; 59
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <__vector_81>:
ISR(TCD0_CCB_vect) {
	sampleCurrentChannel();
}

//third averaging point
ISR(TCD0_CCC_vect) {
    24ea:	1f 92       	push	r1
    24ec:	0f 92       	push	r0
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	0f 92       	push	r0
    24f2:	0b b6       	in	r0, 0x3b	; 59
    24f4:	0f 92       	push	r0
    24f6:	11 24       	eor	r1, r1
    24f8:	2f 93       	push	r18
    24fa:	3f 93       	push	r19
    24fc:	4f 93       	push	r20
    24fe:	5f 93       	push	r21
    2500:	6f 93       	push	r22
    2502:	7f 93       	push	r23
    2504:	8f 93       	push	r24
    2506:	9f 93       	push	r25
    2508:	af 93       	push	r26
    250a:	bf 93       	push	r27
    250c:	ef 93       	push	r30
    250e:	ff 93       	push	r31
	sampleCurrentChannel();
    2510:	0e 94 09 12 	call	0x2412	; 0x2412 <sampleCurrentChannel>
}
    2514:	ff 91       	pop	r31
    2516:	ef 91       	pop	r30
    2518:	bf 91       	pop	r27
    251a:	af 91       	pop	r26
    251c:	9f 91       	pop	r25
    251e:	8f 91       	pop	r24
    2520:	7f 91       	pop	r23
    2522:	6f 91       	pop	r22
    2524:	5f 91       	pop	r21
    2526:	4f 91       	pop	r20
    2528:	3f 91       	pop	r19
    252a:	2f 91       	pop	r18
    252c:	0f 90       	pop	r0
    252e:	0b be       	out	0x3b, r0	; 59
    2530:	0f 90       	pop	r0
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	0f 90       	pop	r0
    2536:	1f 90       	pop	r1
    2538:	18 95       	reti

0000253a <__vector_80>:
//first averaging point
ISR(TCD0_CCA_vect) {
	sampleCurrentChannel();
}
//second averaging point
ISR(TCD0_CCB_vect) {
    253a:	1f 92       	push	r1
    253c:	0f 92       	push	r0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	0f 92       	push	r0
    2542:	0b b6       	in	r0, 0x3b	; 59
    2544:	0f 92       	push	r0
    2546:	11 24       	eor	r1, r1
    2548:	2f 93       	push	r18
    254a:	3f 93       	push	r19
    254c:	4f 93       	push	r20
    254e:	5f 93       	push	r21
    2550:	6f 93       	push	r22
    2552:	7f 93       	push	r23
    2554:	8f 93       	push	r24
    2556:	9f 93       	push	r25
    2558:	af 93       	push	r26
    255a:	bf 93       	push	r27
    255c:	ef 93       	push	r30
    255e:	ff 93       	push	r31
	sampleCurrentChannel();
    2560:	0e 94 09 12 	call	0x2412	; 0x2412 <sampleCurrentChannel>
}
    2564:	ff 91       	pop	r31
    2566:	ef 91       	pop	r30
    2568:	bf 91       	pop	r27
    256a:	af 91       	pop	r26
    256c:	9f 91       	pop	r25
    256e:	8f 91       	pop	r24
    2570:	7f 91       	pop	r23
    2572:	6f 91       	pop	r22
    2574:	5f 91       	pop	r21
    2576:	4f 91       	pop	r20
    2578:	3f 91       	pop	r19
    257a:	2f 91       	pop	r18
    257c:	0f 90       	pop	r0
    257e:	0b be       	out	0x3b, r0	; 59
    2580:	0f 90       	pop	r0
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	0f 90       	pop	r0
    2586:	1f 90       	pop	r1
    2588:	18 95       	reti

0000258a <__vector_79>:
// 	enableADCMUX(FALSE);
	
}

//first averaging point
ISR(TCD0_CCA_vect) {
    258a:	1f 92       	push	r1
    258c:	0f 92       	push	r0
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	0f 92       	push	r0
    2592:	0b b6       	in	r0, 0x3b	; 59
    2594:	0f 92       	push	r0
    2596:	11 24       	eor	r1, r1
    2598:	2f 93       	push	r18
    259a:	3f 93       	push	r19
    259c:	4f 93       	push	r20
    259e:	5f 93       	push	r21
    25a0:	6f 93       	push	r22
    25a2:	7f 93       	push	r23
    25a4:	8f 93       	push	r24
    25a6:	9f 93       	push	r25
    25a8:	af 93       	push	r26
    25aa:	bf 93       	push	r27
    25ac:	ef 93       	push	r30
    25ae:	ff 93       	push	r31
	sampleCurrentChannel();
    25b0:	0e 94 09 12 	call	0x2412	; 0x2412 <sampleCurrentChannel>
}
    25b4:	ff 91       	pop	r31
    25b6:	ef 91       	pop	r30
    25b8:	bf 91       	pop	r27
    25ba:	af 91       	pop	r26
    25bc:	9f 91       	pop	r25
    25be:	8f 91       	pop	r24
    25c0:	7f 91       	pop	r23
    25c2:	6f 91       	pop	r22
    25c4:	5f 91       	pop	r21
    25c6:	4f 91       	pop	r20
    25c8:	3f 91       	pop	r19
    25ca:	2f 91       	pop	r18
    25cc:	0f 90       	pop	r0
    25ce:	0b be       	out	0x3b, r0	; 59
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <__vector_19>:
ISR(TCC0_CCC_vect) {
	sampleCurrentChannel();
}

//final averaging point. Also change ADC channel to sample the next accelerometer axis
ISR(TCC0_CCD_vect) {
    25da:	1f 92       	push	r1
    25dc:	0f 92       	push	r0
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	0f 92       	push	r0
    25e2:	0b b6       	in	r0, 0x3b	; 59
    25e4:	0f 92       	push	r0
    25e6:	11 24       	eor	r1, r1
    25e8:	2f 93       	push	r18
    25ea:	3f 93       	push	r19
    25ec:	4f 93       	push	r20
    25ee:	5f 93       	push	r21
    25f0:	6f 93       	push	r22
    25f2:	7f 93       	push	r23
    25f4:	8f 93       	push	r24
    25f6:	9f 93       	push	r25
    25f8:	af 93       	push	r26
    25fa:	bf 93       	push	r27
    25fc:	ef 93       	push	r30
    25fe:	ff 93       	push	r31
	sampleCurrentChannel();
    2600:	0e 94 09 12 	call	0x2412	; 0x2412 <sampleCurrentChannel>
	SPICount = 0;
    2604:	10 92 a1 50 	sts	0x50A1, r1
	if(PORTB.OUT & PIN1_bm) {
    2608:	e0 e2       	ldi	r30, 0x20	; 32
    260a:	f6 e0       	ldi	r31, 0x06	; 6
    260c:	84 81       	ldd	r24, Z+4	; 0x04
    260e:	81 ff       	sbrs	r24, 1
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <__vector_19+0x56>
		if (PORTA.OUT & PIN6_bm) PORTB.OUTTGL = PIN1_bm;
    2612:	e0 e0       	ldi	r30, 0x00	; 0
    2614:	f6 e0       	ldi	r31, 0x06	; 6
    2616:	84 81       	ldd	r24, Z+4	; 0x04
    2618:	86 ff       	sbrs	r24, 6
    261a:	05 c0       	rjmp	.+10     	; 0x2626 <__vector_19+0x4c>
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	e0 e2       	ldi	r30, 0x20	; 32
    2620:	f6 e0       	ldi	r31, 0x06	; 6
    2622:	87 83       	std	Z+7, r24	; 0x07
    2624:	0d c0       	rjmp	.+26     	; 0x2640 <__vector_19+0x66>
		else PORTA.OUTTGL = PIN6_bm;
    2626:	80 e4       	ldi	r24, 0x40	; 64
    2628:	e0 e0       	ldi	r30, 0x00	; 0
    262a:	f6 e0       	ldi	r31, 0x06	; 6
    262c:	87 83       	std	Z+7, r24	; 0x07
    262e:	08 c0       	rjmp	.+16     	; 0x2640 <__vector_19+0x66>
	} else {
		PORTA.OUTCLR = PIN6_bm;
    2630:	80 e4       	ldi	r24, 0x40	; 64
    2632:	e0 e0       	ldi	r30, 0x00	; 0
    2634:	f6 e0       	ldi	r31, 0x06	; 6
    2636:	86 83       	std	Z+6, r24	; 0x06
		PORTB.OUTSET = PIN1_bm;
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	e0 e2       	ldi	r30, 0x20	; 32
    263c:	f6 e0       	ldi	r31, 0x06	; 6
    263e:	85 83       	std	Z+5, r24	; 0x05
	}
	
}
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	bf 91       	pop	r27
    2646:	af 91       	pop	r26
    2648:	9f 91       	pop	r25
    264a:	8f 91       	pop	r24
    264c:	7f 91       	pop	r23
    264e:	6f 91       	pop	r22
    2650:	5f 91       	pop	r21
    2652:	4f 91       	pop	r20
    2654:	3f 91       	pop	r19
    2656:	2f 91       	pop	r18
    2658:	0f 90       	pop	r0
    265a:	0b be       	out	0x3b, r0	; 59
    265c:	0f 90       	pop	r0
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	0f 90       	pop	r0
    2662:	1f 90       	pop	r1
    2664:	18 95       	reti

00002666 <__vector_18>:
ISR(TCC0_CCB_vect) {
	sampleCurrentChannel();
}

//third averaging point
ISR(TCC0_CCC_vect) {
    2666:	1f 92       	push	r1
    2668:	0f 92       	push	r0
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	0f 92       	push	r0
    266e:	0b b6       	in	r0, 0x3b	; 59
    2670:	0f 92       	push	r0
    2672:	11 24       	eor	r1, r1
    2674:	2f 93       	push	r18
    2676:	3f 93       	push	r19
    2678:	4f 93       	push	r20
    267a:	5f 93       	push	r21
    267c:	6f 93       	push	r22
    267e:	7f 93       	push	r23
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
	sampleCurrentChannel();
    268c:	0e 94 09 12 	call	0x2412	; 0x2412 <sampleCurrentChannel>
}
    2690:	ff 91       	pop	r31
    2692:	ef 91       	pop	r30
    2694:	bf 91       	pop	r27
    2696:	af 91       	pop	r26
    2698:	9f 91       	pop	r25
    269a:	8f 91       	pop	r24
    269c:	7f 91       	pop	r23
    269e:	6f 91       	pop	r22
    26a0:	5f 91       	pop	r21
    26a2:	4f 91       	pop	r20
    26a4:	3f 91       	pop	r19
    26a6:	2f 91       	pop	r18
    26a8:	0f 90       	pop	r0
    26aa:	0b be       	out	0x3b, r0	; 59
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	0f 90       	pop	r0
    26b2:	1f 90       	pop	r1
    26b4:	18 95       	reti

000026b6 <__vector_17>:
ISR(TCC0_CCA_vect) {
	sampleCurrentChannel();
}

//second averaging point
ISR(TCC0_CCB_vect) {
    26b6:	1f 92       	push	r1
    26b8:	0f 92       	push	r0
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	0f 92       	push	r0
    26be:	0b b6       	in	r0, 0x3b	; 59
    26c0:	0f 92       	push	r0
    26c2:	11 24       	eor	r1, r1
    26c4:	2f 93       	push	r18
    26c6:	3f 93       	push	r19
    26c8:	4f 93       	push	r20
    26ca:	5f 93       	push	r21
    26cc:	6f 93       	push	r22
    26ce:	7f 93       	push	r23
    26d0:	8f 93       	push	r24
    26d2:	9f 93       	push	r25
    26d4:	af 93       	push	r26
    26d6:	bf 93       	push	r27
    26d8:	ef 93       	push	r30
    26da:	ff 93       	push	r31
	sampleCurrentChannel();
    26dc:	0e 94 09 12 	call	0x2412	; 0x2412 <sampleCurrentChannel>
}
    26e0:	ff 91       	pop	r31
    26e2:	ef 91       	pop	r30
    26e4:	bf 91       	pop	r27
    26e6:	af 91       	pop	r26
    26e8:	9f 91       	pop	r25
    26ea:	8f 91       	pop	r24
    26ec:	7f 91       	pop	r23
    26ee:	6f 91       	pop	r22
    26f0:	5f 91       	pop	r21
    26f2:	4f 91       	pop	r20
    26f4:	3f 91       	pop	r19
    26f6:	2f 91       	pop	r18
    26f8:	0f 90       	pop	r0
    26fa:	0b be       	out	0x3b, r0	; 59
    26fc:	0f 90       	pop	r0
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	0f 90       	pop	r0
    2702:	1f 90       	pop	r1
    2704:	18 95       	reti

00002706 <__vector_16>:
// 	enableADCMUX(FALSE);
	//ADCPower(FALSE);
}

//first averaging point
ISR(TCC0_CCA_vect) {
    2706:	1f 92       	push	r1
    2708:	0f 92       	push	r0
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	0f 92       	push	r0
    270e:	0b b6       	in	r0, 0x3b	; 59
    2710:	0f 92       	push	r0
    2712:	11 24       	eor	r1, r1
    2714:	2f 93       	push	r18
    2716:	3f 93       	push	r19
    2718:	4f 93       	push	r20
    271a:	5f 93       	push	r21
    271c:	6f 93       	push	r22
    271e:	7f 93       	push	r23
    2720:	8f 93       	push	r24
    2722:	9f 93       	push	r25
    2724:	af 93       	push	r26
    2726:	bf 93       	push	r27
    2728:	ef 93       	push	r30
    272a:	ff 93       	push	r31
	sampleCurrentChannel();
    272c:	0e 94 09 12 	call	0x2412	; 0x2412 <sampleCurrentChannel>
}
    2730:	ff 91       	pop	r31
    2732:	ef 91       	pop	r30
    2734:	bf 91       	pop	r27
    2736:	af 91       	pop	r26
    2738:	9f 91       	pop	r25
    273a:	8f 91       	pop	r24
    273c:	7f 91       	pop	r23
    273e:	6f 91       	pop	r22
    2740:	5f 91       	pop	r21
    2742:	4f 91       	pop	r20
    2744:	3f 91       	pop	r19
    2746:	2f 91       	pop	r18
    2748:	0f 90       	pop	r0
    274a:	0b be       	out	0x3b, r0	; 59
    274c:	0f 90       	pop	r0
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	0f 90       	pop	r0
    2752:	1f 90       	pop	r1
    2754:	18 95       	reti

00002756 <writeSE2FRAM>:
	SPICount +=3;
	SPICS(FALSE);
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	28 97       	sbiw	r28, 0x08	; 8
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	de bf       	out	0x3e, r29	; 62

	volatile int32_t sum = 0;
    276a:	19 82       	std	Y+1, r1	; 0x01
    276c:	1a 82       	std	Y+2, r1	; 0x02
    276e:	1b 82       	std	Y+3, r1	; 0x03
    2770:	1c 82       	std	Y+4, r1	; 0x04
	volatile int32_t currentSample;
	sampleCount++;
    2772:	80 91 66 50 	lds	r24, 0x5066
    2776:	90 91 67 50 	lds	r25, 0x5067
    277a:	a0 91 68 50 	lds	r26, 0x5068
    277e:	b0 91 69 50 	lds	r27, 0x5069
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	a1 1d       	adc	r26, r1
    2786:	b1 1d       	adc	r27, r1
    2788:	80 93 66 50 	sts	0x5066, r24
    278c:	90 93 67 50 	sts	0x5067, r25
    2790:	a0 93 68 50 	sts	0x5068, r26
    2794:	b0 93 69 50 	sts	0x5069, r27
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2798:	80 ed       	ldi	r24, 0xD0	; 208
    279a:	80 93 c0 08 	sts	0x08C0, r24
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    27a2:	01 e2       	ldi	r16, 0x21	; 33
    27a4:	1e e3       	ldi	r17, 0x3E	; 62
    27a6:	ff 24       	eor	r15, r15
    27a8:	fa 94       	dec	r15
    27aa:	c9 01       	movw	r24, r18
    27ac:	f8 01       	movw	r30, r16
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	40 81       	ld	r20, Z
    27b4:	44 23       	and	r20, r20
    27b6:	14 f4       	brge	.+4      	; 0x27bc <writeSE2FRAM+0x66>
    27b8:	f8 86       	std	Y+8, r15	; 0x08
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <writeSE2FRAM+0x68>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    27bc:	18 86       	std	Y+8, r1	; 0x08
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    27be:	80 0f       	add	r24, r16
    27c0:	91 1f       	adc	r25, r17
    27c2:	fc 01       	movw	r30, r24
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 83       	std	Y+7, r24	; 0x07
	SPICount +=3;
	SPICS(FALSE);
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    27c8:	f9 01       	movw	r30, r18
    27ca:	31 96       	adiw	r30, 0x01	; 1
	
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    27cc:	e0 0f       	add	r30, r16
    27ce:	f1 1f       	adc	r31, r17
    27d0:	80 81       	ld	r24, Z
    27d2:	8e 83       	std	Y+6, r24	; 0x06
	SPICount +=3;
	SPICS(FALSE);
}

//write collected accelerometer samples to FRAM. OBSOLETE
void writeSE2FRAM() {
    27d4:	f9 01       	movw	r30, r18
    27d6:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    27d8:	e0 0f       	add	r30, r16
    27da:	f1 1f       	adc	r31, r17
    27dc:	80 81       	ld	r24, Z
    27de:	8d 83       	std	Y+5, r24	; 0x05
		sum += currentSample;
    27e0:	49 81       	ldd	r20, Y+1	; 0x01
    27e2:	5a 81       	ldd	r21, Y+2	; 0x02
    27e4:	6b 81       	ldd	r22, Y+3	; 0x03
    27e6:	7c 81       	ldd	r23, Y+4	; 0x04
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	af 81       	ldd	r26, Y+7	; 0x07
    27ee:	b8 85       	ldd	r27, Y+8	; 0x08
    27f0:	84 0f       	add	r24, r20
    27f2:	95 1f       	adc	r25, r21
    27f4:	a6 1f       	adc	r26, r22
    27f6:	b7 1f       	adc	r27, r23
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	ab 83       	std	Y+3, r26	; 0x03
    27fe:	bc 83       	std	Y+4, r27	; 0x04
    2800:	2d 5f       	subi	r18, 0xFD	; 253
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile int32_t currentSample;
	sampleCount++;
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	
	for(uint8_t i = 0; i < 12; i+=3) {
    2804:	2c 30       	cpi	r18, 0x0C	; 12
    2806:	31 05       	cpc	r19, r1
    2808:	81 f6       	brne	.-96     	; 0x27aa <writeSE2FRAM+0x54>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
	
	sum = sum / 4;
    280a:	69 81       	ldd	r22, Y+1	; 0x01
    280c:	7a 81       	ldd	r23, Y+2	; 0x02
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	24 e0       	ldi	r18, 0x04	; 4
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <__divmodsi4>
    281e:	29 83       	std	Y+1, r18	; 0x01
    2820:	3a 83       	std	Y+2, r19	; 0x02
    2822:	4b 83       	std	Y+3, r20	; 0x03
    2824:	5c 83       	std	Y+4, r21	; 0x04
	SPIBuffer[2] = *(((uint8_t*)&sum)+0);
    2826:	29 81       	ldd	r18, Y+1	; 0x01
    2828:	83 e2       	ldi	r24, 0x23	; 35
    282a:	9e e3       	ldi	r25, 0x3E	; 62
    282c:	20 93 23 3e 	sts	0x3E23, r18
	SPIBuffer[1] = *(((uint8_t*)&sum)+1);
    2830:	2a 81       	ldd	r18, Y+2	; 0x02
    2832:	fc 01       	movw	r30, r24
    2834:	31 97       	sbiw	r30, 0x01	; 1
    2836:	20 83       	st	Z, r18
	SPIBuffer[0] = *(((uint8_t*)&sum)+2);
    2838:	2b 81       	ldd	r18, Y+3	; 0x03
    283a:	02 97       	sbiw	r24, 0x02	; 2
    283c:	fc 01       	movw	r30, r24
    283e:	20 83       	st	Z, r18


	
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2840:	80 e1       	ldi	r24, 0x10	; 16
    2842:	e0 e4       	ldi	r30, 0x40	; 64
    2844:	f6 e0       	ldi	r31, 0x06	; 6
    2846:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2848:	88 e0       	ldi	r24, 0x08	; 8
    284a:	e0 e2       	ldi	r30, 0x20	; 32
    284c:	f6 e0       	ldi	r31, 0x06	; 6
    284e:	86 83       	std	Z+6, r24	; 0x06
	nop();
    2850:	00 00       	nop
	SPIC.DATA = FR_WREN;
    2852:	86 e0       	ldi	r24, 0x06	; 6
    2854:	e0 ec       	ldi	r30, 0xC0	; 192
    2856:	f8 e0       	ldi	r31, 0x08	; 8
    2858:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	88 23       	and	r24, r24
    285e:	ec f7       	brge	.-6      	; 0x285a <writeSE2FRAM+0x104>
	SPIBuffer[12] = SPIC.DATA;
    2860:	e0 ec       	ldi	r30, 0xC0	; 192
    2862:	f8 e0       	ldi	r31, 0x08	; 8
    2864:	83 81       	ldd	r24, Z+3	; 0x03
    2866:	80 93 2d 3e 	sts	0x3E2D, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
    286a:	a0 e2       	ldi	r26, 0x20	; 32
    286c:	b6 e0       	ldi	r27, 0x06	; 6
    286e:	88 e0       	ldi	r24, 0x08	; 8
    2870:	15 96       	adiw	r26, 0x05	; 5
    2872:	8c 93       	st	X, r24
    2874:	15 97       	sbiw	r26, 0x05	; 5
	nop(); // time for CS_FRAM to accept high signal
    2876:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2878:	16 96       	adiw	r26, 0x06	; 6
    287a:	8c 93       	st	X, r24
    287c:	16 97       	sbiw	r26, 0x06	; 6
	nop();
    287e:	00 00       	nop
	SPIC.DATA = FR_WRITE;
    2880:	82 e0       	ldi	r24, 0x02	; 2
    2882:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	88 23       	and	r24, r24
    2888:	ec f7       	brge	.-6      	; 0x2884 <writeSE2FRAM+0x12e>
	SPIBuffer[12] = SPIC.DATA;
    288a:	e0 ec       	ldi	r30, 0xC0	; 192
    288c:	f8 e0       	ldi	r31, 0x08	; 8
    288e:	83 81       	ldd	r24, Z+3	; 0x03
    2890:	80 93 2d 3e 	sts	0x3E2D, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    2894:	80 91 1f 3e 	lds	r24, 0x3E1F
    2898:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	88 23       	and	r24, r24
    289e:	ec f7       	brge	.-6      	; 0x289a <writeSE2FRAM+0x144>
	SPIBuffer[12] = SPIC.DATA;
    28a0:	e0 ec       	ldi	r30, 0xC0	; 192
    28a2:	f8 e0       	ldi	r31, 0x08	; 8
    28a4:	83 81       	ldd	r24, Z+3	; 0x03
    28a6:	80 93 2d 3e 	sts	0x3E2D, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
    28aa:	80 91 1e 3e 	lds	r24, 0x3E1E
    28ae:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	88 23       	and	r24, r24
    28b4:	ec f7       	brge	.-6      	; 0x28b0 <writeSE2FRAM+0x15a>
	SPIBuffer[12] = SPIC.DATA;
    28b6:	e0 ec       	ldi	r30, 0xC0	; 192
    28b8:	f8 e0       	ldi	r31, 0x08	; 8
    28ba:	83 81       	ldd	r24, Z+3	; 0x03
    28bc:	80 93 2d 3e 	sts	0x3E2D, r24
	SPIC.DATA = SPIBuffer[0];
    28c0:	80 91 21 3e 	lds	r24, 0x3E21
    28c4:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	88 23       	and	r24, r24
    28ca:	ec f7       	brge	.-6      	; 0x28c6 <writeSE2FRAM+0x170>
	SPIBuffer[12] = SPIC.DATA;
    28cc:	e0 ec       	ldi	r30, 0xC0	; 192
    28ce:	f8 e0       	ldi	r31, 0x08	; 8
    28d0:	83 81       	ldd	r24, Z+3	; 0x03
    28d2:	80 93 2d 3e 	sts	0x3E2D, r24
	SPIC.DATA = SPIBuffer[1];
    28d6:	80 91 22 3e 	lds	r24, 0x3E22
    28da:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	88 23       	and	r24, r24
    28e0:	ec f7       	brge	.-6      	; 0x28dc <writeSE2FRAM+0x186>
	SPIBuffer[12] = SPIC.DATA;
    28e2:	e0 ec       	ldi	r30, 0xC0	; 192
    28e4:	f8 e0       	ldi	r31, 0x08	; 8
    28e6:	83 81       	ldd	r24, Z+3	; 0x03
    28e8:	80 93 2d 3e 	sts	0x3E2D, r24
	SPIC.DATA = SPIBuffer[2];
    28ec:	80 91 23 3e 	lds	r24, 0x3E23
    28f0:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	88 23       	and	r24, r24
    28f6:	ec f7       	brge	.-6      	; 0x28f2 <writeSE2FRAM+0x19c>
	SPIBuffer[12] = SPIC.DATA;
    28f8:	a0 ec       	ldi	r26, 0xC0	; 192
    28fa:	b8 e0       	ldi	r27, 0x08	; 8
    28fc:	13 96       	adiw	r26, 0x03	; 3
    28fe:	8c 91       	ld	r24, X
    2900:	13 97       	sbiw	r26, 0x03	; 3
    2902:	80 93 2d 3e 	sts	0x3E2D, r24
	
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    2906:	88 e0       	ldi	r24, 0x08	; 8
    2908:	e0 e2       	ldi	r30, 0x20	; 32
    290a:	f6 e0       	ldi	r31, 0x06	; 6
    290c:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    290e:	e0 e4       	ldi	r30, 0x40	; 64
    2910:	f6 e0       	ldi	r31, 0x06	; 6
    2912:	80 e1       	ldi	r24, 0x10	; 16
    2914:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2916:	94 e5       	ldi	r25, 0x54	; 84
    2918:	9c 93       	st	X, r25
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    291a:	86 83       	std	Z+6, r24	; 0x06
	
	FRAMAddress +=3;
    291c:	80 91 1e 3e 	lds	r24, 0x3E1E
    2920:	90 91 1f 3e 	lds	r25, 0x3E1F
    2924:	03 96       	adiw	r24, 0x03	; 3
    2926:	80 93 1e 3e 	sts	0x3E1E, r24
    292a:	90 93 1f 3e 	sts	0x3E1F, r25
	checksumADC[0] += SPIBuffer[0];
    292e:	80 91 12 21 	lds	r24, 0x2112
    2932:	e1 e2       	ldi	r30, 0x21	; 33
    2934:	fe e3       	ldi	r31, 0x3E	; 62
    2936:	90 81       	ld	r25, Z
    2938:	89 0f       	add	r24, r25
    293a:	80 93 12 21 	sts	0x2112, r24
	checksumADC[1] += SPIBuffer[1];
    293e:	80 91 13 21 	lds	r24, 0x2113
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	89 0f       	add	r24, r25
    2946:	80 93 13 21 	sts	0x2113, r24
	checksumADC[2] += SPIBuffer[2];
    294a:	80 91 14 21 	lds	r24, 0x2114
    294e:	92 81       	ldd	r25, Z+2	; 0x02
    2950:	89 0f       	add	r24, r25
    2952:	80 93 14 21 	sts	0x2114, r24
}
    2956:	28 96       	adiw	r28, 0x08	; 8
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	ff 90       	pop	r15
    2966:	08 95       	ret

00002968 <FRAMWriteKnowns>:
// 	}
// 	
// }

//test function for FRAM
void FRAMWriteKnowns() {
    2968:	2f 92       	push	r2
    296a:	3f 92       	push	r3
    296c:	4f 92       	push	r4
    296e:	5f 92       	push	r5
    2970:	6f 92       	push	r6
    2972:	7f 92       	push	r7
    2974:	8f 92       	push	r8
    2976:	9f 92       	push	r9
    2978:	af 92       	push	r10
    297a:	bf 92       	push	r11
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
	FRAMAddress = FR_BASEADD;
    298c:	10 92 1e 3e 	sts	0x3E1E, r1
    2990:	10 92 1f 3e 	sts	0x3E1F, r1
	sampleCount = 0;
    2994:	10 92 66 50 	sts	0x5066, r1
    2998:	10 92 67 50 	sts	0x5067, r1
    299c:	10 92 68 50 	sts	0x5068, r1
    29a0:	10 92 69 50 	sts	0x5069, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    29a4:	84 e1       	ldi	r24, 0x14	; 20
    29a6:	91 e2       	ldi	r25, 0x21	; 33
    29a8:	10 92 14 21 	sts	0x2114, r1
    29ac:	fc 01       	movw	r30, r24
    29ae:	31 97       	sbiw	r30, 0x01	; 1
    29b0:	10 82       	st	Z, r1
    29b2:	02 97       	sbiw	r24, 0x02	; 2
    29b4:	dc 01       	movw	r26, r24
    29b6:	1c 92       	st	X, r1
	
	ADCPower(TRUE);
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	SPIInit(SPI_MODE_1_gc);
    29be:	84 e0       	ldi	r24, 0x04	; 4
    29c0:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    29c4:	80 ed       	ldi	r24, 0xD0	; 208
    29c6:	80 93 c0 08 	sts	0x08C0, r24
	SPIBuffer[0] = 0x0D;
    29ca:	8d e0       	ldi	r24, 0x0D	; 13
    29cc:	80 93 21 3e 	sts	0x3E21, r24
	SPIBuffer[1] = 0xF3;
    29d0:	83 ef       	ldi	r24, 0xF3	; 243
    29d2:	80 93 22 3e 	sts	0x3E22, r24
	SPIBuffer[2] = 0x57;
    29d6:	87 e5       	ldi	r24, 0x57	; 87
    29d8:	80 93 23 3e 	sts	0x3E23, r24
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    29dc:	80 91 66 50 	lds	r24, 0x5066
    29e0:	90 91 67 50 	lds	r25, 0x5067
    29e4:	a0 91 68 50 	lds	r26, 0x5068
    29e8:	b0 91 69 50 	lds	r27, 0x5069
    29ec:	83 35       	cpi	r24, 0x53	; 83
    29ee:	e5 e5       	ldi	r30, 0x55	; 85
    29f0:	9e 07       	cpc	r25, r30
    29f2:	e0 e0       	ldi	r30, 0x00	; 0
    29f4:	ae 07       	cpc	r26, r30
    29f6:	e0 e0       	ldi	r30, 0x00	; 0
    29f8:	be 07       	cpc	r27, r30
    29fa:	08 f0       	brcs	.+2      	; 0x29fe <FRAMWriteKnowns+0x96>
    29fc:	cc c0       	rjmp	.+408    	; 0x2b96 <FRAMWriteKnowns+0x22e>
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    29fe:	0f 2e       	mov	r0, r31
    2a00:	f0 e4       	ldi	r31, 0x40	; 64
    2a02:	ef 2e       	mov	r14, r31
    2a04:	f6 e0       	ldi	r31, 0x06	; 6
    2a06:	ff 2e       	mov	r15, r31
    2a08:	f0 2d       	mov	r31, r0
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	56 e0       	ldi	r21, 0x06	; 6
    2a0e:	28 e0       	ldi	r18, 0x08	; 8
		nop();
		SPIC.DATA = FR_WREN;
    2a10:	e0 ec       	ldi	r30, 0xC0	; 192
    2a12:	f8 e0       	ldi	r31, 0x08	; 8
    2a14:	0f 2e       	mov	r0, r31
    2a16:	f6 e0       	ldi	r31, 0x06	; 6
    2a18:	7f 2e       	mov	r7, r31
    2a1a:	f0 2d       	mov	r31, r0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
    2a1c:	cd e2       	ldi	r28, 0x2D	; 45
    2a1e:	de e3       	ldi	r29, 0x3E	; 62
		PORTB.OUTSET = PIN3_bm;  // latch opcode
		nop(); // time for CS_FRAM to accept high signal
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
		nop();
		SPIC.DATA = FR_WRITE;
    2a20:	66 24       	eor	r6, r6
    2a22:	68 94       	set
    2a24:	61 f8       	bld	r6, 1
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    2a26:	0f 2e       	mov	r0, r31
    2a28:	fe e1       	ldi	r31, 0x1E	; 30
    2a2a:	cf 2e       	mov	r12, r31
    2a2c:	fe e3       	ldi	r31, 0x3E	; 62
    2a2e:	df 2e       	mov	r13, r31
    2a30:	f0 2d       	mov	r31, r0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[0];
    2a32:	8e 01       	movw	r16, r28
    2a34:	0c 50       	subi	r16, 0x0C	; 12
    2a36:	10 40       	sbci	r17, 0x00	; 0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[1];
    2a38:	0f 2e       	mov	r0, r31
    2a3a:	f5 ef       	ldi	r31, 0xF5	; 245
    2a3c:	4f 2e       	mov	r4, r31
    2a3e:	ff ef       	ldi	r31, 0xFF	; 255
    2a40:	5f 2e       	mov	r5, r31
    2a42:	f0 2d       	mov	r31, r0
    2a44:	4c 0e       	add	r4, r28
    2a46:	5d 1e       	adc	r5, r29
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[2];
    2a48:	0f 2e       	mov	r0, r31
    2a4a:	f6 ef       	ldi	r31, 0xF6	; 246
    2a4c:	2f 2e       	mov	r2, r31
    2a4e:	ff ef       	ldi	r31, 0xFF	; 255
    2a50:	3f 2e       	mov	r3, r31
    2a52:	f0 2d       	mov	r31, r0
    2a54:	2c 0e       	add	r2, r28
    2a56:	3d 1e       	adc	r3, r29
		
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
		
		FRAMAddress +=3;
		checksumADC[0] += SPIBuffer[0];
    2a58:	62 e1       	ldi	r22, 0x12	; 18
    2a5a:	71 e2       	ldi	r23, 0x21	; 33
		checksumADC[1] += SPIBuffer[1];
    2a5c:	5b 01       	movw	r10, r22
    2a5e:	08 94       	sec
    2a60:	a1 1c       	adc	r10, r1
    2a62:	b1 1c       	adc	r11, r1
		checksumADC[2] += SPIBuffer[2];
    2a64:	88 24       	eor	r8, r8
    2a66:	99 24       	eor	r9, r9
    2a68:	68 94       	set
    2a6a:	81 f8       	bld	r8, 1
    2a6c:	86 0e       	add	r8, r22
    2a6e:	97 1e       	adc	r9, r23
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2a70:	30 e1       	ldi	r19, 0x10	; 16
    2a72:	d7 01       	movw	r26, r14
    2a74:	16 96       	adiw	r26, 0x06	; 6
    2a76:	3c 93       	st	X, r19
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2a78:	da 01       	movw	r26, r20
    2a7a:	16 96       	adiw	r26, 0x06	; 6
    2a7c:	2c 93       	st	X, r18
    2a7e:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    2a80:	00 00       	nop
		SPIC.DATA = FR_WREN;
    2a82:	73 82       	std	Z+3, r7	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	88 23       	and	r24, r24
    2a88:	ec f7       	brge	.-6      	; 0x2a84 <FRAMWriteKnowns+0x11c>
		SPIBuffer[12] = SPIC.DATA;
    2a8a:	83 81       	ldd	r24, Z+3	; 0x03
    2a8c:	88 83       	st	Y, r24
		PORTB.OUTSET = PIN3_bm;  // latch opcode
    2a8e:	da 01       	movw	r26, r20
    2a90:	15 96       	adiw	r26, 0x05	; 5
    2a92:	2c 93       	st	X, r18
    2a94:	15 97       	sbiw	r26, 0x05	; 5
		nop(); // time for CS_FRAM to accept high signal
    2a96:	00 00       	nop
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2a98:	16 96       	adiw	r26, 0x06	; 6
    2a9a:	2c 93       	st	X, r18
    2a9c:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    2a9e:	00 00       	nop
		SPIC.DATA = FR_WRITE;
    2aa0:	63 82       	std	Z+3, r6	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	88 23       	and	r24, r24
    2aa6:	ec f7       	brge	.-6      	; 0x2aa2 <FRAMWriteKnowns+0x13a>
		SPIBuffer[12] = SPIC.DATA;
    2aa8:	83 81       	ldd	r24, Z+3	; 0x03
    2aaa:	88 83       	st	Y, r24
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    2aac:	d6 01       	movw	r26, r12
    2aae:	11 96       	adiw	r26, 0x01	; 1
    2ab0:	8c 91       	ld	r24, X
    2ab2:	11 97       	sbiw	r26, 0x01	; 1
    2ab4:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	88 23       	and	r24, r24
    2aba:	ec f7       	brge	.-6      	; 0x2ab6 <FRAMWriteKnowns+0x14e>
		SPIBuffer[12] = SPIC.DATA;
    2abc:	83 81       	ldd	r24, Z+3	; 0x03
    2abe:	88 83       	st	Y, r24
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
    2ac0:	d6 01       	movw	r26, r12
    2ac2:	8c 91       	ld	r24, X
    2ac4:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	88 23       	and	r24, r24
    2aca:	ec f7       	brge	.-6      	; 0x2ac6 <FRAMWriteKnowns+0x15e>
		SPIBuffer[12] = SPIC.DATA;
    2acc:	83 81       	ldd	r24, Z+3	; 0x03
    2ace:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[0];
    2ad0:	d8 01       	movw	r26, r16
    2ad2:	8c 91       	ld	r24, X
    2ad4:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	88 23       	and	r24, r24
    2ada:	ec f7       	brge	.-6      	; 0x2ad6 <FRAMWriteKnowns+0x16e>
		SPIBuffer[12] = SPIC.DATA;
    2adc:	83 81       	ldd	r24, Z+3	; 0x03
    2ade:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[1];
    2ae0:	d2 01       	movw	r26, r4
    2ae2:	8c 91       	ld	r24, X
    2ae4:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	88 23       	and	r24, r24
    2aea:	ec f7       	brge	.-6      	; 0x2ae6 <FRAMWriteKnowns+0x17e>
		SPIBuffer[12] = SPIC.DATA;
    2aec:	83 81       	ldd	r24, Z+3	; 0x03
    2aee:	88 83       	st	Y, r24
		SPIC.DATA = SPIBuffer[2];
    2af0:	d1 01       	movw	r26, r2
    2af2:	8c 91       	ld	r24, X
    2af4:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	88 23       	and	r24, r24
    2afa:	ec f7       	brge	.-6      	; 0x2af6 <FRAMWriteKnowns+0x18e>
		SPIBuffer[12] = SPIC.DATA;
    2afc:	83 81       	ldd	r24, Z+3	; 0x03
    2afe:	88 83       	st	Y, r24
		
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    2b00:	da 01       	movw	r26, r20
    2b02:	15 96       	adiw	r26, 0x05	; 5
    2b04:	2c 93       	st	X, r18
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    2b06:	30 e1       	ldi	r19, 0x10	; 16
    2b08:	d7 01       	movw	r26, r14
    2b0a:	15 96       	adiw	r26, 0x05	; 5
    2b0c:	3c 93       	st	X, r19
		
		FRAMAddress +=3;
    2b0e:	80 91 1e 3e 	lds	r24, 0x3E1E
    2b12:	90 91 1f 3e 	lds	r25, 0x3E1F
    2b16:	03 96       	adiw	r24, 0x03	; 3
    2b18:	80 93 1e 3e 	sts	0x3E1E, r24
    2b1c:	90 93 1f 3e 	sts	0x3E1F, r25
		checksumADC[0] += SPIBuffer[0];
    2b20:	db 01       	movw	r26, r22
    2b22:	8c 91       	ld	r24, X
    2b24:	d8 01       	movw	r26, r16
    2b26:	9c 91       	ld	r25, X
    2b28:	89 0f       	add	r24, r25
    2b2a:	db 01       	movw	r26, r22
    2b2c:	8c 93       	st	X, r24
		checksumADC[1] += SPIBuffer[1];
    2b2e:	d5 01       	movw	r26, r10
    2b30:	8c 91       	ld	r24, X
    2b32:	a2 e2       	ldi	r26, 0x22	; 34
    2b34:	be e3       	ldi	r27, 0x3E	; 62
    2b36:	9c 91       	ld	r25, X
    2b38:	89 0f       	add	r24, r25
    2b3a:	d5 01       	movw	r26, r10
    2b3c:	8c 93       	st	X, r24
		checksumADC[2] += SPIBuffer[2];
    2b3e:	d4 01       	movw	r26, r8
    2b40:	8c 91       	ld	r24, X
    2b42:	a3 e2       	ldi	r26, 0x23	; 35
    2b44:	be e3       	ldi	r27, 0x3E	; 62
    2b46:	9c 91       	ld	r25, X
    2b48:	89 0f       	add	r24, r25
    2b4a:	d4 01       	movw	r26, r8
    2b4c:	8c 93       	st	X, r24
		
		sampleCount++;
    2b4e:	80 91 66 50 	lds	r24, 0x5066
    2b52:	90 91 67 50 	lds	r25, 0x5067
    2b56:	a0 91 68 50 	lds	r26, 0x5068
    2b5a:	b0 91 69 50 	lds	r27, 0x5069
    2b5e:	01 96       	adiw	r24, 0x01	; 1
    2b60:	a1 1d       	adc	r26, r1
    2b62:	b1 1d       	adc	r27, r1
    2b64:	80 93 66 50 	sts	0x5066, r24
    2b68:	90 93 67 50 	sts	0x5067, r25
    2b6c:	a0 93 68 50 	sts	0x5068, r26
    2b70:	b0 93 69 50 	sts	0x5069, r27
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    2b74:	80 91 66 50 	lds	r24, 0x5066
    2b78:	90 91 67 50 	lds	r25, 0x5067
    2b7c:	a0 91 68 50 	lds	r26, 0x5068
    2b80:	b0 91 69 50 	lds	r27, 0x5069
    2b84:	83 35       	cpi	r24, 0x53	; 83
    2b86:	35 e5       	ldi	r19, 0x55	; 85
    2b88:	93 07       	cpc	r25, r19
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	a3 07       	cpc	r26, r19
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	b3 07       	cpc	r27, r19
    2b92:	08 f4       	brcc	.+2      	; 0x2b96 <FRAMWriteKnowns+0x22e>
    2b94:	6d cf       	rjmp	.-294    	; 0x2a70 <FRAMWriteKnowns+0x108>
		checksumADC[2] += SPIBuffer[2];
		
		sampleCount++;
	}
	
	SPIDisable();
    2b96:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	ADCPower(FALSE);
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
}
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    2bb0:	bf 90       	pop	r11
    2bb2:	af 90       	pop	r10
    2bb4:	9f 90       	pop	r9
    2bb6:	8f 90       	pop	r8
    2bb8:	7f 90       	pop	r7
    2bba:	6f 90       	pop	r6
    2bbc:	5f 90       	pop	r5
    2bbe:	4f 90       	pop	r4
    2bc0:	3f 90       	pop	r3
    2bc2:	2f 90       	pop	r2
    2bc4:	08 95       	ret

00002bc6 <setADCInput>:

/*! \brief Sets input channel to AD7767 via the A0, A1, A2 control lines of ADG758
 */
void setADCInput(uint8_t channel) {
	// set bit A0 to LSB
	if(channel & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    2bc6:	80 ff       	sbrs	r24, 0
    2bc8:	05 c0       	rjmp	.+10     	; 0x2bd4 <setADCInput+0xe>
    2bca:	20 e4       	ldi	r18, 0x40	; 64
    2bcc:	e0 e0       	ldi	r30, 0x00	; 0
    2bce:	f6 e0       	ldi	r31, 0x06	; 6
    2bd0:	25 83       	std	Z+5, r18	; 0x05
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <setADCInput+0x16>
	else {PORTA.OUTCLR = PIN6_bm;}
    2bd4:	20 e4       	ldi	r18, 0x40	; 64
    2bd6:	e0 e0       	ldi	r30, 0x00	; 0
    2bd8:	f6 e0       	ldi	r31, 0x06	; 6
    2bda:	26 83       	std	Z+6, r18	; 0x06
	// set bit A1 to second bit
	if(channel & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    2bdc:	81 ff       	sbrs	r24, 1
    2bde:	05 c0       	rjmp	.+10     	; 0x2bea <setADCInput+0x24>
    2be0:	22 e0       	ldi	r18, 0x02	; 2
    2be2:	e0 e2       	ldi	r30, 0x20	; 32
    2be4:	f6 e0       	ldi	r31, 0x06	; 6
    2be6:	25 83       	std	Z+5, r18	; 0x05
    2be8:	04 c0       	rjmp	.+8      	; 0x2bf2 <setADCInput+0x2c>
	else {PORTB.OUTCLR = PIN1_bm;}
    2bea:	22 e0       	ldi	r18, 0x02	; 2
    2bec:	e0 e2       	ldi	r30, 0x20	; 32
    2bee:	f6 e0       	ldi	r31, 0x06	; 6
    2bf0:	26 83       	std	Z+6, r18	; 0x06
	// set bit A3 to third bit
	if(channel & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    2bf2:	82 ff       	sbrs	r24, 2
    2bf4:	05 c0       	rjmp	.+10     	; 0x2c00 <setADCInput+0x3a>
    2bf6:	84 e0       	ldi	r24, 0x04	; 4
    2bf8:	e0 e2       	ldi	r30, 0x20	; 32
    2bfa:	f6 e0       	ldi	r31, 0x06	; 6
    2bfc:	85 83       	std	Z+5, r24	; 0x05
    2bfe:	08 95       	ret
	else {PORTB.OUTCLR = PIN2_bm;}
    2c00:	84 e0       	ldi	r24, 0x04	; 4
    2c02:	e0 e2       	ldi	r30, 0x20	; 32
    2c04:	f6 e0       	ldi	r31, 0x06	; 6
    2c06:	86 83       	std	Z+6, r24	; 0x06
    2c08:	08 95       	ret

00002c0a <CO_collectSeismic1Channel_ext>:
	averagingPtB, averagingPtC, averagingPtD, numOfSamples, DataArray, BufferSize, use_FRAM);
}

//collect data from 1 axis of accelerometer
void CO_collectSeismic1Channel_ext(uint8_t channel, uint8_t filterConfig, uint8_t gain, uint16_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable, uint16_t averagingPtA, 
								uint16_t averagingPtB, uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    2c0a:	2f 92       	push	r2
    2c0c:	3f 92       	push	r3
    2c0e:	4f 92       	push	r4
    2c10:	5f 92       	push	r5
    2c12:	7f 92       	push	r7
    2c14:	8f 92       	push	r8
    2c16:	9f 92       	push	r9
    2c18:	af 92       	push	r10
    2c1a:	bf 92       	push	r11
    2c1c:	cf 92       	push	r12
    2c1e:	df 92       	push	r13
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	18 2f       	mov	r17, r24
    2c32:	76 2e       	mov	r7, r22
    2c34:	f4 2e       	mov	r15, r20
    2c36:	19 01       	movw	r2, r18
	
// 	#ifndef F_CPU
// 	#define F_CPU 32000000UL
// 	#endif
	
	ADC_BUFFER=DataArray;
    2c38:	89 8d       	ldd	r24, Y+25	; 0x19
    2c3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c3c:	80 93 64 50 	sts	0x5064, r24
    2c40:	90 93 65 50 	sts	0x5065, r25
	ADC_Sampling_Finished = 0;
    2c44:	10 92 a7 50 	sts	0x50A7, r1
	ADC_buffer_size = BufferSize;
    2c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4c:	80 93 a8 50 	sts	0x50A8, r24
    2c50:	90 93 a9 50 	sts	0x50A9, r25
	if(use_FRAM){
    2c54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c56:	88 23       	and	r24, r24
    2c58:	21 f0       	breq	.+8      	; 0x2c62 <CO_collectSeismic1Channel_ext+0x58>
		write_to_FRAM = 1;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	80 93 49 40 	sts	0x4049, r24
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <CO_collectSeismic1Channel_ext+0x5c>
	}
	else{
		write_to_FRAM = 0;
    2c62:	10 92 49 40 	sts	0x4049, r1
	}
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	// Set gains, filters, and input channel
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gain);
    2c6c:	81 2f       	mov	r24, r17
    2c6e:	6f 2d       	mov	r22, r15
    2c70:	0e 94 21 0c 	call	0x1842	; 0x1842 <set_ampGain>
	set_filter(filterConfig);
    2c74:	87 2d       	mov	r24, r7
    2c76:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
	ACC_DCPassEnable(DCPassEnable);
    2c7a:	8e 2d       	mov	r24, r14
    2c7c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    2c80:	84 e0       	ldi	r24, 0x04	; 4
    2c82:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2c86:	84 e5       	ldi	r24, 0x54	; 84
    2c88:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <enableADCMUX>
	setADCInput(channel);
    2c92:	81 2f       	mov	r24, r17
    2c94:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <setADCInput>
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    2c98:	e0 ea       	ldi	r30, 0xA0	; 160
    2c9a:	f6 e0       	ldi	r31, 0x06	; 6
    2c9c:	22 e0       	ldi	r18, 0x02	; 2
    2c9e:	20 8b       	std	Z+16, r18	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    2ca0:	77 24       	eor	r7, r7
    2ca2:	73 94       	inc	r7
    2ca4:	72 82       	std	Z+2, r7	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    2ca6:	0f 2e       	mov	r0, r31
    2ca8:	f0 e8       	ldi	r31, 0x80	; 128
    2caa:	4f 2e       	mov	r4, r31
    2cac:	f1 e0       	ldi	r31, 0x01	; 1
    2cae:	5f 2e       	mov	r5, r31
    2cb0:	f0 2d       	mov	r31, r0
    2cb2:	88 e7       	ldi	r24, 0x78	; 120
    2cb4:	d2 01       	movw	r26, r4
    2cb6:	8c 93       	st	X, r24

	// Configure counter for IO13(PF0) events
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    2cb8:	e0 e0       	ldi	r30, 0x00	; 0
    2cba:	f9 e0       	ldi	r31, 0x09	; 9
    2cbc:	80 ef       	ldi	r24, 0xF0	; 240
    2cbe:	81 83       	std	Z+1, r24	; 0x01
	TCD0.CCA = averagingPtA;
    2cc0:	c0 a6       	lds	r28, 0xb0
    2cc2:	d1 a6       	lds	r29, 0xb1
	TCD0.CCB = averagingPtB;
    2cc4:	a2 a6       	lds	r26, 0xb2
    2cc6:	b3 a6       	lds	r27, 0xb3
	TCD0.CCC = averagingPtC;
    2cc8:	84 a6       	lds	r24, 0xb4
    2cca:	95 a6       	lds	r25, 0xb5
	TCD0.CCD = averagingPtD;
    2ccc:	8d 89       	ldd	r24, Y+21	; 0x15
    2cce:	9e 89       	ldd	r25, Y+22	; 0x16
    2cd0:	86 a7       	lds	r24, 0x76
    2cd2:	97 a7       	lds	r25, 0x77
	TCD0.PER = subsamplesPerSample - 1;
    2cd4:	80 2f       	mov	r24, r16
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	86 a3       	lds	r24, 0x56
    2cdc:	97 a3       	lds	r25, 0x57
	TCD0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    2cde:	26 83       	std	Z+6, r18	; 0x06
	TCD0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	87 83       	std	Z+7, r24	; 0x07
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    2ce4:	80 81       	ld	r24, Z
    2ce6:	80 7f       	andi	r24, 0xF0	; 240
    2ce8:	88 60       	ori	r24, 0x08	; 8
    2cea:	80 83       	st	Z, r24

	//FRAMAddress = FR_BASEADD;
	sampleCount = 0;
    2cec:	10 92 66 50 	sts	0x5066, r1
    2cf0:	10 92 67 50 	sts	0x5067, r1
    2cf4:	10 92 68 50 	sts	0x5068, r1
    2cf8:	10 92 69 50 	sts	0x5069, r1
	SPICount = 0;
    2cfc:	10 92 a1 50 	sts	0x50A1, r1
	//checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
	

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    2d00:	80 e2       	ldi	r24, 0x20	; 32
    2d02:	e0 e8       	ldi	r30, 0x80	; 128
    2d04:	f6 e0       	ldi	r31, 0x06	; 6
    2d06:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    2d08:	00 e4       	ldi	r16, 0x40	; 64
    2d0a:	1a e0       	ldi	r17, 0x0A	; 10
    2d0c:	83 e2       	ldi	r24, 0x23	; 35
    2d0e:	f8 01       	movw	r30, r16
    2d10:	81 83       	std	Z+1, r24	; 0x01
	// set period
	//TCE1.PER = (0x20 << subsamplesPerSecond);
	//TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
	TCE1.PER = (F_CPU/16)/subsamplesPerSecond;
    2d12:	61 01       	movw	r12, r2
    2d14:	ee 24       	eor	r14, r14
    2d16:	ff 24       	eor	r15, r15
    2d18:	60 e8       	ldi	r22, 0x80	; 128
    2d1a:	74 e8       	ldi	r23, 0x84	; 132
    2d1c:	8e e1       	ldi	r24, 0x1E	; 30
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a7 01       	movw	r20, r14
    2d22:	96 01       	movw	r18, r12
    2d24:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    2d28:	d8 01       	movw	r26, r16
    2d2a:	96 96       	adiw	r26, 0x26	; 38
    2d2c:	2d 93       	st	X+, r18
    2d2e:	3c 93       	st	X, r19
    2d30:	97 97       	sbiw	r26, 0x27	; 39
	TCE1.CCBBUF = ((F_CPU/16)/subsamplesPerSecond)/2;
    2d32:	60 e4       	ldi	r22, 0x40	; 64
    2d34:	72 e4       	ldi	r23, 0x42	; 66
    2d36:	8f e0       	ldi	r24, 0x0F	; 15
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a7 01       	movw	r20, r14
    2d3c:	96 01       	movw	r18, r12
    2d3e:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    2d42:	f8 01       	movw	r30, r16
    2d44:	22 af       	sts	0x72, r18
    2d46:	33 af       	sts	0x73, r19
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//reset count to zero
	TCC1.CTRLA = 0x00;
    2d48:	e0 e4       	ldi	r30, 0x40	; 64
    2d4a:	f8 e0       	ldi	r31, 0x08	; 8
    2d4c:	10 82       	st	Z, r1
	TCC1.CTRLFSET = 0x0C;	
    2d4e:	8c e0       	ldi	r24, 0x0C	; 12
    2d50:	81 87       	std	Z+9, r24	; 0x09
	//set the period as number of samples to know when to stop sampling
	TCC1.PER = numOfSamples;
    2d52:	8f 89       	ldd	r24, Y+23	; 0x17
    2d54:	98 8d       	ldd	r25, Y+24	; 0x18
    2d56:	86 a3       	lds	r24, 0x56
    2d58:	97 a3       	lds	r25, 0x57
	//Configure IO13(PF0) to drive event channel that triggers event every time the 4 samples are collected and averaged
	EVSYS.CH1MUX = EVSYS_CHMUX_TCD0_OVF_gc;
    2d5a:	80 ed       	ldi	r24, 0xD0	; 208
    2d5c:	d2 01       	movw	r26, r4
    2d5e:	11 96       	adiw	r26, 0x01	; 1
    2d60:	8c 93       	st	X, r24
    2d62:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    2d64:	76 82       	std	Z+6, r7	; 0x06
	//set event system to update counter of number of samples every sample event
	TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
    2d66:	80 81       	ld	r24, Z
    2d68:	80 7f       	andi	r24, 0xF0	; 240
    2d6a:	89 60       	ori	r24, 0x09	; 9
    2d6c:	80 83       	st	Z, r24
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2d6e:	f8 01       	movw	r30, r16
    2d70:	80 81       	ld	r24, Z
    2d72:	80 7f       	andi	r24, 0xF0	; 240
    2d74:	81 60       	ori	r24, 0x01	; 1
    2d76:	80 83       	st	Z, r24
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    2d78:	e0 ea       	ldi	r30, 0xA0	; 160
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	87 60       	ori	r24, 0x07	; 7
    2d80:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2d82:	78 94       	sei
// 
// 	SPICS(FALSE);
// 	SPIDisable();
// 	enableADCMUX(FALSE);
	
}
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	ff 90       	pop	r15
    2d8e:	ef 90       	pop	r14
    2d90:	df 90       	pop	r13
    2d92:	cf 90       	pop	r12
    2d94:	bf 90       	pop	r11
    2d96:	af 90       	pop	r10
    2d98:	9f 90       	pop	r9
    2d9a:	8f 90       	pop	r8
    2d9c:	7f 90       	pop	r7
    2d9e:	5f 90       	pop	r5
    2da0:	4f 90       	pop	r4
    2da2:	3f 90       	pop	r3
    2da4:	2f 90       	pop	r2
    2da6:	08 95       	ret

00002da8 <CO_collectSeismic1Channel>:
	sampleCount++;

}

void CO_collectSeismic1Channel(uint8_t channel, uint8_t gain, uint16_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable, uint16_t averagingPtA,
								uint16_t averagingPtB, uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    2da8:	2f 92       	push	r2
    2daa:	3f 92       	push	r3
    2dac:	4f 92       	push	r4
    2dae:	5f 92       	push	r5
    2db0:	6f 92       	push	r6
    2db2:	7f 92       	push	r7
    2db4:	8f 92       	push	r8
    2db6:	9f 92       	push	r9
    2db8:	af 92       	push	r10
    2dba:	bf 92       	push	r11
    2dbc:	cf 92       	push	r12
    2dbe:	df 92       	push	r13
    2dc0:	ef 92       	push	r14
    2dc2:	ff 92       	push	r15
    2dc4:	0f 93       	push	r16
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	0f 92       	push	r0
    2dcc:	0f 92       	push	r0
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	96 2f       	mov	r25, r22
    2dd4:	49 83       	std	Y+1, r20	; 0x01
    2dd6:	5a 83       	std	Y+2, r21	; 0x02
    2dd8:	52 2f       	mov	r21, r18
    2dda:	70 2f       	mov	r23, r16
    2ddc:	37 01       	movw	r6, r14
    2dde:	26 01       	movw	r4, r12
    2de0:	15 01       	movw	r2, r10
	
	CO_collectSeismic1Channel_ext(channel, (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gain, subsamplesPerSecond, subsamplesPerSample, DCPassEnable, averagingPtA,
    2de2:	2d b7       	in	r18, 0x3d	; 61
    2de4:	3e b7       	in	r19, 0x3e	; 62
    2de6:	29 50       	subi	r18, 0x09	; 9
    2de8:	30 40       	sbci	r19, 0x00	; 0
    2dea:	2d bf       	out	0x3d, r18	; 61
    2dec:	3e bf       	out	0x3e, r19	; 62
    2dee:	ed b7       	in	r30, 0x3d	; 61
    2df0:	fe b7       	in	r31, 0x3e	; 62
    2df2:	31 96       	adiw	r30, 0x01	; 1
    2df4:	ad b7       	in	r26, 0x3d	; 61
    2df6:	be b7       	in	r27, 0x3e	; 62
    2df8:	11 96       	adiw	r26, 0x01	; 1
    2dfa:	8d 92       	st	X+, r8
    2dfc:	9c 92       	st	X, r9
    2dfe:	12 97       	sbiw	r26, 0x02	; 2
    2e00:	2f 89       	ldd	r18, Y+23	; 0x17
    2e02:	38 8d       	ldd	r19, Y+24	; 0x18
    2e04:	22 83       	std	Z+2, r18	; 0x02
    2e06:	33 83       	std	Z+3, r19	; 0x03
    2e08:	29 8d       	ldd	r18, Y+25	; 0x19
    2e0a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2e0c:	24 83       	std	Z+4, r18	; 0x04
    2e0e:	35 83       	std	Z+5, r19	; 0x05
    2e10:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2e12:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2e14:	26 83       	std	Z+6, r18	; 0x06
    2e16:	37 83       	std	Z+7, r19	; 0x07
    2e18:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e1a:	20 87       	std	Z+8, r18	; 0x08
    2e1c:	64 ec       	ldi	r22, 0xC4	; 196
    2e1e:	49 2f       	mov	r20, r25
    2e20:	29 81       	ldd	r18, Y+1	; 0x01
    2e22:	3a 81       	ldd	r19, Y+2	; 0x02
    2e24:	05 2f       	mov	r16, r21
    2e26:	e7 2e       	mov	r14, r23
    2e28:	63 01       	movw	r12, r6
    2e2a:	52 01       	movw	r10, r4
    2e2c:	41 01       	movw	r8, r2
    2e2e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <CO_collectSeismic1Channel_ext>
    2e32:	2d b7       	in	r18, 0x3d	; 61
    2e34:	3e b7       	in	r19, 0x3e	; 62
    2e36:	27 5f       	subi	r18, 0xF7	; 247
    2e38:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3a:	2d bf       	out	0x3d, r18	; 61
    2e3c:	3e bf       	out	0x3e, r19	; 62
	averagingPtB, averagingPtC, averagingPtD, numOfSamples, DataArray, BufferSize, use_FRAM);
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	0f 91       	pop	r16
    2e48:	ff 90       	pop	r15
    2e4a:	ef 90       	pop	r14
    2e4c:	df 90       	pop	r13
    2e4e:	cf 90       	pop	r12
    2e50:	bf 90       	pop	r11
    2e52:	af 90       	pop	r10
    2e54:	9f 90       	pop	r9
    2e56:	8f 90       	pop	r8
    2e58:	7f 90       	pop	r7
    2e5a:	6f 90       	pop	r6
    2e5c:	5f 90       	pop	r5
    2e5e:	4f 90       	pop	r4
    2e60:	3f 90       	pop	r3
    2e62:	2f 90       	pop	r2
    2e64:	08 95       	ret

00002e66 <CO_collectSeismic3Axises_ext>:
	subsamplesPerChannel, DCPassEnable, averagingPtA, averagingPtB,
	averagingPtC, averagingPtD, numOfSamples, DataArray, BufferSize, use_FRAM);
}	
void CO_collectSeismic3Axises_ext(uint8_t filterConfig, uint8_t gain[], uint16_t subsamplesPerSecond,
uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    2e66:	2f 92       	push	r2
    2e68:	3f 92       	push	r3
    2e6a:	5f 92       	push	r5
    2e6c:	6f 92       	push	r6
    2e6e:	7f 92       	push	r7
    2e70:	8f 92       	push	r8
    2e72:	9f 92       	push	r9
    2e74:	af 92       	push	r10
    2e76:	bf 92       	push	r11
    2e78:	cf 92       	push	r12
    2e7a:	df 92       	push	r13
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	0f 92       	push	r0
    2e8a:	0f 92       	push	r0
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	18 2f       	mov	r17, r24
    2e92:	3b 01       	movw	r6, r22
    2e94:	49 83       	std	Y+1, r20	; 0x01
    2e96:	5a 83       	std	Y+2, r21	; 0x02
    2e98:	52 2e       	mov	r5, r18
	
// 	#ifndef F_CPU
// 	#define F_CPU 32000000UL
// 	#endif
	
	ADC_BUFFER = DataArray;
    2e9a:	89 8d       	ldd	r24, Y+25	; 0x19
    2e9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e9e:	80 93 64 50 	sts	0x5064, r24
    2ea2:	90 93 65 50 	sts	0x5065, r25
	ADC_Sampling_Finished = 0;
    2ea6:	10 92 a7 50 	sts	0x50A7, r1
	ADC_buffer_size = BufferSize;
    2eaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eae:	80 93 a8 50 	sts	0x50A8, r24
    2eb2:	90 93 a9 50 	sts	0x50A9, r25
	if(use_FRAM){
    2eb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb8:	88 23       	and	r24, r24
    2eba:	21 f0       	breq	.+8      	; 0x2ec4 <CO_collectSeismic3Axises_ext+0x5e>
		write_to_FRAM = 1;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	80 93 49 40 	sts	0x4049, r24
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <CO_collectSeismic3Axises_ext+0x62>
	}
	else{
		write_to_FRAM = 0;
    2ec4:	10 92 49 40 	sts	0x4049, r1
	}
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	// Set gains, filters, and input channel
	set_ampGain(ADC_CH_6_gc, gain[0]);
    2ece:	85 e0       	ldi	r24, 0x05	; 5
    2ed0:	d3 01       	movw	r26, r6
    2ed2:	6c 91       	ld	r22, X
    2ed4:	0e 94 21 0c 	call	0x1842	; 0x1842 <set_ampGain>
	set_ampGain(ADC_CH_7_gc, gain[1]);
    2ed8:	86 e0       	ldi	r24, 0x06	; 6
    2eda:	f3 01       	movw	r30, r6
    2edc:	61 81       	ldd	r22, Z+1	; 0x01
    2ede:	0e 94 21 0c 	call	0x1842	; 0x1842 <set_ampGain>
	set_ampGain(ADC_CH_8_gc, gain[2]);
    2ee2:	87 e0       	ldi	r24, 0x07	; 7
    2ee4:	d3 01       	movw	r26, r6
    2ee6:	12 96       	adiw	r26, 0x02	; 2
    2ee8:	6c 91       	ld	r22, X
    2eea:	0e 94 21 0c 	call	0x1842	; 0x1842 <set_ampGain>
	set_filter(filterConfig);
    2eee:	81 2f       	mov	r24, r17
    2ef0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>
	ACC_DCPassEnable(DCPassEnable);
    2ef4:	80 2f       	mov	r24, r16
    2ef6:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    2efa:	84 e0       	ldi	r24, 0x04	; 4
    2efc:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2f00:	84 e5       	ldi	r24, 0x54	; 84
    2f02:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <enableADCMUX>
	setADCInput(ADC_CH_6_gc);
    2f0c:	85 e0       	ldi	r24, 0x05	; 5
    2f0e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <setADCInput>
	

	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    2f12:	e0 ea       	ldi	r30, 0xA0	; 160
    2f14:	f6 e0       	ldi	r31, 0x06	; 6
    2f16:	22 e0       	ldi	r18, 0x02	; 2
    2f18:	20 8b       	std	Z+16, r18	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    2f1a:	66 24       	eor	r6, r6
    2f1c:	63 94       	inc	r6
    2f1e:	62 82       	std	Z+2, r6	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    2f20:	0f 2e       	mov	r0, r31
    2f22:	f0 e8       	ldi	r31, 0x80	; 128
    2f24:	2f 2e       	mov	r2, r31
    2f26:	f1 e0       	ldi	r31, 0x01	; 1
    2f28:	3f 2e       	mov	r3, r31
    2f2a:	f0 2d       	mov	r31, r0
    2f2c:	88 e7       	ldi	r24, 0x78	; 120
    2f2e:	f1 01       	movw	r30, r2
    2f30:	80 83       	st	Z, r24

	// Configure counter for IO13(PF0) events
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    2f32:	e0 e0       	ldi	r30, 0x00	; 0
    2f34:	f8 e0       	ldi	r31, 0x08	; 8
    2f36:	80 ef       	ldi	r24, 0xF0	; 240
    2f38:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CCA = averagingPtA;
    2f3a:	e0 a6       	lds	r30, 0xb0
    2f3c:	f1 a6       	lds	r31, 0xb1
	TCC0.CCB = averagingPtB;
    2f3e:	c2 a6       	lds	r28, 0xb2
    2f40:	d3 a6       	lds	r29, 0xb3
	TCC0.CCC = averagingPtC;
    2f42:	a4 a6       	lds	r26, 0xb4
    2f44:	b5 a6       	lds	r27, 0xb5
	TCC0.CCD = averagingPtD;
    2f46:	86 a6       	lds	r24, 0xb6
    2f48:	97 a6       	lds	r25, 0xb7
	TCC0.PER = subsamplesPerChannel - 1;
    2f4a:	85 2d       	mov	r24, r5
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	86 a3       	lds	r24, 0x56
    2f52:	97 a3       	lds	r25, 0x57
	TCC0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    2f54:	26 83       	std	Z+6, r18	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    2f56:	8f ef       	ldi	r24, 0xFF	; 255
    2f58:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    2f5a:	80 81       	ld	r24, Z
    2f5c:	80 7f       	andi	r24, 0xF0	; 240
    2f5e:	88 60       	ori	r24, 0x08	; 8
    2f60:	80 83       	st	Z, r24

	sampleCount = 0;
    2f62:	10 92 66 50 	sts	0x5066, r1
    2f66:	10 92 67 50 	sts	0x5067, r1
    2f6a:	10 92 68 50 	sts	0x5068, r1
    2f6e:	10 92 69 50 	sts	0x5069, r1
	SPICount = 0;
    2f72:	10 92 a1 50 	sts	0x50A1, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    2f76:	84 e1       	ldi	r24, 0x14	; 20
    2f78:	91 e2       	ldi	r25, 0x21	; 33
    2f7a:	10 92 14 21 	sts	0x2114, r1
    2f7e:	fc 01       	movw	r30, r24
    2f80:	31 97       	sbiw	r30, 0x01	; 1
    2f82:	10 82       	st	Z, r1
    2f84:	02 97       	sbiw	r24, 0x02	; 2
    2f86:	dc 01       	movw	r26, r24
    2f88:	1c 92       	st	X, r1

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    2f8a:	80 e2       	ldi	r24, 0x20	; 32
    2f8c:	e0 e8       	ldi	r30, 0x80	; 128
    2f8e:	f6 e0       	ldi	r31, 0x06	; 6
    2f90:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    2f92:	00 e4       	ldi	r16, 0x40	; 64
    2f94:	1a e0       	ldi	r17, 0x0A	; 10
    2f96:	83 e2       	ldi	r24, 0x23	; 35
    2f98:	f8 01       	movw	r30, r16
    2f9a:	81 83       	std	Z+1, r24	; 0x01
	// set period of waveform generator and duty cycle (want duty cycle to be half the period to get clean clock signal)
	//TCE1.PER = (0x20 << subsamplesPerSecond);
	TCE1.PER = (F_CPU/16)/subsamplesPerSecond;
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa0:	6c 01       	movw	r12, r24
    2fa2:	ee 24       	eor	r14, r14
    2fa4:	ff 24       	eor	r15, r15
    2fa6:	60 e8       	ldi	r22, 0x80	; 128
    2fa8:	74 e8       	ldi	r23, 0x84	; 132
    2faa:	8e e1       	ldi	r24, 0x1E	; 30
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a7 01       	movw	r20, r14
    2fb0:	96 01       	movw	r18, r12
    2fb2:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    2fb6:	d8 01       	movw	r26, r16
    2fb8:	96 96       	adiw	r26, 0x26	; 38
    2fba:	2d 93       	st	X+, r18
    2fbc:	3c 93       	st	X, r19
    2fbe:	97 97       	sbiw	r26, 0x27	; 39
	//TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
	TCE1.CCBBUF = ((F_CPU/16)/subsamplesPerSecond)/2;
    2fc0:	60 e4       	ldi	r22, 0x40	; 64
    2fc2:	72 e4       	ldi	r23, 0x42	; 66
    2fc4:	8f e0       	ldi	r24, 0x0F	; 15
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	a7 01       	movw	r20, r14
    2fca:	96 01       	movw	r18, r12
    2fcc:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	22 af       	sts	0x72, r18
    2fd4:	33 af       	sts	0x73, r19
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//reset count to zero
	TCC1.CTRLA = 0x00;
    2fd6:	e0 e4       	ldi	r30, 0x40	; 64
    2fd8:	f8 e0       	ldi	r31, 0x08	; 8
    2fda:	10 82       	st	Z, r1
	TCC1.CTRLFSET = 0x0C;	
    2fdc:	8c e0       	ldi	r24, 0x0C	; 12
    2fde:	81 87       	std	Z+9, r24	; 0x09
	//set the period as number of samples to know when to stop sampling
	TCC1.PER = numOfSamples;
    2fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe4:	86 a3       	lds	r24, 0x56
    2fe6:	97 a3       	lds	r25, 0x57
	//Configure IO13(PF0) to drive event channel that triggers event every time the 4 samples are collected and averaged
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    2fe8:	80 ec       	ldi	r24, 0xC0	; 192
    2fea:	d1 01       	movw	r26, r2
    2fec:	11 96       	adiw	r26, 0x01	; 1
    2fee:	8c 93       	st	X, r24
    2ff0:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    2ff2:	66 82       	std	Z+6, r6	; 0x06
	//set event system to update counter of number of samples every sample event
	TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
    2ff4:	80 81       	ld	r24, Z
    2ff6:	80 7f       	andi	r24, 0xF0	; 240
    2ff8:	89 60       	ori	r24, 0x09	; 9
    2ffa:	80 83       	st	Z, r24
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2ffc:	f8 01       	movw	r30, r16
    2ffe:	80 81       	ld	r24, Z
    3000:	80 7f       	andi	r24, 0xF0	; 240
    3002:	81 60       	ori	r24, 0x01	; 1
    3004:	80 83       	st	Z, r24
	
	// Enable interrupts.
	PMIC.CTRL |= (PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm);
    3006:	e0 ea       	ldi	r30, 0xA0	; 160
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	87 60       	ori	r24, 0x07	; 7
    300e:	82 83       	std	Z+2, r24	; 0x02
	sei();
    3010:	78 94       	sei
// 
// 	SPICS(FALSE);
// 	SPIDisable();
// 	enableADCMUX(FALSE);
	//ADCPower(FALSE);
}
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	ff 90       	pop	r15
    3020:	ef 90       	pop	r14
    3022:	df 90       	pop	r13
    3024:	cf 90       	pop	r12
    3026:	bf 90       	pop	r11
    3028:	af 90       	pop	r10
    302a:	9f 90       	pop	r9
    302c:	8f 90       	pop	r8
    302e:	7f 90       	pop	r7
    3030:	6f 90       	pop	r6
    3032:	5f 90       	pop	r5
    3034:	3f 90       	pop	r3
    3036:	2f 90       	pop	r2
    3038:	08 95       	ret

0000303a <CO_collectSeismic3Axises>:
	ADCPower(FALSE);
	
}*/
void CO_collectSeismic3Axises(uint8_t gain[], uint16_t subsamplesPerSecond,
uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
uint16_t averagingPtC, uint16_t averagingPtD, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    303a:	2f 92       	push	r2
    303c:	3f 92       	push	r3
    303e:	4f 92       	push	r4
    3040:	5f 92       	push	r5
    3042:	6f 92       	push	r6
    3044:	7f 92       	push	r7
    3046:	8f 92       	push	r8
    3048:	9f 92       	push	r9
    304a:	af 92       	push	r10
    304c:	bf 92       	push	r11
    304e:	cf 92       	push	r12
    3050:	df 92       	push	r13
    3052:	ef 92       	push	r14
    3054:	ff 92       	push	r15
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	00 d0       	rcall	.+0      	; 0x3060 <CO_collectSeismic3Axises+0x26>
    3060:	0f 92       	push	r0
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	dc 01       	movw	r26, r24
    3068:	3b 01       	movw	r6, r22
    306a:	94 2f       	mov	r25, r20
    306c:	32 2f       	mov	r19, r18
    306e:	28 01       	movw	r4, r16
    3070:	17 01       	movw	r2, r14
    3072:	c9 82       	std	Y+1, r12	; 0x01
    3074:	da 82       	std	Y+2, r13	; 0x02
    3076:	ab 82       	std	Y+3, r10	; 0x03
    3078:	bc 82       	std	Y+4, r11	; 0x04
	
	CO_collectSeismic3Axises_ext((uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gain, subsamplesPerSecond,
    307a:	4d b7       	in	r20, 0x3d	; 61
    307c:	5e b7       	in	r21, 0x3e	; 62
    307e:	47 50       	subi	r20, 0x07	; 7
    3080:	50 40       	sbci	r21, 0x00	; 0
    3082:	4d bf       	out	0x3d, r20	; 61
    3084:	5e bf       	out	0x3e, r21	; 62
    3086:	6d b7       	in	r22, 0x3d	; 61
    3088:	7e b7       	in	r23, 0x3e	; 62
    308a:	6f 5f       	subi	r22, 0xFF	; 255
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	ed b7       	in	r30, 0x3d	; 61
    3090:	fe b7       	in	r31, 0x3e	; 62
    3092:	81 82       	std	Z+1, r8	; 0x01
    3094:	92 82       	std	Z+2, r9	; 0x02
    3096:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3098:	5b 8d       	ldd	r21, Y+27	; 0x1b
    309a:	fb 01       	movw	r30, r22
    309c:	42 83       	std	Z+2, r20	; 0x02
    309e:	53 83       	std	Z+3, r21	; 0x03
    30a0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    30a2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    30a4:	44 83       	std	Z+4, r20	; 0x04
    30a6:	55 83       	std	Z+5, r21	; 0x05
    30a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30aa:	86 83       	std	Z+6, r24	; 0x06
    30ac:	84 ec       	ldi	r24, 0xC4	; 196
    30ae:	bd 01       	movw	r22, r26
    30b0:	a3 01       	movw	r20, r6
    30b2:	29 2f       	mov	r18, r25
    30b4:	03 2f       	mov	r16, r19
    30b6:	72 01       	movw	r14, r4
    30b8:	61 01       	movw	r12, r2
    30ba:	a9 80       	ldd	r10, Y+1	; 0x01
    30bc:	ba 80       	ldd	r11, Y+2	; 0x02
    30be:	8b 80       	ldd	r8, Y+3	; 0x03
    30c0:	9c 80       	ldd	r9, Y+4	; 0x04
    30c2:	0e 94 33 17 	call	0x2e66	; 0x2e66 <CO_collectSeismic3Axises_ext>
    30c6:	4d b7       	in	r20, 0x3d	; 61
    30c8:	5e b7       	in	r21, 0x3e	; 62
    30ca:	49 5f       	subi	r20, 0xF9	; 249
    30cc:	5f 4f       	sbci	r21, 0xFF	; 255
    30ce:	4d bf       	out	0x3d, r20	; 61
    30d0:	5e bf       	out	0x3e, r21	; 62
	subsamplesPerChannel, DCPassEnable, averagingPtA, averagingPtB,
	averagingPtC, averagingPtD, numOfSamples, DataArray, BufferSize, use_FRAM);
}	
    30d2:	24 96       	adiw	r28, 0x04	; 4
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	ff 90       	pop	r15
    30e2:	ef 90       	pop	r14
    30e4:	df 90       	pop	r13
    30e6:	cf 90       	pop	r12
    30e8:	bf 90       	pop	r11
    30ea:	af 90       	pop	r10
    30ec:	9f 90       	pop	r9
    30ee:	8f 90       	pop	r8
    30f0:	7f 90       	pop	r7
    30f2:	6f 90       	pop	r6
    30f4:	5f 90       	pop	r5
    30f6:	4f 90       	pop	r4
    30f8:	3f 90       	pop	r3
    30fa:	2f 90       	pop	r2
    30fc:	08 95       	ret

000030fe <CO_collectADC_ext>:
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC_ext(uint8_t channel, uint8_t filterConfig, uint8_t gainExponent, uint16_t SPS, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    30fe:	6f 92       	push	r6
    3100:	7f 92       	push	r7
    3102:	8f 92       	push	r8
    3104:	9f 92       	push	r9
    3106:	af 92       	push	r10
    3108:	bf 92       	push	r11
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ef 92       	push	r14
    3110:	ff 92       	push	r15
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	c8 2f       	mov	r28, r24
    311c:	b6 2e       	mov	r11, r22
    311e:	d4 2f       	mov	r29, r20
    3120:	49 01       	movw	r8, r18
    3122:	38 01       	movw	r6, r16
// 	#ifndef F_CPU
// 	#define F_CPU 32000000UL
// 	#endif
	
	uint16_t period;
	ADC_BUFFER = DataArray;
    3124:	e0 92 64 50 	sts	0x5064, r14
    3128:	f0 92 65 50 	sts	0x5065, r15
	ADC_Sampling_Finished = 0;
    312c:	10 92 a7 50 	sts	0x50A7, r1
	ADC_buffer_size = BufferSize;
    3130:	c0 92 a8 50 	sts	0x50A8, r12
    3134:	d0 92 a9 50 	sts	0x50A9, r13
	if(use_FRAM){
    3138:	aa 20       	and	r10, r10
    313a:	21 f0       	breq	.+8      	; 0x3144 <CO_collectADC_ext+0x46>
		write_to_FRAM = 1;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	80 93 49 40 	sts	0x4049, r24
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <CO_collectADC_ext+0x4a>
	}
	else{
		write_to_FRAM = 0;
    3144:	10 92 49 40 	sts	0x4049, r1
	}
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gainExponent);
    314e:	8c 2f       	mov	r24, r28
    3150:	6d 2f       	mov	r22, r29
    3152:	0e 94 21 0c 	call	0x1842	; 0x1842 <set_ampGain>
	set_filter(filterConfig);
    3156:	8b 2d       	mov	r24, r11
    3158:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_filter>

	// if acc channel then enable DC Pass 
	// it is assumed that if not using high frequency acc specific function then 
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
    315c:	8c 2f       	mov	r24, r28
    315e:	85 50       	subi	r24, 0x05	; 5
    3160:	83 30       	cpi	r24, 0x03	; 3
    3162:	18 f4       	brcc	.+6      	; 0x316a <CO_collectADC_ext+0x6c>
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <ACC_DCPassEnable>

	enableADCMUX(TRUE);
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <enableADCMUX>
	setADCInput(channel);
    3170:	8c 2f       	mov	r24, r28
    3172:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <setADCInput>
	SPIInit(SPI_MODE_1_gc);
    3176:	84 e0       	ldi	r24, 0x04	; 4
    3178:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    317c:	84 e5       	ldi	r24, 0x54	; 84
    317e:	80 93 c0 08 	sts	0x08C0, r24
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.DIRCLR = PIN0_bm;
    3182:	e0 ea       	ldi	r30, 0xA0	; 160
    3184:	f6 e0       	ldi	r31, 0x06	; 6
    3186:	ee 24       	eor	r14, r14
    3188:	e3 94       	inc	r14
    318a:	e2 82       	std	Z+2, r14	; 0x02
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    318c:	82 e0       	ldi	r24, 0x02	; 2
    318e:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.INT0MASK = PIN0_bm;
    3190:	e2 86       	std	Z+10, r14	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_MED_gc;				
    3192:	81 87       	std	Z+9, r24	; 0x09

	// Configure clock for AD7767 MCLK for desired sample frequency
	// f_samples = f_MCLK / 16
	// f_MCLK = f_peripheral(2^25Hz) / (f_period + 1Hz)
	// Set IO14 (PE5) to output
	PORTE.DIRSET = PIN5_bm;
    3194:	80 e2       	ldi	r24, 0x20	; 32
    3196:	e0 e8       	ldi	r30, 0x80	; 128
    3198:	f6 e0       	ldi	r31, 0x06	; 6
    319a:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    319c:	c0 e4       	ldi	r28, 0x40	; 64
    319e:	da e0       	ldi	r29, 0x0A	; 10
    31a0:	83 e2       	ldi	r24, 0x23	; 35
    31a2:	89 83       	std	Y+1, r24	; 0x01
	// set period of waveform generator and ccb as duty cycle (want half the period for duty cycle to have good clock signal)
	//period = (1 << (21 - spsExponent)) - 1;
	period = (F_CPU/16)/SPS;
    31a4:	94 01       	movw	r18, r8
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	60 e8       	ldi	r22, 0x80	; 128
    31ac:	74 e8       	ldi	r23, 0x84	; 132
    31ae:	8e e1       	ldi	r24, 0x1E	; 30
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    31b6:	89 01       	movw	r16, r18
    31b8:	9a 01       	movw	r18, r20
    31ba:	c8 01       	movw	r24, r16
	TCE1.PER = period;
    31bc:	0e a3       	lds	r16, 0x5e
    31be:	1f a3       	lds	r17, 0x5f
	TCE1.CCBBUF = period / 2;
    31c0:	96 95       	lsr	r25
    31c2:	87 95       	ror	r24
    31c4:	8a af       	sts	0x7a, r24
    31c6:	9b af       	sts	0x7b, r25
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//reset count to zero
	TCC1.CTRLA = 0x00;
    31c8:	e0 e4       	ldi	r30, 0x40	; 64
    31ca:	f8 e0       	ldi	r31, 0x08	; 8
    31cc:	10 82       	st	Z, r1
	TCC1.CTRLFSET = 0x0C;
    31ce:	8c e0       	ldi	r24, 0x0C	; 12
    31d0:	81 87       	std	Z+9, r24	; 0x09
	
	//set the period as number of samples to know when to stop sampling (and compensate for discarded samples at start of sampling)
	TCC1.PER = numOfSamples;
    31d2:	66 a2       	lds	r22, 0x96
    31d4:	77 a2       	lds	r23, 0x97
	//Configure IO13(PF0) to drive event channel that triggers event every time a sample is collected
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    31d6:	88 e7       	ldi	r24, 0x78	; 120
    31d8:	a0 e8       	ldi	r26, 0x80	; 128
    31da:	b1 e0       	ldi	r27, 0x01	; 1
    31dc:	11 96       	adiw	r26, 0x01	; 1
    31de:	8c 93       	st	X, r24
    31e0:	11 97       	sbiw	r26, 0x01	; 1
	//set overflow interrupt to low lvl
	TCC1.INTCTRLA =  TC_OVFINTLVL_LO_gc;
    31e2:	e6 82       	std	Z+6, r14	; 0x06
	//TCC1.CTRLA = ( TCC1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_EVCH1_gc;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    31e4:	88 81       	ld	r24, Y
    31e6:	80 7f       	andi	r24, 0xF0	; 240
    31e8:	81 60       	ori	r24, 0x01	; 1
    31ea:	88 83       	st	Y, r24
	
	sampleCount = 0;
    31ec:	10 92 66 50 	sts	0x5066, r1
    31f0:	10 92 67 50 	sts	0x5067, r1
    31f4:	10 92 68 50 	sts	0x5068, r1
    31f8:	10 92 69 50 	sts	0x5069, r1
	discardCount = 0;
    31fc:	10 92 5d 40 	sts	0x405D, r1
		
	// Enable interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
    3200:	e0 ea       	ldi	r30, 0xA0	; 160
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	83 60       	ori	r24, 0x03	; 3
    3208:	82 83       	std	Z+2, r24	; 0x02
	sei();
    320a:	78 94       	sei
	//cli();

	//SPIDisable();	
	//enableADCMUX(FALSE);
	//ADCPower(FALSE);
}
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
    321c:	bf 90       	pop	r11
    321e:	af 90       	pop	r10
    3220:	9f 90       	pop	r9
    3222:	8f 90       	pop	r8
    3224:	7f 90       	pop	r7
    3226:	6f 90       	pop	r6
    3228:	08 95       	ret

0000322a <CO_collectADC>:
		PORTA.OUTCLR = PIN5_bm;
		PORTA.DIRCLR = PIN5_bm;
	}
}

void CO_collectADC(uint8_t channel, uint8_t gainExponent, uint16_t SPS, uint16_t numOfSamples, int32_t* DataArray, uint16_t BufferSize, uint8_t use_FRAM) {
    322a:	8f 92       	push	r8
    322c:	9f 92       	push	r9
    322e:	af 92       	push	r10
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	96 2f       	mov	r25, r22
    3242:	fa 01       	movw	r30, r20
    3244:	d9 01       	movw	r26, r18
    3246:	e8 01       	movw	r28, r16
    3248:	47 01       	movw	r8, r14
    324a:	ac 2c       	mov	r10, r12
	
	CO_collectADC_ext(channel, (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc), gainExponent, SPS, numOfSamples, DataArray, BufferSize, use_FRAM);
    324c:	61 ec       	ldi	r22, 0xC1	; 193
    324e:	49 2f       	mov	r20, r25
    3250:	9f 01       	movw	r18, r30
    3252:	8d 01       	movw	r16, r26
    3254:	7e 01       	movw	r14, r28
    3256:	64 01       	movw	r12, r8
    3258:	0e 94 7f 18 	call	0x30fe	; 0x30fe <CO_collectADC_ext>
}
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	1f 91       	pop	r17
    3262:	0f 91       	pop	r16
    3264:	ff 90       	pop	r15
    3266:	ef 90       	pop	r14
    3268:	df 90       	pop	r13
    326a:	cf 90       	pop	r12
    326c:	af 90       	pop	r10
    326e:	9f 90       	pop	r9
    3270:	8f 90       	pop	r8
    3272:	08 95       	ret

00003274 <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
    3274:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    327a:	84 81       	ldd	r24, Z+4	; 0x04
    327c:	95 81       	ldd	r25, Z+5	; 0x05
    327e:	86 1b       	sub	r24, r22
    3280:	91 09       	sbc	r25, r1

	return answer;
}
    3282:	08 95       	ret

00003284 <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    3284:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    328a:	84 81       	ldd	r24, Z+4	; 0x04
    328c:	95 81       	ldd	r25, Z+5	; 0x05
    328e:	77 27       	eor	r23, r23
    3290:	67 fd       	sbrc	r22, 7
    3292:	70 95       	com	r23
    3294:	86 1b       	sub	r24, r22
    3296:	97 0b       	sbc	r25, r23

	return answer;
}
    3298:	08 95       	ret

0000329a <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
    329a:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    32a0:	84 81       	ldd	r24, Z+4	; 0x04
    32a2:	95 81       	ldd	r25, Z+5	; 0x05
}
    32a4:	08 95       	ret

000032a6 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
    32a6:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
    32ac:	84 81       	ldd	r24, Z+4	; 0x04
}
    32ae:	08 95       	ret

000032b0 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
    32b0:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
    32b6:	85 81       	ldd	r24, Z+5	; 0x05
}
    32b8:	08 95       	ret

000032ba <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
    32ba:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    32bc:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
    32be:	14 82       	std	Z+4, r1	; 0x04
    32c0:	9a e2       	ldi	r25, 0x2A	; 42
    32c2:	9a 95       	dec	r25
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <ADC_Wait_8MHz+0x8>
    32c6:	00 c0       	rjmp	.+0      	; 0x32c8 <ADC_Wait_8MHz+0xe>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    32c8:	84 83       	std	Z+4, r24	; 0x04
}
    32ca:	08 95       	ret

000032cc <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
    32cc:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    32ce:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
    32d0:	91 e0       	ldi	r25, 0x01	; 1
    32d2:	94 83       	std	Z+4, r25	; 0x04
    32d4:	95 e5       	ldi	r25, 0x55	; 85
    32d6:	9a 95       	dec	r25
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <ADC_Wait_32MHz+0xa>
    32da:	00 00       	nop

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    32dc:	84 83       	std	Z+4, r24	; 0x04
}
    32de:	08 95       	ret

000032e0 <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    32e0:	ef 92       	push	r14
    32e2:	ff 92       	push	r15
    32e4:	0f 93       	push	r16
    32e6:	1f 93       	push	r17
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	eb 01       	movw	r28, r22
    if (oversampling)
    32ee:	44 23       	and	r20, r20
    32f0:	c9 f0       	breq	.+50     	; 0x3324 <ADC_Offset_Get_Unsigned+0x44>
    32f2:	04 e0       	ldi	r16, 0x04	; 4
    32f4:	10 e0       	ldi	r17, 0x00	; 0
    32f6:	ee 24       	eor	r14, r14
    32f8:	ff 24       	eor	r15, r15
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    32fa:	88 81       	ld	r24, Y
    32fc:	80 68       	ori	r24, 0x80	; 128
    32fe:	88 83       	st	Y, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	80 ff       	sbrs	r24, 0
    3304:	fd cf       	rjmp	.-6      	; 0x3300 <ADC_Offset_Get_Unsigned+0x20>
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
    3306:	ce 01       	movw	r24, r28
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	0e 94 3a 19 	call	0x3274	; 0x3274 <ADC_ResultCh_GetWord_Unsigned>
    330e:	e8 0e       	add	r14, r24
    3310:	f9 1e       	adc	r15, r25
    3312:	01 50       	subi	r16, 0x01	; 1
    3314:	10 40       	sbci	r17, 0x00	; 0
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
    3316:	89 f7       	brne	.-30     	; 0x32fa <ADC_Offset_Get_Unsigned+0x1a>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
    3318:	c7 01       	movw	r24, r14
    331a:	96 95       	lsr	r25
    331c:	87 95       	ror	r24
    331e:	96 95       	lsr	r25
    3320:	87 95       	ror	r24
    3322:	09 c0       	rjmp	.+18     	; 0x3336 <ADC_Offset_Get_Unsigned+0x56>
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    3324:	88 81       	ld	r24, Y
    3326:	80 68       	ori	r24, 0x80	; 128
    3328:	88 83       	st	Y, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	80 ff       	sbrs	r24, 0
    332e:	fd cf       	rjmp	.-6      	; 0x332a <ADC_Offset_Get_Unsigned+0x4a>
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
    3330:	ce 01       	movw	r24, r28
    3332:	0e 94 4d 19 	call	0x329a	; 0x329a <ADC_ResultCh_GetWord>
      
      return offset;
    }
}
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	1f 91       	pop	r17
    333c:	0f 91       	pop	r16
    333e:	ff 90       	pop	r15
    3340:	ef 90       	pop	r14
    3342:	08 95       	ret

00003344 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    3344:	ef 92       	push	r14
    3346:	ff 92       	push	r15
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	eb 01       	movw	r28, r22
    if (oversampling)
    3352:	44 23       	and	r20, r20
    3354:	e1 f0       	breq	.+56     	; 0x338e <ADC_Offset_Get_Signed+0x4a>
    3356:	04 e0       	ldi	r16, 0x04	; 4
    3358:	10 e0       	ldi	r17, 0x00	; 0
    335a:	ee 24       	eor	r14, r14
    335c:	ff 24       	eor	r15, r15
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    335e:	88 81       	ld	r24, Y
    3360:	80 68       	ori	r24, 0x80	; 128
    3362:	88 83       	st	Y, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	80 ff       	sbrs	r24, 0
    3368:	fd cf       	rjmp	.-6      	; 0x3364 <ADC_Offset_Get_Signed+0x20>
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
    336a:	ce 01       	movw	r24, r28
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	0e 94 42 19 	call	0x3284	; 0x3284 <ADC_ResultCh_GetWord_Signed>
    3372:	e8 0e       	add	r14, r24
    3374:	f9 1e       	adc	r15, r25
    3376:	01 50       	subi	r16, 0x01	; 1
    3378:	10 40       	sbci	r17, 0x00	; 0
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
    337a:	89 f7       	brne	.-30     	; 0x335e <ADC_Offset_Get_Signed+0x1a>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
    337c:	c7 01       	movw	r24, r14
    337e:	99 23       	and	r25, r25
    3380:	0c f4       	brge	.+2      	; 0x3384 <ADC_Offset_Get_Signed+0x40>
    3382:	03 96       	adiw	r24, 0x03	; 3
    3384:	95 95       	asr	r25
    3386:	87 95       	ror	r24
    3388:	95 95       	asr	r25
    338a:	87 95       	ror	r24
    338c:	0a c0       	rjmp	.+20     	; 0x33a2 <ADC_Offset_Get_Signed+0x5e>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    338e:	88 81       	ld	r24, Y
    3390:	80 68       	ori	r24, 0x80	; 128
    3392:	88 83       	st	Y, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	80 ff       	sbrs	r24, 0
    3398:	fd cf       	rjmp	.-6      	; 0x3394 <ADC_Offset_Get_Signed+0x50>
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
    339a:	ce 01       	movw	r24, r28
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	0e 94 42 19 	call	0x3284	; 0x3284 <ADC_ResultCh_GetWord_Signed>
      
      return offset;
    }
}
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	1f 91       	pop	r17
    33a8:	0f 91       	pop	r16
    33aa:	ff 90       	pop	r15
    33ac:	ef 90       	pop	r14
    33ae:	08 95       	ret

000033b0 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    33b0:	aa ec       	ldi	r26, 0xCA	; 202
    33b2:	b1 e0       	ldi	r27, 0x01	; 1
    33b4:	92 e0       	ldi	r25, 0x02	; 2
    33b6:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    33b8:	e8 2f       	mov	r30, r24
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    33be:	1c 92       	st	X, r1

	return result;
}
    33c0:	08 95       	ret

000033c2 <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	c0 30       	cpi	r28, 0x00	; 0
    33cc:	d8 07       	cpc	r29, r24
    33ce:	59 f4       	brne	.+22     	; 0x33e6 <ADC_CalibrationValues_Load+0x24>
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    33d0:	80 e2       	ldi	r24, 0x20	; 32
    33d2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SP_ReadCalibrationByte>
    33d6:	c0 e0       	ldi	r28, 0x00	; 0
    33d8:	d2 e0       	ldi	r29, 0x02	; 2
    33da:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    33dc:	81 e2       	ldi	r24, 0x21	; 33
    33de:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SP_ReadCalibrationByte>
    33e2:	8d 87       	std	Y+13, r24	; 0x0d
    33e4:	08 c0       	rjmp	.+16     	; 0x33f6 <ADC_CalibrationValues_Load+0x34>
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    33e6:	84 e2       	ldi	r24, 0x24	; 36
    33e8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SP_ReadCalibrationByte>
    33ec:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    33ee:	85 e2       	ldi	r24, 0x25	; 37
    33f0:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SP_ReadCalibrationByte>
    33f4:	8d 87       	std	Y+13, r24	; 0x0d
	}
}
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	08 95       	ret

000033fc <chb_init>:

*/
/**************************************************************************/
void chb_init()
{
    memset(&pcb, 0, sizeof(pcb_t));
    33fc:	84 e1       	ldi	r24, 0x14	; 20
    33fe:	e5 e1       	ldi	r30, 0x15	; 21
    3400:	f1 e2       	ldi	r31, 0x21	; 33
    3402:	df 01       	movw	r26, r30
    3404:	1d 92       	st	X+, r1
    3406:	8a 95       	dec	r24
    3408:	e9 f7       	brne	.-6      	; 0x3404 <chb_init+0x8>
    pcb.src_addr = chb_get_short_addr();
    340a:	0e 94 5f 1b 	call	0x36be	; 0x36be <chb_get_short_addr>
    340e:	80 93 15 21 	sts	0x2115, r24
    3412:	90 93 16 21 	sts	0x2116, r25
    chb_drvr_init();
    3416:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <chb_drvr_init>
	//radio_msg_received_int_enable();
}
    341a:	08 95       	ret

0000341c <radio_msg_received_int_enable>:

// Configure PE2 to use as proxy interrupt for data being stored in radio buffer
void radio_msg_received_int_enable(){
	PORTE.DIRSET = PIN2_bm;
    341c:	e0 e8       	ldi	r30, 0x80	; 128
    341e:	f6 e0       	ldi	r31, 0x06	; 6
    3420:	84 e0       	ldi	r24, 0x04	; 4
    3422:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTCLR = PIN2_bm;
    3424:	86 83       	std	Z+6, r24	; 0x06
	PORTE.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    3426:	92 e0       	ldi	r25, 0x02	; 2
    3428:	90 8b       	std	Z+16, r25	; 0x10
	PORTE.INT0MASK = PIN2_bm;
    342a:	82 87       	std	Z+10, r24	; 0x0a
	PORTE.INTCTRL = PORT_INT0LVL_HI_gc;
    342c:	83 e0       	ldi	r24, 0x03	; 3
    342e:	81 87       	std	Z+9, r24	; 0x09
	// Enable low level interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    3430:	e0 ea       	ldi	r30, 0xA0	; 160
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	84 60       	ori	r24, 0x04	; 4
    3438:	82 83       	std	Z+2, r24	; 0x02
	sei();
    343a:	78 94       	sei
}
    343c:	08 95       	ret

0000343e <chb_get_pcb>:
*/
/**************************************************************************/
pcb_t *chb_get_pcb()
{
    return &pcb;
}
    343e:	85 e1       	ldi	r24, 0x15	; 21
    3440:	91 e2       	ldi	r25, 0x21	; 33
    3442:	08 95       	ret

00003444 <chb_write>:
/*!

*/
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U32 len)
{
    3444:	2f 92       	push	r2
    3446:	3f 92       	push	r3
    3448:	4f 92       	push	r4
    344a:	5f 92       	push	r5
    344c:	6f 92       	push	r6
    344e:	7f 92       	push	r7
    3450:	8f 92       	push	r8
    3452:	9f 92       	push	r9
    3454:	af 92       	push	r10
    3456:	bf 92       	push	r11
    3458:	cf 92       	push	r12
    345a:	df 92       	push	r13
    345c:	ef 92       	push	r14
    345e:	ff 92       	push	r15
    3460:	0f 93       	push	r16
    3462:	1f 93       	push	r17
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
    346c:	2a 97       	sbiw	r28, 0x0a	; 10
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	2c 01       	movw	r4, r24
    3474:	1b 01       	movw	r2, r22
    3476:	69 01       	movw	r12, r18
    3478:	7a 01       	movw	r14, r20
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    while (len > 0)
    347a:	21 15       	cp	r18, r1
    347c:	31 05       	cpc	r19, r1
    347e:	41 05       	cpc	r20, r1
    3480:	51 05       	cpc	r21, r1
    3482:	09 f4       	brne	.+2      	; 0x3486 <chb_write+0x42>
    3484:	68 c0       	rjmp	.+208    	; 0x3556 <chb_write+0x112>
    U8 status, frm_len, hdr[CHB_HDR_SZ + 1];
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    3486:	88 24       	eor	r8, r8
    3488:	99 24       	eor	r9, r9
    348a:	54 01       	movw	r10, r8
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    *hdr_ptr++ = CHB_FCF_BYTE_1;
    348c:	08 e9       	ldi	r16, 0x98	; 152

    *hdr_ptr++ = pcb.seq++;
    348e:	0f 2e       	mov	r0, r31
    3490:	f7 e1       	ldi	r31, 0x17	; 23
    3492:	6f 2e       	mov	r6, r31
    3494:	f1 e2       	ldi	r31, 0x21	; 33
    3496:	7f 2e       	mov	r7, r31
    3498:	f0 2d       	mov	r31, r0
	frm_offset = 0;
    while (len > 0)
    {
        // calculate which frame len to use. if greater than max payload, split
        // up operation.
        frm_len = (len > CHB_MAX_PAYLOAD) ? CHB_MAX_PAYLOAD : len;
    349a:	1c 2d       	mov	r17, r12
    349c:	85 e6       	ldi	r24, 0x65	; 101
    349e:	c8 16       	cp	r12, r24
    34a0:	d1 04       	cpc	r13, r1
    34a2:	e1 04       	cpc	r14, r1
    34a4:	f1 04       	cpc	r15, r1
    34a6:	08 f0       	brcs	.+2      	; 0x34aa <chb_write+0x66>
    34a8:	14 e6       	ldi	r17, 0x64	; 100
{
    U8 *hdr_ptr = hdr;

    // calc frame size and put in 0 position of array
    // frame size = hdr sz + payload len + fcs len
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;
    34aa:	81 2f       	mov	r24, r17
    34ac:	85 5f       	subi	r24, 0xF5	; 245
    34ae:	89 83       	std	Y+1, r24	; 0x01

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    34b0:	9f ef       	ldi	r25, 0xFF	; 255
    34b2:	49 16       	cp	r4, r25
    34b4:	9f ef       	ldi	r25, 0xFF	; 255
    34b6:	59 06       	cpc	r5, r25
    34b8:	11 f0       	breq	.+4      	; 0x34be <chb_write+0x7a>
    34ba:	81 e6       	ldi	r24, 0x61	; 97
    34bc:	01 c0       	rjmp	.+2      	; 0x34c0 <chb_write+0x7c>
    34be:	81 e4       	ldi	r24, 0x41	; 65
    34c0:	8a 83       	std	Y+2, r24	; 0x02
    *hdr_ptr++ = CHB_FCF_BYTE_1;
    34c2:	0b 83       	std	Y+3, r16	; 0x03

    *hdr_ptr++ = pcb.seq++;
    34c4:	f3 01       	movw	r30, r6
    34c6:	80 81       	ld	r24, Z
    34c8:	8c 83       	std	Y+4, r24	; 0x04
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	80 83       	st	Z, r24

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
    34ce:	84 e3       	ldi	r24, 0x34	; 52
    34d0:	92 e1       	ldi	r25, 0x12	; 18
    34d2:	8d 83       	std	Y+5, r24	; 0x05
    34d4:	9e 83       	std	Y+6, r25	; 0x06
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = addr;
    34d6:	4f 82       	std	Y+7, r4	; 0x07
    34d8:	58 86       	std	Y+8, r5	; 0x08
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = pcb.src_addr;
    34da:	e5 e1       	ldi	r30, 0x15	; 21
    34dc:	f1 e2       	ldi	r31, 0x21	; 33
    34de:	80 81       	ld	r24, Z
    34e0:	91 81       	ldd	r25, Z+1	; 0x01
    34e2:	89 87       	std	Y+9, r24	; 0x09
    34e4:	9a 87       	std	Y+10, r25	; 0x0a
		chb_gen_hdr(hdr, addr, frm_len);

        // send data to chip
		//rtry = 0;
		//do{
        status = chb_tx(hdr, data+frm_offset, frm_len);			
    34e6:	b1 01       	movw	r22, r2
    34e8:	68 0d       	add	r22, r8
    34ea:	79 1d       	adc	r23, r9
    34ec:	ce 01       	movw	r24, r28
    34ee:	01 96       	adiw	r24, 0x01	; 1
    34f0:	41 2f       	mov	r20, r17
    34f2:	0e 94 ed 1c 	call	0x39da	; 0x39da <chb_tx>

             switch (status)
    34f6:	83 30       	cpi	r24, 0x03	; 3
    34f8:	c9 f0       	breq	.+50     	; 0x352c <chb_write+0xe8>
    34fa:	84 30       	cpi	r24, 0x04	; 4
    34fc:	18 f4       	brcc	.+6      	; 0x3504 <chb_write+0xc0>
    34fe:	81 30       	cpi	r24, 0x01	; 1
    3500:	e1 f4       	brne	.+56     	; 0x353a <chb_write+0xf6>
    3502:	04 c0       	rjmp	.+8      	; 0x350c <chb_write+0xc8>
    3504:	85 30       	cpi	r24, 0x05	; 5
    3506:	51 f0       	breq	.+20     	; 0x351c <chb_write+0xd8>
    3508:	80 34       	cpi	r24, 0x40	; 64
    350a:	b9 f4       	brne	.+46     	; 0x353a <chb_write+0xf6>
             {
             case RADIO_SUCCESS:
                  //fall through
             case CHB_SUCCESS_DATA_PENDING:
                 pcb.txd_success++;
    350c:	ec e1       	ldi	r30, 0x1C	; 28
    350e:	f1 e2       	ldi	r31, 0x21	; 33
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	01 96       	adiw	r24, 0x01	; 1
    3516:	80 83       	st	Z, r24
    3518:	91 83       	std	Z+1, r25	; 0x01
                 break;
    351a:	0f c0       	rjmp	.+30     	; 0x353a <chb_write+0xf6>
 
             case CHB_NO_ACK:
                 pcb.txd_noack++;
    351c:	ee e1       	ldi	r30, 0x1E	; 30
    351e:	f1 e2       	ldi	r31, 0x21	; 33
    3520:	80 81       	ld	r24, Z
    3522:	91 81       	ldd	r25, Z+1	; 0x01
    3524:	01 96       	adiw	r24, 0x01	; 1
    3526:	80 83       	st	Z, r24
    3528:	91 83       	std	Z+1, r25	; 0x01
				 //rtry++;
                 break;
    352a:	07 c0       	rjmp	.+14     	; 0x353a <chb_write+0xf6>
 
             case CHB_CHANNEL_ACCESS_FAILURE:
                 pcb.txd_channel_fail++;
    352c:	e0 e2       	ldi	r30, 0x20	; 32
    352e:	f1 e2       	ldi	r31, 0x21	; 33
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	80 83       	st	Z, r24
    3538:	91 83       	std	Z+1, r25	; 0x01
             }
			//if(rtry>0) _delay_us(10);		//if not successfully sent the first time, wait some time and try again
			//if(rtry==20) return status;;		//after 20 tries give up on sending the message	
		//} while(status != CHB_SUCCESS);			
        // adjust len and restart
		frm_offset += frm_len;
    353a:	81 2f       	mov	r24, r17
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	a0 e0       	ldi	r26, 0x00	; 0
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	88 0e       	add	r8, r24
    3544:	99 1e       	adc	r9, r25
    3546:	aa 1e       	adc	r10, r26
    3548:	bb 1e       	adc	r11, r27
		//if (len > CHB_MAX_PAYLOAD) _delay_ms(100);				//wait a little before sending next message
        len = len - frm_len;
    354a:	c8 1a       	sub	r12, r24
    354c:	d9 0a       	sbc	r13, r25
    354e:	ea 0a       	sbc	r14, r26
    3550:	fb 0a       	sbc	r15, r27
	U32 frm_offset;
	//U8 hdr_len;
    //int rtry;
	
	frm_offset = 0;
    while (len > 0)
    3552:	09 f0       	breq	.+2      	; 0x3556 <chb_write+0x112>
    3554:	a2 cf       	rjmp	.-188    	; 0x349a <chb_write+0x56>
		//if (len > CHB_MAX_PAYLOAD) _delay_ms(100);				//wait a little before sending next message
        len = len - frm_len;
    }
	if(status == CHB_SUCCESS || CHB_SUCCESS_DATA_PENDING) return CHB_SUCCESS;
	else return 1;
}
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	2a 96       	adiw	r28, 0x0a	; 10
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	ff 90       	pop	r15
    3568:	ef 90       	pop	r14
    356a:	df 90       	pop	r13
    356c:	cf 90       	pop	r12
    356e:	bf 90       	pop	r11
    3570:	af 90       	pop	r10
    3572:	9f 90       	pop	r9
    3574:	8f 90       	pop	r8
    3576:	7f 90       	pop	r7
    3578:	6f 90       	pop	r6
    357a:	5f 90       	pop	r5
    357c:	4f 90       	pop	r4
    357e:	3f 90       	pop	r3
    3580:	2f 90       	pop	r2
    3582:	08 95       	ret

00003584 <chb_read>:
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
{
    3584:	df 92       	push	r13
    3586:	ef 92       	push	r14
    3588:	ff 92       	push	r15
    358a:	0f 93       	push	r16
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	7c 01       	movw	r14, r24

    data_ptr = rx->data;

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    3594:	0e 94 3d 1b 	call	0x367a	; 0x367a <chb_buf_read>
    3598:	d8 2e       	mov	r13, r24
    359a:	88 23       	and	r24, r24
    359c:	0c f4       	brge	.+2      	; 0x35a0 <chb_read+0x1c>
    359e:	46 c0       	rjmp	.+140    	; 0x362c <chb_read+0xa8>
    {
        return 0;
    }
    *data_ptr++ = len;
    35a0:	f7 01       	movw	r30, r14
    35a2:	85 83       	std	Z+5, r24	; 0x05

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    35a4:	88 23       	and	r24, r24
    35a6:	71 f0       	breq	.+28     	; 0x35c4 <chb_read+0x40>
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    {
        return 0;
    }
    *data_ptr++ = len;
    35a8:	e7 01       	movw	r28, r14
    35aa:	26 96       	adiw	r28, 0x06	; 6
 
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
    35ac:	87 01       	movw	r16, r14
    35ae:	09 5f       	subi	r16, 0xF9	; 249
    35b0:	1f 4f       	sbci	r17, 0xFF	; 255
    35b2:	81 50       	subi	r24, 0x01	; 1
    35b4:	08 0f       	add	r16, r24
    35b6:	11 1d       	adc	r17, r1
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    {
        *data_ptr++ = chb_buf_read();
    35b8:	0e 94 3d 1b 	call	0x367a	; 0x367a <chb_buf_read>
    35bc:	89 93       	st	Y+, r24
        return 0;
    }
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    35be:	c0 17       	cp	r28, r16
    35c0:	d1 07       	cpc	r29, r17
    35c2:	d1 f7       	brne	.-12     	; 0x35b8 <chb_read+0x34>
    // we'll use it as temp storage to parse the frame. then move the frame
    // down so that only the payload will be in the buffer.

    // extract the sequence number
    data_ptr = rx->data + 3;    // location of sequence number
    seq = *data_ptr;
    35c4:	f7 01       	movw	r30, r14
    35c6:	c0 85       	ldd	r28, Z+8	; 0x08

    // parse the buffer and extract the dest and src addresses
    data_ptr = rx->data + 6;                // location of dest addr
    rx->dest_addr = *(U16 *)data_ptr;
    35c8:	83 85       	ldd	r24, Z+11	; 0x0b
    35ca:	94 85       	ldd	r25, Z+12	; 0x0c
    35cc:	83 83       	std	Z+3, r24	; 0x03
    35ce:	94 83       	std	Z+4, r25	; 0x04
    data_ptr += sizeof(U16);
    rx->src_addr = *(U16 *)data_ptr;
    35d0:	85 85       	ldd	r24, Z+13	; 0x0d
    35d2:	96 85       	ldd	r25, Z+14	; 0x0e
    35d4:	81 83       	std	Z+1, r24	; 0x01
    35d6:	92 83       	std	Z+2, r25	; 0x02
    data_ptr += sizeof(U16);

    // if the data in the rx buf is 0, then clear the rx_flag. otherwise, keep it raised
    if (!chb_buf_get_len())
    35d8:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <chb_buf_get_len>
    35dc:	88 23       	and	r24, r24
    35de:	11 f4       	brne	.+4      	; 0x35e4 <chb_read+0x60>
    {
        pcb.data_rcv = false;
    35e0:	10 92 18 21 	sts	0x2118, r1
#else
    // duplicate frame check (dupe check). we want to remove frames that have been already been received since they 
    // are just retries. 
    // note: this dupe check only removes duplicate frames from the previous transfer. if another frame from a different
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    35e4:	80 91 0a 20 	lds	r24, 0x200A
    35e8:	c8 17       	cp	r28, r24
    35ea:	51 f4       	brne	.+20     	; 0x3600 <chb_read+0x7c>
    35ec:	f7 01       	movw	r30, r14
    35ee:	21 81       	ldd	r18, Z+1	; 0x01
    35f0:	32 81       	ldd	r19, Z+2	; 0x02
    35f2:	80 91 0b 20 	lds	r24, 0x200B
    35f6:	90 91 0c 20 	lds	r25, 0x200C
    35fa:	28 17       	cp	r18, r24
    35fc:	39 07       	cpc	r19, r25
    35fe:	c1 f0       	breq	.+48     	; 0x3630 <chb_read+0xac>
        // it properly. discard.
        return 0;
    }
    else
    {
        prev_seq = seq;
    3600:	c0 93 0a 20 	sts	0x200A, r28
        prev_src_addr = rx->src_addr;
    3604:	f7 01       	movw	r30, r14
    3606:	81 81       	ldd	r24, Z+1	; 0x01
    3608:	92 81       	ldd	r25, Z+2	; 0x02
    360a:	80 93 0b 20 	sts	0x200B, r24
    360e:	90 93 0c 20 	sts	0x200C, r25
    }

    // move the payload down to the beginning of the data buffer
    //memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	memmove(rx, data_ptr, len - CHB_HDR_SZ);
    3612:	b7 01       	movw	r22, r14
    3614:	61 5f       	subi	r22, 0xF1	; 241
    3616:	7f 4f       	sbci	r23, 0xFF	; 255
    3618:	4d 2d       	mov	r20, r13
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	49 50       	subi	r20, 0x09	; 9
    361e:	50 40       	sbci	r21, 0x00	; 0
    3620:	c7 01       	movw	r24, r14
    3622:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <memmove>
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
    3626:	8d 2d       	mov	r24, r13
    3628:	8b 50       	subi	r24, 0x0B	; 11
    362a:	03 c0       	rjmp	.+6      	; 0x3632 <chb_read+0xae>

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    {
        return 0;
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	01 c0       	rjmp	.+2      	; 0x3632 <chb_read+0xae>
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    {
        // this is a duplicate frame from a retry. the remote node thinks we didn't receive 
        // it properly. discard.
        return 0;
    3630:	80 e0       	ldi	r24, 0x00	; 0
    //memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	memmove(rx, data_ptr, len - CHB_HDR_SZ);
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
#endif
}
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	ff 90       	pop	r15
    363c:	ef 90       	pop	r14
    363e:	df 90       	pop	r13
    3640:	08 95       	ret

00003642 <chb_buf_init>:

*/
/**************************************************************************/
void chb_buf_init()
{
    rd_ptr = 0;
    3642:	10 92 29 21 	sts	0x2129, r1
    wr_ptr = 0;
    3646:	10 92 2a 21 	sts	0x212A, r1
    len = 0;
    364a:	10 92 2b 21 	sts	0x212B, r1
}
    364e:	08 95       	ret

00003650 <chb_buf_write>:

*/
/**************************************************************************/
void chb_buf_write(U8 data)
{
    chb_buf[wr_ptr] = data;
    3650:	20 91 2a 21 	lds	r18, 0x212A
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	f9 01       	movw	r30, r18
    3658:	e4 5d       	subi	r30, 0xD4	; 212
    365a:	fe 4d       	sbci	r31, 0xDE	; 222
    365c:	80 83       	st	Z, r24
    wr_ptr = (wr_ptr + 1) % CHB_BUF_SZ;
    365e:	c9 01       	movw	r24, r18
    3660:	01 96       	adiw	r24, 0x01	; 1
    3662:	60 e8       	ldi	r22, 0x80	; 128
    3664:	70 e0       	ldi	r23, 0x00	; 0
    3666:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    366a:	80 93 2a 21 	sts	0x212A, r24
    len++;
    366e:	80 91 2b 21 	lds	r24, 0x212B
    3672:	8f 5f       	subi	r24, 0xFF	; 255
    3674:	80 93 2b 21 	sts	0x212B, r24
}
    3678:	08 95       	ret

0000367a <chb_buf_read>:
/**************************************************************************/
U8 chb_buf_read()
{
    U8 data;

    data = chb_buf[rd_ptr];
    367a:	20 91 29 21 	lds	r18, 0x2129
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	f9 01       	movw	r30, r18
    3682:	e4 5d       	subi	r30, 0xD4	; 212
    3684:	fe 4d       	sbci	r31, 0xDE	; 222
    3686:	40 81       	ld	r20, Z
    rd_ptr = (rd_ptr + 1) % CHB_BUF_SZ;
    3688:	2f 5f       	subi	r18, 0xFF	; 255
    368a:	3f 4f       	sbci	r19, 0xFF	; 255
    368c:	c9 01       	movw	r24, r18
    368e:	60 e8       	ldi	r22, 0x80	; 128
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    3696:	80 93 29 21 	sts	0x2129, r24
    len--;
    369a:	80 91 2b 21 	lds	r24, 0x212B
    369e:	81 50       	subi	r24, 0x01	; 1
    36a0:	80 93 2b 21 	sts	0x212B, r24
    return data;
}
    36a4:	84 2f       	mov	r24, r20
    36a6:	08 95       	ret

000036a8 <chb_buf_get_len>:
*/
/**************************************************************************/
U8 chb_buf_get_len()
{
    return len;
}
    36a8:	80 91 2b 21 	lds	r24, 0x212B
    36ac:	08 95       	ret

000036ae <chb_get_ieee_addr>:
/*!

*/
/**************************************************************************/
void chb_get_ieee_addr(U8 *addr)
{
    36ae:	bc 01       	movw	r22, r24
    chb_eeprom_read(CHB_EEPROM_IEEE_ADDR, addr, 8);
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	48 e0       	ldi	r20, 0x08	; 8
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <chb_eeprom_read>
}
    36bc:	08 95       	ret

000036be <chb_get_short_addr>:
/*!

*/
/**************************************************************************/
U16 chb_get_short_addr()
{
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	0f 92       	push	r0
    36c4:	0f 92       	push	r0
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    U8 addr[2];

    chb_eeprom_read(CHB_EEPROM_SHORT_ADDR, addr, 2);
    36ca:	89 e0       	ldi	r24, 0x09	; 9
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	be 01       	movw	r22, r28
    36d0:	6f 5f       	subi	r22, 0xFF	; 255
    36d2:	7f 4f       	sbci	r23, 0xFF	; 255
    36d4:	42 e0       	ldi	r20, 0x02	; 2
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <chb_eeprom_read>
    return *(U16 *)addr;
}
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	08 95       	ret

000036ea <RadioCS>:
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
}

//select radio SPI on port D with cs
void RadioCS(uint8_t status){
	if (status) PORTD.OUTCLR = PIN4_bm;
    36ea:	88 23       	and	r24, r24
    36ec:	29 f0       	breq	.+10     	; 0x36f8 <RadioCS+0xe>
    36ee:	80 e1       	ldi	r24, 0x10	; 16
    36f0:	e0 e6       	ldi	r30, 0x60	; 96
    36f2:	f6 e0       	ldi	r31, 0x06	; 6
    36f4:	86 83       	std	Z+6, r24	; 0x06
    36f6:	08 95       	ret
	else {
		PORTD.OUTSET = PIN4_bm;
    36f8:	80 e1       	ldi	r24, 0x10	; 16
    36fa:	e0 e6       	ldi	r30, 0x60	; 96
    36fc:	f6 e0       	ldi	r31, 0x06	; 6
    36fe:	85 83       	std	Z+5, r24	; 0x05
    3700:	08 95       	ret

00003702 <chb_frame_write>:
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
{
    3702:	df 92       	push	r13
    3704:	ef 92       	push	r14
    3706:	ff 92       	push	r15
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	8c 01       	movw	r16, r24
    3712:	c6 2f       	mov	r28, r22
    3714:	7a 01       	movw	r14, r20
    3716:	d2 2e       	mov	r13, r18
    U8 i;
	//U8 dummy;
	
    // dont allow transmission longer than max frame size
    if ((hdr_len + data_len) > 127)
    3718:	82 2f       	mov	r24, r18
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	86 0f       	add	r24, r22
    371e:	91 1d       	adc	r25, r1
    3720:	80 38       	cpi	r24, 0x80	; 128
    3722:	91 05       	cpc	r25, r1
    3724:	8c f5       	brge	.+98     	; 0x3788 <chb_frame_write+0x86>
    {
        return;
    }

    // initiate spi transaction
    CHB_ENTER_CRIT();
    3726:	8f b7       	in	r24, 0x3f	; 63
    3728:	80 93 58 40 	sts	0x4058, r24
    372c:	f8 94       	cli
    RadioCS(TRUE); 
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>

    // send fifo write command
    //dummy = SPID_write(CHB_SPI_CMD_FW);
	SPID_write(CHB_SPI_CMD_FW);
    3734:	80 e6       	ldi	r24, 0x60	; 96
    3736:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    373a:	cc 23       	and	r28, r28
    373c:	79 f0       	breq	.+30     	; 0x375c <chb_frame_write+0x5a>
/**************************************************************************/
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
    373e:	c8 01       	movw	r24, r16
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	c1 50       	subi	r28, 0x01	; 1
    3744:	9c 01       	movw	r18, r24
    3746:	2c 0f       	add	r18, r28
    3748:	31 1d       	adc	r19, r1
    374a:	e9 01       	movw	r28, r18

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    {
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    374c:	f8 01       	movw	r30, r16
    374e:	81 91       	ld	r24, Z+
    3750:	8f 01       	movw	r16, r30
    3752:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
    // send fifo write command
    //dummy = SPID_write(CHB_SPI_CMD_FW);
	SPID_write(CHB_SPI_CMD_FW);

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    3756:	0c 17       	cp	r16, r28
    3758:	1d 07       	cpc	r17, r29
    375a:	c1 f7       	brne	.-16     	; 0x374c <chb_frame_write+0x4a>
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    375c:	dd 20       	and	r13, r13
    375e:	69 f0       	breq	.+26     	; 0x377a <chb_frame_write+0x78>
/**************************************************************************/
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
    3760:	e7 01       	movw	r28, r14
    3762:	21 96       	adiw	r28, 0x01	; 1
    3764:	da 94       	dec	r13
    3766:	cd 0d       	add	r28, r13
    3768:	d1 1d       	adc	r29, r1

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    {
        //dummy = SPID_write(*data++);
		SPID_write(*data++);
    376a:	f7 01       	movw	r30, r14
    376c:	81 91       	ld	r24, Z+
    376e:	7f 01       	movw	r14, r30
    3770:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
        //dummy = SPID_write(*hdr++);
		SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    3774:	ec 16       	cp	r14, r28
    3776:	fd 06       	cpc	r15, r29
    3778:	c1 f7       	brne	.-16     	; 0x376a <chb_frame_write+0x68>
        //dummy = SPID_write(*data++);
		SPID_write(*data++);
    }

    // terminate spi transaction
    RadioCS(FALSE); 
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>
    CHB_LEAVE_CRIT();
    3780:	80 91 58 40 	lds	r24, 0x4058
    3784:	8f bf       	out	0x3f, r24	; 63
    3786:	78 94       	sei
}
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	ff 90       	pop	r15
    3792:	ef 90       	pop	r14
    3794:	df 90       	pop	r13
    3796:	08 95       	ret

00003798 <chb_reg_write>:
/*!

*/
/**************************************************************************/
void chb_reg_write(U8 addr, U8 val)
{
    3798:	cf 93       	push	r28
    379a:	df 93       	push	r29
    379c:	d8 2f       	mov	r29, r24
    379e:	c6 2f       	mov	r28, r22
    //U8 dummy; 

    /* Add the Register Write command to the address. */
    addr |= 0xC0;

    CHB_ENTER_CRIT();
    37a0:	8f b7       	in	r24, 0x3f	; 63
    37a2:	80 93 58 40 	sts	0x4058, r24
    37a6:	f8 94       	cli
    RadioCS(TRUE);
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>

    /*Send Register address and write register content.*/
    //dummy = SPID_write(addr);
	SPID_write(addr);
    37ae:	8d 2f       	mov	r24, r29
    37b0:	80 6c       	ori	r24, 0xC0	; 192
    37b2:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
    //dummy = SPID_write(val);
	SPID_write(val);
    37b6:	8c 2f       	mov	r24, r28
    37b8:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>

    RadioCS(FALSE);
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>
    CHB_LEAVE_CRIT();
    37c2:	80 91 58 40 	lds	r24, 0x4058
    37c6:	8f bf       	out	0x3f, r24	; 63
    37c8:	78 94       	sei
}
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    37ce:	08 95       	ret

000037d0 <chb_set_pwr>:
/*!
    Set the power level
*/
/**************************************************************************/
void chb_set_pwr(U8 val)
{
    37d0:	68 2f       	mov	r22, r24
    chb_reg_write(PHY_TX_PWR, val);
    37d2:	85 e0       	ldi	r24, 0x05	; 5
    37d4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chb_reg_write>
}
    37d8:	08 95       	ret

000037da <chb_reg_write64>:
/*!

*/
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    37da:	0f 93       	push	r16
    37dc:	1f 93       	push	r17
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	08 2f       	mov	r16, r24
    U8 i;

    for (i=0; i<8; i++)
    37e4:	c6 2f       	mov	r28, r22
    37e6:	d7 2f       	mov	r29, r23
    37e8:	10 e0       	ldi	r17, 0x00	; 0
    {
        chb_reg_write(addr + i, *(val + i));
    37ea:	69 91       	ld	r22, Y+
    37ec:	81 2f       	mov	r24, r17
    37ee:	80 0f       	add	r24, r16
    37f0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chb_reg_write>
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    U8 i;

    for (i=0; i<8; i++)
    37f4:	1f 5f       	subi	r17, 0xFF	; 255
    37f6:	18 30       	cpi	r17, 0x08	; 8
    37f8:	c1 f7       	brne	.-16     	; 0x37ea <chb_reg_write64+0x10>
    {
        chb_reg_write(addr + i, *(val + i));
    }
}
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	08 95       	ret

00003804 <chb_set_ieee_addr>:
/*! 
 
*/
/**************************************************************************/
void chb_set_ieee_addr(U8 *addr)
{
    3804:	cf 93       	push	r28
    3806:	df 93       	push	r29
    3808:	ec 01       	movw	r28, r24
    chb_eeprom_write(CHB_EEPROM_IEEE_ADDR, addr, 8); 
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	be 01       	movw	r22, r28
    3810:	48 e0       	ldi	r20, 0x08	; 8
    3812:	50 e0       	ldi	r21, 0x00	; 0
    3814:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <chb_eeprom_write>
    chb_reg_write64(IEEE_ADDR_0, addr); 
    3818:	84 e2       	ldi	r24, 0x24	; 36
    381a:	be 01       	movw	r22, r28
    381c:	0e 94 ed 1b 	call	0x37da	; 0x37da <chb_reg_write64>
}
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	08 95       	ret

00003826 <chb_reg_write16>:
/*!

*/
/**************************************************************************/
void chb_reg_write16(U8 addr, U16 val)
{
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
    382a:	c8 2f       	mov	r28, r24
    382c:	d7 2f       	mov	r29, r23
    U8 i;

    for (i=0; i<2; i++)
    {
        chb_reg_write(addr + i, val >> (8 * i));
    382e:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chb_reg_write>
    3832:	8c 2f       	mov	r24, r28
    3834:	8f 5f       	subi	r24, 0xFF	; 255
    3836:	6d 2f       	mov	r22, r29
    3838:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chb_reg_write>
    }
}
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	08 95       	ret

00003842 <chb_set_short_addr>:
/*!

*/
/**************************************************************************/
void chb_set_short_addr(U16 addr)
{
    3842:	0f 93       	push	r16
    3844:	1f 93       	push	r17
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	0f 92       	push	r0
    384c:	0f 92       	push	r0
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	9a 83       	std	Y+2, r25	; 0x02
    U8 *addr_ptr = (U8 *)&addr;
    pcb_t *pcb = chb_get_pcb();
    3856:	0e 94 1f 1a 	call	0x343e	; 0x343e <chb_get_pcb>
    385a:	8c 01       	movw	r16, r24

    chb_eeprom_write(CHB_EEPROM_SHORT_ADDR, addr_ptr, 2);
    385c:	89 e0       	ldi	r24, 0x09	; 9
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	be 01       	movw	r22, r28
    3862:	6f 5f       	subi	r22, 0xFF	; 255
    3864:	7f 4f       	sbci	r23, 0xFF	; 255
    3866:	42 e0       	ldi	r20, 0x02	; 2
    3868:	50 e0       	ldi	r21, 0x00	; 0
    386a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <chb_eeprom_write>
    chb_reg_write16(SHORT_ADDR_0, addr);
    386e:	69 81       	ldd	r22, Y+1	; 0x01
    3870:	7a 81       	ldd	r23, Y+2	; 0x02
    3872:	80 e2       	ldi	r24, 0x20	; 32
    3874:	0e 94 13 1c 	call	0x3826	; 0x3826 <chb_reg_write16>
    pcb->src_addr = addr;
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	9a 81       	ldd	r25, Y+2	; 0x02
    387c:	f8 01       	movw	r30, r16
    387e:	80 83       	st	Z, r24
    3880:	91 83       	std	Z+1, r25	; 0x01
}
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	1f 91       	pop	r17
    388c:	0f 91       	pop	r16
    388e:	08 95       	ret

00003890 <chb_reg_read>:
/*!

*/
/**************************************************************************/
U8 chb_reg_read(U8 addr)
{
    3890:	cf 93       	push	r28
    3892:	c8 2f       	mov	r28, r24
    U8 val = 0;

    /* Add the register read command to the register address. */
    addr |= 0x80;

    CHB_ENTER_CRIT();
    3894:	8f b7       	in	r24, 0x3f	; 63
    3896:	80 93 58 40 	sts	0x4058, r24
    389a:	f8 94       	cli
    RadioCS(TRUE);
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>

    /*Send Register address and read register content.*/
    val = SPID_write(addr);
    38a2:	8c 2f       	mov	r24, r28
    38a4:	80 68       	ori	r24, 0x80	; 128
    38a6:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
    val = SPID_write(val);
    38aa:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
    38ae:	c8 2f       	mov	r28, r24

    RadioCS(FALSE);
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>
    CHB_LEAVE_CRIT();
    38b6:	80 91 58 40 	lds	r24, 0x4058
    38ba:	8f bf       	out	0x3f, r24	; 63
    38bc:	78 94       	sei

    return val;
}
    38be:	8c 2f       	mov	r24, r28
    38c0:	cf 91       	pop	r28
    38c2:	08 95       	ret

000038c4 <chb_get_state>:

*/
/**************************************************************************/
static U8 chb_get_state()
{
    return chb_reg_read(TRX_STATUS) & 0x1f;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
}
    38ca:	8f 71       	andi	r24, 0x1F	; 31
    38cc:	08 95       	ret

000038ce <chb_reg_read_mod_write>:
/*!

*/
/**************************************************************************/
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    38ce:	1f 93       	push	r17
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	c8 2f       	mov	r28, r24
    38d6:	16 2f       	mov	r17, r22
    38d8:	d4 2f       	mov	r29, r20
    U8 tmp;

    tmp = chb_reg_read(addr);
    38da:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    val &= mask;                // mask off stray bits from val
    tmp &= ~mask;               // mask off bits in reg val
    38de:	6d 2f       	mov	r22, r29
    38e0:	60 95       	com	r22
    38e2:	68 23       	and	r22, r24
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    U8 tmp;

    tmp = chb_reg_read(addr);
    val &= mask;                // mask off stray bits from val
    38e4:	d1 23       	and	r29, r17
    tmp &= ~mask;               // mask off bits in reg val
    tmp |= val;                 // copy val into reg val
    38e6:	6d 2b       	or	r22, r29
    chb_reg_write(addr, tmp);   // write back to reg
    38e8:	8c 2f       	mov	r24, r28
    38ea:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chb_reg_write>
}
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	1f 91       	pop	r17
    38f4:	08 95       	ret

000038f6 <chb_set_state>:
    for certain operations. Check the datasheet for more details on the state 
    machine and manipulations.
*/
/**************************************************************************/
U8 chb_set_state(U8 state)
{
    38f6:	cf 93       	push	r28
    38f8:	df 93       	push	r29
    38fa:	d8 2f       	mov	r29, r24
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    38fc:	80 91 64 06 	lds	r24, 0x0664
    3900:	81 fd       	sbrc	r24, 1
    3902:	4b c0       	rjmp	.+150    	; 0x399a <chb_set_state+0xa4>
    {
        return RADIO_WRONG_STATE;
    }

    // if we're in a transition state, wait for the state to become stable
    curr_state = chb_get_state();
    3904:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <chb_get_state>
    3908:	c8 2f       	mov	r28, r24
    if ((curr_state == CHB_BUSY_TX_ARET) || (curr_state == CHB_BUSY_RX_AACK) || (curr_state == CHB_BUSY_RX) || (curr_state == CHB_BUSY_TX))
    390a:	81 51       	subi	r24, 0x11	; 17
    390c:	82 30       	cpi	r24, 0x02	; 2
    390e:	20 f0       	brcs	.+8      	; 0x3918 <chb_set_state+0x22>
    3910:	c1 30       	cpi	r28, 0x01	; 1
    3912:	11 f0       	breq	.+4      	; 0x3918 <chb_set_state+0x22>
    3914:	c2 30       	cpi	r28, 0x02	; 2
    3916:	21 f4       	brne	.+8      	; 0x3920 <chb_set_state+0x2a>
    {
        while (chb_get_state() == curr_state);
    3918:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <chb_get_state>
    391c:	8c 17       	cp	r24, r28
    391e:	e1 f3       	breq	.-8      	; 0x3918 <chb_set_state+0x22>
    }

    // At this point it is clear that the requested new_state is:
    // TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
    // we need to handle some special cases before we transition to the new state
    switch (state)
    3920:	d6 31       	cpi	r29, 0x16	; 22
    3922:	f9 f0       	breq	.+62     	; 0x3962 <chb_set_state+0x6c>
    3924:	d9 31       	cpi	r29, 0x19	; 25
    3926:	89 f0       	breq	.+34     	; 0x394a <chb_set_state+0x54>
    3928:	d8 30       	cpi	r29, 0x08	; 8
    392a:	31 f5       	brne	.+76     	; 0x3978 <chb_set_state+0x82>
    {
    case CHB_TRX_OFF:
        /* Go to TRX_OFF from any state. */
        CHB_SLPTR_DISABLE();
    392c:	e4 e6       	ldi	r30, 0x64	; 100
    392e:	f6 e0       	ldi	r31, 0x06	; 6
    3930:	80 81       	ld	r24, Z
    3932:	8d 7f       	andi	r24, 0xFD	; 253
    3934:	80 83       	st	Z, r24
        chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1f);
    3936:	82 e0       	ldi	r24, 0x02	; 2
    3938:	63 e0       	ldi	r22, 0x03	; 3
    393a:	4f e1       	ldi	r20, 0x1F	; 31
    393c:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
    3940:	8a e0       	ldi	r24, 0x0A	; 10
    3942:	8a 95       	dec	r24
    3944:	f1 f7       	brne	.-4      	; 0x3942 <chb_set_state+0x4c>
    3946:	00 c0       	rjmp	.+0      	; 0x3948 <chb_set_state+0x52>
    3948:	17 c0       	rjmp	.+46     	; 0x3978 <chb_set_state+0x82>
        _delay_us(TIME_ALL_STATES_TRX_OFF);
        break;

    case CHB_TX_ARET_ON:
        if (curr_state == CHB_RX_AACK_ON)
    394a:	c6 31       	cpi	r28, 0x16	; 22
    394c:	a9 f4       	brne	.+42     	; 0x3978 <chb_set_state+0x82>
        {
            /* First do intermediate state transition to PLL_ON, then to TX_ARET_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
    394e:	82 e0       	ldi	r24, 0x02	; 2
    3950:	69 e0       	ldi	r22, 0x09	; 9
    3952:	4f e1       	ldi	r20, 0x1F	; 31
    3954:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
    3958:	9a e0       	ldi	r25, 0x0A	; 10
    395a:	9a 95       	dec	r25
    395c:	f1 f7       	brne	.-4      	; 0x395a <chb_set_state+0x64>
    395e:	00 c0       	rjmp	.+0      	; 0x3960 <chb_set_state+0x6a>
    3960:	0b c0       	rjmp	.+22     	; 0x3978 <chb_set_state+0x82>
            _delay_us(TIME_RX_ON_PLL_ON);
        }
        break;

    case CHB_RX_AACK_ON:
        if (curr_state == CHB_TX_ARET_ON)
    3962:	c9 31       	cpi	r28, 0x19	; 25
    3964:	49 f4       	brne	.+18     	; 0x3978 <chb_set_state+0x82>
        {
            /* First do intermediate state transition to RX_ON, then to RX_AACK_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
    3966:	82 e0       	ldi	r24, 0x02	; 2
    3968:	69 e0       	ldi	r22, 0x09	; 9
    396a:	4f e1       	ldi	r20, 0x1F	; 31
    396c:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
    3970:	8a e0       	ldi	r24, 0x0A	; 10
    3972:	8a 95       	dec	r24
    3974:	f1 f7       	brne	.-4      	; 0x3972 <chb_set_state+0x7c>
    3976:	00 c0       	rjmp	.+0      	; 0x3978 <chb_set_state+0x82>
        }
        break;
    }

    /* Now we're okay to transition to any new state. */
    chb_reg_read_mod_write(TRX_STATE, state, 0x1f);
    3978:	82 e0       	ldi	r24, 0x02	; 2
    397a:	6d 2f       	mov	r22, r29
    397c:	4f e1       	ldi	r20, 0x1F	; 31
    397e:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
    3982:	8f e6       	ldi	r24, 0x6F	; 111
    3984:	93 e0       	ldi	r25, 0x03	; 3
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	f1 f7       	brne	.-4      	; 0x3986 <chb_set_state+0x90>
    398a:	00 c0       	rjmp	.+0      	; 0x398c <chb_set_state+0x96>
    398c:	00 00       	nop

    /* When the PLL is active most states can be reached in 1us. However, from */
    /* TRX_OFF the PLL needs time to activate. */
    _delay_us(TIME_TRX_OFF_PLL_ON);

    if (chb_get_state() == state)
    398e:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <chb_get_state>
    3992:	8d 17       	cp	r24, r29
    3994:	21 f4       	brne	.+8      	; 0x399e <chb_set_state+0xa8>
    {
        return RADIO_SUCCESS;
    3996:	80 e4       	ldi	r24, 0x40	; 64
    3998:	03 c0       	rjmp	.+6      	; 0x39a0 <chb_set_state+0xaa>
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    {
        return RADIO_WRONG_STATE;
    399a:	84 e4       	ldi	r24, 0x44	; 68
    399c:	01 c0       	rjmp	.+2      	; 0x39a0 <chb_set_state+0xaa>

    if (chb_get_state() == state)
    {
        return RADIO_SUCCESS;
    }
    return RADIO_TIMED_OUT;
    399e:	83 e4       	ldi	r24, 0x43	; 67
}
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	08 95       	ret

000039a6 <chb_sleep>:
    Enable or disable the radio's sleep mode.
*/
/**************************************************************************/
void chb_sleep(U8 enb)
{
    if (enb)
    39a6:	88 23       	and	r24, r24
    39a8:	49 f0       	breq	.+18     	; 0x39bc <chb_sleep+0x16>
    {
        // first we need to go to TRX OFF state
        chb_set_state(CHB_TRX_OFF);
    39aa:	88 e0       	ldi	r24, 0x08	; 8
    39ac:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <chb_set_state>

        // set the SLPTR pin
        CHB_SLPTR_PORT |= _BV(CHB_SLPTR_PIN);
    39b0:	e4 e6       	ldi	r30, 0x64	; 100
    39b2:	f6 e0       	ldi	r31, 0x06	; 6
    39b4:	80 81       	ld	r24, Z
    39b6:	82 60       	ori	r24, 0x02	; 2
    39b8:	80 83       	st	Z, r24
    39ba:	08 95       	ret
    }
    else
    {
        // make sure the SLPTR pin is low first
        CHB_SLPTR_PORT &= ~(_BV(CHB_SLPTR_PIN));
    39bc:	e4 e6       	ldi	r30, 0x64	; 100
    39be:	f6 e0       	ldi	r31, 0x06	; 6
    39c0:	80 81       	ld	r24, Z
    39c2:	8d 7f       	andi	r24, 0xFD	; 253
    39c4:	80 83       	st	Z, r24
    39c6:	8f e7       	ldi	r24, 0x7F	; 127
    39c8:	97 e0       	ldi	r25, 0x07	; 7
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	f1 f7       	brne	.-4      	; 0x39ca <chb_sleep+0x24>
    39ce:	00 c0       	rjmp	.+0      	; 0x39d0 <chb_sleep+0x2a>
    39d0:	00 00       	nop

        // we need to allow some time for the PLL to lock
        _delay_us(TIME_SLEEP_TO_TRX_OFF);

        // Turn the transceiver back on
        chb_set_state(RX_STATE);
    39d2:	86 e1       	ldi	r24, 0x16	; 22
    39d4:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <chb_set_state>
    39d8:	08 95       	ret

000039da <chb_tx>:
    Load the data into the fifo, initiate a transmission attempt,
    and return the status of the transmission attempt.
*/
/**************************************************************************/
U8 chb_tx(U8 *hdr, U8 *data, U8 len)
{
    39da:	cf 92       	push	r12
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	7c 01       	movw	r14, r24
    39ec:	6b 01       	movw	r12, r22
    39ee:	04 2f       	mov	r16, r20
    U8 state = chb_get_state();
    39f0:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <chb_get_state>
    39f4:	18 2f       	mov	r17, r24
    pcb_t *pcb = chb_get_pcb();
    39f6:	0e 94 1f 1a 	call	0x343e	; 0x343e <chb_get_pcb>
    39fa:	ec 01       	movw	r28, r24

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    39fc:	12 30       	cpi	r17, 0x02	; 2
    39fe:	f1 f0       	breq	.+60     	; 0x3a3c <chb_tx+0x62>
    3a00:	12 31       	cpi	r17, 0x12	; 18
    3a02:	f1 f0       	breq	.+60     	; 0x3a40 <chb_tx+0x66>
    {
        return RADIO_WRONG_STATE;
    }

    // TODO: check why we need to transition to the off state before we go to tx_aret_on
    chb_set_state(CHB_TRX_OFF);
    3a04:	88 e0       	ldi	r24, 0x08	; 8
    3a06:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <chb_set_state>
    chb_set_state(CHB_TX_ARET_ON);
    3a0a:	89 e1       	ldi	r24, 0x19	; 25
    3a0c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <chb_set_state>

    // TODO: try and start the frame transmission by writing TX_START command instead of toggling
    // sleep pin...i just feel like it's kind of weird...

    // write frame to buffer. first write header into buffer (add 1 for len byte), then data. 
    chb_frame_write(hdr, CHB_HDR_SZ + 1, data, len);
    3a10:	c7 01       	movw	r24, r14
    3a12:	6a e0       	ldi	r22, 0x0A	; 10
    3a14:	a6 01       	movw	r20, r12
    3a16:	20 2f       	mov	r18, r16
    3a18:	0e 94 81 1b 	call	0x3702	; 0x3702 <chb_frame_write>

    //Do frame transmission. 
    chb_reg_read_mod_write(TRX_STATE, CMD_TX_START, 0x1F);
    3a1c:	82 e0       	ldi	r24, 0x02	; 2
    3a1e:	62 e0       	ldi	r22, 0x02	; 2
    3a20:	4f e1       	ldi	r20, 0x1F	; 31
    3a22:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>

    // wait for the transmission to end, signaled by the TRX END flag
    while (!pcb->tx_end);
    3a26:	8c 81       	ldd	r24, Y+4	; 0x04
    3a28:	88 23       	and	r24, r24
    3a2a:	e9 f3       	breq	.-6      	; 0x3a26 <chb_tx+0x4c>
    pcb->tx_end = false;
    3a2c:	1c 82       	std	Y+4, r1	; 0x04

*/
/**************************************************************************/
static U8 chb_get_status()
{
    return chb_reg_read(TRX_STATE) >> CHB_TRAC_STATUS_POS;
    3a2e:	82 e0       	ldi	r24, 0x02	; 2
    3a30:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    3a34:	82 95       	swap	r24
    3a36:	86 95       	lsr	r24
    3a38:	87 70       	andi	r24, 0x07	; 7
    // wait for the transmission to end, signaled by the TRX END flag
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
    3a3a:	03 c0       	rjmp	.+6      	; 0x3a42 <chb_tx+0x68>
    U8 state = chb_get_state();
    pcb_t *pcb = chb_get_pcb();

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    {
        return RADIO_WRONG_STATE;
    3a3c:	84 e4       	ldi	r24, 0x44	; 68
    3a3e:	01 c0       	rjmp	.+2      	; 0x3a42 <chb_tx+0x68>
    3a40:	84 e4       	ldi	r24, 0x44	; 68
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
}
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	1f 91       	pop	r17
    3a48:	0f 91       	pop	r16
    3a4a:	ff 90       	pop	r15
    3a4c:	ef 90       	pop	r14
    3a4e:	df 90       	pop	r13
    3a50:	cf 90       	pop	r12
    3a52:	08 95       	ret

00003a54 <chb_set_mode>:
    Set the channel mode, BPSK, OQPSK, etc...
*/
/**************************************************************************/
void chb_set_mode(U8 mode)
{
    switch (mode)
    3a54:	81 30       	cpi	r24, 0x01	; 1
    3a56:	91 f0       	breq	.+36     	; 0x3a7c <chb_set_mode+0x28>
    3a58:	81 30       	cpi	r24, 0x01	; 1
    3a5a:	28 f0       	brcs	.+10     	; 0x3a66 <chb_set_mode+0x12>
    3a5c:	82 30       	cpi	r24, 0x02	; 2
    3a5e:	c9 f0       	breq	.+50     	; 0x3a92 <chb_set_mode+0x3e>
    3a60:	83 30       	cpi	r24, 0x03	; 3
    3a62:	61 f5       	brne	.+88     	; 0x3abc <chb_set_mode+0x68>
    3a64:	21 c0       	rjmp	.+66     	; 0x3aa8 <chb_set_mode+0x54>
    {
    case OQPSK_868MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x08, 0x3f);                 // 802.15.4-2006, channel page 2, channel 0 (868 MHz, Europe)
    3a66:	8c e0       	ldi	r24, 0x0C	; 12
    3a68:	68 e0       	ldi	r22, 0x08	; 8
    3a6a:	4f e3       	ldi	r20, 0x3F	; 63
    3a6c:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    3a70:	86 e1       	ldi	r24, 0x16	; 22
    3a72:	62 e0       	ldi	r22, 0x02	; 2
    3a74:	43 e0       	ldi	r20, 0x03	; 3
    3a76:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
        break;
    3a7a:	08 95       	ret
    case OQPSK_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);                 // 802.15.4-2006, channel page 2, channels 1-10 (915 MHz, US)
    3a7c:	8c e0       	ldi	r24, 0x0C	; 12
    3a7e:	6c e0       	ldi	r22, 0x0C	; 12
    3a80:	4f e3       	ldi	r20, 0x3F	; 63
    3a82:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    3a86:	86 e1       	ldi	r24, 0x16	; 22
    3a88:	62 e0       	ldi	r22, 0x02	; 2
    3a8a:	43 e0       	ldi	r20, 0x03	; 3
    3a8c:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
        break;
    3a90:	08 95       	ret
    case OQPSK_780MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x1c, 0x3f);                 // 802.15.4-2006, channel page 5, channel 0-3 (780 MHz, China)
    3a92:	8c e0       	ldi	r24, 0x0C	; 12
    3a94:	6c e1       	ldi	r22, 0x1C	; 28
    3a96:	4f e3       	ldi	r20, 0x3F	; 63
    3a98:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    3a9c:	86 e1       	ldi	r24, 0x16	; 22
    3a9e:	62 e0       	ldi	r22, 0x02	; 2
    3aa0:	43 e0       	ldi	r20, 0x03	; 3
    3aa2:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
        break;
    3aa6:	08 95       	ret
    case BPSK40_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x00, 0x3f);                 // 802.15.4-2006, BPSK, 40 kbps
    3aa8:	8c e0       	ldi	r24, 0x0C	; 12
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	4f e3       	ldi	r20, 0x3F	; 63
    3aae:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_BPSK_TX_OFFSET, 0x3);     // this is according to table 7-16 in at86rf212 datasheet
    3ab2:	86 e1       	ldi	r24, 0x16	; 22
    3ab4:	63 e0       	ldi	r22, 0x03	; 3
    3ab6:	43 e0       	ldi	r20, 0x03	; 3
    3ab8:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
    3abc:	08 95       	ret

00003abe <chb_set_channel>:
/*!

*/
/**************************************************************************/
U8 chb_set_channel(U8 channel)
{
    3abe:	cf 93       	push	r28
    3ac0:	c8 2f       	mov	r28, r24
    //    {
    //        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);
    //    }
    //}
        
    chb_reg_read_mod_write(PHY_CC_CCA, channel, 0x1f); 
    3ac2:	88 e0       	ldi	r24, 0x08	; 8
    3ac4:	6c 2f       	mov	r22, r28
    3ac6:	4f e1       	ldi	r20, 0x1F	; 31
    3ac8:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
#endif

    // add a delay to allow the PLL to lock if in active mode.
    state = chb_get_state();
    3acc:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <chb_get_state>
    if ((state == CHB_RX_ON) || (state == CHB_PLL_ON))
    3ad0:	86 30       	cpi	r24, 0x06	; 6
    3ad2:	11 f0       	breq	.+4      	; 0x3ad8 <chb_set_channel+0x1a>
    3ad4:	89 30       	cpi	r24, 0x09	; 9
    3ad6:	31 f4       	brne	.+12     	; 0x3ae4 <chb_set_channel+0x26>
    3ad8:	8f e6       	ldi	r24, 0x6F	; 111
    3ada:	93 e0       	ldi	r25, 0x03	; 3
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	f1 f7       	brne	.-4      	; 0x3adc <chb_set_channel+0x1e>
    3ae0:	00 c0       	rjmp	.+0      	; 0x3ae2 <chb_set_channel+0x24>
    3ae2:	00 00       	nop
    {
        _delay_us(TIME_PLL_LOCK_TIME);
    }

    return ((chb_reg_read(PHY_CC_CCA) & 0x1f) == channel) ? RADIO_SUCCESS : RADIO_TIMED_OUT;
    3ae4:	88 e0       	ldi	r24, 0x08	; 8
    3ae6:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	8f 71       	andi	r24, 0x1F	; 31
    3aee:	90 70       	andi	r25, 0x00	; 0
    3af0:	6c 2f       	mov	r22, r28
    3af2:	70 e0       	ldi	r23, 0x00	; 0
    3af4:	86 17       	cp	r24, r22
    3af6:	97 07       	cpc	r25, r23
    3af8:	11 f4       	brne	.+4      	; 0x3afe <chb_set_channel+0x40>
    3afa:	80 e4       	ldi	r24, 0x40	; 64
    3afc:	01 c0       	rjmp	.+2      	; 0x3b00 <chb_set_channel+0x42>
    3afe:	83 e4       	ldi	r24, 0x43	; 67
}
    3b00:	cf 91       	pop	r28
    3b02:	08 95       	ret

00003b04 <chb_reg_read16>:
/*! 
 
*/
/**************************************************************************/
U16 chb_reg_read16(U8 addr)
{
    3b04:	cf 93       	push	r28
    3b06:	c8 2f       	mov	r28, r24
    U8 i;
    U16 val = 0;

    for (i=0; i<2; i++)
    {
        addr |= chb_reg_read(addr + i) << (8 * i);
    3b08:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    3b0c:	8c 2b       	or	r24, r28
    3b0e:	8f 5f       	subi	r24, 0xFF	; 255
    3b10:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    }
    return val;
}
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	cf 91       	pop	r28
    3b1a:	08 95       	ret

00003b1c <chb_reset>:

*/
/**************************************************************************/
void chb_reset()
{
    CHB_RST_DISABLE();
    3b1c:	e4 e6       	ldi	r30, 0x64	; 100
    3b1e:	f6 e0       	ldi	r31, 0x06	; 6
    3b20:	80 81       	ld	r24, Z
    3b22:	81 60       	ori	r24, 0x01	; 1
    3b24:	80 83       	st	Z, r24
    CHB_SLPTR_DISABLE();
    3b26:	80 81       	ld	r24, Z
    3b28:	8d 7f       	andi	r24, 0xFD	; 253
    3b2a:	80 83       	st	Z, r24
    3b2c:	8f ed       	ldi	r24, 0xDF	; 223
    3b2e:	9b e0       	ldi	r25, 0x0B	; 11
    3b30:	01 97       	sbiw	r24, 0x01	; 1
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <chb_reset+0x14>
    3b34:	00 c0       	rjmp	.+0      	; 0x3b36 <chb_reset+0x1a>
    3b36:	00 00       	nop

    // wait a bit while transceiver wakes up
    _delay_us(TIME_P_ON_TO_CLKM_AVAIL);

    // reset the device
    CHB_RST_ENABLE();
    3b38:	80 81       	ld	r24, Z
    3b3a:	8e 7f       	andi	r24, 0xFE	; 254
    3b3c:	80 83       	st	Z, r24
    3b3e:	9a e0       	ldi	r25, 0x0A	; 10
    3b40:	9a 95       	dec	r25
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <chb_reset+0x24>
    3b44:	00 c0       	rjmp	.+0      	; 0x3b46 <chb_reset+0x2a>
    _delay_us(TIME_RST_PULSE_WIDTH);
    CHB_RST_DISABLE();
    3b46:	80 81       	ld	r24, Z
    3b48:	81 60       	ori	r24, 0x01	; 1
    3b4a:	80 83       	st	Z, r24
    while (1)
    {
        // if you're stuck in this loop, that means that you're not reading
        // the version and part number register correctly. possible that version number
        // changes. if so, update version num in header file
        if ((chb_reg_read(VERSION_NUM) == CHB_AT86RF212_VER_NUM) && (chb_reg_read(PART_NUM) == CHB_AT86RF212_PART_NUM)) 
    3b4c:	8d e1       	ldi	r24, 0x1D	; 29
    3b4e:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    3b52:	81 30       	cpi	r24, 0x01	; 1
    3b54:	d9 f7       	brne	.-10     	; 0x3b4c <chb_reset+0x30>
    3b56:	8c e1       	ldi	r24, 0x1C	; 28
    3b58:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    3b5c:	87 30       	cpi	r24, 0x07	; 7
    3b5e:	b1 f7       	brne	.-20     	; 0x3b4c <chb_reset+0x30>
            break;
        }
    }
	

}
    3b60:	08 95       	ret

00003b62 <chb_drvr_init>:
/*!

*/
/**************************************************************************/
void chb_drvr_init()
{
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	ea 97       	sbiw	r28, 0x3a	; 58
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	de bf       	out	0x3e, r29	; 62
    // config SPI for at86rf230 access
    chb_spi_init();
    3b74:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <chb_spi_init>
	//SPIDInit(SPI_MODE0_bm);
	//RadioCS(FALSE);
    // configure IOs
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    3b78:	e0 e6       	ldi	r30, 0x60	; 96
    3b7a:	f6 e0       	ldi	r31, 0x06	; 6
    3b7c:	80 81       	ld	r24, Z
    3b7e:	82 60       	ori	r24, 0x02	; 2
    3b80:	80 83       	st	Z, r24
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));
    3b82:	80 81       	ld	r24, Z
    3b84:	81 60       	ori	r24, 0x01	; 1
    3b86:	80 83       	st	Z, r24
static void chb_radio_init()
{
    U8 ieee_addr[8];

    // reset chip
    chb_reset();
    3b88:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <chb_reset>

    // disable intps while we config the radio
    chb_reg_write(IRQ_MASK, 0);
    3b8c:	8e e0       	ldi	r24, 0x0E	; 14
    3b8e:	60 e0       	ldi	r22, 0x00	; 0
    3b90:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chb_reg_write>

    // force transceiver off while we configure the intps
    chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1F);
    3b94:	82 e0       	ldi	r24, 0x02	; 2
    3b96:	63 e0       	ldi	r22, 0x03	; 3
    3b98:	4f e1       	ldi	r20, 0x1F	; 31
    3b9a:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>

    // make sure the transceiver is in the off state before proceeding
    while ((chb_reg_read(TRX_STATUS) & 0x1f) != CHB_TRX_OFF);
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    3ba4:	8f 71       	andi	r24, 0x1F	; 31
    3ba6:	88 30       	cpi	r24, 0x08	; 8
    3ba8:	d1 f7       	brne	.-12     	; 0x3b9e <chb_drvr_init+0x3c>
    //chb_ret_write(CSMA_SEED0, CHB_CSMA_SEED0);     
    //chb_reg_read_mod_write(PHY_CC_CCA, CHB_CCA_MODE << CHB_CCA_MODE_POS,0x3 << CHB_CCA_MODE_POS);
    //chb_reg_write(CCA_THRES, CHB_CCA_ED_THRES);

    // set frame version that we'll accept
    chb_reg_read_mod_write(CSMA_SEED_1, CHB_FRM_VER << CHB_FVN_POS, 3 << CHB_FVN_POS);
    3baa:	8e e2       	ldi	r24, 0x2E	; 46
    3bac:	60 e4       	ldi	r22, 0x40	; 64
    3bae:	40 ec       	ldi	r20, 0xC0	; 192
    3bb0:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>

    // set interrupt mask
    // re-enable intps while we config the radio
    chb_reg_write(IRQ_MASK, (1<<IRQ_RX_START) | (1<<IRQ_TRX_END));
    3bb4:	8e e0       	ldi	r24, 0x0E	; 14
    3bb6:	6c e0       	ldi	r22, 0x0C	; 12
    3bb8:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chb_reg_write>

    #if (CHB_PROMISCUOUS == 0)
    // set autocrc mode
    chb_reg_read_mod_write(TRX_CTRL_1, 1 << CHB_AUTO_CRC_POS, 1 << CHB_AUTO_CRC_POS);
    3bbc:	84 e0       	ldi	r24, 0x04	; 4
    3bbe:	60 e2       	ldi	r22, 0x20	; 32
    3bc0:	40 e2       	ldi	r20, 0x20	; 32
    3bc2:	0e 94 67 1c 	call	0x38ce	; 0x38ce <chb_reg_read_mod_write>
    #endif

    // set up default phy modulation and data rate - OQPSK, 250 kbps, 915 MHz
    chb_set_mode(CHB_INIT_MODE);
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <chb_set_mode>

    chb_set_channel(CHB_CHANNEL);
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <chb_set_channel>

    // set fsm state
    // put trx in rx auto ack mode
    chb_set_state(RX_STATE);
    3bd2:	86 e1       	ldi	r24, 0x16	; 22
    3bd4:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <chb_set_state>

    // set pan ID
    chb_reg_write16(PAN_ID_0, CHB_PAN_ID);
    3bd8:	82 e2       	ldi	r24, 0x22	; 34
    3bda:	64 e3       	ldi	r22, 0x34	; 52
    3bdc:	72 e1       	ldi	r23, 0x12	; 18
    3bde:	0e 94 13 1c 	call	0x3826	; 0x3826 <chb_reg_write16>

    // set short addr
    // NOTE: Possibly get this from EEPROM
    chb_reg_write16(SHORT_ADDR_0, chb_get_short_addr());
    3be2:	0e 94 5f 1b 	call	0x36be	; 0x36be <chb_get_short_addr>
    3be6:	bc 01       	movw	r22, r24
    3be8:	80 e2       	ldi	r24, 0x20	; 32
    3bea:	0e 94 13 1c 	call	0x3826	; 0x3826 <chb_reg_write16>

    // set long addr
    // NOTE: Possibly get this from EEPROM
    chb_get_ieee_addr(ieee_addr);
    3bee:	ce 01       	movw	r24, r28
    3bf0:	01 96       	adiw	r24, 0x01	; 1
    3bf2:	0e 94 57 1b 	call	0x36ae	; 0x36ae <chb_get_ieee_addr>
    chb_reg_write64(IEEE_ADDR_0, ieee_addr);
    3bf6:	84 e2       	ldi	r24, 0x24	; 36
    3bf8:	be 01       	movw	r22, r28
    3bfa:	6f 5f       	subi	r22, 0xFF	; 255
    3bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfe:	0e 94 ed 1b 	call	0x37da	; 0x37da <chb_reg_write64>
    // set power to 0 dBm if CC1190 is being used. 
    chb_set_pwr(0x24);   
#endif

    // enable mcu intp pin
    CFG_CHB_INTP_RISE_EDGE();
    3c02:	e2 e7       	ldi	r30, 0x72	; 114
    3c04:	f6 e0       	ldi	r31, 0x06	; 6
    3c06:	80 81       	ld	r24, Z
    3c08:	81 60       	ori	r24, 0x01	; 1
    3c0a:	80 83       	st	Z, r24
    3c0c:	e9 e6       	ldi	r30, 0x69	; 105
    3c0e:	f6 e0       	ldi	r31, 0x06	; 6
    3c10:	80 81       	ld	r24, Z
    3c12:	83 60       	ori	r24, 0x03	; 3
    3c14:	80 83       	st	Z, r24
    3c16:	ea e6       	ldi	r30, 0x6A	; 106
    3c18:	f6 e0       	ldi	r31, 0x06	; 6
    3c1a:	80 81       	ld	r24, Z
    3c1c:	84 60       	ori	r24, 0x04	; 4
    3c1e:	80 83       	st	Z, r24
	PMIC.CTRL |= 0x07;	//enable interrupts on MCU
    3c20:	e0 ea       	ldi	r30, 0xA0	; 160
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	82 81       	ldd	r24, Z+2	; 0x02
    3c26:	87 60       	ori	r24, 0x07	; 7
    3c28:	82 83       	std	Z+2, r24	; 0x02

    if (chb_get_state() != RX_STATE)
    3c2a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <chb_get_state>
    3c2e:	86 31       	cpi	r24, 0x16	; 22
    3c30:	91 f0       	breq	.+36     	; 0x3c56 <chb_drvr_init+0xf4>
    {
        // ERROR occurred initializing the radio. Print out error message.
        char buf[50];

        // grab the error message from flash & print it out
        strcpy_P(buf, chb_err_init);
    3c32:	8e 01       	movw	r16, r28
    3c34:	07 5f       	subi	r16, 0xF7	; 247
    3c36:	1f 4f       	sbci	r17, 0xFF	; 255
    3c38:	c8 01       	movw	r24, r16
    3c3a:	68 ee       	ldi	r22, 0xE8	; 232
    3c3c:	71 e0       	ldi	r23, 0x01	; 1
    3c3e:	0e 94 da 39 	call	0x73b4	; 0x73b4 <strcpy_P>
        printf(buf);
    3c42:	0f 92       	push	r0
    3c44:	0f 92       	push	r0
    3c46:	ed b7       	in	r30, 0x3d	; 61
    3c48:	fe b7       	in	r31, 0x3e	; 62
    3c4a:	01 83       	std	Z+1, r16	; 0x01
    3c4c:	12 83       	std	Z+2, r17	; 0x02
    3c4e:	0e 94 1f 3a 	call	0x743e	; 0x743e <printf>
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));

    // config radio
    chb_radio_init();
}
    3c56:	ea 96       	adiw	r28, 0x3a	; 58
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	df 91       	pop	r29
    3c5e:	cf 91       	pop	r28
    3c60:	1f 91       	pop	r17
    3c62:	0f 91       	pop	r16
    3c64:	08 95       	ret

00003c66 <__vector_64>:
/*!

*/
/**************************************************************************/
ISR(CHB_RADIO_IRQ)
{
    3c66:	1f 92       	push	r1
    3c68:	0f 92       	push	r0
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	0f 92       	push	r0
    3c6e:	0b b6       	in	r0, 0x3b	; 59
    3c70:	0f 92       	push	r0
    3c72:	11 24       	eor	r1, r1
    3c74:	6f 92       	push	r6
    3c76:	7f 92       	push	r7
    3c78:	8f 92       	push	r8
    3c7a:	9f 92       	push	r9
    3c7c:	af 92       	push	r10
    3c7e:	bf 92       	push	r11
    3c80:	df 92       	push	r13
    3c82:	ef 92       	push	r14
    3c84:	ff 92       	push	r15
    3c86:	0f 93       	push	r16
    3c88:	1f 93       	push	r17
    3c8a:	2f 93       	push	r18
    3c8c:	3f 93       	push	r19
    3c8e:	4f 93       	push	r20
    3c90:	5f 93       	push	r21
    3c92:	6f 93       	push	r22
    3c94:	7f 93       	push	r23
    3c96:	8f 93       	push	r24
    3c98:	9f 93       	push	r25
    3c9a:	af 93       	push	r26
    3c9c:	bf 93       	push	r27
    3c9e:	ef 93       	push	r30
    3ca0:	ff 93       	push	r31
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	e2 97       	sbiw	r28, 0x32	; 50
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	de bf       	out	0x3e, r29	; 62
    U8 state, intp_src = 0;
	//U8 dummy;
    pcb_t *pcb = chb_get_pcb();
    3cb0:	0e 94 1f 1a 	call	0x343e	; 0x343e <chb_get_pcb>
    3cb4:	7c 01       	movw	r14, r24

    CHB_ENTER_CRIT();
    3cb6:	8f b7       	in	r24, 0x3f	; 63
    3cb8:	80 93 58 40 	sts	0x4058, r24
    3cbc:	f8 94       	cli

    /*Read Interrupt source.*/
    RadioCS(TRUE);   
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>

    /*Send Register address and read register content.*/
    //dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
	SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    3cc4:	8f e8       	ldi	r24, 0x8F	; 143
    3cc6:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
    intp_src = SPID_write(0);
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
    3cd0:	18 2f       	mov	r17, r24

    RadioCS(FALSE);
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>

    while (intp_src)
    3cd8:	11 23       	and	r17, r17
    3cda:	09 f4       	brne	.+2      	; 0x3cde <__vector_64+0x78>
    3cdc:	ae c0       	rjmp	.+348    	; 0x3e3a <__vector_64+0x1d4>

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
    3cde:	aa 24       	eor	r10, r10
    3ce0:	bb 24       	eor	r11, r11
    3ce2:	68 94       	set
    3ce4:	a7 f8       	bld	r10, 7

            // Increment the overflow stat
            pcb->overflow++;

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
    3ce6:	0f 2e       	mov	r0, r31
    3ce8:	f8 e0       	ldi	r31, 0x08	; 8
    3cea:	8f 2e       	mov	r8, r31
    3cec:	f2 e0       	ldi	r31, 0x02	; 2
    3cee:	9f 2e       	mov	r9, r31
    3cf0:	f0 2d       	mov	r31, r0
    RadioCS(FALSE);

    while (intp_src)
    {
        /*Handle the incomming interrupt. Prioritized.*/
        if ((intp_src & CHB_IRQ_RX_START_MASK))
    3cf2:	12 ff       	sbrs	r17, 2
    3cf4:	02 c0       	rjmp	.+4      	; 0x3cfa <__vector_64+0x94>
        {
            intp_src &= ~CHB_IRQ_RX_START_MASK;
    3cf6:	1b 7f       	andi	r17, 0xFB	; 251
    3cf8:	9d c0       	rjmp	.+314    	; 0x3e34 <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_TRX_END_MASK)
    3cfa:	13 ff       	sbrs	r17, 3
    3cfc:	82 c0       	rjmp	.+260    	; 0x3e02 <__vector_64+0x19c>
        {
            state = chb_get_state();
    3cfe:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <chb_get_state>

            if ((state == CHB_RX_ON) || (state == CHB_RX_AACK_ON) || (state == CHB_BUSY_RX_AACK)){
    3d02:	86 30       	cpi	r24, 0x06	; 6
    3d04:	29 f0       	breq	.+10     	; 0x3d10 <__vector_64+0xaa>
    3d06:	86 31       	cpi	r24, 0x16	; 22
    3d08:	19 f0       	breq	.+6      	; 0x3d10 <__vector_64+0xaa>
    3d0a:	81 31       	cpi	r24, 0x11	; 17
    3d0c:	09 f0       	breq	.+2      	; 0x3d10 <__vector_64+0xaa>
    3d0e:	6f c0       	rjmp	.+222    	; 0x3dee <__vector_64+0x188>
				//go to TRX_OFF state to avoid data corruption due to reception of another message
				//chb_set_state(CHB_TRX_OFF);
                // get the ed measurement
                pcb->ed = chb_reg_read(PHY_ED_LEVEL);
    3d10:	87 e0       	ldi	r24, 0x07	; 7
    3d12:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    3d16:	f7 01       	movw	r30, r14
    3d18:	82 8b       	std	Z+18, r24	; 0x12

                // get the crc
                pcb->crc = (chb_reg_read(PHY_RSSI) & (1<<7)) ? 1 : 0;
    3d1a:	86 e0       	ldi	r24, 0x06	; 6
    3d1c:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
    3d20:	88 1f       	adc	r24, r24
    3d22:	88 27       	eor	r24, r24
    3d24:	88 1f       	adc	r24, r24
    3d26:	f7 01       	movw	r30, r14
    3d28:	83 8b       	std	Z+19, r24	; 0x13

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc){
    3d2a:	88 23       	and	r24, r24
    3d2c:	09 f4       	brne	.+2      	; 0x3d30 <__vector_64+0xca>
    3d2e:	62 c0       	rjmp	.+196    	; 0x3df4 <__vector_64+0x18e>
/**************************************************************************/
static void chb_frame_read()
{
    U8 i, len, data;

    CHB_ENTER_CRIT();
    3d30:	8f b7       	in	r24, 0x3f	; 63
    3d32:	80 93 58 40 	sts	0x4058, r24
    3d36:	f8 94       	cli
    RadioCS(TRUE);
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>

    /*Send frame read command and read the length.*/
    SPID_write(CHB_SPI_CMD_FR);
    3d3e:	80 e2       	ldi	r24, 0x20	; 32
    3d40:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
    len = SPID_write(0);
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
    3d4a:	d8 2e       	mov	r13, r24

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    3d4c:	83 50       	subi	r24, 0x03	; 3
    3d4e:	8d 37       	cpi	r24, 0x7D	; 125
    3d50:	f0 f5       	brcc	.+124    	; 0x3dce <__vector_64+0x168>
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
    3d52:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <chb_buf_get_len>
    3d56:	2d 2d       	mov	r18, r13
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	a5 01       	movw	r20, r10
    3d5c:	48 1b       	sub	r20, r24
    3d5e:	51 09       	sbc	r21, r1
    3d60:	24 17       	cp	r18, r20
    3d62:	35 07       	cpc	r19, r21
    3d64:	7c f4       	brge	.+30     	; 0x3d84 <__vector_64+0x11e>
        {
            chb_buf_write(len);
    3d66:	8d 2d       	mov	r24, r13
    3d68:	0e 94 28 1b 	call	0x3650	; 0x3650 <chb_buf_write>
            
            for (i=0; i<len; i++)
    3d6c:	dd 20       	and	r13, r13
    3d6e:	79 f1       	breq	.+94     	; 0x3dce <__vector_64+0x168>
    3d70:	00 e0       	ldi	r16, 0x00	; 0
            {
                data = SPID_write(0);
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
                chb_buf_write(data);
    3d78:	0e 94 28 1b 	call	0x3650	; 0x3650 <chb_buf_write>
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
        {
            chb_buf_write(len);
            
            for (i=0; i<len; i++)
    3d7c:	0f 5f       	subi	r16, 0xFF	; 255
    3d7e:	0d 15       	cp	r16, r13
    3d80:	c1 f7       	brne	.-16     	; 0x3d72 <__vector_64+0x10c>
    3d82:	25 c0       	rjmp	.+74     	; 0x3dce <__vector_64+0x168>
			//PORTE.OUTCLR = PIN2_bm;
        }
        else
        {
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
    3d84:	0e 94 1f 1a 	call	0x343e	; 0x343e <chb_get_pcb>
    3d88:	3c 01       	movw	r6, r24
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
    3d8a:	dd 20       	and	r13, r13
    3d8c:	39 f0       	breq	.+14     	; 0x3d9c <__vector_64+0x136>
    3d8e:	00 e0       	ldi	r16, 0x00	; 0
            {
                data = SPID_write(0);
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <SPID_write>
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
    3d96:	0f 5f       	subi	r16, 0xFF	; 255
    3d98:	0d 15       	cp	r16, r13
    3d9a:	d1 f7       	brne	.-12     	; 0x3d90 <__vector_64+0x12a>
            {
                data = SPID_write(0);
            }

            // Increment the overflow stat
            pcb->overflow++;
    3d9c:	f3 01       	movw	r30, r6
    3d9e:	85 85       	ldd	r24, Z+13	; 0x0d
    3da0:	96 85       	ldd	r25, Z+14	; 0x0e
    3da2:	01 96       	adiw	r24, 0x01	; 1
    3da4:	85 87       	std	Z+13, r24	; 0x0d
    3da6:	96 87       	std	Z+14, r25	; 0x0e

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
    3da8:	ce 01       	movw	r24, r28
    3daa:	01 96       	adiw	r24, 0x01	; 1
    3dac:	b4 01       	movw	r22, r8
    3dae:	0e 94 da 39 	call	0x73b4	; 0x73b4 <strcpy_P>
            printf(buf);
    3db2:	0f 92       	push	r0
    3db4:	0f 92       	push	r0
    3db6:	41 e0       	ldi	r20, 0x01	; 1
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	4c 0f       	add	r20, r28
    3dbc:	5d 1f       	adc	r21, r29
    3dbe:	ed b7       	in	r30, 0x3d	; 61
    3dc0:	fe b7       	in	r31, 0x3e	; 62
    3dc2:	41 83       	std	Z+1, r20	; 0x01
    3dc4:	52 83       	std	Z+2, r21	; 0x02
    3dc6:	0e 94 1f 3a 	call	0x743e	; 0x743e <printf>
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
        }
    }

    RadioCS(FALSE);
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	0e 94 75 1b 	call	0x36ea	; 0x36ea <RadioCS>
    CHB_LEAVE_CRIT();
    3dd4:	80 91 58 40 	lds	r24, 0x4058
    3dd8:	8f bf       	out	0x3f, r24	; 63
    3dda:	78 94       	sei

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc){
                    // get the data
                    chb_frame_read();
                    pcb->rcvd_xfers++;
    3ddc:	f7 01       	movw	r30, r14
    3dde:	85 81       	ldd	r24, Z+5	; 0x05
    3de0:	96 81       	ldd	r25, Z+6	; 0x06
    3de2:	01 96       	adiw	r24, 0x01	; 1
    3de4:	85 83       	std	Z+5, r24	; 0x05
    3de6:	96 83       	std	Z+6, r25	; 0x06
                    pcb->data_rcv = true;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	83 83       	std	Z+3, r24	; 0x03
    3dec:	03 c0       	rjmp	.+6      	; 0x3df4 <__vector_64+0x18e>
					if(StartOfFreeSpace+128 >= FR_READ_BUFFER_SIZE) StartOfFreeSpace = 0;	//wrap around to the start of the buffer (making circular buffer). This should be avoided as data in the buffer will be overwritten (i.e. lost).
					*/			
                }
            }
            else{
                pcb->tx_end = true;
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	f7 01       	movw	r30, r14
    3df2:	84 83       	std	Z+4, r24	; 0x04
            }
            intp_src &= ~CHB_IRQ_TRX_END_MASK;
    3df4:	17 7f       	andi	r17, 0xF7	; 247
			//go to receive state
            while (chb_set_state(RX_STATE) != RADIO_SUCCESS);
    3df6:	86 e1       	ldi	r24, 0x16	; 22
    3df8:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <chb_set_state>
    3dfc:	80 34       	cpi	r24, 0x40	; 64
    3dfe:	d9 f7       	brne	.-10     	; 0x3df6 <__vector_64+0x190>
    3e00:	19 c0       	rjmp	.+50     	; 0x3e34 <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_TRX_UR_MASK)
    3e02:	16 ff       	sbrs	r17, 6
    3e04:	08 c0       	rjmp	.+16     	; 0x3e16 <__vector_64+0x1b0>
        {
            intp_src &= ~CHB_IRQ_TRX_UR_MASK;
    3e06:	1f 7b       	andi	r17, 0xBF	; 191
            pcb->underrun++;
    3e08:	f7 01       	movw	r30, r14
    3e0a:	87 85       	ldd	r24, Z+15	; 0x0f
    3e0c:	90 89       	ldd	r25, Z+16	; 0x10
    3e0e:	01 96       	adiw	r24, 0x01	; 1
    3e10:	87 87       	std	Z+15, r24	; 0x0f
    3e12:	90 8b       	std	Z+16, r25	; 0x10
    3e14:	0f c0       	rjmp	.+30     	; 0x3e34 <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_PLL_UNLOCK_MASK)
    3e16:	11 ff       	sbrs	r17, 1
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <__vector_64+0x1b8>
        {
            intp_src &= ~CHB_IRQ_PLL_UNLOCK_MASK;
    3e1a:	1d 7f       	andi	r17, 0xFD	; 253
    3e1c:	0b c0       	rjmp	.+22     	; 0x3e34 <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_PLL_LOCK_MASK)
    3e1e:	10 ff       	sbrs	r17, 0
    3e20:	02 c0       	rjmp	.+4      	; 0x3e26 <__vector_64+0x1c0>
        {
            intp_src &= ~CHB_IRQ_PLL_LOCK_MASK;
    3e22:	1e 7f       	andi	r17, 0xFE	; 254
    3e24:	07 c0       	rjmp	.+14     	; 0x3e34 <__vector_64+0x1ce>
        }
        else if (intp_src & CHB_IRQ_BAT_LOW_MASK)
    3e26:	11 23       	and	r17, r17
    3e28:	2c f4       	brge	.+10     	; 0x3e34 <__vector_64+0x1ce>
        {
            intp_src &= ~CHB_IRQ_BAT_LOW_MASK;
    3e2a:	1f 77       	andi	r17, 0x7F	; 127
            pcb->battlow++;
    3e2c:	f7 01       	movw	r30, r14
    3e2e:	81 89       	ldd	r24, Z+17	; 0x11
    3e30:	8f 5f       	subi	r24, 0xFF	; 255
    3e32:	81 8b       	std	Z+17, r24	; 0x11
	SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    intp_src = SPID_write(0);

    RadioCS(FALSE);

    while (intp_src)
    3e34:	11 23       	and	r17, r17
    3e36:	09 f0       	breq	.+2      	; 0x3e3a <__vector_64+0x1d4>
    3e38:	5c cf       	rjmp	.-328    	; 0x3cf2 <__vector_64+0x8c>
        }
        else
        {
        }
    }
    CHB_LEAVE_CRIT();
    3e3a:	80 91 58 40 	lds	r24, 0x4058
    3e3e:	8f bf       	out	0x3f, r24	; 63
    3e40:	78 94       	sei
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
    3e42:	8f e0       	ldi	r24, 0x0F	; 15
    3e44:	0e 94 48 1c 	call	0x3890	; 0x3890 <chb_reg_read>
}
    3e48:	e2 96       	adiw	r28, 0x32	; 50
    3e4a:	cd bf       	out	0x3d, r28	; 61
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	ff 91       	pop	r31
    3e54:	ef 91       	pop	r30
    3e56:	bf 91       	pop	r27
    3e58:	af 91       	pop	r26
    3e5a:	9f 91       	pop	r25
    3e5c:	8f 91       	pop	r24
    3e5e:	7f 91       	pop	r23
    3e60:	6f 91       	pop	r22
    3e62:	5f 91       	pop	r21
    3e64:	4f 91       	pop	r20
    3e66:	3f 91       	pop	r19
    3e68:	2f 91       	pop	r18
    3e6a:	1f 91       	pop	r17
    3e6c:	0f 91       	pop	r16
    3e6e:	ff 90       	pop	r15
    3e70:	ef 90       	pop	r14
    3e72:	df 90       	pop	r13
    3e74:	bf 90       	pop	r11
    3e76:	af 90       	pop	r10
    3e78:	9f 90       	pop	r9
    3e7a:	8f 90       	pop	r8
    3e7c:	7f 90       	pop	r7
    3e7e:	6f 90       	pop	r6
    3e80:	0f 90       	pop	r0
    3e82:	0b be       	out	0x3b, r0	; 59
    3e84:	0f 90       	pop	r0
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	0f 90       	pop	r0
    3e8a:	1f 90       	pop	r1
    3e8c:	18 95       	reti

00003e8e <chb_eeprom_write>:
/*!

*/
/**************************************************************************/
void chb_eeprom_write(U16 addr, U8 *buf, U16 size)
{
    3e8e:	0f 93       	push	r16
    3e90:	1f 93       	push	r17
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	8c 01       	movw	r16, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
    3e98:	e0 ec       	ldi	r30, 0xC0	; 192
    3e9a:	f1 e0       	ldi	r31, 0x01	; 1
    3e9c:	84 85       	ldd	r24, Z+12	; 0x0c
    3e9e:	87 7f       	andi	r24, 0xF7	; 247
    3ea0:	84 87       	std	Z+12, r24	; 0x0c

    // Write bytes
    for(U8 i=0; i<size; i++)
    3ea2:	41 15       	cp	r20, r1
    3ea4:	51 05       	cpc	r21, r1
    3ea6:	09 f4       	brne	.+2      	; 0x3eaa <chb_eeprom_write+0x1c>
    3ea8:	50 c0       	rjmp	.+160    	; 0x3f4a <chb_eeprom_write+0xbc>
    3eaa:	e0 e0       	ldi	r30, 0x00	; 0
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	20 e0       	ldi	r18, 0x00	; 0
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3eb0:	a0 ec       	ldi	r26, 0xC0	; 192
    3eb2:	b1 e0       	ldi	r27, 0x01	; 1

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3eb4:	d6 e3       	ldi	r29, 0x36	; 54
        NVM_EXEC();
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3eb6:	c3 e3       	ldi	r28, 0x33	; 51

    // load the data to write
    NVM.DATA0 = value;

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3eb8:	35 e3       	ldi	r19, 0x35	; 53
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
    {
        chb_eep_write_byte(addr+i, buf[i]);
    3eba:	cf 01       	movw	r24, r30
    3ebc:	80 0f       	add	r24, r16
    3ebe:	91 1f       	adc	r25, r17
    3ec0:	e6 0f       	add	r30, r22
    3ec2:	f7 1f       	adc	r31, r23
    3ec4:	f0 81       	ld	r31, Z
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3ec6:	1f 96       	adiw	r26, 0x0f	; 15
    3ec8:	ec 91       	ld	r30, X
    3eca:	1f 97       	sbiw	r26, 0x0f	; 15
    3ecc:	ee 23       	and	r30, r30
    3ece:	dc f3       	brlt	.-10     	; 0x3ec6 <chb_eeprom_write+0x38>

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3ed0:	1f 96       	adiw	r26, 0x0f	; 15
    3ed2:	ec 91       	ld	r30, X
    3ed4:	1f 97       	sbiw	r26, 0x0f	; 15
    3ed6:	e1 ff       	sbrs	r30, 1
    3ed8:	11 c0       	rjmp	.+34     	; 0x3efc <chb_eeprom_write+0x6e>
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3eda:	1a 96       	adiw	r26, 0x0a	; 10
    3edc:	dc 93       	st	X, r29
    3ede:	1a 97       	sbiw	r26, 0x0a	; 10
        NVM_EXEC();
    3ee0:	ef 93       	push	r30
    3ee2:	ff 93       	push	r31
    3ee4:	0f 93       	push	r16
    3ee6:	2f 93       	push	r18
    3ee8:	eb ec       	ldi	r30, 0xCB	; 203
    3eea:	f1 e0       	ldi	r31, 0x01	; 1
    3eec:	08 ed       	ldi	r16, 0xD8	; 216
    3eee:	21 e0       	ldi	r18, 0x01	; 1
    3ef0:	04 bf       	out	0x34, r16	; 52
    3ef2:	20 83       	st	Z, r18
    3ef4:	2f 91       	pop	r18
    3ef6:	0f 91       	pop	r16
    3ef8:	ff 91       	pop	r31
    3efa:	ef 91       	pop	r30
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3efc:	1a 96       	adiw	r26, 0x0a	; 10
    3efe:	cc 93       	st	X, r28
    3f00:	1a 97       	sbiw	r26, 0x0a	; 10

    // load the address
    NVM.ADDR0 = addr & 0xFF;
    3f02:	8c 93       	st	X, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    3f04:	89 2f       	mov	r24, r25
    3f06:	8f 71       	andi	r24, 0x1F	; 31
    3f08:	11 96       	adiw	r26, 0x01	; 1
    3f0a:	8c 93       	st	X, r24
    3f0c:	11 97       	sbiw	r26, 0x01	; 1
    NVM.ADDR2 = 0x00;
    3f0e:	12 96       	adiw	r26, 0x02	; 2
    3f10:	1c 92       	st	X, r1
    3f12:	12 97       	sbiw	r26, 0x02	; 2

    // load the data to write
    NVM.DATA0 = value;
    3f14:	14 96       	adiw	r26, 0x04	; 4
    3f16:	fc 93       	st	X, r31
    3f18:	14 97       	sbiw	r26, 0x04	; 4

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3f1a:	1a 96       	adiw	r26, 0x0a	; 10
    3f1c:	3c 93       	st	X, r19
    3f1e:	1a 97       	sbiw	r26, 0x0a	; 10
    NVM_EXEC();
    3f20:	ef 93       	push	r30
    3f22:	ff 93       	push	r31
    3f24:	0f 93       	push	r16
    3f26:	2f 93       	push	r18
    3f28:	eb ec       	ldi	r30, 0xCB	; 203
    3f2a:	f1 e0       	ldi	r31, 0x01	; 1
    3f2c:	08 ed       	ldi	r16, 0xD8	; 216
    3f2e:	21 e0       	ldi	r18, 0x01	; 1
    3f30:	04 bf       	out	0x34, r16	; 52
    3f32:	20 83       	st	Z, r18
    3f34:	2f 91       	pop	r18
    3f36:	0f 91       	pop	r16
    3f38:	ff 91       	pop	r31
    3f3a:	ef 91       	pop	r30
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
    3f3c:	2f 5f       	subi	r18, 0xFF	; 255
    3f3e:	e2 2f       	mov	r30, r18
    3f40:	f0 e0       	ldi	r31, 0x00	; 0
    3f42:	e4 17       	cp	r30, r20
    3f44:	f5 07       	cpc	r31, r21
    3f46:	08 f4       	brcc	.+2      	; 0x3f4a <chb_eeprom_write+0xbc>
    3f48:	b8 cf       	rjmp	.-144    	; 0x3eba <chb_eeprom_write+0x2c>
    {
        chb_eep_write_byte(addr+i, buf[i]);
    }
}
    3f4a:	df 91       	pop	r29
    3f4c:	cf 91       	pop	r28
    3f4e:	1f 91       	pop	r17
    3f50:	0f 91       	pop	r16
    3f52:	08 95       	ret

00003f54 <chb_eeprom_read>:
/*!

*/
/**************************************************************************/
void chb_eeprom_read(U16 addr, U8 *buf, U16 size)
{
    3f54:	1f 93       	push	r17
    3f56:	cf 93       	push	r28
    3f58:	df 93       	push	r29
    3f5a:	9c 01       	movw	r18, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
    3f5c:	e0 ec       	ldi	r30, 0xC0	; 192
    3f5e:	f1 e0       	ldi	r31, 0x01	; 1
    3f60:	84 85       	ldd	r24, Z+12	; 0x0c
    3f62:	87 7f       	andi	r24, 0xF7	; 247
    3f64:	84 87       	std	Z+12, r24	; 0x0c

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    3f66:	41 15       	cp	r20, r1
    3f68:	51 05       	cpc	r21, r1
    3f6a:	41 f1       	breq	.+80     	; 0x3fbc <chb_eeprom_read+0x68>
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	c0 e0       	ldi	r28, 0x00	; 0
    NVM.ADDR0 = addr & 0xFF;
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    NVM.ADDR2 = 0x00;

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    3f72:	d6 e0       	ldi	r29, 0x06	; 6
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
    3f74:	db 01       	movw	r26, r22
    3f76:	a8 0f       	add	r26, r24
    3f78:	b9 1f       	adc	r27, r25
    3f7a:	82 0f       	add	r24, r18
    3f7c:	93 1f       	adc	r25, r19
*/
/**************************************************************************/
static U8 chb_eep_read_byte(U16 addr)
{
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3f7e:	17 85       	ldd	r17, Z+15	; 0x0f
    3f80:	11 23       	and	r17, r17
    3f82:	ec f3       	brlt	.-6      	; 0x3f7e <chb_eeprom_read+0x2a>

    /* Set address to read from. */
    NVM.ADDR0 = addr & 0xFF;
    3f84:	80 83       	st	Z, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    3f86:	89 2f       	mov	r24, r25
    3f88:	8f 71       	andi	r24, 0x1F	; 31
    3f8a:	81 83       	std	Z+1, r24	; 0x01
    NVM.ADDR2 = 0x00;
    3f8c:	12 82       	std	Z+2, r1	; 0x02

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    3f8e:	d2 87       	std	Z+10, r29	; 0x0a
    NVM_EXEC();
    3f90:	ef 93       	push	r30
    3f92:	ff 93       	push	r31
    3f94:	0f 93       	push	r16
    3f96:	2f 93       	push	r18
    3f98:	eb ec       	ldi	r30, 0xCB	; 203
    3f9a:	f1 e0       	ldi	r31, 0x01	; 1
    3f9c:	08 ed       	ldi	r16, 0xD8	; 216
    3f9e:	21 e0       	ldi	r18, 0x01	; 1
    3fa0:	04 bf       	out	0x34, r16	; 52
    3fa2:	20 83       	st	Z, r18
    3fa4:	2f 91       	pop	r18
    3fa6:	0f 91       	pop	r16
    3fa8:	ff 91       	pop	r31
    3faa:	ef 91       	pop	r30

    return NVM.DATA0;
    3fac:	84 81       	ldd	r24, Z+4	; 0x04
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
    3fae:	8c 93       	st	X, r24
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    3fb0:	cf 5f       	subi	r28, 0xFF	; 255
    3fb2:	8c 2f       	mov	r24, r28
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	84 17       	cp	r24, r20
    3fb8:	95 07       	cpc	r25, r21
    3fba:	e0 f2       	brcs	.-72     	; 0x3f74 <chb_eeprom_read+0x20>
    {
        buf[i] = chb_eep_read_byte(addr+i);
    }
}
    3fbc:	df 91       	pop	r29
    3fbe:	cf 91       	pop	r28
    3fc0:	1f 91       	pop	r17
    3fc2:	08 95       	ret

00003fc4 <chb_spi_init>:

void chb_spi_init()
{
    // configure the SPI slave_select, spi clk, and mosi pins as output. the miso pin
    // is cleared since its an input.
    CHB_SPI_DDIR |= (1<<CHB_SSPIN) | (1<<CHB_MOSI) | (1<<CHB_SCK);
    3fc4:	e0 e6       	ldi	r30, 0x60	; 96
    3fc6:	f6 e0       	ldi	r31, 0x06	; 6
    3fc8:	80 81       	ld	r24, Z
    3fca:	80 6b       	ori	r24, 0xB0	; 176
    3fcc:	80 83       	st	Z, r24
    CHB_SPI_PORT |= (1<<CHB_SSPIN);
    3fce:	e4 e6       	ldi	r30, 0x64	; 100
    3fd0:	f6 e0       	ldi	r31, 0x06	; 6
    3fd2:	80 81       	ld	r24, Z
    3fd4:	80 61       	ori	r24, 0x10	; 16
    3fd6:	80 83       	st	Z, r24

    // set to master mode
    // set the clock freq to fck/16
    CHB_CTRL |= (1<<SPI_MASTER_bp) | (1<<SPI_ENABLE_bp) | (1<<SPI_PRESCALER_gp);
    3fd8:	a0 ec       	ldi	r26, 0xC0	; 192
    3fda:	b9 e0       	ldi	r27, 0x09	; 9
    3fdc:	8c 91       	ld	r24, X
    3fde:	81 65       	ori	r24, 0x51	; 81
    3fe0:	8c 93       	st	X, r24

    // set the slave select to idle
    CHB_SPI_DISABLE();
    3fe2:	80 81       	ld	r24, Z
    3fe4:	80 61       	ori	r24, 0x10	; 16
    3fe6:	80 83       	st	Z, r24
}
    3fe8:	08 95       	ret

00003fea <SPID_write>:
    data is read byte val.
*/
/**************************************************************************/
uint8_t SPID_write(uint8_t byteToSend){
	uint8_t data;
	SPID.DATA = byteToSend;
    3fea:	e0 ec       	ldi	r30, 0xC0	; 192
    3fec:	f9 e0       	ldi	r31, 0x09	; 9
    3fee:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPID.STATUS & SPI_IF_bm)); //wait for byte to be sent
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	88 23       	and	r24, r24
    3ff4:	ec f7       	brge	.-6      	; 0x3ff0 <SPID_write+0x6>
	data = SPID.DATA; //read SPI data register to reset status flag
    3ff6:	e0 ec       	ldi	r30, 0xC0	; 192
    3ff8:	f9 e0       	ldi	r31, 0x09	; 9
    3ffa:	83 81       	ldd	r24, Z+3	; 0x03
	return data;
    3ffc:	08 95       	ret

00003ffe <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3ffe:	0f 93       	push	r16
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	0f 92       	push	r0
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    400a:	2f b7       	in	r18, 0x3f	; 63
    400c:	29 83       	std	Y+1, r18	; 0x01
    400e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    4010:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    4012:	fc 01       	movw	r30, r24
    4014:	08 ed       	ldi	r16, 0xD8	; 216
    4016:	04 bf       	out	0x34, r16	; 52
    4018:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	8f bf       	out	0x3f, r24	; 63
#endif
}
    401e:	0f 90       	pop	r0
    4020:	df 91       	pop	r29
    4022:	cf 91       	pop	r28
    4024:	0f 91       	pop	r16
    4026:	08 95       	ret

00004028 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    4028:	66 23       	and	r22, r22
    402a:	11 f0       	breq	.+4      	; 0x4030 <CLKSYS_XOSC_Config+0x8>
    402c:	90 e2       	ldi	r25, 0x20	; 32
    402e:	01 c0       	rjmp	.+2      	; 0x4032 <CLKSYS_XOSC_Config+0xa>
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	84 2b       	or	r24, r20
    4034:	89 2b       	or	r24, r25
    4036:	e0 e5       	ldi	r30, 0x50	; 80
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    403c:	08 95       	ret

0000403e <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
    403e:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    4040:	86 2b       	or	r24, r22
    4042:	e0 e5       	ldi	r30, 0x50	; 80
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	85 83       	std	Z+5, r24	; 0x05
}
    4048:	08 95       	ret

0000404a <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    404a:	e0 e5       	ldi	r30, 0x50	; 80
    404c:	f0 e0       	ldi	r31, 0x00	; 0
    404e:	90 81       	ld	r25, Z
    4050:	28 2f       	mov	r18, r24
    4052:	20 95       	com	r18
    4054:	92 23       	and	r25, r18
    4056:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    4058:	90 81       	ld	r25, Z
	return clkEnabled;
}
    405a:	89 23       	and	r24, r25
    405c:	08 95       	ret

0000405e <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    405e:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
    4060:	81 e4       	ldi	r24, 0x41	; 65
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <CCPWrite>
}
    4068:	08 95       	ret

0000406a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    4072:	c0 e4       	ldi	r28, 0x40	; 64
    4074:	d0 e0       	ldi	r29, 0x00	; 0
    4076:	68 81       	ld	r22, Y
    4078:	68 7f       	andi	r22, 0xF8	; 248
    407a:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    407c:	80 e4       	ldi	r24, 0x40	; 64
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    4084:	88 81       	ld	r24, Y
	return clkCtrl;
}
    4086:	81 23       	and	r24, r17
    4088:	df 91       	pop	r29
    408a:	cf 91       	pop	r28
    408c:	1f 91       	pop	r17
    408e:	08 95       	ret

00004090 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    4090:	e0 e4       	ldi	r30, 0x40	; 64
    4092:	f0 e0       	ldi	r31, 0x00	; 0
    4094:	93 81       	ldd	r25, Z+3	; 0x03
    4096:	91 7f       	andi	r25, 0xF1	; 241
    4098:	91 60       	ori	r25, 0x01	; 1
    409a:	89 2b       	or	r24, r25
    409c:	83 83       	std	Z+3, r24	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    409e:	08 95       	ret

000040a0 <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    40a0:	e0 e5       	ldi	r30, 0x50	; 80
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	26 81       	ldd	r18, Z+6	; 0x06
    40a6:	98 2f       	mov	r25, r24
    40a8:	38 2f       	mov	r19, r24
    40aa:	30 95       	com	r19
    40ac:	23 23       	and	r18, r19
    40ae:	66 23       	and	r22, r22
    40b0:	09 f4       	brne	.+2      	; 0x40b4 <CLKSYS_AutoCalibration_Enable+0x14>
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	92 2b       	or	r25, r18
    40b6:	e0 e5       	ldi	r30, 0x50	; 80
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    40bc:	81 30       	cpi	r24, 0x01	; 1
    40be:	31 f4       	brne	.+12     	; 0x40cc <CLKSYS_AutoCalibration_Enable+0x2c>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    40c0:	e8 e6       	ldi	r30, 0x68	; 104
    40c2:	f0 e0       	ldi	r31, 0x00	; 0
    40c4:	80 81       	ld	r24, Z
    40c6:	81 60       	ori	r24, 0x01	; 1
    40c8:	80 83       	st	Z, r24
    40ca:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    40cc:	82 30       	cpi	r24, 0x02	; 2
    40ce:	29 f4       	brne	.+10     	; 0x40da <CLKSYS_AutoCalibration_Enable+0x3a>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    40d0:	e0 e6       	ldi	r30, 0x60	; 96
    40d2:	f0 e0       	ldi	r31, 0x00	; 0
    40d4:	80 81       	ld	r24, Z
    40d6:	81 60       	ori	r24, 0x01	; 1
    40d8:	80 83       	st	Z, r24
    40da:	08 95       	ret

000040dc <CLKSYS_XOSC_FailureDetection_Enable>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
    40dc:	83 e5       	ldi	r24, 0x53	; 83
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	63 e0       	ldi	r22, 0x03	; 3
    40e2:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <CCPWrite>
}
    40e6:	08 95       	ret

000040e8 <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
    40e8:	82 e4       	ldi	r24, 0x42	; 66
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	61 e0       	ldi	r22, 0x01	; 1
    40ee:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <CCPWrite>
}
    40f2:	08 95       	ret

000040f4 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    40f4:	cf 92       	push	r12
    40f6:	df 92       	push	r13
    40f8:	ef 92       	push	r14
    40fa:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    40fc:	20 91 6a 50 	lds	r18, 0x506A
    4100:	30 91 6b 50 	lds	r19, 0x506B
    4104:	c0 90 4e 40 	lds	r12, 0x404E
    4108:	d0 90 4f 40 	lds	r13, 0x404F
    410c:	e0 90 50 40 	lds	r14, 0x4050
    4110:	f0 90 51 40 	lds	r15, 0x4051
    4114:	62 50       	subi	r22, 0x02	; 2
    4116:	70 40       	sbci	r23, 0x00	; 0
    4118:	80 40       	sbci	r24, 0x00	; 0
    411a:	90 40       	sbci	r25, 0x00	; 0
    411c:	40 e0       	ldi	r20, 0x00	; 0
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	c8 0e       	add	r12, r24
    412a:	d9 1e       	adc	r13, r25
    412c:	ea 1e       	adc	r14, r26
    412e:	fb 1e       	adc	r15, r27
}
    4130:	6c 2d       	mov	r22, r12
    4132:	7d 2d       	mov	r23, r13
    4134:	8e 2d       	mov	r24, r14
    4136:	9f 2d       	mov	r25, r15
    4138:	ff 90       	pop	r15
    413a:	ef 90       	pop	r14
    413c:	df 90       	pop	r13
    413e:	cf 90       	pop	r12
    4140:	08 95       	ret

00004142 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    4142:	3f 92       	push	r3
    4144:	4f 92       	push	r4
    4146:	5f 92       	push	r5
    4148:	6f 92       	push	r6
    414a:	7f 92       	push	r7
    414c:	8f 92       	push	r8
    414e:	9f 92       	push	r9
    4150:	af 92       	push	r10
    4152:	bf 92       	push	r11
    4154:	cf 92       	push	r12
    4156:	df 92       	push	r13
    4158:	ef 92       	push	r14
    415a:	ff 92       	push	r15
    415c:	0f 93       	push	r16
    415e:	1f 93       	push	r17
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	00 d0       	rcall	.+0      	; 0x4166 <getSetNextCluster+0x24>
    4166:	0f 92       	push	r0
    4168:	cd b7       	in	r28, 0x3d	; 61
    416a:	de b7       	in	r29, 0x3e	; 62
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	34 2e       	mov	r3, r20
    4172:	09 83       	std	Y+1, r16	; 0x01
    4174:	1a 83       	std	Y+2, r17	; 0x02
    4176:	2b 83       	std	Y+3, r18	; 0x03
    4178:	3c 83       	std	Y+4, r19	; 0x04
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
//unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    417a:	80 90 70 50 	lds	r8, 0x5070
    417e:	90 90 71 50 	lds	r9, 0x5071
    4182:	2c 01       	movw	r4, r24
    4184:	3d 01       	movw	r6, r26
    4186:	44 0c       	add	r4, r4
    4188:	55 1c       	adc	r5, r5
    418a:	66 1c       	adc	r6, r6
    418c:	77 1c       	adc	r7, r7
    418e:	44 0c       	add	r4, r4
    4190:	55 1c       	adc	r5, r5
    4192:	66 1c       	adc	r6, r6
    4194:	77 1c       	adc	r7, r7
    4196:	20 91 56 40 	lds	r18, 0x4056
    419a:	30 91 57 40 	lds	r19, 0x4057
    419e:	aa 24       	eor	r10, r10
    41a0:	bb 24       	eor	r11, r11
    41a2:	80 91 6c 50 	lds	r24, 0x506C
    41a6:	90 91 6d 50 	lds	r25, 0x506D
    41aa:	a0 91 6e 50 	lds	r26, 0x506E
    41ae:	b0 91 6f 50 	lds	r27, 0x506F
    41b2:	88 0e       	add	r8, r24
    41b4:	99 1e       	adc	r9, r25
    41b6:	aa 1e       	adc	r10, r26
    41b8:	bb 1e       	adc	r11, r27
    41ba:	40 e0       	ldi	r20, 0x00	; 0
    41bc:	50 e0       	ldi	r21, 0x00	; 0
    41be:	c3 01       	movw	r24, r6
    41c0:	b2 01       	movw	r22, r4
    41c2:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    41c6:	69 01       	movw	r12, r18
    41c8:	7a 01       	movw	r14, r20
    41ca:	c8 0c       	add	r12, r8
    41cc:	d9 1c       	adc	r13, r9
    41ce:	ea 1c       	adc	r14, r10
    41d0:	fb 1c       	adc	r15, r11

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    41d2:	00 91 56 40 	lds	r16, 0x4056
    41d6:	10 91 57 40 	lds	r17, 0x4057

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);
    41da:	c7 01       	movw	r24, r14
    41dc:	b6 01       	movw	r22, r12
    41de:	49 e4       	ldi	r20, 0x49	; 73
    41e0:	5e e3       	ldi	r21, 0x3E	; 62
    41e2:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    41e6:	98 01       	movw	r18, r16
    41e8:	40 e0       	ldi	r20, 0x00	; 0
    41ea:	50 e0       	ldi	r21, 0x00	; 0
    41ec:	c3 01       	movw	r24, r6
    41ee:	b2 01       	movw	r22, r4
    41f0:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &SDBuffer[FATEntryOffset];
    41f4:	67 5b       	subi	r22, 0xB7	; 183
    41f6:	71 4c       	sbci	r23, 0xC1	; 193

if(get_set == GET)
    41f8:	33 20       	and	r3, r3
    41fa:	41 f4       	brne	.+16     	; 0x420c <getSetNextCluster+0xca>
  return ((*FATEntryValue) & 0x0fffffff);
    41fc:	db 01       	movw	r26, r22
    41fe:	0d 91       	ld	r16, X+
    4200:	1d 91       	ld	r17, X+
    4202:	2d 91       	ld	r18, X+
    4204:	3c 91       	ld	r19, X
    4206:	13 97       	sbiw	r26, 0x03	; 3
    4208:	3f 70       	andi	r19, 0x0F	; 15
    420a:	14 c0       	rjmp	.+40     	; 0x4234 <getSetNextCluster+0xf2>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	9a 81       	ldd	r25, Y+2	; 0x02
    4210:	ab 81       	ldd	r26, Y+3	; 0x03
    4212:	bc 81       	ldd	r27, Y+4	; 0x04
    4214:	fb 01       	movw	r30, r22
    4216:	80 83       	st	Z, r24
    4218:	91 83       	std	Z+1, r25	; 0x01
    421a:	a2 83       	std	Z+2, r26	; 0x02
    421c:	b3 83       	std	Z+3, r27	; 0x03

SD_write_block(FATEntrySector,SDBuffer,512);
    421e:	c7 01       	movw	r24, r14
    4220:	b6 01       	movw	r22, r12
    4222:	49 e4       	ldi	r20, 0x49	; 73
    4224:	5e e3       	ldi	r21, 0x3E	; 62
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	32 e0       	ldi	r19, 0x02	; 2
    422a:	0e 94 cb 2a 	call	0x5596	; 0x5596 <SD_write_block>

return (0);
    422e:	00 e0       	ldi	r16, 0x00	; 0
    4230:	10 e0       	ldi	r17, 0x00	; 0
    4232:	98 01       	movw	r18, r16
}
    4234:	60 2f       	mov	r22, r16
    4236:	71 2f       	mov	r23, r17
    4238:	82 2f       	mov	r24, r18
    423a:	93 2f       	mov	r25, r19
    423c:	24 96       	adiw	r28, 0x04	; 4
    423e:	cd bf       	out	0x3d, r28	; 61
    4240:	de bf       	out	0x3e, r29	; 62
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	1f 91       	pop	r17
    4248:	0f 91       	pop	r16
    424a:	ff 90       	pop	r15
    424c:	ef 90       	pop	r14
    424e:	df 90       	pop	r13
    4250:	cf 90       	pop	r12
    4252:	bf 90       	pop	r11
    4254:	af 90       	pop	r10
    4256:	9f 90       	pop	r9
    4258:	8f 90       	pop	r8
    425a:	7f 90       	pop	r7
    425c:	6f 90       	pop	r6
    425e:	5f 90       	pop	r5
    4260:	4f 90       	pop	r4
    4262:	3f 90       	pop	r3
    4264:	08 95       	ret

00004266 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    4266:	cf 92       	push	r12
    4268:	df 92       	push	r13
    426a:	ef 92       	push	r14
    426c:	ff 92       	push	r15
    426e:	0f 93       	push	r16
    4270:	1f 93       	push	r17
    4272:	cf 93       	push	r28
    4274:	c8 2f       	mov	r28, r24
    4276:	06 2f       	mov	r16, r22
    4278:	69 01       	movw	r12, r18
    427a:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;

SD_read_block(unusedSectors + 1,SDBuffer);
    427c:	80 91 6c 50 	lds	r24, 0x506C
    4280:	90 91 6d 50 	lds	r25, 0x506D
    4284:	a0 91 6e 50 	lds	r26, 0x506E
    4288:	b0 91 6f 50 	lds	r27, 0x506F
    428c:	bc 01       	movw	r22, r24
    428e:	cd 01       	movw	r24, r26
    4290:	6f 5f       	subi	r22, 0xFF	; 255
    4292:	7f 4f       	sbci	r23, 0xFF	; 255
    4294:	8f 4f       	sbci	r24, 0xFF	; 255
    4296:	9f 4f       	sbci	r25, 0xFF	; 255
    4298:	49 e4       	ldi	r20, 0x49	; 73
    429a:	5e e3       	ldi	r21, 0x3E	; 62
    429c:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    42a0:	80 91 49 3e 	lds	r24, 0x3E49
    42a4:	90 91 4a 3e 	lds	r25, 0x3E4A
    42a8:	a0 91 4b 3e 	lds	r26, 0x3E4B
    42ac:	b0 91 4c 3e 	lds	r27, 0x3E4C
    42b0:	82 35       	cpi	r24, 0x52	; 82
    42b2:	22 e5       	ldi	r18, 0x52	; 82
    42b4:	92 07       	cpc	r25, r18
    42b6:	21 e6       	ldi	r18, 0x61	; 97
    42b8:	a2 07       	cpc	r26, r18
    42ba:	21 e4       	ldi	r18, 0x41	; 65
    42bc:	b2 07       	cpc	r27, r18
    42be:	09 f0       	breq	.+2      	; 0x42c2 <getSetFreeCluster+0x5c>
    42c0:	63 c0       	rjmp	.+198    	; 0x4388 <getSetFreeCluster+0x122>
    42c2:	80 91 2d 40 	lds	r24, 0x402D
    42c6:	90 91 2e 40 	lds	r25, 0x402E
    42ca:	a0 91 2f 40 	lds	r26, 0x402F
    42ce:	b0 91 30 40 	lds	r27, 0x4030
    42d2:	82 37       	cpi	r24, 0x72	; 114
    42d4:	22 e7       	ldi	r18, 0x72	; 114
    42d6:	92 07       	cpc	r25, r18
    42d8:	21 e4       	ldi	r18, 0x41	; 65
    42da:	a2 07       	cpc	r26, r18
    42dc:	21 e6       	ldi	r18, 0x61	; 97
    42de:	b2 07       	cpc	r27, r18
    42e0:	09 f0       	breq	.+2      	; 0x42e4 <getSetFreeCluster+0x7e>
    42e2:	56 c0       	rjmp	.+172    	; 0x4390 <getSetFreeCluster+0x12a>
    42e4:	80 91 45 40 	lds	r24, 0x4045
    42e8:	90 91 46 40 	lds	r25, 0x4046
    42ec:	a0 91 47 40 	lds	r26, 0x4047
    42f0:	b0 91 48 40 	lds	r27, 0x4048
    42f4:	80 30       	cpi	r24, 0x00	; 0
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	92 07       	cpc	r25, r18
    42fa:	25 e5       	ldi	r18, 0x55	; 85
    42fc:	a2 07       	cpc	r26, r18
    42fe:	2a ea       	ldi	r18, 0xAA	; 170
    4300:	b2 07       	cpc	r27, r18
    4302:	09 f0       	breq	.+2      	; 0x4306 <getSetFreeCluster+0xa0>
    4304:	49 c0       	rjmp	.+146    	; 0x4398 <getSetFreeCluster+0x132>
  return 0xffffffff;

 if(get_set == GET)
    4306:	00 23       	and	r16, r16
    4308:	a1 f4       	brne	.+40     	; 0x4332 <getSetFreeCluster+0xcc>
 {
   if(totOrNext == TOTAL_FREE)
    430a:	c1 30       	cpi	r28, 0x01	; 1
    430c:	49 f4       	brne	.+18     	; 0x4320 <getSetFreeCluster+0xba>
      return(FS->freeClusterCount);
    430e:	00 91 31 40 	lds	r16, 0x4031
    4312:	10 91 32 40 	lds	r17, 0x4032
    4316:	20 91 33 40 	lds	r18, 0x4033
    431a:	30 91 34 40 	lds	r19, 0x4034
    431e:	3f c0       	rjmp	.+126    	; 0x439e <getSetFreeCluster+0x138>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    4320:	00 91 35 40 	lds	r16, 0x4035
    4324:	10 91 36 40 	lds	r17, 0x4036
    4328:	20 91 37 40 	lds	r18, 0x4037
    432c:	30 91 38 40 	lds	r19, 0x4038
    4330:	36 c0       	rjmp	.+108    	; 0x439e <getSetFreeCluster+0x138>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    4332:	c1 30       	cpi	r28, 0x01	; 1
    4334:	49 f4       	brne	.+18     	; 0x4348 <getSetFreeCluster+0xe2>
      FS->freeClusterCount = FSEntry;
    4336:	c0 92 31 40 	sts	0x4031, r12
    433a:	d0 92 32 40 	sts	0x4032, r13
    433e:	e0 92 33 40 	sts	0x4033, r14
    4342:	f0 92 34 40 	sts	0x4034, r15
    4346:	08 c0       	rjmp	.+16     	; 0x4358 <getSetFreeCluster+0xf2>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    4348:	c0 92 35 40 	sts	0x4035, r12
    434c:	d0 92 36 40 	sts	0x4036, r13
    4350:	e0 92 37 40 	sts	0x4037, r14
    4354:	f0 92 38 40 	sts	0x4038, r15
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
    4358:	80 91 6c 50 	lds	r24, 0x506C
    435c:	90 91 6d 50 	lds	r25, 0x506D
    4360:	a0 91 6e 50 	lds	r26, 0x506E
    4364:	b0 91 6f 50 	lds	r27, 0x506F
    4368:	bc 01       	movw	r22, r24
    436a:	cd 01       	movw	r24, r26
    436c:	6f 5f       	subi	r22, 0xFF	; 255
    436e:	7f 4f       	sbci	r23, 0xFF	; 255
    4370:	8f 4f       	sbci	r24, 0xFF	; 255
    4372:	9f 4f       	sbci	r25, 0xFF	; 255
    4374:	49 e4       	ldi	r20, 0x49	; 73
    4376:	5e e3       	ldi	r21, 0x3E	; 62
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	32 e0       	ldi	r19, 0x02	; 2
    437c:	0e 94 cb 2a 	call	0x5596	; 0x5596 <SD_write_block>
 }
 return 0xffffffff;
    4380:	0f ef       	ldi	r16, 0xFF	; 255
    4382:	1f ef       	ldi	r17, 0xFF	; 255
    4384:	98 01       	movw	r18, r16
    4386:	0b c0       	rjmp	.+22     	; 0x439e <getSetFreeCluster+0x138>
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;

SD_read_block(unusedSectors + 1,SDBuffer);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
    4388:	0f ef       	ldi	r16, 0xFF	; 255
    438a:	1f ef       	ldi	r17, 0xFF	; 255
    438c:	98 01       	movw	r18, r16
    438e:	07 c0       	rjmp	.+14     	; 0x439e <getSetFreeCluster+0x138>
    4390:	0f ef       	ldi	r16, 0xFF	; 255
    4392:	1f ef       	ldi	r17, 0xFF	; 255
    4394:	98 01       	movw	r18, r16
    4396:	03 c0       	rjmp	.+6      	; 0x439e <getSetFreeCluster+0x138>
    4398:	0f ef       	ldi	r16, 0xFF	; 255
    439a:	1f ef       	ldi	r17, 0xFF	; 255
    439c:	98 01       	movw	r18, r16
	  FS->nextFreeCluster = FSEntry;
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
 }
 return 0xffffffff;
}
    439e:	60 2f       	mov	r22, r16
    43a0:	71 2f       	mov	r23, r17
    43a2:	82 2f       	mov	r24, r18
    43a4:	93 2f       	mov	r25, r19
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	ff 90       	pop	r15
    43ae:	ef 90       	pop	r14
    43b0:	df 90       	pop	r13
    43b2:	cf 90       	pop	r12
    43b4:	08 95       	ret

000043b6 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    43b6:	ef 92       	push	r14
    43b8:	ff 92       	push	r15
    43ba:	0f 93       	push	r16
    43bc:	1f 93       	push	r17
    43be:	cf 93       	push	r28
    43c0:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    43c2:	10 92 6c 50 	sts	0x506C, r1
    43c6:	10 92 6d 50 	sts	0x506D, r1
    43ca:	10 92 6e 50 	sts	0x506E, r1
    43ce:	10 92 6f 50 	sts	0x506F, r1

SD_read_block(0,SDBuffer);
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	cb 01       	movw	r24, r22
    43d8:	49 e4       	ldi	r20, 0x49	; 73
    43da:	5e e3       	ldi	r21, 0x3E	; 62
    43dc:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>
bpb = (struct BS_Structure *)SDBuffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    43e0:	80 91 49 3e 	lds	r24, 0x3E49
    43e4:	89 3e       	cpi	r24, 0xE9	; 233
    43e6:	31 f1       	breq	.+76     	; 0x4434 <getBootSectorData+0x7e>
    43e8:	8b 3e       	cpi	r24, 0xEB	; 235
    43ea:	21 f1       	breq	.+72     	; 0x4434 <getBootSectorData+0x7e>
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    43ec:	80 91 47 40 	lds	r24, 0x4047
    43f0:	90 91 48 40 	lds	r25, 0x4048
    43f4:	2a ea       	ldi	r18, 0xAA	; 170
    43f6:	85 35       	cpi	r24, 0x55	; 85
    43f8:	92 07       	cpc	r25, r18
    43fa:	09 f0       	breq	.+2      	; 0x43fe <getBootSectorData+0x48>
    43fc:	b7 c0       	rjmp	.+366    	; 0x456c <getBootSectorData+0x1b6>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    43fe:	60 91 0f 40 	lds	r22, 0x400F
    4402:	70 91 10 40 	lds	r23, 0x4010
    4406:	80 91 11 40 	lds	r24, 0x4011
    440a:	90 91 12 40 	lds	r25, 0x4012
    440e:	60 93 6c 50 	sts	0x506C, r22
    4412:	70 93 6d 50 	sts	0x506D, r23
    4416:	80 93 6e 50 	sts	0x506E, r24
    441a:	90 93 6f 50 	sts	0x506F, r25
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
    441e:	49 e4       	ldi	r20, 0x49	; 73
    4420:	5e e3       	ldi	r21, 0x3E	; 62
    4422:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    4426:	80 91 49 3e 	lds	r24, 0x3E49
    442a:	89 3e       	cpi	r24, 0xE9	; 233
    442c:	19 f0       	breq	.+6      	; 0x4434 <getBootSectorData+0x7e>
    442e:	8b 3e       	cpi	r24, 0xEB	; 235
    4430:	09 f0       	breq	.+2      	; 0x4434 <getBootSectorData+0x7e>
    4432:	9e c0       	rjmp	.+316    	; 0x4570 <getBootSectorData+0x1ba>
}

bytesPerSector = bpb->bytesPerSector;
    4434:	80 91 54 3e 	lds	r24, 0x3E54
    4438:	90 91 55 3e 	lds	r25, 0x3E55
    443c:	80 93 56 40 	sts	0x4056, r24
    4440:	90 93 57 40 	sts	0x4057, r25
sectorPerCluster = bpb->sectorPerCluster;
    4444:	80 91 56 3e 	lds	r24, 0x3E56
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	80 93 6a 50 	sts	0x506A, r24
    444e:	90 93 6b 50 	sts	0x506B, r25
reservedSectorCount = bpb->reservedSectorCount;
    4452:	e0 90 57 3e 	lds	r14, 0x3E57
    4456:	f0 90 58 3e 	lds	r15, 0x3E58
    445a:	e0 92 70 50 	sts	0x5070, r14
    445e:	f0 92 71 50 	sts	0x5071, r15
rootCluster = bpb->rootCluster;
    4462:	80 91 75 3e 	lds	r24, 0x3E75
    4466:	90 91 76 3e 	lds	r25, 0x3E76
    446a:	a0 91 77 3e 	lds	r26, 0x3E77
    446e:	b0 91 78 3e 	lds	r27, 0x3E78
    4472:	80 93 5e 40 	sts	0x405E, r24
    4476:	90 93 5f 40 	sts	0x405F, r25
    447a:	a0 93 60 40 	sts	0x4060, r26
    447e:	b0 93 61 40 	sts	0x4061, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    4482:	c0 91 70 50 	lds	r28, 0x5070
    4486:	d0 91 71 50 	lds	r29, 0x5071
    448a:	60 91 59 3e 	lds	r22, 0x3E59
    448e:	70 e0       	ldi	r23, 0x00	; 0
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	20 91 6d 3e 	lds	r18, 0x3E6D
    4498:	30 91 6e 3e 	lds	r19, 0x3E6E
    449c:	40 91 6f 3e 	lds	r20, 0x3E6F
    44a0:	50 91 70 3e 	lds	r21, 0x3E70
    44a4:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    44a8:	8b 01       	movw	r16, r22
    44aa:	9c 01       	movw	r18, r24
    44ac:	ae 01       	movw	r20, r28
    44ae:	60 e0       	ldi	r22, 0x00	; 0
    44b0:	70 e0       	ldi	r23, 0x00	; 0
    44b2:	80 91 65 3e 	lds	r24, 0x3E65
    44b6:	90 91 66 3e 	lds	r25, 0x3E66
    44ba:	a0 91 67 3e 	lds	r26, 0x3E67
    44be:	b0 91 68 3e 	lds	r27, 0x3E68
    44c2:	84 0f       	add	r24, r20
    44c4:	95 1f       	adc	r25, r21
    44c6:	a6 1f       	adc	r26, r22
    44c8:	b7 1f       	adc	r27, r23
    44ca:	80 0f       	add	r24, r16
    44cc:	91 1f       	adc	r25, r17
    44ce:	a2 1f       	adc	r26, r18
    44d0:	b3 1f       	adc	r27, r19
    44d2:	80 93 4e 40 	sts	0x404E, r24
    44d6:	90 93 4f 40 	sts	0x404F, r25
    44da:	a0 93 50 40 	sts	0x4050, r26
    44de:	b0 93 51 40 	sts	0x4051, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    44e2:	e0 91 6a 50 	lds	r30, 0x506A
    44e6:	f0 91 6b 50 	lds	r31, 0x506B
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
    44ea:	c7 01       	movw	r24, r14
    44ec:	a0 e0       	ldi	r26, 0x00	; 0
    44ee:	b0 e0       	ldi	r27, 0x00	; 0
    44f0:	40 91 69 3e 	lds	r20, 0x3E69
    44f4:	50 91 6a 3e 	lds	r21, 0x3E6A
    44f8:	60 91 6b 3e 	lds	r22, 0x3E6B
    44fc:	70 91 6c 3e 	lds	r23, 0x3E6C
    4500:	48 1b       	sub	r20, r24
    4502:	59 0b       	sbc	r21, r25
    4504:	6a 0b       	sbc	r22, r26
    4506:	7b 0b       	sbc	r23, r27
sectorPerCluster = bpb->sectorPerCluster;
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
    4508:	cb 01       	movw	r24, r22
    450a:	ba 01       	movw	r22, r20
    450c:	60 1b       	sub	r22, r16
    450e:	71 0b       	sbc	r23, r17
    4510:	82 0b       	sbc	r24, r18
    4512:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    4514:	9f 01       	movw	r18, r30
    4516:	40 e0       	ldi	r20, 0x00	; 0
    4518:	50 e0       	ldi	r21, 0x00	; 0
    451a:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    451e:	20 93 59 40 	sts	0x4059, r18
    4522:	30 93 5a 40 	sts	0x405A, r19
    4526:	40 93 5b 40 	sts	0x405B, r20
    452a:	50 93 5c 40 	sts	0x405C, r21


if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	60 e0       	ldi	r22, 0x00	; 0
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	a9 01       	movw	r20, r18
    4538:	0e 94 33 21 	call	0x4266	; 0x4266 <getSetFreeCluster>
    453c:	ab 01       	movw	r20, r22
    453e:	bc 01       	movw	r22, r24
    4540:	80 91 59 40 	lds	r24, 0x4059
    4544:	90 91 5a 40 	lds	r25, 0x405A
    4548:	a0 91 5b 40 	lds	r26, 0x405B
    454c:	b0 91 5c 40 	lds	r27, 0x405C
    4550:	84 17       	cp	r24, r20
    4552:	95 07       	cpc	r25, r21
    4554:	a6 07       	cpc	r26, r22
    4556:	b7 07       	cpc	r27, r23
    4558:	20 f4       	brcc	.+8      	; 0x4562 <getBootSectorData+0x1ac>
     freeClusterCountUpdated = 0;
    455a:	10 92 a2 50 	sts	0x50A2, r1
else
	 freeClusterCountUpdated = 1;
return 0;
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	08 c0       	rjmp	.+16     	; 0x4572 <getBootSectorData+0x1bc>


if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	80 93 a2 50 	sts	0x50A2, r24
return 0;
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	03 c0       	rjmp	.+6      	; 0x4572 <getBootSectorData+0x1bc>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	01 c0       	rjmp	.+2      	; 0x4572 <getBootSectorData+0x1bc>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    4570:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
    4572:	df 91       	pop	r29
    4574:	cf 91       	pop	r28
    4576:	1f 91       	pop	r17
    4578:	0f 91       	pop	r16
    457a:	ff 90       	pop	r15
    457c:	ef 90       	pop	r14
    457e:	08 95       	ret

00004580 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    4580:	0f 93       	push	r16
    4582:	1f 93       	push	r17
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
    458c:	2b 97       	sbiw	r28, 0x0b	; 11
    458e:	cd bf       	out	0x3d, r28	; 61
    4590:	de bf       	out	0x3e, r29	; 62
    4592:	78 2f       	mov	r23, r24
    4594:	69 2f       	mov	r22, r25
unsigned char fileNameFAT[11];
unsigned char j, k;

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
    4596:	e8 2f       	mov	r30, r24
    4598:	f9 2f       	mov	r31, r25
    459a:	df 01       	movw	r26, r30
    459c:	0d 90       	ld	r0, X+
    459e:	00 20       	and	r0, r0
    45a0:	e9 f7       	brne	.-6      	; 0x459c <convertFileName+0x1c>
    45a2:	11 97       	sbiw	r26, 0x01	; 1
    45a4:	ae 1b       	sub	r26, r30
    45a6:	bf 0b       	sbc	r27, r31
    45a8:	a0 31       	cpi	r26, 0x10	; 16
    45aa:	b1 05       	cpc	r27, r1
    45ac:	08 f0       	brcs	.+2      	; 0x45b0 <convertFileName+0x30>
    45ae:	9c c0       	rjmp	.+312    	; 0x46e8 <convertFileName+0x168>
    45b0:	28 2f       	mov	r18, r24
    45b2:	39 2f       	mov	r19, r25
    45b4:	02 e9       	ldi	r16, 0x92	; 146
    45b6:	10 e5       	ldi	r17, 0x50	; 80
    45b8:	a8 01       	movw	r20, r16
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	07 c0       	rjmp	.+14     	; 0x45ce <convertFileName+0x4e>
int i=0;
for(; i < strlen((const char*)fileName); i++){
	Filename[i] = fileName[i];
    45c0:	d9 01       	movw	r26, r18
    45c2:	ed 91       	ld	r30, X+
    45c4:	9d 01       	movw	r18, r26
    45c6:	da 01       	movw	r26, r20
    45c8:	ed 93       	st	X+, r30
    45ca:	ad 01       	movw	r20, r26

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
int i=0;
for(; i < strlen((const char*)fileName); i++){
    45cc:	01 96       	adiw	r24, 0x01	; 1
    45ce:	a7 2f       	mov	r26, r23
    45d0:	b6 2f       	mov	r27, r22
    45d2:	fd 01       	movw	r30, r26
    45d4:	01 90       	ld	r0, Z+
    45d6:	00 20       	and	r0, r0
    45d8:	e9 f7       	brne	.-6      	; 0x45d4 <convertFileName+0x54>
    45da:	31 97       	sbiw	r30, 0x01	; 1
    45dc:	ea 1b       	sub	r30, r26
    45de:	fb 0b       	sbc	r31, r27
    45e0:	8e 17       	cp	r24, r30
    45e2:	9f 07       	cpc	r25, r31
    45e4:	68 f3       	brcs	.-38     	; 0x45c0 <convertFileName+0x40>
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';
    45e6:	8f 30       	cpi	r24, 0x0F	; 15
    45e8:	91 05       	cpc	r25, r1
    45ea:	54 f4       	brge	.+20     	; 0x4600 <convertFileName+0x80>
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    45ec:	fc 01       	movw	r30, r24
    45ee:	ee 56       	subi	r30, 0x6E	; 110
    45f0:	ff 4a       	sbci	r31, 0xAF	; 175
    45f2:	81 ea       	ldi	r24, 0xA1	; 161
    45f4:	90 e5       	ldi	r25, 0x50	; 80
if(strlen((const char*)fileName) > 15) return 1;
int i=0;
for(; i < strlen((const char*)fileName); i++){
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';
    45f6:	20 e2       	ldi	r18, 0x20	; 32
    45f8:	21 93       	st	Z+, r18
    45fa:	e8 17       	cp	r30, r24
    45fc:	f9 07       	cpc	r31, r25
    45fe:	e1 f7       	brne	.-8      	; 0x45f8 <convertFileName+0x78>


for(j=0; j<12; j++)
if(Filename[j] == '.') break;
    4600:	80 91 92 50 	lds	r24, 0x5092
    4604:	8e 32       	cpi	r24, 0x2E	; 46
    4606:	91 f0       	breq	.+36     	; 0x462c <convertFileName+0xac>
    4608:	e3 e9       	ldi	r30, 0x93	; 147
    460a:	f0 e5       	ldi	r31, 0x50	; 80
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
    460c:	21 e0       	ldi	r18, 0x01	; 1
if(Filename[j] == '.') break;
    460e:	81 91       	ld	r24, Z+
    4610:	8e 32       	cpi	r24, 0x2E	; 46
    4612:	21 f0       	breq	.+8      	; 0x461c <convertFileName+0x9c>
	Filename[i] = fileName[i];
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
    4614:	2f 5f       	subi	r18, 0xFF	; 255
    4616:	2c 30       	cpi	r18, 0x0C	; 12
    4618:	d1 f7       	brne	.-12     	; 0x460e <convertFileName+0x8e>
    461a:	05 c0       	rjmp	.+10     	; 0x4626 <convertFileName+0xa6>
if(Filename[j] == '.') break;

if(j>8 && j<12) {//Invalid fileName
    461c:	82 2f       	mov	r24, r18
    461e:	89 50       	subi	r24, 0x09	; 9
    4620:	83 30       	cpi	r24, 0x03	; 3
    4622:	08 f4       	brcc	.+2      	; 0x4626 <convertFileName+0xa6>
    4624:	63 c0       	rjmp	.+198    	; 0x46ec <convertFileName+0x16c>
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    4626:	22 23       	and	r18, r18
    4628:	29 f4       	brne	.+10     	; 0x4634 <convertFileName+0xb4>
    462a:	01 c0       	rjmp	.+2      	; 0x462e <convertFileName+0xae>
}
for(; i < 15; i++) Filename[i] = ' ';


for(j=0; j<12; j++)
if(Filename[j] == '.') break;
    462c:	20 e0       	ldi	r18, 0x00	; 0
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    462e:	82 2f       	mov	r24, r18

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    4630:	90 e2       	ldi	r25, 0x20	; 32
    4632:	10 c0       	rjmp	.+32     	; 0x4654 <convertFileName+0xd4>

if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    4634:	de 01       	movw	r26, r28
    4636:	11 96       	adiw	r26, 0x01	; 1
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    4638:	82 2f       	mov	r24, r18
    463a:	81 50       	subi	r24, 0x01	; 1
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	8d 56       	subi	r24, 0x6D	; 109
    4640:	9f 4a       	sbci	r25, 0xAF	; 175
    4642:	f8 01       	movw	r30, r16
if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];
    4644:	31 91       	ld	r19, Z+
    4646:	3d 93       	st	X+, r19

if(j>8 && j<12) {//Invalid fileName
	return 1;}
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
    4648:	e8 17       	cp	r30, r24
    464a:	f9 07       	cpc	r31, r25
    464c:	d9 f7       	brne	.-10     	; 0x4644 <convertFileName+0xc4>
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    464e:	28 30       	cpi	r18, 0x08	; 8
    4650:	70 f3       	brcs	.-36     	; 0x462e <convertFileName+0xae>
    4652:	0a c0       	rjmp	.+20     	; 0x4668 <convertFileName+0xe8>
  fileNameFAT[k] = ' ';
    4654:	e1 e0       	ldi	r30, 0x01	; 1
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	ec 0f       	add	r30, r28
    465a:	fd 1f       	adc	r31, r29
    465c:	e8 0f       	add	r30, r24
    465e:	f1 1d       	adc	r31, r1
    4660:	90 83       	st	Z, r25
else if (j==12) NoExtension=TRUE;	

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = Filename[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    4662:	8f 5f       	subi	r24, 0xFF	; 255
    4664:	88 30       	cpi	r24, 0x08	; 8
    4666:	b0 f3       	brcs	.-20     	; 0x4654 <convertFileName+0xd4>
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
    4668:	2c 30       	cpi	r18, 0x0C	; 12
    466a:	09 f0       	breq	.+2      	; 0x466e <convertFileName+0xee>
    466c:	2f 5f       	subi	r18, 0xFF	; 255
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    466e:	38 e0       	ldi	r19, 0x08	; 8
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    4670:	82 e9       	ldi	r24, 0x92	; 146
    4672:	90 e5       	ldi	r25, 0x50	; 80
    4674:	fc 01       	movw	r30, r24
    4676:	e2 0f       	add	r30, r18
    4678:	f1 1d       	adc	r31, r1
    467a:	40 81       	ld	r20, Z
    467c:	44 23       	and	r20, r20
    467e:	19 f4       	brne	.+6      	; 0x4686 <convertFileName+0x106>
    fileNameFAT[k] = Filename[j++];
  else //filling extension trail with blanks
    while(k<11)
    4680:	3b 30       	cpi	r19, 0x0B	; 11
    4682:	50 f0       	brcs	.+20     	; 0x4698 <convertFileName+0x118>
    4684:	15 c0       	rjmp	.+42     	; 0x46b0 <convertFileName+0x130>

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    fileNameFAT[k] = Filename[j++];
    4686:	e1 e0       	ldi	r30, 0x01	; 1
    4688:	f0 e0       	ldi	r31, 0x00	; 0
    468a:	ec 0f       	add	r30, r28
    468c:	fd 1f       	adc	r31, r29
    468e:	e3 0f       	add	r30, r19
    4690:	f1 1d       	adc	r31, r1
    4692:	40 83       	st	Z, r20
    4694:	2f 5f       	subi	r18, 0xFF	; 255
    4696:	0c c0       	rjmp	.+24     	; 0x46b0 <convertFileName+0x130>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    4698:	80 e2       	ldi	r24, 0x20	; 32
    469a:	e1 e0       	ldi	r30, 0x01	; 1
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	ec 0f       	add	r30, r28
    46a0:	fd 1f       	adc	r31, r29
    46a2:	e3 0f       	add	r30, r19
    46a4:	f1 1d       	adc	r31, r1
    46a6:	80 83       	st	Z, r24
    46a8:	3f 5f       	subi	r19, 0xFF	; 255
for(k=8; k<11; k++) //setting file extension
{
  if(Filename[j] != 0)
    fileNameFAT[k] = Filename[j++];
  else //filling extension trail with blanks
    while(k<11)
    46aa:	3b 30       	cpi	r19, 0x0B	; 11
    46ac:	b1 f7       	brne	.-20     	; 0x469a <convertFileName+0x11a>
    46ae:	03 c0       	rjmp	.+6      	; 0x46b6 <convertFileName+0x136>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

if(!NoExtension) j++;
for(k=8; k<11; k++) //setting file extension
    46b0:	3f 5f       	subi	r19, 0xFF	; 255
    46b2:	3b 30       	cpi	r19, 0x0B	; 11
    46b4:	f8 f2       	brcs	.-66     	; 0x4674 <convertFileName+0xf4>
    46b6:	de 01       	movw	r26, r28
    46b8:	11 96       	adiw	r26, 0x01	; 1
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    46ba:	ce 01       	movw	r24, r28
    46bc:	0c 96       	adiw	r24, 0x0c	; 12
    46be:	fd 01       	movw	r30, r26
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    46c0:	20 81       	ld	r18, Z
    46c2:	32 2f       	mov	r19, r18
    46c4:	31 56       	subi	r19, 0x61	; 97
    46c6:	3a 31       	cpi	r19, 0x1A	; 26
    46c8:	10 f4       	brcc	.+4      	; 0x46ce <convertFileName+0x14e>
    fileNameFAT[j] -= 0x20;
    46ca:	20 52       	subi	r18, 0x20	; 32
    46cc:	20 83       	st	Z, r18
    46ce:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    46d0:	e8 17       	cp	r30, r24
    46d2:	f9 07       	cpc	r31, r25
    46d4:	a9 f7       	brne	.-22     	; 0x46c0 <convertFileName+0x140>
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  Filename[j] = fileNameFAT[j];
    46d6:	2d 91       	ld	r18, X+
    46d8:	f8 01       	movw	r30, r16
    46da:	21 93       	st	Z+, r18
    46dc:	8f 01       	movw	r16, r30

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    46de:	a8 17       	cp	r26, r24
    46e0:	b9 07       	cpc	r27, r25
    46e2:	c9 f7       	brne	.-14     	; 0x46d6 <convertFileName+0x156>
  Filename[j] = fileNameFAT[j];

return 0;
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	03 c0       	rjmp	.+6      	; 0x46ee <convertFileName+0x16e>
unsigned char fileNameFAT[11];
unsigned char j, k;

//store the string variable into the file name array if it is of a proper length

if(strlen((const char*)fileName) > 15) return 1;
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	01 c0       	rjmp	.+2      	; 0x46ee <convertFileName+0x16e>

for(j=0; j<12; j++)
if(Filename[j] == '.') break;

if(j>8 && j<12) {//Invalid fileName
	return 1;}
    46ec:	81 e0       	ldi	r24, 0x01	; 1

for(j=0; j<11; j++)
  Filename[j] = fileNameFAT[j];

return 0;
}
    46ee:	2b 96       	adiw	r28, 0x0b	; 11
    46f0:	cd bf       	out	0x3d, r28	; 61
    46f2:	de bf       	out	0x3e, r29	; 62
    46f4:	df 91       	pop	r29
    46f6:	cf 91       	pop	r28
    46f8:	1f 91       	pop	r17
    46fa:	0f 91       	pop	r16
    46fc:	08 95       	ret

000046fe <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    46fe:	4f 92       	push	r4
    4700:	5f 92       	push	r5
    4702:	6f 92       	push	r6
    4704:	7f 92       	push	r7
    4706:	8f 92       	push	r8
    4708:	9f 92       	push	r9
    470a:	af 92       	push	r10
    470c:	bf 92       	push	r11
    470e:	cf 92       	push	r12
    4710:	df 92       	push	r13
    4712:	ef 92       	push	r14
    4714:	ff 92       	push	r15
    4716:	cf 93       	push	r28
    4718:	df 93       	push	r29
    471a:	2b 01       	movw	r4, r22
    471c:	3c 01       	movw	r6, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    471e:	20 e8       	ldi	r18, 0x80	; 128
    4720:	3f ef       	ldi	r19, 0xFF	; 255
    4722:	4f ef       	ldi	r20, 0xFF	; 255
    4724:	5f ef       	ldi	r21, 0xFF	; 255
    4726:	42 22       	and	r4, r18
    4728:	53 22       	and	r5, r19
    472a:	64 22       	and	r6, r20
    472c:	75 22       	and	r7, r21
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    472e:	80 91 59 40 	lds	r24, 0x4059
    4732:	90 91 5a 40 	lds	r25, 0x405A
    4736:	a0 91 5b 40 	lds	r26, 0x405B
    473a:	b0 91 5c 40 	lds	r27, 0x405C
    473e:	48 16       	cp	r4, r24
    4740:	59 06       	cpc	r5, r25
    4742:	6a 06       	cpc	r6, r26
    4744:	7b 06       	cpc	r7, r27
    4746:	08 f0       	brcs	.+2      	; 0x474a <searchNextFreeCluster+0x4c>
    4748:	77 c0       	rjmp	.+238    	; 0x4838 <searchNextFreeCluster+0x13a>
    474a:	53 01       	movw	r10, r6
    474c:	42 01       	movw	r8, r4
    474e:	88 0c       	add	r8, r8
    4750:	99 1c       	adc	r9, r9
    4752:	aa 1c       	adc	r10, r10
    4754:	bb 1c       	adc	r11, r11
    4756:	88 0c       	add	r8, r8
    4758:	99 1c       	adc	r9, r9
    475a:	aa 1c       	adc	r10, r10
    475c:	bb 1c       	adc	r11, r11
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
    475e:	c9 e4       	ldi	r28, 0x49	; 73
    4760:	de e3       	ldi	r29, 0x3E	; 62
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    4762:	c0 90 70 50 	lds	r12, 0x5070
    4766:	d0 90 71 50 	lds	r13, 0x5071
    476a:	20 91 56 40 	lds	r18, 0x4056
    476e:	30 91 57 40 	lds	r19, 0x4057
    4772:	ee 24       	eor	r14, r14
    4774:	ff 24       	eor	r15, r15
    4776:	80 91 6c 50 	lds	r24, 0x506C
    477a:	90 91 6d 50 	lds	r25, 0x506D
    477e:	a0 91 6e 50 	lds	r26, 0x506E
    4782:	b0 91 6f 50 	lds	r27, 0x506F
    4786:	c8 0e       	add	r12, r24
    4788:	d9 1e       	adc	r13, r25
    478a:	ea 1e       	adc	r14, r26
    478c:	fb 1e       	adc	r15, r27
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	50 e0       	ldi	r21, 0x00	; 0
    4792:	c5 01       	movw	r24, r10
    4794:	b4 01       	movw	r22, r8
    4796:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    479a:	c7 01       	movw	r24, r14
    479c:	b6 01       	movw	r22, r12
    479e:	62 0f       	add	r22, r18
    47a0:	73 1f       	adc	r23, r19
    47a2:	84 1f       	adc	r24, r20
    47a4:	95 1f       	adc	r25, r21
      SD_read_block(sector,SDBuffer);
    47a6:	ae 01       	movw	r20, r28
    47a8:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    47ac:	88 81       	ld	r24, Y
    47ae:	99 81       	ldd	r25, Y+1	; 0x01
    47b0:	aa 81       	ldd	r26, Y+2	; 0x02
    47b2:	bb 81       	ldd	r27, Y+3	; 0x03
    47b4:	bf 70       	andi	r27, 0x0F	; 15
    47b6:	00 97       	sbiw	r24, 0x00	; 0
    47b8:	a1 05       	cpc	r26, r1
    47ba:	b1 05       	cpc	r27, r1
    47bc:	99 f0       	breq	.+38     	; 0x47e4 <searchNextFreeCluster+0xe6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    47be:	21 e0       	ldi	r18, 0x01	; 1
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
    47c0:	e2 2f       	mov	r30, r18
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	ee 0f       	add	r30, r30
    47c6:	ff 1f       	adc	r31, r31
    47c8:	ee 0f       	add	r30, r30
    47ca:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
    47cc:	e7 5b       	subi	r30, 0xB7	; 183
    47ce:	f1 4c       	sbci	r31, 0xC1	; 193
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	a2 81       	ldd	r26, Z+2	; 0x02
    47d6:	b3 81       	ldd	r27, Z+3	; 0x03
    47d8:	bf 70       	andi	r27, 0x0F	; 15
    47da:	00 97       	sbiw	r24, 0x00	; 0
    47dc:	a1 05       	cpc	r26, r1
    47de:	b1 05       	cpc	r27, r1
    47e0:	39 f4       	brne	.+14     	; 0x47f0 <searchNextFreeCluster+0xf2>
    47e2:	01 c0       	rjmp	.+2      	; 0x47e6 <searchNextFreeCluster+0xe8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    47e4:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
    47e6:	42 0e       	add	r4, r18
    47e8:	51 1c       	adc	r5, r1
    47ea:	61 1c       	adc	r6, r1
    47ec:	71 1c       	adc	r7, r1
    47ee:	27 c0       	rjmp	.+78     	; 0x483e <searchNextFreeCluster+0x140>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    47f0:	2f 5f       	subi	r18, 0xFF	; 255
    47f2:	32 f7       	brpl	.-52     	; 0x47c0 <searchNextFreeCluster+0xc2>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    47f4:	80 e8       	ldi	r24, 0x80	; 128
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	a0 e0       	ldi	r26, 0x00	; 0
    47fa:	b0 e0       	ldi	r27, 0x00	; 0
    47fc:	48 0e       	add	r4, r24
    47fe:	59 1e       	adc	r5, r25
    4800:	6a 1e       	adc	r6, r26
    4802:	7b 1e       	adc	r7, r27
    4804:	80 91 59 40 	lds	r24, 0x4059
    4808:	90 91 5a 40 	lds	r25, 0x405A
    480c:	a0 91 5b 40 	lds	r26, 0x405B
    4810:	b0 91 5c 40 	lds	r27, 0x405C
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	32 e0       	ldi	r19, 0x02	; 2
    4818:	40 e0       	ldi	r20, 0x00	; 0
    481a:	50 e0       	ldi	r21, 0x00	; 0
    481c:	82 0e       	add	r8, r18
    481e:	93 1e       	adc	r9, r19
    4820:	a4 1e       	adc	r10, r20
    4822:	b5 1e       	adc	r11, r21
    4824:	48 16       	cp	r4, r24
    4826:	59 06       	cpc	r5, r25
    4828:	6a 06       	cpc	r6, r26
    482a:	7b 06       	cpc	r7, r27
    482c:	08 f4       	brcc	.+2      	; 0x4830 <searchNextFreeCluster+0x132>
    482e:	99 cf       	rjmp	.-206    	; 0x4762 <searchNextFreeCluster+0x64>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
    4830:	44 24       	eor	r4, r4
    4832:	55 24       	eor	r5, r5
    4834:	32 01       	movw	r6, r4
    4836:	03 c0       	rjmp	.+6      	; 0x483e <searchNextFreeCluster+0x140>
    4838:	44 24       	eor	r4, r4
    483a:	55 24       	eor	r5, r5
    483c:	32 01       	movw	r6, r4
}
    483e:	64 2d       	mov	r22, r4
    4840:	75 2d       	mov	r23, r5
    4842:	86 2d       	mov	r24, r6
    4844:	97 2d       	mov	r25, r7
    4846:	df 91       	pop	r29
    4848:	cf 91       	pop	r28
    484a:	ff 90       	pop	r15
    484c:	ef 90       	pop	r14
    484e:	df 90       	pop	r13
    4850:	cf 90       	pop	r12
    4852:	bf 90       	pop	r11
    4854:	af 90       	pop	r10
    4856:	9f 90       	pop	r9
    4858:	8f 90       	pop	r8
    485a:	7f 90       	pop	r7
    485c:	6f 90       	pop	r6
    485e:	5f 90       	pop	r5
    4860:	4f 90       	pop	r4
    4862:	08 95       	ret

00004864 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    4864:	cf 92       	push	r12
    4866:	df 92       	push	r13
    4868:	ef 92       	push	r14
    486a:	ff 92       	push	r15
    486c:	cf 93       	push	r28
    486e:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    4870:	db 01       	movw	r26, r22
    4872:	ca 01       	movw	r24, r20
    4874:	91 70       	andi	r25, 0x01	; 1
    4876:	a0 70       	andi	r26, 0x00	; 0
    4878:	b0 70       	andi	r27, 0x00	; 0
    487a:	00 97       	sbiw	r24, 0x00	; 0
    487c:	a1 05       	cpc	r26, r1
    487e:	b1 05       	cpc	r27, r1
    4880:	51 f4       	brne	.+20     	; 0x4896 <freeMemoryUpdate+0x32>
    4882:	03 2e       	mov	r0, r19
    4884:	39 e0       	ldi	r19, 0x09	; 9
    4886:	76 95       	lsr	r23
    4888:	67 95       	ror	r22
    488a:	57 95       	ror	r21
    488c:	47 95       	ror	r20
    488e:	3a 95       	dec	r19
    4890:	d1 f7       	brne	.-12     	; 0x4886 <freeMemoryUpdate+0x22>
    4892:	30 2d       	mov	r19, r0
    4894:	0d c0       	rjmp	.+26     	; 0x48b0 <freeMemoryUpdate+0x4c>
  else size = (size / 512) +1;
    4896:	03 2e       	mov	r0, r19
    4898:	39 e0       	ldi	r19, 0x09	; 9
    489a:	76 95       	lsr	r23
    489c:	67 95       	ror	r22
    489e:	57 95       	ror	r21
    48a0:	47 95       	ror	r20
    48a2:	3a 95       	dec	r19
    48a4:	d1 f7       	brne	.-12     	; 0x489a <freeMemoryUpdate+0x36>
    48a6:	30 2d       	mov	r19, r0
    48a8:	4f 5f       	subi	r20, 0xFF	; 255
    48aa:	5f 4f       	sbci	r21, 0xFF	; 255
    48ac:	6f 4f       	sbci	r22, 0xFF	; 255
    48ae:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
    48b0:	db 01       	movw	r26, r22
    48b2:	ca 01       	movw	r24, r20
    48b4:	87 70       	andi	r24, 0x07	; 7
    48b6:	90 70       	andi	r25, 0x00	; 0
    48b8:	a0 70       	andi	r26, 0x00	; 0
    48ba:	b0 70       	andi	r27, 0x00	; 0
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	a1 05       	cpc	r26, r1
    48c0:	b1 05       	cpc	r27, r1
    48c2:	59 f4       	brne	.+22     	; 0x48da <freeMemoryUpdate+0x76>
    48c4:	6a 01       	movw	r12, r20
    48c6:	7b 01       	movw	r14, r22
    48c8:	68 94       	set
    48ca:	12 f8       	bld	r1, 2
    48cc:	f6 94       	lsr	r15
    48ce:	e7 94       	ror	r14
    48d0:	d7 94       	ror	r13
    48d2:	c7 94       	ror	r12
    48d4:	16 94       	lsr	r1
    48d6:	d1 f7       	brne	.-12     	; 0x48cc <freeMemoryUpdate+0x68>
    48d8:	0f c0       	rjmp	.+30     	; 0x48f8 <freeMemoryUpdate+0x94>
  else size = (size / 8) +1;
    48da:	6a 01       	movw	r12, r20
    48dc:	7b 01       	movw	r14, r22
    48de:	68 94       	set
    48e0:	12 f8       	bld	r1, 2
    48e2:	f6 94       	lsr	r15
    48e4:	e7 94       	ror	r14
    48e6:	d7 94       	ror	r13
    48e8:	c7 94       	ror	r12
    48ea:	16 94       	lsr	r1
    48ec:	d1 f7       	brne	.-12     	; 0x48e2 <freeMemoryUpdate+0x7e>
    48ee:	08 94       	sec
    48f0:	c1 1c       	adc	r12, r1
    48f2:	d1 1c       	adc	r13, r1
    48f4:	e1 1c       	adc	r14, r1
    48f6:	f1 1c       	adc	r15, r1

  if(freeClusterCountUpdated)
    48f8:	80 91 a2 50 	lds	r24, 0x50A2
    48fc:	88 23       	and	r24, r24
    48fe:	d1 f0       	breq	.+52     	; 0x4934 <freeMemoryUpdate+0xd0>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	60 e0       	ldi	r22, 0x00	; 0
    4904:	20 e0       	ldi	r18, 0x00	; 0
    4906:	30 e0       	ldi	r19, 0x00	; 0
    4908:	a9 01       	movw	r20, r18
    490a:	0e 94 33 21 	call	0x4266	; 0x4266 <getSetFreeCluster>
	if(flag == ADD)
    490e:	cc 23       	and	r28, r28
    4910:	39 f4       	brne	.+14     	; 0x4920 <freeMemoryUpdate+0xbc>
  	   freeClusters = freeClusters + size;
    4912:	9b 01       	movw	r18, r22
    4914:	ac 01       	movw	r20, r24
    4916:	2c 0d       	add	r18, r12
    4918:	3d 1d       	adc	r19, r13
    491a:	4e 1d       	adc	r20, r14
    491c:	5f 1d       	adc	r21, r15
    491e:	06 c0       	rjmp	.+12     	; 0x492c <freeMemoryUpdate+0xc8>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    4920:	9b 01       	movw	r18, r22
    4922:	ac 01       	movw	r20, r24
    4924:	2c 19       	sub	r18, r12
    4926:	3d 09       	sbc	r19, r13
    4928:	4e 09       	sbc	r20, r14
    492a:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	61 e0       	ldi	r22, 0x01	; 1
    4930:	0e 94 33 21 	call	0x4266	; 0x4266 <getSetFreeCluster>
  }
}
    4934:	cf 91       	pop	r28
    4936:	ff 90       	pop	r15
    4938:	ef 90       	pop	r14
    493a:	df 90       	pop	r13
    493c:	cf 90       	pop	r12
    493e:	08 95       	ret

00004940 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    4940:	2f 92       	push	r2
    4942:	3f 92       	push	r3
    4944:	4f 92       	push	r4
    4946:	5f 92       	push	r5
    4948:	6f 92       	push	r6
    494a:	7f 92       	push	r7
    494c:	8f 92       	push	r8
    494e:	9f 92       	push	r9
    4950:	af 92       	push	r10
    4952:	bf 92       	push	r11
    4954:	cf 92       	push	r12
    4956:	df 92       	push	r13
    4958:	ef 92       	push	r14
    495a:	ff 92       	push	r15
    495c:	0f 93       	push	r16
    495e:	1f 93       	push	r17
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
    4968:	2c 97       	sbiw	r28, 0x0c	; 12
    496a:	cd bf       	out	0x3d, r28	; 61
    496c:	de bf       	out	0x3e, r29	; 62
    496e:	88 2e       	mov	r8, r24
    4970:	7b 01       	movw	r14, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    4972:	80 91 5e 40 	lds	r24, 0x405E
    4976:	90 91 5f 40 	lds	r25, 0x405F
    497a:	a0 91 60 40 	lds	r26, 0x4060
    497e:	b0 91 61 40 	lds	r27, 0x4061
    4982:	89 87       	std	Y+9, r24	; 0x09
    4984:	9a 87       	std	Y+10, r25	; 0x0a
    4986:	ab 87       	std	Y+11, r26	; 0x0b
    4988:	bc 87       	std	Y+12, r27	; 0x0c
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    498a:	0f 2e       	mov	r0, r31
    498c:	f9 e4       	ldi	r31, 0x49	; 73
    498e:	2f 2e       	mov	r2, r31
    4990:	fe e3       	ldi	r31, 0x3E	; 62
    4992:	3f 2e       	mov	r3, r31
    4994:	f0 2d       	mov	r31, r0
		{
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    4996:	c8 2c       	mov	r12, r8
    4998:	ca 94       	dec	r12
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    499a:	d2 2c       	mov	r13, r2
    499c:	93 2c       	mov	r9, r3
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    499e:	5b 01       	movw	r10, r22
    49a0:	08 94       	sec
    49a2:	a1 1c       	adc	r10, r1
    49a4:	b1 1c       	adc	r11, r1

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    49a6:	69 85       	ldd	r22, Y+9	; 0x09
    49a8:	7a 85       	ldd	r23, Y+10	; 0x0a
    49aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    49ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    49ae:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <getFirstSector>
    49b2:	6d 83       	std	Y+5, r22	; 0x05
    49b4:	7e 83       	std	Y+6, r23	; 0x06
    49b6:	8f 83       	std	Y+7, r24	; 0x07
    49b8:	98 87       	std	Y+8, r25	; 0x08

   for(sector = 0; sector < sectorPerCluster; sector++)
    49ba:	80 91 6a 50 	lds	r24, 0x506A
    49be:	90 91 6b 50 	lds	r25, 0x506B
    49c2:	00 97       	sbiw	r24, 0x00	; 0
    49c4:	09 f4       	brne	.+2      	; 0x49c8 <findFiles+0x88>
    49c6:	13 c1       	rjmp	.+550    	; 0x4bee <findFiles+0x2ae>
    49c8:	44 24       	eor	r4, r4
    49ca:	55 24       	eor	r5, r5
    49cc:	32 01       	movw	r6, r4
    49ce:	1c 2d       	mov	r17, r12
   {
     SD_read_block (firstSector + sector,SDBuffer);
    49d0:	8d 81       	ldd	r24, Y+5	; 0x05
    49d2:	9e 81       	ldd	r25, Y+6	; 0x06
    49d4:	af 81       	ldd	r26, Y+7	; 0x07
    49d6:	b8 85       	ldd	r27, Y+8	; 0x08
    49d8:	84 0d       	add	r24, r4
    49da:	95 1d       	adc	r25, r5
    49dc:	a6 1d       	adc	r26, r6
    49de:	b7 1d       	adc	r27, r7
    49e0:	89 83       	std	Y+1, r24	; 0x01
    49e2:	9a 83       	std	Y+2, r25	; 0x02
    49e4:	ab 83       	std	Y+3, r26	; 0x03
    49e6:	bc 83       	std	Y+4, r27	; 0x04
    49e8:	bc 01       	movw	r22, r24
    49ea:	cd 01       	movw	r24, r26
    49ec:	4d 2d       	mov	r20, r13
    49ee:	59 2d       	mov	r21, r9
    49f0:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    49f4:	80 91 56 40 	lds	r24, 0x4056
    49f8:	90 91 57 40 	lds	r25, 0x4057
    49fc:	00 97       	sbiw	r24, 0x00	; 0
    49fe:	09 f4       	brne	.+2      	; 0x4a02 <findFiles+0xc2>
    4a00:	e4 c0       	rjmp	.+456    	; 0x4bca <findFiles+0x28a>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    4a02:	d1 01       	movw	r26, r2
    4a04:	8c 91       	ld	r24, X
    4a06:	88 23       	and	r24, r24
    4a08:	09 f4       	brne	.+2      	; 0x4a0c <findFiles+0xcc>
    4a0a:	10 c1       	rjmp	.+544    	; 0x4c2c <findFiles+0x2ec>
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    4a0c:	4d 2d       	mov	r20, r13
    4a0e:	59 2d       	mov	r21, r9
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	30 e0       	ldi	r19, 0x00	; 0
    4a14:	08 c0       	rjmp	.+16     	; 0x4a26 <findFiles+0xe6>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    4a16:	a9 01       	movw	r20, r18
    4a18:	47 5b       	subi	r20, 0xB7	; 183
    4a1a:	51 4c       	sbci	r21, 0xC1	; 193

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    4a1c:	fa 01       	movw	r30, r20
    4a1e:	80 81       	ld	r24, Z
    4a20:	88 23       	and	r24, r24
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <findFiles+0xe6>
    4a24:	06 c1       	rjmp	.+524    	; 0x4c32 <findFiles+0x2f2>
		{
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    4a26:	85 3e       	cpi	r24, 0xE5	; 229
    4a28:	09 f4       	brne	.+2      	; 0x4a2c <findFiles+0xec>
    4a2a:	c5 c0       	rjmp	.+394    	; 0x4bb6 <findFiles+0x276>
    4a2c:	da 01       	movw	r26, r20
    4a2e:	1b 96       	adiw	r26, 0x0b	; 11
    4a30:	8c 91       	ld	r24, X
    4a32:	1b 97       	sbiw	r26, 0x0b	; 11
    4a34:	8f 30       	cpi	r24, 0x0F	; 15
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <findFiles+0xfa>
    4a38:	be c0       	rjmp	.+380    	; 0x4bb6 <findFiles+0x276>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    4a3a:	12 30       	cpi	r17, 0x02	; 2
    4a3c:	08 f0       	brcs	.+2      	; 0x4a40 <findFiles+0x100>
    4a3e:	fc c0       	rjmp	.+504    	; 0x4c38 <findFiles+0x2f8>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    4a40:	9c 91       	ld	r25, X
    4a42:	f7 01       	movw	r30, r14
    4a44:	80 81       	ld	r24, Z
    4a46:	98 17       	cp	r25, r24
    4a48:	09 f0       	breq	.+2      	; 0x4a4c <findFiles+0x10c>
    4a4a:	b5 c0       	rjmp	.+362    	; 0x4bb6 <findFiles+0x276>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    4a4c:	fa 01       	movw	r30, r20
    4a4e:	31 96       	adiw	r30, 0x01	; 1
    4a50:	d5 01       	movw	r26, r10
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	ba 01       	movw	r22, r20
            if(dir->name[j] != fileName[j]) break;
    4a56:	41 91       	ld	r20, Z+
    4a58:	9d 91       	ld	r25, X+
    4a5a:	49 17       	cp	r20, r25
    4a5c:	31 f4       	brne	.+12     	; 0x4a6a <findFiles+0x12a>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    4a5e:	8f 5f       	subi	r24, 0xFF	; 255
    4a60:	8b 30       	cpi	r24, 0x0B	; 11
    4a62:	c9 f7       	brne	.-14     	; 0x4a56 <findFiles+0x116>
    4a64:	8b 01       	movw	r16, r22
    4a66:	6b 01       	movw	r12, r22
    4a68:	05 c0       	rjmp	.+10     	; 0x4a74 <findFiles+0x134>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    4a6a:	8b 30       	cpi	r24, 0x0B	; 11
    4a6c:	09 f0       	breq	.+2      	; 0x4a70 <findFiles+0x130>
    4a6e:	a3 c0       	rjmp	.+326    	; 0x4bb6 <findFiles+0x276>
    4a70:	8b 01       	movw	r16, r22
    4a72:	6b 01       	movw	r12, r22
			{
			  if(flag == GET_FILE)
    4a74:	f1 e0       	ldi	r31, 0x01	; 1
    4a76:	8f 16       	cp	r8, r31
    4a78:	09 f0       	breq	.+2      	; 0x4a7c <findFiles+0x13c>
    4a7a:	41 c0       	rjmp	.+130    	; 0x4afe <findFiles+0x1be>
              {
			    appendFileSector = firstSector + sector;
    4a7c:	89 81       	ldd	r24, Y+1	; 0x01
    4a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a80:	ab 81       	ldd	r26, Y+3	; 0x03
    4a82:	bc 81       	ldd	r27, Y+4	; 0x04
    4a84:	80 93 a3 50 	sts	0x50A3, r24
    4a88:	90 93 a4 50 	sts	0x50A4, r25
    4a8c:	a0 93 a5 50 	sts	0x50A5, r26
    4a90:	b0 93 a6 50 	sts	0x50A6, r27
				appendFileLocation = i;
    4a94:	c9 01       	movw	r24, r18
    4a96:	a0 e0       	ldi	r26, 0x00	; 0
    4a98:	b0 e0       	ldi	r27, 0x00	; 0
    4a9a:	80 93 4a 40 	sts	0x404A, r24
    4a9e:	90 93 4b 40 	sts	0x404B, r25
    4aa2:	a0 93 4c 40 	sts	0x404C, r26
    4aa6:	b0 93 4d 40 	sts	0x404D, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    4aaa:	d6 01       	movw	r26, r12
    4aac:	54 96       	adiw	r26, 0x14	; 20
    4aae:	4d 91       	ld	r20, X+
    4ab0:	5c 91       	ld	r21, X
    4ab2:	55 97       	sbiw	r26, 0x15	; 21
    4ab4:	60 e0       	ldi	r22, 0x00	; 0
    4ab6:	70 e0       	ldi	r23, 0x00	; 0
    4ab8:	ba 01       	movw	r22, r20
    4aba:	55 27       	eor	r21, r21
    4abc:	44 27       	eor	r20, r20
    4abe:	5a 96       	adiw	r26, 0x1a	; 26
    4ac0:	8d 91       	ld	r24, X+
    4ac2:	9c 91       	ld	r25, X
    4ac4:	5b 97       	sbiw	r26, 0x1b	; 27
    4ac6:	a0 e0       	ldi	r26, 0x00	; 0
    4ac8:	b0 e0       	ldi	r27, 0x00	; 0
    4aca:	84 2b       	or	r24, r20
    4acc:	95 2b       	or	r25, r21
    4ace:	a6 2b       	or	r26, r22
    4ad0:	b7 2b       	or	r27, r23
    4ad2:	80 93 74 50 	sts	0x5074, r24
    4ad6:	90 93 75 50 	sts	0x5075, r25
    4ada:	a0 93 76 50 	sts	0x5076, r26
    4ade:	b0 93 77 50 	sts	0x5077, r27
				fileSize = dir->fileSize;
    4ae2:	f6 01       	movw	r30, r12
    4ae4:	84 8d       	ldd	r24, Z+28	; 0x1c
    4ae6:	95 8d       	ldd	r25, Z+29	; 0x1d
    4ae8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4aea:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4aec:	80 93 52 40 	sts	0x4052, r24
    4af0:	90 93 53 40 	sts	0x4053, r25
    4af4:	a0 93 54 40 	sts	0x4054, r26
    4af8:	b0 93 55 40 	sts	0x4055, r27
			    return (dir);
    4afc:	a5 c0       	rjmp	.+330    	; 0x4c48 <findFiles+0x308>
			  }	
			  else    //when flag = DELETE
			  {
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    4afe:	d6 01       	movw	r26, r12
    4b00:	54 96       	adiw	r26, 0x14	; 20
    4b02:	8d 91       	ld	r24, X+
    4b04:	9c 91       	ld	r25, X
    4b06:	55 97       	sbiw	r26, 0x15	; 21
    4b08:	a0 e0       	ldi	r26, 0x00	; 0
    4b0a:	b0 e0       	ldi	r27, 0x00	; 0
    4b0c:	3c 01       	movw	r6, r24
    4b0e:	55 24       	eor	r5, r5
    4b10:	44 24       	eor	r4, r4
    4b12:	f6 01       	movw	r30, r12
    4b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b16:	93 8d       	ldd	r25, Z+27	; 0x1b
    4b18:	a0 e0       	ldi	r26, 0x00	; 0
    4b1a:	b0 e0       	ldi	r27, 0x00	; 0
    4b1c:	48 2a       	or	r4, r24
    4b1e:	59 2a       	or	r5, r25
    4b20:	6a 2a       	or	r6, r26
    4b22:	7b 2a       	or	r7, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    4b24:	85 ee       	ldi	r24, 0xE5	; 229
    4b26:	80 83       	st	Z, r24
				 SD_write_block (firstSector+sector,SDBuffer,512);
    4b28:	69 81       	ldd	r22, Y+1	; 0x01
    4b2a:	7a 81       	ldd	r23, Y+2	; 0x02
    4b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b30:	49 e4       	ldi	r20, 0x49	; 73
    4b32:	5e e3       	ldi	r21, 0x3E	; 62
    4b34:	20 e0       	ldi	r18, 0x00	; 0
    4b36:	32 e0       	ldi	r19, 0x02	; 2
    4b38:	0e 94 cb 2a 	call	0x5596	; 0x5596 <SD_write_block>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    4b3c:	d6 01       	movw	r26, r12
    4b3e:	5c 96       	adiw	r26, 0x1c	; 28
    4b40:	4d 91       	ld	r20, X+
    4b42:	5d 91       	ld	r21, X+
    4b44:	6d 91       	ld	r22, X+
    4b46:	7c 91       	ld	r23, X
    4b48:	5f 97       	sbiw	r26, 0x1f	; 31
    4b4a:	80 e0       	ldi	r24, 0x00	; 0
    4b4c:	0e 94 32 24 	call	0x4864	; 0x4864 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    4b50:	82 e0       	ldi	r24, 0x02	; 2
    4b52:	60 e0       	ldi	r22, 0x00	; 0
    4b54:	20 e0       	ldi	r18, 0x00	; 0
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	a9 01       	movw	r20, r18
    4b5a:	0e 94 33 21 	call	0x4266	; 0x4266 <getSetFreeCluster>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
				 if(firstCluster < cluster)
    4b62:	48 16       	cp	r4, r24
    4b64:	59 06       	cpc	r5, r25
    4b66:	6a 06       	cpc	r6, r26
    4b68:	7b 06       	cpc	r7, r27
    4b6a:	30 f4       	brcc	.+12     	; 0x4b78 <findFiles+0x238>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    4b6c:	82 e0       	ldi	r24, 0x02	; 2
    4b6e:	61 e0       	ldi	r22, 0x01	; 1
    4b70:	a3 01       	movw	r20, r6
    4b72:	92 01       	movw	r18, r4
    4b74:	0e 94 33 21 	call	0x4266	; 0x4266 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    4b78:	c3 01       	movw	r24, r6
    4b7a:	b2 01       	movw	r22, r4
    4b7c:	40 e0       	ldi	r20, 0x00	; 0
    4b7e:	00 e0       	ldi	r16, 0x00	; 0
    4b80:	10 e0       	ldi	r17, 0x00	; 0
    4b82:	98 01       	movw	r18, r16
    4b84:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
    4b88:	6b 01       	movw	r12, r22
    4b8a:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    4b8c:	c3 01       	movw	r24, r6
    4b8e:	b2 01       	movw	r22, r4
    4b90:	41 e0       	ldi	r20, 0x01	; 1
    4b92:	00 e0       	ldi	r16, 0x00	; 0
    4b94:	10 e0       	ldi	r17, 0x00	; 0
    4b96:	98 01       	movw	r18, r16
    4b98:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    4b9c:	b7 ef       	ldi	r27, 0xF7	; 247
    4b9e:	cb 16       	cp	r12, r27
    4ba0:	bf ef       	ldi	r27, 0xFF	; 255
    4ba2:	db 06       	cpc	r13, r27
    4ba4:	bf ef       	ldi	r27, 0xFF	; 255
    4ba6:	eb 06       	cpc	r14, r27
    4ba8:	bf e0       	ldi	r27, 0x0F	; 15
    4baa:	fb 06       	cpc	r15, r27
    4bac:	08 f0       	brcs	.+2      	; 0x4bb0 <findFiles+0x270>
    4bae:	47 c0       	rjmp	.+142    	; 0x4c3e <findFiles+0x2fe>
					   {//file deleted
						   return 0;}
					firstCluster = nextCluster;
    4bb0:	26 01       	movw	r4, r12
    4bb2:	37 01       	movw	r6, r14
    4bb4:	e1 cf       	rjmp	.-62     	; 0x4b78 <findFiles+0x238>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    4bb6:	20 5e       	subi	r18, 0xE0	; 224
    4bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bba:	80 91 56 40 	lds	r24, 0x4056
    4bbe:	90 91 57 40 	lds	r25, 0x4057
    4bc2:	28 17       	cp	r18, r24
    4bc4:	39 07       	cpc	r19, r25
    4bc6:	08 f4       	brcc	.+2      	; 0x4bca <findFiles+0x28a>
    4bc8:	26 cf       	rjmp	.-436    	; 0x4a16 <findFiles+0xd6>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    4bca:	08 94       	sec
    4bcc:	41 1c       	adc	r4, r1
    4bce:	51 1c       	adc	r5, r1
    4bd0:	61 1c       	adc	r6, r1
    4bd2:	71 1c       	adc	r7, r1
    4bd4:	80 91 6a 50 	lds	r24, 0x506A
    4bd8:	90 91 6b 50 	lds	r25, 0x506B
    4bdc:	a0 e0       	ldi	r26, 0x00	; 0
    4bde:	b0 e0       	ldi	r27, 0x00	; 0
    4be0:	48 16       	cp	r4, r24
    4be2:	59 06       	cpc	r5, r25
    4be4:	6a 06       	cpc	r6, r26
    4be6:	7b 06       	cpc	r7, r27
    4be8:	08 f4       	brcc	.+2      	; 0x4bec <findFiles+0x2ac>
    4bea:	f2 ce       	rjmp	.-540    	; 0x49d0 <findFiles+0x90>
    4bec:	c1 2e       	mov	r12, r17
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    4bee:	69 85       	ldd	r22, Y+9	; 0x09
    4bf0:	7a 85       	ldd	r23, Y+10	; 0x0a
    4bf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bf4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bf6:	40 e0       	ldi	r20, 0x00	; 0
    4bf8:	00 e0       	ldi	r16, 0x00	; 0
    4bfa:	10 e0       	ldi	r17, 0x00	; 0
    4bfc:	98 01       	movw	r18, r16
    4bfe:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
    4c02:	69 87       	std	Y+9, r22	; 0x09
    4c04:	7a 87       	std	Y+10, r23	; 0x0a
    4c06:	8b 87       	std	Y+11, r24	; 0x0b
    4c08:	9c 87       	std	Y+12, r25	; 0x0c

   if(cluster > 0x0ffffff6)
    4c0a:	67 3f       	cpi	r22, 0xF7	; 247
    4c0c:	ef ef       	ldi	r30, 0xFF	; 255
    4c0e:	7e 07       	cpc	r23, r30
    4c10:	ef ef       	ldi	r30, 0xFF	; 255
    4c12:	8e 07       	cpc	r24, r30
    4c14:	ef e0       	ldi	r30, 0x0F	; 15
    4c16:	9e 07       	cpc	r25, r30
    4c18:	a8 f4       	brcc	.+42     	; 0x4c44 <findFiles+0x304>
   	 return 0;
   if(cluster == 0) 
    4c1a:	61 15       	cp	r22, r1
    4c1c:	71 05       	cpc	r23, r1
    4c1e:	81 05       	cpc	r24, r1
    4c20:	91 05       	cpc	r25, r1
    4c22:	09 f0       	breq	.+2      	; 0x4c26 <findFiles+0x2e6>
    4c24:	c0 ce       	rjmp	.-640    	; 0x49a6 <findFiles+0x66>
   {//error in getting cluster
	   return 0;}
    4c26:	00 e0       	ldi	r16, 0x00	; 0
    4c28:	10 e0       	ldi	r17, 0x00	; 0
    4c2a:	0e c0       	rjmp	.+28     	; 0x4c48 <findFiles+0x308>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  return 0;   
    4c2c:	00 e0       	ldi	r16, 0x00	; 0
    4c2e:	10 e0       	ldi	r17, 0x00	; 0
    4c30:	0b c0       	rjmp	.+22     	; 0x4c48 <findFiles+0x308>
    4c32:	00 e0       	ldi	r16, 0x00	; 0
    4c34:	10 e0       	ldi	r17, 0x00	; 0
    4c36:	08 c0       	rjmp	.+16     	; 0x4c48 <findFiles+0x308>
			  }
            }
          }
          else  //invalid flag
		  {
			  return 0;
    4c38:	00 e0       	ldi	r16, 0x00	; 0
    4c3a:	10 e0       	ldi	r17, 0x00	; 0
    4c3c:	05 c0       	rjmp	.+10     	; 0x4c48 <findFiles+0x308>
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {//file deleted
						   return 0;}
    4c3e:	00 e0       	ldi	r16, 0x00	; 0
    4c40:	10 e0       	ldi	r17, 0x00	; 0
    4c42:	02 c0       	rjmp	.+4      	; 0x4c48 <findFiles+0x308>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    4c44:	00 e0       	ldi	r16, 0x00	; 0
    4c46:	10 e0       	ldi	r17, 0x00	; 0
   if(cluster == 0) 
   {//error in getting cluster
	   return 0;}
 }
return 0;
}
    4c48:	80 2f       	mov	r24, r16
    4c4a:	91 2f       	mov	r25, r17
    4c4c:	2c 96       	adiw	r28, 0x0c	; 12
    4c4e:	cd bf       	out	0x3d, r28	; 61
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	ff 90       	pop	r15
    4c5c:	ef 90       	pop	r14
    4c5e:	df 90       	pop	r13
    4c60:	cf 90       	pop	r12
    4c62:	bf 90       	pop	r11
    4c64:	af 90       	pop	r10
    4c66:	9f 90       	pop	r9
    4c68:	8f 90       	pop	r8
    4c6a:	7f 90       	pop	r7
    4c6c:	6f 90       	pop	r6
    4c6e:	5f 90       	pop	r5
    4c70:	4f 90       	pop	r4
    4c72:	3f 90       	pop	r3
    4c74:	2f 90       	pop	r2
    4c76:	08 95       	ret

00004c78 <deleteFile>:
//********************************************************************
void deleteFile (unsigned char *fileName)
{
  unsigned char error;

  error = convertFileName (fileName);
    4c78:	0e 94 c0 22 	call	0x4580	; 0x4580 <convertFileName>
  if(error) return;
    4c7c:	88 23       	and	r24, r24
    4c7e:	29 f4       	brne	.+10     	; 0x4c8a <deleteFile+0x12>

  findFiles (DELETE, Filename);
    4c80:	82 e0       	ldi	r24, 0x02	; 2
    4c82:	62 e9       	ldi	r22, 0x92	; 146
    4c84:	70 e5       	ldi	r23, 0x50	; 80
    4c86:	0e 94 a0 24 	call	0x4940	; 0x4940 <findFiles>
    4c8a:	08 95       	ret

00004c8c <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    4c8c:	4f 92       	push	r4
    4c8e:	5f 92       	push	r5
    4c90:	6f 92       	push	r6
    4c92:	7f 92       	push	r7
    4c94:	af 92       	push	r10
    4c96:	bf 92       	push	r11
    4c98:	cf 92       	push	r12
    4c9a:	df 92       	push	r13
    4c9c:	ef 92       	push	r14
    4c9e:	ff 92       	push	r15
    4ca0:	0f 93       	push	r16
    4ca2:	1f 93       	push	r17
    4ca4:	cf 93       	push	r28
    4ca6:	c8 2f       	mov	r28, r24
    4ca8:	cb 01       	movw	r24, r22
unsigned long cluster, firstSector;
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    4caa:	0e 94 c0 22 	call	0x4580	; 0x4580 <convertFileName>
if(error) return 2;
    4cae:	88 23       	and	r24, r24
    4cb0:	09 f0       	breq	.+2      	; 0x4cb4 <readFile+0x28>
    4cb2:	57 c0       	rjmp	.+174    	; 0x4d62 <readFile+0xd6>

dir = findFiles (GET_FILE, Filename); //get the file location
    4cb4:	81 e0       	ldi	r24, 0x01	; 1
    4cb6:	62 e9       	ldi	r22, 0x92	; 146
    4cb8:	70 e5       	ldi	r23, 0x50	; 80
    4cba:	0e 94 a0 24 	call	0x4940	; 0x4940 <findFiles>
    4cbe:	fc 01       	movw	r30, r24
if(dir == 0) 
    4cc0:	00 97       	sbiw	r24, 0x00	; 0
    4cc2:	31 f4       	brne	.+12     	; 0x4cd0 <readFile+0x44>
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
    4cc6:	cc 23       	and	r28, r28
    4cc8:	09 f4       	brne	.+2      	; 0x4ccc <readFile+0x40>
    4cca:	4e c0       	rjmp	.+156    	; 0x4d68 <readFile+0xdc>
    4ccc:	80 e0       	ldi	r24, 0x00	; 0
    4cce:	4c c0       	rjmp	.+152    	; 0x4d68 <readFile+0xdc>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    4cd0:	c1 30       	cpi	r28, 0x01	; 1
    4cd2:	09 f4       	brne	.+2      	; 0x4cd6 <readFile+0x4a>
    4cd4:	48 c0       	rjmp	.+144    	; 0x4d66 <readFile+0xda>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    4cd6:	44 88       	ldd	r4, Z+20	; 0x14
    4cd8:	55 88       	ldd	r5, Z+21	; 0x15
    4cda:	66 24       	eor	r6, r6
    4cdc:	77 24       	eor	r7, r7
    4cde:	32 01       	movw	r6, r4
    4ce0:	55 24       	eor	r5, r5
    4ce2:	44 24       	eor	r4, r4
    4ce4:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ce6:	93 8d       	ldd	r25, Z+27	; 0x1b
    4ce8:	a0 e0       	ldi	r26, 0x00	; 0
    4cea:	b0 e0       	ldi	r27, 0x00	; 0
    4cec:	48 2a       	or	r4, r24
    4cee:	59 2a       	or	r5, r25
    4cf0:	6a 2a       	or	r6, r26
    4cf2:	7b 2a       	or	r7, r27
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    4cf4:	0f 2e       	mov	r0, r31
    4cf6:	fd ea       	ldi	r31, 0xAD	; 173
    4cf8:	af 2e       	mov	r10, r31
    4cfa:	f1 e2       	ldi	r31, 0x21	; 33
    4cfc:	bf 2e       	mov	r11, r31
    4cfe:	f0 2d       	mov	r31, r0
//fileSize = dir->fileSize;


while(1)
{
  firstSector = getFirstSector (cluster);
    4d00:	c3 01       	movw	r24, r6
    4d02:	b2 01       	movw	r22, r4
    4d04:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <getFirstSector>
    4d08:	6b 01       	movw	r12, r22
    4d0a:	7c 01       	movw	r14, r24

  for(j=0; j<sectorPerCluster; j++)
    4d0c:	80 91 6a 50 	lds	r24, 0x506A
    4d10:	90 91 6b 50 	lds	r25, 0x506B
    4d14:	00 97       	sbiw	r24, 0x00	; 0
    4d16:	a1 f0       	breq	.+40     	; 0x4d40 <readFile+0xb4>
    4d18:	c0 e0       	ldi	r28, 0x00	; 0
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    4d1a:	c7 01       	movw	r24, r14
    4d1c:	b6 01       	movw	r22, r12
    4d1e:	6c 0f       	add	r22, r28
    4d20:	71 1d       	adc	r23, r1
    4d22:	81 1d       	adc	r24, r1
    4d24:	91 1d       	adc	r25, r1
    4d26:	a5 01       	movw	r20, r10
    4d28:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    4d2c:	cf 5f       	subi	r28, 0xFF	; 255
    4d2e:	80 91 6a 50 	lds	r24, 0x506A
    4d32:	90 91 6b 50 	lds	r25, 0x506B
    4d36:	2c 2f       	mov	r18, r28
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	28 17       	cp	r18, r24
    4d3c:	39 07       	cpc	r19, r25
    4d3e:	68 f3       	brcs	.-38     	; 0x4d1a <readFile+0x8e>
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
	*/
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    4d40:	c3 01       	movw	r24, r6
    4d42:	b2 01       	movw	r22, r4
    4d44:	40 e0       	ldi	r20, 0x00	; 0
    4d46:	00 e0       	ldi	r16, 0x00	; 0
    4d48:	10 e0       	ldi	r17, 0x00	; 0
    4d4a:	98 01       	movw	r18, r16
    4d4c:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
    4d50:	2b 01       	movw	r4, r22
    4d52:	3c 01       	movw	r6, r24
  if(cluster == 0) {//Error in getting cluster
    4d54:	61 15       	cp	r22, r1
    4d56:	71 05       	cpc	r23, r1
    4d58:	81 05       	cpc	r24, r1
    4d5a:	91 05       	cpc	r25, r1
    4d5c:	89 f6       	brne	.-94     	; 0x4d00 <readFile+0x74>
	  return 0;}
    4d5e:	80 e0       	ldi	r24, 0x00	; 0
    4d60:	03 c0       	rjmp	.+6      	; 0x4d68 <readFile+0xdc>
//unsigned long byteCounter;
//unsigned long  fileSize;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    4d62:	82 e0       	ldi	r24, 0x02	; 2
    4d64:	01 c0       	rjmp	.+2      	; 0x4d68 <readFile+0xdc>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    4d66:	81 e0       	ldi	r24, 0x01	; 1
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {//Error in getting cluster
	  return 0;}
}
return 0;
}
    4d68:	cf 91       	pop	r28
    4d6a:	1f 91       	pop	r17
    4d6c:	0f 91       	pop	r16
    4d6e:	ff 90       	pop	r15
    4d70:	ef 90       	pop	r14
    4d72:	df 90       	pop	r13
    4d74:	cf 90       	pop	r12
    4d76:	bf 90       	pop	r11
    4d78:	af 90       	pop	r10
    4d7a:	7f 90       	pop	r7
    4d7c:	6f 90       	pop	r6
    4d7e:	5f 90       	pop	r5
    4d80:	4f 90       	pop	r4
    4d82:	08 95       	ret

00004d84 <writeFile>:
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
    4d84:	2f 92       	push	r2
    4d86:	3f 92       	push	r3
    4d88:	4f 92       	push	r4
    4d8a:	5f 92       	push	r5
    4d8c:	6f 92       	push	r6
    4d8e:	7f 92       	push	r7
    4d90:	8f 92       	push	r8
    4d92:	9f 92       	push	r9
    4d94:	af 92       	push	r10
    4d96:	bf 92       	push	r11
    4d98:	cf 92       	push	r12
    4d9a:	df 92       	push	r13
    4d9c:	ef 92       	push	r14
    4d9e:	ff 92       	push	r15
    4da0:	0f 93       	push	r16
    4da2:	1f 93       	push	r17
    4da4:	cf 93       	push	r28
    4da6:	df 93       	push	r29
    4da8:	cd b7       	in	r28, 0x3d	; 61
    4daa:	de b7       	in	r29, 0x3e	; 62
    4dac:	60 97       	sbiw	r28, 0x10	; 16
    4dae:	cd bf       	out	0x3d, r28	; 61
    4db0:	de bf       	out	0x3e, r29	; 62
    4db2:	fc 01       	movw	r30, r24
    4db4:	6d 83       	std	Y+5, r22	; 0x05
    4db6:	7e 83       	std	Y+6, r23	; 0x06
    4db8:	49 01       	movw	r8, r18
    4dba:	5a 01       	movw	r10, r20
unsigned int firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;


j = readFile (VERIFY, fileName);
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	bf 01       	movw	r22, r30
    4dc0:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <readFile>

if(j == 1) 
    4dc4:	81 30       	cpi	r24, 0x01	; 1
    4dc6:	09 f0       	breq	.+2      	; 0x4dca <writeFile+0x46>
    4dc8:	7b c0       	rjmp	.+246    	; 0x4ec0 <writeFile+0x13c>
{
  //File already exists, appending data
  appendFile = 1;
  //set cluster to write to as the first cluster of the file
  cluster = appendStartCluster;
    4dca:	00 91 74 50 	lds	r16, 0x5074
    4dce:	10 91 75 50 	lds	r17, 0x5075
    4dd2:	20 91 76 50 	lds	r18, 0x5076
    4dd6:	30 91 77 50 	lds	r19, 0x5077
    4dda:	09 83       	std	Y+1, r16	; 0x01
    4ddc:	1a 83       	std	Y+2, r17	; 0x02
    4dde:	2b 83       	std	Y+3, r18	; 0x03
    4de0:	3c 83       	std	Y+4, r19	; 0x04
  clusterCount=0;
    4de2:	cc 24       	eor	r12, r12
    4de4:	dd 24       	eor	r13, r13
    4de6:	76 01       	movw	r14, r12
    4de8:	24 01       	movw	r4, r8
    4dea:	35 01       	movw	r6, r10
    4dec:	48 01       	movw	r8, r16
    4dee:	59 01       	movw	r10, r18
  //iterate through the clusters in the file until the last incomplete cluster is found and set that to cluster
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    4df0:	c5 01       	movw	r24, r10
    4df2:	b4 01       	movw	r22, r8
    4df4:	40 e0       	ldi	r20, 0x00	; 0
    4df6:	00 e0       	ldi	r16, 0x00	; 0
    4df8:	10 e0       	ldi	r17, 0x00	; 0
    4dfa:	98 01       	movw	r18, r16
    4dfc:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    if(nextCluster == EOF) break;
    4e04:	8f 3f       	cpi	r24, 0xFF	; 255
    4e06:	1f ef       	ldi	r17, 0xFF	; 255
    4e08:	91 07       	cpc	r25, r17
    4e0a:	1f ef       	ldi	r17, 0xFF	; 255
    4e0c:	a1 07       	cpc	r26, r17
    4e0e:	1f ef       	ldi	r17, 0xFF	; 255
    4e10:	b1 07       	cpc	r27, r17
    4e12:	41 f0       	breq	.+16     	; 0x4e24 <writeFile+0xa0>
	cluster = nextCluster;
	clusterCount++;
    4e14:	08 94       	sec
    4e16:	c1 1c       	adc	r12, r1
    4e18:	d1 1c       	adc	r13, r1
    4e1a:	e1 1c       	adc	r14, r1
    4e1c:	f1 1c       	adc	r15, r1
  //iterate through the clusters in the file until the last incomplete cluster is found and set that to cluster
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    4e1e:	4c 01       	movw	r8, r24
    4e20:	5d 01       	movw	r10, r26
	clusterCount++;
  }
    4e22:	e6 cf       	rjmp	.-52     	; 0x4df0 <writeFile+0x6c>
    4e24:	89 82       	std	Y+1, r8	; 0x01
    4e26:	9a 82       	std	Y+2, r9	; 0x02
    4e28:	ab 82       	std	Y+3, r10	; 0x03
    4e2a:	bc 82       	std	Y+4, r11	; 0x04
    4e2c:	53 01       	movw	r10, r6
    4e2e:	42 01       	movw	r8, r4
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    4e30:	20 91 6a 50 	lds	r18, 0x506A
    4e34:	30 91 6b 50 	lds	r19, 0x506B
    4e38:	80 91 56 40 	lds	r24, 0x4056
    4e3c:	90 91 57 40 	lds	r25, 0x4057
    4e40:	60 90 56 40 	lds	r6, 0x4056
    4e44:	70 90 57 40 	lds	r7, 0x4057
    4e48:	bc 01       	movw	r22, r24
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	40 e0       	ldi	r20, 0x00	; 0
    4e50:	50 e0       	ldi	r21, 0x00	; 0
    4e52:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    4e56:	a7 01       	movw	r20, r14
    4e58:	96 01       	movw	r18, r12
    4e5a:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	40 91 52 40 	lds	r20, 0x4052
    4e66:	50 91 53 40 	lds	r21, 0x4053
    4e6a:	60 91 54 40 	lds	r22, 0x4054
    4e6e:	70 91 55 40 	lds	r23, 0x4055
    4e72:	8a 01       	movw	r16, r20
    4e74:	9b 01       	movw	r18, r22
    4e76:	08 1b       	sub	r16, r24
    4e78:	19 0b       	sbc	r17, r25
    4e7a:	2a 0b       	sbc	r18, r26
    4e7c:	3b 0b       	sbc	r19, r27
    4e7e:	c9 01       	movw	r24, r18
    4e80:	b8 01       	movw	r22, r16
    4e82:	93 01       	movw	r18, r6
    4e84:	40 e0       	ldi	r20, 0x00	; 0
    4e86:	50 e0       	ldi	r21, 0x00	; 0
    4e88:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    4e8c:	02 2f       	mov	r16, r18

//start writing data here

if(start){
  start = 0;
  startBlock = getFirstSector (cluster) + sector;
    4e8e:	69 81       	ldd	r22, Y+1	; 0x01
    4e90:	7a 81       	ldd	r23, Y+2	; 0x02
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	9c 81       	ldd	r25, Y+4	; 0x04
    4e96:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <getFirstSector>
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	20 2e       	mov	r2, r16
    4ea0:	33 24       	eor	r3, r3
    4ea2:	28 0e       	add	r2, r24
    4ea4:	39 1e       	adc	r3, r25
  SD_read_block (startBlock,SDBuffer);
    4ea6:	b1 01       	movw	r22, r2
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	49 e4       	ldi	r20, 0x49	; 73
    4eae:	5e e3       	ldi	r21, 0x3E	; 62
    4eb0:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
//unsigned char error, data;
unsigned int firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
    4eb4:	1f 86       	std	Y+15, r1	; 0x0f
    4eb6:	18 8a       	std	Y+16, r1	; 0x10
    4eb8:	19 86       	std	Y+9, r1	; 0x09
    4eba:	1a 86       	std	Y+10, r1	; 0x0a
	cluster = nextCluster;
	clusterCount++;
  }
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    4ebc:	11 e0       	ldi	r17, 0x01	; 1
    4ebe:	4c c0       	rjmp	.+152    	; 0x4f58 <writeFile+0x1d4>
}
else if(j == 2) 
    4ec0:	82 30       	cpi	r24, 0x02	; 2
    4ec2:	09 f4       	brne	.+2      	; 0x4ec6 <writeFile+0x142>
    4ec4:	0c c2       	rjmp	.+1048   	; 0x52de <writeFile+0x55a>

else
{
 //Creating File

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    4ec6:	82 e0       	ldi	r24, 0x02	; 2
    4ec8:	60 e0       	ldi	r22, 0x00	; 0
    4eca:	20 e0       	ldi	r18, 0x00	; 0
    4ecc:	30 e0       	ldi	r19, 0x00	; 0
    4ece:	a9 01       	movw	r20, r18
    4ed0:	0e 94 33 21 	call	0x4266	; 0x4266 <getSetFreeCluster>
  if(cluster > totalClusters)
    4ed4:	00 91 59 40 	lds	r16, 0x4059
    4ed8:	10 91 5a 40 	lds	r17, 0x405A
    4edc:	20 91 5b 40 	lds	r18, 0x405B
    4ee0:	30 91 5c 40 	lds	r19, 0x405C
    4ee4:	06 17       	cp	r16, r22
    4ee6:	17 07       	cpc	r17, r23
    4ee8:	28 07       	cpc	r18, r24
    4eea:	39 07       	cpc	r19, r25
    4eec:	40 f4       	brcc	.+16     	; 0x4efe <writeFile+0x17a>
     cluster = rootCluster;
    4eee:	60 91 5e 40 	lds	r22, 0x405E
    4ef2:	70 91 5f 40 	lds	r23, 0x405F
    4ef6:	80 91 60 40 	lds	r24, 0x4060
    4efa:	90 91 61 40 	lds	r25, 0x4061

  cluster = searchNextFreeCluster(cluster);
    4efe:	0e 94 7f 23 	call	0x46fe	; 0x46fe <searchNextFreeCluster>
    4f02:	69 83       	std	Y+1, r22	; 0x01
    4f04:	7a 83       	std	Y+2, r23	; 0x02
    4f06:	8b 83       	std	Y+3, r24	; 0x03
    4f08:	9c 83       	std	Y+4, r25	; 0x04
   if(cluster == 0)
    4f0a:	61 15       	cp	r22, r1
    4f0c:	71 05       	cpc	r23, r1
    4f0e:	81 05       	cpc	r24, r1
    4f10:	91 05       	cpc	r25, r1
    4f12:	09 f4       	brne	.+2      	; 0x4f16 <writeFile+0x192>
    4f14:	e6 c1       	rjmp	.+972    	; 0x52e2 <writeFile+0x55e>
   {
	   // No free cluster!
	  return 2;
   }
  getSetNextCluster(cluster, SET, EOF);   //set last cluster of the file, marked EOF
    4f16:	41 e0       	ldi	r20, 0x01	; 1
    4f18:	0f ef       	ldi	r16, 0xFF	; 255
    4f1a:	1f ef       	ldi	r17, 0xFF	; 255
    4f1c:	98 01       	movw	r18, r16
    4f1e:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    4f22:	2b 81       	ldd	r18, Y+3	; 0x03
    4f24:	3c 81       	ldd	r19, Y+4	; 0x04
    4f26:	29 87       	std	Y+9, r18	; 0x09
    4f28:	3a 87       	std	Y+10, r19	; 0x0a
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    4f2a:	89 81       	ldd	r24, Y+1	; 0x01
    4f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f2e:	8f 87       	std	Y+15, r24	; 0x0f
    4f30:	98 8b       	std	Y+16, r25	; 0x10
  fileSize = 0;
    4f32:	10 92 52 40 	sts	0x4052, r1
    4f36:	10 92 53 40 	sts	0x4053, r1
    4f3a:	10 92 54 40 	sts	0x4054, r1
    4f3e:	10 92 55 40 	sts	0x4055, r1
  startBlock = getFirstSector (cluster) + sector;
  SD_read_block (startBlock,SDBuffer);
  j = sector;
}
else{
  startBlock = getFirstSector (cluster);
    4f42:	69 81       	ldd	r22, Y+1	; 0x01
    4f44:	7a 81       	ldd	r23, Y+2	; 0x02
    4f46:	8b 81       	ldd	r24, Y+3	; 0x03
    4f48:	9c 81       	ldd	r25, Y+4	; 0x04
    4f4a:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <getFirstSector>
    4f4e:	dc 01       	movw	r26, r24
    4f50:	cb 01       	movw	r24, r22
    4f52:	1c 01       	movw	r2, r24
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    4f54:	10 e0       	ldi	r17, 0x00	; 0
  SD_read_block (startBlock,SDBuffer);
  j = sector;
}
else{
  startBlock = getFirstSector (cluster);
  j=0;
    4f56:	00 e0       	ldi	r16, 0x00	; 0
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
    4f58:	81 14       	cp	r8, r1
    4f5a:	91 04       	cpc	r9, r1
    4f5c:	a1 04       	cpc	r10, r1
    4f5e:	b1 04       	cpc	r11, r1
    4f60:	09 f4       	brne	.+2      	; 0x4f64 <writeFile+0x1e0>
    4f62:	8d c0       	rjmp	.+282    	; 0x507e <writeFile+0x2fa>
    4f64:	44 24       	eor	r4, r4
    4f66:	55 24       	eor	r5, r5
    4f68:	32 01       	movw	r6, r4
	//write 1 sector (512 bytes) to the cluster and increase file size by 512 bytes
	if(lengthOfData >= 512 ){
		 writtenData += 512;
		 dataToWrite = 512;
    4f6a:	c0 2e       	mov	r12, r16
    4f6c:	1b 87       	std	Y+11, r17	; 0x0b
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
	//write 1 sector (512 bytes) to the cluster and increase file size by 512 bytes
	if(lengthOfData >= 512 ){
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	89 16       	cp	r8, r25
    4f72:	92 e0       	ldi	r25, 0x02	; 2
    4f74:	99 06       	cpc	r9, r25
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	a9 06       	cpc	r10, r25
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	b9 06       	cpc	r11, r25
    4f7e:	88 f0       	brcs	.+34     	; 0x4fa2 <writeFile+0x21e>
		 writtenData += 512;
    4f80:	00 e0       	ldi	r16, 0x00	; 0
    4f82:	12 e0       	ldi	r17, 0x02	; 2
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	40 0e       	add	r4, r16
    4f8a:	51 1e       	adc	r5, r17
    4f8c:	62 1e       	adc	r6, r18
    4f8e:	73 1e       	adc	r7, r19
		 dataToWrite = 512;
		 lengthOfData -= 512;
    4f90:	80 e0       	ldi	r24, 0x00	; 0
    4f92:	9e ef       	ldi	r25, 0xFE	; 254
    4f94:	af ef       	ldi	r26, 0xFF	; 255
    4f96:	bf ef       	ldi	r27, 0xFF	; 255
    4f98:	88 0e       	add	r8, r24
    4f9a:	99 1e       	adc	r9, r25
    4f9c:	aa 1e       	adc	r10, r26
    4f9e:	bb 1e       	adc	r11, r27
    4fa0:	0c c0       	rjmp	.+24     	; 0x4fba <writeFile+0x236>
	}
	else{
		writtenData += lengthOfData;
    4fa2:	48 0c       	add	r4, r8
    4fa4:	59 1c       	adc	r5, r9
    4fa6:	6a 1c       	adc	r6, r10
    4fa8:	7b 1c       	adc	r7, r11
		dataToWrite = lengthOfData%512;
    4faa:	95 01       	movw	r18, r10
    4fac:	84 01       	movw	r16, r8
    4fae:	11 70       	andi	r17, 0x01	; 1
    4fb0:	20 70       	andi	r18, 0x00	; 0
    4fb2:	30 70       	andi	r19, 0x00	; 0
		lengthOfData = 0;
    4fb4:	88 24       	eor	r8, r8
    4fb6:	99 24       	eor	r9, r9
    4fb8:	54 01       	movw	r10, r8
	}		   
	fileSize += 512;	//always increment size of file by 512 to avoid losing data when appending to the file. Otherwise if there is data in an unfilled sector it will be overwritten.
    4fba:	80 91 52 40 	lds	r24, 0x4052
    4fbe:	90 91 53 40 	lds	r25, 0x4053
    4fc2:	a0 91 54 40 	lds	r26, 0x4054
    4fc6:	b0 91 55 40 	lds	r27, 0x4055
    4fca:	80 50       	subi	r24, 0x00	; 0
    4fcc:	9e 4f       	sbci	r25, 0xFE	; 254
    4fce:	af 4f       	sbci	r26, 0xFF	; 255
    4fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    4fd2:	80 93 52 40 	sts	0x4052, r24
    4fd6:	90 93 53 40 	sts	0x4053, r25
    4fda:	a0 93 54 40 	sts	0x4054, r26
    4fde:	b0 93 55 40 	sts	0x4055, r27
	SD_write_block (startBlock,dataArray+writtenData-dataToWrite,dataToWrite);
    4fe2:	b1 01       	movw	r22, r2
    4fe4:	80 e0       	ldi	r24, 0x00	; 0
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	a2 01       	movw	r20, r4
    4fea:	40 1b       	sub	r20, r16
    4fec:	51 0b       	sbc	r21, r17
    4fee:	ad 81       	ldd	r26, Y+5	; 0x05
    4ff0:	be 81       	ldd	r27, Y+6	; 0x06
    4ff2:	4a 0f       	add	r20, r26
    4ff4:	5b 1f       	adc	r21, r27
    4ff6:	98 01       	movw	r18, r16
    4ff8:	0e 94 cb 2a 	call	0x5596	; 0x5596 <SD_write_block>
	j++;
    4ffc:	c3 94       	inc	r12
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
    4ffe:	20 91 6a 50 	lds	r18, 0x506A
    5002:	30 91 6b 50 	lds	r19, 0x506B
    5006:	8c 2d       	mov	r24, r12
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	82 17       	cp	r24, r18
    500c:	93 07       	cpc	r25, r19
    500e:	29 f5       	brne	.+74     	; 0x505a <writeFile+0x2d6>
		j = 0; 
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    5010:	69 81       	ldd	r22, Y+1	; 0x01
    5012:	7a 81       	ldd	r23, Y+2	; 0x02
    5014:	8b 81       	ldd	r24, Y+3	; 0x03
    5016:	9c 81       	ldd	r25, Y+4	; 0x04
    5018:	0e 94 7f 23 	call	0x46fe	; 0x46fe <searchNextFreeCluster>
    501c:	6b 01       	movw	r12, r22
    501e:	7c 01       	movw	r14, r24
		if(cluster == 0){
    5020:	61 15       	cp	r22, r1
    5022:	71 05       	cpc	r23, r1
    5024:	81 05       	cpc	r24, r1
    5026:	91 05       	cpc	r25, r1
    5028:	09 f4       	brne	.+2      	; 0x502c <writeFile+0x2a8>
    502a:	5d c1       	rjmp	.+698    	; 0x52e6 <writeFile+0x562>
		  //No free cluster!
		  return 2;
	   }
		getSetNextCluster(prevCluster, SET, cluster);
    502c:	69 81       	ldd	r22, Y+1	; 0x01
    502e:	7a 81       	ldd	r23, Y+2	; 0x02
    5030:	8b 81       	ldd	r24, Y+3	; 0x03
    5032:	9c 81       	ldd	r25, Y+4	; 0x04
    5034:	41 e0       	ldi	r20, 0x01	; 1
    5036:	97 01       	movw	r18, r14
    5038:	86 01       	movw	r16, r12
    503a:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    503e:	c7 01       	movw	r24, r14
    5040:	b6 01       	movw	r22, r12
    5042:	41 e0       	ldi	r20, 0x01	; 1
    5044:	0f ef       	ldi	r16, 0xFF	; 255
    5046:	1f ef       	ldi	r17, 0xFF	; 255
    5048:	98 01       	movw	r18, r16
    504a:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
		j = 0; 
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    504e:	c9 82       	std	Y+1, r12	; 0x01
    5050:	da 82       	std	Y+2, r13	; 0x02
    5052:	eb 82       	std	Y+3, r14	; 0x03
    5054:	fc 82       	std	Y+4, r15	; 0x04
	fileSize += 512;	//always increment size of file by 512 to avoid losing data when appending to the file. Otherwise if there is data in an unfilled sector it will be overwritten.
	SD_write_block (startBlock,dataArray+writtenData-dataToWrite,dataToWrite);
	j++;
	//if the cluster is filled up, find the next free cluster and set it as the current cluster of the file, also link another free cluster to the file and mark it as the end of file cluster
	if(j == sectorPerCluster) {
		j = 0; 
    5056:	cc 24       	eor	r12, r12
    5058:	03 c0       	rjmp	.+6      	; 0x5060 <writeFile+0x2dc>
	   }
		getSetNextCluster(prevCluster, SET, cluster);
		getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
	}
	//otherwise increment the sector offset 
	else startBlock++;       
    505a:	08 94       	sec
    505c:	21 1c       	adc	r2, r1
    505e:	31 1c       	adc	r3, r1
	getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    5060:	82 e0       	ldi	r24, 0x02	; 2
    5062:	61 e0       	ldi	r22, 0x01	; 1
    5064:	29 81       	ldd	r18, Y+1	; 0x01
    5066:	3a 81       	ldd	r19, Y+2	; 0x02
    5068:	4b 81       	ldd	r20, Y+3	; 0x03
    506a:	5c 81       	ldd	r21, Y+4	; 0x04
    506c:	0e 94 33 21 	call	0x4266	; 0x4266 <getSetFreeCluster>
  startBlock = getFirstSector (cluster);
  j=0;
}
uint32_t writtenData = 0;
uint32_t dataToWrite = 0;
while(lengthOfData!=0){
    5070:	81 14       	cp	r8, r1
    5072:	91 04       	cpc	r9, r1
    5074:	a1 04       	cpc	r10, r1
    5076:	b1 04       	cpc	r11, r1
    5078:	09 f0       	breq	.+2      	; 0x507c <writeFile+0x2f8>
    507a:	79 cf       	rjmp	.-270    	; 0x4f6e <writeFile+0x1ea>
    507c:	1b 85       	ldd	r17, Y+11	; 0x0b
	//otherwise increment the sector offset 
	else startBlock++;       
	getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
}

if(appendFile)  //executes this loop if file is to be appended (updates file information and reduce count of free memory)
    507e:	11 23       	and	r17, r17
    5080:	09 f4       	brne	.+2      	; 0x5084 <writeFile+0x300>
    5082:	3f c0       	rjmp	.+126    	; 0x5102 <writeFile+0x37e>
{
  SD_read_block (appendFileSector,SDBuffer);    
    5084:	60 91 a3 50 	lds	r22, 0x50A3
    5088:	70 91 a4 50 	lds	r23, 0x50A4
    508c:	80 91 a5 50 	lds	r24, 0x50A5
    5090:	90 91 a6 50 	lds	r25, 0x50A6
    5094:	09 e4       	ldi	r16, 0x49	; 73
    5096:	1e e3       	ldi	r17, 0x3E	; 62
    5098:	a8 01       	movw	r20, r16
    509a:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>
  dir = (struct dir_Structure *) &SDBuffer[appendFileLocation]; 
    509e:	e0 91 4a 40 	lds	r30, 0x404A
    50a2:	f0 91 4b 40 	lds	r31, 0x404B
    50a6:	e0 0f       	add	r30, r16
    50a8:	f1 1f       	adc	r31, r17

  dir->lastAccessDate = 0;   //date of last access ignored
    50aa:	12 8a       	std	Z+18, r1	; 0x12
    50ac:	13 8a       	std	Z+19, r1	; 0x13
  //dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
  //dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
  extraMemory = fileSize - dir->fileSize;
    50ae:	80 91 52 40 	lds	r24, 0x4052
    50b2:	90 91 53 40 	lds	r25, 0x4053
    50b6:	a0 91 54 40 	lds	r26, 0x4054
    50ba:	b0 91 55 40 	lds	r27, 0x4055
    50be:	44 8d       	ldd	r20, Z+28	; 0x1c
    50c0:	55 8d       	ldd	r21, Z+29	; 0x1d
    50c2:	66 8d       	ldd	r22, Z+30	; 0x1e
    50c4:	77 8d       	ldd	r23, Z+31	; 0x1f
    50c6:	6c 01       	movw	r12, r24
    50c8:	7d 01       	movw	r14, r26
    50ca:	c4 1a       	sub	r12, r20
    50cc:	d5 0a       	sbc	r13, r21
    50ce:	e6 0a       	sbc	r14, r22
    50d0:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    50d2:	84 8f       	std	Z+28, r24	; 0x1c
    50d4:	95 8f       	std	Z+29, r25	; 0x1d
    50d6:	a6 8f       	std	Z+30, r26	; 0x1e
    50d8:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_write_block (appendFileSector,SDBuffer,512);
    50da:	60 91 a3 50 	lds	r22, 0x50A3
    50de:	70 91 a4 50 	lds	r23, 0x50A4
    50e2:	80 91 a5 50 	lds	r24, 0x50A5
    50e6:	90 91 a6 50 	lds	r25, 0x50A6
    50ea:	a8 01       	movw	r20, r16
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	32 e0       	ldi	r19, 0x02	; 2
    50f0:	0e 94 cb 2a 	call	0x5596	; 0x5596 <SD_write_block>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    50f4:	81 e0       	ldi	r24, 0x01	; 1
    50f6:	b7 01       	movw	r22, r14
    50f8:	a6 01       	movw	r20, r12
    50fa:	0e 94 32 24 	call	0x4864	; 0x4864 <freeMemoryUpdate>

 //File appended!
  return 0;
    50fe:	80 e0       	ldi	r24, 0x00	; 0
    5100:	f9 c0       	rjmp	.+498    	; 0x52f4 <writeFile+0x570>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    5102:	00 91 5e 40 	lds	r16, 0x405E
    5106:	10 91 5f 40 	lds	r17, 0x405F
    510a:	20 91 60 40 	lds	r18, 0x4060
    510e:	30 91 61 40 	lds	r19, 0x4061
    5112:	0b 87       	std	Y+11, r16	; 0x0b
    5114:	1c 87       	std	Y+12, r17	; 0x0c
    5116:	2d 87       	std	Y+13, r18	; 0x0d
    5118:	3e 87       	std	Y+14, r19	; 0x0e
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
unsigned char j, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    511a:	77 24       	eor	r7, r7
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    511c:	82 e9       	ldi	r24, 0x92	; 146
    511e:	90 e5       	ldi	r25, 0x50	; 80
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char* fileName,uint8_t* dataArray,uint32_t lengthOfData){
    5120:	0f 2e       	mov	r0, r31
    5122:	fb e0       	ldi	r31, 0x0B	; 11
    5124:	af 2e       	mov	r10, r31
    5126:	bb 24       	eor	r11, r11
    5128:	f0 2d       	mov	r31, r0
    512a:	a8 0e       	add	r10, r24
    512c:	b9 1e       	adc	r11, r25

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = Filename[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    512e:	88 24       	eor	r8, r8
    5130:	68 94       	set
    5132:	85 f8       	bld	r8, 5
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    5134:	0f 2e       	mov	r0, r31
    5136:	f9 e4       	ldi	r31, 0x49	; 73
    5138:	4f 2e       	mov	r4, r31
    513a:	fe e3       	ldi	r31, 0x3E	; 62
    513c:	5f 2e       	mov	r5, r31
    513e:	f0 2d       	mov	r31, r0
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    5140:	28 2e       	mov	r2, r24
    5142:	99 2e       	mov	r9, r25
    5144:	37 2c       	mov	r3, r7
    5146:	6f 84       	ldd	r6, Y+15	; 0x0f
    5148:	78 88       	ldd	r7, Y+16	; 0x10
    514a:	04 c0       	rjmp	.+8      	; 0x5154 <writeFile+0x3d0>
   }
   if(cluster == 0) {//Error in getting cluster 
	   return 4;
	}
   
   prevCluster = cluster;
    514c:	cb 86       	std	Y+11, r12	; 0x0b
    514e:	dc 86       	std	Y+12, r13	; 0x0c
    5150:	ed 86       	std	Y+13, r14	; 0x0d
    5152:	fe 86       	std	Y+14, r15	; 0x0e

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    5154:	6b 85       	ldd	r22, Y+11	; 0x0b
    5156:	7c 85       	ldd	r23, Y+12	; 0x0c
    5158:	8d 85       	ldd	r24, Y+13	; 0x0d
    515a:	9e 85       	ldd	r25, Y+14	; 0x0e
    515c:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <getFirstSector>
    5160:	6d 83       	std	Y+5, r22	; 0x05
    5162:	7e 83       	std	Y+6, r23	; 0x06
    5164:	8f 83       	std	Y+7, r24	; 0x07
    5166:	98 87       	std	Y+8, r25	; 0x08

   for(sector = 0; sector < sectorPerCluster; sector++)
    5168:	80 91 6a 50 	lds	r24, 0x506A
    516c:	90 91 6b 50 	lds	r25, 0x506B
    5170:	00 97       	sbiw	r24, 0x00	; 0
    5172:	09 f4       	brne	.+2      	; 0x5176 <writeFile+0x3f2>
    5174:	77 c0       	rjmp	.+238    	; 0x5264 <writeFile+0x4e0>
    5176:	19 82       	std	Y+1, r1	; 0x01
   {
     SD_read_block (firstSector + sector,SDBuffer);
    5178:	cd 80       	ldd	r12, Y+5	; 0x05
    517a:	de 80       	ldd	r13, Y+6	; 0x06
    517c:	ef 80       	ldd	r14, Y+7	; 0x07
    517e:	f8 84       	ldd	r15, Y+8	; 0x08
    5180:	19 81       	ldd	r17, Y+1	; 0x01
    5182:	c1 0e       	add	r12, r17
    5184:	d1 1c       	adc	r13, r1
    5186:	e1 1c       	adc	r14, r1
    5188:	f1 1c       	adc	r15, r1
    518a:	c7 01       	movw	r24, r14
    518c:	b6 01       	movw	r22, r12
    518e:	a2 01       	movw	r20, r4
    5190:	0e 94 80 2b 	call	0x5700	; 0x5700 <SD_read_block>
	

     for(int i=0; i<bytesPerSector; i+=32)
    5194:	80 91 56 40 	lds	r24, 0x4056
    5198:	90 91 57 40 	lds	r25, 0x4057
    519c:	00 97       	sbiw	r24, 0x00	; 0
    519e:	09 f4       	brne	.+2      	; 0x51a2 <writeFile+0x41e>
    51a0:	54 c0       	rjmp	.+168    	; 0x524a <writeFile+0x4c6>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    51a2:	33 20       	and	r3, r3
    51a4:	09 f0       	breq	.+2      	; 0x51a8 <writeFile+0x424>
    51a6:	a1 c0       	rjmp	.+322    	; 0x52ea <writeFile+0x566>
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    51a8:	a2 01       	movw	r20, r4
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
    51aa:	00 e0       	ldi	r16, 0x00	; 0
    51ac:	10 e0       	ldi	r17, 0x00	; 0
    51ae:	06 c0       	rjmp	.+12     	; 0x51bc <writeFile+0x438>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    51b0:	a8 01       	movw	r20, r16
    51b2:	47 5b       	subi	r20, 0xB7	; 183
    51b4:	51 4c       	sbci	r21, 0xC1	; 193
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    51b6:	22 23       	and	r18, r18
    51b8:	09 f0       	breq	.+2      	; 0x51bc <writeFile+0x438>
    51ba:	99 c0       	rjmp	.+306    	; 0x52ee <writeFile+0x56a>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    51bc:	da 01       	movw	r26, r20
    51be:	8c 91       	ld	r24, X
    51c0:	88 23       	and	r24, r24
    51c2:	21 f4       	brne	.+8      	; 0x51cc <writeFile+0x448>
    51c4:	e2 2d       	mov	r30, r2
    51c6:	f9 2d       	mov	r31, r9
    51c8:	da 01       	movw	r26, r20
    51ca:	04 c0       	rjmp	.+8      	; 0x51d4 <writeFile+0x450>
    51cc:	85 3e       	cpi	r24, 0xE5	; 229
    51ce:	d1 f3       	breq	.-12     	; 0x51c4 <writeFile+0x440>
    51d0:	23 2d       	mov	r18, r3
    51d2:	30 c0       	rjmp	.+96     	; 0x5234 <writeFile+0x4b0>
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = Filename[j];
    51d4:	81 91       	ld	r24, Z+
    51d6:	8d 93       	st	X+, r24
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    51d8:	ea 15       	cp	r30, r10
    51da:	fb 05       	cpc	r31, r11
    51dc:	d9 f7       	brne	.-10     	; 0x51d4 <writeFile+0x450>
  			dir->name[j] = Filename[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    51de:	fa 01       	movw	r30, r20
    51e0:	83 86       	std	Z+11, r8	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    51e2:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    51e4:	15 86       	std	Z+13, r1	; 0x0d
		  //dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
    51e6:	12 8a       	std	Z+18, r1	; 0x12
    51e8:	13 8a       	std	Z+19, r1	; 0x13
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
    51ea:	29 85       	ldd	r18, Y+9	; 0x09
    51ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    51ee:	24 8b       	std	Z+20, r18	; 0x14
    51f0:	35 8b       	std	Z+21, r19	; 0x15
		  dir->firstClusterLO = firstClusterLow;
    51f2:	62 8e       	std	Z+26, r6	; 0x1a
    51f4:	73 8e       	std	Z+27, r7	; 0x1b
		  dir->fileSize = fileSize;
    51f6:	80 91 52 40 	lds	r24, 0x4052
    51fa:	90 91 53 40 	lds	r25, 0x4053
    51fe:	a0 91 54 40 	lds	r26, 0x4054
    5202:	b0 91 55 40 	lds	r27, 0x4055
    5206:	84 8f       	std	Z+28, r24	; 0x1c
    5208:	95 8f       	std	Z+29, r25	; 0x1d
    520a:	a6 8f       	std	Z+30, r26	; 0x1e
    520c:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_write_block (firstSector + sector,SDBuffer,512);
    520e:	c7 01       	movw	r24, r14
    5210:	b6 01       	movw	r22, r12
    5212:	a2 01       	movw	r20, r4
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	32 e0       	ldi	r19, 0x02	; 2
    5218:	0e 94 cb 2a 	call	0x5596	; 0x5596 <SD_write_block>
		  fileCreatedFlag = 1;

		  //File Created!

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    521c:	40 91 52 40 	lds	r20, 0x4052
    5220:	50 91 53 40 	lds	r21, 0x4053
    5224:	60 91 54 40 	lds	r22, 0x4054
    5228:	70 91 55 40 	lds	r23, 0x4055
    522c:	81 e0       	ldi	r24, 0x01	; 1
    522e:	0e 94 32 24 	call	0x4864	; 0x4864 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_write_block (firstSector + sector,SDBuffer,512);
		  fileCreatedFlag = 1;
    5232:	21 e0       	ldi	r18, 0x01	; 1
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(int i=0; i<bytesPerSector; i+=32)
    5234:	00 5e       	subi	r16, 0xE0	; 224
    5236:	1f 4f       	sbci	r17, 0xFF	; 255
    5238:	80 91 56 40 	lds	r24, 0x4056
    523c:	90 91 57 40 	lds	r25, 0x4057
    5240:	08 17       	cp	r16, r24
    5242:	19 07       	cpc	r17, r25
    5244:	08 f4       	brcc	.+2      	; 0x5248 <writeFile+0x4c4>
    5246:	b4 cf       	rjmp	.-152    	; 0x51b0 <writeFile+0x42c>
    5248:	32 2e       	mov	r3, r18

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    524a:	09 81       	ldd	r16, Y+1	; 0x01
    524c:	0f 5f       	subi	r16, 0xFF	; 255
    524e:	09 83       	std	Y+1, r16	; 0x01
    5250:	20 91 6a 50 	lds	r18, 0x506A
    5254:	30 91 6b 50 	lds	r19, 0x506B
    5258:	80 2f       	mov	r24, r16
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	82 17       	cp	r24, r18
    525e:	93 07       	cpc	r25, r19
    5260:	08 f4       	brcc	.+2      	; 0x5264 <writeFile+0x4e0>
    5262:	8a cf       	rjmp	.-236    	; 0x5178 <writeFile+0x3f4>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    5264:	6b 85       	ldd	r22, Y+11	; 0x0b
    5266:	7c 85       	ldd	r23, Y+12	; 0x0c
    5268:	8d 85       	ldd	r24, Y+13	; 0x0d
    526a:	9e 85       	ldd	r25, Y+14	; 0x0e
    526c:	40 e0       	ldi	r20, 0x00	; 0
    526e:	00 e0       	ldi	r16, 0x00	; 0
    5270:	10 e0       	ldi	r17, 0x00	; 0
    5272:	98 01       	movw	r18, r16
    5274:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
    5278:	6b 01       	movw	r12, r22
    527a:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    527c:	67 3f       	cpi	r22, 0xF7	; 247
    527e:	1f ef       	ldi	r17, 0xFF	; 255
    5280:	71 07       	cpc	r23, r17
    5282:	1f ef       	ldi	r17, 0xFF	; 255
    5284:	81 07       	cpc	r24, r17
    5286:	1f e0       	ldi	r17, 0x0F	; 15
    5288:	91 07       	cpc	r25, r17
    528a:	08 f1       	brcs	.+66     	; 0x52ce <writeFile+0x54a>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    528c:	6f 3f       	cpi	r22, 0xFF	; 255
    528e:	2f ef       	ldi	r18, 0xFF	; 255
    5290:	72 07       	cpc	r23, r18
    5292:	2f ef       	ldi	r18, 0xFF	; 255
    5294:	82 07       	cpc	r24, r18
    5296:	2f ef       	ldi	r18, 0xFF	; 255
    5298:	92 07       	cpc	r25, r18
    529a:	59 f5       	brne	.+86     	; 0x52f2 <writeFile+0x56e>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    529c:	6b 85       	ldd	r22, Y+11	; 0x0b
    529e:	7c 85       	ldd	r23, Y+12	; 0x0c
    52a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    52a4:	0e 94 7f 23 	call	0x46fe	; 0x46fe <searchNextFreeCluster>
    52a8:	6b 01       	movw	r12, r22
    52aa:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    52ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    52ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    52b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    52b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    52b4:	41 e0       	ldi	r20, 0x01	; 1
    52b6:	97 01       	movw	r18, r14
    52b8:	86 01       	movw	r16, r12
    52ba:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    52be:	c7 01       	movw	r24, r14
    52c0:	b6 01       	movw	r22, r12
    52c2:	41 e0       	ldi	r20, 0x01	; 1
    52c4:	0f ef       	ldi	r16, 0xFF	; 255
    52c6:	1f ef       	ldi	r17, 0xFF	; 255
    52c8:	98 01       	movw	r18, r16
    52ca:	0e 94 a1 20 	call	0x4142	; 0x4142 <getSetNextCluster>
      {	
	    //End of Cluster Chain 
	    return 3;
      }
   }
   if(cluster == 0) {//Error in getting cluster 
    52ce:	c1 14       	cp	r12, r1
    52d0:	d1 04       	cpc	r13, r1
    52d2:	e1 04       	cpc	r14, r1
    52d4:	f1 04       	cpc	r15, r1
    52d6:	09 f0       	breq	.+2      	; 0x52da <writeFile+0x556>
    52d8:	39 cf       	rjmp	.-398    	; 0x514c <writeFile+0x3c8>
	   return 4;
    52da:	84 e0       	ldi	r24, 0x04	; 4
    52dc:	0b c0       	rjmp	.+22     	; 0x52f4 <writeFile+0x570>
  //using the size of the file and how many clusters it occupies, deduce the sector offset within the last incomplete cluster
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
   return 1; //invalid file name
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	09 c0       	rjmp	.+18     	; 0x52f4 <writeFile+0x570>

  cluster = searchNextFreeCluster(cluster);
   if(cluster == 0)
   {
	   // No free cluster!
	  return 2;
    52e2:	82 e0       	ldi	r24, 0x02	; 2
    52e4:	07 c0       	rjmp	.+14     	; 0x52f4 <writeFile+0x570>
 
		prevCluster = cluster;
		cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
		if(cluster == 0){
		  //No free cluster!
		  return 2;
    52e6:	82 e0       	ldi	r24, 0x02	; 2
    52e8:	05 c0       	rjmp	.+10     	; 0x52f4 <writeFile+0x570>
		//if file info successfully updated, return from function
		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	03 c0       	rjmp	.+6      	; 0x52f4 <writeFile+0x570>
    52ee:	80 e0       	ldi	r24, 0x00	; 0
    52f0:	01 c0       	rjmp	.+2      	; 0x52f4 <writeFile+0x570>
      } 

      else
      {	
	    //End of Cluster Chain 
	    return 3;
    52f2:	83 e0       	ldi	r24, 0x03	; 3
   
   prevCluster = cluster;
 }
 
 return 0;
}
    52f4:	60 96       	adiw	r28, 0x10	; 16
    52f6:	cd bf       	out	0x3d, r28	; 61
    52f8:	de bf       	out	0x3e, r29	; 62
    52fa:	df 91       	pop	r29
    52fc:	cf 91       	pop	r28
    52fe:	1f 91       	pop	r17
    5300:	0f 91       	pop	r16
    5302:	ff 90       	pop	r15
    5304:	ef 90       	pop	r14
    5306:	df 90       	pop	r13
    5308:	cf 90       	pop	r12
    530a:	bf 90       	pop	r11
    530c:	af 90       	pop	r10
    530e:	9f 90       	pop	r9
    5310:	8f 90       	pop	r8
    5312:	7f 90       	pop	r7
    5314:	6f 90       	pop	r6
    5316:	5f 90       	pop	r5
    5318:	4f 90       	pop	r4
    531a:	3f 90       	pop	r3
    531c:	2f 90       	pop	r2
    531e:	08 95       	ret

00005320 <SD_command>:
// 	data = SPIC.DATA; //read SPI data register to reset status flag
// 	return data;
// }

//the following command writes a command to the sd card and returns a response (if any) or 0xFF if no response
uint8_t SD_command(uint8_t cmd, uint32_t arg, uint8_t crc, int read) {
    5320:	8f 92       	push	r8
    5322:	9f 92       	push	r9
    5324:	af 92       	push	r10
    5326:	bf 92       	push	r11
    5328:	cf 92       	push	r12
    532a:	df 92       	push	r13
    532c:	ef 92       	push	r14
    532e:	ff 92       	push	r15
    5330:	0f 93       	push	r16
    5332:	1f 93       	push	r17
    5334:	cf 93       	push	r28
    5336:	df 93       	push	r29
    5338:	84 2e       	mov	r8, r20
    533a:	a5 2e       	mov	r10, r21
    533c:	c6 2e       	mov	r12, r22
    533e:	c7 2f       	mov	r28, r23
    5340:	d2 2f       	mov	r29, r18
    5342:	78 01       	movw	r14, r16
	
	SPI_write(SDHC_COMMAND_START | cmd);
    5344:	80 64       	ori	r24, 0x40	; 64
    5346:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(arg>>24 & LSBYTE_MASK);
    534a:	8c 2f       	mov	r24, r28
    534c:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(arg>>16 & LSBYTE_MASK);
    5350:	8c 2d       	mov	r24, r12
    5352:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(arg>>8 & LSBYTE_MASK);
    5356:	8a 2d       	mov	r24, r10
    5358:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(arg & LSBYTE_MASK);
    535c:	88 2d       	mov	r24, r8
    535e:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPI_write(crc);
    5362:	8d 2f       	mov	r24, r29
    5364:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	
	for(int i=0; i<read; i++){
    5368:	10 16       	cp	r1, r16
    536a:	11 06       	cpc	r1, r17
    536c:	64 f5       	brge	.+88     	; 0x53c6 <SD_command+0xa6>
    536e:	00 e0       	ldi	r16, 0x00	; 0
    5370:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(SDHC_DUMMY_BYTE);
    5372:	0f 2e       	mov	r0, r31
    5374:	fd e0       	ldi	r31, 0x0D	; 13
    5376:	cf 2e       	mov	r12, r31
    5378:	dd 24       	eor	r13, r13
    537a:	f0 2d       	mov	r31, r0
    537c:	0f 2e       	mov	r0, r31
    537e:	f5 e3       	ldi	r31, 0x35	; 53
    5380:	af 2e       	mov	r10, r31
    5382:	fe e3       	ldi	r31, 0x3E	; 62
    5384:	bf 2e       	mov	r11, r31
    5386:	f0 2d       	mov	r31, r0
    5388:	c8 01       	movw	r24, r16
    538a:	b6 01       	movw	r22, r12
    538c:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    5390:	ec 01       	movw	r28, r24
    5392:	8f ef       	ldi	r24, 0xFF	; 255
    5394:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5398:	f5 01       	movw	r30, r10
    539a:	ec 0f       	add	r30, r28
    539c:	fd 1f       	adc	r31, r29
    539e:	80 83       	st	Z, r24
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
    53a0:	80 81       	ld	r24, Z
    53a2:	8f 3f       	cpi	r24, 0xFF	; 255
    53a4:	49 f0       	breq	.+18     	; 0x53b8 <SD_command+0x98>
			Buffer[1] = Buffer[i%13];
    53a6:	fe 01       	movw	r30, r28
    53a8:	eb 5c       	subi	r30, 0xCB	; 203
    53aa:	f1 4c       	sbci	r31, 0xC1	; 193
    53ac:	80 81       	ld	r24, Z
    53ae:	80 93 36 3e 	sts	0x3E36, r24
			return Buffer[1];
    53b2:	80 91 36 3e 	lds	r24, 0x3E36
    53b6:	08 c0       	rjmp	.+16     	; 0x53c8 <SD_command+0xa8>
	SPI_write(arg>>16 & LSBYTE_MASK);
	SPI_write(arg>>8 & LSBYTE_MASK);
	SPI_write(arg & LSBYTE_MASK);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    53b8:	0f 5f       	subi	r16, 0xFF	; 255
    53ba:	1f 4f       	sbci	r17, 0xFF	; 255
    53bc:	0e 15       	cp	r16, r14
    53be:	1f 05       	cpc	r17, r15
    53c0:	19 f7       	brne	.-58     	; 0x5388 <SD_command+0x68>
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
			Buffer[1] = Buffer[i%13];
			return Buffer[1];
		}
	}
	return SDHC_DUMMY_BYTE;
    53c2:	8f ef       	ldi	r24, 0xFF	; 255
    53c4:	01 c0       	rjmp	.+2      	; 0x53c8 <SD_command+0xa8>
    53c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    53c8:	df 91       	pop	r29
    53ca:	cf 91       	pop	r28
    53cc:	1f 91       	pop	r17
    53ce:	0f 91       	pop	r16
    53d0:	ff 90       	pop	r15
    53d2:	ef 90       	pop	r14
    53d4:	df 90       	pop	r13
    53d6:	cf 90       	pop	r12
    53d8:	bf 90       	pop	r11
    53da:	af 90       	pop	r10
    53dc:	9f 90       	pop	r9
    53de:	8f 90       	pop	r8
    53e0:	08 95       	ret

000053e2 <SD_init>:
# include "SD_Card.h"

//the following function turns on power to the sd card and port expander and initializes the sdhc card in spi mode
//returns 0 if successful or 1 if not
uint8_t SD_init(void){
    53e2:	ff 92       	push	r15
    53e4:	0f 93       	push	r16
    53e6:	1f 93       	push	r17
    53e8:	cf 93       	push	r28
    53ea:	df 93       	push	r29
	
	ADCPower(TRUE);				//power up portEX
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	Ext1Power(TRUE);			//power up SD card
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Ext1Power>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    53f8:	8f ef       	ldi	r24, 0xFF	; 255
    53fa:	93 ec       	ldi	r25, 0xC3	; 195
    53fc:	a9 e0       	ldi	r26, 0x09	; 9
    53fe:	81 50       	subi	r24, 0x01	; 1
    5400:	90 40       	sbci	r25, 0x00	; 0
    5402:	a0 40       	sbci	r26, 0x00	; 0
    5404:	e1 f7       	brne	.-8      	; 0x53fe <SD_init+0x1c>
    5406:	00 c0       	rjmp	.+0      	; 0x5408 <SD_init+0x26>
    5408:	00 00       	nop
	_delay_ms(100);				//wait for bootup
	uint8_t errorCode = 0;
	
	PortEx_DIRSET(BIT3_bm, PS_BANKB); //SD card CS
    540a:	88 e0       	ldi	r24, 0x08	; 8
    540c:	60 e0       	ldi	r22, 0x00	; 0
    540e:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB); //pull SD cs high
    5412:	88 e0       	ldi	r24, 0x08	; 8
    5414:	60 e0       	ldi	r22, 0x00	; 0
    5416:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
	
	SPIInit2(SPI_MODE_0_gc, SPI_LOWEST_CLOCKRATE_PRESCALAR);
    541a:	80 e0       	ldi	r24, 0x00	; 0
    541c:	63 e0       	ldi	r22, 0x03	; 3
    541e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPIInit2>
	SPICS(TRUE);
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
    5428:	8a e0       	ldi	r24, 0x0A	; 10
    542a:	90 e0       	ldi	r25, 0x00	; 0
	
	//idle for 10 bytes / 80 clocks
	for(int i=0; i<10; i++){
		SPIC.DATA = SDHC_DUMMY_BYTE;
    542c:	e0 ec       	ldi	r30, 0xC0	; 192
    542e:	f8 e0       	ldi	r31, 0x08	; 8
    5430:	3f ef       	ldi	r19, 0xFF	; 255
		while(!(SPIC.STATUS & SPI_IF_bm));
		Buffer[12] = SPIC.DATA;
    5432:	a1 e4       	ldi	r26, 0x41	; 65
    5434:	be e3       	ldi	r27, 0x3E	; 62
	SPIInit2(SPI_MODE_0_gc, SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	//idle for 10 bytes / 80 clocks
	for(int i=0; i<10; i++){
		SPIC.DATA = SDHC_DUMMY_BYTE;
    5436:	33 83       	std	Z+3, r19	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    5438:	22 81       	ldd	r18, Z+2	; 0x02
    543a:	22 23       	and	r18, r18
    543c:	ec f7       	brge	.-6      	; 0x5438 <SD_init+0x56>
		Buffer[12] = SPIC.DATA;
    543e:	23 81       	ldd	r18, Z+3	; 0x03
    5440:	2c 93       	st	X, r18
    5442:	01 97       	sbiw	r24, 0x01	; 1
	
	SPIInit2(SPI_MODE_0_gc, SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	//idle for 10 bytes / 80 clocks
	for(int i=0; i<10; i++){
    5444:	c1 f7       	brne	.-16     	; 0x5436 <SD_init+0x54>
		SPIC.DATA = SDHC_DUMMY_BYTE;
		while(!(SPIC.STATUS & SPI_IF_bm));
		Buffer[12] = SPIC.DATA;
	}
	
	SPICS(FALSE);
    5446:	80 e0       	ldi	r24, 0x00	; 0
    5448:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    544c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5450:	88 e0       	ldi	r24, 0x08	; 8
    5452:	60 e0       	ldi	r22, 0x00	; 0
    5454:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    5458:	80 e0       	ldi	r24, 0x00	; 0
    545a:	63 e0       	ldi	r22, 0x03	; 3
    545c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPIInit2>
	SPICS(TRUE);
    5460:	81 e0       	ldi	r24, 0x01	; 1
    5462:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
	for(int i=0; SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){
    5466:	cb e0       	ldi	r28, 0x0B	; 11
    5468:	d0 e0       	ldi	r29, 0x00	; 0
    546a:	02 c0       	rjmp	.+4      	; 0x5470 <SD_init+0x8e>
    546c:	21 97       	sbiw	r28, 0x01	; 1
		//try command 10 times before timing out
		if (i >= 10) {
    546e:	69 f0       	breq	.+26     	; 0x548a <SD_init+0xa8>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
	for(int i=0; SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){
    5470:	80 e0       	ldi	r24, 0x00	; 0
    5472:	40 e0       	ldi	r20, 0x00	; 0
    5474:	50 e0       	ldi	r21, 0x00	; 0
    5476:	ba 01       	movw	r22, r20
    5478:	25 e9       	ldi	r18, 0x95	; 149
    547a:	08 e0       	ldi	r16, 0x08	; 8
    547c:	10 e0       	ldi	r17, 0x00	; 0
    547e:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
    5482:	81 30       	cpi	r24, 0x01	; 1
    5484:	99 f7       	brne	.-26     	; 0x546c <SD_init+0x8a>
uint8_t SD_init(void){
	
	ADCPower(TRUE);				//power up portEX
	Ext1Power(TRUE);			//power up SD card
	_delay_ms(100);				//wait for bootup
	uint8_t errorCode = 0;
    5486:	ff 24       	eor	r15, r15
    5488:	02 c0       	rjmp	.+4      	; 0x548e <SD_init+0xac>
	//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
	for(int i=0; SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){
		//try command 10 times before timing out
		if (i >= 10) {
			//there was no response to the first command
			errorCode = 1;
    548a:	ff 24       	eor	r15, r15
    548c:	f3 94       	inc	r15
    548e:	8f ef       	ldi	r24, 0xFF	; 255
    5490:	93 ec       	ldi	r25, 0xC3	; 195
    5492:	a9 e0       	ldi	r26, 0x09	; 9
    5494:	81 50       	subi	r24, 0x01	; 1
    5496:	90 40       	sbci	r25, 0x00	; 0
    5498:	a0 40       	sbci	r26, 0x00	; 0
    549a:	e1 f7       	brne	.-8      	; 0x5494 <SD_init+0xb2>
    549c:	00 c0       	rjmp	.+0      	; 0x549e <SD_init+0xbc>
    549e:	00 00       	nop
			break;
		}
	}
	_delay_ms(100);
	//check voltage range (used to indicate to sd card that we know it is an sdhc card)
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){
    54a0:	cb e0       	ldi	r28, 0x0B	; 11
    54a2:	d0 e0       	ldi	r29, 0x00	; 0
    54a4:	02 c0       	rjmp	.+4      	; 0x54aa <SD_init+0xc8>
    54a6:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    54a8:	69 f0       	breq	.+26     	; 0x54c4 <SD_init+0xe2>
			break;
		}
	}
	_delay_ms(100);
	//check voltage range (used to indicate to sd card that we know it is an sdhc card)
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){
    54aa:	88 e0       	ldi	r24, 0x08	; 8
    54ac:	4a ea       	ldi	r20, 0xAA	; 170
    54ae:	51 e0       	ldi	r21, 0x01	; 1
    54b0:	60 e0       	ldi	r22, 0x00	; 0
    54b2:	70 e0       	ldi	r23, 0x00	; 0
    54b4:	27 e8       	ldi	r18, 0x87	; 135
    54b6:	08 e0       	ldi	r16, 0x08	; 8
    54b8:	10 e0       	ldi	r17, 0x00	; 0
    54ba:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
    54be:	81 30       	cpi	r24, 0x01	; 1
    54c0:	91 f7       	brne	.-28     	; 0x54a6 <SD_init+0xc4>
    54c2:	02 c0       	rjmp	.+4      	; 0x54c8 <SD_init+0xe6>
		if (i >= 10) {
			//there was no response to the command
			errorCode = 1;
    54c4:	ff 24       	eor	r15, r15
    54c6:	f3 94       	inc	r15
    54c8:	c2 e0       	ldi	r28, 0x02	; 2
    54ca:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}
	}
	for(int i=0;i<4;i++){
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
    54cc:	05 e3       	ldi	r16, 0x35	; 53
    54ce:	1e e3       	ldi	r17, 0x3E	; 62
    54d0:	8f ef       	ldi	r24, 0xFF	; 255
    54d2:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    54d6:	f8 01       	movw	r30, r16
    54d8:	ec 0f       	add	r30, r28
    54da:	fd 1f       	adc	r31, r29
    54dc:	80 83       	st	Z, r24
    54de:	21 96       	adiw	r28, 0x01	; 1
			//there was no response to the command
			errorCode = 1;
			break;
		}
	}
	for(int i=0;i<4;i++){
    54e0:	c6 30       	cpi	r28, 0x06	; 6
    54e2:	d1 05       	cpc	r29, r1
    54e4:	a9 f7       	brne	.-22     	; 0x54d0 <SD_init+0xee>
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
	}
	//check that the response is the same as the argument sent in
	if((Buffer[4] != 0x01) || (Buffer[5] != 0xAA)){
    54e6:	80 91 39 3e 	lds	r24, 0x3E39
    54ea:	81 30       	cpi	r24, 0x01	; 1
    54ec:	29 f4       	brne	.+10     	; 0x54f8 <SD_init+0x116>
    54ee:	80 91 3a 3e 	lds	r24, 0x3E3A
    54f2:	8a 3a       	cpi	r24, 0xAA	; 170
    54f4:	21 f4       	brne	.+8      	; 0x54fe <SD_init+0x11c>
    54f6:	05 c0       	rjmp	.+10     	; 0x5502 <SD_init+0x120>
		//broken card or voltage out of operating range bounds
		errorCode = 1;
    54f8:	ff 24       	eor	r15, r15
    54fa:	f3 94       	inc	r15
    54fc:	02 c0       	rjmp	.+4      	; 0x5502 <SD_init+0x120>
    54fe:	ff 24       	eor	r15, r15
    5500:	f3 94       	inc	r15
	do{
		//next command will be advanced
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);
		//initialize the SDHC card in SPI mode
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);
	} while(Buffer[1]!= 0x00);	
    5502:	c6 e3       	ldi	r28, 0x36	; 54
    5504:	de e3       	ldi	r29, 0x3E	; 62
		errorCode = 1;
	}
	//send second initialization command
	do{
		//next command will be advanced
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);
    5506:	87 e3       	ldi	r24, 0x37	; 55
    5508:	40 e0       	ldi	r20, 0x00	; 0
    550a:	50 e0       	ldi	r21, 0x00	; 0
    550c:	ba 01       	movw	r22, r20
    550e:	2f ef       	ldi	r18, 0xFF	; 255
    5510:	08 e0       	ldi	r16, 0x08	; 8
    5512:	10 e0       	ldi	r17, 0x00	; 0
    5514:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
		//initialize the SDHC card in SPI mode
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);
    5518:	81 e0       	ldi	r24, 0x01	; 1
    551a:	40 e0       	ldi	r20, 0x00	; 0
    551c:	50 e0       	ldi	r21, 0x00	; 0
    551e:	60 e0       	ldi	r22, 0x00	; 0
    5520:	70 e4       	ldi	r23, 0x40	; 64
    5522:	2f ef       	ldi	r18, 0xFF	; 255
    5524:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
	} while(Buffer[1]!= 0x00);	
    5528:	88 81       	ld	r24, Y
    552a:	88 23       	and	r24, r24
    552c:	61 f7       	brne	.-40     	; 0x5506 <SD_init+0x124>
    552e:	cb e0       	ldi	r28, 0x0B	; 11
    5530:	d0 e0       	ldi	r29, 0x00	; 0
    5532:	02 c0       	rjmp	.+4      	; 0x5538 <SD_init+0x156>
    5534:	21 97       	sbiw	r28, 0x01	; 1
	
	//check OCR register
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){
		if (i >= 10) {
    5536:	61 f0       	breq	.+24     	; 0x5550 <SD_init+0x16e>
		//initialize the SDHC card in SPI mode
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);
	} while(Buffer[1]!= 0x00);	
	
	//check OCR register
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){
    5538:	8a e3       	ldi	r24, 0x3A	; 58
    553a:	40 e0       	ldi	r20, 0x00	; 0
    553c:	50 e0       	ldi	r21, 0x00	; 0
    553e:	ba 01       	movw	r22, r20
    5540:	2f ef       	ldi	r18, 0xFF	; 255
    5542:	08 e0       	ldi	r16, 0x08	; 8
    5544:	10 e0       	ldi	r17, 0x00	; 0
    5546:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
    554a:	88 23       	and	r24, r24
    554c:	99 f7       	brne	.-26     	; 0x5534 <SD_init+0x152>
    554e:	02 c0       	rjmp	.+4      	; 0x5554 <SD_init+0x172>
		if (i >= 10) {
			//there was no response to the command
			errorCode = 1;
    5550:	ff 24       	eor	r15, r15
    5552:	f3 94       	inc	r15
			break;
		}
	}		
	for (int i=0;i<4;i++){
    5554:	c0 e0       	ldi	r28, 0x00	; 0
    5556:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
    5558:	05 e3       	ldi	r16, 0x35	; 53
    555a:	1e e3       	ldi	r17, 0x3E	; 62
    555c:	8f ef       	ldi	r24, 0xFF	; 255
    555e:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5562:	f8 01       	movw	r30, r16
    5564:	ec 0f       	add	r30, r28
    5566:	fd 1f       	adc	r31, r29
    5568:	80 83       	st	Z, r24
			//there was no response to the command
			errorCode = 1;
			break;
		}
	}		
	for (int i=0;i<4;i++){
    556a:	21 96       	adiw	r28, 0x01	; 1
    556c:	c4 30       	cpi	r28, 0x04	; 4
    556e:	d1 05       	cpc	r29, r1
    5570:	a9 f7       	brne	.-22     	; 0x555c <SD_init+0x17a>
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if (Buffer[0] & 0x40){
    5572:	80 91 35 3e 	lds	r24, 0x3E35
		//the card is addressed in 512 byte sectors
	}
	SPICS(FALSE);
    5576:	80 e0       	ldi	r24, 0x00	; 0
    5578:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    557c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	//pull SD cs high
	PortEx_OUTSET(BIT3_bm, PS_BANKB);
    5580:	88 e0       	ldi	r24, 0x08	; 8
    5582:	60 e0       	ldi	r22, 0x00	; 0
    5584:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
	
	return errorCode;					
}
    5588:	8f 2d       	mov	r24, r15
    558a:	df 91       	pop	r29
    558c:	cf 91       	pop	r28
    558e:	1f 91       	pop	r17
    5590:	0f 91       	pop	r16
    5592:	ff 90       	pop	r15
    5594:	08 95       	ret

00005596 <SD_write_block>:
	}
	return SDHC_DUMMY_BYTE;
}

//the following command writes one sector to the sdhc card
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
    5596:	6f 92       	push	r6
    5598:	7f 92       	push	r7
    559a:	8f 92       	push	r8
    559c:	9f 92       	push	r9
    559e:	af 92       	push	r10
    55a0:	bf 92       	push	r11
    55a2:	cf 92       	push	r12
    55a4:	df 92       	push	r13
    55a6:	ef 92       	push	r14
    55a8:	ff 92       	push	r15
    55aa:	0f 93       	push	r16
    55ac:	1f 93       	push	r17
    55ae:	cf 93       	push	r28
    55b0:	df 93       	push	r29
    55b2:	4b 01       	movw	r8, r22
    55b4:	5c 01       	movw	r10, r24
    55b6:	74 2e       	mov	r7, r20
    55b8:	65 2e       	mov	r6, r21
    55ba:	69 01       	movw	r12, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    55bc:	88 e0       	ldi	r24, 0x08	; 8
    55be:	60 e0       	ldi	r22, 0x00	; 0
    55c0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    55c4:	80 e0       	ldi	r24, 0x00	; 0
    55c6:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
    55d0:	80 e0       	ldi	r24, 0x00	; 0
    55d2:	92 e0       	ldi	r25, 0x02	; 2
    55d4:	7c 01       	movw	r14, r24
    55d6:	ec 18       	sub	r14, r12
    55d8:	fd 08       	sbc	r15, r13
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    55da:	80 e0       	ldi	r24, 0x00	; 0
    55dc:	e8 16       	cp	r14, r24
    55de:	82 e0       	ldi	r24, 0x02	; 2
    55e0:	f8 06       	cpc	r15, r24
    55e2:	11 f4       	brne	.+4      	; 0x55e8 <SD_write_block+0x52>
    55e4:	ee 24       	eor	r14, r14
    55e6:	ff 24       	eor	r15, r15
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    55e8:	cb e0       	ldi	r28, 0x0B	; 11
    55ea:	d0 e0       	ldi	r29, 0x00	; 0
    55ec:	03 c0       	rjmp	.+6      	; 0x55f4 <SD_write_block+0x5e>
    55ee:	21 97       	sbiw	r28, 0x01	; 1
	if (i >= 10) {
    55f0:	09 f4       	brne	.+2      	; 0x55f4 <SD_write_block+0x5e>
    55f2:	ff cf       	rjmp	.-2      	; 0x55f2 <SD_write_block+0x5c>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    55f4:	88 e1       	ldi	r24, 0x18	; 24
    55f6:	b5 01       	movw	r22, r10
    55f8:	a4 01       	movw	r20, r8
    55fa:	2f ef       	ldi	r18, 0xFF	; 255
    55fc:	08 e0       	ldi	r16, 0x08	; 8
    55fe:	10 e0       	ldi	r17, 0x00	; 0
    5600:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
    5604:	88 23       	and	r24, r24
    5606:	99 f7       	brne	.-26     	; 0x55ee <SD_write_block+0x58>
	if (i >= 10) {
		//there was no response to the command
		while(1);
	}
}
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
    5608:	8f ef       	ldi	r24, 0xFF	; 255
    560a:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    560e:	80 93 35 3e 	sts	0x3E35, r24
SPI_write(SDHC_DATA_TOKEN);	//send data token
    5612:	8e ef       	ldi	r24, 0xFE	; 254
    5614:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    5618:	1c 14       	cp	r1, r12
    561a:	1d 04       	cpc	r1, r13
    561c:	bc f4       	brge	.+46     	; 0x564c <SD_write_block+0xb6>
    561e:	87 2c       	mov	r8, r7
    5620:	96 2c       	mov	r9, r6
    5622:	00 e0       	ldi	r16, 0x00	; 0
    5624:	10 e0       	ldi	r17, 0x00	; 0
Buffer[i%13] = SPI_write(data[i]);
    5626:	c8 01       	movw	r24, r16
    5628:	6d e0       	ldi	r22, 0x0D	; 13
    562a:	70 e0       	ldi	r23, 0x00	; 0
    562c:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    5630:	ec 01       	movw	r28, r24
    5632:	f4 01       	movw	r30, r8
    5634:	81 91       	ld	r24, Z+
    5636:	4f 01       	movw	r8, r30
    5638:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    563c:	cb 5c       	subi	r28, 0xCB	; 203
    563e:	d1 4c       	sbci	r29, 0xC1	; 193
    5640:	88 83       	st	Y, r24
		while(1);
	}
}
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
SPI_write(SDHC_DATA_TOKEN);	//send data token
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    5642:	0f 5f       	subi	r16, 0xFF	; 255
    5644:	1f 4f       	sbci	r17, 0xFF	; 255
    5646:	0c 15       	cp	r16, r12
    5648:	1d 05       	cpc	r17, r13
    564a:	69 f7       	brne	.-38     	; 0x5626 <SD_write_block+0x90>
Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    564c:	1e 14       	cp	r1, r14
    564e:	1f 04       	cpc	r1, r15
    5650:	ec f4       	brge	.+58     	; 0x568c <SD_write_block+0xf6>
    5652:	00 e0       	ldi	r16, 0x00	; 0
    5654:	10 e0       	ldi	r17, 0x00	; 0
	Buffer[i%13] = SPI_write(FILLER_BYTE);
    5656:	0f 2e       	mov	r0, r31
    5658:	fd e0       	ldi	r31, 0x0D	; 13
    565a:	cf 2e       	mov	r12, r31
    565c:	dd 24       	eor	r13, r13
    565e:	f0 2d       	mov	r31, r0
    5660:	0f 2e       	mov	r0, r31
    5662:	f5 e3       	ldi	r31, 0x35	; 53
    5664:	8f 2e       	mov	r8, r31
    5666:	fe e3       	ldi	r31, 0x3E	; 62
    5668:	9f 2e       	mov	r9, r31
    566a:	f0 2d       	mov	r31, r0
    566c:	c8 01       	movw	r24, r16
    566e:	b6 01       	movw	r22, r12
    5670:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    5674:	ec 01       	movw	r28, r24
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    567c:	c8 0d       	add	r28, r8
    567e:	d9 1d       	adc	r29, r9
    5680:	88 83       	st	Y, r24
Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
SPI_write(SDHC_DATA_TOKEN);	//send data token
for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    5682:	0f 5f       	subi	r16, 0xFF	; 255
    5684:	1f 4f       	sbci	r17, 0xFF	; 255
    5686:	0e 15       	cp	r16, r14
    5688:	1f 05       	cpc	r17, r15
    568a:	81 f7       	brne	.-32     	; 0x566c <SD_write_block+0xd6>
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
    568c:	8f ef       	ldi	r24, 0xFF	; 255
    568e:	80 93 35 3e 	sts	0x3E35, r24
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    5692:	c0 e0       	ldi	r28, 0x00	; 0
    5694:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
    5696:	05 e3       	ldi	r16, 0x35	; 53
    5698:	1e e3       	ldi	r17, 0x3E	; 62
    569a:	8f ef       	ldi	r24, 0xFF	; 255
    569c:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    56a0:	f8 01       	movw	r30, r16
    56a2:	80 83       	st	Z, r24
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    56a4:	21 96       	adiw	r28, 0x01	; 1
    56a6:	c2 30       	cpi	r28, 0x02	; 2
    56a8:	d1 05       	cpc	r29, r1
    56aa:	bc f3       	brlt	.-18     	; 0x569a <SD_write_block+0x104>
    56ac:	80 81       	ld	r24, Z
    56ae:	8f 3f       	cpi	r24, 0xFF	; 255
    56b0:	a1 f3       	breq	.-24     	; 0x569a <SD_write_block+0x104>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
	}
	if ((Buffer[0] & SDHC_RESPONSE_STATUS_MASK) == 0x02){
    56b2:	80 91 35 3e 	lds	r24, 0x3E35
		//data was written successfully
	}
	while(Buffer[0] != SDHC_DUMMY_BYTE) Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to finish internal processes
    56b6:	80 91 35 3e 	lds	r24, 0x3E35
    56ba:	8f 3f       	cpi	r24, 0xFF	; 255
    56bc:	49 f0       	breq	.+18     	; 0x56d0 <SD_write_block+0x13a>
    56be:	c5 e3       	ldi	r28, 0x35	; 53
    56c0:	de e3       	ldi	r29, 0x3E	; 62
    56c2:	8f ef       	ldi	r24, 0xFF	; 255
    56c4:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    56c8:	88 83       	st	Y, r24
    56ca:	88 81       	ld	r24, Y
    56cc:	8f 3f       	cpi	r24, 0xFF	; 255
    56ce:	c9 f7       	brne	.-14     	; 0x56c2 <SD_write_block+0x12c>
	SPICS(FALSE);
    56d0:	80 e0       	ldi	r24, 0x00	; 0
    56d2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    56d6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high	
    56da:	88 e0       	ldi	r24, 0x08	; 8
    56dc:	60 e0       	ldi	r22, 0x00	; 0
    56de:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
}
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
    56e6:	1f 91       	pop	r17
    56e8:	0f 91       	pop	r16
    56ea:	ff 90       	pop	r15
    56ec:	ef 90       	pop	r14
    56ee:	df 90       	pop	r13
    56f0:	cf 90       	pop	r12
    56f2:	bf 90       	pop	r11
    56f4:	af 90       	pop	r10
    56f6:	9f 90       	pop	r9
    56f8:	8f 90       	pop	r8
    56fa:	7f 90       	pop	r7
    56fc:	6f 90       	pop	r6
    56fe:	08 95       	ret

00005700 <SD_read_block>:

//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
    5700:	af 92       	push	r10
    5702:	bf 92       	push	r11
    5704:	cf 92       	push	r12
    5706:	df 92       	push	r13
    5708:	ef 92       	push	r14
    570a:	ff 92       	push	r15
    570c:	0f 93       	push	r16
    570e:	1f 93       	push	r17
    5710:	cf 93       	push	r28
    5712:	df 93       	push	r29
    5714:	6b 01       	movw	r12, r22
    5716:	7c 01       	movw	r14, r24
    5718:	b4 2e       	mov	r11, r20
    571a:	a5 2e       	mov	r10, r21
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    571c:	88 e0       	ldi	r24, 0x08	; 8
    571e:	60 e0       	ldi	r22, 0x00	; 0
    5720:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    5724:	80 e0       	ldi	r24, 0x00	; 0
    5726:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    572a:	81 e0       	ldi	r24, 0x01	; 1
    572c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    5730:	cb e0       	ldi	r28, 0x0B	; 11
    5732:	d0 e0       	ldi	r29, 0x00	; 0
    5734:	03 c0       	rjmp	.+6      	; 0x573c <SD_read_block+0x3c>
    5736:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    5738:	09 f4       	brne	.+2      	; 0x573c <SD_read_block+0x3c>
    573a:	ff cf       	rjmp	.-2      	; 0x573a <SD_read_block+0x3a>
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    573c:	81 e1       	ldi	r24, 0x11	; 17
    573e:	b7 01       	movw	r22, r14
    5740:	a6 01       	movw	r20, r12
    5742:	2f ef       	ldi	r18, 0xFF	; 255
    5744:	08 e0       	ldi	r16, 0x08	; 8
    5746:	10 e0       	ldi	r17, 0x00	; 0
    5748:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
    574c:	88 23       	and	r24, r24
    574e:	99 f7       	brne	.-26     	; 0x5736 <SD_read_block+0x36>
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
    5750:	80 91 35 3e 	lds	r24, 0x3E35
    5754:	8e 3f       	cpi	r24, 0xFE	; 254
    5756:	49 f0       	breq	.+18     	; 0x576a <SD_read_block+0x6a>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
    5758:	c5 e3       	ldi	r28, 0x35	; 53
    575a:	de e3       	ldi	r29, 0x3E	; 62
    575c:	8f ef       	ldi	r24, 0xFF	; 255
    575e:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5762:	88 83       	st	Y, r24
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
    5764:	88 81       	ld	r24, Y
    5766:	8e 3f       	cpi	r24, 0xFE	; 254
    5768:	c9 f7       	brne	.-14     	; 0x575c <SD_read_block+0x5c>
    576a:	0b 2d       	mov	r16, r11
    576c:	1a 2d       	mov	r17, r10
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    576e:	c0 e0       	ldi	r28, 0x00	; 0
    5770:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    5772:	8f ef       	ldi	r24, 0xFF	; 255
    5774:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5778:	f8 01       	movw	r30, r16
    577a:	81 93       	st	Z+, r24
    577c:	8f 01       	movw	r16, r30
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    577e:	21 96       	adiw	r28, 0x01	; 1
    5780:	f2 e0       	ldi	r31, 0x02	; 2
    5782:	c0 30       	cpi	r28, 0x00	; 0
    5784:	df 07       	cpc	r29, r31
    5786:	a9 f7       	brne	.-22     	; 0x5772 <SD_read_block+0x72>
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
    5788:	10 92 41 3e 	sts	0x3E41, r1
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    578c:	80 91 41 3e 	lds	r24, 0x3E41
    5790:	8f 3f       	cpi	r24, 0xFF	; 255
    5792:	49 f0       	breq	.+18     	; 0x57a6 <SD_read_block+0xa6>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
    5794:	c1 e4       	ldi	r28, 0x41	; 65
    5796:	de e3       	ldi	r29, 0x3E	; 62
    5798:	8f ef       	ldi	r24, 0xFF	; 255
    579a:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    579e:	88 83       	st	Y, r24
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    57a0:	88 81       	ld	r24, Y
    57a2:	8f 3f       	cpi	r24, 0xFF	; 255
    57a4:	c9 f7       	brne	.-14     	; 0x5798 <SD_read_block+0x98>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
	}

	SPICS(FALSE);
    57a6:	80 e0       	ldi	r24, 0x00	; 0
    57a8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    57ac:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    57b0:	88 e0       	ldi	r24, 0x08	; 8
    57b2:	60 e0       	ldi	r22, 0x00	; 0
    57b4:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
}
    57b8:	df 91       	pop	r29
    57ba:	cf 91       	pop	r28
    57bc:	1f 91       	pop	r17
    57be:	0f 91       	pop	r16
    57c0:	ff 90       	pop	r15
    57c2:	ef 90       	pop	r14
    57c4:	df 90       	pop	r13
    57c6:	cf 90       	pop	r12
    57c8:	bf 90       	pop	r11
    57ca:	af 90       	pop	r10
    57cc:	08 95       	ret

000057ce <SD_write_multiple_blocks>:

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    57ce:	2f 92       	push	r2
    57d0:	3f 92       	push	r3
    57d2:	4f 92       	push	r4
    57d4:	5f 92       	push	r5
    57d6:	6f 92       	push	r6
    57d8:	7f 92       	push	r7
    57da:	8f 92       	push	r8
    57dc:	9f 92       	push	r9
    57de:	af 92       	push	r10
    57e0:	bf 92       	push	r11
    57e2:	cf 92       	push	r12
    57e4:	df 92       	push	r13
    57e6:	ef 92       	push	r14
    57e8:	ff 92       	push	r15
    57ea:	0f 93       	push	r16
    57ec:	1f 93       	push	r17
    57ee:	cf 93       	push	r28
    57f0:	df 93       	push	r29
    57f2:	cd b7       	in	r28, 0x3d	; 61
    57f4:	de b7       	in	r29, 0x3e	; 62
    57f6:	2a 97       	sbiw	r28, 0x0a	; 10
    57f8:	cd bf       	out	0x3d, r28	; 61
    57fa:	de bf       	out	0x3e, r29	; 62
    57fc:	6b 01       	movw	r12, r22
    57fe:	7c 01       	movw	r14, r24
    5800:	4f 83       	std	Y+7, r20	; 0x07
    5802:	58 87       	std	Y+8, r21	; 0x08
    5804:	89 01       	movw	r16, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5806:	88 e0       	ldi	r24, 0x08	; 8
    5808:	60 e0       	ldi	r22, 0x00	; 0
    580a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    5814:	81 e0       	ldi	r24, 0x01	; 1
    5816:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
    581a:	c8 01       	movw	r24, r16
    581c:	11 23       	and	r17, r17
    581e:	14 f4       	brge	.+4      	; 0x5824 <SD_write_multiple_blocks+0x56>
    5820:	81 50       	subi	r24, 0x01	; 1
    5822:	9e 4f       	sbci	r25, 0xFE	; 254
    5824:	9c 01       	movw	r18, r24
    5826:	23 2f       	mov	r18, r19
    5828:	33 0f       	add	r19, r19
    582a:	33 0b       	sbc	r19, r19
    582c:	25 95       	asr	r18
    582e:	2b 83       	std	Y+3, r18	; 0x03
    5830:	3c 83       	std	Y+4, r19	; 0x04
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
    5832:	20 e0       	ldi	r18, 0x00	; 0
    5834:	32 e0       	ldi	r19, 0x02	; 2
    5836:	c8 01       	movw	r24, r16
    5838:	b9 01       	movw	r22, r18
    583a:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    583e:	29 01       	movw	r4, r18
    5840:	48 1a       	sub	r4, r24
    5842:	59 0a       	sbc	r5, r25
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	43 16       	cp	r4, r19
    5848:	32 e0       	ldi	r19, 0x02	; 2
    584a:	53 06       	cpc	r5, r19
    584c:	31 f0       	breq	.+12     	; 0x585a <SD_write_multiple_blocks+0x8c>
	else numSectors++;
    584e:	8b 81       	ldd	r24, Y+3	; 0x03
    5850:	9c 81       	ldd	r25, Y+4	; 0x04
    5852:	01 96       	adiw	r24, 0x01	; 1
    5854:	8b 83       	std	Y+3, r24	; 0x03
    5856:	9c 83       	std	Y+4, r25	; 0x04
    5858:	02 c0       	rjmp	.+4      	; 0x585e <SD_write_multiple_blocks+0x90>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    585a:	44 24       	eor	r4, r4
    585c:	55 24       	eor	r5, r5
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
    585e:	89 e1       	ldi	r24, 0x19	; 25
    5860:	b7 01       	movw	r22, r14
    5862:	a6 01       	movw	r20, r12
    5864:	2f ef       	ldi	r18, 0xFF	; 255
    5866:	08 e0       	ldi	r16, 0x08	; 8
    5868:	10 e0       	ldi	r17, 0x00	; 0
    586a:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
    586e:	88 23       	and	r24, r24
    5870:	b1 f7       	brne	.-20     	; 0x585e <SD_write_multiple_blocks+0x90>
	for (int j=0;j<numSectors;j++){
    5872:	eb 81       	ldd	r30, Y+3	; 0x03
    5874:	fc 81       	ldd	r31, Y+4	; 0x04
    5876:	1e 16       	cp	r1, r30
    5878:	1f 06       	cpc	r1, r31
    587a:	0c f0       	brlt	.+2      	; 0x587e <SD_write_multiple_blocks+0xb0>
    587c:	ac c0       	rjmp	.+344    	; 0x59d6 <SD_write_multiple_blocks+0x208>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    587e:	31 97       	sbiw	r30, 0x01	; 1
    5880:	ed 83       	std	Y+5, r30	; 0x05
    5882:	fe 83       	std	Y+6, r31	; 0x06
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    5884:	9f 01       	movw	r18, r30
    5886:	32 2f       	mov	r19, r18
    5888:	22 27       	eor	r18, r18
    588a:	33 0f       	add	r19, r19
    588c:	8f 81       	ldd	r24, Y+7	; 0x07
    588e:	98 85       	ldd	r25, Y+8	; 0x08
    5890:	89 83       	std	Y+1, r24	; 0x01
    5892:	9a 83       	std	Y+2, r25	; 0x02
    5894:	66 24       	eor	r6, r6
    5896:	77 24       	eor	r7, r7
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    5898:	0f 2e       	mov	r0, r31
    589a:	f6 e3       	ldi	r31, 0x36	; 54
    589c:	8f 2e       	mov	r8, r31
    589e:	fe e3       	ldi	r31, 0x3E	; 62
    58a0:	9f 2e       	mov	r9, r31
    58a2:	f0 2d       	mov	r31, r0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    58a4:	0f 2e       	mov	r0, r31
    58a6:	fc e0       	ldi	r31, 0x0C	; 12
    58a8:	cf 2e       	mov	r12, r31
    58aa:	dd 24       	eor	r13, r13
    58ac:	f0 2d       	mov	r31, r0
    58ae:	0f 2e       	mov	r0, r31
    58b0:	f5 e3       	ldi	r31, 0x35	; 53
    58b2:	af 2e       	mov	r10, r31
    58b4:	fe e3       	ldi	r31, 0x3E	; 62
    58b6:	bf 2e       	mov	r11, r31
    58b8:	f0 2d       	mov	r31, r0
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    58ba:	80 e0       	ldi	r24, 0x00	; 0
    58bc:	92 e0       	ldi	r25, 0x02	; 2
    58be:	1c 01       	movw	r2, r24
    58c0:	24 18       	sub	r2, r4
    58c2:	35 08       	sbc	r3, r5
	SPIDisable();
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
}

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    58c4:	ef 81       	ldd	r30, Y+7	; 0x07
    58c6:	f8 85       	ldd	r31, Y+8	; 0x08
    58c8:	e2 0f       	add	r30, r18
    58ca:	f3 1f       	adc	r31, r19
    58cc:	ef 83       	std	Y+7, r30	; 0x07
    58ce:	f8 87       	std	Y+8, r31	; 0x08
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    58d0:	8f ef       	ldi	r24, 0xFF	; 255
    58d2:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    58d6:	f4 01       	movw	r30, r8
    58d8:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
    58da:	8c ef       	ldi	r24, 0xFC	; 252
    58dc:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    58e0:	f4 01       	movw	r30, r8
    58e2:	80 83       	st	Z, r24
		if(j == (numSectors-1)){
    58e4:	2d 81       	ldd	r18, Y+5	; 0x05
    58e6:	3e 81       	ldd	r19, Y+6	; 0x06
    58e8:	26 15       	cp	r18, r6
    58ea:	37 05       	cpc	r19, r7
    58ec:	09 f0       	breq	.+2      	; 0x58f0 <SD_write_multiple_blocks+0x122>
    58ee:	41 c0       	rjmp	.+130    	; 0x5972 <SD_write_multiple_blocks+0x1a4>
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    58f0:	12 14       	cp	r1, r2
    58f2:	13 04       	cpc	r1, r3
    58f4:	cc f4       	brge	.+50     	; 0x5928 <SD_write_multiple_blocks+0x15a>
	SPIDisable();
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
}

//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    58f6:	ef 80       	ldd	r14, Y+7	; 0x07
    58f8:	f8 84       	ldd	r15, Y+8	; 0x08
    58fa:	00 e0       	ldi	r16, 0x00	; 0
    58fc:	10 e0       	ldi	r17, 0x00	; 0
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    58fe:	c8 01       	movw	r24, r16
    5900:	b6 01       	movw	r22, r12
    5902:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    5906:	89 87       	std	Y+9, r24	; 0x09
    5908:	9a 87       	std	Y+10, r25	; 0x0a
    590a:	f7 01       	movw	r30, r14
    590c:	81 91       	ld	r24, Z+
    590e:	7f 01       	movw	r14, r30
    5910:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5914:	e9 85       	ldd	r30, Y+9	; 0x09
    5916:	fa 85       	ldd	r31, Y+10	; 0x0a
    5918:	ea 0d       	add	r30, r10
    591a:	fb 1d       	adc	r31, r11
    591c:	80 83       	st	Z, r24
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    591e:	0f 5f       	subi	r16, 0xFF	; 255
    5920:	1f 4f       	sbci	r17, 0xFF	; 255
    5922:	02 15       	cp	r16, r2
    5924:	13 05       	cpc	r17, r3
    5926:	59 f7       	brne	.-42     	; 0x58fe <SD_write_multiple_blocks+0x130>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    5928:	14 14       	cp	r1, r4
    592a:	15 04       	cpc	r1, r5
    592c:	9c f4       	brge	.+38     	; 0x5954 <SD_write_multiple_blocks+0x186>
    592e:	00 e0       	ldi	r16, 0x00	; 0
    5930:	10 e0       	ldi	r17, 0x00	; 0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
    5932:	c8 01       	movw	r24, r16
    5934:	b6 01       	movw	r22, r12
    5936:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    593a:	7c 01       	movw	r14, r24
    593c:	80 e0       	ldi	r24, 0x00	; 0
    593e:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5942:	f5 01       	movw	r30, r10
    5944:	ee 0d       	add	r30, r14
    5946:	ff 1d       	adc	r31, r15
    5948:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    594a:	0f 5f       	subi	r16, 0xFF	; 255
    594c:	1f 4f       	sbci	r17, 0xFF	; 255
    594e:	04 15       	cp	r16, r4
    5950:	15 05       	cpc	r17, r5
    5952:	79 f7       	brne	.-34     	; 0x5932 <SD_write_multiple_blocks+0x164>
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
    5954:	8f ef       	ldi	r24, 0xFF	; 255
    5956:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    595a:	f4 01       	movw	r30, r8
    595c:	80 83       	st	Z, r24
    595e:	8f ef       	ldi	r24, 0xFF	; 255
    5960:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5964:	f4 01       	movw	r30, r8
    5966:	80 83       	st	Z, r24
		Buffer[1] = FILLER_BYTE;
    5968:	10 82       	st	Z, r1
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
    596a:	80 81       	ld	r24, Z
    596c:	8f 3f       	cpi	r24, 0xFF	; 255
    596e:	e1 f4       	brne	.+56     	; 0x59a8 <SD_write_multiple_blocks+0x1da>
    5970:	23 c0       	rjmp	.+70     	; 0x59b8 <SD_write_multiple_blocks+0x1ea>
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    5972:	e9 80       	ldd	r14, Y+1	; 0x01
    5974:	fa 80       	ldd	r15, Y+2	; 0x02
    5976:	00 e0       	ldi	r16, 0x00	; 0
    5978:	10 e0       	ldi	r17, 0x00	; 0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    597a:	c8 01       	movw	r24, r16
    597c:	b6 01       	movw	r22, r12
    597e:	0e 94 45 39 	call	0x728a	; 0x728a <__divmodhi4>
    5982:	89 87       	std	Y+9, r24	; 0x09
    5984:	9a 87       	std	Y+10, r25	; 0x0a
    5986:	f7 01       	movw	r30, r14
    5988:	81 91       	ld	r24, Z+
    598a:	7f 01       	movw	r14, r30
    598c:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5990:	e9 85       	ldd	r30, Y+9	; 0x09
    5992:	fa 85       	ldd	r31, Y+10	; 0x0a
    5994:	ea 0d       	add	r30, r10
    5996:	fb 1d       	adc	r31, r11
    5998:	80 83       	st	Z, r24
			for (int i=0;i<fillerBytes;i++){
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    599a:	0f 5f       	subi	r16, 0xFF	; 255
    599c:	1f 4f       	sbci	r17, 0xFF	; 255
    599e:	f2 e0       	ldi	r31, 0x02	; 2
    59a0:	00 30       	cpi	r16, 0x00	; 0
    59a2:	1f 07       	cpc	r17, r31
    59a4:	51 f7       	brne	.-44     	; 0x597a <SD_write_multiple_blocks+0x1ac>
    59a6:	d6 cf       	rjmp	.-84     	; 0x5954 <SD_write_multiple_blocks+0x186>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
    59a8:	8f ef       	ldi	r24, 0xFF	; 255
    59aa:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    59ae:	f4 01       	movw	r30, r8
    59b0:	80 83       	st	Z, r24
    59b2:	80 81       	ld	r24, Z
    59b4:	8f 3f       	cpi	r24, 0xFF	; 255
    59b6:	c1 f7       	brne	.-16     	; 0x59a8 <SD_write_multiple_blocks+0x1da>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
    59b8:	08 94       	sec
    59ba:	61 1c       	adc	r6, r1
    59bc:	71 1c       	adc	r7, r1
    59be:	29 81       	ldd	r18, Y+1	; 0x01
    59c0:	3a 81       	ldd	r19, Y+2	; 0x02
    59c2:	20 50       	subi	r18, 0x00	; 0
    59c4:	3e 4f       	sbci	r19, 0xFE	; 254
    59c6:	29 83       	std	Y+1, r18	; 0x01
    59c8:	3a 83       	std	Y+2, r19	; 0x02
    59ca:	8b 81       	ldd	r24, Y+3	; 0x03
    59cc:	9c 81       	ldd	r25, Y+4	; 0x04
    59ce:	68 16       	cp	r6, r24
    59d0:	79 06       	cpc	r7, r25
    59d2:	09 f0       	breq	.+2      	; 0x59d6 <SD_write_multiple_blocks+0x208>
    59d4:	7d cf       	rjmp	.-262    	; 0x58d0 <SD_write_multiple_blocks+0x102>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    59d6:	ee 24       	eor	r14, r14
    59d8:	ff 24       	eor	r15, r15
    59da:	68 94       	set
    59dc:	e2 f8       	bld	r14, 2
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    59de:	06 e3       	ldi	r16, 0x36	; 54
    59e0:	1e e3       	ldi	r17, 0x3E	; 62
    59e2:	8f ef       	ldi	r24, 0xFF	; 255
    59e4:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    59e8:	f8 01       	movw	r30, r16
    59ea:	80 83       	st	Z, r24
    59ec:	08 94       	sec
    59ee:	e1 08       	sbc	r14, r1
    59f0:	f1 08       	sbc	r15, r1
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received
	}
	for(int i=0;i<4;i++){
    59f2:	e1 14       	cp	r14, r1
    59f4:	f1 04       	cpc	r15, r1
    59f6:	a9 f7       	brne	.-22     	; 0x59e2 <SD_write_multiple_blocks+0x214>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
    59f8:	8d ef       	ldi	r24, 0xFD	; 253
    59fa:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    59fe:	80 93 36 3e 	sts	0x3E36, r24
    5a02:	ee 24       	eor	r14, r14
    5a04:	ff 24       	eor	r15, r15
    5a06:	68 94       	set
    5a08:	e2 f8       	bld	r14, 2
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    5a0a:	06 e3       	ldi	r16, 0x36	; 54
    5a0c:	1e e3       	ldi	r17, 0x3E	; 62
    5a0e:	8f ef       	ldi	r24, 0xFF	; 255
    5a10:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5a14:	f8 01       	movw	r30, r16
    5a16:	80 83       	st	Z, r24
    5a18:	08 94       	sec
    5a1a:	e1 08       	sbc	r14, r1
    5a1c:	f1 08       	sbc	r15, r1
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
	for(int i=0;i<4;i++){
    5a1e:	e1 14       	cp	r14, r1
    5a20:	f1 04       	cpc	r15, r1
    5a22:	a9 f7       	brne	.-22     	; 0x5a0e <SD_write_multiple_blocks+0x240>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}
	Buffer[1] = FILLER_BYTE;
    5a24:	10 92 36 3e 	sts	0x3E36, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    5a28:	80 91 36 3e 	lds	r24, 0x3E36
    5a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    5a2e:	51 f0       	breq	.+20     	; 0x5a44 <SD_write_multiple_blocks+0x276>
    5a30:	06 e3       	ldi	r16, 0x36	; 54
    5a32:	1e e3       	ldi	r17, 0x3E	; 62
    5a34:	8f ef       	ldi	r24, 0xFF	; 255
    5a36:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5a3a:	f8 01       	movw	r30, r16
    5a3c:	80 83       	st	Z, r24
    5a3e:	80 81       	ld	r24, Z
    5a40:	8f 3f       	cpi	r24, 0xFF	; 255
    5a42:	c1 f7       	brne	.-16     	; 0x5a34 <SD_write_multiple_blocks+0x266>
	SPICS(FALSE);
    5a44:	80 e0       	ldi	r24, 0x00	; 0
    5a46:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    5a4a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    5a4e:	88 e0       	ldi	r24, 0x08	; 8
    5a50:	60 e0       	ldi	r22, 0x00	; 0
    5a52:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
}
    5a56:	2a 96       	adiw	r28, 0x0a	; 10
    5a58:	cd bf       	out	0x3d, r28	; 61
    5a5a:	de bf       	out	0x3e, r29	; 62
    5a5c:	df 91       	pop	r29
    5a5e:	cf 91       	pop	r28
    5a60:	1f 91       	pop	r17
    5a62:	0f 91       	pop	r16
    5a64:	ff 90       	pop	r15
    5a66:	ef 90       	pop	r14
    5a68:	df 90       	pop	r13
    5a6a:	cf 90       	pop	r12
    5a6c:	bf 90       	pop	r11
    5a6e:	af 90       	pop	r10
    5a70:	9f 90       	pop	r9
    5a72:	8f 90       	pop	r8
    5a74:	7f 90       	pop	r7
    5a76:	6f 90       	pop	r6
    5a78:	5f 90       	pop	r5
    5a7a:	4f 90       	pop	r4
    5a7c:	3f 90       	pop	r3
    5a7e:	2f 90       	pop	r2
    5a80:	08 95       	ret

00005a82 <SD_read_multiple_blocks>:
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
    5a82:	2f 92       	push	r2
    5a84:	3f 92       	push	r3
    5a86:	4f 92       	push	r4
    5a88:	5f 92       	push	r5
    5a8a:	6f 92       	push	r6
    5a8c:	7f 92       	push	r7
    5a8e:	8f 92       	push	r8
    5a90:	9f 92       	push	r9
    5a92:	af 92       	push	r10
    5a94:	bf 92       	push	r11
    5a96:	cf 92       	push	r12
    5a98:	df 92       	push	r13
    5a9a:	ef 92       	push	r14
    5a9c:	ff 92       	push	r15
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	cf 93       	push	r28
    5aa4:	df 93       	push	r29
    5aa6:	6b 01       	movw	r12, r22
    5aa8:	7c 01       	movw	r14, r24
    5aaa:	c4 2f       	mov	r28, r20
    5aac:	85 2e       	mov	r8, r21
    5aae:	39 01       	movw	r6, r18
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    5ab0:	88 e0       	ldi	r24, 0x08	; 8
    5ab2:	60 e0       	ldi	r22, 0x00	; 0
    5ab4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    5ab8:	80 e0       	ldi	r24, 0x00	; 0
    5aba:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    5abe:	81 e0       	ldi	r24, 0x01	; 1
    5ac0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
    5ac4:	82 e1       	ldi	r24, 0x12	; 18
    5ac6:	b7 01       	movw	r22, r14
    5ac8:	a6 01       	movw	r20, r12
    5aca:	2f ef       	ldi	r18, 0xFF	; 255
    5acc:	08 e0       	ldi	r16, 0x08	; 8
    5ace:	10 e0       	ldi	r17, 0x00	; 0
    5ad0:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
    5ad4:	88 23       	and	r24, r24
    5ad6:	b1 f7       	brne	.-20     	; 0x5ac4 <SD_read_multiple_blocks+0x42>
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    5ad8:	16 14       	cp	r1, r6
    5ada:	17 04       	cpc	r1, r7
    5adc:	0c f0       	brlt	.+2      	; 0x5ae0 <SD_read_multiple_blocks+0x5e>
    5ade:	46 c0       	rjmp	.+140    	; 0x5b6c <SD_read_multiple_blocks+0xea>
    5ae0:	ac 2e       	mov	r10, r28
    5ae2:	b8 2c       	mov	r11, r8
    5ae4:	88 24       	eor	r8, r8
    5ae6:	99 24       	eor	r9, r9
		Buffer[1]=SDHC_DUMMY_BYTE;
    5ae8:	0f 2e       	mov	r0, r31
    5aea:	f6 e3       	ldi	r31, 0x36	; 54
    5aec:	cf 2e       	mov	r12, r31
    5aee:	fe e3       	ldi	r31, 0x3E	; 62
    5af0:	df 2e       	mov	r13, r31
    5af2:	f0 2d       	mov	r31, r0
    5af4:	ff 24       	eor	r15, r15
    5af6:	fa 94       	dec	r15
    5af8:	ef 2c       	mov	r14, r15
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    5afa:	0f 2e       	mov	r0, r31
    5afc:	f5 e3       	ldi	r31, 0x35	; 53
    5afe:	4f 2e       	mov	r4, r31
    5b00:	fe e3       	ldi	r31, 0x3E	; 62
    5b02:	5f 2e       	mov	r5, r31
    5b04:	f0 2d       	mov	r31, r0
    5b06:	12 01       	movw	r2, r4
    5b08:	08 94       	sec
    5b0a:	21 1c       	adc	r2, r1
    5b0c:	31 1c       	adc	r3, r1
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
    5b0e:	f6 01       	movw	r30, r12
    5b10:	e0 82       	st	Z, r14
		while(Buffer[1] != SDHC_DATA_TOKEN){
    5b12:	80 81       	ld	r24, Z
    5b14:	8e 3f       	cpi	r24, 0xFE	; 254
    5b16:	41 f0       	breq	.+16     	; 0x5b28 <SD_read_multiple_blocks+0xa6>
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
    5b18:	8f 2d       	mov	r24, r15
    5b1a:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5b1e:	f6 01       	movw	r30, r12
    5b20:	80 83       	st	Z, r24
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
    5b22:	80 81       	ld	r24, Z
    5b24:	8e 3f       	cpi	r24, 0xFE	; 254
    5b26:	c1 f7       	brne	.-16     	; 0x5b18 <SD_read_multiple_blocks+0x96>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    5b28:	85 01       	movw	r16, r10
    5b2a:	c0 e0       	ldi	r28, 0x00	; 0
    5b2c:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    5b2e:	8f 2d       	mov	r24, r15
    5b30:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5b34:	f8 01       	movw	r30, r16
    5b36:	81 93       	st	Z+, r24
    5b38:	8f 01       	movw	r16, r30
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    5b3a:	21 96       	adiw	r28, 0x01	; 1
    5b3c:	f2 e0       	ldi	r31, 0x02	; 2
    5b3e:	c0 30       	cpi	r28, 0x00	; 0
    5b40:	df 07       	cpc	r29, r31
    5b42:	a9 f7       	brne	.-22     	; 0x5b2e <SD_read_multiple_blocks+0xac>
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    5b44:	8f 2d       	mov	r24, r15
    5b46:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5b4a:	f2 01       	movw	r30, r4
    5b4c:	80 83       	st	Z, r24
    5b4e:	8f 2d       	mov	r24, r15
    5b50:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5b54:	f1 01       	movw	r30, r2
    5b56:	80 83       	st	Z, r24
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in
	for (int j=0;j<numOfBlocks;j++){
    5b58:	08 94       	sec
    5b5a:	81 1c       	adc	r8, r1
    5b5c:	91 1c       	adc	r9, r1
    5b5e:	80 e0       	ldi	r24, 0x00	; 0
    5b60:	92 e0       	ldi	r25, 0x02	; 2
    5b62:	a8 0e       	add	r10, r24
    5b64:	b9 1e       	adc	r11, r25
    5b66:	86 14       	cp	r8, r6
    5b68:	97 04       	cpc	r9, r7
    5b6a:	89 f6       	brne	.-94     	; 0x5b0e <SD_read_multiple_blocks+0x8c>
		
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
		}
	}
	SD_command(SDHC_CMD_STOP_TRANSMISSION,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//send command to stop reading data
    5b6c:	8c e0       	ldi	r24, 0x0C	; 12
    5b6e:	40 e0       	ldi	r20, 0x00	; 0
    5b70:	50 e0       	ldi	r21, 0x00	; 0
    5b72:	ba 01       	movw	r22, r20
    5b74:	2f ef       	ldi	r18, 0xFF	; 255
    5b76:	08 e0       	ldi	r16, 0x08	; 8
    5b78:	10 e0       	ldi	r17, 0x00	; 0
    5b7a:	0e 94 90 29 	call	0x5320	; 0x5320 <SD_command>
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//read the stuff byte
    5b7e:	8f ef       	ldi	r24, 0xFF	; 255
    5b80:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5b84:	80 93 35 3e 	sts	0x3E35, r24
	Buffer[1] = FILLER_BYTE;
    5b88:	10 92 36 3e 	sts	0x3E36, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    5b8c:	80 91 36 3e 	lds	r24, 0x3E36
    5b90:	8f 3f       	cpi	r24, 0xFF	; 255
    5b92:	49 f0       	breq	.+18     	; 0x5ba6 <SD_read_multiple_blocks+0x124>
    5b94:	c6 e3       	ldi	r28, 0x36	; 54
    5b96:	de e3       	ldi	r29, 0x3E	; 62
    5b98:	8f ef       	ldi	r24, 0xFF	; 255
    5b9a:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
    5b9e:	88 83       	st	Y, r24
    5ba0:	88 81       	ld	r24, Y
    5ba2:	8f 3f       	cpi	r24, 0xFF	; 255
    5ba4:	c9 f7       	brne	.-14     	; 0x5b98 <SD_read_multiple_blocks+0x116>
	SPICS(FALSE);
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
    5ba8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    5bac:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    5bb0:	88 e0       	ldi	r24, 0x08	; 8
    5bb2:	60 e0       	ldi	r22, 0x00	; 0
    5bb4:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
}
    5bb8:	df 91       	pop	r29
    5bba:	cf 91       	pop	r28
    5bbc:	1f 91       	pop	r17
    5bbe:	0f 91       	pop	r16
    5bc0:	ff 90       	pop	r15
    5bc2:	ef 90       	pop	r14
    5bc4:	df 90       	pop	r13
    5bc6:	cf 90       	pop	r12
    5bc8:	bf 90       	pop	r11
    5bca:	af 90       	pop	r10
    5bcc:	9f 90       	pop	r9
    5bce:	8f 90       	pop	r8
    5bd0:	7f 90       	pop	r7
    5bd2:	6f 90       	pop	r6
    5bd4:	5f 90       	pop	r5
    5bd6:	4f 90       	pop	r4
    5bd8:	3f 90       	pop	r3
    5bda:	2f 90       	pop	r2
    5bdc:	08 95       	ret

00005bde <SD_disable>:
//this function deselects the sd card and turns off power to the port expander and the sd card
void SD_disable(){
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //pull SD card CS high
    5bde:	88 e0       	ldi	r24, 0x08	; 8
    5be0:	60 e0       	ldi	r22, 0x00	; 0
    5be2:	0e 94 64 05 	call	0xac8	; 0xac8 <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);
    5be6:	88 e0       	ldi	r24, 0x08	; 8
    5be8:	60 e0       	ldi	r22, 0x00	; 0
    5bea:	0e 94 b7 04 	call	0x96e	; 0x96e <PortEx_OUTSET>
	SPIInit(SPI_MODE_0_gc);
    5bee:	80 e0       	ldi	r24, 0x00	; 0
    5bf0:	0e 94 c4 03 	call	0x788	; 0x788 <SPIInit>
	SPICS(TRUE);
    5bf4:	81 e0       	ldi	r24, 0x01	; 1
    5bf6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPI_write(SDHC_DUMMY_BYTE);	//must write a byte to spi when cd card cs is high to have sd card release MISO line
    5bfa:	8f ef       	ldi	r24, 0xFF	; 255
    5bfc:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_write>
	SPICS(FALSE);	//stop spi
    5c00:	80 e0       	ldi	r24, 0x00	; 0
    5c02:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SPICS>
	SPIDisable();
    5c06:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <SPIDisable>
	
	ADCPower(FALSE);		//turn off portEX power
    5c0a:	80 e0       	ldi	r24, 0x00	; 0
    5c0c:	0e 94 ba 05 	call	0xb74	; 0xb74 <ADCPower>
	Ext1Power(FALSE);			//power down SD card
    5c10:	80 e0       	ldi	r24, 0x00	; 0
    5c12:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Ext1Power>
}
    5c16:	08 95       	ret

00005c18 <__muldi3>:
    5c18:	a0 e3       	ldi	r26, 0x30	; 48
    5c1a:	b0 e0       	ldi	r27, 0x00	; 0
    5c1c:	e2 e1       	ldi	r30, 0x12	; 18
    5c1e:	fe e2       	ldi	r31, 0x2E	; 46
    5c20:	0c 94 ab 39 	jmp	0x7356	; 0x7356 <__prologue_saves__+0x4>
    5c24:	29 8f       	std	Y+25, r18	; 0x19
    5c26:	3a 8f       	std	Y+26, r19	; 0x1a
    5c28:	4b 8f       	std	Y+27, r20	; 0x1b
    5c2a:	5c 8f       	std	Y+28, r21	; 0x1c
    5c2c:	6d 8f       	std	Y+29, r22	; 0x1d
    5c2e:	7e 8f       	std	Y+30, r23	; 0x1e
    5c30:	8f 8f       	std	Y+31, r24	; 0x1f
    5c32:	98 a3       	lds	r25, 0x58
    5c34:	a9 8a       	std	Y+17, r10	; 0x11
    5c36:	ba 8a       	std	Y+18, r11	; 0x12
    5c38:	cb 8a       	std	Y+19, r12	; 0x13
    5c3a:	dc 8a       	std	Y+20, r13	; 0x14
    5c3c:	ed 8a       	std	Y+21, r14	; 0x15
    5c3e:	fe 8a       	std	Y+22, r15	; 0x16
    5c40:	0f 8b       	std	Y+23, r16	; 0x17
    5c42:	18 8f       	std	Y+24, r17	; 0x18
    5c44:	09 8d       	ldd	r16, Y+25	; 0x19
    5c46:	1a 8d       	ldd	r17, Y+26	; 0x1a
    5c48:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5c4a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5c4c:	09 a3       	lds	r16, 0x59
    5c4e:	1a a3       	lds	r17, 0x5a
    5c50:	2b a3       	lds	r18, 0x5b
    5c52:	3c a3       	lds	r19, 0x5c
    5c54:	68 01       	movw	r12, r16
    5c56:	79 01       	movw	r14, r18
    5c58:	8f ef       	ldi	r24, 0xFF	; 255
    5c5a:	9f ef       	ldi	r25, 0xFF	; 255
    5c5c:	a0 e0       	ldi	r26, 0x00	; 0
    5c5e:	b0 e0       	ldi	r27, 0x00	; 0
    5c60:	c8 22       	and	r12, r24
    5c62:	d9 22       	and	r13, r25
    5c64:	ea 22       	and	r14, r26
    5c66:	fb 22       	and	r15, r27
    5c68:	89 01       	movw	r16, r18
    5c6a:	22 27       	eor	r18, r18
    5c6c:	33 27       	eor	r19, r19
    5c6e:	09 a7       	lds	r16, 0x79
    5c70:	1a a7       	lds	r17, 0x7a
    5c72:	2b a7       	lds	r18, 0x7b
    5c74:	3c a7       	lds	r19, 0x7c
    5c76:	09 89       	ldd	r16, Y+17	; 0x11
    5c78:	1a 89       	ldd	r17, Y+18	; 0x12
    5c7a:	2b 89       	ldd	r18, Y+19	; 0x13
    5c7c:	3c 89       	ldd	r19, Y+20	; 0x14
    5c7e:	0d a3       	lds	r16, 0x5d
    5c80:	1e a3       	lds	r17, 0x5e
    5c82:	2f a3       	lds	r18, 0x5f
    5c84:	38 a7       	lds	r19, 0x78
    5c86:	48 01       	movw	r8, r16
    5c88:	59 01       	movw	r10, r18
    5c8a:	88 22       	and	r8, r24
    5c8c:	99 22       	and	r9, r25
    5c8e:	aa 22       	and	r10, r26
    5c90:	bb 22       	and	r11, r27
    5c92:	29 01       	movw	r4, r18
    5c94:	66 24       	eor	r6, r6
    5c96:	77 24       	eor	r7, r7
    5c98:	c5 01       	movw	r24, r10
    5c9a:	b4 01       	movw	r22, r8
    5c9c:	a7 01       	movw	r20, r14
    5c9e:	96 01       	movw	r18, r12
    5ca0:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    5ca4:	6d a7       	lds	r22, 0x7d
    5ca6:	7e a7       	lds	r23, 0x7e
    5ca8:	8f a7       	lds	r24, 0x7f
    5caa:	98 ab       	sts	0x58, r25
    5cac:	c3 01       	movw	r24, r6
    5cae:	b2 01       	movw	r22, r4
    5cb0:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    5cb4:	6b 01       	movw	r12, r22
    5cb6:	7c 01       	movw	r14, r24
    5cb8:	c5 01       	movw	r24, r10
    5cba:	b4 01       	movw	r22, r8
    5cbc:	29 a5       	lds	r18, 0x69
    5cbe:	3a a5       	lds	r19, 0x6a
    5cc0:	4b a5       	lds	r20, 0x6b
    5cc2:	5c a5       	lds	r21, 0x6c
    5cc4:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    5cc8:	4b 01       	movw	r8, r22
    5cca:	5c 01       	movw	r10, r24
    5ccc:	c3 01       	movw	r24, r6
    5cce:	b2 01       	movw	r22, r4
    5cd0:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    5cd4:	ab 01       	movw	r20, r22
    5cd6:	bc 01       	movw	r22, r24
    5cd8:	c8 0c       	add	r12, r8
    5cda:	d9 1c       	adc	r13, r9
    5cdc:	ea 1c       	adc	r14, r10
    5cde:	fb 1c       	adc	r15, r11
    5ce0:	0d a5       	lds	r16, 0x6d
    5ce2:	1e a5       	lds	r17, 0x6e
    5ce4:	2f a5       	lds	r18, 0x6f
    5ce6:	38 a9       	sts	0x48, r19
    5ce8:	c9 01       	movw	r24, r18
    5cea:	aa 27       	eor	r26, r26
    5cec:	bb 27       	eor	r27, r27
    5cee:	c8 0e       	add	r12, r24
    5cf0:	d9 1e       	adc	r13, r25
    5cf2:	ea 1e       	adc	r14, r26
    5cf4:	fb 1e       	adc	r15, r27
    5cf6:	c8 14       	cp	r12, r8
    5cf8:	d9 04       	cpc	r13, r9
    5cfa:	ea 04       	cpc	r14, r10
    5cfc:	fb 04       	cpc	r15, r11
    5cfe:	20 f4       	brcc	.+8      	; 0x5d08 <__muldi3+0xf0>
    5d00:	40 50       	subi	r20, 0x00	; 0
    5d02:	50 40       	sbci	r21, 0x00	; 0
    5d04:	6f 4f       	sbci	r22, 0xFF	; 255
    5d06:	7f 4f       	sbci	r23, 0xFF	; 255
    5d08:	c7 01       	movw	r24, r14
    5d0a:	aa 27       	eor	r26, r26
    5d0c:	bb 27       	eor	r27, r27
    5d0e:	84 0f       	add	r24, r20
    5d10:	95 1f       	adc	r25, r21
    5d12:	a6 1f       	adc	r26, r22
    5d14:	b7 1f       	adc	r27, r23
    5d16:	8d 83       	std	Y+5, r24	; 0x05
    5d18:	9e 83       	std	Y+6, r25	; 0x06
    5d1a:	af 83       	std	Y+7, r26	; 0x07
    5d1c:	b8 87       	std	Y+8, r27	; 0x08
    5d1e:	76 01       	movw	r14, r12
    5d20:	dd 24       	eor	r13, r13
    5d22:	cc 24       	eor	r12, r12
    5d24:	4d a5       	lds	r20, 0x6d
    5d26:	5e a5       	lds	r21, 0x6e
    5d28:	6f a5       	lds	r22, 0x6f
    5d2a:	78 a9       	sts	0x48, r23
    5d2c:	60 70       	andi	r22, 0x00	; 0
    5d2e:	70 70       	andi	r23, 0x00	; 0
    5d30:	c4 0e       	add	r12, r20
    5d32:	d5 1e       	adc	r13, r21
    5d34:	e6 1e       	adc	r14, r22
    5d36:	f7 1e       	adc	r15, r23
    5d38:	c9 82       	std	Y+1, r12	; 0x01
    5d3a:	da 82       	std	Y+2, r13	; 0x02
    5d3c:	eb 82       	std	Y+3, r14	; 0x03
    5d3e:	fc 82       	std	Y+4, r15	; 0x04
    5d40:	1c 2d       	mov	r17, r12
    5d42:	0a 81       	ldd	r16, Y+2	; 0x02
    5d44:	8b 80       	ldd	r8, Y+3	; 0x03
    5d46:	4c 80       	ldd	r4, Y+4	; 0x04
    5d48:	8d 87       	std	Y+13, r24	; 0x0d
    5d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    5d4c:	8e 87       	std	Y+14, r24	; 0x0e
    5d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    5d50:	8f 87       	std	Y+15, r24	; 0x0f
    5d52:	88 85       	ldd	r24, Y+8	; 0x08
    5d54:	88 8b       	std	Y+16, r24	; 0x10
    5d56:	2d 89       	ldd	r18, Y+21	; 0x15
    5d58:	3e 89       	ldd	r19, Y+22	; 0x16
    5d5a:	4f 89       	ldd	r20, Y+23	; 0x17
    5d5c:	58 8d       	ldd	r21, Y+24	; 0x18
    5d5e:	69 a1       	lds	r22, 0x49
    5d60:	7a a1       	lds	r23, 0x4a
    5d62:	8b a1       	lds	r24, 0x4b
    5d64:	9c a1       	lds	r25, 0x4c
    5d66:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    5d6a:	6b 01       	movw	r12, r22
    5d6c:	7c 01       	movw	r14, r24
    5d6e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5d70:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5d72:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5d74:	58 a1       	lds	r21, 0x48
    5d76:	6d a1       	lds	r22, 0x4d
    5d78:	7e a1       	lds	r23, 0x4e
    5d7a:	8f a1       	lds	r24, 0x4f
    5d7c:	98 a5       	lds	r25, 0x68
    5d7e:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    5d82:	dc 01       	movw	r26, r24
    5d84:	cb 01       	movw	r24, r22
    5d86:	c8 0e       	add	r12, r24
    5d88:	d9 1e       	adc	r13, r25
    5d8a:	ea 1e       	adc	r14, r26
    5d8c:	fb 1e       	adc	r15, r27
    5d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d92:	af 85       	ldd	r26, Y+15	; 0x0f
    5d94:	b8 89       	ldd	r27, Y+16	; 0x10
    5d96:	8c 0d       	add	r24, r12
    5d98:	9d 1d       	adc	r25, r13
    5d9a:	ae 1d       	adc	r26, r14
    5d9c:	bf 1d       	adc	r27, r15
    5d9e:	8d 87       	std	Y+13, r24	; 0x0d
    5da0:	9e 87       	std	Y+14, r25	; 0x0e
    5da2:	af 87       	std	Y+15, r26	; 0x0f
    5da4:	b8 8b       	std	Y+16, r27	; 0x10
    5da6:	68 2f       	mov	r22, r24
    5da8:	7e 85       	ldd	r23, Y+14	; 0x0e
    5daa:	21 2f       	mov	r18, r17
    5dac:	30 2f       	mov	r19, r16
    5dae:	48 2d       	mov	r20, r8
    5db0:	54 2d       	mov	r21, r4
    5db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5db4:	98 89       	ldd	r25, Y+16	; 0x10
    5db6:	e0 96       	adiw	r28, 0x30	; 48
    5db8:	e0 e1       	ldi	r30, 0x10	; 16
    5dba:	0c 94 c4 39 	jmp	0x7388	; 0x7388 <__epilogue_restores__+0x4>

00005dbe <__ashldi3>:
    5dbe:	cf 92       	push	r12
    5dc0:	df 92       	push	r13
    5dc2:	ef 92       	push	r14
    5dc4:	ff 92       	push	r15
    5dc6:	0f 93       	push	r16
    5dc8:	cf 93       	push	r28
    5dca:	df 93       	push	r29
    5dcc:	cd b7       	in	r28, 0x3d	; 61
    5dce:	de b7       	in	r29, 0x3e	; 62
    5dd0:	60 97       	sbiw	r28, 0x10	; 16
    5dd2:	cd bf       	out	0x3d, r28	; 61
    5dd4:	de bf       	out	0x3e, r29	; 62
    5dd6:	00 23       	and	r16, r16
    5dd8:	09 f4       	brne	.+2      	; 0x5ddc <__ashldi3+0x1e>
    5dda:	5a c0       	rjmp	.+180    	; 0x5e90 <__ashldi3+0xd2>
    5ddc:	29 87       	std	Y+9, r18	; 0x09
    5dde:	3a 87       	std	Y+10, r19	; 0x0a
    5de0:	4b 87       	std	Y+11, r20	; 0x0b
    5de2:	5c 87       	std	Y+12, r21	; 0x0c
    5de4:	6d 87       	std	Y+13, r22	; 0x0d
    5de6:	7e 87       	std	Y+14, r23	; 0x0e
    5de8:	8f 87       	std	Y+15, r24	; 0x0f
    5dea:	98 8b       	std	Y+16, r25	; 0x10
    5dec:	80 e2       	ldi	r24, 0x20	; 32
    5dee:	80 1b       	sub	r24, r16
    5df0:	49 85       	ldd	r20, Y+9	; 0x09
    5df2:	5a 85       	ldd	r21, Y+10	; 0x0a
    5df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5df8:	18 16       	cp	r1, r24
    5dfa:	b4 f0       	brlt	.+44     	; 0x5e28 <__ashldi3+0x6a>
    5dfc:	19 82       	std	Y+1, r1	; 0x01
    5dfe:	1a 82       	std	Y+2, r1	; 0x02
    5e00:	1b 82       	std	Y+3, r1	; 0x03
    5e02:	1c 82       	std	Y+4, r1	; 0x04
    5e04:	99 27       	eor	r25, r25
    5e06:	87 fd       	sbrc	r24, 7
    5e08:	90 95       	com	r25
    5e0a:	90 95       	com	r25
    5e0c:	81 95       	neg	r24
    5e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e10:	04 c0       	rjmp	.+8      	; 0x5e1a <__ashldi3+0x5c>
    5e12:	44 0f       	add	r20, r20
    5e14:	55 1f       	adc	r21, r21
    5e16:	66 1f       	adc	r22, r22
    5e18:	77 1f       	adc	r23, r23
    5e1a:	8a 95       	dec	r24
    5e1c:	d2 f7       	brpl	.-12     	; 0x5e12 <__ashldi3+0x54>
    5e1e:	4d 83       	std	Y+5, r20	; 0x05
    5e20:	5e 83       	std	Y+6, r21	; 0x06
    5e22:	6f 83       	std	Y+7, r22	; 0x07
    5e24:	78 87       	std	Y+8, r23	; 0x08
    5e26:	2c c0       	rjmp	.+88     	; 0x5e80 <__ashldi3+0xc2>
    5e28:	6a 01       	movw	r12, r20
    5e2a:	7b 01       	movw	r14, r22
    5e2c:	00 2e       	mov	r0, r16
    5e2e:	04 c0       	rjmp	.+8      	; 0x5e38 <__ashldi3+0x7a>
    5e30:	cc 0c       	add	r12, r12
    5e32:	dd 1c       	adc	r13, r13
    5e34:	ee 1c       	adc	r14, r14
    5e36:	ff 1c       	adc	r15, r15
    5e38:	0a 94       	dec	r0
    5e3a:	d2 f7       	brpl	.-12     	; 0x5e30 <__ashldi3+0x72>
    5e3c:	c9 82       	std	Y+1, r12	; 0x01
    5e3e:	da 82       	std	Y+2, r13	; 0x02
    5e40:	eb 82       	std	Y+3, r14	; 0x03
    5e42:	fc 82       	std	Y+4, r15	; 0x04
    5e44:	6a 01       	movw	r12, r20
    5e46:	7b 01       	movw	r14, r22
    5e48:	04 c0       	rjmp	.+8      	; 0x5e52 <__ashldi3+0x94>
    5e4a:	f6 94       	lsr	r15
    5e4c:	e7 94       	ror	r14
    5e4e:	d7 94       	ror	r13
    5e50:	c7 94       	ror	r12
    5e52:	8a 95       	dec	r24
    5e54:	d2 f7       	brpl	.-12     	; 0x5e4a <__ashldi3+0x8c>
    5e56:	d7 01       	movw	r26, r14
    5e58:	c6 01       	movw	r24, r12
    5e5a:	4d 85       	ldd	r20, Y+13	; 0x0d
    5e5c:	5e 85       	ldd	r21, Y+14	; 0x0e
    5e5e:	6f 85       	ldd	r22, Y+15	; 0x0f
    5e60:	78 89       	ldd	r23, Y+16	; 0x10
    5e62:	04 c0       	rjmp	.+8      	; 0x5e6c <__ashldi3+0xae>
    5e64:	44 0f       	add	r20, r20
    5e66:	55 1f       	adc	r21, r21
    5e68:	66 1f       	adc	r22, r22
    5e6a:	77 1f       	adc	r23, r23
    5e6c:	0a 95       	dec	r16
    5e6e:	d2 f7       	brpl	.-12     	; 0x5e64 <__ashldi3+0xa6>
    5e70:	84 2b       	or	r24, r20
    5e72:	95 2b       	or	r25, r21
    5e74:	a6 2b       	or	r26, r22
    5e76:	b7 2b       	or	r27, r23
    5e78:	8d 83       	std	Y+5, r24	; 0x05
    5e7a:	9e 83       	std	Y+6, r25	; 0x06
    5e7c:	af 83       	std	Y+7, r26	; 0x07
    5e7e:	b8 87       	std	Y+8, r27	; 0x08
    5e80:	29 81       	ldd	r18, Y+1	; 0x01
    5e82:	3a 81       	ldd	r19, Y+2	; 0x02
    5e84:	4b 81       	ldd	r20, Y+3	; 0x03
    5e86:	5c 81       	ldd	r21, Y+4	; 0x04
    5e88:	6d 81       	ldd	r22, Y+5	; 0x05
    5e8a:	7e 81       	ldd	r23, Y+6	; 0x06
    5e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    5e8e:	98 85       	ldd	r25, Y+8	; 0x08
    5e90:	60 96       	adiw	r28, 0x10	; 16
    5e92:	cd bf       	out	0x3d, r28	; 61
    5e94:	de bf       	out	0x3e, r29	; 62
    5e96:	df 91       	pop	r29
    5e98:	cf 91       	pop	r28
    5e9a:	0f 91       	pop	r16
    5e9c:	ff 90       	pop	r15
    5e9e:	ef 90       	pop	r14
    5ea0:	df 90       	pop	r13
    5ea2:	cf 90       	pop	r12
    5ea4:	08 95       	ret

00005ea6 <__ashrdi3>:
    5ea6:	0f 93       	push	r16
    5ea8:	cf 93       	push	r28
    5eaa:	df 93       	push	r29
    5eac:	cd b7       	in	r28, 0x3d	; 61
    5eae:	de b7       	in	r29, 0x3e	; 62
    5eb0:	60 97       	sbiw	r28, 0x10	; 16
    5eb2:	cd bf       	out	0x3d, r28	; 61
    5eb4:	de bf       	out	0x3e, r29	; 62
    5eb6:	00 23       	and	r16, r16
    5eb8:	09 f4       	brne	.+2      	; 0x5ebc <__ashrdi3+0x16>
    5eba:	56 c0       	rjmp	.+172    	; 0x5f68 <__ashrdi3+0xc2>
    5ebc:	29 87       	std	Y+9, r18	; 0x09
    5ebe:	3a 87       	std	Y+10, r19	; 0x0a
    5ec0:	4b 87       	std	Y+11, r20	; 0x0b
    5ec2:	5c 87       	std	Y+12, r21	; 0x0c
    5ec4:	6d 87       	std	Y+13, r22	; 0x0d
    5ec6:	7e 87       	std	Y+14, r23	; 0x0e
    5ec8:	8f 87       	std	Y+15, r24	; 0x0f
    5eca:	98 8b       	std	Y+16, r25	; 0x10
    5ecc:	20 e2       	ldi	r18, 0x20	; 32
    5ece:	20 1b       	sub	r18, r16
    5ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ed4:	af 85       	ldd	r26, Y+15	; 0x0f
    5ed6:	b8 89       	ldd	r27, Y+16	; 0x10
    5ed8:	ac 01       	movw	r20, r24
    5eda:	bd 01       	movw	r22, r26
    5edc:	12 16       	cp	r1, r18
    5ede:	b4 f0       	brlt	.+44     	; 0x5f0c <__ashrdi3+0x66>
    5ee0:	77 0f       	add	r23, r23
    5ee2:	44 0b       	sbc	r20, r20
    5ee4:	54 2f       	mov	r21, r20
    5ee6:	ba 01       	movw	r22, r20
    5ee8:	4d 83       	std	Y+5, r20	; 0x05
    5eea:	5e 83       	std	Y+6, r21	; 0x06
    5eec:	6f 83       	std	Y+7, r22	; 0x07
    5eee:	78 87       	std	Y+8, r23	; 0x08
    5ef0:	33 27       	eor	r19, r19
    5ef2:	27 fd       	sbrc	r18, 7
    5ef4:	30 95       	com	r19
    5ef6:	30 95       	com	r19
    5ef8:	21 95       	neg	r18
    5efa:	3f 4f       	sbci	r19, 0xFF	; 255
    5efc:	04 c0       	rjmp	.+8      	; 0x5f06 <__ashrdi3+0x60>
    5efe:	b5 95       	asr	r27
    5f00:	a7 95       	ror	r26
    5f02:	97 95       	ror	r25
    5f04:	87 95       	ror	r24
    5f06:	2a 95       	dec	r18
    5f08:	d2 f7       	brpl	.-12     	; 0x5efe <__ashrdi3+0x58>
    5f0a:	22 c0       	rjmp	.+68     	; 0x5f50 <__ashrdi3+0xaa>
    5f0c:	00 2e       	mov	r0, r16
    5f0e:	04 c0       	rjmp	.+8      	; 0x5f18 <__ashrdi3+0x72>
    5f10:	75 95       	asr	r23
    5f12:	67 95       	ror	r22
    5f14:	57 95       	ror	r21
    5f16:	47 95       	ror	r20
    5f18:	0a 94       	dec	r0
    5f1a:	d2 f7       	brpl	.-12     	; 0x5f10 <__ashrdi3+0x6a>
    5f1c:	4d 83       	std	Y+5, r20	; 0x05
    5f1e:	5e 83       	std	Y+6, r21	; 0x06
    5f20:	6f 83       	std	Y+7, r22	; 0x07
    5f22:	78 87       	std	Y+8, r23	; 0x08
    5f24:	04 c0       	rjmp	.+8      	; 0x5f2e <__ashrdi3+0x88>
    5f26:	88 0f       	add	r24, r24
    5f28:	99 1f       	adc	r25, r25
    5f2a:	aa 1f       	adc	r26, r26
    5f2c:	bb 1f       	adc	r27, r27
    5f2e:	2a 95       	dec	r18
    5f30:	d2 f7       	brpl	.-12     	; 0x5f26 <__ashrdi3+0x80>
    5f32:	49 85       	ldd	r20, Y+9	; 0x09
    5f34:	5a 85       	ldd	r21, Y+10	; 0x0a
    5f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f3a:	04 c0       	rjmp	.+8      	; 0x5f44 <__ashrdi3+0x9e>
    5f3c:	76 95       	lsr	r23
    5f3e:	67 95       	ror	r22
    5f40:	57 95       	ror	r21
    5f42:	47 95       	ror	r20
    5f44:	0a 95       	dec	r16
    5f46:	d2 f7       	brpl	.-12     	; 0x5f3c <__ashrdi3+0x96>
    5f48:	84 2b       	or	r24, r20
    5f4a:	95 2b       	or	r25, r21
    5f4c:	a6 2b       	or	r26, r22
    5f4e:	b7 2b       	or	r27, r23
    5f50:	89 83       	std	Y+1, r24	; 0x01
    5f52:	9a 83       	std	Y+2, r25	; 0x02
    5f54:	ab 83       	std	Y+3, r26	; 0x03
    5f56:	bc 83       	std	Y+4, r27	; 0x04
    5f58:	29 81       	ldd	r18, Y+1	; 0x01
    5f5a:	3a 81       	ldd	r19, Y+2	; 0x02
    5f5c:	4b 81       	ldd	r20, Y+3	; 0x03
    5f5e:	5c 81       	ldd	r21, Y+4	; 0x04
    5f60:	6d 81       	ldd	r22, Y+5	; 0x05
    5f62:	7e 81       	ldd	r23, Y+6	; 0x06
    5f64:	8f 81       	ldd	r24, Y+7	; 0x07
    5f66:	98 85       	ldd	r25, Y+8	; 0x08
    5f68:	60 96       	adiw	r28, 0x10	; 16
    5f6a:	cd bf       	out	0x3d, r28	; 61
    5f6c:	de bf       	out	0x3e, r29	; 62
    5f6e:	df 91       	pop	r29
    5f70:	cf 91       	pop	r28
    5f72:	0f 91       	pop	r16
    5f74:	08 95       	ret

00005f76 <__divdi3>:
    5f76:	a8 e4       	ldi	r26, 0x48	; 72
    5f78:	b0 e0       	ldi	r27, 0x00	; 0
    5f7a:	e1 ec       	ldi	r30, 0xC1	; 193
    5f7c:	ff e2       	ldi	r31, 0x2F	; 47
    5f7e:	0c 94 aa 39 	jmp	0x7354	; 0x7354 <__prologue_saves__+0x2>
    5f82:	f5 01       	movw	r30, r10
    5f84:	29 a3       	lds	r18, 0x59
    5f86:	3a a3       	lds	r19, 0x5a
    5f88:	4b a3       	lds	r20, 0x5b
    5f8a:	5c a3       	lds	r21, 0x5c
    5f8c:	6d a3       	lds	r22, 0x5d
    5f8e:	7e a3       	lds	r23, 0x5e
    5f90:	8f a3       	lds	r24, 0x5f
    5f92:	98 a7       	lds	r25, 0x78
    5f94:	a9 8e       	std	Y+25, r10	; 0x19
    5f96:	fa 8f       	std	Y+26, r31	; 0x1a
    5f98:	cb 8e       	std	Y+27, r12	; 0x1b
    5f9a:	dc 8e       	std	Y+28, r13	; 0x1c
    5f9c:	ed 8e       	std	Y+29, r14	; 0x1d
    5f9e:	fe 8e       	std	Y+30, r15	; 0x1e
    5fa0:	0f 8f       	std	Y+31, r16	; 0x1f
    5fa2:	18 a3       	lds	r17, 0x58
    5fa4:	8d a0       	lds	r24, 0x8d
    5fa6:	9e a0       	lds	r25, 0x8e
    5fa8:	af a0       	lds	r26, 0x8f
    5faa:	b8 a4       	lds	r27, 0xa8
    5fac:	b7 fe       	sbrs	r11, 7
    5fae:	67 c0       	rjmp	.+206    	; 0x607e <__stack+0x7f>
    5fb0:	21 95       	neg	r18
    5fb2:	b1 e0       	ldi	r27, 0x01	; 1
    5fb4:	12 16       	cp	r1, r18
    5fb6:	08 f0       	brcs	.+2      	; 0x5fba <__divdi3+0x44>
    5fb8:	b0 e0       	ldi	r27, 0x00	; 0
    5fba:	31 95       	neg	r19
    5fbc:	a1 e0       	ldi	r26, 0x01	; 1
    5fbe:	13 16       	cp	r1, r19
    5fc0:	08 f0       	brcs	.+2      	; 0x5fc4 <__divdi3+0x4e>
    5fc2:	a0 e0       	ldi	r26, 0x00	; 0
    5fc4:	b3 2e       	mov	r11, r19
    5fc6:	bb 1a       	sub	r11, r27
    5fc8:	bb 2d       	mov	r27, r11
    5fca:	88 24       	eor	r8, r8
    5fcc:	83 94       	inc	r8
    5fce:	3b 15       	cp	r19, r11
    5fd0:	08 f0       	brcs	.+2      	; 0x5fd4 <__divdi3+0x5e>
    5fd2:	88 24       	eor	r8, r8
    5fd4:	a8 29       	or	r26, r8
    5fd6:	41 95       	neg	r20
    5fd8:	31 e0       	ldi	r19, 0x01	; 1
    5fda:	14 16       	cp	r1, r20
    5fdc:	08 f0       	brcs	.+2      	; 0x5fe0 <__divdi3+0x6a>
    5fde:	30 e0       	ldi	r19, 0x00	; 0
    5fe0:	b4 2e       	mov	r11, r20
    5fe2:	ba 1a       	sub	r11, r26
    5fe4:	ab 2d       	mov	r26, r11
    5fe6:	88 24       	eor	r8, r8
    5fe8:	83 94       	inc	r8
    5fea:	4b 15       	cp	r20, r11
    5fec:	08 f0       	brcs	.+2      	; 0x5ff0 <__divdi3+0x7a>
    5fee:	88 24       	eor	r8, r8
    5ff0:	38 29       	or	r19, r8
    5ff2:	51 95       	neg	r21
    5ff4:	41 e0       	ldi	r20, 0x01	; 1
    5ff6:	15 16       	cp	r1, r21
    5ff8:	08 f0       	brcs	.+2      	; 0x5ffc <__divdi3+0x86>
    5ffa:	40 e0       	ldi	r20, 0x00	; 0
    5ffc:	45 2e       	mov	r4, r21
    5ffe:	43 1a       	sub	r4, r19
    6000:	31 e0       	ldi	r19, 0x01	; 1
    6002:	54 15       	cp	r21, r4
    6004:	08 f0       	brcs	.+2      	; 0x6008 <__stack+0x9>
    6006:	30 e0       	ldi	r19, 0x00	; 0
    6008:	43 2b       	or	r20, r19
    600a:	61 95       	neg	r22
    600c:	31 e0       	ldi	r19, 0x01	; 1
    600e:	16 16       	cp	r1, r22
    6010:	08 f0       	brcs	.+2      	; 0x6014 <__stack+0x15>
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	86 2e       	mov	r8, r22
    6016:	84 1a       	sub	r8, r20
    6018:	41 e0       	ldi	r20, 0x01	; 1
    601a:	68 15       	cp	r22, r8
    601c:	08 f0       	brcs	.+2      	; 0x6020 <__stack+0x21>
    601e:	40 e0       	ldi	r20, 0x00	; 0
    6020:	34 2b       	or	r19, r20
    6022:	71 95       	neg	r23
    6024:	41 e0       	ldi	r20, 0x01	; 1
    6026:	17 16       	cp	r1, r23
    6028:	08 f0       	brcs	.+2      	; 0x602c <__stack+0x2d>
    602a:	40 e0       	ldi	r20, 0x00	; 0
    602c:	57 2f       	mov	r21, r23
    602e:	53 1b       	sub	r21, r19
    6030:	31 e0       	ldi	r19, 0x01	; 1
    6032:	75 17       	cp	r23, r21
    6034:	08 f0       	brcs	.+2      	; 0x6038 <__stack+0x39>
    6036:	30 e0       	ldi	r19, 0x00	; 0
    6038:	43 2b       	or	r20, r19
    603a:	81 95       	neg	r24
    603c:	31 e0       	ldi	r19, 0x01	; 1
    603e:	18 16       	cp	r1, r24
    6040:	08 f0       	brcs	.+2      	; 0x6044 <__stack+0x45>
    6042:	30 e0       	ldi	r19, 0x00	; 0
    6044:	68 2f       	mov	r22, r24
    6046:	64 1b       	sub	r22, r20
    6048:	46 2f       	mov	r20, r22
    604a:	61 e0       	ldi	r22, 0x01	; 1
    604c:	84 17       	cp	r24, r20
    604e:	08 f0       	brcs	.+2      	; 0x6052 <__stack+0x53>
    6050:	60 e0       	ldi	r22, 0x00	; 0
    6052:	36 2b       	or	r19, r22
    6054:	91 95       	neg	r25
    6056:	93 1b       	sub	r25, r19
    6058:	29 a3       	lds	r18, 0x59
    605a:	ba a3       	lds	r27, 0x5a
    605c:	ab a3       	lds	r26, 0x5b
    605e:	4c a2       	lds	r20, 0x9c
    6060:	8d a2       	lds	r24, 0x9d
    6062:	5e a3       	lds	r21, 0x5e
    6064:	4f a3       	lds	r20, 0x5f
    6066:	98 a7       	lds	r25, 0x78
    6068:	8f ef       	ldi	r24, 0xFF	; 255
    606a:	9f ef       	ldi	r25, 0xFF	; 255
    606c:	af ef       	ldi	r26, 0xFF	; 255
    606e:	bf ef       	ldi	r27, 0xFF	; 255
    6070:	25 96       	adiw	r28, 0x05	; 5
    6072:	8c af       	sts	0x7c, r24
    6074:	9d af       	sts	0x7d, r25
    6076:	ae af       	sts	0x7e, r26
    6078:	bf af       	sts	0x7f, r27
    607a:	25 97       	sbiw	r28, 0x05	; 5
    607c:	06 c0       	rjmp	.+12     	; 0x608a <__stack+0x8b>
    607e:	25 96       	adiw	r28, 0x05	; 5
    6080:	1c ae       	sts	0xbc, r17
    6082:	1d ae       	sts	0xbd, r17
    6084:	1e ae       	sts	0xbe, r17
    6086:	1f ae       	sts	0xbf, r17
    6088:	25 97       	sbiw	r28, 0x05	; 5
    608a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    608c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    608e:	af 8d       	ldd	r26, Y+31	; 0x1f
    6090:	b8 a1       	lds	r27, 0x48
    6092:	b7 ff       	sbrs	r27, 7
    6094:	68 c0       	rjmp	.+208    	; 0x6166 <__stack+0x167>
    6096:	25 96       	adiw	r28, 0x05	; 5
    6098:	2c ad       	sts	0x6c, r18
    609a:	3d ad       	sts	0x6d, r19
    609c:	4e ad       	sts	0x6e, r20
    609e:	5f ad       	sts	0x6f, r21
    60a0:	25 97       	sbiw	r28, 0x05	; 5
    60a2:	20 95       	com	r18
    60a4:	30 95       	com	r19
    60a6:	40 95       	com	r20
    60a8:	50 95       	com	r21
    60aa:	25 96       	adiw	r28, 0x05	; 5
    60ac:	2c af       	sts	0x7c, r18
    60ae:	3d af       	sts	0x7d, r19
    60b0:	4e af       	sts	0x7e, r20
    60b2:	5f af       	sts	0x7f, r21
    60b4:	25 97       	sbiw	r28, 0x05	; 5
    60b6:	e1 95       	neg	r30
    60b8:	81 e0       	ldi	r24, 0x01	; 1
    60ba:	1e 16       	cp	r1, r30
    60bc:	08 f0       	brcs	.+2      	; 0x60c0 <__stack+0xc1>
    60be:	80 e0       	ldi	r24, 0x00	; 0
    60c0:	f1 95       	neg	r31
    60c2:	91 e0       	ldi	r25, 0x01	; 1
    60c4:	1f 16       	cp	r1, r31
    60c6:	08 f0       	brcs	.+2      	; 0x60ca <__stack+0xcb>
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	4f 2f       	mov	r20, r31
    60cc:	48 1b       	sub	r20, r24
    60ce:	81 e0       	ldi	r24, 0x01	; 1
    60d0:	f4 17       	cp	r31, r20
    60d2:	08 f0       	brcs	.+2      	; 0x60d6 <__stack+0xd7>
    60d4:	80 e0       	ldi	r24, 0x00	; 0
    60d6:	98 2b       	or	r25, r24
    60d8:	c1 94       	neg	r12
    60da:	81 e0       	ldi	r24, 0x01	; 1
    60dc:	1c 14       	cp	r1, r12
    60de:	08 f0       	brcs	.+2      	; 0x60e2 <__stack+0xe3>
    60e0:	80 e0       	ldi	r24, 0x00	; 0
    60e2:	6c 2d       	mov	r22, r12
    60e4:	69 1b       	sub	r22, r25
    60e6:	91 e0       	ldi	r25, 0x01	; 1
    60e8:	c6 16       	cp	r12, r22
    60ea:	08 f0       	brcs	.+2      	; 0x60ee <__stack+0xef>
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	89 2b       	or	r24, r25
    60f0:	d1 94       	neg	r13
    60f2:	91 e0       	ldi	r25, 0x01	; 1
    60f4:	1d 14       	cp	r1, r13
    60f6:	08 f0       	brcs	.+2      	; 0x60fa <__stack+0xfb>
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	5d 2d       	mov	r21, r13
    60fc:	58 1b       	sub	r21, r24
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	d5 16       	cp	r13, r21
    6102:	08 f0       	brcs	.+2      	; 0x6106 <__stack+0x107>
    6104:	80 e0       	ldi	r24, 0x00	; 0
    6106:	98 2b       	or	r25, r24
    6108:	e1 94       	neg	r14
    610a:	81 e0       	ldi	r24, 0x01	; 1
    610c:	1e 14       	cp	r1, r14
    610e:	08 f0       	brcs	.+2      	; 0x6112 <__stack+0x113>
    6110:	80 e0       	ldi	r24, 0x00	; 0
    6112:	3e 2d       	mov	r19, r14
    6114:	39 1b       	sub	r19, r25
    6116:	91 e0       	ldi	r25, 0x01	; 1
    6118:	e3 16       	cp	r14, r19
    611a:	08 f0       	brcs	.+2      	; 0x611e <__stack+0x11f>
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	89 2b       	or	r24, r25
    6120:	f1 94       	neg	r15
    6122:	91 e0       	ldi	r25, 0x01	; 1
    6124:	1f 14       	cp	r1, r15
    6126:	08 f0       	brcs	.+2      	; 0x612a <__stack+0x12b>
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	2f 2d       	mov	r18, r15
    612c:	28 1b       	sub	r18, r24
    612e:	81 e0       	ldi	r24, 0x01	; 1
    6130:	f2 16       	cp	r15, r18
    6132:	08 f0       	brcs	.+2      	; 0x6136 <__stack+0x137>
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	98 2b       	or	r25, r24
    6138:	01 95       	neg	r16
    613a:	81 e0       	ldi	r24, 0x01	; 1
    613c:	10 16       	cp	r1, r16
    613e:	08 f0       	brcs	.+2      	; 0x6142 <__stack+0x143>
    6140:	80 e0       	ldi	r24, 0x00	; 0
    6142:	70 2f       	mov	r23, r16
    6144:	79 1b       	sub	r23, r25
    6146:	97 2f       	mov	r25, r23
    6148:	71 e0       	ldi	r23, 0x01	; 1
    614a:	09 17       	cp	r16, r25
    614c:	08 f0       	brcs	.+2      	; 0x6150 <__stack+0x151>
    614e:	70 e0       	ldi	r23, 0x00	; 0
    6150:	87 2b       	or	r24, r23
    6152:	11 95       	neg	r17
    6154:	18 1b       	sub	r17, r24
    6156:	e9 8f       	std	Y+25, r30	; 0x19
    6158:	4a 8f       	std	Y+26, r20	; 0x1a
    615a:	6b 8f       	std	Y+27, r22	; 0x1b
    615c:	5c 8f       	std	Y+28, r21	; 0x1c
    615e:	3d 8f       	std	Y+29, r19	; 0x1d
    6160:	2e 8f       	std	Y+30, r18	; 0x1e
    6162:	9f 8f       	std	Y+31, r25	; 0x1f
    6164:	18 a3       	lds	r17, 0x58
    6166:	79 8d       	ldd	r23, Y+25	; 0x19
    6168:	6a 8d       	ldd	r22, Y+26	; 0x1a
    616a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    616c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    616e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    6170:	2e 8d       	ldd	r18, Y+30	; 0x1e
    6172:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6174:	88 a1       	lds	r24, 0x48
    6176:	e9 a1       	lds	r30, 0x49
    6178:	e9 8b       	std	Y+17, r30	; 0x11
    617a:	ea a1       	lds	r30, 0x4a
    617c:	ea 8b       	std	Y+18, r30	; 0x12
    617e:	eb a1       	lds	r30, 0x4b
    6180:	eb 8b       	std	Y+19, r30	; 0x13
    6182:	ec a1       	lds	r30, 0x4c
    6184:	ec 8b       	std	Y+20, r30	; 0x14
    6186:	ed a1       	lds	r30, 0x4d
    6188:	ed 8b       	std	Y+21, r30	; 0x15
    618a:	ee a1       	lds	r30, 0x4e
    618c:	ee 8b       	std	Y+22, r30	; 0x16
    618e:	ef a1       	lds	r30, 0x4f
    6190:	ef 8b       	std	Y+23, r30	; 0x17
    6192:	e8 a5       	lds	r30, 0x68
    6194:	e8 8f       	std	Y+24, r30	; 0x18
    6196:	79 87       	std	Y+9, r23	; 0x09
    6198:	6a 87       	std	Y+10, r22	; 0x0a
    619a:	5b 87       	std	Y+11, r21	; 0x0b
    619c:	4c 87       	std	Y+12, r20	; 0x0c
    619e:	3d 87       	std	Y+13, r19	; 0x0d
    61a0:	2e 87       	std	Y+14, r18	; 0x0e
    61a2:	9f 87       	std	Y+15, r25	; 0x0f
    61a4:	88 8b       	std	Y+16, r24	; 0x10
    61a6:	89 84       	ldd	r8, Y+9	; 0x09
    61a8:	9a 84       	ldd	r9, Y+10	; 0x0a
    61aa:	ab 84       	ldd	r10, Y+11	; 0x0b
    61ac:	bc 84       	ldd	r11, Y+12	; 0x0c
    61ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    61b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    61b2:	af 85       	ldd	r26, Y+15	; 0x0f
    61b4:	b8 89       	ldd	r27, Y+16	; 0x10
    61b6:	e9 88       	ldd	r14, Y+17	; 0x11
    61b8:	fa 88       	ldd	r15, Y+18	; 0x12
    61ba:	0b 89       	ldd	r16, Y+19	; 0x13
    61bc:	1c 89       	ldd	r17, Y+20	; 0x14
    61be:	ed aa       	sts	0x9d, r30
    61c0:	fe aa       	sts	0x9e, r31
    61c2:	0f ab       	sts	0x5f, r16
    61c4:	18 af       	sts	0x78, r17
    61c6:	cd 88       	ldd	r12, Y+21	; 0x15
    61c8:	de 88       	ldd	r13, Y+22	; 0x16
    61ca:	ef 88       	ldd	r14, Y+23	; 0x17
    61cc:	f8 8c       	ldd	r15, Y+24	; 0x18
    61ce:	00 97       	sbiw	r24, 0x00	; 0
    61d0:	a1 05       	cpc	r26, r1
    61d2:	b1 05       	cpc	r27, r1
    61d4:	09 f0       	breq	.+2      	; 0x61d8 <__stack+0x1d9>
    61d6:	bd c3       	rjmp	.+1914   	; 0x6952 <__stack+0x953>
    61d8:	c8 14       	cp	r12, r8
    61da:	d9 04       	cpc	r13, r9
    61dc:	ea 04       	cpc	r14, r10
    61de:	fb 04       	cpc	r15, r11
    61e0:	08 f0       	brcs	.+2      	; 0x61e4 <__stack+0x1e5>
    61e2:	4d c1       	rjmp	.+666    	; 0x647e <__stack+0x47f>
    61e4:	00 e0       	ldi	r16, 0x00	; 0
    61e6:	80 16       	cp	r8, r16
    61e8:	00 e0       	ldi	r16, 0x00	; 0
    61ea:	90 06       	cpc	r9, r16
    61ec:	01 e0       	ldi	r16, 0x01	; 1
    61ee:	a0 06       	cpc	r10, r16
    61f0:	00 e0       	ldi	r16, 0x00	; 0
    61f2:	b0 06       	cpc	r11, r16
    61f4:	58 f4       	brcc	.+22     	; 0x620c <__stack+0x20d>
    61f6:	1f ef       	ldi	r17, 0xFF	; 255
    61f8:	81 16       	cp	r8, r17
    61fa:	91 04       	cpc	r9, r1
    61fc:	a1 04       	cpc	r10, r1
    61fe:	b1 04       	cpc	r11, r1
    6200:	09 f0       	breq	.+2      	; 0x6204 <__stack+0x205>
    6202:	90 f4       	brcc	.+36     	; 0x6228 <__stack+0x229>
    6204:	80 e0       	ldi	r24, 0x00	; 0
    6206:	90 e0       	ldi	r25, 0x00	; 0
    6208:	dc 01       	movw	r26, r24
    620a:	17 c0       	rjmp	.+46     	; 0x623a <__stack+0x23b>
    620c:	20 e0       	ldi	r18, 0x00	; 0
    620e:	82 16       	cp	r8, r18
    6210:	20 e0       	ldi	r18, 0x00	; 0
    6212:	92 06       	cpc	r9, r18
    6214:	20 e0       	ldi	r18, 0x00	; 0
    6216:	a2 06       	cpc	r10, r18
    6218:	21 e0       	ldi	r18, 0x01	; 1
    621a:	b2 06       	cpc	r11, r18
    621c:	50 f4       	brcc	.+20     	; 0x6232 <__stack+0x233>
    621e:	80 e1       	ldi	r24, 0x10	; 16
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	a0 e0       	ldi	r26, 0x00	; 0
    6224:	b0 e0       	ldi	r27, 0x00	; 0
    6226:	09 c0       	rjmp	.+18     	; 0x623a <__stack+0x23b>
    6228:	88 e0       	ldi	r24, 0x08	; 8
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	a0 e0       	ldi	r26, 0x00	; 0
    622e:	b0 e0       	ldi	r27, 0x00	; 0
    6230:	04 c0       	rjmp	.+8      	; 0x623a <__stack+0x23b>
    6232:	88 e1       	ldi	r24, 0x18	; 24
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	a0 e0       	ldi	r26, 0x00	; 0
    6238:	b0 e0       	ldi	r27, 0x00	; 0
    623a:	b5 01       	movw	r22, r10
    623c:	a4 01       	movw	r20, r8
    623e:	08 2e       	mov	r0, r24
    6240:	04 c0       	rjmp	.+8      	; 0x624a <__stack+0x24b>
    6242:	76 95       	lsr	r23
    6244:	67 95       	ror	r22
    6246:	57 95       	ror	r21
    6248:	47 95       	ror	r20
    624a:	0a 94       	dec	r0
    624c:	d2 f7       	brpl	.-12     	; 0x6242 <__stack+0x243>
    624e:	fa 01       	movw	r30, r20
    6250:	e3 5f       	subi	r30, 0xF3	; 243
    6252:	ff 4d       	sbci	r31, 0xDF	; 223
    6254:	20 81       	ld	r18, Z
    6256:	40 e2       	ldi	r20, 0x20	; 32
    6258:	50 e0       	ldi	r21, 0x00	; 0
    625a:	60 e0       	ldi	r22, 0x00	; 0
    625c:	70 e0       	ldi	r23, 0x00	; 0
    625e:	48 1b       	sub	r20, r24
    6260:	59 0b       	sbc	r21, r25
    6262:	6a 0b       	sbc	r22, r26
    6264:	7b 0b       	sbc	r23, r27
    6266:	42 1b       	sub	r20, r18
    6268:	51 09       	sbc	r21, r1
    626a:	61 09       	sbc	r22, r1
    626c:	71 09       	sbc	r23, r1
    626e:	41 15       	cp	r20, r1
    6270:	51 05       	cpc	r21, r1
    6272:	61 05       	cpc	r22, r1
    6274:	71 05       	cpc	r23, r1
    6276:	a1 f1       	breq	.+104    	; 0x62e0 <__stack+0x2e1>
    6278:	04 2e       	mov	r0, r20
    627a:	04 c0       	rjmp	.+8      	; 0x6284 <__stack+0x285>
    627c:	88 0c       	add	r8, r8
    627e:	99 1c       	adc	r9, r9
    6280:	aa 1c       	adc	r10, r10
    6282:	bb 1c       	adc	r11, r11
    6284:	0a 94       	dec	r0
    6286:	d2 f7       	brpl	.-12     	; 0x627c <__stack+0x27d>
    6288:	97 01       	movw	r18, r14
    628a:	86 01       	movw	r16, r12
    628c:	04 2e       	mov	r0, r20
    628e:	04 c0       	rjmp	.+8      	; 0x6298 <__stack+0x299>
    6290:	00 0f       	add	r16, r16
    6292:	11 1f       	adc	r17, r17
    6294:	22 1f       	adc	r18, r18
    6296:	33 1f       	adc	r19, r19
    6298:	0a 94       	dec	r0
    629a:	d2 f7       	brpl	.-12     	; 0x6290 <__stack+0x291>
    629c:	80 e2       	ldi	r24, 0x20	; 32
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	84 1b       	sub	r24, r20
    62a2:	95 0b       	sbc	r25, r21
    62a4:	cd a8       	sts	0x8d, r28
    62a6:	de a8       	sts	0x8e, r29
    62a8:	ef a8       	sts	0x8f, r30
    62aa:	f8 ac       	sts	0xa8, r31
    62ac:	04 c0       	rjmp	.+8      	; 0x62b6 <__stack+0x2b7>
    62ae:	f6 94       	lsr	r15
    62b0:	e7 94       	ror	r14
    62b2:	d7 94       	ror	r13
    62b4:	c7 94       	ror	r12
    62b6:	8a 95       	dec	r24
    62b8:	d2 f7       	brpl	.-12     	; 0x62ae <__stack+0x2af>
    62ba:	c0 2a       	or	r12, r16
    62bc:	d1 2a       	or	r13, r17
    62be:	e2 2a       	or	r14, r18
    62c0:	f3 2a       	or	r15, r19
    62c2:	0d a9       	sts	0x4d, r16
    62c4:	1e a9       	sts	0x4e, r17
    62c6:	2f a9       	sts	0x4f, r18
    62c8:	38 ad       	sts	0x68, r19
    62ca:	04 c0       	rjmp	.+8      	; 0x62d4 <__stack+0x2d5>
    62cc:	00 0f       	add	r16, r16
    62ce:	11 1f       	adc	r17, r17
    62d0:	22 1f       	adc	r18, r18
    62d2:	33 1f       	adc	r19, r19
    62d4:	4a 95       	dec	r20
    62d6:	d2 f7       	brpl	.-12     	; 0x62cc <__stack+0x2cd>
    62d8:	0d ab       	sts	0x5d, r16
    62da:	1e ab       	sts	0x5e, r17
    62dc:	2f ab       	sts	0x5f, r18
    62de:	38 af       	sts	0x78, r19
    62e0:	25 01       	movw	r4, r10
    62e2:	66 24       	eor	r6, r6
    62e4:	77 24       	eor	r7, r7
    62e6:	95 01       	movw	r18, r10
    62e8:	84 01       	movw	r16, r8
    62ea:	20 70       	andi	r18, 0x00	; 0
    62ec:	30 70       	andi	r19, 0x00	; 0
    62ee:	09 ab       	sts	0x59, r16
    62f0:	1a ab       	sts	0x5a, r17
    62f2:	2b ab       	sts	0x5b, r18
    62f4:	3c ab       	sts	0x5c, r19
    62f6:	c7 01       	movw	r24, r14
    62f8:	b6 01       	movw	r22, r12
    62fa:	a3 01       	movw	r20, r6
    62fc:	92 01       	movw	r18, r4
    62fe:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    6302:	2d a7       	lds	r18, 0x7d
    6304:	3e a7       	lds	r19, 0x7e
    6306:	4f a7       	lds	r20, 0x7f
    6308:	58 ab       	sts	0x58, r21
    630a:	69 a7       	lds	r22, 0x79
    630c:	7a a7       	lds	r23, 0x7a
    630e:	8b a7       	lds	r24, 0x7b
    6310:	9c a7       	lds	r25, 0x7c
    6312:	c7 01       	movw	r24, r14
    6314:	b6 01       	movw	r22, r12
    6316:	a3 01       	movw	r20, r6
    6318:	92 01       	movw	r18, r4
    631a:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    631e:	ca 01       	movw	r24, r20
    6320:	b9 01       	movw	r22, r18
    6322:	29 a9       	sts	0x49, r18
    6324:	3a a9       	sts	0x4a, r19
    6326:	4b a9       	sts	0x4b, r20
    6328:	5c a9       	sts	0x4c, r21
    632a:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    632e:	ab 01       	movw	r20, r22
    6330:	bc 01       	movw	r22, r24
    6332:	09 a5       	lds	r16, 0x69
    6334:	1a a5       	lds	r17, 0x6a
    6336:	2b a5       	lds	r18, 0x6b
    6338:	3c a5       	lds	r19, 0x6c
    633a:	78 01       	movw	r14, r16
    633c:	dd 24       	eor	r13, r13
    633e:	cc 24       	eor	r12, r12
    6340:	0d a9       	sts	0x4d, r16
    6342:	1e a9       	sts	0x4e, r17
    6344:	2f a9       	sts	0x4f, r18
    6346:	38 ad       	sts	0x68, r19
    6348:	c9 01       	movw	r24, r18
    634a:	aa 27       	eor	r26, r26
    634c:	bb 27       	eor	r27, r27
    634e:	c8 2a       	or	r12, r24
    6350:	d9 2a       	or	r13, r25
    6352:	ea 2a       	or	r14, r26
    6354:	fb 2a       	or	r15, r27
    6356:	0d a5       	lds	r16, 0x6d
    6358:	1e a5       	lds	r17, 0x6e
    635a:	2f a5       	lds	r18, 0x6f
    635c:	38 a9       	sts	0x48, r19
    635e:	c4 16       	cp	r12, r20
    6360:	d5 06       	cpc	r13, r21
    6362:	e6 06       	cpc	r14, r22
    6364:	f7 06       	cpc	r15, r23
    6366:	38 f5       	brcc	.+78     	; 0x63b6 <__stack+0x3b7>
    6368:	01 50       	subi	r16, 0x01	; 1
    636a:	10 40       	sbci	r17, 0x00	; 0
    636c:	20 40       	sbci	r18, 0x00	; 0
    636e:	30 40       	sbci	r19, 0x00	; 0
    6370:	09 a7       	lds	r16, 0x79
    6372:	1a a7       	lds	r17, 0x7a
    6374:	2b a7       	lds	r18, 0x7b
    6376:	3c a7       	lds	r19, 0x7c
    6378:	c8 0c       	add	r12, r8
    637a:	d9 1c       	adc	r13, r9
    637c:	ea 1c       	adc	r14, r10
    637e:	fb 1c       	adc	r15, r11
    6380:	c8 14       	cp	r12, r8
    6382:	d9 04       	cpc	r13, r9
    6384:	ea 04       	cpc	r14, r10
    6386:	fb 04       	cpc	r15, r11
    6388:	d0 f0       	brcs	.+52     	; 0x63be <__stack+0x3bf>
    638a:	c4 16       	cp	r12, r20
    638c:	d5 06       	cpc	r13, r21
    638e:	e6 06       	cpc	r14, r22
    6390:	f7 06       	cpc	r15, r23
    6392:	a8 f4       	brcc	.+42     	; 0x63be <__stack+0x3bf>
    6394:	0d a5       	lds	r16, 0x6d
    6396:	1e a5       	lds	r17, 0x6e
    6398:	2f a5       	lds	r18, 0x6f
    639a:	38 a9       	sts	0x48, r19
    639c:	02 50       	subi	r16, 0x02	; 2
    639e:	10 40       	sbci	r17, 0x00	; 0
    63a0:	20 40       	sbci	r18, 0x00	; 0
    63a2:	30 40       	sbci	r19, 0x00	; 0
    63a4:	09 a7       	lds	r16, 0x79
    63a6:	1a a7       	lds	r17, 0x7a
    63a8:	2b a7       	lds	r18, 0x7b
    63aa:	3c a7       	lds	r19, 0x7c
    63ac:	c8 0c       	add	r12, r8
    63ae:	d9 1c       	adc	r13, r9
    63b0:	ea 1c       	adc	r14, r10
    63b2:	fb 1c       	adc	r15, r11
    63b4:	04 c0       	rjmp	.+8      	; 0x63be <__stack+0x3bf>
    63b6:	09 a7       	lds	r16, 0x79
    63b8:	1a a7       	lds	r17, 0x7a
    63ba:	2b a7       	lds	r18, 0x7b
    63bc:	3c a7       	lds	r19, 0x7c
    63be:	c4 1a       	sub	r12, r20
    63c0:	d5 0a       	sbc	r13, r21
    63c2:	e6 0a       	sbc	r14, r22
    63c4:	f7 0a       	sbc	r15, r23
    63c6:	c7 01       	movw	r24, r14
    63c8:	b6 01       	movw	r22, r12
    63ca:	a3 01       	movw	r20, r6
    63cc:	92 01       	movw	r18, r4
    63ce:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    63d2:	2d a7       	lds	r18, 0x7d
    63d4:	3e a7       	lds	r19, 0x7e
    63d6:	4f a7       	lds	r20, 0x7f
    63d8:	58 ab       	sts	0x58, r21
    63da:	69 af       	sts	0x79, r22
    63dc:	7a af       	sts	0x7a, r23
    63de:	8b af       	sts	0x7b, r24
    63e0:	9c af       	sts	0x7c, r25
    63e2:	c7 01       	movw	r24, r14
    63e4:	b6 01       	movw	r22, r12
    63e6:	a3 01       	movw	r20, r6
    63e8:	92 01       	movw	r18, r4
    63ea:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    63ee:	ca 01       	movw	r24, r20
    63f0:	b9 01       	movw	r22, r18
    63f2:	29 a9       	sts	0x49, r18
    63f4:	3a a9       	sts	0x4a, r19
    63f6:	4b a9       	sts	0x4b, r20
    63f8:	5c a9       	sts	0x4c, r21
    63fa:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    63fe:	6b 01       	movw	r12, r22
    6400:	7c 01       	movw	r14, r24
    6402:	49 ad       	sts	0x69, r20
    6404:	5a ad       	sts	0x6a, r21
    6406:	6b ad       	sts	0x6b, r22
    6408:	7c ad       	sts	0x6c, r23
    640a:	9a 01       	movw	r18, r20
    640c:	11 27       	eor	r17, r17
    640e:	00 27       	eor	r16, r16
    6410:	4d a9       	sts	0x4d, r20
    6412:	5e a9       	sts	0x4e, r21
    6414:	6f a9       	sts	0x4f, r22
    6416:	78 ad       	sts	0x68, r23
    6418:	60 70       	andi	r22, 0x00	; 0
    641a:	70 70       	andi	r23, 0x00	; 0
    641c:	04 2b       	or	r16, r20
    641e:	15 2b       	or	r17, r21
    6420:	26 2b       	or	r18, r22
    6422:	37 2b       	or	r19, r23
    6424:	8d a5       	lds	r24, 0x6d
    6426:	9e a5       	lds	r25, 0x6e
    6428:	af a5       	lds	r26, 0x6f
    642a:	b8 a9       	sts	0x48, r27
    642c:	0c 15       	cp	r16, r12
    642e:	1d 05       	cpc	r17, r13
    6430:	2e 05       	cpc	r18, r14
    6432:	3f 05       	cpc	r19, r15
    6434:	c0 f4       	brcc	.+48     	; 0x6466 <__stack+0x467>
    6436:	01 97       	sbiw	r24, 0x01	; 1
    6438:	a1 09       	sbc	r26, r1
    643a:	b1 09       	sbc	r27, r1
    643c:	08 0d       	add	r16, r8
    643e:	19 1d       	adc	r17, r9
    6440:	2a 1d       	adc	r18, r10
    6442:	3b 1d       	adc	r19, r11
    6444:	08 15       	cp	r16, r8
    6446:	19 05       	cpc	r17, r9
    6448:	2a 05       	cpc	r18, r10
    644a:	3b 05       	cpc	r19, r11
    644c:	60 f0       	brcs	.+24     	; 0x6466 <__stack+0x467>
    644e:	0c 15       	cp	r16, r12
    6450:	1d 05       	cpc	r17, r13
    6452:	2e 05       	cpc	r18, r14
    6454:	3f 05       	cpc	r19, r15
    6456:	38 f4       	brcc	.+14     	; 0x6466 <__stack+0x467>
    6458:	8d a5       	lds	r24, 0x6d
    645a:	9e a5       	lds	r25, 0x6e
    645c:	af a5       	lds	r26, 0x6f
    645e:	b8 a9       	sts	0x48, r27
    6460:	02 97       	sbiw	r24, 0x02	; 2
    6462:	a1 09       	sbc	r26, r1
    6464:	b1 09       	sbc	r27, r1
    6466:	09 a5       	lds	r16, 0x69
    6468:	1a a5       	lds	r17, 0x6a
    646a:	2b a5       	lds	r18, 0x6b
    646c:	3c a5       	lds	r19, 0x6c
    646e:	78 01       	movw	r14, r16
    6470:	dd 24       	eor	r13, r13
    6472:	cc 24       	eor	r12, r12
    6474:	c8 2a       	or	r12, r24
    6476:	d9 2a       	or	r13, r25
    6478:	ea 2a       	or	r14, r26
    647a:	fb 2a       	or	r15, r27
    647c:	b7 c4       	rjmp	.+2414   	; 0x6dec <__stack+0xded>
    647e:	81 14       	cp	r8, r1
    6480:	91 04       	cpc	r9, r1
    6482:	a1 04       	cpc	r10, r1
    6484:	b1 04       	cpc	r11, r1
    6486:	51 f4       	brne	.+20     	; 0x649c <__stack+0x49d>
    6488:	61 e0       	ldi	r22, 0x01	; 1
    648a:	70 e0       	ldi	r23, 0x00	; 0
    648c:	80 e0       	ldi	r24, 0x00	; 0
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	a5 01       	movw	r20, r10
    6492:	94 01       	movw	r18, r8
    6494:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    6498:	49 01       	movw	r8, r18
    649a:	5a 01       	movw	r10, r20
    649c:	10 e0       	ldi	r17, 0x00	; 0
    649e:	81 16       	cp	r8, r17
    64a0:	10 e0       	ldi	r17, 0x00	; 0
    64a2:	91 06       	cpc	r9, r17
    64a4:	11 e0       	ldi	r17, 0x01	; 1
    64a6:	a1 06       	cpc	r10, r17
    64a8:	10 e0       	ldi	r17, 0x00	; 0
    64aa:	b1 06       	cpc	r11, r17
    64ac:	58 f4       	brcc	.+22     	; 0x64c4 <__stack+0x4c5>
    64ae:	2f ef       	ldi	r18, 0xFF	; 255
    64b0:	82 16       	cp	r8, r18
    64b2:	91 04       	cpc	r9, r1
    64b4:	a1 04       	cpc	r10, r1
    64b6:	b1 04       	cpc	r11, r1
    64b8:	09 f0       	breq	.+2      	; 0x64bc <__stack+0x4bd>
    64ba:	90 f4       	brcc	.+36     	; 0x64e0 <__stack+0x4e1>
    64bc:	80 e0       	ldi	r24, 0x00	; 0
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	dc 01       	movw	r26, r24
    64c2:	17 c0       	rjmp	.+46     	; 0x64f2 <__stack+0x4f3>
    64c4:	30 e0       	ldi	r19, 0x00	; 0
    64c6:	83 16       	cp	r8, r19
    64c8:	30 e0       	ldi	r19, 0x00	; 0
    64ca:	93 06       	cpc	r9, r19
    64cc:	30 e0       	ldi	r19, 0x00	; 0
    64ce:	a3 06       	cpc	r10, r19
    64d0:	31 e0       	ldi	r19, 0x01	; 1
    64d2:	b3 06       	cpc	r11, r19
    64d4:	50 f4       	brcc	.+20     	; 0x64ea <__stack+0x4eb>
    64d6:	80 e1       	ldi	r24, 0x10	; 16
    64d8:	90 e0       	ldi	r25, 0x00	; 0
    64da:	a0 e0       	ldi	r26, 0x00	; 0
    64dc:	b0 e0       	ldi	r27, 0x00	; 0
    64de:	09 c0       	rjmp	.+18     	; 0x64f2 <__stack+0x4f3>
    64e0:	88 e0       	ldi	r24, 0x08	; 8
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	a0 e0       	ldi	r26, 0x00	; 0
    64e6:	b0 e0       	ldi	r27, 0x00	; 0
    64e8:	04 c0       	rjmp	.+8      	; 0x64f2 <__stack+0x4f3>
    64ea:	88 e1       	ldi	r24, 0x18	; 24
    64ec:	90 e0       	ldi	r25, 0x00	; 0
    64ee:	a0 e0       	ldi	r26, 0x00	; 0
    64f0:	b0 e0       	ldi	r27, 0x00	; 0
    64f2:	b5 01       	movw	r22, r10
    64f4:	a4 01       	movw	r20, r8
    64f6:	08 2e       	mov	r0, r24
    64f8:	04 c0       	rjmp	.+8      	; 0x6502 <__stack+0x503>
    64fa:	76 95       	lsr	r23
    64fc:	67 95       	ror	r22
    64fe:	57 95       	ror	r21
    6500:	47 95       	ror	r20
    6502:	0a 94       	dec	r0
    6504:	d2 f7       	brpl	.-12     	; 0x64fa <__stack+0x4fb>
    6506:	fa 01       	movw	r30, r20
    6508:	e3 5f       	subi	r30, 0xF3	; 243
    650a:	ff 4d       	sbci	r31, 0xDF	; 223
    650c:	20 81       	ld	r18, Z
    650e:	ac 01       	movw	r20, r24
    6510:	bd 01       	movw	r22, r26
    6512:	42 0f       	add	r20, r18
    6514:	51 1d       	adc	r21, r1
    6516:	61 1d       	adc	r22, r1
    6518:	71 1d       	adc	r23, r1
    651a:	80 e2       	ldi	r24, 0x20	; 32
    651c:	90 e0       	ldi	r25, 0x00	; 0
    651e:	a0 e0       	ldi	r26, 0x00	; 0
    6520:	b0 e0       	ldi	r27, 0x00	; 0
    6522:	84 1b       	sub	r24, r20
    6524:	95 0b       	sbc	r25, r21
    6526:	a6 0b       	sbc	r26, r22
    6528:	b7 0b       	sbc	r27, r23
    652a:	51 f4       	brne	.+20     	; 0x6540 <__stack+0x541>
    652c:	c8 18       	sub	r12, r8
    652e:	d9 08       	sbc	r13, r9
    6530:	ea 08       	sbc	r14, r10
    6532:	fb 08       	sbc	r15, r11
    6534:	f1 e0       	ldi	r31, 0x01	; 1
    6536:	4f 2e       	mov	r4, r31
    6538:	51 2c       	mov	r5, r1
    653a:	61 2c       	mov	r6, r1
    653c:	71 2c       	mov	r7, r1
    653e:	28 c1       	rjmp	.+592    	; 0x6790 <__stack+0x791>
    6540:	08 2e       	mov	r0, r24
    6542:	04 c0       	rjmp	.+8      	; 0x654c <__stack+0x54d>
    6544:	88 0c       	add	r8, r8
    6546:	99 1c       	adc	r9, r9
    6548:	aa 1c       	adc	r10, r10
    654a:	bb 1c       	adc	r11, r11
    654c:	0a 94       	dec	r0
    654e:	d2 f7       	brpl	.-12     	; 0x6544 <__stack+0x545>
    6550:	97 01       	movw	r18, r14
    6552:	86 01       	movw	r16, r12
    6554:	04 2e       	mov	r0, r20
    6556:	04 c0       	rjmp	.+8      	; 0x6560 <__stack+0x561>
    6558:	36 95       	lsr	r19
    655a:	27 95       	ror	r18
    655c:	17 95       	ror	r17
    655e:	07 95       	ror	r16
    6560:	0a 94       	dec	r0
    6562:	d2 f7       	brpl	.-12     	; 0x6558 <__stack+0x559>
    6564:	09 ab       	sts	0x59, r16
    6566:	1a ab       	sts	0x5a, r17
    6568:	2b ab       	sts	0x5b, r18
    656a:	3c ab       	sts	0x5c, r19
    656c:	97 01       	movw	r18, r14
    656e:	86 01       	movw	r16, r12
    6570:	08 2e       	mov	r0, r24
    6572:	04 c0       	rjmp	.+8      	; 0x657c <__stack+0x57d>
    6574:	00 0f       	add	r16, r16
    6576:	11 1f       	adc	r17, r17
    6578:	22 1f       	adc	r18, r18
    657a:	33 1f       	adc	r19, r19
    657c:	0a 94       	dec	r0
    657e:	d2 f7       	brpl	.-12     	; 0x6574 <__stack+0x575>
    6580:	0d a7       	lds	r16, 0x7d
    6582:	1e a7       	lds	r17, 0x7e
    6584:	2f a7       	lds	r18, 0x7f
    6586:	38 ab       	sts	0x58, r19
    6588:	ed a8       	sts	0x8d, r30
    658a:	fe a8       	sts	0x8e, r31
    658c:	0f a9       	sts	0x4f, r16
    658e:	18 ad       	sts	0x68, r17
    6590:	04 c0       	rjmp	.+8      	; 0x659a <__stack+0x59b>
    6592:	16 95       	lsr	r17
    6594:	07 95       	ror	r16
    6596:	f7 94       	ror	r15
    6598:	e7 94       	ror	r14
    659a:	4a 95       	dec	r20
    659c:	d2 f7       	brpl	.-12     	; 0x6592 <__stack+0x593>
    659e:	b8 01       	movw	r22, r16
    65a0:	a7 01       	movw	r20, r14
    65a2:	0d a5       	lds	r16, 0x6d
    65a4:	1e a5       	lds	r17, 0x6e
    65a6:	2f a5       	lds	r18, 0x6f
    65a8:	38 a9       	sts	0x48, r19
    65aa:	04 2b       	or	r16, r20
    65ac:	15 2b       	or	r17, r21
    65ae:	26 2b       	or	r18, r22
    65b0:	37 2b       	or	r19, r23
    65b2:	0d a7       	lds	r16, 0x7d
    65b4:	1e a7       	lds	r17, 0x7e
    65b6:	2f a7       	lds	r18, 0x7f
    65b8:	38 ab       	sts	0x58, r19
    65ba:	ed a8       	sts	0x8d, r30
    65bc:	fe a8       	sts	0x8e, r31
    65be:	0f a9       	sts	0x4f, r16
    65c0:	18 ad       	sts	0x68, r17
    65c2:	04 c0       	rjmp	.+8      	; 0x65cc <__stack+0x5cd>
    65c4:	ee 0c       	add	r14, r14
    65c6:	ff 1c       	adc	r15, r15
    65c8:	00 1f       	adc	r16, r16
    65ca:	11 1f       	adc	r17, r17
    65cc:	8a 95       	dec	r24
    65ce:	d2 f7       	brpl	.-12     	; 0x65c4 <__stack+0x5c5>
    65d0:	ed aa       	sts	0x9d, r30
    65d2:	fe aa       	sts	0x9e, r31
    65d4:	0f ab       	sts	0x5f, r16
    65d6:	18 af       	sts	0x78, r17
    65d8:	25 01       	movw	r4, r10
    65da:	66 24       	eor	r6, r6
    65dc:	77 24       	eor	r7, r7
    65de:	95 01       	movw	r18, r10
    65e0:	84 01       	movw	r16, r8
    65e2:	20 70       	andi	r18, 0x00	; 0
    65e4:	30 70       	andi	r19, 0x00	; 0
    65e6:	09 af       	sts	0x79, r16
    65e8:	1a af       	sts	0x7a, r17
    65ea:	2b af       	sts	0x7b, r18
    65ec:	3c af       	sts	0x7c, r19
    65ee:	69 a9       	sts	0x49, r22
    65f0:	7a a9       	sts	0x4a, r23
    65f2:	8b a9       	sts	0x4b, r24
    65f4:	9c a9       	sts	0x4c, r25
    65f6:	a3 01       	movw	r20, r6
    65f8:	92 01       	movw	r18, r4
    65fa:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    65fe:	29 a7       	lds	r18, 0x79
    6600:	3a a7       	lds	r19, 0x7a
    6602:	4b a7       	lds	r20, 0x7b
    6604:	5c a7       	lds	r21, 0x7c
    6606:	6b 01       	movw	r12, r22
    6608:	7c 01       	movw	r14, r24
    660a:	69 a9       	sts	0x49, r22
    660c:	7a a9       	sts	0x4a, r23
    660e:	8b a9       	sts	0x4b, r24
    6610:	9c a9       	sts	0x4c, r25
    6612:	a3 01       	movw	r20, r6
    6614:	92 01       	movw	r18, r4
    6616:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    661a:	ca 01       	movw	r24, r20
    661c:	b9 01       	movw	r22, r18
    661e:	29 ad       	sts	0x69, r18
    6620:	3a ad       	sts	0x6a, r19
    6622:	4b ad       	sts	0x6b, r20
    6624:	5c ad       	sts	0x6c, r21
    6626:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    662a:	ab 01       	movw	r20, r22
    662c:	bc 01       	movw	r22, r24
    662e:	76 01       	movw	r14, r12
    6630:	dd 24       	eor	r13, r13
    6632:	cc 24       	eor	r12, r12
    6634:	0d a5       	lds	r16, 0x6d
    6636:	1e a5       	lds	r17, 0x6e
    6638:	2f a5       	lds	r18, 0x6f
    663a:	38 a9       	sts	0x48, r19
    663c:	c9 01       	movw	r24, r18
    663e:	aa 27       	eor	r26, r26
    6640:	bb 27       	eor	r27, r27
    6642:	c8 2a       	or	r12, r24
    6644:	d9 2a       	or	r13, r25
    6646:	ea 2a       	or	r14, r26
    6648:	fb 2a       	or	r15, r27
    664a:	09 a5       	lds	r16, 0x69
    664c:	1a a5       	lds	r17, 0x6a
    664e:	2b a5       	lds	r18, 0x6b
    6650:	3c a5       	lds	r19, 0x6c
    6652:	c4 16       	cp	r12, r20
    6654:	d5 06       	cpc	r13, r21
    6656:	e6 06       	cpc	r14, r22
    6658:	f7 06       	cpc	r15, r23
    665a:	38 f5       	brcc	.+78     	; 0x66aa <__stack+0x6ab>
    665c:	01 50       	subi	r16, 0x01	; 1
    665e:	10 40       	sbci	r17, 0x00	; 0
    6660:	20 40       	sbci	r18, 0x00	; 0
    6662:	30 40       	sbci	r19, 0x00	; 0
    6664:	09 ab       	sts	0x59, r16
    6666:	1a ab       	sts	0x5a, r17
    6668:	2b ab       	sts	0x5b, r18
    666a:	3c ab       	sts	0x5c, r19
    666c:	c8 0c       	add	r12, r8
    666e:	d9 1c       	adc	r13, r9
    6670:	ea 1c       	adc	r14, r10
    6672:	fb 1c       	adc	r15, r11
    6674:	c8 14       	cp	r12, r8
    6676:	d9 04       	cpc	r13, r9
    6678:	ea 04       	cpc	r14, r10
    667a:	fb 04       	cpc	r15, r11
    667c:	d0 f0       	brcs	.+52     	; 0x66b2 <__stack+0x6b3>
    667e:	c4 16       	cp	r12, r20
    6680:	d5 06       	cpc	r13, r21
    6682:	e6 06       	cpc	r14, r22
    6684:	f7 06       	cpc	r15, r23
    6686:	a8 f4       	brcc	.+42     	; 0x66b2 <__stack+0x6b3>
    6688:	09 a5       	lds	r16, 0x69
    668a:	1a a5       	lds	r17, 0x6a
    668c:	2b a5       	lds	r18, 0x6b
    668e:	3c a5       	lds	r19, 0x6c
    6690:	02 50       	subi	r16, 0x02	; 2
    6692:	10 40       	sbci	r17, 0x00	; 0
    6694:	20 40       	sbci	r18, 0x00	; 0
    6696:	30 40       	sbci	r19, 0x00	; 0
    6698:	09 ab       	sts	0x59, r16
    669a:	1a ab       	sts	0x5a, r17
    669c:	2b ab       	sts	0x5b, r18
    669e:	3c ab       	sts	0x5c, r19
    66a0:	c8 0c       	add	r12, r8
    66a2:	d9 1c       	adc	r13, r9
    66a4:	ea 1c       	adc	r14, r10
    66a6:	fb 1c       	adc	r15, r11
    66a8:	04 c0       	rjmp	.+8      	; 0x66b2 <__stack+0x6b3>
    66aa:	09 ab       	sts	0x59, r16
    66ac:	1a ab       	sts	0x5a, r17
    66ae:	2b ab       	sts	0x5b, r18
    66b0:	3c ab       	sts	0x5c, r19
    66b2:	c4 1a       	sub	r12, r20
    66b4:	d5 0a       	sbc	r13, r21
    66b6:	e6 0a       	sbc	r14, r22
    66b8:	f7 0a       	sbc	r15, r23
    66ba:	c7 01       	movw	r24, r14
    66bc:	b6 01       	movw	r22, r12
    66be:	a3 01       	movw	r20, r6
    66c0:	92 01       	movw	r18, r4
    66c2:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    66c6:	29 a7       	lds	r18, 0x79
    66c8:	3a a7       	lds	r19, 0x7a
    66ca:	4b a7       	lds	r20, 0x7b
    66cc:	5c a7       	lds	r21, 0x7c
    66ce:	21 96       	adiw	r28, 0x01	; 1
    66d0:	6c af       	sts	0x7c, r22
    66d2:	7d af       	sts	0x7d, r23
    66d4:	8e af       	sts	0x7e, r24
    66d6:	9f af       	sts	0x7f, r25
    66d8:	21 97       	sbiw	r28, 0x01	; 1
    66da:	c7 01       	movw	r24, r14
    66dc:	b6 01       	movw	r22, r12
    66de:	a3 01       	movw	r20, r6
    66e0:	92 01       	movw	r18, r4
    66e2:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    66e6:	ca 01       	movw	r24, r20
    66e8:	b9 01       	movw	r22, r18
    66ea:	29 ad       	sts	0x69, r18
    66ec:	3a ad       	sts	0x6a, r19
    66ee:	4b ad       	sts	0x6b, r20
    66f0:	5c ad       	sts	0x6c, r21
    66f2:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    66f6:	8b 01       	movw	r16, r22
    66f8:	9c 01       	movw	r18, r24
    66fa:	21 96       	adiw	r28, 0x01	; 1
    66fc:	4c ad       	sts	0x6c, r20
    66fe:	5d ad       	sts	0x6d, r21
    6700:	6e ad       	sts	0x6e, r22
    6702:	7f ad       	sts	0x6f, r23
    6704:	21 97       	sbiw	r28, 0x01	; 1
    6706:	da 01       	movw	r26, r20
    6708:	99 27       	eor	r25, r25
    670a:	88 27       	eor	r24, r24
    670c:	4d a5       	lds	r20, 0x6d
    670e:	5e a5       	lds	r21, 0x6e
    6710:	6f a5       	lds	r22, 0x6f
    6712:	78 a9       	sts	0x48, r23
    6714:	60 70       	andi	r22, 0x00	; 0
    6716:	70 70       	andi	r23, 0x00	; 0
    6718:	84 2b       	or	r24, r20
    671a:	95 2b       	or	r25, r21
    671c:	a6 2b       	or	r26, r22
    671e:	b7 2b       	or	r27, r23
    6720:	49 a5       	lds	r20, 0x69
    6722:	5a a5       	lds	r21, 0x6a
    6724:	6b a5       	lds	r22, 0x6b
    6726:	7c a5       	lds	r23, 0x6c
    6728:	80 17       	cp	r24, r16
    672a:	91 07       	cpc	r25, r17
    672c:	a2 07       	cpc	r26, r18
    672e:	b3 07       	cpc	r27, r19
    6730:	f0 f4       	brcc	.+60     	; 0x676e <__stack+0x76f>
    6732:	41 50       	subi	r20, 0x01	; 1
    6734:	50 40       	sbci	r21, 0x00	; 0
    6736:	60 40       	sbci	r22, 0x00	; 0
    6738:	70 40       	sbci	r23, 0x00	; 0
    673a:	88 0d       	add	r24, r8
    673c:	99 1d       	adc	r25, r9
    673e:	aa 1d       	adc	r26, r10
    6740:	bb 1d       	adc	r27, r11
    6742:	88 15       	cp	r24, r8
    6744:	99 05       	cpc	r25, r9
    6746:	aa 05       	cpc	r26, r10
    6748:	bb 05       	cpc	r27, r11
    674a:	88 f0       	brcs	.+34     	; 0x676e <__stack+0x76f>
    674c:	80 17       	cp	r24, r16
    674e:	91 07       	cpc	r25, r17
    6750:	a2 07       	cpc	r26, r18
    6752:	b3 07       	cpc	r27, r19
    6754:	60 f4       	brcc	.+24     	; 0x676e <__stack+0x76f>
    6756:	49 a5       	lds	r20, 0x69
    6758:	5a a5       	lds	r21, 0x6a
    675a:	6b a5       	lds	r22, 0x6b
    675c:	7c a5       	lds	r23, 0x6c
    675e:	42 50       	subi	r20, 0x02	; 2
    6760:	50 40       	sbci	r21, 0x00	; 0
    6762:	60 40       	sbci	r22, 0x00	; 0
    6764:	70 40       	sbci	r23, 0x00	; 0
    6766:	88 0d       	add	r24, r8
    6768:	99 1d       	adc	r25, r9
    676a:	aa 1d       	adc	r26, r10
    676c:	bb 1d       	adc	r27, r11
    676e:	6c 01       	movw	r12, r24
    6770:	7d 01       	movw	r14, r26
    6772:	c0 1a       	sub	r12, r16
    6774:	d1 0a       	sbc	r13, r17
    6776:	e2 0a       	sbc	r14, r18
    6778:	f3 0a       	sbc	r15, r19
    677a:	09 a9       	sts	0x49, r16
    677c:	1a a9       	sts	0x4a, r17
    677e:	2b a9       	sts	0x4b, r18
    6780:	3c a9       	sts	0x4c, r19
    6782:	38 01       	movw	r6, r16
    6784:	55 24       	eor	r5, r5
    6786:	44 24       	eor	r4, r4
    6788:	44 2a       	or	r4, r20
    678a:	55 2a       	or	r5, r21
    678c:	66 2a       	or	r6, r22
    678e:	77 2a       	or	r7, r23
    6790:	85 01       	movw	r16, r10
    6792:	22 27       	eor	r18, r18
    6794:	33 27       	eor	r19, r19
    6796:	0d a7       	lds	r16, 0x7d
    6798:	1e a7       	lds	r17, 0x7e
    679a:	2f a7       	lds	r18, 0x7f
    679c:	38 ab       	sts	0x58, r19
    679e:	95 01       	movw	r18, r10
    67a0:	84 01       	movw	r16, r8
    67a2:	20 70       	andi	r18, 0x00	; 0
    67a4:	30 70       	andi	r19, 0x00	; 0
    67a6:	09 af       	sts	0x79, r16
    67a8:	1a af       	sts	0x7a, r17
    67aa:	2b af       	sts	0x7b, r18
    67ac:	3c af       	sts	0x7c, r19
    67ae:	c7 01       	movw	r24, r14
    67b0:	b6 01       	movw	r22, r12
    67b2:	2d a5       	lds	r18, 0x6d
    67b4:	3e a5       	lds	r19, 0x6e
    67b6:	4f a5       	lds	r20, 0x6f
    67b8:	58 a9       	sts	0x48, r21
    67ba:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    67be:	29 a7       	lds	r18, 0x79
    67c0:	3a a7       	lds	r19, 0x7a
    67c2:	4b a7       	lds	r20, 0x7b
    67c4:	5c a7       	lds	r21, 0x7c
    67c6:	69 ab       	sts	0x59, r22
    67c8:	7a ab       	sts	0x5a, r23
    67ca:	8b ab       	sts	0x5b, r24
    67cc:	9c ab       	sts	0x5c, r25
    67ce:	c7 01       	movw	r24, r14
    67d0:	b6 01       	movw	r22, r12
    67d2:	2d a5       	lds	r18, 0x6d
    67d4:	3e a5       	lds	r19, 0x6e
    67d6:	4f a5       	lds	r20, 0x6f
    67d8:	58 a9       	sts	0x48, r21
    67da:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    67de:	ca 01       	movw	r24, r20
    67e0:	b9 01       	movw	r22, r18
    67e2:	29 ad       	sts	0x69, r18
    67e4:	3a ad       	sts	0x6a, r19
    67e6:	4b ad       	sts	0x6b, r20
    67e8:	5c ad       	sts	0x6c, r21
    67ea:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    67ee:	ab 01       	movw	r20, r22
    67f0:	bc 01       	movw	r22, r24
    67f2:	09 a9       	sts	0x49, r16
    67f4:	1a a9       	sts	0x4a, r17
    67f6:	2b a9       	sts	0x4b, r18
    67f8:	3c a9       	sts	0x4c, r19
    67fa:	78 01       	movw	r14, r16
    67fc:	dd 24       	eor	r13, r13
    67fe:	cc 24       	eor	r12, r12
    6800:	0d a9       	sts	0x4d, r16
    6802:	1e a9       	sts	0x4e, r17
    6804:	2f a9       	sts	0x4f, r18
    6806:	38 ad       	sts	0x68, r19
    6808:	c9 01       	movw	r24, r18
    680a:	aa 27       	eor	r26, r26
    680c:	bb 27       	eor	r27, r27
    680e:	c8 2a       	or	r12, r24
    6810:	d9 2a       	or	r13, r25
    6812:	ea 2a       	or	r14, r26
    6814:	fb 2a       	or	r15, r27
    6816:	09 a5       	lds	r16, 0x69
    6818:	1a a5       	lds	r17, 0x6a
    681a:	2b a5       	lds	r18, 0x6b
    681c:	3c a5       	lds	r19, 0x6c
    681e:	c4 16       	cp	r12, r20
    6820:	d5 06       	cpc	r13, r21
    6822:	e6 06       	cpc	r14, r22
    6824:	f7 06       	cpc	r15, r23
    6826:	38 f5       	brcc	.+78     	; 0x6876 <__stack+0x877>
    6828:	01 50       	subi	r16, 0x01	; 1
    682a:	10 40       	sbci	r17, 0x00	; 0
    682c:	20 40       	sbci	r18, 0x00	; 0
    682e:	30 40       	sbci	r19, 0x00	; 0
    6830:	09 ab       	sts	0x59, r16
    6832:	1a ab       	sts	0x5a, r17
    6834:	2b ab       	sts	0x5b, r18
    6836:	3c ab       	sts	0x5c, r19
    6838:	c8 0c       	add	r12, r8
    683a:	d9 1c       	adc	r13, r9
    683c:	ea 1c       	adc	r14, r10
    683e:	fb 1c       	adc	r15, r11
    6840:	c8 14       	cp	r12, r8
    6842:	d9 04       	cpc	r13, r9
    6844:	ea 04       	cpc	r14, r10
    6846:	fb 04       	cpc	r15, r11
    6848:	d0 f0       	brcs	.+52     	; 0x687e <__stack+0x87f>
    684a:	c4 16       	cp	r12, r20
    684c:	d5 06       	cpc	r13, r21
    684e:	e6 06       	cpc	r14, r22
    6850:	f7 06       	cpc	r15, r23
    6852:	a8 f4       	brcc	.+42     	; 0x687e <__stack+0x87f>
    6854:	09 a5       	lds	r16, 0x69
    6856:	1a a5       	lds	r17, 0x6a
    6858:	2b a5       	lds	r18, 0x6b
    685a:	3c a5       	lds	r19, 0x6c
    685c:	02 50       	subi	r16, 0x02	; 2
    685e:	10 40       	sbci	r17, 0x00	; 0
    6860:	20 40       	sbci	r18, 0x00	; 0
    6862:	30 40       	sbci	r19, 0x00	; 0
    6864:	09 ab       	sts	0x59, r16
    6866:	1a ab       	sts	0x5a, r17
    6868:	2b ab       	sts	0x5b, r18
    686a:	3c ab       	sts	0x5c, r19
    686c:	c8 0c       	add	r12, r8
    686e:	d9 1c       	adc	r13, r9
    6870:	ea 1c       	adc	r14, r10
    6872:	fb 1c       	adc	r15, r11
    6874:	04 c0       	rjmp	.+8      	; 0x687e <__stack+0x87f>
    6876:	09 ab       	sts	0x59, r16
    6878:	1a ab       	sts	0x5a, r17
    687a:	2b ab       	sts	0x5b, r18
    687c:	3c ab       	sts	0x5c, r19
    687e:	c4 1a       	sub	r12, r20
    6880:	d5 0a       	sbc	r13, r21
    6882:	e6 0a       	sbc	r14, r22
    6884:	f7 0a       	sbc	r15, r23
    6886:	c7 01       	movw	r24, r14
    6888:	b6 01       	movw	r22, r12
    688a:	2d a5       	lds	r18, 0x6d
    688c:	3e a5       	lds	r19, 0x6e
    688e:	4f a5       	lds	r20, 0x6f
    6890:	58 a9       	sts	0x48, r21
    6892:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    6896:	29 a7       	lds	r18, 0x79
    6898:	3a a7       	lds	r19, 0x7a
    689a:	4b a7       	lds	r20, 0x7b
    689c:	5c a7       	lds	r21, 0x7c
    689e:	21 96       	adiw	r28, 0x01	; 1
    68a0:	6c af       	sts	0x7c, r22
    68a2:	7d af       	sts	0x7d, r23
    68a4:	8e af       	sts	0x7e, r24
    68a6:	9f af       	sts	0x7f, r25
    68a8:	21 97       	sbiw	r28, 0x01	; 1
    68aa:	c7 01       	movw	r24, r14
    68ac:	b6 01       	movw	r22, r12
    68ae:	2d a5       	lds	r18, 0x6d
    68b0:	3e a5       	lds	r19, 0x6e
    68b2:	4f a5       	lds	r20, 0x6f
    68b4:	58 a9       	sts	0x48, r21
    68b6:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    68ba:	ca 01       	movw	r24, r20
    68bc:	b9 01       	movw	r22, r18
    68be:	29 ad       	sts	0x69, r18
    68c0:	3a ad       	sts	0x6a, r19
    68c2:	4b ad       	sts	0x6b, r20
    68c4:	5c ad       	sts	0x6c, r21
    68c6:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    68ca:	8b 01       	movw	r16, r22
    68cc:	9c 01       	movw	r18, r24
    68ce:	21 96       	adiw	r28, 0x01	; 1
    68d0:	4c ad       	sts	0x6c, r20
    68d2:	5d ad       	sts	0x6d, r21
    68d4:	6e ad       	sts	0x6e, r22
    68d6:	7f ad       	sts	0x6f, r23
    68d8:	21 97       	sbiw	r28, 0x01	; 1
    68da:	da 01       	movw	r26, r20
    68dc:	99 27       	eor	r25, r25
    68de:	88 27       	eor	r24, r24
    68e0:	4d a9       	sts	0x4d, r20
    68e2:	5e a9       	sts	0x4e, r21
    68e4:	6f a9       	sts	0x4f, r22
    68e6:	78 ad       	sts	0x68, r23
    68e8:	60 70       	andi	r22, 0x00	; 0
    68ea:	70 70       	andi	r23, 0x00	; 0
    68ec:	84 2b       	or	r24, r20
    68ee:	95 2b       	or	r25, r21
    68f0:	a6 2b       	or	r26, r22
    68f2:	b7 2b       	or	r27, r23
    68f4:	49 a5       	lds	r20, 0x69
    68f6:	5a a5       	lds	r21, 0x6a
    68f8:	6b a5       	lds	r22, 0x6b
    68fa:	7c a5       	lds	r23, 0x6c
    68fc:	80 17       	cp	r24, r16
    68fe:	91 07       	cpc	r25, r17
    6900:	a2 07       	cpc	r26, r18
    6902:	b3 07       	cpc	r27, r19
    6904:	d0 f4       	brcc	.+52     	; 0x693a <__stack+0x93b>
    6906:	41 50       	subi	r20, 0x01	; 1
    6908:	50 40       	sbci	r21, 0x00	; 0
    690a:	60 40       	sbci	r22, 0x00	; 0
    690c:	70 40       	sbci	r23, 0x00	; 0
    690e:	88 0d       	add	r24, r8
    6910:	99 1d       	adc	r25, r9
    6912:	aa 1d       	adc	r26, r10
    6914:	bb 1d       	adc	r27, r11
    6916:	88 15       	cp	r24, r8
    6918:	99 05       	cpc	r25, r9
    691a:	aa 05       	cpc	r26, r10
    691c:	bb 05       	cpc	r27, r11
    691e:	68 f0       	brcs	.+26     	; 0x693a <__stack+0x93b>
    6920:	80 17       	cp	r24, r16
    6922:	91 07       	cpc	r25, r17
    6924:	a2 07       	cpc	r26, r18
    6926:	b3 07       	cpc	r27, r19
    6928:	40 f4       	brcc	.+16     	; 0x693a <__stack+0x93b>
    692a:	49 a5       	lds	r20, 0x69
    692c:	5a a5       	lds	r21, 0x6a
    692e:	6b a5       	lds	r22, 0x6b
    6930:	7c a5       	lds	r23, 0x6c
    6932:	42 50       	subi	r20, 0x02	; 2
    6934:	50 40       	sbci	r21, 0x00	; 0
    6936:	60 40       	sbci	r22, 0x00	; 0
    6938:	70 40       	sbci	r23, 0x00	; 0
    693a:	09 a9       	sts	0x49, r16
    693c:	1a a9       	sts	0x4a, r17
    693e:	2b a9       	sts	0x4b, r18
    6940:	3c a9       	sts	0x4c, r19
    6942:	78 01       	movw	r14, r16
    6944:	dd 24       	eor	r13, r13
    6946:	cc 24       	eor	r12, r12
    6948:	c4 2a       	or	r12, r20
    694a:	d5 2a       	or	r13, r21
    694c:	e6 2a       	or	r14, r22
    694e:	f7 2a       	or	r15, r23
    6950:	50 c2       	rjmp	.+1184   	; 0x6df2 <__stack+0xdf3>
    6952:	c8 16       	cp	r12, r24
    6954:	d9 06       	cpc	r13, r25
    6956:	ea 06       	cpc	r14, r26
    6958:	fb 06       	cpc	r15, r27
    695a:	08 f4       	brcc	.+2      	; 0x695e <__stack+0x95f>
    695c:	37 c2       	rjmp	.+1134   	; 0x6dcc <__stack+0xdcd>
    695e:	80 30       	cpi	r24, 0x00	; 0
    6960:	10 e0       	ldi	r17, 0x00	; 0
    6962:	91 07       	cpc	r25, r17
    6964:	11 e0       	ldi	r17, 0x01	; 1
    6966:	a1 07       	cpc	r26, r17
    6968:	10 e0       	ldi	r17, 0x00	; 0
    696a:	b1 07       	cpc	r27, r17
    696c:	50 f4       	brcc	.+20     	; 0x6982 <__stack+0x983>
    696e:	8f 3f       	cpi	r24, 0xFF	; 255
    6970:	91 05       	cpc	r25, r1
    6972:	a1 05       	cpc	r26, r1
    6974:	b1 05       	cpc	r27, r1
    6976:	09 f0       	breq	.+2      	; 0x697a <__stack+0x97b>
    6978:	88 f4       	brcc	.+34     	; 0x699c <__stack+0x99d>
    697a:	00 e0       	ldi	r16, 0x00	; 0
    697c:	10 e0       	ldi	r17, 0x00	; 0
    697e:	98 01       	movw	r18, r16
    6980:	16 c0       	rjmp	.+44     	; 0x69ae <__stack+0x9af>
    6982:	80 30       	cpi	r24, 0x00	; 0
    6984:	20 e0       	ldi	r18, 0x00	; 0
    6986:	92 07       	cpc	r25, r18
    6988:	20 e0       	ldi	r18, 0x00	; 0
    698a:	a2 07       	cpc	r26, r18
    698c:	21 e0       	ldi	r18, 0x01	; 1
    698e:	b2 07       	cpc	r27, r18
    6990:	50 f4       	brcc	.+20     	; 0x69a6 <__stack+0x9a7>
    6992:	00 e1       	ldi	r16, 0x10	; 16
    6994:	10 e0       	ldi	r17, 0x00	; 0
    6996:	20 e0       	ldi	r18, 0x00	; 0
    6998:	30 e0       	ldi	r19, 0x00	; 0
    699a:	09 c0       	rjmp	.+18     	; 0x69ae <__stack+0x9af>
    699c:	08 e0       	ldi	r16, 0x08	; 8
    699e:	10 e0       	ldi	r17, 0x00	; 0
    69a0:	20 e0       	ldi	r18, 0x00	; 0
    69a2:	30 e0       	ldi	r19, 0x00	; 0
    69a4:	04 c0       	rjmp	.+8      	; 0x69ae <__stack+0x9af>
    69a6:	08 e1       	ldi	r16, 0x18	; 24
    69a8:	10 e0       	ldi	r17, 0x00	; 0
    69aa:	20 e0       	ldi	r18, 0x00	; 0
    69ac:	30 e0       	ldi	r19, 0x00	; 0
    69ae:	ac 01       	movw	r20, r24
    69b0:	bd 01       	movw	r22, r26
    69b2:	00 2e       	mov	r0, r16
    69b4:	04 c0       	rjmp	.+8      	; 0x69be <__stack+0x9bf>
    69b6:	76 95       	lsr	r23
    69b8:	67 95       	ror	r22
    69ba:	57 95       	ror	r21
    69bc:	47 95       	ror	r20
    69be:	0a 94       	dec	r0
    69c0:	d2 f7       	brpl	.-12     	; 0x69b6 <__stack+0x9b7>
    69c2:	fa 01       	movw	r30, r20
    69c4:	e3 5f       	subi	r30, 0xF3	; 243
    69c6:	ff 4d       	sbci	r31, 0xDF	; 223
    69c8:	40 81       	ld	r20, Z
    69ca:	04 0f       	add	r16, r20
    69cc:	11 1d       	adc	r17, r1
    69ce:	21 1d       	adc	r18, r1
    69d0:	31 1d       	adc	r19, r1
    69d2:	40 e2       	ldi	r20, 0x20	; 32
    69d4:	50 e0       	ldi	r21, 0x00	; 0
    69d6:	60 e0       	ldi	r22, 0x00	; 0
    69d8:	70 e0       	ldi	r23, 0x00	; 0
    69da:	40 1b       	sub	r20, r16
    69dc:	51 0b       	sbc	r21, r17
    69de:	62 0b       	sbc	r22, r18
    69e0:	73 0b       	sbc	r23, r19
    69e2:	a1 f4       	brne	.+40     	; 0x6a0c <__stack+0xa0d>
    69e4:	8c 15       	cp	r24, r12
    69e6:	9d 05       	cpc	r25, r13
    69e8:	ae 05       	cpc	r26, r14
    69ea:	bf 05       	cpc	r27, r15
    69ec:	08 f4       	brcc	.+2      	; 0x69f0 <__stack+0x9f1>
    69ee:	f5 c1       	rjmp	.+1002   	; 0x6dda <__stack+0xddb>
    69f0:	ed a8       	sts	0x8d, r30
    69f2:	fe a8       	sts	0x8e, r31
    69f4:	0f a9       	sts	0x4f, r16
    69f6:	18 ad       	sts	0x68, r17
    69f8:	44 24       	eor	r4, r4
    69fa:	55 24       	eor	r5, r5
    69fc:	32 01       	movw	r6, r4
    69fe:	e8 14       	cp	r14, r8
    6a00:	f9 04       	cpc	r15, r9
    6a02:	0a 05       	cpc	r16, r10
    6a04:	1b 05       	cpc	r17, r11
    6a06:	08 f0       	brcs	.+2      	; 0x6a0a <__stack+0xa0b>
    6a08:	eb c1       	rjmp	.+982    	; 0x6de0 <__stack+0xde1>
    6a0a:	e3 c1       	rjmp	.+966    	; 0x6dd2 <__stack+0xdd3>
    6a0c:	34 2e       	mov	r3, r20
    6a0e:	2c 01       	movw	r4, r24
    6a10:	3d 01       	movw	r6, r26
    6a12:	04 c0       	rjmp	.+8      	; 0x6a1c <__stack+0xa1d>
    6a14:	44 0c       	add	r4, r4
    6a16:	55 1c       	adc	r5, r5
    6a18:	66 1c       	adc	r6, r6
    6a1a:	77 1c       	adc	r7, r7
    6a1c:	4a 95       	dec	r20
    6a1e:	d2 f7       	brpl	.-12     	; 0x6a14 <__stack+0xa15>
    6a20:	d5 01       	movw	r26, r10
    6a22:	c4 01       	movw	r24, r8
    6a24:	00 2e       	mov	r0, r16
    6a26:	04 c0       	rjmp	.+8      	; 0x6a30 <__stack+0xa31>
    6a28:	b6 95       	lsr	r27
    6a2a:	a7 95       	ror	r26
    6a2c:	97 95       	ror	r25
    6a2e:	87 95       	ror	r24
    6a30:	0a 94       	dec	r0
    6a32:	d2 f7       	brpl	.-12     	; 0x6a28 <__stack+0xa29>
    6a34:	48 2a       	or	r4, r24
    6a36:	59 2a       	or	r5, r25
    6a38:	6a 2a       	or	r6, r26
    6a3a:	7b 2a       	or	r7, r27
    6a3c:	a5 01       	movw	r20, r10
    6a3e:	94 01       	movw	r18, r8
    6a40:	03 2c       	mov	r0, r3
    6a42:	04 c0       	rjmp	.+8      	; 0x6a4c <__stack+0xa4d>
    6a44:	22 0f       	add	r18, r18
    6a46:	33 1f       	adc	r19, r19
    6a48:	44 1f       	adc	r20, r20
    6a4a:	55 1f       	adc	r21, r21
    6a4c:	0a 94       	dec	r0
    6a4e:	d2 f7       	brpl	.-12     	; 0x6a44 <__stack+0xa45>
    6a50:	29 af       	sts	0x79, r18
    6a52:	3a af       	sts	0x7a, r19
    6a54:	4b af       	sts	0x7b, r20
    6a56:	5c af       	sts	0x7c, r21
    6a58:	b7 01       	movw	r22, r14
    6a5a:	a6 01       	movw	r20, r12
    6a5c:	00 2e       	mov	r0, r16
    6a5e:	04 c0       	rjmp	.+8      	; 0x6a68 <__stack+0xa69>
    6a60:	76 95       	lsr	r23
    6a62:	67 95       	ror	r22
    6a64:	57 95       	ror	r21
    6a66:	47 95       	ror	r20
    6a68:	0a 94       	dec	r0
    6a6a:	d2 f7       	brpl	.-12     	; 0x6a60 <__stack+0xa61>
    6a6c:	49 ab       	sts	0x59, r20
    6a6e:	5a ab       	sts	0x5a, r21
    6a70:	6b ab       	sts	0x5b, r22
    6a72:	7c ab       	sts	0x5c, r23
    6a74:	c7 01       	movw	r24, r14
    6a76:	b6 01       	movw	r22, r12
    6a78:	03 2c       	mov	r0, r3
    6a7a:	04 c0       	rjmp	.+8      	; 0x6a84 <__stack+0xa85>
    6a7c:	66 0f       	add	r22, r22
    6a7e:	77 1f       	adc	r23, r23
    6a80:	88 1f       	adc	r24, r24
    6a82:	99 1f       	adc	r25, r25
    6a84:	0a 94       	dec	r0
    6a86:	d2 f7       	brpl	.-12     	; 0x6a7c <__stack+0xa7d>
    6a88:	6d a7       	lds	r22, 0x7d
    6a8a:	7e a7       	lds	r23, 0x7e
    6a8c:	8f a7       	lds	r24, 0x7f
    6a8e:	98 ab       	sts	0x58, r25
    6a90:	8d a9       	sts	0x4d, r24
    6a92:	9e a9       	sts	0x4e, r25
    6a94:	af a9       	sts	0x4f, r26
    6a96:	b8 ad       	sts	0x68, r27
    6a98:	04 c0       	rjmp	.+8      	; 0x6aa2 <__stack+0xaa3>
    6a9a:	b6 95       	lsr	r27
    6a9c:	a7 95       	ror	r26
    6a9e:	97 95       	ror	r25
    6aa0:	87 95       	ror	r24
    6aa2:	0a 95       	dec	r16
    6aa4:	d2 f7       	brpl	.-12     	; 0x6a9a <__stack+0xa9b>
    6aa6:	4d a5       	lds	r20, 0x6d
    6aa8:	5e a5       	lds	r21, 0x6e
    6aaa:	6f a5       	lds	r22, 0x6f
    6aac:	78 a9       	sts	0x48, r23
    6aae:	48 2b       	or	r20, r24
    6ab0:	59 2b       	or	r21, r25
    6ab2:	6a 2b       	or	r22, r26
    6ab4:	7b 2b       	or	r23, r27
    6ab6:	4d a7       	lds	r20, 0x7d
    6ab8:	5e a7       	lds	r21, 0x7e
    6aba:	6f a7       	lds	r22, 0x7f
    6abc:	78 ab       	sts	0x58, r23
    6abe:	43 01       	movw	r8, r6
    6ac0:	aa 24       	eor	r10, r10
    6ac2:	bb 24       	eor	r11, r11
    6ac4:	93 01       	movw	r18, r6
    6ac6:	82 01       	movw	r16, r4
    6ac8:	20 70       	andi	r18, 0x00	; 0
    6aca:	30 70       	andi	r19, 0x00	; 0
    6acc:	21 96       	adiw	r28, 0x01	; 1
    6ace:	0c af       	sts	0x7c, r16
    6ad0:	1d af       	sts	0x7d, r17
    6ad2:	2e af       	sts	0x7e, r18
    6ad4:	3f af       	sts	0x7f, r19
    6ad6:	21 97       	sbiw	r28, 0x01	; 1
    6ad8:	69 a9       	sts	0x49, r22
    6ada:	7a a9       	sts	0x4a, r23
    6adc:	8b a9       	sts	0x4b, r24
    6ade:	9c a9       	sts	0x4c, r25
    6ae0:	a5 01       	movw	r20, r10
    6ae2:	94 01       	movw	r18, r8
    6ae4:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    6ae8:	29 a7       	lds	r18, 0x79
    6aea:	3a a7       	lds	r19, 0x7a
    6aec:	4b a7       	lds	r20, 0x7b
    6aee:	5c a7       	lds	r21, 0x7c
    6af0:	6b 01       	movw	r12, r22
    6af2:	7c 01       	movw	r14, r24
    6af4:	69 a9       	sts	0x49, r22
    6af6:	7a a9       	sts	0x4a, r23
    6af8:	8b a9       	sts	0x4b, r24
    6afa:	9c a9       	sts	0x4c, r25
    6afc:	a5 01       	movw	r20, r10
    6afe:	94 01       	movw	r18, r8
    6b00:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    6b04:	ca 01       	movw	r24, r20
    6b06:	b9 01       	movw	r22, r18
    6b08:	21 96       	adiw	r28, 0x01	; 1
    6b0a:	2c ad       	sts	0x6c, r18
    6b0c:	3d ad       	sts	0x6d, r19
    6b0e:	4e ad       	sts	0x6e, r20
    6b10:	5f ad       	sts	0x6f, r21
    6b12:	21 97       	sbiw	r28, 0x01	; 1
    6b14:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    6b18:	dc 01       	movw	r26, r24
    6b1a:	cb 01       	movw	r24, r22
    6b1c:	76 01       	movw	r14, r12
    6b1e:	dd 24       	eor	r13, r13
    6b20:	cc 24       	eor	r12, r12
    6b22:	0d a5       	lds	r16, 0x6d
    6b24:	1e a5       	lds	r17, 0x6e
    6b26:	2f a5       	lds	r18, 0x6f
    6b28:	38 a9       	sts	0x48, r19
    6b2a:	a9 01       	movw	r20, r18
    6b2c:	66 27       	eor	r22, r22
    6b2e:	77 27       	eor	r23, r23
    6b30:	c4 2a       	or	r12, r20
    6b32:	d5 2a       	or	r13, r21
    6b34:	e6 2a       	or	r14, r22
    6b36:	f7 2a       	or	r15, r23
    6b38:	09 a5       	lds	r16, 0x69
    6b3a:	1a a5       	lds	r17, 0x6a
    6b3c:	2b a5       	lds	r18, 0x6b
    6b3e:	3c a5       	lds	r19, 0x6c
    6b40:	c8 16       	cp	r12, r24
    6b42:	d9 06       	cpc	r13, r25
    6b44:	ea 06       	cpc	r14, r26
    6b46:	fb 06       	cpc	r15, r27
    6b48:	38 f5       	brcc	.+78     	; 0x6b98 <__stack+0xb99>
    6b4a:	01 50       	subi	r16, 0x01	; 1
    6b4c:	10 40       	sbci	r17, 0x00	; 0
    6b4e:	20 40       	sbci	r18, 0x00	; 0
    6b50:	30 40       	sbci	r19, 0x00	; 0
    6b52:	09 ab       	sts	0x59, r16
    6b54:	1a ab       	sts	0x5a, r17
    6b56:	2b ab       	sts	0x5b, r18
    6b58:	3c ab       	sts	0x5c, r19
    6b5a:	c4 0c       	add	r12, r4
    6b5c:	d5 1c       	adc	r13, r5
    6b5e:	e6 1c       	adc	r14, r6
    6b60:	f7 1c       	adc	r15, r7
    6b62:	c4 14       	cp	r12, r4
    6b64:	d5 04       	cpc	r13, r5
    6b66:	e6 04       	cpc	r14, r6
    6b68:	f7 04       	cpc	r15, r7
    6b6a:	d0 f0       	brcs	.+52     	; 0x6ba0 <__stack+0xba1>
    6b6c:	c8 16       	cp	r12, r24
    6b6e:	d9 06       	cpc	r13, r25
    6b70:	ea 06       	cpc	r14, r26
    6b72:	fb 06       	cpc	r15, r27
    6b74:	a8 f4       	brcc	.+42     	; 0x6ba0 <__stack+0xba1>
    6b76:	09 a5       	lds	r16, 0x69
    6b78:	1a a5       	lds	r17, 0x6a
    6b7a:	2b a5       	lds	r18, 0x6b
    6b7c:	3c a5       	lds	r19, 0x6c
    6b7e:	02 50       	subi	r16, 0x02	; 2
    6b80:	10 40       	sbci	r17, 0x00	; 0
    6b82:	20 40       	sbci	r18, 0x00	; 0
    6b84:	30 40       	sbci	r19, 0x00	; 0
    6b86:	09 ab       	sts	0x59, r16
    6b88:	1a ab       	sts	0x5a, r17
    6b8a:	2b ab       	sts	0x5b, r18
    6b8c:	3c ab       	sts	0x5c, r19
    6b8e:	c4 0c       	add	r12, r4
    6b90:	d5 1c       	adc	r13, r5
    6b92:	e6 1c       	adc	r14, r6
    6b94:	f7 1c       	adc	r15, r7
    6b96:	04 c0       	rjmp	.+8      	; 0x6ba0 <__stack+0xba1>
    6b98:	09 ab       	sts	0x59, r16
    6b9a:	1a ab       	sts	0x5a, r17
    6b9c:	2b ab       	sts	0x5b, r18
    6b9e:	3c ab       	sts	0x5c, r19
    6ba0:	c8 1a       	sub	r12, r24
    6ba2:	d9 0a       	sbc	r13, r25
    6ba4:	ea 0a       	sbc	r14, r26
    6ba6:	fb 0a       	sbc	r15, r27
    6ba8:	c7 01       	movw	r24, r14
    6baa:	b6 01       	movw	r22, r12
    6bac:	a5 01       	movw	r20, r10
    6bae:	94 01       	movw	r18, r8
    6bb0:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    6bb4:	29 a7       	lds	r18, 0x79
    6bb6:	3a a7       	lds	r19, 0x7a
    6bb8:	4b a7       	lds	r20, 0x7b
    6bba:	5c a7       	lds	r21, 0x7c
    6bbc:	29 96       	adiw	r28, 0x09	; 9
    6bbe:	6c af       	sts	0x7c, r22
    6bc0:	7d af       	sts	0x7d, r23
    6bc2:	8e af       	sts	0x7e, r24
    6bc4:	9f af       	sts	0x7f, r25
    6bc6:	29 97       	sbiw	r28, 0x09	; 9
    6bc8:	c7 01       	movw	r24, r14
    6bca:	b6 01       	movw	r22, r12
    6bcc:	a5 01       	movw	r20, r10
    6bce:	94 01       	movw	r18, r8
    6bd0:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__udivmodsi4>
    6bd4:	ca 01       	movw	r24, r20
    6bd6:	b9 01       	movw	r22, r18
    6bd8:	21 96       	adiw	r28, 0x01	; 1
    6bda:	2c ad       	sts	0x6c, r18
    6bdc:	3d ad       	sts	0x6d, r19
    6bde:	4e ad       	sts	0x6e, r20
    6be0:	5f ad       	sts	0x6f, r21
    6be2:	21 97       	sbiw	r28, 0x01	; 1
    6be4:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    6be8:	4b 01       	movw	r8, r22
    6bea:	5c 01       	movw	r10, r24
    6bec:	29 96       	adiw	r28, 0x09	; 9
    6bee:	4c ad       	sts	0x6c, r20
    6bf0:	5d ad       	sts	0x6d, r21
    6bf2:	6e ad       	sts	0x6e, r22
    6bf4:	7f ad       	sts	0x6f, r23
    6bf6:	29 97       	sbiw	r28, 0x09	; 9
    6bf8:	9a 01       	movw	r18, r20
    6bfa:	11 27       	eor	r17, r17
    6bfc:	00 27       	eor	r16, r16
    6bfe:	8d a5       	lds	r24, 0x6d
    6c00:	9e a5       	lds	r25, 0x6e
    6c02:	af a5       	lds	r26, 0x6f
    6c04:	b8 a9       	sts	0x48, r27
    6c06:	a0 70       	andi	r26, 0x00	; 0
    6c08:	b0 70       	andi	r27, 0x00	; 0
    6c0a:	08 2b       	or	r16, r24
    6c0c:	19 2b       	or	r17, r25
    6c0e:	2a 2b       	or	r18, r26
    6c10:	3b 2b       	or	r19, r27
    6c12:	89 a5       	lds	r24, 0x69
    6c14:	9a a5       	lds	r25, 0x6a
    6c16:	ab a5       	lds	r26, 0x6b
    6c18:	bc a5       	lds	r27, 0x6c
    6c1a:	08 15       	cp	r16, r8
    6c1c:	19 05       	cpc	r17, r9
    6c1e:	2a 05       	cpc	r18, r10
    6c20:	3b 05       	cpc	r19, r11
    6c22:	e0 f4       	brcc	.+56     	; 0x6c5c <__stack+0xc5d>
    6c24:	01 97       	sbiw	r24, 0x01	; 1
    6c26:	a1 09       	sbc	r26, r1
    6c28:	b1 09       	sbc	r27, r1
    6c2a:	04 0d       	add	r16, r4
    6c2c:	15 1d       	adc	r17, r5
    6c2e:	26 1d       	adc	r18, r6
    6c30:	37 1d       	adc	r19, r7
    6c32:	04 15       	cp	r16, r4
    6c34:	15 05       	cpc	r17, r5
    6c36:	26 05       	cpc	r18, r6
    6c38:	37 05       	cpc	r19, r7
    6c3a:	80 f0       	brcs	.+32     	; 0x6c5c <__stack+0xc5d>
    6c3c:	08 15       	cp	r16, r8
    6c3e:	19 05       	cpc	r17, r9
    6c40:	2a 05       	cpc	r18, r10
    6c42:	3b 05       	cpc	r19, r11
    6c44:	58 f4       	brcc	.+22     	; 0x6c5c <__stack+0xc5d>
    6c46:	89 a5       	lds	r24, 0x69
    6c48:	9a a5       	lds	r25, 0x6a
    6c4a:	ab a5       	lds	r26, 0x6b
    6c4c:	bc a5       	lds	r27, 0x6c
    6c4e:	02 97       	sbiw	r24, 0x02	; 2
    6c50:	a1 09       	sbc	r26, r1
    6c52:	b1 09       	sbc	r27, r1
    6c54:	04 0d       	add	r16, r4
    6c56:	15 1d       	adc	r17, r5
    6c58:	26 1d       	adc	r18, r6
    6c5a:	37 1d       	adc	r19, r7
    6c5c:	b9 01       	movw	r22, r18
    6c5e:	a8 01       	movw	r20, r16
    6c60:	48 19       	sub	r20, r8
    6c62:	59 09       	sbc	r21, r9
    6c64:	6a 09       	sbc	r22, r10
    6c66:	7b 09       	sbc	r23, r11
    6c68:	4d a7       	lds	r20, 0x7d
    6c6a:	5e a7       	lds	r21, 0x7e
    6c6c:	6f a7       	lds	r22, 0x7f
    6c6e:	78 ab       	sts	0x58, r23
    6c70:	09 a9       	sts	0x49, r16
    6c72:	1a a9       	sts	0x4a, r17
    6c74:	2b a9       	sts	0x4b, r18
    6c76:	3c a9       	sts	0x4c, r19
    6c78:	78 01       	movw	r14, r16
    6c7a:	dd 24       	eor	r13, r13
    6c7c:	cc 24       	eor	r12, r12
    6c7e:	c8 2a       	or	r12, r24
    6c80:	d9 2a       	or	r13, r25
    6c82:	ea 2a       	or	r14, r26
    6c84:	fb 2a       	or	r15, r27
    6c86:	ff ef       	ldi	r31, 0xFF	; 255
    6c88:	8f 2e       	mov	r8, r31
    6c8a:	ff ef       	ldi	r31, 0xFF	; 255
    6c8c:	9f 2e       	mov	r9, r31
    6c8e:	a1 2c       	mov	r10, r1
    6c90:	b1 2c       	mov	r11, r1
    6c92:	8c 20       	and	r8, r12
    6c94:	9d 20       	and	r9, r13
    6c96:	ae 20       	and	r10, r14
    6c98:	bf 20       	and	r11, r15
    6c9a:	87 01       	movw	r16, r14
    6c9c:	22 27       	eor	r18, r18
    6c9e:	33 27       	eor	r19, r19
    6ca0:	09 a7       	lds	r16, 0x79
    6ca2:	1a a7       	lds	r17, 0x7a
    6ca4:	2b a7       	lds	r18, 0x7b
    6ca6:	3c a7       	lds	r19, 0x7c
    6ca8:	49 ac       	sts	0xa9, r20
    6caa:	5a ac       	sts	0xaa, r21
    6cac:	6b ac       	sts	0xab, r22
    6cae:	7c ac       	sts	0xac, r23
    6cb0:	2f ef       	ldi	r18, 0xFF	; 255
    6cb2:	3f ef       	ldi	r19, 0xFF	; 255
    6cb4:	40 e0       	ldi	r20, 0x00	; 0
    6cb6:	50 e0       	ldi	r21, 0x00	; 0
    6cb8:	42 22       	and	r4, r18
    6cba:	53 22       	and	r5, r19
    6cbc:	64 22       	and	r6, r20
    6cbe:	75 22       	and	r7, r21
    6cc0:	29 ad       	sts	0x69, r18
    6cc2:	3a ad       	sts	0x6a, r19
    6cc4:	4b ad       	sts	0x6b, r20
    6cc6:	5c ad       	sts	0x6c, r21
    6cc8:	8a 01       	movw	r16, r20
    6cca:	22 27       	eor	r18, r18
    6ccc:	33 27       	eor	r19, r19
    6cce:	09 ab       	sts	0x59, r16
    6cd0:	1a ab       	sts	0x5a, r17
    6cd2:	2b ab       	sts	0x5b, r18
    6cd4:	3c ab       	sts	0x5c, r19
    6cd6:	c5 01       	movw	r24, r10
    6cd8:	b4 01       	movw	r22, r8
    6cda:	a3 01       	movw	r20, r6
    6cdc:	92 01       	movw	r18, r4
    6cde:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    6ce2:	69 af       	sts	0x79, r22
    6ce4:	7a af       	sts	0x7a, r23
    6ce6:	8b af       	sts	0x7b, r24
    6ce8:	9c af       	sts	0x7c, r25
    6cea:	c5 01       	movw	r24, r10
    6cec:	b4 01       	movw	r22, r8
    6cee:	29 a9       	sts	0x49, r18
    6cf0:	3a a9       	sts	0x4a, r19
    6cf2:	4b a9       	sts	0x4b, r20
    6cf4:	5c a9       	sts	0x4c, r21
    6cf6:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    6cfa:	4b 01       	movw	r8, r22
    6cfc:	5c 01       	movw	r10, r24
    6cfe:	69 a5       	lds	r22, 0x69
    6d00:	7a a5       	lds	r23, 0x6a
    6d02:	8b a5       	lds	r24, 0x6b
    6d04:	9c a5       	lds	r25, 0x6c
    6d06:	a3 01       	movw	r20, r6
    6d08:	92 01       	movw	r18, r4
    6d0a:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    6d0e:	2b 01       	movw	r4, r22
    6d10:	3c 01       	movw	r6, r24
    6d12:	69 a5       	lds	r22, 0x69
    6d14:	7a a5       	lds	r23, 0x6a
    6d16:	8b a5       	lds	r24, 0x6b
    6d18:	9c a5       	lds	r25, 0x6c
    6d1a:	29 a9       	sts	0x49, r18
    6d1c:	3a a9       	sts	0x4a, r19
    6d1e:	4b a9       	sts	0x4b, r20
    6d20:	5c a9       	sts	0x4c, r21
    6d22:	0e 94 26 39 	call	0x724c	; 0x724c <__mulsi3>
    6d26:	ab 01       	movw	r20, r22
    6d28:	bc 01       	movw	r22, r24
    6d2a:	84 0c       	add	r8, r4
    6d2c:	95 1c       	adc	r9, r5
    6d2e:	a6 1c       	adc	r10, r6
    6d30:	b7 1c       	adc	r11, r7
    6d32:	09 ad       	sts	0x69, r16
    6d34:	1a ad       	sts	0x6a, r17
    6d36:	2b ad       	sts	0x6b, r18
    6d38:	3c ad       	sts	0x6c, r19
    6d3a:	c9 01       	movw	r24, r18
    6d3c:	aa 27       	eor	r26, r26
    6d3e:	bb 27       	eor	r27, r27
    6d40:	88 0e       	add	r8, r24
    6d42:	99 1e       	adc	r9, r25
    6d44:	aa 1e       	adc	r10, r26
    6d46:	bb 1e       	adc	r11, r27
    6d48:	84 14       	cp	r8, r4
    6d4a:	95 04       	cpc	r9, r5
    6d4c:	a6 04       	cpc	r10, r6
    6d4e:	b7 04       	cpc	r11, r7
    6d50:	20 f4       	brcc	.+8      	; 0x6d5a <__stack+0xd5b>
    6d52:	40 50       	subi	r20, 0x00	; 0
    6d54:	50 40       	sbci	r21, 0x00	; 0
    6d56:	6f 4f       	sbci	r22, 0xFF	; 255
    6d58:	7f 4f       	sbci	r23, 0xFF	; 255
    6d5a:	c5 01       	movw	r24, r10
    6d5c:	aa 27       	eor	r26, r26
    6d5e:	bb 27       	eor	r27, r27
    6d60:	84 0f       	add	r24, r20
    6d62:	95 1f       	adc	r25, r21
    6d64:	a6 1f       	adc	r26, r22
    6d66:	b7 1f       	adc	r27, r23
    6d68:	0d a5       	lds	r16, 0x6d
    6d6a:	1e a5       	lds	r17, 0x6e
    6d6c:	2f a5       	lds	r18, 0x6f
    6d6e:	38 a9       	sts	0x48, r19
    6d70:	08 17       	cp	r16, r24
    6d72:	19 07       	cpc	r17, r25
    6d74:	2a 07       	cpc	r18, r26
    6d76:	3b 07       	cpc	r19, r27
    6d78:	18 f1       	brcs	.+70     	; 0x6dc0 <__stack+0xdc1>
    6d7a:	80 17       	cp	r24, r16
    6d7c:	91 07       	cpc	r25, r17
    6d7e:	a2 07       	cpc	r26, r18
    6d80:	b3 07       	cpc	r27, r19
    6d82:	a1 f5       	brne	.+104    	; 0x6dec <__stack+0xded>
    6d84:	54 01       	movw	r10, r8
    6d86:	99 24       	eor	r9, r9
    6d88:	88 24       	eor	r8, r8
    6d8a:	89 ad       	sts	0x69, r24
    6d8c:	9a ad       	sts	0x6a, r25
    6d8e:	ab ad       	sts	0x6b, r26
    6d90:	bc ad       	sts	0x6c, r27
    6d92:	a0 70       	andi	r26, 0x00	; 0
    6d94:	b0 70       	andi	r27, 0x00	; 0
    6d96:	88 0e       	add	r8, r24
    6d98:	99 1e       	adc	r9, r25
    6d9a:	aa 1e       	adc	r10, r26
    6d9c:	bb 1e       	adc	r11, r27
    6d9e:	4d a9       	sts	0x4d, r20
    6da0:	5e a9       	sts	0x4e, r21
    6da2:	6f a9       	sts	0x4f, r22
    6da4:	78 ad       	sts	0x68, r23
    6da6:	03 2c       	mov	r0, r3
    6da8:	04 c0       	rjmp	.+8      	; 0x6db2 <__stack+0xdb3>
    6daa:	44 0f       	add	r20, r20
    6dac:	55 1f       	adc	r21, r21
    6dae:	66 1f       	adc	r22, r22
    6db0:	77 1f       	adc	r23, r23
    6db2:	0a 94       	dec	r0
    6db4:	d2 f7       	brpl	.-12     	; 0x6daa <__stack+0xdab>
    6db6:	48 15       	cp	r20, r8
    6db8:	59 05       	cpc	r21, r9
    6dba:	6a 05       	cpc	r22, r10
    6dbc:	7b 05       	cpc	r23, r11
    6dbe:	b0 f4       	brcc	.+44     	; 0x6dec <__stack+0xded>
    6dc0:	08 94       	sec
    6dc2:	c1 08       	sbc	r12, r1
    6dc4:	d1 08       	sbc	r13, r1
    6dc6:	e1 08       	sbc	r14, r1
    6dc8:	f1 08       	sbc	r15, r1
    6dca:	10 c0       	rjmp	.+32     	; 0x6dec <__stack+0xded>
    6dcc:	44 24       	eor	r4, r4
    6dce:	55 24       	eor	r5, r5
    6dd0:	32 01       	movw	r6, r4
    6dd2:	cc 24       	eor	r12, r12
    6dd4:	dd 24       	eor	r13, r13
    6dd6:	76 01       	movw	r14, r12
    6dd8:	0c c0       	rjmp	.+24     	; 0x6df2 <__stack+0xdf3>
    6dda:	44 24       	eor	r4, r4
    6ddc:	55 24       	eor	r5, r5
    6dde:	32 01       	movw	r6, r4
    6de0:	81 e0       	ldi	r24, 0x01	; 1
    6de2:	c8 2e       	mov	r12, r24
    6de4:	d1 2c       	mov	r13, r1
    6de6:	e1 2c       	mov	r14, r1
    6de8:	f1 2c       	mov	r15, r1
    6dea:	03 c0       	rjmp	.+6      	; 0x6df2 <__stack+0xdf3>
    6dec:	44 24       	eor	r4, r4
    6dee:	55 24       	eor	r5, r5
    6df0:	32 01       	movw	r6, r4
    6df2:	fe 01       	movw	r30, r28
    6df4:	31 96       	adiw	r30, 0x01	; 1
    6df6:	88 e0       	ldi	r24, 0x08	; 8
    6df8:	df 01       	movw	r26, r30
    6dfa:	1d 92       	st	X+, r1
    6dfc:	8a 95       	dec	r24
    6dfe:	e9 f7       	brne	.-6      	; 0x6dfa <__stack+0xdfb>
    6e00:	c9 82       	std	Y+1, r12	; 0x01
    6e02:	da 82       	std	Y+2, r13	; 0x02
    6e04:	eb 82       	std	Y+3, r14	; 0x03
    6e06:	fc 82       	std	Y+4, r15	; 0x04
    6e08:	4d 82       	std	Y+5, r4	; 0x05
    6e0a:	5e 82       	std	Y+6, r5	; 0x06
    6e0c:	6f 82       	std	Y+7, r6	; 0x07
    6e0e:	78 86       	std	Y+8, r7	; 0x08
    6e10:	2c 2d       	mov	r18, r12
    6e12:	3a 81       	ldd	r19, Y+2	; 0x02
    6e14:	4b 81       	ldd	r20, Y+3	; 0x03
    6e16:	5c 81       	ldd	r21, Y+4	; 0x04
    6e18:	64 2d       	mov	r22, r4
    6e1a:	7e 81       	ldd	r23, Y+6	; 0x06
    6e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    6e1e:	98 85       	ldd	r25, Y+8	; 0x08
    6e20:	25 96       	adiw	r28, 0x05	; 5
    6e22:	ec ac       	sts	0xac, r30
    6e24:	fd ac       	sts	0xad, r31
    6e26:	0e ad       	sts	0x6e, r16
    6e28:	1f ad       	sts	0x6f, r17
    6e2a:	25 97       	sbiw	r28, 0x05	; 5
    6e2c:	e1 14       	cp	r14, r1
    6e2e:	f1 04       	cpc	r15, r1
    6e30:	01 05       	cpc	r16, r1
    6e32:	11 05       	cpc	r17, r1
    6e34:	09 f4       	brne	.+2      	; 0x6e38 <__stack+0xe39>
    6e36:	56 c0       	rjmp	.+172    	; 0x6ee4 <__stack+0xee5>
    6e38:	21 95       	neg	r18
    6e3a:	e1 e0       	ldi	r30, 0x01	; 1
    6e3c:	12 16       	cp	r1, r18
    6e3e:	08 f0       	brcs	.+2      	; 0x6e42 <__stack+0xe43>
    6e40:	e0 e0       	ldi	r30, 0x00	; 0
    6e42:	31 95       	neg	r19
    6e44:	f1 e0       	ldi	r31, 0x01	; 1
    6e46:	13 16       	cp	r1, r19
    6e48:	08 f0       	brcs	.+2      	; 0x6e4c <__stack+0xe4d>
    6e4a:	f0 e0       	ldi	r31, 0x00	; 0
    6e4c:	03 2f       	mov	r16, r19
    6e4e:	0e 1b       	sub	r16, r30
    6e50:	e1 e0       	ldi	r30, 0x01	; 1
    6e52:	30 17       	cp	r19, r16
    6e54:	08 f0       	brcs	.+2      	; 0x6e58 <__stack+0xe59>
    6e56:	e0 e0       	ldi	r30, 0x00	; 0
    6e58:	fe 2b       	or	r31, r30
    6e5a:	41 95       	neg	r20
    6e5c:	e1 e0       	ldi	r30, 0x01	; 1
    6e5e:	14 16       	cp	r1, r20
    6e60:	08 f0       	brcs	.+2      	; 0x6e64 <__stack+0xe65>
    6e62:	e0 e0       	ldi	r30, 0x00	; 0
    6e64:	14 2f       	mov	r17, r20
    6e66:	1f 1b       	sub	r17, r31
    6e68:	31 e0       	ldi	r19, 0x01	; 1
    6e6a:	41 17       	cp	r20, r17
    6e6c:	08 f0       	brcs	.+2      	; 0x6e70 <__stack+0xe71>
    6e6e:	30 e0       	ldi	r19, 0x00	; 0
    6e70:	e3 2b       	or	r30, r19
    6e72:	51 95       	neg	r21
    6e74:	f1 e0       	ldi	r31, 0x01	; 1
    6e76:	15 16       	cp	r1, r21
    6e78:	08 f0       	brcs	.+2      	; 0x6e7c <__stack+0xe7d>
    6e7a:	f0 e0       	ldi	r31, 0x00	; 0
    6e7c:	b5 2f       	mov	r27, r21
    6e7e:	be 1b       	sub	r27, r30
    6e80:	31 e0       	ldi	r19, 0x01	; 1
    6e82:	5b 17       	cp	r21, r27
    6e84:	08 f0       	brcs	.+2      	; 0x6e88 <__stack+0xe89>
    6e86:	30 e0       	ldi	r19, 0x00	; 0
    6e88:	f3 2b       	or	r31, r19
    6e8a:	61 95       	neg	r22
    6e8c:	e1 e0       	ldi	r30, 0x01	; 1
    6e8e:	16 16       	cp	r1, r22
    6e90:	08 f0       	brcs	.+2      	; 0x6e94 <__stack+0xe95>
    6e92:	e0 e0       	ldi	r30, 0x00	; 0
    6e94:	46 2e       	mov	r4, r22
    6e96:	4f 1a       	sub	r4, r31
    6e98:	31 e0       	ldi	r19, 0x01	; 1
    6e9a:	64 15       	cp	r22, r4
    6e9c:	08 f0       	brcs	.+2      	; 0x6ea0 <__stack+0xea1>
    6e9e:	30 e0       	ldi	r19, 0x00	; 0
    6ea0:	e3 2b       	or	r30, r19
    6ea2:	71 95       	neg	r23
    6ea4:	f1 e0       	ldi	r31, 0x01	; 1
    6ea6:	17 16       	cp	r1, r23
    6ea8:	08 f0       	brcs	.+2      	; 0x6eac <__stack+0xead>
    6eaa:	f0 e0       	ldi	r31, 0x00	; 0
    6eac:	a7 2f       	mov	r26, r23
    6eae:	ae 1b       	sub	r26, r30
    6eb0:	31 e0       	ldi	r19, 0x01	; 1
    6eb2:	7a 17       	cp	r23, r26
    6eb4:	08 f0       	brcs	.+2      	; 0x6eb8 <__stack+0xeb9>
    6eb6:	30 e0       	ldi	r19, 0x00	; 0
    6eb8:	f3 2b       	or	r31, r19
    6eba:	81 95       	neg	r24
    6ebc:	e1 e0       	ldi	r30, 0x01	; 1
    6ebe:	18 16       	cp	r1, r24
    6ec0:	08 f0       	brcs	.+2      	; 0x6ec4 <__stack+0xec5>
    6ec2:	e0 e0       	ldi	r30, 0x00	; 0
    6ec4:	f8 2e       	mov	r15, r24
    6ec6:	ff 1a       	sub	r15, r31
    6ec8:	ff 2d       	mov	r31, r15
    6eca:	31 e0       	ldi	r19, 0x01	; 1
    6ecc:	8f 15       	cp	r24, r15
    6ece:	08 f0       	brcs	.+2      	; 0x6ed2 <__stack+0xed3>
    6ed0:	30 e0       	ldi	r19, 0x00	; 0
    6ed2:	e3 2b       	or	r30, r19
    6ed4:	91 95       	neg	r25
    6ed6:	30 2f       	mov	r19, r16
    6ed8:	41 2f       	mov	r20, r17
    6eda:	5b 2f       	mov	r21, r27
    6edc:	64 2d       	mov	r22, r4
    6ede:	7a 2f       	mov	r23, r26
    6ee0:	8f 2f       	mov	r24, r31
    6ee2:	9e 1b       	sub	r25, r30
    6ee4:	c8 5b       	subi	r28, 0xB8	; 184
    6ee6:	df 4f       	sbci	r29, 0xFF	; 255
    6ee8:	e1 e1       	ldi	r30, 0x11	; 17
    6eea:	0c 94 c3 39 	jmp	0x7386	; 0x7386 <__epilogue_restores__+0x2>

00006eee <__subsf3>:
    6eee:	50 58       	subi	r21, 0x80	; 128

00006ef0 <__addsf3>:
    6ef0:	bb 27       	eor	r27, r27
    6ef2:	aa 27       	eor	r26, r26
    6ef4:	0e d0       	rcall	.+28     	; 0x6f12 <__addsf3x>
    6ef6:	48 c1       	rjmp	.+656    	; 0x7188 <__fp_round>
    6ef8:	39 d1       	rcall	.+626    	; 0x716c <__fp_pscA>
    6efa:	30 f0       	brcs	.+12     	; 0x6f08 <__addsf3+0x18>
    6efc:	3e d1       	rcall	.+636    	; 0x717a <__fp_pscB>
    6efe:	20 f0       	brcs	.+8      	; 0x6f08 <__addsf3+0x18>
    6f00:	31 f4       	brne	.+12     	; 0x6f0e <__addsf3+0x1e>
    6f02:	9f 3f       	cpi	r25, 0xFF	; 255
    6f04:	11 f4       	brne	.+4      	; 0x6f0a <__addsf3+0x1a>
    6f06:	1e f4       	brtc	.+6      	; 0x6f0e <__addsf3+0x1e>
    6f08:	2e c1       	rjmp	.+604    	; 0x7166 <__fp_nan>
    6f0a:	0e f4       	brtc	.+2      	; 0x6f0e <__addsf3+0x1e>
    6f0c:	e0 95       	com	r30
    6f0e:	e7 fb       	bst	r30, 7
    6f10:	24 c1       	rjmp	.+584    	; 0x715a <__fp_inf>

00006f12 <__addsf3x>:
    6f12:	e9 2f       	mov	r30, r25
    6f14:	4a d1       	rcall	.+660    	; 0x71aa <__fp_split3>
    6f16:	80 f3       	brcs	.-32     	; 0x6ef8 <__addsf3+0x8>
    6f18:	ba 17       	cp	r27, r26
    6f1a:	62 07       	cpc	r22, r18
    6f1c:	73 07       	cpc	r23, r19
    6f1e:	84 07       	cpc	r24, r20
    6f20:	95 07       	cpc	r25, r21
    6f22:	18 f0       	brcs	.+6      	; 0x6f2a <__addsf3x+0x18>
    6f24:	71 f4       	brne	.+28     	; 0x6f42 <__addsf3x+0x30>
    6f26:	9e f5       	brtc	.+102    	; 0x6f8e <__addsf3x+0x7c>
    6f28:	62 c1       	rjmp	.+708    	; 0x71ee <__fp_zero>
    6f2a:	0e f4       	brtc	.+2      	; 0x6f2e <__addsf3x+0x1c>
    6f2c:	e0 95       	com	r30
    6f2e:	0b 2e       	mov	r0, r27
    6f30:	ba 2f       	mov	r27, r26
    6f32:	a0 2d       	mov	r26, r0
    6f34:	0b 01       	movw	r0, r22
    6f36:	b9 01       	movw	r22, r18
    6f38:	90 01       	movw	r18, r0
    6f3a:	0c 01       	movw	r0, r24
    6f3c:	ca 01       	movw	r24, r20
    6f3e:	a0 01       	movw	r20, r0
    6f40:	11 24       	eor	r1, r1
    6f42:	ff 27       	eor	r31, r31
    6f44:	59 1b       	sub	r21, r25
    6f46:	99 f0       	breq	.+38     	; 0x6f6e <__addsf3x+0x5c>
    6f48:	59 3f       	cpi	r21, 0xF9	; 249
    6f4a:	50 f4       	brcc	.+20     	; 0x6f60 <__addsf3x+0x4e>
    6f4c:	50 3e       	cpi	r21, 0xE0	; 224
    6f4e:	68 f1       	brcs	.+90     	; 0x6faa <__addsf3x+0x98>
    6f50:	1a 16       	cp	r1, r26
    6f52:	f0 40       	sbci	r31, 0x00	; 0
    6f54:	a2 2f       	mov	r26, r18
    6f56:	23 2f       	mov	r18, r19
    6f58:	34 2f       	mov	r19, r20
    6f5a:	44 27       	eor	r20, r20
    6f5c:	58 5f       	subi	r21, 0xF8	; 248
    6f5e:	f3 cf       	rjmp	.-26     	; 0x6f46 <__addsf3x+0x34>
    6f60:	46 95       	lsr	r20
    6f62:	37 95       	ror	r19
    6f64:	27 95       	ror	r18
    6f66:	a7 95       	ror	r26
    6f68:	f0 40       	sbci	r31, 0x00	; 0
    6f6a:	53 95       	inc	r21
    6f6c:	c9 f7       	brne	.-14     	; 0x6f60 <__addsf3x+0x4e>
    6f6e:	7e f4       	brtc	.+30     	; 0x6f8e <__addsf3x+0x7c>
    6f70:	1f 16       	cp	r1, r31
    6f72:	ba 0b       	sbc	r27, r26
    6f74:	62 0b       	sbc	r22, r18
    6f76:	73 0b       	sbc	r23, r19
    6f78:	84 0b       	sbc	r24, r20
    6f7a:	ba f0       	brmi	.+46     	; 0x6faa <__addsf3x+0x98>
    6f7c:	91 50       	subi	r25, 0x01	; 1
    6f7e:	a1 f0       	breq	.+40     	; 0x6fa8 <__addsf3x+0x96>
    6f80:	ff 0f       	add	r31, r31
    6f82:	bb 1f       	adc	r27, r27
    6f84:	66 1f       	adc	r22, r22
    6f86:	77 1f       	adc	r23, r23
    6f88:	88 1f       	adc	r24, r24
    6f8a:	c2 f7       	brpl	.-16     	; 0x6f7c <__addsf3x+0x6a>
    6f8c:	0e c0       	rjmp	.+28     	; 0x6faa <__addsf3x+0x98>
    6f8e:	ba 0f       	add	r27, r26
    6f90:	62 1f       	adc	r22, r18
    6f92:	73 1f       	adc	r23, r19
    6f94:	84 1f       	adc	r24, r20
    6f96:	48 f4       	brcc	.+18     	; 0x6faa <__addsf3x+0x98>
    6f98:	87 95       	ror	r24
    6f9a:	77 95       	ror	r23
    6f9c:	67 95       	ror	r22
    6f9e:	b7 95       	ror	r27
    6fa0:	f7 95       	ror	r31
    6fa2:	9e 3f       	cpi	r25, 0xFE	; 254
    6fa4:	08 f0       	brcs	.+2      	; 0x6fa8 <__addsf3x+0x96>
    6fa6:	b3 cf       	rjmp	.-154    	; 0x6f0e <__addsf3+0x1e>
    6fa8:	93 95       	inc	r25
    6faa:	88 0f       	add	r24, r24
    6fac:	08 f0       	brcs	.+2      	; 0x6fb0 <__addsf3x+0x9e>
    6fae:	99 27       	eor	r25, r25
    6fb0:	ee 0f       	add	r30, r30
    6fb2:	97 95       	ror	r25
    6fb4:	87 95       	ror	r24
    6fb6:	08 95       	ret

00006fb8 <__divsf3>:
    6fb8:	0c d0       	rcall	.+24     	; 0x6fd2 <__divsf3x>
    6fba:	e6 c0       	rjmp	.+460    	; 0x7188 <__fp_round>
    6fbc:	de d0       	rcall	.+444    	; 0x717a <__fp_pscB>
    6fbe:	40 f0       	brcs	.+16     	; 0x6fd0 <__divsf3+0x18>
    6fc0:	d5 d0       	rcall	.+426    	; 0x716c <__fp_pscA>
    6fc2:	30 f0       	brcs	.+12     	; 0x6fd0 <__divsf3+0x18>
    6fc4:	21 f4       	brne	.+8      	; 0x6fce <__divsf3+0x16>
    6fc6:	5f 3f       	cpi	r21, 0xFF	; 255
    6fc8:	19 f0       	breq	.+6      	; 0x6fd0 <__divsf3+0x18>
    6fca:	c7 c0       	rjmp	.+398    	; 0x715a <__fp_inf>
    6fcc:	51 11       	cpse	r21, r1
    6fce:	10 c1       	rjmp	.+544    	; 0x71f0 <__fp_szero>
    6fd0:	ca c0       	rjmp	.+404    	; 0x7166 <__fp_nan>

00006fd2 <__divsf3x>:
    6fd2:	eb d0       	rcall	.+470    	; 0x71aa <__fp_split3>
    6fd4:	98 f3       	brcs	.-26     	; 0x6fbc <__divsf3+0x4>

00006fd6 <__divsf3_pse>:
    6fd6:	99 23       	and	r25, r25
    6fd8:	c9 f3       	breq	.-14     	; 0x6fcc <__divsf3+0x14>
    6fda:	55 23       	and	r21, r21
    6fdc:	b1 f3       	breq	.-20     	; 0x6fca <__divsf3+0x12>
    6fde:	95 1b       	sub	r25, r21
    6fe0:	55 0b       	sbc	r21, r21
    6fe2:	bb 27       	eor	r27, r27
    6fe4:	aa 27       	eor	r26, r26
    6fe6:	62 17       	cp	r22, r18
    6fe8:	73 07       	cpc	r23, r19
    6fea:	84 07       	cpc	r24, r20
    6fec:	38 f0       	brcs	.+14     	; 0x6ffc <__divsf3_pse+0x26>
    6fee:	9f 5f       	subi	r25, 0xFF	; 255
    6ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    6ff2:	22 0f       	add	r18, r18
    6ff4:	33 1f       	adc	r19, r19
    6ff6:	44 1f       	adc	r20, r20
    6ff8:	aa 1f       	adc	r26, r26
    6ffa:	a9 f3       	breq	.-22     	; 0x6fe6 <__divsf3_pse+0x10>
    6ffc:	33 d0       	rcall	.+102    	; 0x7064 <__divsf3_pse+0x8e>
    6ffe:	0e 2e       	mov	r0, r30
    7000:	3a f0       	brmi	.+14     	; 0x7010 <__divsf3_pse+0x3a>
    7002:	e0 e8       	ldi	r30, 0x80	; 128
    7004:	30 d0       	rcall	.+96     	; 0x7066 <__divsf3_pse+0x90>
    7006:	91 50       	subi	r25, 0x01	; 1
    7008:	50 40       	sbci	r21, 0x00	; 0
    700a:	e6 95       	lsr	r30
    700c:	00 1c       	adc	r0, r0
    700e:	ca f7       	brpl	.-14     	; 0x7002 <__divsf3_pse+0x2c>
    7010:	29 d0       	rcall	.+82     	; 0x7064 <__divsf3_pse+0x8e>
    7012:	fe 2f       	mov	r31, r30
    7014:	27 d0       	rcall	.+78     	; 0x7064 <__divsf3_pse+0x8e>
    7016:	66 0f       	add	r22, r22
    7018:	77 1f       	adc	r23, r23
    701a:	88 1f       	adc	r24, r24
    701c:	bb 1f       	adc	r27, r27
    701e:	26 17       	cp	r18, r22
    7020:	37 07       	cpc	r19, r23
    7022:	48 07       	cpc	r20, r24
    7024:	ab 07       	cpc	r26, r27
    7026:	b0 e8       	ldi	r27, 0x80	; 128
    7028:	09 f0       	breq	.+2      	; 0x702c <__divsf3_pse+0x56>
    702a:	bb 0b       	sbc	r27, r27
    702c:	80 2d       	mov	r24, r0
    702e:	bf 01       	movw	r22, r30
    7030:	ff 27       	eor	r31, r31
    7032:	93 58       	subi	r25, 0x83	; 131
    7034:	5f 4f       	sbci	r21, 0xFF	; 255
    7036:	2a f0       	brmi	.+10     	; 0x7042 <__divsf3_pse+0x6c>
    7038:	9e 3f       	cpi	r25, 0xFE	; 254
    703a:	51 05       	cpc	r21, r1
    703c:	68 f0       	brcs	.+26     	; 0x7058 <__divsf3_pse+0x82>
    703e:	8d c0       	rjmp	.+282    	; 0x715a <__fp_inf>
    7040:	d7 c0       	rjmp	.+430    	; 0x71f0 <__fp_szero>
    7042:	5f 3f       	cpi	r21, 0xFF	; 255
    7044:	ec f3       	brlt	.-6      	; 0x7040 <__divsf3_pse+0x6a>
    7046:	98 3e       	cpi	r25, 0xE8	; 232
    7048:	dc f3       	brlt	.-10     	; 0x7040 <__divsf3_pse+0x6a>
    704a:	86 95       	lsr	r24
    704c:	77 95       	ror	r23
    704e:	67 95       	ror	r22
    7050:	b7 95       	ror	r27
    7052:	f7 95       	ror	r31
    7054:	9f 5f       	subi	r25, 0xFF	; 255
    7056:	c9 f7       	brne	.-14     	; 0x704a <__divsf3_pse+0x74>
    7058:	88 0f       	add	r24, r24
    705a:	91 1d       	adc	r25, r1
    705c:	96 95       	lsr	r25
    705e:	87 95       	ror	r24
    7060:	97 f9       	bld	r25, 7
    7062:	08 95       	ret
    7064:	e1 e0       	ldi	r30, 0x01	; 1
    7066:	66 0f       	add	r22, r22
    7068:	77 1f       	adc	r23, r23
    706a:	88 1f       	adc	r24, r24
    706c:	bb 1f       	adc	r27, r27
    706e:	62 17       	cp	r22, r18
    7070:	73 07       	cpc	r23, r19
    7072:	84 07       	cpc	r24, r20
    7074:	ba 07       	cpc	r27, r26
    7076:	20 f0       	brcs	.+8      	; 0x7080 <__divsf3_pse+0xaa>
    7078:	62 1b       	sub	r22, r18
    707a:	73 0b       	sbc	r23, r19
    707c:	84 0b       	sbc	r24, r20
    707e:	ba 0b       	sbc	r27, r26
    7080:	ee 1f       	adc	r30, r30
    7082:	88 f7       	brcc	.-30     	; 0x7066 <__divsf3_pse+0x90>
    7084:	e0 95       	com	r30
    7086:	08 95       	ret

00007088 <__fixunssfsi>:
    7088:	98 d0       	rcall	.+304    	; 0x71ba <__fp_splitA>
    708a:	88 f0       	brcs	.+34     	; 0x70ae <__fixunssfsi+0x26>
    708c:	9f 57       	subi	r25, 0x7F	; 127
    708e:	90 f0       	brcs	.+36     	; 0x70b4 <__fixunssfsi+0x2c>
    7090:	b9 2f       	mov	r27, r25
    7092:	99 27       	eor	r25, r25
    7094:	b7 51       	subi	r27, 0x17	; 23
    7096:	a0 f0       	brcs	.+40     	; 0x70c0 <__fixunssfsi+0x38>
    7098:	d1 f0       	breq	.+52     	; 0x70ce <__fixunssfsi+0x46>
    709a:	66 0f       	add	r22, r22
    709c:	77 1f       	adc	r23, r23
    709e:	88 1f       	adc	r24, r24
    70a0:	99 1f       	adc	r25, r25
    70a2:	1a f0       	brmi	.+6      	; 0x70aa <__fixunssfsi+0x22>
    70a4:	ba 95       	dec	r27
    70a6:	c9 f7       	brne	.-14     	; 0x709a <__fixunssfsi+0x12>
    70a8:	12 c0       	rjmp	.+36     	; 0x70ce <__fixunssfsi+0x46>
    70aa:	b1 30       	cpi	r27, 0x01	; 1
    70ac:	81 f0       	breq	.+32     	; 0x70ce <__fixunssfsi+0x46>
    70ae:	9f d0       	rcall	.+318    	; 0x71ee <__fp_zero>
    70b0:	b1 e0       	ldi	r27, 0x01	; 1
    70b2:	08 95       	ret
    70b4:	9c c0       	rjmp	.+312    	; 0x71ee <__fp_zero>
    70b6:	67 2f       	mov	r22, r23
    70b8:	78 2f       	mov	r23, r24
    70ba:	88 27       	eor	r24, r24
    70bc:	b8 5f       	subi	r27, 0xF8	; 248
    70be:	39 f0       	breq	.+14     	; 0x70ce <__fixunssfsi+0x46>
    70c0:	b9 3f       	cpi	r27, 0xF9	; 249
    70c2:	cc f3       	brlt	.-14     	; 0x70b6 <__fixunssfsi+0x2e>
    70c4:	86 95       	lsr	r24
    70c6:	77 95       	ror	r23
    70c8:	67 95       	ror	r22
    70ca:	b3 95       	inc	r27
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__fixunssfsi+0x3c>
    70ce:	3e f4       	brtc	.+14     	; 0x70de <__fixunssfsi+0x56>
    70d0:	90 95       	com	r25
    70d2:	80 95       	com	r24
    70d4:	70 95       	com	r23
    70d6:	61 95       	neg	r22
    70d8:	7f 4f       	sbci	r23, 0xFF	; 255
    70da:	8f 4f       	sbci	r24, 0xFF	; 255
    70dc:	9f 4f       	sbci	r25, 0xFF	; 255
    70de:	08 95       	ret

000070e0 <__floatunsisf>:
    70e0:	e8 94       	clt
    70e2:	09 c0       	rjmp	.+18     	; 0x70f6 <__floatsisf+0x12>

000070e4 <__floatsisf>:
    70e4:	97 fb       	bst	r25, 7
    70e6:	3e f4       	brtc	.+14     	; 0x70f6 <__floatsisf+0x12>
    70e8:	90 95       	com	r25
    70ea:	80 95       	com	r24
    70ec:	70 95       	com	r23
    70ee:	61 95       	neg	r22
    70f0:	7f 4f       	sbci	r23, 0xFF	; 255
    70f2:	8f 4f       	sbci	r24, 0xFF	; 255
    70f4:	9f 4f       	sbci	r25, 0xFF	; 255
    70f6:	99 23       	and	r25, r25
    70f8:	a9 f0       	breq	.+42     	; 0x7124 <__floatsisf+0x40>
    70fa:	f9 2f       	mov	r31, r25
    70fc:	96 e9       	ldi	r25, 0x96	; 150
    70fe:	bb 27       	eor	r27, r27
    7100:	93 95       	inc	r25
    7102:	f6 95       	lsr	r31
    7104:	87 95       	ror	r24
    7106:	77 95       	ror	r23
    7108:	67 95       	ror	r22
    710a:	b7 95       	ror	r27
    710c:	f1 11       	cpse	r31, r1
    710e:	f8 cf       	rjmp	.-16     	; 0x7100 <__floatsisf+0x1c>
    7110:	fa f4       	brpl	.+62     	; 0x7150 <__floatsisf+0x6c>
    7112:	bb 0f       	add	r27, r27
    7114:	11 f4       	brne	.+4      	; 0x711a <__floatsisf+0x36>
    7116:	60 ff       	sbrs	r22, 0
    7118:	1b c0       	rjmp	.+54     	; 0x7150 <__floatsisf+0x6c>
    711a:	6f 5f       	subi	r22, 0xFF	; 255
    711c:	7f 4f       	sbci	r23, 0xFF	; 255
    711e:	8f 4f       	sbci	r24, 0xFF	; 255
    7120:	9f 4f       	sbci	r25, 0xFF	; 255
    7122:	16 c0       	rjmp	.+44     	; 0x7150 <__floatsisf+0x6c>
    7124:	88 23       	and	r24, r24
    7126:	11 f0       	breq	.+4      	; 0x712c <__floatsisf+0x48>
    7128:	96 e9       	ldi	r25, 0x96	; 150
    712a:	11 c0       	rjmp	.+34     	; 0x714e <__floatsisf+0x6a>
    712c:	77 23       	and	r23, r23
    712e:	21 f0       	breq	.+8      	; 0x7138 <__floatsisf+0x54>
    7130:	9e e8       	ldi	r25, 0x8E	; 142
    7132:	87 2f       	mov	r24, r23
    7134:	76 2f       	mov	r23, r22
    7136:	05 c0       	rjmp	.+10     	; 0x7142 <__floatsisf+0x5e>
    7138:	66 23       	and	r22, r22
    713a:	71 f0       	breq	.+28     	; 0x7158 <__floatsisf+0x74>
    713c:	96 e8       	ldi	r25, 0x86	; 134
    713e:	86 2f       	mov	r24, r22
    7140:	70 e0       	ldi	r23, 0x00	; 0
    7142:	60 e0       	ldi	r22, 0x00	; 0
    7144:	2a f0       	brmi	.+10     	; 0x7150 <__floatsisf+0x6c>
    7146:	9a 95       	dec	r25
    7148:	66 0f       	add	r22, r22
    714a:	77 1f       	adc	r23, r23
    714c:	88 1f       	adc	r24, r24
    714e:	da f7       	brpl	.-10     	; 0x7146 <__floatsisf+0x62>
    7150:	88 0f       	add	r24, r24
    7152:	96 95       	lsr	r25
    7154:	87 95       	ror	r24
    7156:	97 f9       	bld	r25, 7
    7158:	08 95       	ret

0000715a <__fp_inf>:
    715a:	97 f9       	bld	r25, 7
    715c:	9f 67       	ori	r25, 0x7F	; 127
    715e:	80 e8       	ldi	r24, 0x80	; 128
    7160:	70 e0       	ldi	r23, 0x00	; 0
    7162:	60 e0       	ldi	r22, 0x00	; 0
    7164:	08 95       	ret

00007166 <__fp_nan>:
    7166:	9f ef       	ldi	r25, 0xFF	; 255
    7168:	80 ec       	ldi	r24, 0xC0	; 192
    716a:	08 95       	ret

0000716c <__fp_pscA>:
    716c:	00 24       	eor	r0, r0
    716e:	0a 94       	dec	r0
    7170:	16 16       	cp	r1, r22
    7172:	17 06       	cpc	r1, r23
    7174:	18 06       	cpc	r1, r24
    7176:	09 06       	cpc	r0, r25
    7178:	08 95       	ret

0000717a <__fp_pscB>:
    717a:	00 24       	eor	r0, r0
    717c:	0a 94       	dec	r0
    717e:	12 16       	cp	r1, r18
    7180:	13 06       	cpc	r1, r19
    7182:	14 06       	cpc	r1, r20
    7184:	05 06       	cpc	r0, r21
    7186:	08 95       	ret

00007188 <__fp_round>:
    7188:	09 2e       	mov	r0, r25
    718a:	03 94       	inc	r0
    718c:	00 0c       	add	r0, r0
    718e:	11 f4       	brne	.+4      	; 0x7194 <__fp_round+0xc>
    7190:	88 23       	and	r24, r24
    7192:	52 f0       	brmi	.+20     	; 0x71a8 <__fp_round+0x20>
    7194:	bb 0f       	add	r27, r27
    7196:	40 f4       	brcc	.+16     	; 0x71a8 <__fp_round+0x20>
    7198:	bf 2b       	or	r27, r31
    719a:	11 f4       	brne	.+4      	; 0x71a0 <__fp_round+0x18>
    719c:	60 ff       	sbrs	r22, 0
    719e:	04 c0       	rjmp	.+8      	; 0x71a8 <__fp_round+0x20>
    71a0:	6f 5f       	subi	r22, 0xFF	; 255
    71a2:	7f 4f       	sbci	r23, 0xFF	; 255
    71a4:	8f 4f       	sbci	r24, 0xFF	; 255
    71a6:	9f 4f       	sbci	r25, 0xFF	; 255
    71a8:	08 95       	ret

000071aa <__fp_split3>:
    71aa:	57 fd       	sbrc	r21, 7
    71ac:	90 58       	subi	r25, 0x80	; 128
    71ae:	44 0f       	add	r20, r20
    71b0:	55 1f       	adc	r21, r21
    71b2:	59 f0       	breq	.+22     	; 0x71ca <__fp_splitA+0x10>
    71b4:	5f 3f       	cpi	r21, 0xFF	; 255
    71b6:	71 f0       	breq	.+28     	; 0x71d4 <__fp_splitA+0x1a>
    71b8:	47 95       	ror	r20

000071ba <__fp_splitA>:
    71ba:	88 0f       	add	r24, r24
    71bc:	97 fb       	bst	r25, 7
    71be:	99 1f       	adc	r25, r25
    71c0:	61 f0       	breq	.+24     	; 0x71da <__fp_splitA+0x20>
    71c2:	9f 3f       	cpi	r25, 0xFF	; 255
    71c4:	79 f0       	breq	.+30     	; 0x71e4 <__fp_splitA+0x2a>
    71c6:	87 95       	ror	r24
    71c8:	08 95       	ret
    71ca:	12 16       	cp	r1, r18
    71cc:	13 06       	cpc	r1, r19
    71ce:	14 06       	cpc	r1, r20
    71d0:	55 1f       	adc	r21, r21
    71d2:	f2 cf       	rjmp	.-28     	; 0x71b8 <__fp_split3+0xe>
    71d4:	46 95       	lsr	r20
    71d6:	f1 df       	rcall	.-30     	; 0x71ba <__fp_splitA>
    71d8:	08 c0       	rjmp	.+16     	; 0x71ea <__fp_splitA+0x30>
    71da:	16 16       	cp	r1, r22
    71dc:	17 06       	cpc	r1, r23
    71de:	18 06       	cpc	r1, r24
    71e0:	99 1f       	adc	r25, r25
    71e2:	f1 cf       	rjmp	.-30     	; 0x71c6 <__fp_splitA+0xc>
    71e4:	86 95       	lsr	r24
    71e6:	71 05       	cpc	r23, r1
    71e8:	61 05       	cpc	r22, r1
    71ea:	08 94       	sec
    71ec:	08 95       	ret

000071ee <__fp_zero>:
    71ee:	e8 94       	clt

000071f0 <__fp_szero>:
    71f0:	bb 27       	eor	r27, r27
    71f2:	66 27       	eor	r22, r22
    71f4:	77 27       	eor	r23, r23
    71f6:	cb 01       	movw	r24, r22
    71f8:	97 f9       	bld	r25, 7
    71fa:	08 95       	ret

000071fc <__gesf2>:
    71fc:	03 d0       	rcall	.+6      	; 0x7204 <__fp_cmp>
    71fe:	08 f4       	brcc	.+2      	; 0x7202 <__gesf2+0x6>
    7200:	8f ef       	ldi	r24, 0xFF	; 255
    7202:	08 95       	ret

00007204 <__fp_cmp>:
    7204:	99 0f       	add	r25, r25
    7206:	00 08       	sbc	r0, r0
    7208:	55 0f       	add	r21, r21
    720a:	aa 0b       	sbc	r26, r26
    720c:	e0 e8       	ldi	r30, 0x80	; 128
    720e:	fe ef       	ldi	r31, 0xFE	; 254
    7210:	16 16       	cp	r1, r22
    7212:	17 06       	cpc	r1, r23
    7214:	e8 07       	cpc	r30, r24
    7216:	f9 07       	cpc	r31, r25
    7218:	c0 f0       	brcs	.+48     	; 0x724a <__fp_cmp+0x46>
    721a:	12 16       	cp	r1, r18
    721c:	13 06       	cpc	r1, r19
    721e:	e4 07       	cpc	r30, r20
    7220:	f5 07       	cpc	r31, r21
    7222:	98 f0       	brcs	.+38     	; 0x724a <__fp_cmp+0x46>
    7224:	62 1b       	sub	r22, r18
    7226:	73 0b       	sbc	r23, r19
    7228:	84 0b       	sbc	r24, r20
    722a:	95 0b       	sbc	r25, r21
    722c:	39 f4       	brne	.+14     	; 0x723c <__fp_cmp+0x38>
    722e:	0a 26       	eor	r0, r26
    7230:	61 f0       	breq	.+24     	; 0x724a <__fp_cmp+0x46>
    7232:	23 2b       	or	r18, r19
    7234:	24 2b       	or	r18, r20
    7236:	25 2b       	or	r18, r21
    7238:	21 f4       	brne	.+8      	; 0x7242 <__fp_cmp+0x3e>
    723a:	08 95       	ret
    723c:	0a 26       	eor	r0, r26
    723e:	09 f4       	brne	.+2      	; 0x7242 <__fp_cmp+0x3e>
    7240:	a1 40       	sbci	r26, 0x01	; 1
    7242:	a6 95       	lsr	r26
    7244:	8f ef       	ldi	r24, 0xFF	; 255
    7246:	81 1d       	adc	r24, r1
    7248:	81 1d       	adc	r24, r1
    724a:	08 95       	ret

0000724c <__mulsi3>:
    724c:	62 9f       	mul	r22, r18
    724e:	d0 01       	movw	r26, r0
    7250:	73 9f       	mul	r23, r19
    7252:	f0 01       	movw	r30, r0
    7254:	82 9f       	mul	r24, r18
    7256:	e0 0d       	add	r30, r0
    7258:	f1 1d       	adc	r31, r1
    725a:	64 9f       	mul	r22, r20
    725c:	e0 0d       	add	r30, r0
    725e:	f1 1d       	adc	r31, r1
    7260:	92 9f       	mul	r25, r18
    7262:	f0 0d       	add	r31, r0
    7264:	83 9f       	mul	r24, r19
    7266:	f0 0d       	add	r31, r0
    7268:	74 9f       	mul	r23, r20
    726a:	f0 0d       	add	r31, r0
    726c:	65 9f       	mul	r22, r21
    726e:	f0 0d       	add	r31, r0
    7270:	99 27       	eor	r25, r25
    7272:	72 9f       	mul	r23, r18
    7274:	b0 0d       	add	r27, r0
    7276:	e1 1d       	adc	r30, r1
    7278:	f9 1f       	adc	r31, r25
    727a:	63 9f       	mul	r22, r19
    727c:	b0 0d       	add	r27, r0
    727e:	e1 1d       	adc	r30, r1
    7280:	f9 1f       	adc	r31, r25
    7282:	bd 01       	movw	r22, r26
    7284:	cf 01       	movw	r24, r30
    7286:	11 24       	eor	r1, r1
    7288:	08 95       	ret

0000728a <__divmodhi4>:
    728a:	97 fb       	bst	r25, 7
    728c:	09 2e       	mov	r0, r25
    728e:	07 26       	eor	r0, r23
    7290:	0a d0       	rcall	.+20     	; 0x72a6 <__divmodhi4_neg1>
    7292:	77 fd       	sbrc	r23, 7
    7294:	04 d0       	rcall	.+8      	; 0x729e <__divmodhi4_neg2>
    7296:	49 d0       	rcall	.+146    	; 0x732a <__udivmodhi4>
    7298:	06 d0       	rcall	.+12     	; 0x72a6 <__divmodhi4_neg1>
    729a:	00 20       	and	r0, r0
    729c:	1a f4       	brpl	.+6      	; 0x72a4 <__divmodhi4_exit>

0000729e <__divmodhi4_neg2>:
    729e:	70 95       	com	r23
    72a0:	61 95       	neg	r22
    72a2:	7f 4f       	sbci	r23, 0xFF	; 255

000072a4 <__divmodhi4_exit>:
    72a4:	08 95       	ret

000072a6 <__divmodhi4_neg1>:
    72a6:	f6 f7       	brtc	.-4      	; 0x72a4 <__divmodhi4_exit>
    72a8:	90 95       	com	r25
    72aa:	81 95       	neg	r24
    72ac:	9f 4f       	sbci	r25, 0xFF	; 255
    72ae:	08 95       	ret

000072b0 <__udivmodsi4>:
    72b0:	a1 e2       	ldi	r26, 0x21	; 33
    72b2:	1a 2e       	mov	r1, r26
    72b4:	aa 1b       	sub	r26, r26
    72b6:	bb 1b       	sub	r27, r27
    72b8:	fd 01       	movw	r30, r26
    72ba:	0d c0       	rjmp	.+26     	; 0x72d6 <__udivmodsi4_ep>

000072bc <__udivmodsi4_loop>:
    72bc:	aa 1f       	adc	r26, r26
    72be:	bb 1f       	adc	r27, r27
    72c0:	ee 1f       	adc	r30, r30
    72c2:	ff 1f       	adc	r31, r31
    72c4:	a2 17       	cp	r26, r18
    72c6:	b3 07       	cpc	r27, r19
    72c8:	e4 07       	cpc	r30, r20
    72ca:	f5 07       	cpc	r31, r21
    72cc:	20 f0       	brcs	.+8      	; 0x72d6 <__udivmodsi4_ep>
    72ce:	a2 1b       	sub	r26, r18
    72d0:	b3 0b       	sbc	r27, r19
    72d2:	e4 0b       	sbc	r30, r20
    72d4:	f5 0b       	sbc	r31, r21

000072d6 <__udivmodsi4_ep>:
    72d6:	66 1f       	adc	r22, r22
    72d8:	77 1f       	adc	r23, r23
    72da:	88 1f       	adc	r24, r24
    72dc:	99 1f       	adc	r25, r25
    72de:	1a 94       	dec	r1
    72e0:	69 f7       	brne	.-38     	; 0x72bc <__udivmodsi4_loop>
    72e2:	60 95       	com	r22
    72e4:	70 95       	com	r23
    72e6:	80 95       	com	r24
    72e8:	90 95       	com	r25
    72ea:	9b 01       	movw	r18, r22
    72ec:	ac 01       	movw	r20, r24
    72ee:	bd 01       	movw	r22, r26
    72f0:	cf 01       	movw	r24, r30
    72f2:	08 95       	ret

000072f4 <__divmodsi4>:
    72f4:	97 fb       	bst	r25, 7
    72f6:	09 2e       	mov	r0, r25
    72f8:	05 26       	eor	r0, r21
    72fa:	0e d0       	rcall	.+28     	; 0x7318 <__divmodsi4_neg1>
    72fc:	57 fd       	sbrc	r21, 7
    72fe:	04 d0       	rcall	.+8      	; 0x7308 <__divmodsi4_neg2>
    7300:	d7 df       	rcall	.-82     	; 0x72b0 <__udivmodsi4>
    7302:	0a d0       	rcall	.+20     	; 0x7318 <__divmodsi4_neg1>
    7304:	00 1c       	adc	r0, r0
    7306:	38 f4       	brcc	.+14     	; 0x7316 <__divmodsi4_exit>

00007308 <__divmodsi4_neg2>:
    7308:	50 95       	com	r21
    730a:	40 95       	com	r20
    730c:	30 95       	com	r19
    730e:	21 95       	neg	r18
    7310:	3f 4f       	sbci	r19, 0xFF	; 255
    7312:	4f 4f       	sbci	r20, 0xFF	; 255
    7314:	5f 4f       	sbci	r21, 0xFF	; 255

00007316 <__divmodsi4_exit>:
    7316:	08 95       	ret

00007318 <__divmodsi4_neg1>:
    7318:	f6 f7       	brtc	.-4      	; 0x7316 <__divmodsi4_exit>
    731a:	90 95       	com	r25
    731c:	80 95       	com	r24
    731e:	70 95       	com	r23
    7320:	61 95       	neg	r22
    7322:	7f 4f       	sbci	r23, 0xFF	; 255
    7324:	8f 4f       	sbci	r24, 0xFF	; 255
    7326:	9f 4f       	sbci	r25, 0xFF	; 255
    7328:	08 95       	ret

0000732a <__udivmodhi4>:
    732a:	aa 1b       	sub	r26, r26
    732c:	bb 1b       	sub	r27, r27
    732e:	51 e1       	ldi	r21, 0x11	; 17
    7330:	07 c0       	rjmp	.+14     	; 0x7340 <__udivmodhi4_ep>

00007332 <__udivmodhi4_loop>:
    7332:	aa 1f       	adc	r26, r26
    7334:	bb 1f       	adc	r27, r27
    7336:	a6 17       	cp	r26, r22
    7338:	b7 07       	cpc	r27, r23
    733a:	10 f0       	brcs	.+4      	; 0x7340 <__udivmodhi4_ep>
    733c:	a6 1b       	sub	r26, r22
    733e:	b7 0b       	sbc	r27, r23

00007340 <__udivmodhi4_ep>:
    7340:	88 1f       	adc	r24, r24
    7342:	99 1f       	adc	r25, r25
    7344:	5a 95       	dec	r21
    7346:	a9 f7       	brne	.-22     	; 0x7332 <__udivmodhi4_loop>
    7348:	80 95       	com	r24
    734a:	90 95       	com	r25
    734c:	bc 01       	movw	r22, r24
    734e:	cd 01       	movw	r24, r26
    7350:	08 95       	ret

00007352 <__prologue_saves__>:
    7352:	2f 92       	push	r2
    7354:	3f 92       	push	r3
    7356:	4f 92       	push	r4
    7358:	5f 92       	push	r5
    735a:	6f 92       	push	r6
    735c:	7f 92       	push	r7
    735e:	8f 92       	push	r8
    7360:	9f 92       	push	r9
    7362:	af 92       	push	r10
    7364:	bf 92       	push	r11
    7366:	cf 92       	push	r12
    7368:	df 92       	push	r13
    736a:	ef 92       	push	r14
    736c:	ff 92       	push	r15
    736e:	0f 93       	push	r16
    7370:	1f 93       	push	r17
    7372:	cf 93       	push	r28
    7374:	df 93       	push	r29
    7376:	cd b7       	in	r28, 0x3d	; 61
    7378:	de b7       	in	r29, 0x3e	; 62
    737a:	ca 1b       	sub	r28, r26
    737c:	db 0b       	sbc	r29, r27
    737e:	cd bf       	out	0x3d, r28	; 61
    7380:	de bf       	out	0x3e, r29	; 62
    7382:	19 94       	eijmp

00007384 <__epilogue_restores__>:
    7384:	2a 88       	ldd	r2, Y+18	; 0x12
    7386:	39 88       	ldd	r3, Y+17	; 0x11
    7388:	48 88       	ldd	r4, Y+16	; 0x10
    738a:	5f 84       	ldd	r5, Y+15	; 0x0f
    738c:	6e 84       	ldd	r6, Y+14	; 0x0e
    738e:	7d 84       	ldd	r7, Y+13	; 0x0d
    7390:	8c 84       	ldd	r8, Y+12	; 0x0c
    7392:	9b 84       	ldd	r9, Y+11	; 0x0b
    7394:	aa 84       	ldd	r10, Y+10	; 0x0a
    7396:	b9 84       	ldd	r11, Y+9	; 0x09
    7398:	c8 84       	ldd	r12, Y+8	; 0x08
    739a:	df 80       	ldd	r13, Y+7	; 0x07
    739c:	ee 80       	ldd	r14, Y+6	; 0x06
    739e:	fd 80       	ldd	r15, Y+5	; 0x05
    73a0:	0c 81       	ldd	r16, Y+4	; 0x04
    73a2:	1b 81       	ldd	r17, Y+3	; 0x03
    73a4:	aa 81       	ldd	r26, Y+2	; 0x02
    73a6:	b9 81       	ldd	r27, Y+1	; 0x01
    73a8:	ce 0f       	add	r28, r30
    73aa:	d1 1d       	adc	r29, r1
    73ac:	cd bf       	out	0x3d, r28	; 61
    73ae:	de bf       	out	0x3e, r29	; 62
    73b0:	ed 01       	movw	r28, r26
    73b2:	08 95       	ret

000073b4 <strcpy_P>:
    73b4:	fb 01       	movw	r30, r22
    73b6:	dc 01       	movw	r26, r24
    73b8:	05 90       	lpm	r0, Z+
    73ba:	0d 92       	st	X+, r0
    73bc:	00 20       	and	r0, r0
    73be:	e1 f7       	brne	.-8      	; 0x73b8 <strcpy_P+0x4>
    73c0:	08 95       	ret

000073c2 <memmove>:
    73c2:	68 17       	cp	r22, r24
    73c4:	79 07       	cpc	r23, r25
    73c6:	68 f4       	brcc	.+26     	; 0x73e2 <memmove+0x20>
    73c8:	fb 01       	movw	r30, r22
    73ca:	dc 01       	movw	r26, r24
    73cc:	e4 0f       	add	r30, r20
    73ce:	f5 1f       	adc	r31, r21
    73d0:	a4 0f       	add	r26, r20
    73d2:	b5 1f       	adc	r27, r21
    73d4:	02 c0       	rjmp	.+4      	; 0x73da <memmove+0x18>
    73d6:	02 90       	ld	r0, -Z
    73d8:	0e 92       	st	-X, r0
    73da:	41 50       	subi	r20, 0x01	; 1
    73dc:	50 40       	sbci	r21, 0x00	; 0
    73de:	d8 f7       	brcc	.-10     	; 0x73d6 <memmove+0x14>
    73e0:	08 95       	ret
    73e2:	0c 94 66 3c 	jmp	0x78cc	; 0x78cc <memcpy>

000073e6 <strcat>:
    73e6:	fb 01       	movw	r30, r22
    73e8:	dc 01       	movw	r26, r24
    73ea:	0d 90       	ld	r0, X+
    73ec:	00 20       	and	r0, r0
    73ee:	e9 f7       	brne	.-6      	; 0x73ea <strcat+0x4>
    73f0:	11 97       	sbiw	r26, 0x01	; 1
    73f2:	01 90       	ld	r0, Z+
    73f4:	0d 92       	st	X+, r0
    73f6:	00 20       	and	r0, r0
    73f8:	e1 f7       	brne	.-8      	; 0x73f2 <strcat+0xc>
    73fa:	08 95       	ret

000073fc <itoa>:
    73fc:	fb 01       	movw	r30, r22
    73fe:	9f 01       	movw	r18, r30
    7400:	e8 94       	clt
    7402:	42 30       	cpi	r20, 0x02	; 2
    7404:	c4 f0       	brlt	.+48     	; 0x7436 <itoa+0x3a>
    7406:	45 32       	cpi	r20, 0x25	; 37
    7408:	b4 f4       	brge	.+44     	; 0x7436 <itoa+0x3a>
    740a:	4a 30       	cpi	r20, 0x0A	; 10
    740c:	29 f4       	brne	.+10     	; 0x7418 <itoa+0x1c>
    740e:	97 fb       	bst	r25, 7
    7410:	1e f4       	brtc	.+6      	; 0x7418 <itoa+0x1c>
    7412:	90 95       	com	r25
    7414:	81 95       	neg	r24
    7416:	9f 4f       	sbci	r25, 0xFF	; 255
    7418:	64 2f       	mov	r22, r20
    741a:	77 27       	eor	r23, r23
    741c:	0e 94 95 39 	call	0x732a	; 0x732a <__udivmodhi4>
    7420:	80 5d       	subi	r24, 0xD0	; 208
    7422:	8a 33       	cpi	r24, 0x3A	; 58
    7424:	0c f0       	brlt	.+2      	; 0x7428 <itoa+0x2c>
    7426:	89 5d       	subi	r24, 0xD9	; 217
    7428:	81 93       	st	Z+, r24
    742a:	cb 01       	movw	r24, r22
    742c:	00 97       	sbiw	r24, 0x00	; 0
    742e:	a1 f7       	brne	.-24     	; 0x7418 <itoa+0x1c>
    7430:	16 f4       	brtc	.+4      	; 0x7436 <itoa+0x3a>
    7432:	5d e2       	ldi	r21, 0x2D	; 45
    7434:	51 93       	st	Z+, r21
    7436:	10 82       	st	Z, r1
    7438:	c9 01       	movw	r24, r18
    743a:	0c 94 7a 3c 	jmp	0x78f4	; 0x78f4 <strrev>

0000743e <printf>:
    743e:	cf 93       	push	r28
    7440:	df 93       	push	r29
    7442:	cd b7       	in	r28, 0x3d	; 61
    7444:	de b7       	in	r29, 0x3e	; 62
    7446:	fe 01       	movw	r30, r28
    7448:	36 96       	adiw	r30, 0x06	; 6
    744a:	61 91       	ld	r22, Z+
    744c:	71 91       	ld	r23, Z+
    744e:	80 91 b4 50 	lds	r24, 0x50B4
    7452:	90 91 b5 50 	lds	r25, 0x50B5
    7456:	af 01       	movw	r20, r30
    7458:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <vfprintf>
    745c:	df 91       	pop	r29
    745e:	cf 91       	pop	r28
    7460:	08 95       	ret

00007462 <sprintf>:
    7462:	0f 93       	push	r16
    7464:	1f 93       	push	r17
    7466:	cf 93       	push	r28
    7468:	df 93       	push	r29
    746a:	cd b7       	in	r28, 0x3d	; 61
    746c:	de b7       	in	r29, 0x3e	; 62
    746e:	2e 97       	sbiw	r28, 0x0e	; 14
    7470:	cd bf       	out	0x3d, r28	; 61
    7472:	de bf       	out	0x3e, r29	; 62
    7474:	0e 89       	ldd	r16, Y+22	; 0x16
    7476:	1f 89       	ldd	r17, Y+23	; 0x17
    7478:	86 e0       	ldi	r24, 0x06	; 6
    747a:	8c 83       	std	Y+4, r24	; 0x04
    747c:	09 83       	std	Y+1, r16	; 0x01
    747e:	1a 83       	std	Y+2, r17	; 0x02
    7480:	8f ef       	ldi	r24, 0xFF	; 255
    7482:	9f e7       	ldi	r25, 0x7F	; 127
    7484:	8d 83       	std	Y+5, r24	; 0x05
    7486:	9e 83       	std	Y+6, r25	; 0x06
    7488:	ae 01       	movw	r20, r28
    748a:	46 5e       	subi	r20, 0xE6	; 230
    748c:	5f 4f       	sbci	r21, 0xFF	; 255
    748e:	ce 01       	movw	r24, r28
    7490:	01 96       	adiw	r24, 0x01	; 1
    7492:	68 8d       	ldd	r22, Y+24	; 0x18
    7494:	79 8d       	ldd	r23, Y+25	; 0x19
    7496:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <vfprintf>
    749a:	ef 81       	ldd	r30, Y+7	; 0x07
    749c:	f8 85       	ldd	r31, Y+8	; 0x08
    749e:	e0 0f       	add	r30, r16
    74a0:	f1 1f       	adc	r31, r17
    74a2:	10 82       	st	Z, r1
    74a4:	2e 96       	adiw	r28, 0x0e	; 14
    74a6:	cd bf       	out	0x3d, r28	; 61
    74a8:	de bf       	out	0x3e, r29	; 62
    74aa:	df 91       	pop	r29
    74ac:	cf 91       	pop	r28
    74ae:	1f 91       	pop	r17
    74b0:	0f 91       	pop	r16
    74b2:	08 95       	ret

000074b4 <vfprintf>:
    74b4:	2f 92       	push	r2
    74b6:	3f 92       	push	r3
    74b8:	4f 92       	push	r4
    74ba:	5f 92       	push	r5
    74bc:	6f 92       	push	r6
    74be:	7f 92       	push	r7
    74c0:	8f 92       	push	r8
    74c2:	9f 92       	push	r9
    74c4:	af 92       	push	r10
    74c6:	bf 92       	push	r11
    74c8:	cf 92       	push	r12
    74ca:	df 92       	push	r13
    74cc:	ef 92       	push	r14
    74ce:	ff 92       	push	r15
    74d0:	0f 93       	push	r16
    74d2:	1f 93       	push	r17
    74d4:	cf 93       	push	r28
    74d6:	df 93       	push	r29
    74d8:	cd b7       	in	r28, 0x3d	; 61
    74da:	de b7       	in	r29, 0x3e	; 62
    74dc:	2d 97       	sbiw	r28, 0x0d	; 13
    74de:	cd bf       	out	0x3d, r28	; 61
    74e0:	de bf       	out	0x3e, r29	; 62
    74e2:	3c 01       	movw	r6, r24
    74e4:	6c 87       	std	Y+12, r22	; 0x0c
    74e6:	7d 87       	std	Y+13, r23	; 0x0d
    74e8:	5a 01       	movw	r10, r20
    74ea:	fc 01       	movw	r30, r24
    74ec:	16 82       	std	Z+6, r1	; 0x06
    74ee:	17 82       	std	Z+7, r1	; 0x07
    74f0:	83 81       	ldd	r24, Z+3	; 0x03
    74f2:	81 ff       	sbrs	r24, 1
    74f4:	c8 c1       	rjmp	.+912    	; 0x7886 <vfprintf+0x3d2>
    74f6:	2e 01       	movw	r4, r28
    74f8:	08 94       	sec
    74fa:	41 1c       	adc	r4, r1
    74fc:	51 1c       	adc	r5, r1
    74fe:	f3 01       	movw	r30, r6
    7500:	93 81       	ldd	r25, Z+3	; 0x03
    7502:	ec 85       	ldd	r30, Y+12	; 0x0c
    7504:	fd 85       	ldd	r31, Y+13	; 0x0d
    7506:	93 fd       	sbrc	r25, 3
    7508:	85 91       	lpm	r24, Z+
    750a:	93 ff       	sbrs	r25, 3
    750c:	81 91       	ld	r24, Z+
    750e:	ec 87       	std	Y+12, r30	; 0x0c
    7510:	fd 87       	std	Y+13, r31	; 0x0d
    7512:	88 23       	and	r24, r24
    7514:	09 f4       	brne	.+2      	; 0x7518 <vfprintf+0x64>
    7516:	b3 c1       	rjmp	.+870    	; 0x787e <vfprintf+0x3ca>
    7518:	85 32       	cpi	r24, 0x25	; 37
    751a:	41 f4       	brne	.+16     	; 0x752c <vfprintf+0x78>
    751c:	93 fd       	sbrc	r25, 3
    751e:	85 91       	lpm	r24, Z+
    7520:	93 ff       	sbrs	r25, 3
    7522:	81 91       	ld	r24, Z+
    7524:	ec 87       	std	Y+12, r30	; 0x0c
    7526:	fd 87       	std	Y+13, r31	; 0x0d
    7528:	85 32       	cpi	r24, 0x25	; 37
    752a:	29 f4       	brne	.+10     	; 0x7536 <vfprintf+0x82>
    752c:	90 e0       	ldi	r25, 0x00	; 0
    752e:	b3 01       	movw	r22, r6
    7530:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    7534:	e4 cf       	rjmp	.-56     	; 0x74fe <vfprintf+0x4a>
    7536:	ff 24       	eor	r15, r15
    7538:	ee 24       	eor	r14, r14
    753a:	10 e0       	ldi	r17, 0x00	; 0
    753c:	10 32       	cpi	r17, 0x20	; 32
    753e:	b0 f4       	brcc	.+44     	; 0x756c <vfprintf+0xb8>
    7540:	8b 32       	cpi	r24, 0x2B	; 43
    7542:	69 f0       	breq	.+26     	; 0x755e <vfprintf+0xaa>
    7544:	8c 32       	cpi	r24, 0x2C	; 44
    7546:	28 f4       	brcc	.+10     	; 0x7552 <vfprintf+0x9e>
    7548:	80 32       	cpi	r24, 0x20	; 32
    754a:	51 f0       	breq	.+20     	; 0x7560 <vfprintf+0xac>
    754c:	83 32       	cpi	r24, 0x23	; 35
    754e:	71 f4       	brne	.+28     	; 0x756c <vfprintf+0xb8>
    7550:	0b c0       	rjmp	.+22     	; 0x7568 <vfprintf+0xb4>
    7552:	8d 32       	cpi	r24, 0x2D	; 45
    7554:	39 f0       	breq	.+14     	; 0x7564 <vfprintf+0xb0>
    7556:	80 33       	cpi	r24, 0x30	; 48
    7558:	49 f4       	brne	.+18     	; 0x756c <vfprintf+0xb8>
    755a:	11 60       	ori	r17, 0x01	; 1
    755c:	2c c0       	rjmp	.+88     	; 0x75b6 <vfprintf+0x102>
    755e:	12 60       	ori	r17, 0x02	; 2
    7560:	14 60       	ori	r17, 0x04	; 4
    7562:	29 c0       	rjmp	.+82     	; 0x75b6 <vfprintf+0x102>
    7564:	18 60       	ori	r17, 0x08	; 8
    7566:	27 c0       	rjmp	.+78     	; 0x75b6 <vfprintf+0x102>
    7568:	10 61       	ori	r17, 0x10	; 16
    756a:	25 c0       	rjmp	.+74     	; 0x75b6 <vfprintf+0x102>
    756c:	17 fd       	sbrc	r17, 7
    756e:	2e c0       	rjmp	.+92     	; 0x75cc <vfprintf+0x118>
    7570:	28 2f       	mov	r18, r24
    7572:	20 53       	subi	r18, 0x30	; 48
    7574:	2a 30       	cpi	r18, 0x0A	; 10
    7576:	98 f4       	brcc	.+38     	; 0x759e <vfprintf+0xea>
    7578:	16 ff       	sbrs	r17, 6
    757a:	08 c0       	rjmp	.+16     	; 0x758c <vfprintf+0xd8>
    757c:	8f 2d       	mov	r24, r15
    757e:	88 0f       	add	r24, r24
    7580:	f8 2e       	mov	r15, r24
    7582:	ff 0c       	add	r15, r15
    7584:	ff 0c       	add	r15, r15
    7586:	f8 0e       	add	r15, r24
    7588:	f2 0e       	add	r15, r18
    758a:	15 c0       	rjmp	.+42     	; 0x75b6 <vfprintf+0x102>
    758c:	8e 2d       	mov	r24, r14
    758e:	88 0f       	add	r24, r24
    7590:	e8 2e       	mov	r14, r24
    7592:	ee 0c       	add	r14, r14
    7594:	ee 0c       	add	r14, r14
    7596:	e8 0e       	add	r14, r24
    7598:	e2 0e       	add	r14, r18
    759a:	10 62       	ori	r17, 0x20	; 32
    759c:	0c c0       	rjmp	.+24     	; 0x75b6 <vfprintf+0x102>
    759e:	8e 32       	cpi	r24, 0x2E	; 46
    75a0:	21 f4       	brne	.+8      	; 0x75aa <vfprintf+0xf6>
    75a2:	16 fd       	sbrc	r17, 6
    75a4:	6c c1       	rjmp	.+728    	; 0x787e <vfprintf+0x3ca>
    75a6:	10 64       	ori	r17, 0x40	; 64
    75a8:	06 c0       	rjmp	.+12     	; 0x75b6 <vfprintf+0x102>
    75aa:	8c 36       	cpi	r24, 0x6C	; 108
    75ac:	11 f4       	brne	.+4      	; 0x75b2 <vfprintf+0xfe>
    75ae:	10 68       	ori	r17, 0x80	; 128
    75b0:	02 c0       	rjmp	.+4      	; 0x75b6 <vfprintf+0x102>
    75b2:	88 36       	cpi	r24, 0x68	; 104
    75b4:	59 f4       	brne	.+22     	; 0x75cc <vfprintf+0x118>
    75b6:	ec 85       	ldd	r30, Y+12	; 0x0c
    75b8:	fd 85       	ldd	r31, Y+13	; 0x0d
    75ba:	93 fd       	sbrc	r25, 3
    75bc:	85 91       	lpm	r24, Z+
    75be:	93 ff       	sbrs	r25, 3
    75c0:	81 91       	ld	r24, Z+
    75c2:	ec 87       	std	Y+12, r30	; 0x0c
    75c4:	fd 87       	std	Y+13, r31	; 0x0d
    75c6:	88 23       	and	r24, r24
    75c8:	09 f0       	breq	.+2      	; 0x75cc <vfprintf+0x118>
    75ca:	b8 cf       	rjmp	.-144    	; 0x753c <vfprintf+0x88>
    75cc:	98 2f       	mov	r25, r24
    75ce:	95 54       	subi	r25, 0x45	; 69
    75d0:	93 30       	cpi	r25, 0x03	; 3
    75d2:	18 f0       	brcs	.+6      	; 0x75da <vfprintf+0x126>
    75d4:	90 52       	subi	r25, 0x20	; 32
    75d6:	93 30       	cpi	r25, 0x03	; 3
    75d8:	38 f4       	brcc	.+14     	; 0x75e8 <vfprintf+0x134>
    75da:	24 e0       	ldi	r18, 0x04	; 4
    75dc:	30 e0       	ldi	r19, 0x00	; 0
    75de:	a2 0e       	add	r10, r18
    75e0:	b3 1e       	adc	r11, r19
    75e2:	3f e3       	ldi	r19, 0x3F	; 63
    75e4:	39 83       	std	Y+1, r19	; 0x01
    75e6:	0f c0       	rjmp	.+30     	; 0x7606 <vfprintf+0x152>
    75e8:	83 36       	cpi	r24, 0x63	; 99
    75ea:	31 f0       	breq	.+12     	; 0x75f8 <vfprintf+0x144>
    75ec:	83 37       	cpi	r24, 0x73	; 115
    75ee:	81 f0       	breq	.+32     	; 0x7610 <vfprintf+0x15c>
    75f0:	83 35       	cpi	r24, 0x53	; 83
    75f2:	09 f0       	breq	.+2      	; 0x75f6 <vfprintf+0x142>
    75f4:	5a c0       	rjmp	.+180    	; 0x76aa <vfprintf+0x1f6>
    75f6:	22 c0       	rjmp	.+68     	; 0x763c <vfprintf+0x188>
    75f8:	f5 01       	movw	r30, r10
    75fa:	80 81       	ld	r24, Z
    75fc:	89 83       	std	Y+1, r24	; 0x01
    75fe:	22 e0       	ldi	r18, 0x02	; 2
    7600:	30 e0       	ldi	r19, 0x00	; 0
    7602:	a2 0e       	add	r10, r18
    7604:	b3 1e       	adc	r11, r19
    7606:	21 e0       	ldi	r18, 0x01	; 1
    7608:	c2 2e       	mov	r12, r18
    760a:	d1 2c       	mov	r13, r1
    760c:	42 01       	movw	r8, r4
    760e:	14 c0       	rjmp	.+40     	; 0x7638 <vfprintf+0x184>
    7610:	92 e0       	ldi	r25, 0x02	; 2
    7612:	29 2e       	mov	r2, r25
    7614:	31 2c       	mov	r3, r1
    7616:	2a 0c       	add	r2, r10
    7618:	3b 1c       	adc	r3, r11
    761a:	f5 01       	movw	r30, r10
    761c:	80 80       	ld	r8, Z
    761e:	91 80       	ldd	r9, Z+1	; 0x01
    7620:	16 ff       	sbrs	r17, 6
    7622:	03 c0       	rjmp	.+6      	; 0x762a <vfprintf+0x176>
    7624:	6f 2d       	mov	r22, r15
    7626:	70 e0       	ldi	r23, 0x00	; 0
    7628:	02 c0       	rjmp	.+4      	; 0x762e <vfprintf+0x17a>
    762a:	6f ef       	ldi	r22, 0xFF	; 255
    762c:	7f ef       	ldi	r23, 0xFF	; 255
    762e:	c4 01       	movw	r24, r8
    7630:	0e 94 6f 3c 	call	0x78de	; 0x78de <strnlen>
    7634:	6c 01       	movw	r12, r24
    7636:	51 01       	movw	r10, r2
    7638:	1f 77       	andi	r17, 0x7F	; 127
    763a:	15 c0       	rjmp	.+42     	; 0x7666 <vfprintf+0x1b2>
    763c:	82 e0       	ldi	r24, 0x02	; 2
    763e:	28 2e       	mov	r2, r24
    7640:	31 2c       	mov	r3, r1
    7642:	2a 0c       	add	r2, r10
    7644:	3b 1c       	adc	r3, r11
    7646:	f5 01       	movw	r30, r10
    7648:	80 80       	ld	r8, Z
    764a:	91 80       	ldd	r9, Z+1	; 0x01
    764c:	16 ff       	sbrs	r17, 6
    764e:	03 c0       	rjmp	.+6      	; 0x7656 <vfprintf+0x1a2>
    7650:	6f 2d       	mov	r22, r15
    7652:	70 e0       	ldi	r23, 0x00	; 0
    7654:	02 c0       	rjmp	.+4      	; 0x765a <vfprintf+0x1a6>
    7656:	6f ef       	ldi	r22, 0xFF	; 255
    7658:	7f ef       	ldi	r23, 0xFF	; 255
    765a:	c4 01       	movw	r24, r8
    765c:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <strnlen_P>
    7660:	6c 01       	movw	r12, r24
    7662:	10 68       	ori	r17, 0x80	; 128
    7664:	51 01       	movw	r10, r2
    7666:	13 fd       	sbrc	r17, 3
    7668:	1c c0       	rjmp	.+56     	; 0x76a2 <vfprintf+0x1ee>
    766a:	06 c0       	rjmp	.+12     	; 0x7678 <vfprintf+0x1c4>
    766c:	80 e2       	ldi	r24, 0x20	; 32
    766e:	90 e0       	ldi	r25, 0x00	; 0
    7670:	b3 01       	movw	r22, r6
    7672:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    7676:	ea 94       	dec	r14
    7678:	8e 2d       	mov	r24, r14
    767a:	90 e0       	ldi	r25, 0x00	; 0
    767c:	c8 16       	cp	r12, r24
    767e:	d9 06       	cpc	r13, r25
    7680:	a8 f3       	brcs	.-22     	; 0x766c <vfprintf+0x1b8>
    7682:	0f c0       	rjmp	.+30     	; 0x76a2 <vfprintf+0x1ee>
    7684:	f4 01       	movw	r30, r8
    7686:	17 fd       	sbrc	r17, 7
    7688:	85 91       	lpm	r24, Z+
    768a:	17 ff       	sbrs	r17, 7
    768c:	81 91       	ld	r24, Z+
    768e:	4f 01       	movw	r8, r30
    7690:	90 e0       	ldi	r25, 0x00	; 0
    7692:	b3 01       	movw	r22, r6
    7694:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    7698:	e1 10       	cpse	r14, r1
    769a:	ea 94       	dec	r14
    769c:	08 94       	sec
    769e:	c1 08       	sbc	r12, r1
    76a0:	d1 08       	sbc	r13, r1
    76a2:	c1 14       	cp	r12, r1
    76a4:	d1 04       	cpc	r13, r1
    76a6:	71 f7       	brne	.-36     	; 0x7684 <vfprintf+0x1d0>
    76a8:	e7 c0       	rjmp	.+462    	; 0x7878 <vfprintf+0x3c4>
    76aa:	84 36       	cpi	r24, 0x64	; 100
    76ac:	11 f0       	breq	.+4      	; 0x76b2 <vfprintf+0x1fe>
    76ae:	89 36       	cpi	r24, 0x69	; 105
    76b0:	51 f5       	brne	.+84     	; 0x7706 <vfprintf+0x252>
    76b2:	f5 01       	movw	r30, r10
    76b4:	17 ff       	sbrs	r17, 7
    76b6:	07 c0       	rjmp	.+14     	; 0x76c6 <vfprintf+0x212>
    76b8:	80 81       	ld	r24, Z
    76ba:	91 81       	ldd	r25, Z+1	; 0x01
    76bc:	a2 81       	ldd	r26, Z+2	; 0x02
    76be:	b3 81       	ldd	r27, Z+3	; 0x03
    76c0:	24 e0       	ldi	r18, 0x04	; 4
    76c2:	30 e0       	ldi	r19, 0x00	; 0
    76c4:	08 c0       	rjmp	.+16     	; 0x76d6 <vfprintf+0x222>
    76c6:	80 81       	ld	r24, Z
    76c8:	91 81       	ldd	r25, Z+1	; 0x01
    76ca:	aa 27       	eor	r26, r26
    76cc:	97 fd       	sbrc	r25, 7
    76ce:	a0 95       	com	r26
    76d0:	ba 2f       	mov	r27, r26
    76d2:	22 e0       	ldi	r18, 0x02	; 2
    76d4:	30 e0       	ldi	r19, 0x00	; 0
    76d6:	a2 0e       	add	r10, r18
    76d8:	b3 1e       	adc	r11, r19
    76da:	01 2f       	mov	r16, r17
    76dc:	0f 76       	andi	r16, 0x6F	; 111
    76de:	b7 ff       	sbrs	r27, 7
    76e0:	08 c0       	rjmp	.+16     	; 0x76f2 <vfprintf+0x23e>
    76e2:	b0 95       	com	r27
    76e4:	a0 95       	com	r26
    76e6:	90 95       	com	r25
    76e8:	81 95       	neg	r24
    76ea:	9f 4f       	sbci	r25, 0xFF	; 255
    76ec:	af 4f       	sbci	r26, 0xFF	; 255
    76ee:	bf 4f       	sbci	r27, 0xFF	; 255
    76f0:	00 68       	ori	r16, 0x80	; 128
    76f2:	bc 01       	movw	r22, r24
    76f4:	cd 01       	movw	r24, r26
    76f6:	a2 01       	movw	r20, r4
    76f8:	2a e0       	ldi	r18, 0x0A	; 10
    76fa:	30 e0       	ldi	r19, 0x00	; 0
    76fc:	0e 94 b6 3c 	call	0x796c	; 0x796c <__ultoa_invert>
    7700:	d8 2e       	mov	r13, r24
    7702:	d4 18       	sub	r13, r4
    7704:	3f c0       	rjmp	.+126    	; 0x7784 <vfprintf+0x2d0>
    7706:	85 37       	cpi	r24, 0x75	; 117
    7708:	21 f4       	brne	.+8      	; 0x7712 <vfprintf+0x25e>
    770a:	1f 7e       	andi	r17, 0xEF	; 239
    770c:	2a e0       	ldi	r18, 0x0A	; 10
    770e:	30 e0       	ldi	r19, 0x00	; 0
    7710:	20 c0       	rjmp	.+64     	; 0x7752 <vfprintf+0x29e>
    7712:	19 7f       	andi	r17, 0xF9	; 249
    7714:	8f 36       	cpi	r24, 0x6F	; 111
    7716:	a9 f0       	breq	.+42     	; 0x7742 <vfprintf+0x28e>
    7718:	80 37       	cpi	r24, 0x70	; 112
    771a:	20 f4       	brcc	.+8      	; 0x7724 <vfprintf+0x270>
    771c:	88 35       	cpi	r24, 0x58	; 88
    771e:	09 f0       	breq	.+2      	; 0x7722 <vfprintf+0x26e>
    7720:	ae c0       	rjmp	.+348    	; 0x787e <vfprintf+0x3ca>
    7722:	0b c0       	rjmp	.+22     	; 0x773a <vfprintf+0x286>
    7724:	80 37       	cpi	r24, 0x70	; 112
    7726:	21 f0       	breq	.+8      	; 0x7730 <vfprintf+0x27c>
    7728:	88 37       	cpi	r24, 0x78	; 120
    772a:	09 f0       	breq	.+2      	; 0x772e <vfprintf+0x27a>
    772c:	a8 c0       	rjmp	.+336    	; 0x787e <vfprintf+0x3ca>
    772e:	01 c0       	rjmp	.+2      	; 0x7732 <vfprintf+0x27e>
    7730:	10 61       	ori	r17, 0x10	; 16
    7732:	14 ff       	sbrs	r17, 4
    7734:	09 c0       	rjmp	.+18     	; 0x7748 <vfprintf+0x294>
    7736:	14 60       	ori	r17, 0x04	; 4
    7738:	07 c0       	rjmp	.+14     	; 0x7748 <vfprintf+0x294>
    773a:	14 ff       	sbrs	r17, 4
    773c:	08 c0       	rjmp	.+16     	; 0x774e <vfprintf+0x29a>
    773e:	16 60       	ori	r17, 0x06	; 6
    7740:	06 c0       	rjmp	.+12     	; 0x774e <vfprintf+0x29a>
    7742:	28 e0       	ldi	r18, 0x08	; 8
    7744:	30 e0       	ldi	r19, 0x00	; 0
    7746:	05 c0       	rjmp	.+10     	; 0x7752 <vfprintf+0x29e>
    7748:	20 e1       	ldi	r18, 0x10	; 16
    774a:	30 e0       	ldi	r19, 0x00	; 0
    774c:	02 c0       	rjmp	.+4      	; 0x7752 <vfprintf+0x29e>
    774e:	20 e1       	ldi	r18, 0x10	; 16
    7750:	32 e0       	ldi	r19, 0x02	; 2
    7752:	f5 01       	movw	r30, r10
    7754:	17 ff       	sbrs	r17, 7
    7756:	07 c0       	rjmp	.+14     	; 0x7766 <vfprintf+0x2b2>
    7758:	60 81       	ld	r22, Z
    775a:	71 81       	ldd	r23, Z+1	; 0x01
    775c:	82 81       	ldd	r24, Z+2	; 0x02
    775e:	93 81       	ldd	r25, Z+3	; 0x03
    7760:	44 e0       	ldi	r20, 0x04	; 4
    7762:	50 e0       	ldi	r21, 0x00	; 0
    7764:	06 c0       	rjmp	.+12     	; 0x7772 <vfprintf+0x2be>
    7766:	60 81       	ld	r22, Z
    7768:	71 81       	ldd	r23, Z+1	; 0x01
    776a:	80 e0       	ldi	r24, 0x00	; 0
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	42 e0       	ldi	r20, 0x02	; 2
    7770:	50 e0       	ldi	r21, 0x00	; 0
    7772:	a4 0e       	add	r10, r20
    7774:	b5 1e       	adc	r11, r21
    7776:	a2 01       	movw	r20, r4
    7778:	0e 94 b6 3c 	call	0x796c	; 0x796c <__ultoa_invert>
    777c:	d8 2e       	mov	r13, r24
    777e:	d4 18       	sub	r13, r4
    7780:	01 2f       	mov	r16, r17
    7782:	0f 77       	andi	r16, 0x7F	; 127
    7784:	06 ff       	sbrs	r16, 6
    7786:	09 c0       	rjmp	.+18     	; 0x779a <vfprintf+0x2e6>
    7788:	0e 7f       	andi	r16, 0xFE	; 254
    778a:	df 14       	cp	r13, r15
    778c:	30 f4       	brcc	.+12     	; 0x779a <vfprintf+0x2e6>
    778e:	04 ff       	sbrs	r16, 4
    7790:	06 c0       	rjmp	.+12     	; 0x779e <vfprintf+0x2ea>
    7792:	02 fd       	sbrc	r16, 2
    7794:	04 c0       	rjmp	.+8      	; 0x779e <vfprintf+0x2ea>
    7796:	0f 7e       	andi	r16, 0xEF	; 239
    7798:	02 c0       	rjmp	.+4      	; 0x779e <vfprintf+0x2ea>
    779a:	1d 2d       	mov	r17, r13
    779c:	01 c0       	rjmp	.+2      	; 0x77a0 <vfprintf+0x2ec>
    779e:	1f 2d       	mov	r17, r15
    77a0:	80 2f       	mov	r24, r16
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	04 ff       	sbrs	r16, 4
    77a6:	0c c0       	rjmp	.+24     	; 0x77c0 <vfprintf+0x30c>
    77a8:	fe 01       	movw	r30, r28
    77aa:	ed 0d       	add	r30, r13
    77ac:	f1 1d       	adc	r31, r1
    77ae:	20 81       	ld	r18, Z
    77b0:	20 33       	cpi	r18, 0x30	; 48
    77b2:	11 f4       	brne	.+4      	; 0x77b8 <vfprintf+0x304>
    77b4:	09 7e       	andi	r16, 0xE9	; 233
    77b6:	09 c0       	rjmp	.+18     	; 0x77ca <vfprintf+0x316>
    77b8:	02 ff       	sbrs	r16, 2
    77ba:	06 c0       	rjmp	.+12     	; 0x77c8 <vfprintf+0x314>
    77bc:	1e 5f       	subi	r17, 0xFE	; 254
    77be:	05 c0       	rjmp	.+10     	; 0x77ca <vfprintf+0x316>
    77c0:	86 78       	andi	r24, 0x86	; 134
    77c2:	90 70       	andi	r25, 0x00	; 0
    77c4:	00 97       	sbiw	r24, 0x00	; 0
    77c6:	09 f0       	breq	.+2      	; 0x77ca <vfprintf+0x316>
    77c8:	1f 5f       	subi	r17, 0xFF	; 255
    77ca:	80 2e       	mov	r8, r16
    77cc:	99 24       	eor	r9, r9
    77ce:	03 fd       	sbrc	r16, 3
    77d0:	12 c0       	rjmp	.+36     	; 0x77f6 <vfprintf+0x342>
    77d2:	00 ff       	sbrs	r16, 0
    77d4:	0d c0       	rjmp	.+26     	; 0x77f0 <vfprintf+0x33c>
    77d6:	fd 2c       	mov	r15, r13
    77d8:	1e 15       	cp	r17, r14
    77da:	50 f4       	brcc	.+20     	; 0x77f0 <vfprintf+0x33c>
    77dc:	fe 0c       	add	r15, r14
    77de:	f1 1a       	sub	r15, r17
    77e0:	1e 2d       	mov	r17, r14
    77e2:	06 c0       	rjmp	.+12     	; 0x77f0 <vfprintf+0x33c>
    77e4:	80 e2       	ldi	r24, 0x20	; 32
    77e6:	90 e0       	ldi	r25, 0x00	; 0
    77e8:	b3 01       	movw	r22, r6
    77ea:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    77ee:	1f 5f       	subi	r17, 0xFF	; 255
    77f0:	1e 15       	cp	r17, r14
    77f2:	c0 f3       	brcs	.-16     	; 0x77e4 <vfprintf+0x330>
    77f4:	04 c0       	rjmp	.+8      	; 0x77fe <vfprintf+0x34a>
    77f6:	1e 15       	cp	r17, r14
    77f8:	10 f4       	brcc	.+4      	; 0x77fe <vfprintf+0x34a>
    77fa:	e1 1a       	sub	r14, r17
    77fc:	01 c0       	rjmp	.+2      	; 0x7800 <vfprintf+0x34c>
    77fe:	ee 24       	eor	r14, r14
    7800:	84 fe       	sbrs	r8, 4
    7802:	0f c0       	rjmp	.+30     	; 0x7822 <vfprintf+0x36e>
    7804:	80 e3       	ldi	r24, 0x30	; 48
    7806:	90 e0       	ldi	r25, 0x00	; 0
    7808:	b3 01       	movw	r22, r6
    780a:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    780e:	82 fe       	sbrs	r8, 2
    7810:	1f c0       	rjmp	.+62     	; 0x7850 <vfprintf+0x39c>
    7812:	81 fe       	sbrs	r8, 1
    7814:	03 c0       	rjmp	.+6      	; 0x781c <vfprintf+0x368>
    7816:	88 e5       	ldi	r24, 0x58	; 88
    7818:	90 e0       	ldi	r25, 0x00	; 0
    781a:	10 c0       	rjmp	.+32     	; 0x783c <vfprintf+0x388>
    781c:	88 e7       	ldi	r24, 0x78	; 120
    781e:	90 e0       	ldi	r25, 0x00	; 0
    7820:	0d c0       	rjmp	.+26     	; 0x783c <vfprintf+0x388>
    7822:	c4 01       	movw	r24, r8
    7824:	86 78       	andi	r24, 0x86	; 134
    7826:	90 70       	andi	r25, 0x00	; 0
    7828:	00 97       	sbiw	r24, 0x00	; 0
    782a:	91 f0       	breq	.+36     	; 0x7850 <vfprintf+0x39c>
    782c:	81 fc       	sbrc	r8, 1
    782e:	02 c0       	rjmp	.+4      	; 0x7834 <vfprintf+0x380>
    7830:	80 e2       	ldi	r24, 0x20	; 32
    7832:	01 c0       	rjmp	.+2      	; 0x7836 <vfprintf+0x382>
    7834:	8b e2       	ldi	r24, 0x2B	; 43
    7836:	07 fd       	sbrc	r16, 7
    7838:	8d e2       	ldi	r24, 0x2D	; 45
    783a:	90 e0       	ldi	r25, 0x00	; 0
    783c:	b3 01       	movw	r22, r6
    783e:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    7842:	06 c0       	rjmp	.+12     	; 0x7850 <vfprintf+0x39c>
    7844:	80 e3       	ldi	r24, 0x30	; 48
    7846:	90 e0       	ldi	r25, 0x00	; 0
    7848:	b3 01       	movw	r22, r6
    784a:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    784e:	fa 94       	dec	r15
    7850:	df 14       	cp	r13, r15
    7852:	c0 f3       	brcs	.-16     	; 0x7844 <vfprintf+0x390>
    7854:	da 94       	dec	r13
    7856:	f2 01       	movw	r30, r4
    7858:	ed 0d       	add	r30, r13
    785a:	f1 1d       	adc	r31, r1
    785c:	80 81       	ld	r24, Z
    785e:	90 e0       	ldi	r25, 0x00	; 0
    7860:	b3 01       	movw	r22, r6
    7862:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    7866:	dd 20       	and	r13, r13
    7868:	a9 f7       	brne	.-22     	; 0x7854 <vfprintf+0x3a0>
    786a:	06 c0       	rjmp	.+12     	; 0x7878 <vfprintf+0x3c4>
    786c:	80 e2       	ldi	r24, 0x20	; 32
    786e:	90 e0       	ldi	r25, 0x00	; 0
    7870:	b3 01       	movw	r22, r6
    7872:	0e 94 8a 3c 	call	0x7914	; 0x7914 <fputc>
    7876:	ea 94       	dec	r14
    7878:	ee 20       	and	r14, r14
    787a:	c1 f7       	brne	.-16     	; 0x786c <vfprintf+0x3b8>
    787c:	40 ce       	rjmp	.-896    	; 0x74fe <vfprintf+0x4a>
    787e:	f3 01       	movw	r30, r6
    7880:	86 81       	ldd	r24, Z+6	; 0x06
    7882:	97 81       	ldd	r25, Z+7	; 0x07
    7884:	02 c0       	rjmp	.+4      	; 0x788a <vfprintf+0x3d6>
    7886:	8f ef       	ldi	r24, 0xFF	; 255
    7888:	9f ef       	ldi	r25, 0xFF	; 255
    788a:	2d 96       	adiw	r28, 0x0d	; 13
    788c:	cd bf       	out	0x3d, r28	; 61
    788e:	de bf       	out	0x3e, r29	; 62
    7890:	df 91       	pop	r29
    7892:	cf 91       	pop	r28
    7894:	1f 91       	pop	r17
    7896:	0f 91       	pop	r16
    7898:	ff 90       	pop	r15
    789a:	ef 90       	pop	r14
    789c:	df 90       	pop	r13
    789e:	cf 90       	pop	r12
    78a0:	bf 90       	pop	r11
    78a2:	af 90       	pop	r10
    78a4:	9f 90       	pop	r9
    78a6:	8f 90       	pop	r8
    78a8:	7f 90       	pop	r7
    78aa:	6f 90       	pop	r6
    78ac:	5f 90       	pop	r5
    78ae:	4f 90       	pop	r4
    78b0:	3f 90       	pop	r3
    78b2:	2f 90       	pop	r2
    78b4:	08 95       	ret

000078b6 <strnlen_P>:
    78b6:	fc 01       	movw	r30, r24
    78b8:	05 90       	lpm	r0, Z+
    78ba:	61 50       	subi	r22, 0x01	; 1
    78bc:	70 40       	sbci	r23, 0x00	; 0
    78be:	01 10       	cpse	r0, r1
    78c0:	d8 f7       	brcc	.-10     	; 0x78b8 <strnlen_P+0x2>
    78c2:	80 95       	com	r24
    78c4:	90 95       	com	r25
    78c6:	8e 0f       	add	r24, r30
    78c8:	9f 1f       	adc	r25, r31
    78ca:	08 95       	ret

000078cc <memcpy>:
    78cc:	fb 01       	movw	r30, r22
    78ce:	dc 01       	movw	r26, r24
    78d0:	02 c0       	rjmp	.+4      	; 0x78d6 <memcpy+0xa>
    78d2:	01 90       	ld	r0, Z+
    78d4:	0d 92       	st	X+, r0
    78d6:	41 50       	subi	r20, 0x01	; 1
    78d8:	50 40       	sbci	r21, 0x00	; 0
    78da:	d8 f7       	brcc	.-10     	; 0x78d2 <memcpy+0x6>
    78dc:	08 95       	ret

000078de <strnlen>:
    78de:	fc 01       	movw	r30, r24
    78e0:	61 50       	subi	r22, 0x01	; 1
    78e2:	70 40       	sbci	r23, 0x00	; 0
    78e4:	01 90       	ld	r0, Z+
    78e6:	01 10       	cpse	r0, r1
    78e8:	d8 f7       	brcc	.-10     	; 0x78e0 <strnlen+0x2>
    78ea:	80 95       	com	r24
    78ec:	90 95       	com	r25
    78ee:	8e 0f       	add	r24, r30
    78f0:	9f 1f       	adc	r25, r31
    78f2:	08 95       	ret

000078f4 <strrev>:
    78f4:	dc 01       	movw	r26, r24
    78f6:	fc 01       	movw	r30, r24
    78f8:	67 2f       	mov	r22, r23
    78fa:	71 91       	ld	r23, Z+
    78fc:	77 23       	and	r23, r23
    78fe:	e1 f7       	brne	.-8      	; 0x78f8 <strrev+0x4>
    7900:	32 97       	sbiw	r30, 0x02	; 2
    7902:	04 c0       	rjmp	.+8      	; 0x790c <strrev+0x18>
    7904:	7c 91       	ld	r23, X
    7906:	6d 93       	st	X+, r22
    7908:	70 83       	st	Z, r23
    790a:	62 91       	ld	r22, -Z
    790c:	ae 17       	cp	r26, r30
    790e:	bf 07       	cpc	r27, r31
    7910:	c8 f3       	brcs	.-14     	; 0x7904 <strrev+0x10>
    7912:	08 95       	ret

00007914 <fputc>:
    7914:	0f 93       	push	r16
    7916:	1f 93       	push	r17
    7918:	cf 93       	push	r28
    791a:	df 93       	push	r29
    791c:	8c 01       	movw	r16, r24
    791e:	eb 01       	movw	r28, r22
    7920:	8b 81       	ldd	r24, Y+3	; 0x03
    7922:	81 ff       	sbrs	r24, 1
    7924:	1b c0       	rjmp	.+54     	; 0x795c <fputc+0x48>
    7926:	82 ff       	sbrs	r24, 2
    7928:	0d c0       	rjmp	.+26     	; 0x7944 <fputc+0x30>
    792a:	2e 81       	ldd	r18, Y+6	; 0x06
    792c:	3f 81       	ldd	r19, Y+7	; 0x07
    792e:	8c 81       	ldd	r24, Y+4	; 0x04
    7930:	9d 81       	ldd	r25, Y+5	; 0x05
    7932:	28 17       	cp	r18, r24
    7934:	39 07       	cpc	r19, r25
    7936:	64 f4       	brge	.+24     	; 0x7950 <fputc+0x3c>
    7938:	e8 81       	ld	r30, Y
    793a:	f9 81       	ldd	r31, Y+1	; 0x01
    793c:	01 93       	st	Z+, r16
    793e:	e8 83       	st	Y, r30
    7940:	f9 83       	std	Y+1, r31	; 0x01
    7942:	06 c0       	rjmp	.+12     	; 0x7950 <fputc+0x3c>
    7944:	e8 85       	ldd	r30, Y+8	; 0x08
    7946:	f9 85       	ldd	r31, Y+9	; 0x09
    7948:	80 2f       	mov	r24, r16
    794a:	19 95       	eicall
    794c:	00 97       	sbiw	r24, 0x00	; 0
    794e:	31 f4       	brne	.+12     	; 0x795c <fputc+0x48>
    7950:	8e 81       	ldd	r24, Y+6	; 0x06
    7952:	9f 81       	ldd	r25, Y+7	; 0x07
    7954:	01 96       	adiw	r24, 0x01	; 1
    7956:	8e 83       	std	Y+6, r24	; 0x06
    7958:	9f 83       	std	Y+7, r25	; 0x07
    795a:	02 c0       	rjmp	.+4      	; 0x7960 <fputc+0x4c>
    795c:	0f ef       	ldi	r16, 0xFF	; 255
    795e:	1f ef       	ldi	r17, 0xFF	; 255
    7960:	c8 01       	movw	r24, r16
    7962:	df 91       	pop	r29
    7964:	cf 91       	pop	r28
    7966:	1f 91       	pop	r17
    7968:	0f 91       	pop	r16
    796a:	08 95       	ret

0000796c <__ultoa_invert>:
    796c:	fa 01       	movw	r30, r20
    796e:	aa 27       	eor	r26, r26
    7970:	28 30       	cpi	r18, 0x08	; 8
    7972:	51 f1       	breq	.+84     	; 0x79c8 <__ultoa_invert+0x5c>
    7974:	20 31       	cpi	r18, 0x10	; 16
    7976:	81 f1       	breq	.+96     	; 0x79d8 <__ultoa_invert+0x6c>
    7978:	e8 94       	clt
    797a:	6f 93       	push	r22
    797c:	6e 7f       	andi	r22, 0xFE	; 254
    797e:	6e 5f       	subi	r22, 0xFE	; 254
    7980:	7f 4f       	sbci	r23, 0xFF	; 255
    7982:	8f 4f       	sbci	r24, 0xFF	; 255
    7984:	9f 4f       	sbci	r25, 0xFF	; 255
    7986:	af 4f       	sbci	r26, 0xFF	; 255
    7988:	b1 e0       	ldi	r27, 0x01	; 1
    798a:	3e d0       	rcall	.+124    	; 0x7a08 <__ultoa_invert+0x9c>
    798c:	b4 e0       	ldi	r27, 0x04	; 4
    798e:	3c d0       	rcall	.+120    	; 0x7a08 <__ultoa_invert+0x9c>
    7990:	67 0f       	add	r22, r23
    7992:	78 1f       	adc	r23, r24
    7994:	89 1f       	adc	r24, r25
    7996:	9a 1f       	adc	r25, r26
    7998:	a1 1d       	adc	r26, r1
    799a:	68 0f       	add	r22, r24
    799c:	79 1f       	adc	r23, r25
    799e:	8a 1f       	adc	r24, r26
    79a0:	91 1d       	adc	r25, r1
    79a2:	a1 1d       	adc	r26, r1
    79a4:	6a 0f       	add	r22, r26
    79a6:	71 1d       	adc	r23, r1
    79a8:	81 1d       	adc	r24, r1
    79aa:	91 1d       	adc	r25, r1
    79ac:	a1 1d       	adc	r26, r1
    79ae:	20 d0       	rcall	.+64     	; 0x79f0 <__ultoa_invert+0x84>
    79b0:	09 f4       	brne	.+2      	; 0x79b4 <__ultoa_invert+0x48>
    79b2:	68 94       	set
    79b4:	3f 91       	pop	r19
    79b6:	2a e0       	ldi	r18, 0x0A	; 10
    79b8:	26 9f       	mul	r18, r22
    79ba:	11 24       	eor	r1, r1
    79bc:	30 19       	sub	r19, r0
    79be:	30 5d       	subi	r19, 0xD0	; 208
    79c0:	31 93       	st	Z+, r19
    79c2:	de f6       	brtc	.-74     	; 0x797a <__ultoa_invert+0xe>
    79c4:	cf 01       	movw	r24, r30
    79c6:	08 95       	ret
    79c8:	46 2f       	mov	r20, r22
    79ca:	47 70       	andi	r20, 0x07	; 7
    79cc:	40 5d       	subi	r20, 0xD0	; 208
    79ce:	41 93       	st	Z+, r20
    79d0:	b3 e0       	ldi	r27, 0x03	; 3
    79d2:	0f d0       	rcall	.+30     	; 0x79f2 <__ultoa_invert+0x86>
    79d4:	c9 f7       	brne	.-14     	; 0x79c8 <__ultoa_invert+0x5c>
    79d6:	f6 cf       	rjmp	.-20     	; 0x79c4 <__ultoa_invert+0x58>
    79d8:	46 2f       	mov	r20, r22
    79da:	4f 70       	andi	r20, 0x0F	; 15
    79dc:	40 5d       	subi	r20, 0xD0	; 208
    79de:	4a 33       	cpi	r20, 0x3A	; 58
    79e0:	18 f0       	brcs	.+6      	; 0x79e8 <__ultoa_invert+0x7c>
    79e2:	49 5d       	subi	r20, 0xD9	; 217
    79e4:	31 fd       	sbrc	r19, 1
    79e6:	40 52       	subi	r20, 0x20	; 32
    79e8:	41 93       	st	Z+, r20
    79ea:	02 d0       	rcall	.+4      	; 0x79f0 <__ultoa_invert+0x84>
    79ec:	a9 f7       	brne	.-22     	; 0x79d8 <__ultoa_invert+0x6c>
    79ee:	ea cf       	rjmp	.-44     	; 0x79c4 <__ultoa_invert+0x58>
    79f0:	b4 e0       	ldi	r27, 0x04	; 4
    79f2:	a6 95       	lsr	r26
    79f4:	97 95       	ror	r25
    79f6:	87 95       	ror	r24
    79f8:	77 95       	ror	r23
    79fa:	67 95       	ror	r22
    79fc:	ba 95       	dec	r27
    79fe:	c9 f7       	brne	.-14     	; 0x79f2 <__ultoa_invert+0x86>
    7a00:	00 97       	sbiw	r24, 0x00	; 0
    7a02:	61 05       	cpc	r22, r1
    7a04:	71 05       	cpc	r23, r1
    7a06:	08 95       	ret
    7a08:	9b 01       	movw	r18, r22
    7a0a:	ac 01       	movw	r20, r24
    7a0c:	0a 2e       	mov	r0, r26
    7a0e:	06 94       	lsr	r0
    7a10:	57 95       	ror	r21
    7a12:	47 95       	ror	r20
    7a14:	37 95       	ror	r19
    7a16:	27 95       	ror	r18
    7a18:	ba 95       	dec	r27
    7a1a:	c9 f7       	brne	.-14     	; 0x7a0e <__ultoa_invert+0xa2>
    7a1c:	62 0f       	add	r22, r18
    7a1e:	73 1f       	adc	r23, r19
    7a20:	84 1f       	adc	r24, r20
    7a22:	95 1f       	adc	r25, r21
    7a24:	a0 1d       	adc	r26, r0
    7a26:	08 95       	ret

00007a28 <_exit>:
    7a28:	f8 94       	cli

00007a2a <__stop_program>:
    7a2a:	ff cf       	rjmp	.-2      	; 0x7a2a <__stop_program>
