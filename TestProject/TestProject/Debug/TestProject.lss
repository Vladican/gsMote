
TestProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00802000  00006f4c  00006fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f7e  00802122  00802122  00007102  2**0
                  ALLOC
  3 .stab         00000e70  00000000  00000000  00007104  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002e1  00000000  00000000  00007f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000360  00000000  00000000  00008258  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000091e3  00000000  00000000  000085b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c53  00000000  00000000  0001179b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c83  00000000  00000000  000133ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017c8  00000000  00000000  00016074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004880  00000000  00000000  0001783c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000730d  00000000  00000000  0001c0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000233c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      38:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__vector_14>
      3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      40:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_16>
      44:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__vector_17>
      48:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__vector_18>
      4c:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__vector_19>
      50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     100:	0c 94 66 28 	jmp	0x50cc	; 0x50cc <__vector_64>
     104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     134:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__vector_77>
     138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     13c:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__vector_79>
     140:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__vector_80>
     144:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__vector_81>
     148:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__vector_82>
     14c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a0:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_104>
     1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001e8 <chb_err_init>:
     1e8:	52 41 44 49 4f 20 4e 4f 54 20 49 4e 49 54 49 41     RADIO NOT INITIA
     1f8:	4c 49 5a 45 44 20 50 52 4f 50 45 52 4c 59 0a 00     LIZED PROPERLY..

00000208 <chb_err_overflow>:
     208:	42 55 46 46 45 52 20 46 55 4c 4c 2e 20 54 4f 53     BUFFER FULL. TOS
     218:	53 49 4e 47 20 49 4e 43 4f 4d 49 4e 47 20 44 41     SING INCOMING DA
     228:	54 41 0a 00                                         TA..

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	df e5       	ldi	r29, 0x5F	; 95
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	ec e4       	ldi	r30, 0x4C	; 76
     244:	ff e6       	ldi	r31, 0x6F	; 111
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a2 32       	cpi	r26, 0x22	; 34
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	10 e5       	ldi	r17, 0x50	; 80
     258:	a2 e2       	ldi	r26, 0x22	; 34
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a0 3a       	cpi	r26, 0xA0	; 160
     262:	b1 07       	cpc	r27, r17
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 39 01 	call	0x272	; 0x272 <main>
     26a:	0c 94 a4 37 	jmp	0x6f48	; 0x6f48 <_exit>

0000026e <__bad_interrupt>:
     26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <main>:

#include "E-000001-000009_firmware_rev_1_0.h"



int main(void) {
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	c2 56       	subi	r28, 0x62	; 98
     27c:	d1 40       	sbci	r29, 0x01	; 1
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	de bf       	out	0x3e, r29	; 62
	int32_t BP_13b_avg_uV, BP_13b_min_uV, BP_13b_max_uV, BP_13b_delta_uV, BP_13b_diff1_uV, BP_13b_diff2_uV;
	//uint8_t DATA = {0x05,0x10,0x01,0x05};
	//uint8_t RDATA[512];
	uint8_t filterSettings;
	// set system clock
	set_32MHz();  // for RC clock
     282:	0e 94 96 03 	call	0x72c	; 0x72c <set_32MHz>
	//setXOSC_32MHz();  // for crystal when installed
	// breakpoint 1a - collect room temperature
	CO_collectTemp(&BP_1a_avg_mV, &BP_1a_min_mV, &BP_1a_max_mV);
     286:	ce 01       	movw	r24, r28
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	be 01       	movw	r22, r28
     28c:	6d 5f       	subi	r22, 0xFD	; 253
     28e:	7f 4f       	sbci	r23, 0xFF	; 255
     290:	ae 01       	movw	r20, r28
     292:	4b 5f       	subi	r20, 0xFB	; 251
     294:	5f 4f       	sbci	r21, 0xFF	; 255
     296:	0e 94 01 07 	call	0xe02	; 0xe02 <CO_collectTemp>
	// avg 830mV +/- 25% with min/max +/- 1% of avg 
	SD_init();	//initialize SD Card
     29a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <SD_init>
	//SD_write_and_read_knowns();
	error = getBootSectorData();
     29e:	0e 94 8e 1c 	call	0x391c	; 0x391c <getBootSectorData>
     2a2:	80 93 53 40 	sts	0x4053, r24
	SD_write_and_read_knowns_FAT();
     2a6:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <SD_write_and_read_knowns_FAT>
	SD_disable();
     2aa:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <SD_disable>
	
	//TestRadio();
	chibi_test_radio();
     2ae:	0e 94 35 1b 	call	0x366a	; 0x366a <chibi_test_radio>
	// breakpoint 1b - collect body temperature
	CO_collectTemp(&BP_1b_avg_mV, &BP_1b_min_mV, &BP_1b_max_mV);
     2b2:	ce 01       	movw	r24, r28
     2b4:	07 96       	adiw	r24, 0x07	; 7
     2b6:	be 01       	movw	r22, r28
     2b8:	67 5f       	subi	r22, 0xF7	; 247
     2ba:	7f 4f       	sbci	r23, 0xFF	; 255
     2bc:	ae 01       	movw	r20, r28
     2be:	45 5f       	subi	r20, 0xF5	; 245
     2c0:	5f 4f       	sbci	r21, 0xFF	; 255
     2c2:	0e 94 01 07 	call	0xe02	; 0xe02 <CO_collectTemp>
	// avg should increase from breakpoint 1a
	// min/max +/- 1% of avg

	// breakpoint 2 - collect battery voltage
	CO_collectBatt(&BP_2_avg_mV, &BP_2_min_mV, &BP_2_max_mV);
     2c6:	ce 01       	movw	r24, r28
     2c8:	0d 96       	adiw	r24, 0x0d	; 13
     2ca:	be 01       	movw	r22, r28
     2cc:	61 5f       	subi	r22, 0xF1	; 241
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	ae 01       	movw	r20, r28
     2d2:	4f 5e       	subi	r20, 0xEF	; 239
     2d4:	5f 4f       	sbci	r21, 0xFF	; 255
     2d6:	0e 94 1b 08 	call	0x1036	; 0x1036 <CO_collectBatt>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     2da:	00 00       	nop
	
	//set filter for breakpoint 3	
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 3a - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3a_avg_uV, &BP_3a_min_uV, &BP_3a_max_uV,
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	61 ec       	ldi	r22, 0xC1	; 193
     2e0:	ae 01       	movw	r20, r28
     2e2:	4d 5e       	subi	r20, 0xED	; 237
     2e4:	5f 4f       	sbci	r21, 0xFF	; 255
     2e6:	9e 01       	movw	r18, r28
     2e8:	29 5e       	subi	r18, 0xE9	; 233
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
     2ec:	8e 01       	movw	r16, r28
     2ee:	05 5e       	subi	r16, 0xE5	; 229
     2f0:	1f 4f       	sbci	r17, 0xFF	; 255
     2f2:	ee 24       	eor	r14, r14
     2f4:	e3 94       	inc	r14
     2f6:	0f 2e       	mov	r0, r31
     2f8:	fc e0       	ldi	r31, 0x0C	; 12
     2fa:	cf 2e       	mov	r12, r31
     2fc:	f0 2d       	mov	r31, r0
     2fe:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg 600mV +/- 10% with min/max +/- 1% of avg 
	
	// breakpoint 3b - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 2
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3b_avg_uV, &BP_3b_min_uV, &BP_3b_max_uV,
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	61 ec       	ldi	r22, 0xC1	; 193
     306:	ae 01       	movw	r20, r28
     308:	41 5e       	subi	r20, 0xE1	; 225
     30a:	5f 4f       	sbci	r21, 0xFF	; 255
     30c:	9e 01       	movw	r18, r28
     30e:	2d 5d       	subi	r18, 0xDD	; 221
     310:	3f 4f       	sbci	r19, 0xFF	; 255
     312:	8e 01       	movw	r16, r28
     314:	09 5d       	subi	r16, 0xD9	; 217
     316:	1f 4f       	sbci	r17, 0xFF	; 255
     318:	ee 24       	eor	r14, r14
     31a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 300mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     324:	00 00       	nop

	Ext1Power(TRUE);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	// breakpoint 3c - collect sample from Channel 1 (ELEC1/ELEC2) gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3c_avg_uV, &BP_3c_min_uV, &BP_3c_max_uV,
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	61 ec       	ldi	r22, 0xC1	; 193
     330:	ae 01       	movw	r20, r28
     332:	45 5d       	subi	r20, 0xD5	; 213
     334:	5f 4f       	sbci	r21, 0xFF	; 255
     336:	9e 01       	movw	r18, r28
     338:	21 5d       	subi	r18, 0xD1	; 209
     33a:	3f 4f       	sbci	r19, 0xFF	; 255
     33c:	8e 01       	movw	r16, r28
     33e:	0d 5c       	subi	r16, 0xCD	; 205
     340:	1f 4f       	sbci	r17, 0xFF	; 255
     342:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 0mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     34c:	00 00       	nop

	Ext1Power(TRUE);
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	// breakpoint 3d - collect sample from Channel 1 (ELEC1/ELEC2) polarity reversed with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3d_avg_uV, &BP_3d_min_uV, &BP_3d_max_uV,
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	61 ec       	ldi	r22, 0xC1	; 193
     358:	ae 01       	movw	r20, r28
     35a:	49 5c       	subi	r20, 0xC9	; 201
     35c:	5f 4f       	sbci	r21, 0xFF	; 255
     35e:	9e 01       	movw	r18, r28
     360:	25 5c       	subi	r18, 0xC5	; 197
     362:	3f 4f       	sbci	r19, 0xFF	; 255
     364:	8e 01       	movw	r16, r28
     366:	01 5c       	subi	r16, 0xC1	; 193
     368:	1f 4f       	sbci	r17, 0xFF	; 255
     36a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg -300mV +/- 10% with min/max +/- 1% of avg 

	// breakpoint 3e - collect sample from Channel 1 (ELEC1/ELEC2) polarity reversed with gain of 2
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3e_avg_uV, &BP_3e_min_uV, &BP_3e_max_uV,
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	61 ec       	ldi	r22, 0xC1	; 193
     372:	ae 01       	movw	r20, r28
     374:	4d 5b       	subi	r20, 0xBD	; 189
     376:	5f 4f       	sbci	r21, 0xFF	; 255
     378:	9e 01       	movw	r18, r28
     37a:	29 5b       	subi	r18, 0xB9	; 185
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
     37e:	8e 01       	movw	r16, r28
     380:	05 5b       	subi	r16, 0xB5	; 181
     382:	1f 4f       	sbci	r17, 0xFF	; 255
     384:	ee 24       	eor	r14, r14
     386:	e3 94       	inc	r14
     388:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg -600mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     392:	00 00       	nop

	Ext1Power(TRUE);
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	// set filter for breakpoint 4
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 4a - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 2
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4a_avg_uV, &BP_4a_min_uV, &BP_4a_max_uV,
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	62 ec       	ldi	r22, 0xC2	; 194
     39e:	ae 01       	movw	r20, r28
     3a0:	41 5b       	subi	r20, 0xB1	; 177
     3a2:	5f 4f       	sbci	r21, 0xFF	; 255
     3a4:	9e 01       	movw	r18, r28
     3a6:	2d 5a       	subi	r18, 0xAD	; 173
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	8e 01       	movw	r16, r28
     3ac:	09 5a       	subi	r16, 0xA9	; 169
     3ae:	1f 4f       	sbci	r17, 0xFF	; 255
     3b0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg 600mV +/- 10% with min/max +/- 1% of avg 

	// breakpoint 4b - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4b_avg_uV, &BP_4b_min_uV, &BP_4b_max_uV,
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	62 ec       	ldi	r22, 0xC2	; 194
     3b8:	ae 01       	movw	r20, r28
     3ba:	45 5a       	subi	r20, 0xA5	; 165
     3bc:	5f 4f       	sbci	r21, 0xFF	; 255
     3be:	9e 01       	movw	r18, r28
     3c0:	21 5a       	subi	r18, 0xA1	; 161
     3c2:	3f 4f       	sbci	r19, 0xFF	; 255
     3c4:	8e 01       	movw	r16, r28
     3c6:	0d 59       	subi	r16, 0x9D	; 157
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	ee 24       	eor	r14, r14
     3cc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 300mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     3d6:	00 00       	nop

	Ext1Power(TRUE);
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	// breakpoint 4c - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4c_avg_uV, &BP_4c_min_uV, &BP_4c_max_uV,
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	62 ec       	ldi	r22, 0xC2	; 194
     3e2:	ae 01       	movw	r20, r28
     3e4:	49 59       	subi	r20, 0x99	; 153
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	9e 01       	movw	r18, r28
     3ea:	25 59       	subi	r18, 0x95	; 149
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	8e 01       	movw	r16, r28
     3f0:	01 59       	subi	r16, 0x91	; 145
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 0mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     3fe:	00 00       	nop

	Ext1Power(TRUE);
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	// breakpoint 4d - collect sample from Channel 2 (ELEC3/ELEC4) polarity reversed with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4d_avg_uV, &BP_4d_min_uV, &BP_4d_max_uV,
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	62 ec       	ldi	r22, 0xC2	; 194
     40a:	ae 01       	movw	r20, r28
     40c:	4d 58       	subi	r20, 0x8D	; 141
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	9e 01       	movw	r18, r28
     412:	29 58       	subi	r18, 0x89	; 137
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	8e 01       	movw	r16, r28
     418:	05 58       	subi	r16, 0x85	; 133
     41a:	1f 4f       	sbci	r17, 0xFF	; 255
     41c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg -300mV +/- 10% with min/max +/- 1% of avg


	// breakpoint 4e - collect sample from Channel 2 (ELEC3/ELEC4) polarity reversed with gain of 2
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4e_avg_uV, &BP_4e_min_uV, &BP_4e_max_uV,
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	62 ec       	ldi	r22, 0xC2	; 194
     424:	ae 01       	movw	r20, r28
     426:	41 58       	subi	r20, 0x81	; 129
     428:	5f 4f       	sbci	r21, 0xFF	; 255
     42a:	9e 01       	movw	r18, r28
     42c:	2d 57       	subi	r18, 0x7D	; 125
     42e:	3f 4f       	sbci	r19, 0xFF	; 255
     430:	8e 01       	movw	r16, r28
     432:	09 57       	subi	r16, 0x79	; 121
     434:	1f 4f       	sbci	r17, 0xFF	; 255
     436:	ee 24       	eor	r14, r14
     438:	e3 94       	inc	r14
     43a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg -600mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     444:	00 00       	nop

	Ext1Power(TRUE);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>
	HVPower(TRUE);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <HVPower>

	// set filter for breakpoint 5
	filterSettings = (uint8_t) (FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);
	
	// breakpoint 5a - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_4_gc, filterSettings, &BP_5a_avg_uV, &BP_5a_min_uV, &BP_5a_max_uV,
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	68 ec       	ldi	r22, 0xC8	; 200
     456:	ae 01       	movw	r20, r28
     458:	45 57       	subi	r20, 0x75	; 117
     45a:	5f 4f       	sbci	r21, 0xFF	; 255
     45c:	9e 01       	movw	r18, r28
     45e:	21 57       	subi	r18, 0x71	; 113
     460:	3f 4f       	sbci	r19, 0xFF	; 255
     462:	8e 01       	movw	r16, r28
     464:	0d 56       	subi	r16, 0x6D	; 109
     466:	1f 4f       	sbci	r17, 0xFF	; 255
     468:	ee 24       	eor	r14, r14
     46a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 293mV +/- 10% with min/max +/- 1% of avg
	
	HVPower(FALSE);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <HVPower>
	Ext1Power(FALSE);
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>
	
	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     47a:	00 00       	nop

	Ext1Power(TRUE);
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>
	HVPower(TRUE);
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <HVPower>
	
	// breakpoint 5b - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_4_gc, filterSettings, &BP_5b_avg_uV, &BP_5b_min_uV, &BP_5b_max_uV,
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	68 ec       	ldi	r22, 0xC8	; 200
     48c:	ae 01       	movw	r20, r28
     48e:	49 56       	subi	r20, 0x69	; 105
     490:	5f 4f       	sbci	r21, 0xFF	; 255
     492:	9e 01       	movw	r18, r28
     494:	25 56       	subi	r18, 0x65	; 101
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	8e 01       	movw	r16, r28
     49a:	01 56       	subi	r16, 0x61	; 97
     49c:	1f 4f       	sbci	r17, 0xFF	; 255
     49e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 571mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <HVPower>
	Ext1Power(FALSE);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     4ae:	00 00       	nop

	Ext1Power(TRUE);
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>
	HVPower(TRUE);
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <HVPower>
	
	// set filter for breakpoint 6
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 6a - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_6a_avg_uV, &BP_6a_min_uV, &BP_6a_max_uV,
     4bc:	84 e0       	ldi	r24, 0x04	; 4
     4be:	61 ec       	ldi	r22, 0xC1	; 193
     4c0:	ae 01       	movw	r20, r28
     4c2:	4d 55       	subi	r20, 0x5D	; 93
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	9e 01       	movw	r18, r28
     4c8:	29 55       	subi	r18, 0x59	; 89
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	8e 01       	movw	r16, r28
     4ce:	05 55       	subi	r16, 0x55	; 85
     4d0:	1f 4f       	sbci	r17, 0xFF	; 255
     4d2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <HVPower>
	Ext1Power(FALSE);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     4e2:	00 00       	nop

	Ext1Power(TRUE);
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>
	HVPower(TRUE);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <HVPower>

	// breakpoint 6b - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_6b_avg_uV, &BP_6b_min_uV, &BP_6b_max_uV,
     4f0:	84 e0       	ldi	r24, 0x04	; 4
     4f2:	61 ec       	ldi	r22, 0xC1	; 193
     4f4:	ae 01       	movw	r20, r28
     4f6:	41 55       	subi	r20, 0x51	; 81
     4f8:	5f 4f       	sbci	r21, 0xFF	; 255
     4fa:	9e 01       	movw	r18, r28
     4fc:	2d 54       	subi	r18, 0x4D	; 77
     4fe:	3f 4f       	sbci	r19, 0xFF	; 255
     500:	8e 01       	movw	r16, r28
     502:	09 54       	subi	r16, 0x49	; 73
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <HVPower>
	Ext1Power(FALSE);
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     516:	00 00       	nop

	Ext1Power(TRUE);
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	// breakpoint 7a - write known values with checksums to FRAM
	// read known values back from FRAM and recalculate checksums
	FRAMWriteKnownsCheck();
     51e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <FRAMWriteKnownsCheck>
	// sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 18CC5ED67 = 6656748903


	// breakpoint 7b - collect sample from all three seismic channels with
	// checksums on FRAM writes and read back recalculating checksums
	FRAMTest3Channel();
     522:	0e 94 a6 14 	call	0x294c	; 0x294c <FRAMTest3Channel>
	// checksumADC and checkSumFRAM match

	// breakpoint 7c - collect sample from all three seismic channels with
	// checksums on FRAM writes and read back recalculating checksums
	FRAMTest1Channel();
     526:	0e 94 65 14 	call	0x28ca	; 0x28ca <FRAMTest1Channel>
	// checksumADC and checkSumFRAM match 

	Ext1Power(TRUE);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	nop();
     530:	00 00       	nop

	Ext1Power(TRUE);
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	// set filter for breakpoint 7
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 7a - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_7a_avg_uV, &BP_7a_min_uV, &BP_7a_max_uV,
     538:	84 e0       	ldi	r24, 0x04	; 4
     53a:	61 ec       	ldi	r22, 0xC1	; 193
     53c:	ae 01       	movw	r20, r28
     53e:	45 54       	subi	r20, 0x45	; 69
     540:	5f 4f       	sbci	r21, 0xFF	; 255
     542:	9e 01       	movw	r18, r28
     544:	21 54       	subi	r18, 0x41	; 65
     546:	3f 4f       	sbci	r19, 0xFF	; 255
     548:	8e 01       	movw	r16, r28
     54a:	0d 53       	subi	r16, 0x3D	; 61
     54c:	1f 4f       	sbci	r17, 0xFF	; 255
     54e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 7b - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_7b_avg_uV, &BP_7b_min_uV, &BP_7b_max_uV,
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	61 ec       	ldi	r22, 0xC1	; 193
     556:	ae 01       	movw	r20, r28
     558:	49 53       	subi	r20, 0x39	; 57
     55a:	5f 4f       	sbci	r21, 0xFF	; 255
     55c:	9e 01       	movw	r18, r28
     55e:	25 53       	subi	r18, 0x35	; 53
     560:	3f 4f       	sbci	r19, 0xFF	; 255
     562:	8e 01       	movw	r16, r28
     564:	01 53       	subi	r16, 0x31	; 49
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>

	//**********************************************************************
	//************ TEARDOWN EXTERNAL CIRCUIT BEFORE PROCEEDING *************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     572:	00 00       	nop
	// set filter for breakpoint 8
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 8a - collect sample from Channel 6 (ACC x-axis) with gain of 1
	// configure board resting on long edge with J1 facing up
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_8a_avg_uV, &BP_8a_min_uV, &BP_8a_max_uV,
     574:	85 e0       	ldi	r24, 0x05	; 5
     576:	62 ec       	ldi	r22, 0xC2	; 194
     578:	ae 01       	movw	r20, r28
     57a:	4d 52       	subi	r20, 0x2D	; 45
     57c:	5f 4f       	sbci	r21, 0xFF	; 255
     57e:	9e 01       	movw	r18, r28
     580:	29 52       	subi	r18, 0x29	; 41
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	8e 01       	movw	r16, r28
     586:	05 52       	subi	r16, 0x25	; 37
     588:	1f 4f       	sbci	r17, 0xFF	; 255
     58a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 8b - collect sample from Channel 6 (ACC x-axis) with gain of 1
	// configure board resting on long edge with J1 facing down
 	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_8b_avg_uV, &BP_8b_min_uV, &BP_8b_max_uV,
     58e:	85 e0       	ldi	r24, 0x05	; 5
     590:	62 ec       	ldi	r22, 0xC2	; 194
     592:	ae 01       	movw	r20, r28
     594:	41 52       	subi	r20, 0x21	; 33
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	9e 01       	movw	r18, r28
     59a:	2d 51       	subi	r18, 0x1D	; 29
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	8e 01       	movw	r16, r28
     5a0:	09 51       	subi	r16, 0x19	; 25
     5a2:	1f 4f       	sbci	r17, 0xFF	; 255
     5a4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
	// set filter for breakpoint 9
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 9a - collect sample from Channel 7 (ACC y-axis) with gain of 1
	// configure board resting vertically short edge with J1 facing up
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_9a_avg_uV, &BP_9a_min_uV, &BP_9a_max_uV,
     5a8:	86 e0       	ldi	r24, 0x06	; 6
     5aa:	64 ec       	ldi	r22, 0xC4	; 196
     5ac:	ae 01       	movw	r20, r28
     5ae:	45 51       	subi	r20, 0x15	; 21
     5b0:	5f 4f       	sbci	r21, 0xFF	; 255
     5b2:	9e 01       	movw	r18, r28
     5b4:	21 51       	subi	r18, 0x11	; 17
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	8e 01       	movw	r16, r28
     5ba:	0d 50       	subi	r16, 0x0D	; 13
     5bc:	1f 4f       	sbci	r17, 0xFF	; 255
     5be:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 9b - collect sample from Channel 7 (ACC y-axis) with gain of 1
	// configure board resting vertically short edge with J1 facing down
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_9b_avg_uV, &BP_9b_min_uV, &BP_9b_max_uV,
     5c2:	86 e0       	ldi	r24, 0x06	; 6
     5c4:	64 ec       	ldi	r22, 0xC4	; 196
     5c6:	ae 01       	movw	r20, r28
     5c8:	49 50       	subi	r20, 0x09	; 9
     5ca:	5f 4f       	sbci	r21, 0xFF	; 255
     5cc:	9e 01       	movw	r18, r28
     5ce:	25 50       	subi	r18, 0x05	; 5
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	8e 01       	movw	r16, r28
     5d4:	01 50       	subi	r16, 0x01	; 1
     5d6:	1f 4f       	sbci	r17, 0xFF	; 255
     5d8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
	// set filter for breakpoint 10
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 10a - collect sample from Channel 8 (ACC z-axis) with gain of 1
	// configure board resting lies flat with J1 facing up
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_10a_avg_uV, &BP_10a_min_uV, &BP_10a_max_uV,
     5dc:	87 e0       	ldi	r24, 0x07	; 7
     5de:	64 ec       	ldi	r22, 0xC4	; 196
     5e0:	ae 01       	movw	r20, r28
     5e2:	4d 5f       	subi	r20, 0xFD	; 253
     5e4:	5e 4f       	sbci	r21, 0xFE	; 254
     5e6:	9e 01       	movw	r18, r28
     5e8:	29 5f       	subi	r18, 0xF9	; 249
     5ea:	3e 4f       	sbci	r19, 0xFE	; 254
     5ec:	8e 01       	movw	r16, r28
     5ee:	05 5f       	subi	r16, 0xF5	; 245
     5f0:	1e 4f       	sbci	r17, 0xFE	; 254
     5f2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 10b - collect sample from Channel 8 (ACC z-axis) with gain of 1
	// configure board resting lies flat with J1 facing down
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_10b_avg_uV, &BP_10b_min_uV, &BP_10b_max_uV,
     5f6:	87 e0       	ldi	r24, 0x07	; 7
     5f8:	64 ec       	ldi	r22, 0xC4	; 196
     5fa:	ae 01       	movw	r20, r28
     5fc:	41 5f       	subi	r20, 0xF1	; 241
     5fe:	5e 4f       	sbci	r21, 0xFE	; 254
     600:	9e 01       	movw	r18, r28
     602:	2d 5e       	subi	r18, 0xED	; 237
     604:	3e 4f       	sbci	r19, 0xFE	; 254
     606:	8e 01       	movw	r16, r28
     608:	09 5e       	subi	r16, 0xE9	; 233
     60a:	1e 4f       	sbci	r17, 0xFE	; 254
     60c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
	
	//**********************************************************************
	//************ SETUP SINE WAVE GENERATOR BEFORE PROCEEDING *************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     610:	00 00       	nop

	// set filter for breakpoint 11
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 11a - collect sample from Channel 6 (ACC x-axis) with gain of 16
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_11a_avg_uV, &BP_11a_min_uV, &BP_11a_max_uV,
     612:	85 e0       	ldi	r24, 0x05	; 5
     614:	62 ec       	ldi	r22, 0xC2	; 194
     616:	ae 01       	movw	r20, r28
     618:	45 5e       	subi	r20, 0xE5	; 229
     61a:	5e 4f       	sbci	r21, 0xFE	; 254
     61c:	9e 01       	movw	r18, r28
     61e:	21 5e       	subi	r18, 0xE1	; 225
     620:	3e 4f       	sbci	r19, 0xFE	; 254
     622:	8e 01       	movw	r16, r28
     624:	0d 5d       	subi	r16, 0xDD	; 221
     626:	1e 4f       	sbci	r17, 0xFE	; 254
     628:	ee 24       	eor	r14, r14
     62a:	68 94       	set
     62c:	e2 f8       	bld	r14, 2
     62e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_11a_delta_uV = BP_11a_max_uV - BP_11a_min_uV;
	BP_11a_diff1_uV = BP_11a_max_uV - BP_11a_avg_uV;
	BP_11a_diff2_uV = BP_11a_avg_uV - BP_11a_min_uV;
	nop();
     632:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 11b - collect sample from Channel 6 (ACC x-axis) with gain of 16
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_11b_avg_uV, &BP_11b_min_uV, &BP_11b_max_uV,
     634:	85 e0       	ldi	r24, 0x05	; 5
     636:	62 ec       	ldi	r22, 0xC2	; 194
     638:	ae 01       	movw	r20, r28
     63a:	49 5d       	subi	r20, 0xD9	; 217
     63c:	5e 4f       	sbci	r21, 0xFE	; 254
     63e:	9e 01       	movw	r18, r28
     640:	25 5d       	subi	r18, 0xD5	; 213
     642:	3e 4f       	sbci	r19, 0xFE	; 254
     644:	8e 01       	movw	r16, r28
     646:	01 5d       	subi	r16, 0xD1	; 209
     648:	1e 4f       	sbci	r17, 0xFE	; 254
     64a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_11b_delta_uV = BP_11b_max_uV - BP_11b_min_uV;
	BP_11b_diff1_uV = BP_11b_max_uV - BP_11b_avg_uV;
	BP_11b_diff2_uV = BP_11b_avg_uV - BP_11b_min_uV;
	nop();
     64e:	00 00       	nop

	// set filter for breakpoint 12
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 12a - collect sample from Channel 7 (ACC y-axis) with gain of 16
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_12a_avg_uV, &BP_12a_min_uV, &BP_12a_max_uV,
     650:	86 e0       	ldi	r24, 0x06	; 6
     652:	64 ec       	ldi	r22, 0xC4	; 196
     654:	ae 01       	movw	r20, r28
     656:	4d 5c       	subi	r20, 0xCD	; 205
     658:	5e 4f       	sbci	r21, 0xFE	; 254
     65a:	9e 01       	movw	r18, r28
     65c:	29 5c       	subi	r18, 0xC9	; 201
     65e:	3e 4f       	sbci	r19, 0xFE	; 254
     660:	8e 01       	movw	r16, r28
     662:	05 5c       	subi	r16, 0xC5	; 197
     664:	1e 4f       	sbci	r17, 0xFE	; 254
     666:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_12a_delta_uV = BP_12a_max_uV - BP_12a_min_uV;
	BP_12a_diff1_uV = BP_12a_max_uV - BP_12a_avg_uV;
	BP_12a_diff2_uV = BP_12a_avg_uV - BP_12a_min_uV;
	nop();
     66a:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 12b - collect sample from Channel 7 (ACC y-axis) with gain of 16
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_12b_avg_uV, &BP_12b_min_uV, &BP_12b_max_uV,
     66c:	86 e0       	ldi	r24, 0x06	; 6
     66e:	64 ec       	ldi	r22, 0xC4	; 196
     670:	ae 01       	movw	r20, r28
     672:	41 5c       	subi	r20, 0xC1	; 193
     674:	5e 4f       	sbci	r21, 0xFE	; 254
     676:	9e 01       	movw	r18, r28
     678:	2d 5b       	subi	r18, 0xBD	; 189
     67a:	3e 4f       	sbci	r19, 0xFE	; 254
     67c:	8e 01       	movw	r16, r28
     67e:	09 5b       	subi	r16, 0xB9	; 185
     680:	1e 4f       	sbci	r17, 0xFE	; 254
     682:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_12b_delta_uV = BP_12b_max_uV - BP_12b_min_uV;
	BP_12b_diff1_uV = BP_12b_max_uV - BP_12b_avg_uV;
	BP_12b_diff2_uV = BP_12b_avg_uV - BP_12b_min_uV;
	nop();
     686:	00 00       	nop
	
	// set filter for breakpoint 13
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 13a - collect sample from Channel 8 (ACC z-axis) with gain of 16
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_13a_avg_uV, &BP_13a_min_uV, &BP_13a_max_uV,
     688:	87 e0       	ldi	r24, 0x07	; 7
     68a:	64 ec       	ldi	r22, 0xC4	; 196
     68c:	ae 01       	movw	r20, r28
     68e:	45 5b       	subi	r20, 0xB5	; 181
     690:	5e 4f       	sbci	r21, 0xFE	; 254
     692:	9e 01       	movw	r18, r28
     694:	21 5b       	subi	r18, 0xB1	; 177
     696:	3e 4f       	sbci	r19, 0xFE	; 254
     698:	8e 01       	movw	r16, r28
     69a:	0d 5a       	subi	r16, 0xAD	; 173
     69c:	1e 4f       	sbci	r17, 0xFE	; 254
     69e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_13a_delta_uV = BP_13a_max_uV - BP_13a_min_uV;
	BP_13a_diff1_uV = BP_13a_max_uV - BP_13a_avg_uV;
	BP_13a_diff2_uV = BP_13a_avg_uV - BP_13a_min_uV;
	nop();
     6a2:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 13b - collect sample from Channel 8 (ACC z-axis) with gain of 16
	// configure board resting lies flat with J1 facing down
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_13b_avg_uV, &BP_13b_min_uV, &BP_13b_max_uV,
     6a4:	87 e0       	ldi	r24, 0x07	; 7
     6a6:	64 ec       	ldi	r22, 0xC4	; 196
     6a8:	ae 01       	movw	r20, r28
     6aa:	49 5a       	subi	r20, 0xA9	; 169
     6ac:	5e 4f       	sbci	r21, 0xFE	; 254
     6ae:	9e 01       	movw	r18, r28
     6b0:	25 5a       	subi	r18, 0xA5	; 165
     6b2:	3e 4f       	sbci	r19, 0xFE	; 254
     6b4:	8e 01       	movw	r16, r28
     6b6:	01 5a       	subi	r16, 0xA1	; 161
     6b8:	1e 4f       	sbci	r17, 0xFE	; 254
     6ba:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_13b_delta_uV = BP_13b_max_uV - BP_13b_min_uV;
	BP_13b_diff1_uV = BP_13b_max_uV - BP_13b_avg_uV;
	BP_13b_diff2_uV = BP_13b_avg_uV - BP_13b_min_uV;
	nop();
     6be:	00 00       	nop
     6c0:	ff cf       	rjmp	.-2      	; 0x6c0 <main+0x44e>

000006c2 <setXOSC_32MHz>:
//  - LS900-SI-02 does not contain the crystal
//  - SFLX02-A03 does contain the crystal
// The high frequency crystal is required to clock the ADC without jitter
void setXOSC_32MHz() {
	// configure the crystal to match the chip 
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc,
     6c2:	80 ec       	ldi	r24, 0xC0	; 192
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	4b e0       	ldi	r20, 0x0B	; 11
     6c8:	0e 94 4a 2a 	call	0x5494	; 0x5494 <CLKSYS_XOSC_Config>
		                    false,
		                    OSC_XOSCSEL_XTAL_16KCLK_gc );
	CLKSYS_Enable(OSC_XOSCEN_bm);
     6cc:	e0 e5       	ldi	r30, 0x50	; 80
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	88 60       	ori	r24, 0x08	; 8
     6d4:	80 83       	st	Z, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     6d6:	81 81       	ldd	r24, Z+1	; 0x01
     6d8:	83 ff       	sbrs	r24, 3
     6da:	fd cf       	rjmp	.-6      	; 0x6d6 <setXOSC_32MHz+0x14>
	// configure PLL to use the crystal and turn on
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     6dc:	80 ec       	ldi	r24, 0xC0	; 192
     6de:	62 e0       	ldi	r22, 0x02	; 2
     6e0:	0e 94 55 2a 	call	0x54aa	; 0x54aa <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     6e4:	e0 e5       	ldi	r30, 0x50	; 80
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	80 61       	ori	r24, 0x10	; 16
     6ec:	80 83       	st	Z, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     6ee:	81 81       	ldd	r24, Z+1	; 0x01
     6f0:	84 ff       	sbrs	r24, 4
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <setXOSC_32MHz+0x2c>
	// set as system clock and disable unused RC oscillator
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     6f4:	84 e0       	ldi	r24, 0x04	; 4
     6f6:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <CLKSYS_Disable>
}
     700:	08 95       	ret

00000702 <set_16MHz>:

// produces consistent but inaccurate clock period.
void set_16MHz() {
	// select 32MHz Oscillator and prescale by 1/2
	CLKSYS_Enable(OSC_RC32MEN_bm);
     702:	e0 e5       	ldi	r30, 0x50	; 80
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	82 60       	ori	r24, 0x02	; 2
     70a:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	0e 94 65 2a 	call	0x54ca	; 0x54ca <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
     714:	e0 e5       	ldi	r30, 0x50	; 80
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	81 81       	ldd	r24, Z+1	; 0x01
     71a:	81 ff       	sbrs	r24, 1
     71c:	fd cf       	rjmp	.-6      	; 0x718 <set_16MHz+0x16>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <CLKSYS_Disable>
	
}
     72a:	08 95       	ret

0000072c <set_32MHz>:


// produces consistent but inaccurate clock period.
void set_32MHz() {
	// select 32MHz Oscillator and prescale by 1
	CLKSYS_Enable(OSC_RC32MEN_bm);
     72c:	e0 e5       	ldi	r30, 0x50	; 80
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	82 60       	ori	r24, 0x02	; 2
     734:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	0e 94 65 2a 	call	0x54ca	; 0x54ca <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
     73e:	e0 e5       	ldi	r30, 0x50	; 80
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	81 81       	ldd	r24, Z+1	; 0x01
     744:	81 ff       	sbrs	r24, 1
     746:	fd cf       	rjmp	.-6      	; 0x742 <set_32MHz+0x16>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <CLKSYS_Disable>
	
}
     754:	08 95       	ret

00000756 <portExCS>:
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     756:	88 23       	and	r24, r24
     758:	29 f0       	breq	.+10     	; 0x764 <portExCS+0xe>
     75a:	88 e0       	ldi	r24, 0x08	; 8
     75c:	e0 e0       	ldi	r30, 0x00	; 0
     75e:	f6 e0       	ldi	r31, 0x06	; 6
     760:	86 83       	std	Z+6, r24	; 0x06
     762:	04 c0       	rjmp	.+8      	; 0x76c <portExCS+0x16>
	else {
		PORTA.OUTSET = PIN3_bm;
     764:	88 e0       	ldi	r24, 0x08	; 8
     766:	e0 e0       	ldi	r30, 0x00	; 0
     768:	f6 e0       	ldi	r31, 0x06	; 6
     76a:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     76c:	8a e6       	ldi	r24, 0x6A	; 106
     76e:	8a 95       	dec	r24
     770:	f1 f7       	brne	.-4      	; 0x76e <portExCS+0x18>
     772:	00 c0       	rjmp	.+0      	; 0x774 <portExCS+0x1e>
	}
	_delay_us(10);
}
     774:	08 95       	ret

00000776 <Ext1Power>:
		
	}
}

void Ext1Power(uint8_t on) {
	if (on) {
     776:	88 23       	and	r24, r24
     778:	79 f0       	breq	.+30     	; 0x798 <Ext1Power+0x22>
		PORTF.DIRSET = PIN5_bm;
     77a:	e0 ea       	ldi	r30, 0xA0	; 160
     77c:	f6 e0       	ldi	r31, 0x06	; 6
     77e:	80 e2       	ldi	r24, 0x20	; 32
     780:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN5_bm;
     782:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	93 ec       	ldi	r25, 0xC3	; 195
     788:	a9 e0       	ldi	r26, 0x09	; 9
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	a0 40       	sbci	r26, 0x00	; 0
     790:	e1 f7       	brne	.-8      	; 0x78a <Ext1Power+0x14>
     792:	00 c0       	rjmp	.+0      	; 0x794 <Ext1Power+0x1e>
     794:	00 00       	nop
     796:	08 95       	ret
		//PortEx_DIRSET(PIN3_bm, PS_BANKB);
		//PortEx_OUTSET(PIN3_bm, PS_BANKB);  //write protect SDHC
		_delay_ms(100);
		
	} else {
		PORTF.OUTCLR = PIN5_bm;
     798:	e0 ea       	ldi	r30, 0xA0	; 160
     79a:	f6 e0       	ldi	r31, 0x06	; 6
     79c:	80 e2       	ldi	r24, 0x20	; 32
     79e:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN5_bm;
     7a0:	82 83       	std	Z+2, r24	; 0x02
     7a2:	08 95       	ret

000007a4 <Ext2Power>:
		//PortEx_OUTCLR(PIN3_bm, PS_BANKB);  //no need to write protect SDHC
	}
}

void Ext2Power(uint8_t on) {
	if (on) {
     7a4:	88 23       	and	r24, r24
     7a6:	79 f0       	breq	.+30     	; 0x7c6 <Ext2Power+0x22>
		PORTF.DIRSET = PIN6_bm;
     7a8:	e0 ea       	ldi	r30, 0xA0	; 160
     7aa:	f6 e0       	ldi	r31, 0x06	; 6
     7ac:	80 e4       	ldi	r24, 0x40	; 64
     7ae:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN6_bm;
     7b0:	85 83       	std	Z+5, r24	; 0x05
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	93 ec       	ldi	r25, 0xC3	; 195
     7b6:	a9 e0       	ldi	r26, 0x09	; 9
     7b8:	81 50       	subi	r24, 0x01	; 1
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	a0 40       	sbci	r26, 0x00	; 0
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <Ext2Power+0x14>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <Ext2Power+0x1e>
     7c2:	00 00       	nop
     7c4:	08 95       	ret
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN6_bm;
     7c6:	e0 ea       	ldi	r30, 0xA0	; 160
     7c8:	f6 e0       	ldi	r31, 0x06	; 6
     7ca:	80 e4       	ldi	r24, 0x40	; 64
     7cc:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN6_bm;
     7ce:	82 83       	std	Z+2, r24	; 0x02
     7d0:	08 95       	ret

000007d2 <HVPower>:
	}
}

void HVPower(uint8_t on) {
	if (on) {
     7d2:	88 23       	and	r24, r24
     7d4:	79 f0       	breq	.+30     	; 0x7f4 <HVPower+0x22>
		PORTF.DIRSET = PIN7_bm;
     7d6:	e0 ea       	ldi	r30, 0xA0	; 160
     7d8:	f6 e0       	ldi	r31, 0x06	; 6
     7da:	80 e8       	ldi	r24, 0x80	; 128
     7dc:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN7_bm;
     7de:	85 83       	std	Z+5, r24	; 0x05
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	93 ec       	ldi	r25, 0xC3	; 195
     7e4:	a9 e0       	ldi	r26, 0x09	; 9
     7e6:	81 50       	subi	r24, 0x01	; 1
     7e8:	90 40       	sbci	r25, 0x00	; 0
     7ea:	a0 40       	sbci	r26, 0x00	; 0
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <HVPower+0x14>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <HVPower+0x1e>
     7f0:	00 00       	nop
     7f2:	05 c0       	rjmp	.+10     	; 0x7fe <HVPower+0x2c>
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN7_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
     7f6:	f6 e0       	ldi	r31, 0x06	; 6
     7f8:	80 e8       	ldi	r24, 0x80	; 128
     7fa:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN7_bm;
     7fc:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fe:	af e3       	ldi	r26, 0x3F	; 63
     800:	bf e1       	ldi	r27, 0x1F	; 31
     802:	11 97       	sbiw	r26, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <HVPower+0x30>
     806:	00 c0       	rjmp	.+0      	; 0x808 <HVPower+0x36>
     808:	00 00       	nop
	}
	_delay_us(1000);
}
     80a:	08 95       	ret

0000080c <enableADCMUX>:
	if (upperCS) upperMuxCS(FALSE);
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
     80c:	88 23       	and	r24, r24
     80e:	31 f0       	breq	.+12     	; 0x81c <enableADCMUX+0x10>
		PORTA.DIRSET = PIN5_bm;
     810:	e0 e0       	ldi	r30, 0x00	; 0
     812:	f6 e0       	ldi	r31, 0x06	; 6
     814:	80 e2       	ldi	r24, 0x20	; 32
     816:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
     818:	85 83       	std	Z+5, r24	; 0x05
     81a:	08 95       	ret
	} else {
		PORTA.OUTCLR = PIN5_bm;
     81c:	e0 e0       	ldi	r30, 0x00	; 0
     81e:	f6 e0       	ldi	r31, 0x06	; 6
     820:	80 e2       	ldi	r24, 0x20	; 32
     822:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
     824:	82 83       	std	Z+2, r24	; 0x02
     826:	08 95       	ret

00000828 <lowerMuxCS>:
	}
}

void lowerMuxCS(uint8_t write) {
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
     828:	88 23       	and	r24, r24
     82a:	29 f0       	breq	.+10     	; 0x836 <lowerMuxCS+0xe>
     82c:	80 e1       	ldi	r24, 0x10	; 16
     82e:	e0 e8       	ldi	r30, 0x80	; 128
     830:	f6 e0       	ldi	r31, 0x06	; 6
     832:	86 83       	std	Z+6, r24	; 0x06
     834:	08 95       	ret
	else PORTE.OUTSET = PIN4_bm;
     836:	80 e1       	ldi	r24, 0x10	; 16
     838:	e0 e8       	ldi	r30, 0x80	; 128
     83a:	f6 e0       	ldi	r31, 0x06	; 6
     83c:	85 83       	std	Z+5, r24	; 0x05
     83e:	08 95       	ret

00000840 <upperMuxCS>:
}
void upperMuxCS(uint8_t write) {
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
     840:	88 23       	and	r24, r24
     842:	29 f0       	breq	.+10     	; 0x84e <upperMuxCS+0xe>
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	e0 e4       	ldi	r30, 0x40	; 64
     848:	f6 e0       	ldi	r31, 0x06	; 6
     84a:	86 83       	std	Z+6, r24	; 0x06
     84c:	08 95       	ret
	else PORTC.OUTSET = PIN1_bm;
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	e0 e4       	ldi	r30, 0x40	; 64
     852:	f6 e0       	ldi	r31, 0x06	; 6
     854:	85 83       	std	Z+5, r24	; 0x05
     856:	08 95       	ret

00000858 <setADCInput>:

/*! \brief Sets input channel to AD7767 via the A0, A1, A2 control lines of ADG758
 */
void setADCInput(uint8_t channel) {
	// set bit A0 to LSB
	if(channel & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
     858:	80 ff       	sbrs	r24, 0
     85a:	05 c0       	rjmp	.+10     	; 0x866 <setADCInput+0xe>
     85c:	20 e4       	ldi	r18, 0x40	; 64
     85e:	e0 e0       	ldi	r30, 0x00	; 0
     860:	f6 e0       	ldi	r31, 0x06	; 6
     862:	25 83       	std	Z+5, r18	; 0x05
     864:	04 c0       	rjmp	.+8      	; 0x86e <setADCInput+0x16>
	else {PORTA.OUTCLR = PIN6_bm;}
     866:	20 e4       	ldi	r18, 0x40	; 64
     868:	e0 e0       	ldi	r30, 0x00	; 0
     86a:	f6 e0       	ldi	r31, 0x06	; 6
     86c:	26 83       	std	Z+6, r18	; 0x06
	// set bit A1 to second bit
	if(channel & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
     86e:	81 ff       	sbrs	r24, 1
     870:	05 c0       	rjmp	.+10     	; 0x87c <setADCInput+0x24>
     872:	22 e0       	ldi	r18, 0x02	; 2
     874:	e0 e2       	ldi	r30, 0x20	; 32
     876:	f6 e0       	ldi	r31, 0x06	; 6
     878:	25 83       	std	Z+5, r18	; 0x05
     87a:	04 c0       	rjmp	.+8      	; 0x884 <setADCInput+0x2c>
	else {PORTB.OUTCLR = PIN1_bm;}
     87c:	22 e0       	ldi	r18, 0x02	; 2
     87e:	e0 e2       	ldi	r30, 0x20	; 32
     880:	f6 e0       	ldi	r31, 0x06	; 6
     882:	26 83       	std	Z+6, r18	; 0x06
	// set bit A3 to third bit
	if(channel & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
     884:	82 ff       	sbrs	r24, 2
     886:	05 c0       	rjmp	.+10     	; 0x892 <setADCInput+0x3a>
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	e0 e2       	ldi	r30, 0x20	; 32
     88c:	f6 e0       	ldi	r31, 0x06	; 6
     88e:	85 83       	std	Z+5, r24	; 0x05
     890:	08 95       	ret
	else {PORTB.OUTCLR = PIN2_bm;}
     892:	84 e0       	ldi	r24, 0x04	; 4
     894:	e0 e2       	ldi	r30, 0x20	; 32
     896:	f6 e0       	ldi	r31, 0x06	; 6
     898:	86 83       	std	Z+6, r24	; 0x06
     89a:	08 95       	ret

0000089c <SPIInit>:
}


void SPIInit(uint8_t mode) {
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
     89c:	e0 e4       	ldi	r30, 0x40	; 64
     89e:	f6 e0       	ldi	r31, 0x06	; 6
     8a0:	90 e1       	ldi	r25, 0x10	; 16
     8a2:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
     8a4:	28 e3       	ldi	r18, 0x38	; 56
     8a6:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
     8a8:	95 83       	std	Z+5, r25	; 0x05

	// init SPI
	SPIC.CTRL =	SPI_PRESCALER |  // set clock speed
     8aa:	81 65       	ori	r24, 0x51	; 81
     8ac:	a0 ec       	ldi	r26, 0xC0	; 192
     8ae:	b8 e0       	ldi	r27, 0x08	; 8
     8b0:	8c 93       	st	X, r24
	            0x00 |  // set data order msb first
	            SPI_MASTER_bm | // set SPI master
	            mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     8b2:	11 96       	adiw	r26, 0x01	; 1
     8b4:	1c 92       	st	X, r1
     8b6:	11 97       	sbiw	r26, 0x01	; 1

 	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
     8b8:	80 ea       	ldi	r24, 0xA0	; 160
     8ba:	81 83       	std	Z+1, r24	; 0x01

	
}
     8bc:	08 95       	ret

000008be <SPIInit2>:
//use this if using a prescalar
void SPIInit2(uint8_t mode, uint8_t prescalar) {
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
     8be:	e0 e4       	ldi	r30, 0x40	; 64
     8c0:	f6 e0       	ldi	r31, 0x06	; 6
     8c2:	90 e1       	ldi	r25, 0x10	; 16
     8c4:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
     8c6:	28 e3       	ldi	r18, 0x38	; 56
     8c8:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
     8ca:	95 83       	std	Z+5, r25	; 0x05
	

	// init SPI
	SPIC.CTRL =	prescalar |  // set clock speed
     8cc:	80 65       	ori	r24, 0x50	; 80
     8ce:	68 2b       	or	r22, r24
     8d0:	a0 ec       	ldi	r26, 0xC0	; 192
     8d2:	b8 e0       	ldi	r27, 0x08	; 8
     8d4:	6c 93       	st	X, r22
	0x00 |  // set data order msb first
	SPI_MASTER_bm | // set SPI master
	mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     8d6:	11 96       	adiw	r26, 0x01	; 1
     8d8:	1c 92       	st	X, r1
     8da:	11 97       	sbiw	r26, 0x01	; 1

	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
     8dc:	80 ea       	ldi	r24, 0xA0	; 160
     8de:	81 83       	std	Z+1, r24	; 0x01
}
     8e0:	08 95       	ret

000008e2 <SPICS>:

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     8e2:	88 23       	and	r24, r24
     8e4:	29 f0       	breq	.+10     	; 0x8f0 <SPICS+0xe>
     8e6:	80 e1       	ldi	r24, 0x10	; 16
     8e8:	e0 e4       	ldi	r30, 0x40	; 64
     8ea:	f6 e0       	ldi	r31, 0x06	; 6
     8ec:	86 83       	std	Z+6, r24	; 0x06
     8ee:	08 95       	ret
	else {
		PORTC.OUTSET = PIN4_bm;
     8f0:	80 e1       	ldi	r24, 0x10	; 16
     8f2:	e0 e4       	ldi	r30, 0x40	; 64
     8f4:	f6 e0       	ldi	r31, 0x06	; 6
     8f6:	85 83       	std	Z+5, r24	; 0x05
     8f8:	08 95       	ret

000008fa <SPIDisable>:
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
     8fa:	e0 e4       	ldi	r30, 0x40	; 64
     8fc:	f6 e0       	ldi	r31, 0x06	; 6
     8fe:	80 e1       	ldi	r24, 0x10	; 16
     900:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
     902:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     906:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     908:	80 eb       	ldi	r24, 0xB0	; 176
     90a:	82 83       	std	Z+2, r24	; 0x02

}
     90c:	08 95       	ret

0000090e <set_filter>:
 *	filterConfig[2]	Channel 3 and 7 mask
 *	filterConfig[3]	Channel 4 and 8 mask
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
*/
void set_filter(uint8_t filterConfig) {
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
	// hack to get ADC to work
	//filterConfig |= 0x0F;

	// boolean flags for upper/lower channels CS
	uint8_t lowerCS = filterConfig & 0x03; 
     912:	c8 2f       	mov	r28, r24
     914:	c3 70       	andi	r28, 0x03	; 3
	uint8_t upperCS = filterConfig & 0x0C;
     916:	d8 2f       	mov	r29, r24
     918:	dc 70       	andi	r29, 0x0C	; 12

	// update left and right channel status
	if (filterConfig & (BIT0_bm | BIT2_bm)) channelStatus = 
     91a:	28 2f       	mov	r18, r24
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	a9 01       	movw	r20, r18
     920:	45 70       	andi	r20, 0x05	; 5
     922:	50 70       	andi	r21, 0x00	; 0
     924:	41 15       	cp	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	49 f0       	breq	.+18     	; 0x93c <set_filter+0x2e>
     92a:	90 91 6f 50 	lds	r25, 0x506F
     92e:	48 2f       	mov	r20, r24
     930:	42 95       	swap	r20
     932:	4f 70       	andi	r20, 0x0F	; 15
     934:	90 7f       	andi	r25, 0xF0	; 240
     936:	94 2b       	or	r25, r20
     938:	90 93 6f 50 	sts	0x506F, r25
		(0xF0 & channelStatus) | (filterConfig >> 4);  //right
	if (filterConfig & (BIT1_bm | BIT3_bm)) channelStatus =
     93c:	2a 70       	andi	r18, 0x0A	; 10
     93e:	30 70       	andi	r19, 0x00	; 0
     940:	21 15       	cp	r18, r1
     942:	31 05       	cpc	r19, r1
     944:	39 f0       	breq	.+14     	; 0x954 <set_filter+0x46>
     946:	90 91 6f 50 	lds	r25, 0x506F
     94a:	80 7f       	andi	r24, 0xF0	; 240
     94c:	9f 70       	andi	r25, 0x0F	; 15
     94e:	89 2b       	or	r24, r25
     950:	80 93 6f 50 	sts	0x506F, r24
		(0xF0 & filterConfig) | (0x0F & channelStatus); //left
		
	SPIInit(SPI_MODE_1_gc);
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>

	
	SPIBuffer[0] = channelStatus;
     95a:	80 91 6f 50 	lds	r24, 0x506F
     95e:	80 93 5f 50 	sts	0x505F, r24
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
     962:	cc 23       	and	r28, r28
     964:	19 f0       	breq	.+6      	; 0x96c <set_filter+0x5e>
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	0e 94 14 04 	call	0x828	; 0x828 <lowerMuxCS>
	if (upperCS) upperMuxCS(TRUE);
     96c:	dd 23       	and	r29, r29
     96e:	19 f0       	breq	.+6      	; 0x976 <set_filter+0x68>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 20 04 	call	0x840	; 0x840 <upperMuxCS>

	SPICS(TRUE);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>

	// Send all logic high to ensure that the SDO line on the chip is
	// left in high Z state after SPI transaction.
	// The t-1 SDI transaction is output on the SDO and the pin left in the configuration.
	// of the last bit
	SPIC.DATA = 0xFF;
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	e0 ec       	ldi	r30, 0xC0	; 192
     980:	f8 e0       	ldi	r31, 0x08	; 8
     982:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	88 23       	and	r24, r24
     988:	ec f7       	brge	.-6      	; 0x984 <set_filter+0x76>
	SPIBuffer[12] = SPIC.DATA;
     98a:	e0 ec       	ldi	r30, 0xC0	; 192
     98c:	f8 e0       	ldi	r31, 0x08	; 8
     98e:	83 81       	ldd	r24, Z+3	; 0x03
     990:	80 93 6b 50 	sts	0x506B, r24

	nop();
     994:	00 00       	nop

	SPIC.DATA = SPIBuffer[0];
     996:	ab e6       	ldi	r26, 0x6B	; 107
     998:	b0 e5       	ldi	r27, 0x50	; 80
     99a:	1c 97       	sbiw	r26, 0x0c	; 12
     99c:	8c 91       	ld	r24, X
     99e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	88 23       	and	r24, r24
     9a4:	ec f7       	brge	.-6      	; 0x9a0 <set_filter+0x92>
	SPIBuffer[12] = SPIC.DATA;
     9a6:	e0 ec       	ldi	r30, 0xC0	; 192
     9a8:	f8 e0       	ldi	r31, 0x08	; 8
     9aa:	83 81       	ldd	r24, Z+3	; 0x03
     9ac:	80 93 6b 50 	sts	0x506B, r24
	SPICS(FALSE);
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>

	if (lowerCS) lowerMuxCS(FALSE);
     9b6:	cc 23       	and	r28, r28
     9b8:	19 f0       	breq	.+6      	; 0x9c0 <set_filter+0xb2>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 14 04 	call	0x828	; 0x828 <lowerMuxCS>
	if (upperCS) upperMuxCS(FALSE);
     9c0:	dd 23       	and	r29, r29
     9c2:	19 f0       	breq	.+6      	; 0x9ca <set_filter+0xbc>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	0e 94 20 04 	call	0x840	; 0x840 <upperMuxCS>
	SPIDisable();
     9ca:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <PortEx_OUTCLR>:
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	c8 2f       	mov	r28, r24
     9da:	d6 2f       	mov	r29, r22
	SPIInit(PS_SPI_MODE);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	portExCS(TRUE);
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	0e 94 ab 03 	call	0x756	; 0x756 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
     9ee:	dd 23       	and	r29, r29
     9f0:	89 f0       	breq	.+34     	; 0xa14 <PortEx_OUTCLR+0x40>
     9f2:	80 91 59 40 	lds	r24, 0x4059
     9f6:	c0 95       	com	r28
     9f8:	c8 23       	and	r28, r24
     9fa:	c0 93 59 40 	sts	0x4059, r28
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
	
	SPIBuffer[0] = PS_WRITE;
     9fe:	80 e4       	ldi	r24, 0x40	; 64
     a00:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
     a04:	84 e1       	ldi	r24, 0x14	; 20
     a06:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = bankA_OUT;
     a0a:	80 91 59 40 	lds	r24, 0x4059
     a0e:	80 93 61 50 	sts	0x5061, r24
     a12:	10 c0       	rjmp	.+32     	; 0xa34 <PortEx_OUTCLR+0x60>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
     a14:	80 91 70 50 	lds	r24, 0x5070
     a18:	c0 95       	com	r28
     a1a:	c8 23       	and	r28, r24
     a1c:	c0 93 70 50 	sts	0x5070, r28
	
	SPIBuffer[0] = PS_WRITE;
     a20:	80 e4       	ldi	r24, 0x40	; 64
     a22:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
		SPIBuffer[2] = bankA_OUT;
	} else {
		SPIBuffer[1]=PS_OLATB;
     a26:	85 e1       	ldi	r24, 0x15	; 21
     a28:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = bankB_OUT; 
     a2c:	80 91 70 50 	lds	r24, 0x5070
     a30:	80 93 61 50 	sts	0x5061, r24
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     a38:	2f e5       	ldi	r18, 0x5F	; 95
     a3a:	30 e5       	ldi	r19, 0x50	; 80
     a3c:	a0 ec       	ldi	r26, 0xC0	; 192
     a3e:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     a40:	cb e6       	ldi	r28, 0x6B	; 107
     a42:	d0 e5       	ldi	r29, 0x50	; 80
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     a44:	f9 01       	movw	r30, r18
     a46:	e8 0f       	add	r30, r24
     a48:	f9 1f       	adc	r31, r25
     a4a:	40 81       	ld	r20, Z
     a4c:	13 96       	adiw	r26, 0x03	; 3
     a4e:	4c 93       	st	X, r20
     a50:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     a52:	12 96       	adiw	r26, 0x02	; 2
     a54:	4c 91       	ld	r20, X
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	44 23       	and	r20, r20
     a5a:	dc f7       	brge	.-10     	; 0xa52 <PortEx_OUTCLR+0x7e>
		SPIBuffer[12] = SPIC.DATA;
     a5c:	13 96       	adiw	r26, 0x03	; 3
     a5e:	4c 91       	ld	r20, X
     a60:	13 97       	sbiw	r26, 0x03	; 3
     a62:	48 83       	st	Y, r20
     a64:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     a66:	83 30       	cpi	r24, 0x03	; 3
     a68:	91 05       	cpc	r25, r1
     a6a:	61 f7       	brne	.-40     	; 0xa44 <PortEx_OUTCLR+0x70>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	portExCS(FALSE);
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 ab 03 	call	0x756	; 0x756 <portExCS>
	SPIDisable();
     a78:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <PortEx_OUTSET>:
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	c8 2f       	mov	r28, r24
     a88:	d6 2f       	mov	r29, r22
	SPIInit(PS_SPI_MODE);
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	portExCS(TRUE);
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 ab 03 	call	0x756	; 0x756 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
     a9c:	dd 23       	and	r29, r29
     a9e:	81 f0       	breq	.+32     	; 0xac0 <PortEx_OUTSET+0x3e>
     aa0:	80 91 59 40 	lds	r24, 0x4059
     aa4:	c8 2b       	or	r28, r24
     aa6:	c0 93 59 40 	sts	0x4059, r28
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
	
	SPIBuffer[0] = PS_WRITE;
     aaa:	80 e4       	ldi	r24, 0x40	; 64
     aac:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
     ab0:	84 e1       	ldi	r24, 0x14	; 20
     ab2:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = bankA_OUT;
     ab6:	80 91 59 40 	lds	r24, 0x4059
     aba:	80 93 61 50 	sts	0x5061, r24
     abe:	0f c0       	rjmp	.+30     	; 0xade <PortEx_OUTSET+0x5c>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
     ac0:	80 91 70 50 	lds	r24, 0x5070
     ac4:	c8 2b       	or	r28, r24
     ac6:	c0 93 70 50 	sts	0x5070, r28
	
	SPIBuffer[0] = PS_WRITE;
     aca:	80 e4       	ldi	r24, 0x40	; 64
     acc:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
		SPIBuffer[1]=PS_OLATA;
		SPIBuffer[2] = bankA_OUT;
	} else {
		SPIBuffer[1]=PS_OLATB;
     ad0:	85 e1       	ldi	r24, 0x15	; 21
     ad2:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = bankB_OUT; 
     ad6:	80 91 70 50 	lds	r24, 0x5070
     ada:	80 93 61 50 	sts	0x5061, r24
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     ae2:	2f e5       	ldi	r18, 0x5F	; 95
     ae4:	30 e5       	ldi	r19, 0x50	; 80
     ae6:	a0 ec       	ldi	r26, 0xC0	; 192
     ae8:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     aea:	cb e6       	ldi	r28, 0x6B	; 107
     aec:	d0 e5       	ldi	r29, 0x50	; 80
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     aee:	f9 01       	movw	r30, r18
     af0:	e8 0f       	add	r30, r24
     af2:	f9 1f       	adc	r31, r25
     af4:	40 81       	ld	r20, Z
     af6:	13 96       	adiw	r26, 0x03	; 3
     af8:	4c 93       	st	X, r20
     afa:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     afc:	12 96       	adiw	r26, 0x02	; 2
     afe:	4c 91       	ld	r20, X
     b00:	12 97       	sbiw	r26, 0x02	; 2
     b02:	44 23       	and	r20, r20
     b04:	dc f7       	brge	.-10     	; 0xafc <PortEx_OUTSET+0x7a>
		SPIBuffer[12] = SPIC.DATA;
     b06:	13 96       	adiw	r26, 0x03	; 3
     b08:	4c 91       	ld	r20, X
     b0a:	13 97       	sbiw	r26, 0x03	; 3
     b0c:	48 83       	st	Y, r20
     b0e:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     b10:	83 30       	cpi	r24, 0x03	; 3
     b12:	91 05       	cpc	r25, r1
     b14:	61 f7       	brne	.-40     	; 0xaee <PortEx_OUTSET+0x6c>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	portExCS(FALSE);
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 ab 03 	call	0x756	; 0x756 <portExCS>
	SPIDisable();
     b22:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <set_ampGain>:
 *	All selected op-amps will be set to the same gain value.
 *
 *	\param channel	channel for gain to be set
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 */
void set_ampGain(uint8_t channel, uint8_t gainExponent) {
     b2c:	cf 93       	push	r28
     b2e:	c6 2f       	mov	r28, r22
	// set chip select.  note: AD8231 CS is select on low
	PortEx_OUTCLR((1 << channel), PS_BANKA);
     b30:	21 e0       	ldi	r18, 0x01	; 1
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	a9 01       	movw	r20, r18
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <set_ampGain+0x10>
     b38:	44 0f       	add	r20, r20
     b3a:	55 1f       	adc	r21, r21
     b3c:	8a 95       	dec	r24
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <set_ampGain+0xc>
     b40:	ca 01       	movw	r24, r20
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PortEx_OUTCLR>
	//setPortEx(~(1 << channel), PS_BANKA);
	// set gain
	// set bit A0
	if(gainExponent & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
     b48:	c0 ff       	sbrs	r28, 0
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <set_ampGain+0x2a>
     b4c:	80 e4       	ldi	r24, 0x40	; 64
     b4e:	e0 e0       	ldi	r30, 0x00	; 0
     b50:	f6 e0       	ldi	r31, 0x06	; 6
     b52:	85 83       	std	Z+5, r24	; 0x05
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <set_ampGain+0x32>
	else {PORTA.OUTCLR = PIN6_bm;}
     b56:	80 e4       	ldi	r24, 0x40	; 64
     b58:	e0 e0       	ldi	r30, 0x00	; 0
     b5a:	f6 e0       	ldi	r31, 0x06	; 6
     b5c:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1
	if(gainExponent & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
     b5e:	c1 ff       	sbrs	r28, 1
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <set_ampGain+0x40>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	e0 e2       	ldi	r30, 0x20	; 32
     b66:	f6 e0       	ldi	r31, 0x06	; 6
     b68:	85 83       	std	Z+5, r24	; 0x05
     b6a:	04 c0       	rjmp	.+8      	; 0xb74 <set_ampGain+0x48>
	else {PORTB.OUTCLR = PIN1_bm;}
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	e0 e2       	ldi	r30, 0x20	; 32
     b70:	f6 e0       	ldi	r31, 0x06	; 6
     b72:	86 83       	std	Z+6, r24	; 0x06
	// set bit A2
	if(gainExponent & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
     b74:	c2 ff       	sbrs	r28, 2
     b76:	05 c0       	rjmp	.+10     	; 0xb82 <set_ampGain+0x56>
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	e0 e2       	ldi	r30, 0x20	; 32
     b7c:	f6 e0       	ldi	r31, 0x06	; 6
     b7e:	85 83       	std	Z+5, r24	; 0x05
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <set_ampGain+0x5e>
	else {PORTB.OUTCLR = PIN2_bm;}
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	e0 e2       	ldi	r30, 0x20	; 32
     b86:	f6 e0       	ldi	r31, 0x06	; 6
     b88:	86 83       	std	Z+6, r24	; 0x06
     b8a:	5a e0       	ldi	r21, 0x0A	; 10
     b8c:	5a 95       	dec	r21
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <set_ampGain+0x60>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <set_ampGain+0x66>

	_delay_us(1);

	PortEx_OUTSET(0xFF, PS_BANKA);	// write protect all AD8231 amps
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	0e 94 41 05 	call	0xa82	; 0xa82 <PortEx_OUTSET>
	//setPortEx(0xFF, PS_BANKA);

}
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <PortEx_DIRCLR>:
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	c8 2f       	mov	r28, r24
     ba4:	d6 2f       	mov	r29, r22
	SPIInit(PS_SPI_MODE);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	portExCS(TRUE);
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 ab 03 	call	0x756	; 0x756 <portExCS>
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
     bb8:	dd 23       	and	r29, r29
     bba:	89 f0       	breq	.+34     	; 0xbde <PortEx_DIRCLR+0x40>
     bbc:	80 91 6e 50 	lds	r24, 0x506E
     bc0:	80 95       	com	r24
     bc2:	c8 23       	and	r28, r24
     bc4:	c0 93 6e 50 	sts	0x506E, r28
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
	
	SPIBuffer[0] = PS_WRITE;
     bc8:	80 e4       	ldi	r24, 0x40	; 64
     bca:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
     bce:	10 92 60 50 	sts	0x5060, r1
		SPIBuffer[2] = ~bankA_DIR; 
     bd2:	80 91 6e 50 	lds	r24, 0x506E
     bd6:	80 95       	com	r24
     bd8:	80 93 61 50 	sts	0x5061, r24
     bdc:	11 c0       	rjmp	.+34     	; 0xc00 <PortEx_DIRCLR+0x62>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
     bde:	80 91 99 50 	lds	r24, 0x5099
     be2:	80 95       	com	r24
     be4:	c8 23       	and	r28, r24
     be6:	c0 93 99 50 	sts	0x5099, r28
	
	SPIBuffer[0] = PS_WRITE;
     bea:	80 e4       	ldi	r24, 0x40	; 64
     bec:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
		SPIBuffer[2] = ~bankA_DIR; 
	} else {
		SPIBuffer[1]=PS_IODIRB;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = ~bankB_DIR;
     bf6:	80 91 99 50 	lds	r24, 0x5099
     bfa:	80 95       	com	r24
     bfc:	80 93 61 50 	sts	0x5061, r24
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     c04:	2f e5       	ldi	r18, 0x5F	; 95
     c06:	30 e5       	ldi	r19, 0x50	; 80
     c08:	a0 ec       	ldi	r26, 0xC0	; 192
     c0a:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
     c0c:	cb e6       	ldi	r28, 0x6B	; 107
     c0e:	d0 e5       	ldi	r29, 0x50	; 80
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     c10:	f9 01       	movw	r30, r18
     c12:	e8 0f       	add	r30, r24
     c14:	f9 1f       	adc	r31, r25
     c16:	40 81       	ld	r20, Z
     c18:	13 96       	adiw	r26, 0x03	; 3
     c1a:	4c 93       	st	X, r20
     c1c:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     c1e:	12 96       	adiw	r26, 0x02	; 2
     c20:	4c 91       	ld	r20, X
     c22:	12 97       	sbiw	r26, 0x02	; 2
     c24:	44 23       	and	r20, r20
     c26:	dc f7       	brge	.-10     	; 0xc1e <PortEx_DIRCLR+0x80>
		SPIBuffer[12] = SPIC.DATA;
     c28:	13 96       	adiw	r26, 0x03	; 3
     c2a:	4c 91       	ld	r20, X
     c2c:	13 97       	sbiw	r26, 0x03	; 3
     c2e:	48 83       	st	Y, r20
     c30:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     c32:	83 30       	cpi	r24, 0x03	; 3
     c34:	91 05       	cpc	r25, r1
     c36:	61 f7       	brne	.-40     	; 0xc10 <PortEx_DIRCLR+0x72>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	portExCS(FALSE);
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0e 94 ab 03 	call	0x756	; 0x756 <portExCS>
	SPIDisable();
     c44:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <PortEx_DIRSET>:
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	c8 2f       	mov	r28, r24
     c54:	d6 2f       	mov	r29, r22
	SPIInit(PS_SPI_MODE);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	portExCS(TRUE);
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	0e 94 ab 03 	call	0x756	; 0x756 <portExCS>

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
     c68:	dd 23       	and	r29, r29
     c6a:	81 f0       	breq	.+32     	; 0xc8c <PortEx_DIRSET+0x3e>
     c6c:	80 91 6e 50 	lds	r24, 0x506E
     c70:	c8 2b       	or	r28, r24
     c72:	c0 93 6e 50 	sts	0x506E, r28
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
	
	SPIBuffer[0] = PS_WRITE;
     c76:	80 e4       	ldi	r24, 0x40	; 64
     c78:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
     c7c:	10 92 60 50 	sts	0x5060, r1
		SPIBuffer[2] = ~bankA_DIR; 
     c80:	80 91 6e 50 	lds	r24, 0x506E
     c84:	80 95       	com	r24
     c86:	80 93 61 50 	sts	0x5061, r24
     c8a:	10 c0       	rjmp	.+32     	; 0xcac <PortEx_DIRSET+0x5e>
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
     c8c:	80 91 99 50 	lds	r24, 0x5099
     c90:	c8 2b       	or	r28, r24
     c92:	c0 93 99 50 	sts	0x5099, r28
	
	SPIBuffer[0] = PS_WRITE;
     c96:	80 e4       	ldi	r24, 0x40	; 64
     c98:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
		SPIBuffer[1]=PS_IODIRA;
		SPIBuffer[2] = ~bankA_DIR; 
	} else {
		SPIBuffer[1]=PS_IODIRB;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = ~bankB_DIR;
     ca2:	80 91 99 50 	lds	r24, 0x5099
     ca6:	80 95       	com	r24
     ca8:	80 93 61 50 	sts	0x5061, r24
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     cb0:	2f e5       	ldi	r18, 0x5F	; 95
     cb2:	30 e5       	ldi	r19, 0x50	; 80
     cb4:	a0 ec       	ldi	r26, 0xC0	; 192
     cb6:	b8 e0       	ldi	r27, 0x08	; 8
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
     cb8:	cb e6       	ldi	r28, 0x6B	; 107
     cba:	d0 e5       	ldi	r29, 0x50	; 80
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     cbc:	f9 01       	movw	r30, r18
     cbe:	e8 0f       	add	r30, r24
     cc0:	f9 1f       	adc	r31, r25
     cc2:	40 81       	ld	r20, Z
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	4c 93       	st	X, r20
     cc8:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
     cca:	12 96       	adiw	r26, 0x02	; 2
     ccc:	4c 91       	ld	r20, X
     cce:	12 97       	sbiw	r26, 0x02	; 2
     cd0:	44 23       	and	r20, r20
     cd2:	dc f7       	brge	.-10     	; 0xcca <PortEx_DIRSET+0x7c>
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
     cd4:	13 96       	adiw	r26, 0x03	; 3
     cd6:	4c 91       	ld	r20, X
     cd8:	13 97       	sbiw	r26, 0x03	; 3
     cda:	48 83       	st	Y, r20
     cdc:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	91 05       	cpc	r25, r1
     ce2:	61 f7       	brne	.-40     	; 0xcbc <PortEx_DIRSET+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
	}

	portExCS(FALSE);
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 ab 03 	call	0x756	; 0x756 <portExCS>
	SPICS(FALSE);
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();
     cf0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>


}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <ADCPower>:
	portExCS(FALSE);	
	SPIDisable();
}
*/

void ADCPower(uint8_t on) {
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
	if (on) {
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <ADCPower+0xe>
     d06:	46 c0       	rjmp	.+140    	; 0xd94 <ADCPower+0x9a>
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
     d08:	00 e0       	ldi	r16, 0x00	; 0
     d0a:	16 e0       	ldi	r17, 0x06	; 6
     d0c:	8e ed       	ldi	r24, 0xDE	; 222
     d0e:	d8 01       	movw	r26, r16
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	8c 93       	st	X, r24
		PORTB.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     d14:	c0 e2       	ldi	r28, 0x20	; 32
     d16:	d6 e0       	ldi	r29, 0x06	; 6
     d18:	4e e0       	ldi	r20, 0x0E	; 14
     d1a:	49 83       	std	Y+1, r20	; 0x01
		PORTC.DIRSET = PIN0_bm | PIN1_bm;// VDCA and VDC-2 and MUX-SYNC1
     d1c:	e0 e4       	ldi	r30, 0x40	; 64
     d1e:	f6 e0       	ldi	r31, 0x06	; 6
     d20:	63 e0       	ldi	r22, 0x03	; 3
     d22:	61 83       	std	Z+1, r22	; 0x01
		PORTE.DIRSET = PIN4_bm; // MUX-SYNC2
     d24:	80 e8       	ldi	r24, 0x80	; 128
     d26:	96 e0       	ldi	r25, 0x06	; 6
     d28:	50 e1       	ldi	r21, 0x10	; 16
     d2a:	dc 01       	movw	r26, r24
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	5c 93       	st	X, r21
		PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; // DAC LDAC and CS
     d30:	20 ea       	ldi	r18, 0xA0	; 160
     d32:	36 e0       	ldi	r19, 0x06	; 6
     d34:	d9 01       	movw	r26, r18
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	4c 93       	st	X, r20

		// high signal to write protect
		PORTA.OUTSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm;; // portEx-CS
     d3a:	7e e9       	ldi	r23, 0x9E	; 158
     d3c:	d8 01       	movw	r26, r16
     d3e:	15 96       	adiw	r26, 0x05	; 5
     d40:	7c 93       	st	X, r23
		PORTB.OUTSET = PIN3_bm; // FRAM-CS
     d42:	78 e0       	ldi	r23, 0x08	; 8
     d44:	7d 83       	std	Y+5, r23	; 0x05
		PORTC.OUTSET = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     d46:	65 83       	std	Z+5, r22	; 0x05
		PORTE.OUTSET = PIN4_bm; // MUX-SYNC2
     d48:	ec 01       	movw	r28, r24
     d4a:	5d 83       	std	Y+5, r21	; 0x05
		PORTF.OUTSET = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     d4c:	d9 01       	movw	r26, r18
     d4e:	15 96       	adiw	r26, 0x05	; 5
     d50:	4c 93       	st	X, r20
		channelStatus = 0x00; // POR to zeros
     d52:	10 92 6f 50 	sts	0x506F, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	93 ec       	ldi	r25, 0xC3	; 195
     d5a:	a9 e0       	ldi	r26, 0x09	; 9
     d5c:	81 50       	subi	r24, 0x01	; 1
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	a0 40       	sbci	r26, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <ADCPower+0x62>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <ADCPower+0x6c>
     d66:	00 00       	nop
		_delay_ms(100);

		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     d68:	80 e4       	ldi	r24, 0x40	; 64
     d6a:	82 83       	std	Z+2, r24	; 0x02
				
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     d6c:	10 92 70 50 	sts	0x5070, r1
     d70:	10 92 99 50 	sts	0x5099, r1
     d74:	10 92 59 40 	sts	0x4059, r1
     d78:	10 92 6e 50 	sts	0x506E, r1
		PortEx_DIRSET(0xFF, PS_BANKA);
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	0e 94 27 06 	call	0xc4e	; 0xc4e <PortEx_DIRSET>
		PortEx_OUTSET(0xFF, PS_BANKA);  //write protect IN-AMP 1 thru 8
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	0e 94 41 05 	call	0xa82	; 0xa82 <PortEx_OUTSET>
		//setPortEx(0xFF, PS_BANKA);
		set_filter(0xFF);  // set filters initially to ensure data out pulled high
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	0e 94 87 04 	call	0x90e	; 0x90e <set_filter>
     d92:	32 c0       	rjmp	.+100    	; 0xdf8 <ADCPower+0xfe>

	} else {
		// low signal for low power
		PORTA.OUTCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and A0
     d94:	00 e0       	ldi	r16, 0x00	; 0
     d96:	16 e0       	ldi	r17, 0x06	; 6
     d98:	7e ed       	ldi	r23, 0xDE	; 222
     d9a:	d8 01       	movw	r26, r16
     d9c:	16 96       	adiw	r26, 0x06	; 6
     d9e:	7c 93       	st	X, r23
		PORTB.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     da0:	a0 e2       	ldi	r26, 0x20	; 32
     da2:	b6 e0       	ldi	r27, 0x06	; 6
     da4:	4e e0       	ldi	r20, 0x0E	; 14
     da6:	16 96       	adiw	r26, 0x06	; 6
     da8:	4c 93       	st	X, r20
     daa:	16 97       	sbiw	r26, 0x06	; 6
		PORTC.OUTCLR = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     dac:	20 e4       	ldi	r18, 0x40	; 64
     dae:	36 e0       	ldi	r19, 0x06	; 6
     db0:	63 e0       	ldi	r22, 0x03	; 3
     db2:	e9 01       	movw	r28, r18
     db4:	6e 83       	std	Y+6, r22	; 0x06
		PORTE.OUTCLR = PIN4_bm; // MUX-SYNC2
     db6:	c0 e8       	ldi	r28, 0x80	; 128
     db8:	d6 e0       	ldi	r29, 0x06	; 6
     dba:	50 e1       	ldi	r21, 0x10	; 16
     dbc:	5e 83       	std	Y+6, r21	; 0x06
		PORTF.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     dbe:	80 ea       	ldi	r24, 0xA0	; 160
     dc0:	96 e0       	ldi	r25, 0x06	; 6
     dc2:	fc 01       	movw	r30, r24
     dc4:	46 83       	std	Z+6, r20	; 0x06


		PORTA.DIRCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm | PIN6_bm;
     dc6:	f8 01       	movw	r30, r16
     dc8:	72 83       	std	Z+2, r23	; 0x02
		PORTB.DIRCLR = PIN1_bm | PIN2_bm| PIN3_bm;
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	4c 93       	st	X, r20
		PORTC.DIRCLR = PIN0_bm | PIN1_bm;
     dce:	d9 01       	movw	r26, r18
     dd0:	12 96       	adiw	r26, 0x02	; 2
     dd2:	6c 93       	st	X, r22
     dd4:	12 97       	sbiw	r26, 0x02	; 2
		PORTE.DIRCLR = PIN4_bm;
     dd6:	5a 83       	std	Y+2, r21	; 0x02
		PORTF.DIRCLR = PIN1_bm | PIN2_bm | PIN3_bm;
     dd8:	ec 01       	movw	r28, r24
     dda:	4a 83       	std	Y+2, r20	; 0x02
		
		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     ddc:	80 e4       	ldi	r24, 0x40	; 64
     dde:	12 96       	adiw	r26, 0x02	; 2
     de0:	8c 93       	st	X, r24
     de2:	12 97       	sbiw	r26, 0x02	; 2
		
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     de4:	10 92 70 50 	sts	0x5070, r1
     de8:	10 92 99 50 	sts	0x5099, r1
     dec:	10 92 59 40 	sts	0x4059, r1
     df0:	10 92 6e 50 	sts	0x506E, r1
		channelStatus = 0x00;
     df4:	10 92 6f 50 	sts	0x506F, r1
		
	}
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <CO_collectTemp>:
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
     e02:	4f 92       	push	r4
     e04:	5f 92       	push	r5
     e06:	6f 92       	push	r6
     e08:	7f 92       	push	r7
     e0a:	8f 92       	push	r8
     e0c:	9f 92       	push	r9
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	2b 97       	sbiw	r28, 0x0b	; 11
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	8e 83       	std	Y+6, r24	; 0x06
     e2a:	9f 83       	std	Y+7, r25	; 0x07
     e2c:	68 87       	std	Y+8, r22	; 0x08
     e2e:	79 87       	std	Y+9, r23	; 0x09
     e30:	4a 87       	std	Y+10, r20	; 0x0a
     e32:	5b 87       	std	Y+11, r21	; 0x0b
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>

	/* Move stored calibration values to ADCA. */
	ADC_CalibrationValues_Load(&ADCA);
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 36 24 	call	0x486c	; 0x486c <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
     e42:	00 e0       	ldi	r16, 0x00	; 0
     e44:	12 e0       	ldi	r17, 0x02	; 2
     e46:	d8 01       	movw	r26, r16
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	8c 91       	ld	r24, X
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	89 7e       	andi	r24, 0xE9	; 233
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	8c 93       	st	X, r24
     e54:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV32_gc);
     e56:	14 96       	adiw	r26, 0x04	; 4
     e58:	8c 91       	ld	r24, X
     e5a:	14 97       	sbiw	r26, 0x04	; 4
     e5c:	88 7f       	andi	r24, 0xF8	; 248
     e5e:	83 60       	ori	r24, 0x03	; 3
     e60:	14 96       	adiw	r26, 0x04	; 4
     e62:	8c 93       	st	X, r24
     e64:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCA to be 1.0 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_INT1V_gc); 
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	8c 91       	ld	r24, X
     e6a:	12 97       	sbiw	r26, 0x02	; 2
     e6c:	8f 7c       	andi	r24, 0xCF	; 207
     e6e:	12 96       	adiw	r26, 0x02	; 2
     e70:	8c 93       	st	X, r24
     e72:	12 97       	sbiw	r26, 0x02	; 2

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     e74:	0f 2e       	mov	r0, r31
     e76:	f0 e2       	ldi	r31, 0x20	; 32
     e78:	ef 2e       	mov	r14, r31
     e7a:	f2 e0       	ldi	r31, 0x02	; 2
     e7c:	ff 2e       	mov	r15, r31
     e7e:	f0 2d       	mov	r31, r0
     e80:	f7 01       	movw	r30, r14
     e82:	80 81       	ld	r24, Z
     e84:	80 7e       	andi	r24, 0xE0	; 224
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	/* Get offset value for ADCA. */
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
     e8a:	89 e0       	ldi	r24, 0x09	; 9
     e8c:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
     e8e:	8c 91       	ld	r24, X
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	8c 93       	st	X, r24
	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 bb 23 	call	0x4776	; 0x4776 <ADC_Wait_32MHz>
 	offset = ADC_Offset_Get_Unsigned(&ADCA, &ADCA.CH0, false);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	60 e2       	ldi	r22, 0x20	; 32
     ea2:	72 e0       	ldi	r23, 0x02	; 2
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	0e 94 c5 23 	call	0x478a	; 0x478a <ADC_Offset_Get_Unsigned>
     eaa:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCA);
     eac:	d8 01       	movw	r26, r16
     eae:	8c 91       	ld	r24, X
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	8c 93       	st	X, r24
    
	/* Set input to the channels in ADCA */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
     eb4:	f7 01       	movw	r30, r14
     eb6:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
     eb8:	13 96       	adiw	r26, 0x03	; 3
     eba:	8c 91       	ld	r24, X
     ebc:	13 97       	sbiw	r26, 0x03	; 3
     ebe:	8f 73       	andi	r24, 0x3F	; 63
     ec0:	13 96       	adiw	r26, 0x03	; 3
     ec2:	8c 93       	st	X, r24
     ec4:	13 97       	sbiw	r26, 0x03	; 3

	/* Enable ADC .*/
	ADC_Enable(&ADCA);
     ec6:	8c 91       	ld	r24, X
     ec8:	81 60       	ori	r24, 0x01	; 1
     eca:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	0e 94 bb 23 	call	0x4776	; 0x4776 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
     ed4:	d8 01       	movw	r26, r16
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	8c 91       	ld	r24, X
     eda:	11 97       	sbiw	r26, 0x01	; 1
     edc:	88 60       	ori	r24, 0x08	; 8
     ede:	11 96       	adiw	r26, 0x01	; 1
     ee0:	8c 93       	st	X, r24
     ee2:	ee 24       	eor	r14, r14
     ee4:	ff 24       	eor	r15, r15
     ee6:	68 94       	set
     ee8:	f2 f8       	bld	r15, 2
void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
     eea:	44 24       	eor	r4, r4
     eec:	55 24       	eor	r5, r5
     eee:	32 01       	movw	r6, r4

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e1       	ldi	r19, 0x10	; 16
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	2a 83       	std	Y+2, r18	; 0x02
     efa:	3b 83       	std	Y+3, r19	; 0x03
     efc:	4c 83       	std	Y+4, r20	; 0x04
     efe:	5d 83       	std	Y+5, r21	; 0x05
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
     f00:	88 24       	eor	r8, r8
     f02:	99 24       	eor	r9, r9
     f04:	54 01       	movw	r10, r8
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
     f06:	00 e2       	ldi	r16, 0x20	; 32
     f08:	12 e0       	ldi	r17, 0x02	; 2
     f0a:	d8 01       	movw	r26, r16
     f0c:	13 96       	adiw	r26, 0x03	; 3
     f0e:	8c 91       	ld	r24, X
     f10:	13 97       	sbiw	r26, 0x03	; 3
     f12:	80 ff       	sbrs	r24, 0
     f14:	fa cf       	rjmp	.-12     	; 0xf0a <CO_collectTemp+0x108>
		tempResult = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
     f16:	69 81       	ldd	r22, Y+1	; 0x01
     f18:	c8 01       	movw	r24, r16
     f1a:	0e 94 97 23 	call	0x472e	; 0x472e <ADC_ResultCh_GetWord_Signed>
		sum+=tempResult;
     f1e:	a0 e0       	ldi	r26, 0x00	; 0
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	88 0e       	add	r8, r24
     f24:	99 1e       	adc	r9, r25
     f26:	aa 1e       	adc	r10, r26
     f28:	bb 1e       	adc	r11, r27
     f2a:	48 16       	cp	r4, r24
     f2c:	59 06       	cpc	r5, r25
     f2e:	6a 06       	cpc	r6, r26
     f30:	7b 06       	cpc	r7, r27
     f32:	10 f4       	brcc	.+4      	; 0xf38 <CO_collectTemp+0x136>
     f34:	2c 01       	movw	r4, r24
     f36:	3d 01       	movw	r6, r26
     f38:	2a 81       	ldd	r18, Y+2	; 0x02
     f3a:	3b 81       	ldd	r19, Y+3	; 0x03
     f3c:	4c 81       	ldd	r20, Y+4	; 0x04
     f3e:	5d 81       	ldd	r21, Y+5	; 0x05
     f40:	82 17       	cp	r24, r18
     f42:	93 07       	cpc	r25, r19
     f44:	a4 07       	cpc	r26, r20
     f46:	b5 07       	cpc	r27, r21
     f48:	20 f4       	brcc	.+8      	; 0xf52 <CO_collectTemp+0x150>
     f4a:	8a 83       	std	Y+2, r24	; 0x02
     f4c:	9b 83       	std	Y+3, r25	; 0x03
     f4e:	ac 83       	std	Y+4, r26	; 0x04
     f50:	bd 83       	std	Y+5, r27	; 0x05
     f52:	08 94       	sec
     f54:	e1 08       	sbc	r14, r1
     f56:	f1 08       	sbc	r15, r1

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);

	/* Sample onboard ADC.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
     f58:	e1 14       	cp	r14, r1
     f5a:	f1 04       	cpc	r15, r1
     f5c:	b1 f6       	brne	.-84     	; 0xf0a <CO_collectTemp+0x108>
		if (min > tempResult) { min = tempResult;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCA);
     f5e:	e0 e0       	ldi	r30, 0x00	; 0
     f60:	f2 e0       	ldi	r31, 0x02	; 2
     f62:	81 81       	ldd	r24, Z+1	; 0x01
     f64:	87 7f       	andi	r24, 0xF7	; 247
     f66:	81 83       	std	Z+1, r24	; 0x01
	ADC_Pipeline_Flush(&ADCA);
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	80 83       	st	Z, r24
	ADC_Disable(&ADCA);
     f6e:	80 81       	ld	r24, Z
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	80 83       	st	Z, r24

	ADCPower(FALSE);
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>

	average = sum / NUM_SAMPLES;
     f7a:	c5 01       	movw	r24, r10
     f7c:	b4 01       	movw	r22, r8
     f7e:	05 2e       	mov	r0, r21
     f80:	5a e0       	ldi	r21, 0x0A	; 10
     f82:	96 95       	lsr	r25
     f84:	87 95       	ror	r24
     f86:	77 95       	ror	r23
     f88:	67 95       	ror	r22
     f8a:	5a 95       	dec	r21
     f8c:	d1 f7       	brne	.-12     	; 0xf82 <CO_collectTemp+0x180>
     f8e:	50 2d       	mov	r21, r0

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
     f90:	28 ee       	ldi	r18, 0xE8	; 232
     f92:	33 e0       	ldi	r19, 0x03	; 3
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
     f9c:	0f 2e       	mov	r0, r31
     f9e:	ff ef       	ldi	r31, 0xFF	; 255
     fa0:	8f 2e       	mov	r8, r31
     fa2:	ff e0       	ldi	r31, 0x0F	; 15
     fa4:	9f 2e       	mov	r9, r31
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	af 2e       	mov	r10, r31
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	bf 2e       	mov	r11, r31
     fae:	f0 2d       	mov	r31, r0
     fb0:	a5 01       	movw	r20, r10
     fb2:	94 01       	movw	r18, r8
     fb4:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
     fb8:	c9 01       	movw	r24, r18
     fba:	c2 97       	sbiw	r24, 0x32	; 50
     fbc:	ae 81       	ldd	r26, Y+6	; 0x06
     fbe:	bf 81       	ldd	r27, Y+7	; 0x07
     fc0:	8d 93       	st	X+, r24
     fc2:	9c 93       	st	X, r25
	*maxV = (max * 1000 / 4095) - 50;
     fc4:	c3 01       	movw	r24, r6
     fc6:	b2 01       	movw	r22, r4
     fc8:	28 ee       	ldi	r18, 0xE8	; 232
     fca:	33 e0       	ldi	r19, 0x03	; 3
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
     fd4:	a5 01       	movw	r20, r10
     fd6:	94 01       	movw	r18, r8
     fd8:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
     fdc:	c9 01       	movw	r24, r18
     fde:	c2 97       	sbiw	r24, 0x32	; 50
     fe0:	ea 85       	ldd	r30, Y+10	; 0x0a
     fe2:	fb 85       	ldd	r31, Y+11	; 0x0b
     fe4:	80 83       	st	Z, r24
     fe6:	91 83       	std	Z+1, r25	; 0x01
	*minV = (min * 1000  / 4095) - 50;
     fe8:	6a 81       	ldd	r22, Y+2	; 0x02
     fea:	7b 81       	ldd	r23, Y+3	; 0x03
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	28 ee       	ldi	r18, 0xE8	; 232
     ff2:	33 e0       	ldi	r19, 0x03	; 3
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
     ffc:	a5 01       	movw	r20, r10
     ffe:	94 01       	movw	r18, r8
    1000:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    1004:	22 53       	subi	r18, 0x32	; 50
    1006:	30 40       	sbci	r19, 0x00	; 0
    1008:	a8 85       	ldd	r26, Y+8	; 0x08
    100a:	b9 85       	ldd	r27, Y+9	; 0x09
    100c:	2d 93       	st	X+, r18
    100e:	3c 93       	st	X, r19
    1010:	11 97       	sbiw	r26, 0x01	; 1
}
    1012:	2b 96       	adiw	r28, 0x0b	; 11
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	7f 90       	pop	r7
    102e:	6f 90       	pop	r6
    1030:	5f 90       	pop	r5
    1032:	4f 90       	pop	r4
    1034:	08 95       	ret

00001036 <CO_collectBatt>:


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    1036:	4f 92       	push	r4
    1038:	5f 92       	push	r5
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	2b 97       	sbiw	r28, 0x0b	; 11
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	8e 83       	std	Y+6, r24	; 0x06
    105e:	9f 83       	std	Y+7, r25	; 0x07
    1060:	68 87       	std	Y+8, r22	; 0x08
    1062:	79 87       	std	Y+9, r23	; 0x09
    1064:	4a 87       	std	Y+10, r20	; 0x0a
    1066:	5b 87       	std	Y+11, r21	; 0x0b
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	PortEx_DIRSET(BIT2_bm, PS_BANKB);
    106e:	84 e0       	ldi	r24, 0x04	; 4
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	0e 94 27 06 	call	0xc4e	; 0xc4e <PortEx_DIRSET>
	PortEx_OUTSET(BIT2_bm, PS_BANKB); // activate PIO24 (VBATT)
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	0e 94 41 05 	call	0xa82	; 0xa82 <PortEx_OUTSET>
    107e:	2f ef       	ldi	r18, 0xFF	; 255
    1080:	33 ec       	ldi	r19, 0xC3	; 195
    1082:	49 e0       	ldi	r20, 0x09	; 9
    1084:	21 50       	subi	r18, 0x01	; 1
    1086:	30 40       	sbci	r19, 0x00	; 0
    1088:	40 40       	sbci	r20, 0x00	; 0
    108a:	e1 f7       	brne	.-8      	; 0x1084 <CO_collectBatt+0x4e>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <CO_collectBatt+0x58>
    108e:	00 00       	nop
	_delay_ms(100);
	//setPortEx(BIT2_bm, PS_BANKB);
		
	/* Move stored calibration values to ADCB. */
	ADC_CalibrationValues_Load(&ADCB);
    1090:	80 e4       	ldi	r24, 0x40	; 64
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	0e 94 36 24 	call	0x486c	; 0x486c <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    1098:	00 e4       	ldi	r16, 0x40	; 64
    109a:	12 e0       	ldi	r17, 0x02	; 2
    109c:	d8 01       	movw	r26, r16
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	8c 91       	ld	r24, X
    10a2:	11 97       	sbiw	r26, 0x01	; 1
    10a4:	89 7e       	andi	r24, 0xE9	; 233
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	8c 93       	st	X, r24
    10aa:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV32_gc);
    10ac:	14 96       	adiw	r26, 0x04	; 4
    10ae:	8c 91       	ld	r24, X
    10b0:	14 97       	sbiw	r26, 0x04	; 4
    10b2:	88 7f       	andi	r24, 0xF8	; 248
    10b4:	83 60       	ori	r24, 0x03	; 3
    10b6:	14 96       	adiw	r26, 0x04	; 4
    10b8:	8c 93       	st	X, r24
    10ba:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCB to be 1.0 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_INT1V_gc); 
    10bc:	12 96       	adiw	r26, 0x02	; 2
    10be:	8c 91       	ld	r24, X
    10c0:	12 97       	sbiw	r26, 0x02	; 2
    10c2:	8f 7c       	andi	r24, 0xCF	; 207
    10c4:	12 96       	adiw	r26, 0x02	; 2
    10c6:	8c 93       	st	X, r24
    10c8:	12 97       	sbiw	r26, 0x02	; 2

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f0 e6       	ldi	r31, 0x60	; 96
    10ce:	ef 2e       	mov	r14, r31
    10d0:	f2 e0       	ldi	r31, 0x02	; 2
    10d2:	ff 2e       	mov	r15, r31
    10d4:	f0 2d       	mov	r31, r0
    10d6:	f7 01       	movw	r30, r14
    10d8:	80 81       	ld	r24, Z
    10da:	80 7e       	andi	r24, 0xE0	; 224
    10dc:	81 60       	ori	r24, 0x01	; 1
    10de:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	// Get offset value for ADCB.
   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    10e0:	89 e0       	ldi	r24, 0x09	; 9
    10e2:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
    10e4:	8c 91       	ld	r24, X
    10e6:	81 60       	ori	r24, 0x01	; 1
    10e8:	8c 93       	st	X, r24
	// Wait until common mode voltage is stable. Default clk is 16MHz
	ADC_Wait_32MHz(&ADCB);
    10ea:	80 e4       	ldi	r24, 0x40	; 64
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	0e 94 bb 23 	call	0x4776	; 0x4776 <ADC_Wait_32MHz>
	offset = ADC_Offset_Get_Unsigned(&ADCB, &ADCB.CH0, false);
    10f2:	80 e4       	ldi	r24, 0x40	; 64
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	60 e6       	ldi	r22, 0x60	; 96
    10f8:	72 e0       	ldi	r23, 0x02	; 2
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	0e 94 c5 23 	call	0x478a	; 0x478a <ADC_Offset_Get_Unsigned>
    1100:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCB);
    1102:	d8 01       	movw	r26, r16
    1104:	8c 91       	ld	r24, X
    1106:	8e 7f       	andi	r24, 0xFE	; 254
    1108:	8c 93       	st	X, r24
    
	/* Set input to the channels in ADC B */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    110a:	f7 01       	movw	r30, r14
    110c:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0_gc);
    110e:	13 96       	adiw	r26, 0x03	; 3
    1110:	8c 91       	ld	r24, X
    1112:	13 97       	sbiw	r26, 0x03	; 3
    1114:	8f 73       	andi	r24, 0x3F	; 63
    1116:	13 96       	adiw	r26, 0x03	; 3
    1118:	8c 93       	st	X, r24
    111a:	13 97       	sbiw	r26, 0x03	; 3

	/* Enable ADC .*/
	ADC_Enable(&ADCB);
    111c:	8c 91       	ld	r24, X
    111e:	81 60       	ori	r24, 0x01	; 1
    1120:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
    1122:	80 e4       	ldi	r24, 0x40	; 64
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 bb 23 	call	0x4776	; 0x4776 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);
    112a:	d8 01       	movw	r26, r16
    112c:	11 96       	adiw	r26, 0x01	; 1
    112e:	8c 91       	ld	r24, X
    1130:	11 97       	sbiw	r26, 0x01	; 1
    1132:	88 60       	ori	r24, 0x08	; 8
    1134:	11 96       	adiw	r26, 0x01	; 1
    1136:	8c 93       	st	X, r24
    1138:	ee 24       	eor	r14, r14
    113a:	ff 24       	eor	r15, r15
    113c:	68 94       	set
    113e:	f2 f8       	bld	r15, 2
void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    1140:	44 24       	eor	r4, r4
    1142:	55 24       	eor	r5, r5
    1144:	32 01       	movw	r6, r4

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e1       	ldi	r19, 0x10	; 16
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	2a 83       	std	Y+2, r18	; 0x02
    1150:	3b 83       	std	Y+3, r19	; 0x03
    1152:	4c 83       	std	Y+4, r20	; 0x04
    1154:	5d 83       	std	Y+5, r21	; 0x05
	*minV = (min * 1000  / 4095) - 50;
}


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
    1156:	88 24       	eor	r8, r8
    1158:	99 24       	eor	r9, r9
    115a:	54 01       	movw	r10, r8
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCB channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCB.CH0));
    115c:	00 e6       	ldi	r16, 0x60	; 96
    115e:	12 e0       	ldi	r17, 0x02	; 2
    1160:	d8 01       	movw	r26, r16
    1162:	13 96       	adiw	r26, 0x03	; 3
    1164:	8c 91       	ld	r24, X
    1166:	13 97       	sbiw	r26, 0x03	; 3
    1168:	80 ff       	sbrs	r24, 0
    116a:	fa cf       	rjmp	.-12     	; 0x1160 <CO_collectBatt+0x12a>
		tempResultB = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, offset);
    116c:	69 81       	ldd	r22, Y+1	; 0x01
    116e:	c8 01       	movw	r24, r16
    1170:	0e 94 97 23 	call	0x472e	; 0x472e <ADC_ResultCh_GetWord_Signed>
		sum+=tempResultB;
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	88 0e       	add	r8, r24
    117a:	99 1e       	adc	r9, r25
    117c:	aa 1e       	adc	r10, r26
    117e:	bb 1e       	adc	r11, r27
    1180:	48 16       	cp	r4, r24
    1182:	59 06       	cpc	r5, r25
    1184:	6a 06       	cpc	r6, r26
    1186:	7b 06       	cpc	r7, r27
    1188:	10 f4       	brcc	.+4      	; 0x118e <CO_collectBatt+0x158>
    118a:	2c 01       	movw	r4, r24
    118c:	3d 01       	movw	r6, r26
    118e:	2a 81       	ldd	r18, Y+2	; 0x02
    1190:	3b 81       	ldd	r19, Y+3	; 0x03
    1192:	4c 81       	ldd	r20, Y+4	; 0x04
    1194:	5d 81       	ldd	r21, Y+5	; 0x05
    1196:	82 17       	cp	r24, r18
    1198:	93 07       	cpc	r25, r19
    119a:	a4 07       	cpc	r26, r20
    119c:	b5 07       	cpc	r27, r21
    119e:	20 f4       	brcc	.+8      	; 0x11a8 <CO_collectBatt+0x172>
    11a0:	8a 83       	std	Y+2, r24	; 0x02
    11a2:	9b 83       	std	Y+3, r25	; 0x03
    11a4:	ac 83       	std	Y+4, r26	; 0x04
    11a6:	bd 83       	std	Y+5, r27	; 0x05
    11a8:	08 94       	sec
    11aa:	e1 08       	sbc	r14, r1
    11ac:	f1 08       	sbc	r15, r1

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);

	/* Store samples.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    11ae:	e1 14       	cp	r14, r1
    11b0:	f1 04       	cpc	r15, r1
    11b2:	b1 f6       	brne	.-84     	; 0x1160 <CO_collectBatt+0x12a>
		if (min > tempResultB) { min = tempResultB;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
    11b4:	e0 e4       	ldi	r30, 0x40	; 64
    11b6:	f2 e0       	ldi	r31, 0x02	; 2
    11b8:	81 81       	ldd	r24, Z+1	; 0x01
    11ba:	87 7f       	andi	r24, 0xF7	; 247
    11bc:	81 83       	std	Z+1, r24	; 0x01
	ADC_Disable(&ADCB);
    11be:	80 81       	ld	r24, Z
    11c0:	8e 7f       	andi	r24, 0xFE	; 254
    11c2:	80 83       	st	Z, r24

	average = sum / NUM_SAMPLES;
	
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
    11c4:	84 e0       	ldi	r24, 0x04	; 4
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PortEx_DIRCLR>
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
	ADC_Disable(&ADCB);

	average = sum / NUM_SAMPLES;
    11d2:	c5 01       	movw	r24, r10
    11d4:	b4 01       	movw	r22, r8
    11d6:	05 2e       	mov	r0, r21
    11d8:	5a e0       	ldi	r21, 0x0A	; 10
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	5a 95       	dec	r21
    11e4:	d1 f7       	brne	.-12     	; 0x11da <CO_collectBatt+0x1a4>
    11e6:	50 2d       	mov	r21, r0
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    11e8:	28 ee       	ldi	r18, 0xE8	; 232
    11ea:	33 e0       	ldi	r19, 0x03	; 3
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    11f4:	0f 2e       	mov	r0, r31
    11f6:	ff ef       	ldi	r31, 0xFF	; 255
    11f8:	8f 2e       	mov	r8, r31
    11fa:	ff e0       	ldi	r31, 0x0F	; 15
    11fc:	9f 2e       	mov	r9, r31
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	af 2e       	mov	r10, r31
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	bf 2e       	mov	r11, r31
    1206:	f0 2d       	mov	r31, r0
    1208:	a5 01       	movw	r20, r10
    120a:	94 01       	movw	r18, r8
    120c:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    1210:	c9 01       	movw	r24, r18
    1212:	c2 97       	sbiw	r24, 0x32	; 50
    1214:	ae 81       	ldd	r26, Y+6	; 0x06
    1216:	bf 81       	ldd	r27, Y+7	; 0x07
    1218:	8d 93       	st	X+, r24
    121a:	9c 93       	st	X, r25
	*maxV = (max * 1000 / 4095) - 50;
    121c:	c3 01       	movw	r24, r6
    121e:	b2 01       	movw	r22, r4
    1220:	28 ee       	ldi	r18, 0xE8	; 232
    1222:	33 e0       	ldi	r19, 0x03	; 3
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    122c:	a5 01       	movw	r20, r10
    122e:	94 01       	movw	r18, r8
    1230:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    1234:	c9 01       	movw	r24, r18
    1236:	c2 97       	sbiw	r24, 0x32	; 50
    1238:	ea 85       	ldd	r30, Y+10	; 0x0a
    123a:	fb 85       	ldd	r31, Y+11	; 0x0b
    123c:	80 83       	st	Z, r24
    123e:	91 83       	std	Z+1, r25	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    1240:	6a 81       	ldd	r22, Y+2	; 0x02
    1242:	7b 81       	ldd	r23, Y+3	; 0x03
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	9d 81       	ldd	r25, Y+5	; 0x05
    1248:	28 ee       	ldi	r18, 0xE8	; 232
    124a:	33 e0       	ldi	r19, 0x03	; 3
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    1254:	a5 01       	movw	r20, r10
    1256:	94 01       	movw	r18, r8
    1258:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    125c:	22 53       	subi	r18, 0x32	; 50
    125e:	30 40       	sbci	r19, 0x00	; 0
    1260:	a8 85       	ldd	r26, Y+8	; 0x08
    1262:	b9 85       	ldd	r27, Y+9	; 0x09
    1264:	2d 93       	st	X+, r18
    1266:	3c 93       	st	X, r19
    1268:	11 97       	sbiw	r26, 0x01	; 1
}
    126a:	2b 96       	adiw	r28, 0x0b	; 11
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	bf 90       	pop	r11
    127e:	af 90       	pop	r10
    1280:	9f 90       	pop	r9
    1282:	8f 90       	pop	r8
    1284:	7f 90       	pop	r7
    1286:	6f 90       	pop	r6
    1288:	5f 90       	pop	r5
    128a:	4f 90       	pop	r4
    128c:	08 95       	ret

0000128e <__vector_104>:
	*maxV = (int32_t) -(max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
	*minV = (int32_t) -(min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);

}

ISR(PORTF_INT0_vect) {
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	0b b6       	in	r0, 0x3b	; 59
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	2f 93       	push	r18
    129e:	3f 93       	push	r19
    12a0:	4f 93       	push	r20
    12a2:	5f 93       	push	r21
    12a4:	6f 93       	push	r22
    12a6:	7f 93       	push	r23
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	ef 93       	push	r30
    12b2:	ff 93       	push	r31
	// skip first samples because cannot perform recommended reset
	if (discardCount < ADC_DISCARD) {
    12b4:	80 91 5c 40 	lds	r24, 0x405C
    12b8:	88 23       	and	r24, r24
    12ba:	34 f0       	brlt	.+12     	; 0x12c8 <__vector_104+0x3a>
		discardCount++;
    12bc:	80 91 5c 40 	lds	r24, 0x405C
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	80 93 5c 40 	sts	0x405C, r24
    12c6:	6e c0       	rjmp	.+220    	; 0x13a4 <__vector_104+0x116>
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	e0 ea       	ldi	r30, 0xA0	; 160
    12d2:	f6 e0       	ldi	r31, 0x06	; 6
    12d4:	86 83       	std	Z+6, r24	; 0x06
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    12da:	e0 ec       	ldi	r30, 0xC0	; 192
    12dc:	f8 e0       	ldi	r31, 0x08	; 8
    12de:	5a ea       	ldi	r21, 0xAA	; 170
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
    12e0:	2f e5       	ldi	r18, 0x5F	; 95
    12e2:	30 e5       	ldi	r19, 0x50	; 80
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    12e4:	53 83       	std	Z+3, r21	; 0x03
			while(!(SPIC.STATUS & SPI_IF_bm));
    12e6:	42 81       	ldd	r20, Z+2	; 0x02
    12e8:	44 23       	and	r20, r20
    12ea:	ec f7       	brge	.-6      	; 0x12e6 <__vector_104+0x58>
			SPIBuffer[bufIndex] = SPIC.DATA;
    12ec:	43 81       	ldd	r20, Z+3	; 0x03
    12ee:	d9 01       	movw	r26, r18
    12f0:	a8 0f       	add	r26, r24
    12f2:	b9 1f       	adc	r27, r25
    12f4:	4c 93       	st	X, r20
    12f6:	01 96       	adiw	r24, 0x01	; 1
		discardCount++;
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	91 05       	cpc	r25, r1
    12fc:	99 f7       	brne	.-26     	; 0x12e4 <__vector_104+0x56>
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	e0 ea       	ldi	r30, 0xA0	; 160
    1302:	f6 e0       	ldi	r31, 0x06	; 6
    1304:	85 83       	std	Z+5, r24	; 0x05
		SPICS(FALSE);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>

		// create 32 bits from SPIBuffer[0:2] with sign extension of SPIBuffer[0][7]
		if(SPIBuffer[0] & BIT7_bm) *(((uint8_t*)&data24Bit[sampleCount]) + 3) = 0xFF; // sign extension if negative
    130c:	80 91 5f 50 	lds	r24, 0x505F
    1310:	88 23       	and	r24, r24
    1312:	6c f4       	brge	.+26     	; 0x132e <__vector_104+0xa0>
    1314:	e0 91 6c 50 	lds	r30, 0x506C
    1318:	f0 91 6d 50 	lds	r31, 0x506D
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	e0 5a       	subi	r30, 0xA0	; 160
    1326:	ff 4b       	sbci	r31, 0xBF	; 191
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	80 83       	st	Z, r24
    132c:	0b c0       	rjmp	.+22     	; 0x1344 <__vector_104+0xb6>
		else *(((uint8_t*)&data24Bit[sampleCount]) + 3) = 0x00;
    132e:	e0 91 6c 50 	lds	r30, 0x506C
    1332:	f0 91 6d 50 	lds	r31, 0x506D
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	e0 5a       	subi	r30, 0xA0	; 160
    1340:	ff 4b       	sbci	r31, 0xBF	; 191
    1342:	10 82       	st	Z, r1
	
		*(((uint8_t*)&data24Bit[sampleCount]) + 2) = SPIBuffer[0];
    1344:	e0 91 6c 50 	lds	r30, 0x506C
    1348:	f0 91 6d 50 	lds	r31, 0x506D
    134c:	80 91 5f 50 	lds	r24, 0x505F
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	e1 5a       	subi	r30, 0xA1	; 161
    135a:	ff 4b       	sbci	r31, 0xBF	; 191
    135c:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 1) = SPIBuffer[1];
    135e:	e0 91 6c 50 	lds	r30, 0x506C
    1362:	f0 91 6d 50 	lds	r31, 0x506D
    1366:	80 91 60 50 	lds	r24, 0x5060
    136a:	ee 0f       	add	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	e2 5a       	subi	r30, 0xA2	; 162
    1374:	ff 4b       	sbci	r31, 0xBF	; 191
    1376:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 0) = SPIBuffer[2];
    1378:	e0 91 6c 50 	lds	r30, 0x506C
    137c:	f0 91 6d 50 	lds	r31, 0x506D
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	e3 5a       	subi	r30, 0xA3	; 163
    138a:	ff 4b       	sbci	r31, 0xBF	; 191
    138c:	80 91 61 50 	lds	r24, 0x5061
    1390:	80 83       	st	Z, r24

		sampleCount++;
    1392:	80 91 6c 50 	lds	r24, 0x506C
    1396:	90 91 6d 50 	lds	r25, 0x506D
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	80 93 6c 50 	sts	0x506C, r24
    13a0:	90 93 6d 50 	sts	0x506D, r25
	}
}
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	0f 90       	pop	r0
    13be:	0b be       	out	0x3b, r0	; 59
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <ACC_DCPassEnable>:

// Enable DC Pass for acc
// Pull PIO27 high to enable
void ACC_DCPassEnable(uint8_t enable) {
	if (enable) {
    13ca:	88 23       	and	r24, r24
    13cc:	49 f0       	breq	.+18     	; 0x13e0 <ACC_DCPassEnable+0x16>
		PortEx_DIRSET(BIT5_bm, PS_BANKB);
    13ce:	80 e2       	ldi	r24, 0x20	; 32
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	0e 94 27 06 	call	0xc4e	; 0xc4e <PortEx_DIRSET>
		PortEx_OUTSET(BIT5_bm, PS_BANKB);
    13d6:	80 e2       	ldi	r24, 0x20	; 32
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	0e 94 41 05 	call	0xa82	; 0xa82 <PortEx_OUTSET>
    13de:	08 95       	ret
		//setPortEx(BIT5_bm, PS_BANKB);
	} else {
		PortEx_DIRCLR(BIT5_bm, PS_BANKB);
    13e0:	80 e2       	ldi	r24, 0x20	; 32
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PortEx_DIRCLR>
    13e8:	08 95       	ret

000013ea <CO_collectADC>:
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {
    13ea:	2f 92       	push	r2
    13ec:	3f 92       	push	r3
    13ee:	4f 92       	push	r4
    13f0:	5f 92       	push	r5
    13f2:	6f 92       	push	r6
    13f4:	7f 92       	push	r7
    13f6:	8f 92       	push	r8
    13f8:	9f 92       	push	r9
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	62 97       	sbiw	r28, 0x12	; 18
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	f8 2e       	mov	r15, r24
    141a:	d6 2e       	mov	r13, r22
    141c:	4b 87       	std	Y+11, r20	; 0x0b
    141e:	5c 87       	std	Y+12, r21	; 0x0c
    1420:	2d 87       	std	Y+13, r18	; 0x0d
    1422:	3e 87       	std	Y+14, r19	; 0x0e
    1424:	0f 87       	std	Y+15, r16	; 0x0f
    1426:	18 8b       	std	Y+16, r17	; 0x10
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
	uint16_t period;
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gainExponent);
    142e:	8f 2d       	mov	r24, r15
    1430:	6e 2d       	mov	r22, r14
    1432:	0e 94 96 05 	call	0xb2c	; 0xb2c <set_ampGain>
	set_filter(filterConfig);
    1436:	8d 2d       	mov	r24, r13
    1438:	0e 94 87 04 	call	0x90e	; 0x90e <set_filter>

	// if acc channel then enable DC Pass 
	// it is assumed that if not using high frequency acc specific function then 
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
    143c:	8f 2d       	mov	r24, r15
    143e:	85 50       	subi	r24, 0x05	; 5
    1440:	83 30       	cpi	r24, 0x03	; 3
    1442:	18 f4       	brcc	.+6      	; 0x144a <CO_collectADC+0x60>
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	0e 94 e5 09 	call	0x13ca	; 0x13ca <ACC_DCPassEnable>

	enableADCMUX(TRUE);
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	0e 94 06 04 	call	0x80c	; 0x80c <enableADCMUX>
	setADCInput(channel);
    1450:	8f 2d       	mov	r24, r15
    1452:	0e 94 2c 04 	call	0x858	; 0x858 <setADCInput>
	SPIInit(SPI_MODE_1_gc);
    1456:	84 e0       	ldi	r24, 0x04	; 4
    1458:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    145c:	84 e5       	ldi	r24, 0x54	; 84
    145e:	80 93 c0 08 	sts	0x08C0, r24
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.DIRCLR = PIN0_bm;
    1462:	e0 ea       	ldi	r30, 0xA0	; 160
    1464:	f6 e0       	ldi	r31, 0x06	; 6
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	82 83       	std	Z+2, r24	; 0x02
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    146a:	92 e0       	ldi	r25, 0x02	; 2
    146c:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.INT0MASK = PIN0_bm;
    146e:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_LO_gc;
    1470:	81 87       	std	Z+9, r24	; 0x09

	// Configure clock for AD7767 MCLK for desired sample frequency
	// f_samples = f_MCLK / 16
	// f_MCLK = f_peripheral(2^25Hz) / (f_period + 1Hz)
	// Set IO14 (PE5) to output
	PORTE.DIRSET = PIN5_bm;
    1472:	80 e2       	ldi	r24, 0x20	; 32
    1474:	e0 e8       	ldi	r30, 0x80	; 128
    1476:	f6 e0       	ldi	r31, 0x06	; 6
    1478:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    147a:	e0 e4       	ldi	r30, 0x40	; 64
    147c:	fa e0       	ldi	r31, 0x0A	; 10
    147e:	83 e2       	ldi	r24, 0x23	; 35
    1480:	81 83       	std	Z+1, r24	; 0x01
	// set period
	period = (1 << (21 - spsExponent)) - 1;
    1482:	85 e1       	ldi	r24, 0x15	; 21
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9c 01       	movw	r18, r24
    1488:	2c 19       	sub	r18, r12
    148a:	31 09       	sbc	r19, r1
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <CO_collectADC+0xac>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	2a 95       	dec	r18
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <CO_collectADC+0xa8>
    149a:	01 97       	sbiw	r24, 0x01	; 1
	TCE1.PER = period;
    149c:	86 a3       	lds	r24, 0x56
    149e:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = period / 2;
    14a0:	96 95       	lsr	r25
    14a2:	87 95       	ror	r24
    14a4:	82 af       	sts	0x72, r24
    14a6:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    14a8:	80 81       	ld	r24, Z
    14aa:	80 7f       	andi	r24, 0xF0	; 240
    14ac:	81 60       	ori	r24, 0x01	; 1
    14ae:	80 83       	st	Z, r24
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    14b0:	e0 ea       	ldi	r30, 0xA0	; 160
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	81 60       	ori	r24, 0x01	; 1
    14b8:	82 83       	std	Z+2, r24	; 0x02
	sei();
    14ba:	78 94       	sei

	sampleCount = 0;
    14bc:	10 92 6c 50 	sts	0x506C, r1
    14c0:	10 92 6d 50 	sts	0x506D, r1
	discardCount = 0;
    14c4:	10 92 5c 40 	sts	0x405C, r1
	
	// wait for ADC to collect samples
	while(sampleCount < NUM_SAMPLES);
    14c8:	80 91 6c 50 	lds	r24, 0x506C
    14cc:	90 91 6d 50 	lds	r25, 0x506D
    14d0:	24 e0       	ldi	r18, 0x04	; 4
    14d2:	80 30       	cpi	r24, 0x00	; 0
    14d4:	92 07       	cpc	r25, r18
    14d6:	c0 f3       	brcs	.-16     	; 0x14c8 <CO_collectADC+0xde>

	// turn off timer and interupts
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    14d8:	e0 e4       	ldi	r30, 0x40	; 64
    14da:	fa e0       	ldi	r31, 0x0A	; 10
    14dc:	80 81       	ld	r24, Z
    14de:	80 7f       	andi	r24, 0xF0	; 240
    14e0:	80 83       	st	Z, r24
	PMIC.CTRL &= ~PMIC_LOLVLEN_bm;	
    14e2:	e0 ea       	ldi	r30, 0xA0	; 160
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	82 81       	ldd	r24, Z+2	; 0x02
    14e8:	8e 7f       	andi	r24, 0xFE	; 254
    14ea:	82 83       	std	Z+2, r24	; 0x02
	cli();
    14ec:	f8 94       	cli

	SPIDisable();	
    14ee:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
	enableADCMUX(FALSE);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	0e 94 06 04 	call	0x80c	; 0x80c <enableADCMUX>
	ADCPower(FALSE);
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    14fe:	10 92 6c 50 	sts	0x506C, r1
    1502:	10 92 6d 50 	sts	0x506D, r1
    1506:	80 91 6c 50 	lds	r24, 0x506C
    150a:	90 91 6d 50 	lds	r25, 0x506D
    150e:	54 e0       	ldi	r21, 0x04	; 4
    1510:	80 30       	cpi	r24, 0x00	; 0
    1512:	95 07       	cpc	r25, r21
    1514:	08 f0       	brcs	.+2      	; 0x1518 <CO_collectADC+0x12e>
    1516:	55 c1       	rjmp	.+682    	; 0x17c2 <CO_collectADC+0x3d8>
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	6a 87       	std	Y+10, r22	; 0x0a
    151c:	1f 82       	std	Y+7, r1	; 0x07
    151e:	80 e8       	ldi	r24, 0x80	; 128
    1520:	88 87       	std	Y+8, r24	; 0x08
    1522:	9f ef       	ldi	r25, 0xFF	; 255
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	ef ef       	ldi	r30, 0xFF	; 255
    1528:	ea 83       	std	Y+2, r30	; 0x02
    152a:	33 24       	eor	r3, r3
    152c:	3a 94       	dec	r3
    152e:	55 24       	eor	r5, r5
    1530:	5a 94       	dec	r5
    1532:	77 24       	eor	r7, r7
    1534:	7a 94       	dec	r7
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
    1536:	ff ef       	ldi	r31, 0xFF	; 255
    1538:	f9 87       	std	Y+9, r31	; 0x09
    153a:	2f ef       	ldi	r18, 0xFF	; 255
    153c:	2d 83       	std	Y+5, r18	; 0x05
    153e:	5f e7       	ldi	r21, 0x7F	; 127
    1540:	5e 83       	std	Y+6, r21	; 0x06
    1542:	1b 82       	std	Y+3, r1	; 0x03
    1544:	19 82       	std	Y+1, r1	; 0x01
    1546:	22 24       	eor	r2, r2
    1548:	44 24       	eor	r4, r4
    154a:	66 24       	eor	r6, r6
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
    154c:	e0 e0       	ldi	r30, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	00 e0       	ldi	r16, 0x00	; 0
    1556:	88 24       	eor	r8, r8
    1558:	ff 24       	eor	r15, r15
    155a:	99 24       	eor	r9, r9
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
		sum += data24Bit[sampleCount];
    155c:	0f 2e       	mov	r0, r31
    155e:	fd e5       	ldi	r31, 0x5D	; 93
    1560:	af 2e       	mov	r10, r31
    1562:	f0 e4       	ldi	r31, 0x40	; 64
    1564:	bf 2e       	mov	r11, r31
    1566:	f0 2d       	mov	r31, r0
    1568:	e9 8b       	std	Y+17, r30	; 0x11
    156a:	4a 8b       	std	Y+18, r20	; 0x12
    156c:	e0 91 6c 50 	lds	r30, 0x506C
    1570:	f0 91 6d 50 	lds	r31, 0x506D
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	ea 0d       	add	r30, r10
    157e:	fb 1d       	adc	r31, r11
    1580:	40 81       	ld	r20, Z
    1582:	51 81       	ldd	r21, Z+1	; 0x01
    1584:	62 81       	ldd	r22, Z+2	; 0x02
    1586:	73 81       	ldd	r23, Z+3	; 0x03
    1588:	c5 2e       	mov	r12, r21
    158a:	d6 2e       	mov	r13, r22
    158c:	e7 2e       	mov	r14, r23
    158e:	db 01       	movw	r26, r22
    1590:	ca 01       	movw	r24, r20
    1592:	bb 0f       	add	r27, r27
    1594:	88 0b       	sbc	r24, r24
    1596:	98 2f       	mov	r25, r24
    1598:	dc 01       	movw	r26, r24
    159a:	f8 2f       	mov	r31, r24
    159c:	e8 2f       	mov	r30, r24
    159e:	28 2f       	mov	r18, r24
    15a0:	99 89       	ldd	r25, Y+17	; 0x11
    15a2:	49 0f       	add	r20, r25
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	59 89       	ldd	r21, Y+17	; 0x11
    15a8:	45 17       	cp	r20, r21
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <CO_collectADC+0x1c4>
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	c3 0e       	add	r12, r19
    15b0:	51 e0       	ldi	r21, 0x01	; 1
    15b2:	c3 16       	cp	r12, r19
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <CO_collectADC+0x1ce>
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	39 2f       	mov	r19, r25
    15ba:	3c 0d       	add	r19, r12
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	3c 15       	cp	r19, r12
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <CO_collectADC+0x1da>
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	59 2b       	or	r21, r25
    15c6:	6a 89       	ldd	r22, Y+18	; 0x12
    15c8:	d6 0e       	add	r13, r22
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	d6 16       	cp	r13, r22
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <CO_collectADC+0x1e8>
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	75 2f       	mov	r23, r21
    15d4:	7d 0d       	add	r23, r13
    15d6:	51 e0       	ldi	r21, 0x01	; 1
    15d8:	7d 15       	cp	r23, r13
    15da:	08 f0       	brcs	.+2      	; 0x15de <CO_collectADC+0x1f4>
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	95 2b       	or	r25, r21
    15e0:	e1 0e       	add	r14, r17
    15e2:	51 e0       	ldi	r21, 0x01	; 1
    15e4:	e1 16       	cp	r14, r17
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <CO_collectADC+0x200>
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	19 2f       	mov	r17, r25
    15ec:	1e 0d       	add	r17, r14
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	1e 15       	cp	r17, r14
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <CO_collectADC+0x20c>
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	59 2b       	or	r21, r25
    15f8:	f0 0f       	add	r31, r16
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	f0 17       	cp	r31, r16
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <CO_collectADC+0x218>
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	05 2f       	mov	r16, r21
    1604:	0f 0f       	add	r16, r31
    1606:	51 e0       	ldi	r21, 0x01	; 1
    1608:	0f 17       	cp	r16, r31
    160a:	08 f0       	brcs	.+2      	; 0x160e <CO_collectADC+0x224>
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	95 2b       	or	r25, r21
    1610:	e8 0d       	add	r30, r8
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	e8 15       	cp	r30, r8
    1616:	08 f0       	brcs	.+2      	; 0x161a <CO_collectADC+0x230>
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	89 2e       	mov	r8, r25
    161c:	8e 0e       	add	r8, r30
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	8e 16       	cp	r8, r30
    1622:	08 f0       	brcs	.+2      	; 0x1626 <CO_collectADC+0x23c>
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	69 2b       	or	r22, r25
    1628:	2f 0d       	add	r18, r15
    162a:	51 e0       	ldi	r21, 0x01	; 1
    162c:	2f 15       	cp	r18, r15
    162e:	08 f0       	brcs	.+2      	; 0x1632 <CO_collectADC+0x248>
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	f6 2e       	mov	r15, r22
    1634:	f2 0e       	add	r15, r18
    1636:	91 e0       	ldi	r25, 0x01	; 1
    1638:	f2 16       	cp	r15, r18
    163a:	08 f0       	brcs	.+2      	; 0x163e <CO_collectADC+0x254>
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	59 2b       	or	r21, r25
    1640:	98 0e       	add	r9, r24
    1642:	49 8b       	std	Y+17, r20	; 0x11
    1644:	7a 8b       	std	Y+18, r23	; 0x12
    1646:	95 0e       	add	r9, r21
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
    1648:	e0 91 6c 50 	lds	r30, 0x506C
    164c:	f0 91 6d 50 	lds	r31, 0x506D
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	ea 0d       	add	r30, r10
    165a:	fb 1d       	adc	r31, r11
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	a2 81       	ldd	r26, Z+2	; 0x02
    1662:	b3 81       	ldd	r27, Z+3	; 0x03
    1664:	68 2f       	mov	r22, r24
    1666:	49 2f       	mov	r20, r25
    1668:	5a 2f       	mov	r21, r26
    166a:	2b 2f       	mov	r18, r27
    166c:	bb 0f       	add	r27, r27
    166e:	88 0b       	sbc	r24, r24
    1670:	98 2f       	mov	r25, r24
    1672:	dc 01       	movw	r26, r24
    1674:	78 2f       	mov	r23, r24
    1676:	78 16       	cp	r7, r24
    1678:	0c f1       	brlt	.+66     	; 0x16bc <CO_collectADC+0x2d2>
    167a:	87 15       	cp	r24, r7
    167c:	c9 f5       	brne	.+114    	; 0x16f0 <CO_collectADC+0x306>
    167e:	58 16       	cp	r5, r24
    1680:	e8 f0       	brcs	.+58     	; 0x16bc <CO_collectADC+0x2d2>
    1682:	85 15       	cp	r24, r5
    1684:	a9 f5       	brne	.+106    	; 0x16f0 <CO_collectADC+0x306>
    1686:	38 16       	cp	r3, r24
    1688:	c8 f0       	brcs	.+50     	; 0x16bc <CO_collectADC+0x2d2>
    168a:	83 15       	cp	r24, r3
    168c:	89 f5       	brne	.+98     	; 0x16f0 <CO_collectADC+0x306>
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	87 17       	cp	r24, r23
    1692:	a0 f0       	brcs	.+40     	; 0x16bc <CO_collectADC+0x2d2>
    1694:	78 17       	cp	r23, r24
    1696:	61 f5       	brne	.+88     	; 0x16f0 <CO_collectADC+0x306>
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	92 17       	cp	r25, r18
    169c:	78 f0       	brcs	.+30     	; 0x16bc <CO_collectADC+0x2d2>
    169e:	29 17       	cp	r18, r25
    16a0:	39 f5       	brne	.+78     	; 0x16f0 <CO_collectADC+0x306>
    16a2:	e8 85       	ldd	r30, Y+8	; 0x08
    16a4:	e5 17       	cp	r30, r21
    16a6:	50 f0       	brcs	.+20     	; 0x16bc <CO_collectADC+0x2d2>
    16a8:	5e 17       	cp	r21, r30
    16aa:	11 f5       	brne	.+68     	; 0x16f0 <CO_collectADC+0x306>
    16ac:	ff 81       	ldd	r31, Y+7	; 0x07
    16ae:	f4 17       	cp	r31, r20
    16b0:	28 f0       	brcs	.+10     	; 0x16bc <CO_collectADC+0x2d2>
    16b2:	4f 17       	cp	r20, r31
    16b4:	e9 f4       	brne	.+58     	; 0x16f0 <CO_collectADC+0x306>
    16b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    16b8:	26 17       	cp	r18, r22
    16ba:	d0 f4       	brcc	.+52     	; 0x16f0 <CO_collectADC+0x306>
    16bc:	e0 91 6c 50 	lds	r30, 0x506C
    16c0:	f0 91 6d 50 	lds	r31, 0x506D
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	ea 0d       	add	r30, r10
    16ce:	fb 1d       	adc	r31, r11
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	a2 81       	ldd	r26, Z+2	; 0x02
    16d6:	b3 81       	ldd	r27, Z+3	; 0x03
    16d8:	8a 87       	std	Y+10, r24	; 0x0a
    16da:	9f 83       	std	Y+7, r25	; 0x07
    16dc:	a8 87       	std	Y+8, r26	; 0x08
    16de:	bc 83       	std	Y+4, r27	; 0x04
    16e0:	bb 0f       	add	r27, r27
    16e2:	88 0b       	sbc	r24, r24
    16e4:	98 2f       	mov	r25, r24
    16e6:	dc 01       	movw	r26, r24
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	38 2e       	mov	r3, r24
    16ec:	58 2e       	mov	r5, r24
    16ee:	78 2e       	mov	r7, r24
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
    16f0:	e0 91 6c 50 	lds	r30, 0x506C
    16f4:	f0 91 6d 50 	lds	r31, 0x506D
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	ee 0f       	add	r30, r30
    16fe:	ff 1f       	adc	r31, r31
    1700:	ea 0d       	add	r30, r10
    1702:	fb 1d       	adc	r31, r11
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	a2 81       	ldd	r26, Z+2	; 0x02
    170a:	b3 81       	ldd	r27, Z+3	; 0x03
    170c:	68 2f       	mov	r22, r24
    170e:	49 2f       	mov	r20, r25
    1710:	5a 2f       	mov	r21, r26
    1712:	2b 2f       	mov	r18, r27
    1714:	bb 0f       	add	r27, r27
    1716:	88 0b       	sbc	r24, r24
    1718:	98 2f       	mov	r25, r24
    171a:	dc 01       	movw	r26, r24
    171c:	78 2f       	mov	r23, r24
    171e:	86 15       	cp	r24, r6
    1720:	0c f1       	brlt	.+66     	; 0x1764 <CO_collectADC+0x37a>
    1722:	68 16       	cp	r6, r24
    1724:	c9 f5       	brne	.+114    	; 0x1798 <CO_collectADC+0x3ae>
    1726:	84 15       	cp	r24, r4
    1728:	e8 f0       	brcs	.+58     	; 0x1764 <CO_collectADC+0x37a>
    172a:	48 16       	cp	r4, r24
    172c:	a9 f5       	brne	.+106    	; 0x1798 <CO_collectADC+0x3ae>
    172e:	82 15       	cp	r24, r2
    1730:	c8 f0       	brcs	.+50     	; 0x1764 <CO_collectADC+0x37a>
    1732:	28 16       	cp	r2, r24
    1734:	89 f5       	brne	.+98     	; 0x1798 <CO_collectADC+0x3ae>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	78 17       	cp	r23, r24
    173a:	a0 f0       	brcs	.+40     	; 0x1764 <CO_collectADC+0x37a>
    173c:	87 17       	cp	r24, r23
    173e:	61 f5       	brne	.+88     	; 0x1798 <CO_collectADC+0x3ae>
    1740:	9b 81       	ldd	r25, Y+3	; 0x03
    1742:	29 17       	cp	r18, r25
    1744:	78 f0       	brcs	.+30     	; 0x1764 <CO_collectADC+0x37a>
    1746:	92 17       	cp	r25, r18
    1748:	39 f5       	brne	.+78     	; 0x1798 <CO_collectADC+0x3ae>
    174a:	ee 81       	ldd	r30, Y+6	; 0x06
    174c:	5e 17       	cp	r21, r30
    174e:	50 f0       	brcs	.+20     	; 0x1764 <CO_collectADC+0x37a>
    1750:	e5 17       	cp	r30, r21
    1752:	11 f5       	brne	.+68     	; 0x1798 <CO_collectADC+0x3ae>
    1754:	fd 81       	ldd	r31, Y+5	; 0x05
    1756:	4f 17       	cp	r20, r31
    1758:	28 f0       	brcs	.+10     	; 0x1764 <CO_collectADC+0x37a>
    175a:	f4 17       	cp	r31, r20
    175c:	e9 f4       	brne	.+58     	; 0x1798 <CO_collectADC+0x3ae>
    175e:	29 85       	ldd	r18, Y+9	; 0x09
    1760:	62 17       	cp	r22, r18
    1762:	d0 f4       	brcc	.+52     	; 0x1798 <CO_collectADC+0x3ae>
    1764:	e0 91 6c 50 	lds	r30, 0x506C
    1768:	f0 91 6d 50 	lds	r31, 0x506D
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	ea 0d       	add	r30, r10
    1776:	fb 1d       	adc	r31, r11
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	a2 81       	ldd	r26, Z+2	; 0x02
    177e:	b3 81       	ldd	r27, Z+3	; 0x03
    1780:	89 87       	std	Y+9, r24	; 0x09
    1782:	9d 83       	std	Y+5, r25	; 0x05
    1784:	ae 83       	std	Y+6, r26	; 0x06
    1786:	bb 83       	std	Y+3, r27	; 0x03
    1788:	bb 0f       	add	r27, r27
    178a:	88 0b       	sbc	r24, r24
    178c:	98 2f       	mov	r25, r24
    178e:	dc 01       	movw	r26, r24
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	28 2e       	mov	r2, r24
    1794:	48 2e       	mov	r4, r24
    1796:	68 2e       	mov	r6, r24
	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    1798:	80 91 6c 50 	lds	r24, 0x506C
    179c:	90 91 6d 50 	lds	r25, 0x506D
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	80 93 6c 50 	sts	0x506C, r24
    17a6:	90 93 6d 50 	sts	0x506D, r25
    17aa:	80 91 6c 50 	lds	r24, 0x506C
    17ae:	90 91 6d 50 	lds	r25, 0x506D
    17b2:	54 e0       	ldi	r21, 0x04	; 4
    17b4:	80 30       	cpi	r24, 0x00	; 0
    17b6:	95 07       	cpc	r25, r21
    17b8:	08 f4       	brcc	.+2      	; 0x17bc <CO_collectADC+0x3d2>
    17ba:	d8 ce       	rjmp	.-592    	; 0x156c <CO_collectADC+0x182>
    17bc:	e9 89       	ldd	r30, Y+17	; 0x11
    17be:	4a 89       	ldd	r20, Y+18	; 0x12
    17c0:	22 c0       	rjmp	.+68     	; 0x1806 <CO_collectADC+0x41c>
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	6a 87       	std	Y+10, r22	; 0x0a
    17c6:	1f 82       	std	Y+7, r1	; 0x07
    17c8:	80 e8       	ldi	r24, 0x80	; 128
    17ca:	88 87       	std	Y+8, r24	; 0x08
    17cc:	9f ef       	ldi	r25, 0xFF	; 255
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	ef ef       	ldi	r30, 0xFF	; 255
    17d2:	ea 83       	std	Y+2, r30	; 0x02
    17d4:	33 24       	eor	r3, r3
    17d6:	3a 94       	dec	r3
    17d8:	55 24       	eor	r5, r5
    17da:	5a 94       	dec	r5
    17dc:	77 24       	eor	r7, r7
    17de:	7a 94       	dec	r7
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
    17e0:	ff ef       	ldi	r31, 0xFF	; 255
    17e2:	f9 87       	std	Y+9, r31	; 0x09
    17e4:	2f ef       	ldi	r18, 0xFF	; 255
    17e6:	2d 83       	std	Y+5, r18	; 0x05
    17e8:	5f e7       	ldi	r21, 0x7F	; 127
    17ea:	5e 83       	std	Y+6, r21	; 0x06
    17ec:	1b 82       	std	Y+3, r1	; 0x03
    17ee:	19 82       	std	Y+1, r1	; 0x01
    17f0:	22 24       	eor	r2, r2
    17f2:	44 24       	eor	r4, r4
    17f4:	66 24       	eor	r6, r6
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
    17f6:	e0 e0       	ldi	r30, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	10 e0       	ldi	r17, 0x00	; 0
    17fe:	00 e0       	ldi	r16, 0x00	; 0
    1800:	88 24       	eor	r8, r8
    1802:	ff 24       	eor	r15, r15
    1804:	99 24       	eor	r9, r9
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
		sum += data24Bit[sampleCount];
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
	}
	average = sum / NUM_SAMPLES;
    1806:	2e 2f       	mov	r18, r30
    1808:	51 2f       	mov	r21, r17
    180a:	60 2f       	mov	r22, r16
    180c:	78 2d       	mov	r23, r8
    180e:	8f 2d       	mov	r24, r15
    1810:	99 2d       	mov	r25, r9
    1812:	99 20       	and	r9, r9
    1814:	0c f0       	brlt	.+2      	; 0x1818 <CO_collectADC+0x42e>
    1816:	42 c0       	rjmp	.+132    	; 0x189c <CO_collectADC+0x4b2>
    1818:	ae 2f       	mov	r26, r30
    181a:	a1 50       	subi	r26, 0x01	; 1
    181c:	f1 e0       	ldi	r31, 0x01	; 1
    181e:	ae 17       	cp	r26, r30
    1820:	08 f0       	brcs	.+2      	; 0x1824 <CO_collectADC+0x43a>
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	e3 2f       	mov	r30, r19
    1826:	ed 5f       	subi	r30, 0xFD	; 253
    1828:	21 e0       	ldi	r18, 0x01	; 1
    182a:	e3 17       	cp	r30, r19
    182c:	08 f0       	brcs	.+2      	; 0x1830 <CO_collectADC+0x446>
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	fe 0f       	add	r31, r30
    1832:	31 e0       	ldi	r19, 0x01	; 1
    1834:	fe 17       	cp	r31, r30
    1836:	08 f0       	brcs	.+2      	; 0x183a <CO_collectADC+0x450>
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	23 2b       	or	r18, r19
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	b2 2f       	mov	r27, r18
    1840:	b4 0f       	add	r27, r20
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	b4 17       	cp	r27, r20
    1846:	08 f0       	brcs	.+2      	; 0x184a <CO_collectADC+0x460>
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	32 2b       	or	r19, r18
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	13 2f       	mov	r17, r19
    1850:	15 0f       	add	r17, r21
    1852:	31 e0       	ldi	r19, 0x01	; 1
    1854:	15 17       	cp	r17, r21
    1856:	08 f0       	brcs	.+2      	; 0x185a <CO_collectADC+0x470>
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	23 2b       	or	r18, r19
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	02 2f       	mov	r16, r18
    1860:	06 0f       	add	r16, r22
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	06 17       	cp	r16, r22
    1866:	08 f0       	brcs	.+2      	; 0x186a <CO_collectADC+0x480>
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	32 2b       	or	r19, r18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	83 2e       	mov	r8, r19
    1870:	87 0e       	add	r8, r23
    1872:	31 e0       	ldi	r19, 0x01	; 1
    1874:	87 16       	cp	r8, r23
    1876:	08 f0       	brcs	.+2      	; 0x187a <CO_collectADC+0x490>
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	23 2b       	or	r18, r19
    187c:	f8 2e       	mov	r15, r24
    187e:	e0 e0       	ldi	r30, 0x00	; 0
    1880:	82 2f       	mov	r24, r18
    1882:	8f 0d       	add	r24, r15
    1884:	21 e0       	ldi	r18, 0x01	; 1
    1886:	8f 15       	cp	r24, r15
    1888:	08 f0       	brcs	.+2      	; 0x188c <CO_collectADC+0x4a2>
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	e2 2b       	or	r30, r18
    188e:	2a 2f       	mov	r18, r26
    1890:	3f 2f       	mov	r19, r31
    1892:	4b 2f       	mov	r20, r27
    1894:	51 2f       	mov	r21, r17
    1896:	60 2f       	mov	r22, r16
    1898:	78 2d       	mov	r23, r8
    189a:	9e 0f       	add	r25, r30
    189c:	0a e0       	ldi	r16, 0x0A	; 10
    189e:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__ashrdi3>

	//convert to uV
	*avgV = (int32_t) -(average * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    18a2:	0f 2e       	mov	r0, r31
    18a4:	f0 ea       	ldi	r31, 0xA0	; 160
    18a6:	af 2e       	mov	r10, r31
    18a8:	f0 2d       	mov	r31, r0
    18aa:	0f 2e       	mov	r0, r31
    18ac:	f5 e2       	ldi	r31, 0x25	; 37
    18ae:	bf 2e       	mov	r11, r31
    18b0:	f0 2d       	mov	r31, r0
    18b2:	0f 2e       	mov	r0, r31
    18b4:	f6 e2       	ldi	r31, 0x26	; 38
    18b6:	cf 2e       	mov	r12, r31
    18b8:	f0 2d       	mov	r31, r0
    18ba:	dd 24       	eor	r13, r13
    18bc:	ee 24       	eor	r14, r14
    18be:	ff 24       	eor	r15, r15
    18c0:	00 e0       	ldi	r16, 0x00	; 0
    18c2:	10 e0       	ldi	r17, 0x00	; 0
    18c4:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__muldi3>
    18c8:	aa 24       	eor	r10, r10
    18ca:	aa 94       	dec	r10
    18cc:	bb 24       	eor	r11, r11
    18ce:	ba 94       	dec	r11
    18d0:	0f 2e       	mov	r0, r31
    18d2:	ff e7       	ldi	r31, 0x7F	; 127
    18d4:	cf 2e       	mov	r12, r31
    18d6:	f0 2d       	mov	r31, r0
    18d8:	0e 94 5f 2c 	call	0x58be	; 0x58be <__divdi3>
    18dc:	01 e0       	ldi	r16, 0x01	; 1
    18de:	0e 94 83 2b 	call	0x5706	; 0x5706 <__ashldi3>
    18e2:	0f 2e       	mov	r0, r31
    18e4:	f3 e0       	ldi	r31, 0x03	; 3
    18e6:	af 2e       	mov	r10, r31
    18e8:	f0 2d       	mov	r31, r0
    18ea:	bb 24       	eor	r11, r11
    18ec:	cc 24       	eor	r12, r12
    18ee:	00 e0       	ldi	r16, 0x00	; 0
    18f0:	0e 94 5f 2c 	call	0x58be	; 0x58be <__divdi3>
    18f4:	82 2e       	mov	r8, r18
    18f6:	93 2e       	mov	r9, r19
    18f8:	a4 2e       	mov	r10, r20
    18fa:	b5 2e       	mov	r11, r21
    18fc:	b0 94       	com	r11
    18fe:	a0 94       	com	r10
    1900:	90 94       	com	r9
    1902:	80 94       	com	r8
    1904:	81 1c       	adc	r8, r1
    1906:	91 1c       	adc	r9, r1
    1908:	a1 1c       	adc	r10, r1
    190a:	b1 1c       	adc	r11, r1
    190c:	eb 85       	ldd	r30, Y+11	; 0x0b
    190e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1910:	80 82       	st	Z, r8
    1912:	91 82       	std	Z+1, r9	; 0x01
    1914:	a2 82       	std	Z+2, r10	; 0x02
    1916:	b3 82       	std	Z+3, r11	; 0x03
	*maxV = (int32_t) -(max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    1918:	2a 85       	ldd	r18, Y+10	; 0x0a
    191a:	3f 81       	ldd	r19, Y+7	; 0x07
    191c:	48 85       	ldd	r20, Y+8	; 0x08
    191e:	5c 81       	ldd	r21, Y+4	; 0x04
    1920:	6a 81       	ldd	r22, Y+2	; 0x02
    1922:	73 2d       	mov	r23, r3
    1924:	85 2d       	mov	r24, r5
    1926:	97 2d       	mov	r25, r7
    1928:	0f 2e       	mov	r0, r31
    192a:	f0 ea       	ldi	r31, 0xA0	; 160
    192c:	af 2e       	mov	r10, r31
    192e:	f0 2d       	mov	r31, r0
    1930:	0f 2e       	mov	r0, r31
    1932:	f5 e2       	ldi	r31, 0x25	; 37
    1934:	bf 2e       	mov	r11, r31
    1936:	f0 2d       	mov	r31, r0
    1938:	0f 2e       	mov	r0, r31
    193a:	f6 e2       	ldi	r31, 0x26	; 38
    193c:	cf 2e       	mov	r12, r31
    193e:	f0 2d       	mov	r31, r0
    1940:	dd 24       	eor	r13, r13
    1942:	ee 24       	eor	r14, r14
    1944:	ff 24       	eor	r15, r15
    1946:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__muldi3>
    194a:	aa 24       	eor	r10, r10
    194c:	aa 94       	dec	r10
    194e:	bb 24       	eor	r11, r11
    1950:	ba 94       	dec	r11
    1952:	0f 2e       	mov	r0, r31
    1954:	ff e7       	ldi	r31, 0x7F	; 127
    1956:	cf 2e       	mov	r12, r31
    1958:	f0 2d       	mov	r31, r0
    195a:	0e 94 5f 2c 	call	0x58be	; 0x58be <__divdi3>
    195e:	01 e0       	ldi	r16, 0x01	; 1
    1960:	0e 94 83 2b 	call	0x5706	; 0x5706 <__ashldi3>
    1964:	0f 2e       	mov	r0, r31
    1966:	f3 e0       	ldi	r31, 0x03	; 3
    1968:	af 2e       	mov	r10, r31
    196a:	f0 2d       	mov	r31, r0
    196c:	bb 24       	eor	r11, r11
    196e:	cc 24       	eor	r12, r12
    1970:	00 e0       	ldi	r16, 0x00	; 0
    1972:	0e 94 5f 2c 	call	0x58be	; 0x58be <__divdi3>
    1976:	82 2e       	mov	r8, r18
    1978:	93 2e       	mov	r9, r19
    197a:	a4 2e       	mov	r10, r20
    197c:	b5 2e       	mov	r11, r21
    197e:	b0 94       	com	r11
    1980:	a0 94       	com	r10
    1982:	90 94       	com	r9
    1984:	80 94       	com	r8
    1986:	81 1c       	adc	r8, r1
    1988:	91 1c       	adc	r9, r1
    198a:	a1 1c       	adc	r10, r1
    198c:	b1 1c       	adc	r11, r1
    198e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1990:	f8 89       	ldd	r31, Y+16	; 0x10
    1992:	80 82       	st	Z, r8
    1994:	91 82       	std	Z+1, r9	; 0x01
    1996:	a2 82       	std	Z+2, r10	; 0x02
    1998:	b3 82       	std	Z+3, r11	; 0x03
	*minV = (int32_t) -(min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    199a:	29 85       	ldd	r18, Y+9	; 0x09
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	4e 81       	ldd	r20, Y+6	; 0x06
    19a0:	5b 81       	ldd	r21, Y+3	; 0x03
    19a2:	69 81       	ldd	r22, Y+1	; 0x01
    19a4:	72 2d       	mov	r23, r2
    19a6:	84 2d       	mov	r24, r4
    19a8:	96 2d       	mov	r25, r6
    19aa:	0f 2e       	mov	r0, r31
    19ac:	f0 ea       	ldi	r31, 0xA0	; 160
    19ae:	af 2e       	mov	r10, r31
    19b0:	f0 2d       	mov	r31, r0
    19b2:	0f 2e       	mov	r0, r31
    19b4:	f5 e2       	ldi	r31, 0x25	; 37
    19b6:	bf 2e       	mov	r11, r31
    19b8:	f0 2d       	mov	r31, r0
    19ba:	0f 2e       	mov	r0, r31
    19bc:	f6 e2       	ldi	r31, 0x26	; 38
    19be:	cf 2e       	mov	r12, r31
    19c0:	f0 2d       	mov	r31, r0
    19c2:	dd 24       	eor	r13, r13
    19c4:	ee 24       	eor	r14, r14
    19c6:	ff 24       	eor	r15, r15
    19c8:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__muldi3>
    19cc:	aa 24       	eor	r10, r10
    19ce:	aa 94       	dec	r10
    19d0:	bb 24       	eor	r11, r11
    19d2:	ba 94       	dec	r11
    19d4:	0f 2e       	mov	r0, r31
    19d6:	ff e7       	ldi	r31, 0x7F	; 127
    19d8:	cf 2e       	mov	r12, r31
    19da:	f0 2d       	mov	r31, r0
    19dc:	0e 94 5f 2c 	call	0x58be	; 0x58be <__divdi3>
    19e0:	01 e0       	ldi	r16, 0x01	; 1
    19e2:	0e 94 83 2b 	call	0x5706	; 0x5706 <__ashldi3>
    19e6:	0f 2e       	mov	r0, r31
    19e8:	f3 e0       	ldi	r31, 0x03	; 3
    19ea:	af 2e       	mov	r10, r31
    19ec:	f0 2d       	mov	r31, r0
    19ee:	bb 24       	eor	r11, r11
    19f0:	cc 24       	eor	r12, r12
    19f2:	00 e0       	ldi	r16, 0x00	; 0
    19f4:	0e 94 5f 2c 	call	0x58be	; 0x58be <__divdi3>
    19f8:	82 2e       	mov	r8, r18
    19fa:	93 2e       	mov	r9, r19
    19fc:	a4 2e       	mov	r10, r20
    19fe:	b5 2e       	mov	r11, r21
    1a00:	b0 94       	com	r11
    1a02:	a0 94       	com	r10
    1a04:	90 94       	com	r9
    1a06:	80 94       	com	r8
    1a08:	81 1c       	adc	r8, r1
    1a0a:	91 1c       	adc	r9, r1
    1a0c:	a1 1c       	adc	r10, r1
    1a0e:	b1 1c       	adc	r11, r1
    1a10:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a12:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a14:	80 82       	st	Z, r8
    1a16:	91 82       	std	Z+1, r9	; 0x01
    1a18:	a2 82       	std	Z+2, r10	; 0x02
    1a1a:	b3 82       	std	Z+3, r11	; 0x03

}
    1a1c:	62 96       	adiw	r28, 0x12	; 18
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	bf 90       	pop	r11
    1a34:	af 90       	pop	r10
    1a36:	9f 90       	pop	r9
    1a38:	8f 90       	pop	r8
    1a3a:	7f 90       	pop	r7
    1a3c:	6f 90       	pop	r6
    1a3e:	5f 90       	pop	r5
    1a40:	4f 90       	pop	r4
    1a42:	3f 90       	pop	r3
    1a44:	2f 90       	pop	r2
    1a46:	08 95       	ret

00001a48 <CO_collectSeismic3Channel>:
	}
}

void CO_collectSeismic3Channel(uint8_t filterConfig, uint8_t gain[], uint8_t subsamplesPerSecond,
	uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
	uint16_t averagingPtC, uint16_t averagingPtD) {
    1a48:	4f 92       	push	r4
    1a4a:	5f 92       	push	r5
    1a4c:	6f 92       	push	r6
    1a4e:	7f 92       	push	r7
    1a50:	8f 92       	push	r8
    1a52:	9f 92       	push	r9
    1a54:	af 92       	push	r10
    1a56:	bf 92       	push	r11
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	18 2f       	mov	r17, r24
    1a6e:	3b 01       	movw	r6, r22
    1a70:	54 2e       	mov	r5, r20
    1a72:	42 2e       	mov	r4, r18
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	
	// Set gains, filters, and input channel	
	set_ampGain(ADC_CH_6_gc, gain[0]);
    1a7a:	85 e0       	ldi	r24, 0x05	; 5
    1a7c:	f3 01       	movw	r30, r6
    1a7e:	60 81       	ld	r22, Z
    1a80:	0e 94 96 05 	call	0xb2c	; 0xb2c <set_ampGain>
	set_ampGain(ADC_CH_7_gc, gain[1]);
    1a84:	86 e0       	ldi	r24, 0x06	; 6
    1a86:	f3 01       	movw	r30, r6
    1a88:	61 81       	ldd	r22, Z+1	; 0x01
    1a8a:	0e 94 96 05 	call	0xb2c	; 0xb2c <set_ampGain>
	set_ampGain(ADC_CH_8_gc, gain[2]);
    1a8e:	87 e0       	ldi	r24, 0x07	; 7
    1a90:	f3 01       	movw	r30, r6
    1a92:	62 81       	ldd	r22, Z+2	; 0x02
    1a94:	0e 94 96 05 	call	0xb2c	; 0xb2c <set_ampGain>
	set_filter(filterConfig);
    1a98:	81 2f       	mov	r24, r17
    1a9a:	0e 94 87 04 	call	0x90e	; 0x90e <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    1a9e:	80 2f       	mov	r24, r16
    1aa0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    1aa4:	84 e0       	ldi	r24, 0x04	; 4
    1aa6:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    1aaa:	84 e5       	ldi	r24, 0x54	; 84
    1aac:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	0e 94 06 04 	call	0x80c	; 0x80c <enableADCMUX>
	setADCInput(ADC_CH_6_gc);
    1ab6:	85 e0       	ldi	r24, 0x05	; 5
    1ab8:	0e 94 2c 04 	call	0x858	; 0x858 <setADCInput>
	

	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    1abc:	e0 ea       	ldi	r30, 0xA0	; 160
    1abe:	f6 e0       	ldi	r31, 0x06	; 6
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	92 83       	std	Z+2, r25	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    1ac8:	98 e7       	ldi	r25, 0x78	; 120
    1aca:	90 93 80 01 	sts	0x0180, r25

	// Configure counter for IO13(PF0) events
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    1ace:	e0 e0       	ldi	r30, 0x00	; 0
    1ad0:	f8 e0       	ldi	r31, 0x08	; 8
    1ad2:	90 ef       	ldi	r25, 0xF0	; 240
    1ad4:	91 83       	std	Z+1, r25	; 0x01
	TCC0.CCA = averagingPtA;
    1ad6:	e0 a6       	lds	r30, 0xb0
    1ad8:	f1 a6       	lds	r31, 0xb1
	TCC0.CCB = averagingPtB;
    1ada:	c2 a6       	lds	r28, 0xb2
    1adc:	d3 a6       	lds	r29, 0xb3
	TCC0.CCC = averagingPtC;
    1ade:	a4 a6       	lds	r26, 0xb4
    1ae0:	b5 a6       	lds	r27, 0xb5
	TCC0.CCD = averagingPtD;
    1ae2:	86 a6       	lds	r24, 0xb6
    1ae4:	97 a6       	lds	r25, 0xb7
	TCC0.PER = subsamplesPerChannel - 1;
    1ae6:	24 2d       	mov	r18, r4
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	21 50       	subi	r18, 0x01	; 1
    1aec:	30 40       	sbci	r19, 0x00	; 0
    1aee:	26 a3       	lds	r18, 0x56
    1af0:	37 a3       	lds	r19, 0x57
	TCC0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    1af2:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    1af8:	80 81       	ld	r24, Z
    1afa:	80 7f       	andi	r24, 0xF0	; 240
    1afc:	88 60       	ori	r24, 0x08	; 8
    1afe:	80 83       	st	Z, r24

	FRAMAddress = FR_BASEADD;
    1b00:	10 92 5a 40 	sts	0x405A, r1
    1b04:	10 92 5b 40 	sts	0x405B, r1
	sampleCount = 0;
    1b08:	10 92 6c 50 	sts	0x506C, r1
    1b0c:	10 92 6d 50 	sts	0x506D, r1
	SPICount = 0;
    1b10:	10 92 98 50 	sts	0x5098, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    1b14:	87 e2       	ldi	r24, 0x27	; 39
    1b16:	91 e2       	ldi	r25, 0x21	; 33
    1b18:	10 92 27 21 	sts	0x2127, r1
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	31 97       	sbiw	r30, 0x01	; 1
    1b20:	10 82       	st	Z, r1
    1b22:	02 97       	sbiw	r24, 0x02	; 2
    1b24:	fc 01       	movw	r30, r24
    1b26:	10 82       	st	Z, r1

	// Enable interrupts.
	PMIC.CTRL |= (PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);
    1b28:	e0 ea       	ldi	r30, 0xA0	; 160
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	82 81       	ldd	r24, Z+2	; 0x02
    1b2e:	86 60       	ori	r24, 0x06	; 6
    1b30:	82 83       	std	Z+2, r24	; 0x02
	sei();
    1b32:	78 94       	sei

	SPICS(TRUE);
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    1b3a:	80 e2       	ldi	r24, 0x20	; 32
    1b3c:	e0 e8       	ldi	r30, 0x80	; 128
    1b3e:	f6 e0       	ldi	r31, 0x06	; 6
    1b40:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    1b42:	e0 e4       	ldi	r30, 0x40	; 64
    1b44:	fa e0       	ldi	r31, 0x0A	; 10
    1b46:	83 e2       	ldi	r24, 0x23	; 35
    1b48:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    1b4a:	80 e2       	ldi	r24, 0x20	; 32
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	05 2c       	mov	r0, r5
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <CO_collectSeismic3Channel+0x10e>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <CO_collectSeismic3Channel+0x10a>
    1b5a:	86 a3       	lds	r24, 0x56
    1b5c:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    1b5e:	80 e1       	ldi	r24, 0x10	; 16
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <CO_collectSeismic3Channel+0x120>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	5a 94       	dec	r5
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <CO_collectSeismic3Channel+0x11c>
    1b6c:	82 af       	sts	0x72, r24
    1b6e:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1b70:	80 81       	ld	r24, Z
    1b72:	80 7f       	andi	r24, 0xF0	; 240
    1b74:	81 60       	ori	r24, 0x01	; 1
    1b76:	80 83       	st	Z, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    1b78:	80 91 6c 50 	lds	r24, 0x506C
    1b7c:	90 91 6d 50 	lds	r25, 0x506D
    1b80:	f5 e5       	ldi	r31, 0x55	; 85
    1b82:	83 35       	cpi	r24, 0x53	; 83
    1b84:	9f 07       	cpc	r25, r31
    1b86:	c0 f3       	brcs	.-16     	; 0x1b78 <CO_collectSeismic3Channel+0x130>

	// turn off timer and interrupts
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1b88:	e0 e0       	ldi	r30, 0x00	; 0
    1b8a:	f8 e0       	ldi	r31, 0x08	; 8
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 7f       	andi	r24, 0xF0	; 240
    1b90:	80 83       	st	Z, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1b92:	e0 e4       	ldi	r30, 0x40	; 64
    1b94:	fa e0       	ldi	r31, 0x0A	; 10
    1b96:	80 81       	ld	r24, Z
    1b98:	80 7f       	andi	r24, 0xF0	; 240
    1b9a:	80 83       	st	Z, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    1b9c:	e0 ea       	ldi	r30, 0xA0	; 160
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	89 7f       	andi	r24, 0xF9	; 249
    1ba4:	82 83       	std	Z+2, r24	; 0x02
	cli();
    1ba6:	f8 94       	cli

	SPICS(FALSE);
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();
    1bae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
	enableADCMUX(FALSE);
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	0e 94 06 04 	call	0x80c	; 0x80c <enableADCMUX>
	ADCPower(FALSE);
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	
}
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	df 90       	pop	r13
    1bcc:	cf 90       	pop	r12
    1bce:	bf 90       	pop	r11
    1bd0:	af 90       	pop	r10
    1bd2:	9f 90       	pop	r9
    1bd4:	8f 90       	pop	r8
    1bd6:	7f 90       	pop	r7
    1bd8:	6f 90       	pop	r6
    1bda:	5f 90       	pop	r5
    1bdc:	4f 90       	pop	r4
    1bde:	08 95       	ret

00001be0 <CO_collectSeismic1Channel>:
}

void CO_collectSeismic1Channel(uint8_t channel, uint8_t filterConfig, uint8_t gain,
	uint8_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable,
	uint16_t averagingPtA, uint16_t averagingPtB, uint16_t averagingPtC,
	uint16_t averagingPtD) {
    1be0:	6f 92       	push	r6
    1be2:	7f 92       	push	r7
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	18 2f       	mov	r17, r24
    1c02:	76 2e       	mov	r7, r22
    1c04:	f4 2e       	mov	r15, r20
    1c06:	62 2e       	mov	r6, r18
				
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	
	// Set gains, filters, and input channel	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gain);
    1c0e:	81 2f       	mov	r24, r17
    1c10:	6f 2d       	mov	r22, r15
    1c12:	0e 94 96 05 	call	0xb2c	; 0xb2c <set_ampGain>
	set_filter(filterConfig);
    1c16:	87 2d       	mov	r24, r7
    1c18:	0e 94 87 04 	call	0x90e	; 0x90e <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    1c1c:	8e 2d       	mov	r24, r14
    1c1e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    1c28:	84 e5       	ldi	r24, 0x54	; 84
    1c2a:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	0e 94 06 04 	call	0x80c	; 0x80c <enableADCMUX>
	setADCInput(channel);
    1c34:	81 2f       	mov	r24, r17
    1c36:	0e 94 2c 04 	call	0x858	; 0x858 <setADCInput>
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    1c3a:	e0 ea       	ldi	r30, 0xA0	; 160
    1c3c:	f6 e0       	ldi	r31, 0x06	; 6
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	92 83       	std	Z+2, r25	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    1c46:	98 e7       	ldi	r25, 0x78	; 120
    1c48:	90 93 80 01 	sts	0x0180, r25

	// Configure counter for IO13(PF0) events
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    1c4c:	e0 e0       	ldi	r30, 0x00	; 0
    1c4e:	f9 e0       	ldi	r31, 0x09	; 9
    1c50:	90 ef       	ldi	r25, 0xF0	; 240
    1c52:	91 83       	std	Z+1, r25	; 0x01
	TCD0.CCA = averagingPtA;
    1c54:	c0 a6       	lds	r28, 0xb0
    1c56:	d1 a6       	lds	r29, 0xb1
	TCD0.CCB = averagingPtB;
    1c58:	a2 a6       	lds	r26, 0xb2
    1c5a:	b3 a6       	lds	r27, 0xb3
	TCD0.CCC = averagingPtC;
    1c5c:	84 a6       	lds	r24, 0xb4
    1c5e:	95 a6       	lds	r25, 0xb5
	TCD0.CCD = averagingPtD;
    1c60:	2a 89       	ldd	r18, Y+18	; 0x12
    1c62:	3b 89       	ldd	r19, Y+19	; 0x13
    1c64:	26 a7       	lds	r18, 0x76
    1c66:	37 a7       	lds	r19, 0x77
	TCD0.PER = subsamplesPerSample - 1;
    1c68:	10 e0       	ldi	r17, 0x00	; 0
    1c6a:	01 50       	subi	r16, 0x01	; 1
    1c6c:	10 40       	sbci	r17, 0x00	; 0
    1c6e:	06 a3       	lds	r16, 0x56
    1c70:	17 a3       	lds	r17, 0x57
	TCD0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    1c72:	86 83       	std	Z+6, r24	; 0x06
	TCD0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	87 83       	std	Z+7, r24	; 0x07
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 7f       	andi	r24, 0xF0	; 240
    1c7c:	88 60       	ori	r24, 0x08	; 8
    1c7e:	80 83       	st	Z, r24

	FRAMAddress = FR_BASEADD;
    1c80:	10 92 5a 40 	sts	0x405A, r1
    1c84:	10 92 5b 40 	sts	0x405B, r1
	sampleCount = 0;
    1c88:	10 92 6c 50 	sts	0x506C, r1
    1c8c:	10 92 6d 50 	sts	0x506D, r1
	SPICount = 0;
    1c90:	10 92 98 50 	sts	0x5098, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;	
    1c94:	87 e2       	ldi	r24, 0x27	; 39
    1c96:	91 e2       	ldi	r25, 0x21	; 33
    1c98:	10 92 27 21 	sts	0x2127, r1
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	31 97       	sbiw	r30, 0x01	; 1
    1ca0:	10 82       	st	Z, r1
    1ca2:	02 97       	sbiw	r24, 0x02	; 2
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	10 82       	st	Z, r1
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm;
    1ca8:	e0 ea       	ldi	r30, 0xA0	; 160
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	86 60       	ori	r24, 0x06	; 6
    1cb0:	82 83       	std	Z+2, r24	; 0x02
	sei();
    1cb2:	78 94       	sei

	SPICS(TRUE);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    1cba:	80 e2       	ldi	r24, 0x20	; 32
    1cbc:	e0 e8       	ldi	r30, 0x80	; 128
    1cbe:	f6 e0       	ldi	r31, 0x06	; 6
    1cc0:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    1cc2:	e0 e4       	ldi	r30, 0x40	; 64
    1cc4:	fa e0       	ldi	r31, 0x0A	; 10
    1cc6:	83 e2       	ldi	r24, 0x23	; 35
    1cc8:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    1cca:	80 e2       	ldi	r24, 0x20	; 32
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	06 2c       	mov	r0, r6
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <CO_collectSeismic1Channel+0xf6>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <CO_collectSeismic1Channel+0xf2>
    1cda:	86 a3       	lds	r24, 0x56
    1cdc:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    1cde:	80 e1       	ldi	r24, 0x10	; 16
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9c 01       	movw	r18, r24
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <CO_collectSeismic1Channel+0x10a>
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	6a 94       	dec	r6
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <CO_collectSeismic1Channel+0x106>
    1cee:	22 af       	sts	0x72, r18
    1cf0:	33 af       	sts	0x73, r19
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1cf2:	80 81       	ld	r24, Z
    1cf4:	80 7f       	andi	r24, 0xF0	; 240
    1cf6:	81 60       	ori	r24, 0x01	; 1
    1cf8:	80 83       	st	Z, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    1cfa:	80 91 6c 50 	lds	r24, 0x506C
    1cfe:	90 91 6d 50 	lds	r25, 0x506D
    1d02:	35 e5       	ldi	r19, 0x55	; 85
    1d04:	83 35       	cpi	r24, 0x53	; 83
    1d06:	93 07       	cpc	r25, r19
    1d08:	c0 f3       	brcs	.-16     	; 0x1cfa <CO_collectSeismic1Channel+0x11a>

	// turn off timer and interrupts
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1d0a:	e0 e0       	ldi	r30, 0x00	; 0
    1d0c:	f9 e0       	ldi	r31, 0x09	; 9
    1d0e:	80 81       	ld	r24, Z
    1d10:	80 7f       	andi	r24, 0xF0	; 240
    1d12:	80 83       	st	Z, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1d14:	e0 e4       	ldi	r30, 0x40	; 64
    1d16:	fa e0       	ldi	r31, 0x0A	; 10
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 7f       	andi	r24, 0xF0	; 240
    1d1c:	80 83       	st	Z, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    1d1e:	e0 ea       	ldi	r30, 0xA0	; 160
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	89 7f       	andi	r24, 0xF9	; 249
    1d26:	82 83       	std	Z+2, r24	; 0x02
	cli();
    1d28:	f8 94       	cli

	SPICS(FALSE);
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();
    1d30:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
	enableADCMUX(FALSE);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	0e 94 06 04 	call	0x80c	; 0x80c <enableADCMUX>
	ADCPower(FALSE);
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	
}
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	bf 90       	pop	r11
    1d52:	af 90       	pop	r10
    1d54:	9f 90       	pop	r9
    1d56:	8f 90       	pop	r8
    1d58:	7f 90       	pop	r7
    1d5a:	6f 90       	pop	r6
    1d5c:	08 95       	ret

00001d5e <sampleCurrentChannel>:
ISR(TCD0_OVF_vect) {
	writeSE2FRAM();
}

void sampleCurrentChannel() {
	PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	e0 ea       	ldi	r30, 0xA0	; 160
    1d62:	f6 e0       	ldi	r31, 0x06	; 6
    1d64:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1d66:	8a ea       	ldi	r24, 0xAA	; 170
    1d68:	e0 ec       	ldi	r30, 0xC0	; 192
    1d6a:	f8 e0       	ldi	r31, 0x08	; 8
    1d6c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	88 23       	and	r24, r24
    1d72:	ec f7       	brge	.-6      	; 0x1d6e <sampleCurrentChannel+0x10>
	SPIBuffer[SPICount] = SPIC.DATA;
    1d74:	90 91 98 50 	lds	r25, 0x5098
    1d78:	e0 ec       	ldi	r30, 0xC0	; 192
    1d7a:	f8 e0       	ldi	r31, 0x08	; 8
    1d7c:	83 81       	ldd	r24, Z+3	; 0x03
    1d7e:	af e5       	ldi	r26, 0x5F	; 95
    1d80:	b0 e5       	ldi	r27, 0x50	; 80
    1d82:	a9 0f       	add	r26, r25
    1d84:	b1 1d       	adc	r27, r1
    1d86:	8c 93       	st	X, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1d88:	8a ea       	ldi	r24, 0xAA	; 170
    1d8a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	88 23       	and	r24, r24
    1d90:	ec f7       	brge	.-6      	; 0x1d8c <sampleCurrentChannel+0x2e>
	SPIBuffer[SPICount+1] = SPIC.DATA;
    1d92:	a0 91 98 50 	lds	r26, 0x5098
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e0 ec       	ldi	r30, 0xC0	; 192
    1d9a:	f8 e0       	ldi	r31, 0x08	; 8
    1d9c:	83 81       	ldd	r24, Z+3	; 0x03
    1d9e:	a0 5a       	subi	r26, 0xA0	; 160
    1da0:	bf 4a       	sbci	r27, 0xAF	; 175
    1da2:	8c 93       	st	X, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1da4:	8a ea       	ldi	r24, 0xAA	; 170
    1da6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	88 23       	and	r24, r24
    1dac:	ec f7       	brge	.-6      	; 0x1da8 <sampleCurrentChannel+0x4a>
	SPIBuffer[SPICount+2] = SPIC.DATA;
    1dae:	e0 91 98 50 	lds	r30, 0x5098
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	a0 ec       	ldi	r26, 0xC0	; 192
    1db6:	b8 e0       	ldi	r27, 0x08	; 8
    1db8:	13 96       	adiw	r26, 0x03	; 3
    1dba:	8c 91       	ld	r24, X
    1dbc:	13 97       	sbiw	r26, 0x03	; 3
    1dbe:	ef 59       	subi	r30, 0x9F	; 159
    1dc0:	ff 4a       	sbci	r31, 0xAF	; 175
    1dc2:	80 83       	st	Z, r24
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	e0 ea       	ldi	r30, 0xA0	; 160
    1dc8:	f6 e0       	ldi	r31, 0x06	; 6
    1dca:	85 83       	std	Z+5, r24	; 0x05
	SPICount +=3;
    1dcc:	80 91 98 50 	lds	r24, 0x5098
    1dd0:	8d 5f       	subi	r24, 0xFD	; 253
    1dd2:	80 93 98 50 	sts	0x5098, r24
}
    1dd6:	08 95       	ret

00001dd8 <__vector_82>:

ISR(TCD0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCD_vect) {
    1dd8:	1f 92       	push	r1
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	0f 92       	push	r0
    1de0:	0b b6       	in	r0, 0x3b	; 59
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
	sampleCurrentChannel();
    1dfe:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sampleCurrentChannel>
	SPICount = 0;		
    1e02:	10 92 98 50 	sts	0x5098, r1
}
    1e06:	ff 91       	pop	r31
    1e08:	ef 91       	pop	r30
    1e0a:	bf 91       	pop	r27
    1e0c:	af 91       	pop	r26
    1e0e:	9f 91       	pop	r25
    1e10:	8f 91       	pop	r24
    1e12:	7f 91       	pop	r23
    1e14:	6f 91       	pop	r22
    1e16:	5f 91       	pop	r21
    1e18:	4f 91       	pop	r20
    1e1a:	3f 91       	pop	r19
    1e1c:	2f 91       	pop	r18
    1e1e:	0f 90       	pop	r0
    1e20:	0b be       	out	0x3b, r0	; 59
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti

00001e2c <__vector_81>:

ISR(TCD0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCC_vect) {
    1e2c:	1f 92       	push	r1
    1e2e:	0f 92       	push	r0
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	0f 92       	push	r0
    1e34:	0b b6       	in	r0, 0x3b	; 59
    1e36:	0f 92       	push	r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	2f 93       	push	r18
    1e3c:	3f 93       	push	r19
    1e3e:	4f 93       	push	r20
    1e40:	5f 93       	push	r21
    1e42:	6f 93       	push	r22
    1e44:	7f 93       	push	r23
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	af 93       	push	r26
    1e4c:	bf 93       	push	r27
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
	sampleCurrentChannel();
    1e52:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sampleCurrentChannel>
}
    1e56:	ff 91       	pop	r31
    1e58:	ef 91       	pop	r30
    1e5a:	bf 91       	pop	r27
    1e5c:	af 91       	pop	r26
    1e5e:	9f 91       	pop	r25
    1e60:	8f 91       	pop	r24
    1e62:	7f 91       	pop	r23
    1e64:	6f 91       	pop	r22
    1e66:	5f 91       	pop	r21
    1e68:	4f 91       	pop	r20
    1e6a:	3f 91       	pop	r19
    1e6c:	2f 91       	pop	r18
    1e6e:	0f 90       	pop	r0
    1e70:	0b be       	out	0x3b, r0	; 59
    1e72:	0f 90       	pop	r0
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	0f 90       	pop	r0
    1e78:	1f 90       	pop	r1
    1e7a:	18 95       	reti

00001e7c <__vector_80>:

ISR(TCD0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCB_vect) {
    1e7c:	1f 92       	push	r1
    1e7e:	0f 92       	push	r0
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	0f 92       	push	r0
    1e84:	0b b6       	in	r0, 0x3b	; 59
    1e86:	0f 92       	push	r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	2f 93       	push	r18
    1e8c:	3f 93       	push	r19
    1e8e:	4f 93       	push	r20
    1e90:	5f 93       	push	r21
    1e92:	6f 93       	push	r22
    1e94:	7f 93       	push	r23
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	af 93       	push	r26
    1e9c:	bf 93       	push	r27
    1e9e:	ef 93       	push	r30
    1ea0:	ff 93       	push	r31
	sampleCurrentChannel();
    1ea2:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sampleCurrentChannel>
}
    1ea6:	ff 91       	pop	r31
    1ea8:	ef 91       	pop	r30
    1eaa:	bf 91       	pop	r27
    1eac:	af 91       	pop	r26
    1eae:	9f 91       	pop	r25
    1eb0:	8f 91       	pop	r24
    1eb2:	7f 91       	pop	r23
    1eb4:	6f 91       	pop	r22
    1eb6:	5f 91       	pop	r21
    1eb8:	4f 91       	pop	r20
    1eba:	3f 91       	pop	r19
    1ebc:	2f 91       	pop	r18
    1ebe:	0f 90       	pop	r0
    1ec0:	0b be       	out	0x3b, r0	; 59
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <__vector_79>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCD0_CCA_vect) {
    1ecc:	1f 92       	push	r1
    1ece:	0f 92       	push	r0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	0f 92       	push	r0
    1ed4:	0b b6       	in	r0, 0x3b	; 59
    1ed6:	0f 92       	push	r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	2f 93       	push	r18
    1edc:	3f 93       	push	r19
    1ede:	4f 93       	push	r20
    1ee0:	5f 93       	push	r21
    1ee2:	6f 93       	push	r22
    1ee4:	7f 93       	push	r23
    1ee6:	8f 93       	push	r24
    1ee8:	9f 93       	push	r25
    1eea:	af 93       	push	r26
    1eec:	bf 93       	push	r27
    1eee:	ef 93       	push	r30
    1ef0:	ff 93       	push	r31
	sampleCurrentChannel();
    1ef2:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sampleCurrentChannel>
}
    1ef6:	ff 91       	pop	r31
    1ef8:	ef 91       	pop	r30
    1efa:	bf 91       	pop	r27
    1efc:	af 91       	pop	r26
    1efe:	9f 91       	pop	r25
    1f00:	8f 91       	pop	r24
    1f02:	7f 91       	pop	r23
    1f04:	6f 91       	pop	r22
    1f06:	5f 91       	pop	r21
    1f08:	4f 91       	pop	r20
    1f0a:	3f 91       	pop	r19
    1f0c:	2f 91       	pop	r18
    1f0e:	0f 90       	pop	r0
    1f10:	0b be       	out	0x3b, r0	; 59
    1f12:	0f 90       	pop	r0
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	0f 90       	pop	r0
    1f18:	1f 90       	pop	r1
    1f1a:	18 95       	reti

00001f1c <__vector_19>:

ISR(TCC0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCD_vect) {
    1f1c:	1f 92       	push	r1
    1f1e:	0f 92       	push	r0
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	0f 92       	push	r0
    1f24:	0b b6       	in	r0, 0x3b	; 59
    1f26:	0f 92       	push	r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	2f 93       	push	r18
    1f2c:	3f 93       	push	r19
    1f2e:	4f 93       	push	r20
    1f30:	5f 93       	push	r21
    1f32:	6f 93       	push	r22
    1f34:	7f 93       	push	r23
    1f36:	8f 93       	push	r24
    1f38:	9f 93       	push	r25
    1f3a:	af 93       	push	r26
    1f3c:	bf 93       	push	r27
    1f3e:	ef 93       	push	r30
    1f40:	ff 93       	push	r31
	sampleCurrentChannel();
    1f42:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sampleCurrentChannel>
	SPICount = 0;
    1f46:	10 92 98 50 	sts	0x5098, r1
	if(PORTB.OUT & PIN1_bm) {
    1f4a:	e0 e2       	ldi	r30, 0x20	; 32
    1f4c:	f6 e0       	ldi	r31, 0x06	; 6
    1f4e:	84 81       	ldd	r24, Z+4	; 0x04
    1f50:	81 ff       	sbrs	r24, 1
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <__vector_19+0x56>
		if (PORTA.OUT & PIN6_bm) PORTB.OUTTGL = PIN1_bm;
    1f54:	e0 e0       	ldi	r30, 0x00	; 0
    1f56:	f6 e0       	ldi	r31, 0x06	; 6
    1f58:	84 81       	ldd	r24, Z+4	; 0x04
    1f5a:	86 ff       	sbrs	r24, 6
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <__vector_19+0x4c>
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	e0 e2       	ldi	r30, 0x20	; 32
    1f62:	f6 e0       	ldi	r31, 0x06	; 6
    1f64:	87 83       	std	Z+7, r24	; 0x07
    1f66:	0d c0       	rjmp	.+26     	; 0x1f82 <__vector_19+0x66>
		else PORTA.OUTTGL = PIN6_bm;
    1f68:	80 e4       	ldi	r24, 0x40	; 64
    1f6a:	e0 e0       	ldi	r30, 0x00	; 0
    1f6c:	f6 e0       	ldi	r31, 0x06	; 6
    1f6e:	87 83       	std	Z+7, r24	; 0x07
    1f70:	08 c0       	rjmp	.+16     	; 0x1f82 <__vector_19+0x66>
	} else {
		PORTA.OUTCLR = PIN6_bm;
    1f72:	80 e4       	ldi	r24, 0x40	; 64
    1f74:	e0 e0       	ldi	r30, 0x00	; 0
    1f76:	f6 e0       	ldi	r31, 0x06	; 6
    1f78:	86 83       	std	Z+6, r24	; 0x06
		PORTB.OUTSET = PIN1_bm;
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	e0 e2       	ldi	r30, 0x20	; 32
    1f7e:	f6 e0       	ldi	r31, 0x06	; 6
    1f80:	85 83       	std	Z+5, r24	; 0x05
	}
	
}
    1f82:	ff 91       	pop	r31
    1f84:	ef 91       	pop	r30
    1f86:	bf 91       	pop	r27
    1f88:	af 91       	pop	r26
    1f8a:	9f 91       	pop	r25
    1f8c:	8f 91       	pop	r24
    1f8e:	7f 91       	pop	r23
    1f90:	6f 91       	pop	r22
    1f92:	5f 91       	pop	r21
    1f94:	4f 91       	pop	r20
    1f96:	3f 91       	pop	r19
    1f98:	2f 91       	pop	r18
    1f9a:	0f 90       	pop	r0
    1f9c:	0b be       	out	0x3b, r0	; 59
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	0f 90       	pop	r0
    1fa4:	1f 90       	pop	r1
    1fa6:	18 95       	reti

00001fa8 <__vector_18>:

ISR(TCC0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCC_vect) {
    1fa8:	1f 92       	push	r1
    1faa:	0f 92       	push	r0
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	0f 92       	push	r0
    1fb0:	0b b6       	in	r0, 0x3b	; 59
    1fb2:	0f 92       	push	r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	2f 93       	push	r18
    1fb8:	3f 93       	push	r19
    1fba:	4f 93       	push	r20
    1fbc:	5f 93       	push	r21
    1fbe:	6f 93       	push	r22
    1fc0:	7f 93       	push	r23
    1fc2:	8f 93       	push	r24
    1fc4:	9f 93       	push	r25
    1fc6:	af 93       	push	r26
    1fc8:	bf 93       	push	r27
    1fca:	ef 93       	push	r30
    1fcc:	ff 93       	push	r31
	sampleCurrentChannel();
    1fce:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sampleCurrentChannel>
}
    1fd2:	ff 91       	pop	r31
    1fd4:	ef 91       	pop	r30
    1fd6:	bf 91       	pop	r27
    1fd8:	af 91       	pop	r26
    1fda:	9f 91       	pop	r25
    1fdc:	8f 91       	pop	r24
    1fde:	7f 91       	pop	r23
    1fe0:	6f 91       	pop	r22
    1fe2:	5f 91       	pop	r21
    1fe4:	4f 91       	pop	r20
    1fe6:	3f 91       	pop	r19
    1fe8:	2f 91       	pop	r18
    1fea:	0f 90       	pop	r0
    1fec:	0b be       	out	0x3b, r0	; 59
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	0f 90       	pop	r0
    1ff4:	1f 90       	pop	r1
    1ff6:	18 95       	reti

00001ff8 <__vector_17>:

ISR(TCC0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCB_vect) {
    1ff8:	1f 92       	push	r1
    1ffa:	0f 92       	push	r0
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	0f 92       	push	r0
    2000:	0b b6       	in	r0, 0x3b	; 59
    2002:	0f 92       	push	r0
    2004:	11 24       	eor	r1, r1
    2006:	2f 93       	push	r18
    2008:	3f 93       	push	r19
    200a:	4f 93       	push	r20
    200c:	5f 93       	push	r21
    200e:	6f 93       	push	r22
    2010:	7f 93       	push	r23
    2012:	8f 93       	push	r24
    2014:	9f 93       	push	r25
    2016:	af 93       	push	r26
    2018:	bf 93       	push	r27
    201a:	ef 93       	push	r30
    201c:	ff 93       	push	r31
	sampleCurrentChannel();
    201e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sampleCurrentChannel>
}
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	bf 91       	pop	r27
    2028:	af 91       	pop	r26
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	7f 91       	pop	r23
    2030:	6f 91       	pop	r22
    2032:	5f 91       	pop	r21
    2034:	4f 91       	pop	r20
    2036:	3f 91       	pop	r19
    2038:	2f 91       	pop	r18
    203a:	0f 90       	pop	r0
    203c:	0b be       	out	0x3b, r0	; 59
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <__vector_16>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCC0_CCA_vect) {
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	0b b6       	in	r0, 0x3b	; 59
    2052:	0f 92       	push	r0
    2054:	11 24       	eor	r1, r1
    2056:	2f 93       	push	r18
    2058:	3f 93       	push	r19
    205a:	4f 93       	push	r20
    205c:	5f 93       	push	r21
    205e:	6f 93       	push	r22
    2060:	7f 93       	push	r23
    2062:	8f 93       	push	r24
    2064:	9f 93       	push	r25
    2066:	af 93       	push	r26
    2068:	bf 93       	push	r27
    206a:	ef 93       	push	r30
    206c:	ff 93       	push	r31
	sampleCurrentChannel();
    206e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <sampleCurrentChannel>
}
    2072:	ff 91       	pop	r31
    2074:	ef 91       	pop	r30
    2076:	bf 91       	pop	r27
    2078:	af 91       	pop	r26
    207a:	9f 91       	pop	r25
    207c:	8f 91       	pop	r24
    207e:	7f 91       	pop	r23
    2080:	6f 91       	pop	r22
    2082:	5f 91       	pop	r21
    2084:	4f 91       	pop	r20
    2086:	3f 91       	pop	r19
    2088:	2f 91       	pop	r18
    208a:	0f 90       	pop	r0
    208c:	0b be       	out	0x3b, r0	; 59
    208e:	0f 90       	pop	r0
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	0f 90       	pop	r0
    2094:	1f 90       	pop	r1
    2096:	18 95       	reti

00002098 <writeSE2FRAM>:
	SPIBuffer[SPICount+2] = SPIC.DATA;
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

void writeSE2FRAM() {
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	28 97       	sbiw	r28, 0x08	; 8
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	de bf       	out	0x3e, r29	; 62
	volatile int32_t sum = 0;
    20ac:	19 82       	std	Y+1, r1	; 0x01
    20ae:	1a 82       	std	Y+2, r1	; 0x02
    20b0:	1b 82       	std	Y+3, r1	; 0x03
    20b2:	1c 82       	std	Y+4, r1	; 0x04
	volatile int32_t currentSample;
	sampleCount++;
    20b4:	80 91 6c 50 	lds	r24, 0x506C
    20b8:	90 91 6d 50 	lds	r25, 0x506D
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	80 93 6c 50 	sts	0x506C, r24
    20c2:	90 93 6d 50 	sts	0x506D, r25
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    20c6:	80 ed       	ldi	r24, 0xD0	; 208
    20c8:	80 93 c0 08 	sts	0x08C0, r24
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    20d0:	0f e5       	ldi	r16, 0x5F	; 95
    20d2:	10 e5       	ldi	r17, 0x50	; 80
    20d4:	ff 24       	eor	r15, r15
    20d6:	fa 94       	dec	r15
    20d8:	c9 01       	movw	r24, r18
    20da:	f8 01       	movw	r30, r16
    20dc:	e2 0f       	add	r30, r18
    20de:	f3 1f       	adc	r31, r19
    20e0:	40 81       	ld	r20, Z
    20e2:	44 23       	and	r20, r20
    20e4:	14 f4       	brge	.+4      	; 0x20ea <writeSE2FRAM+0x52>
    20e6:	f8 86       	std	Y+8, r15	; 0x08
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <writeSE2FRAM+0x54>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    20ea:	18 86       	std	Y+8, r1	; 0x08
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    20ec:	80 0f       	add	r24, r16
    20ee:	91 1f       	adc	r25, r17
    20f0:	fc 01       	movw	r30, r24
    20f2:	80 81       	ld	r24, Z
    20f4:	8f 83       	std	Y+7, r24	; 0x07
	SPIBuffer[SPICount+2] = SPIC.DATA;
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

void writeSE2FRAM() {
    20f6:	f9 01       	movw	r30, r18
    20f8:	31 96       	adiw	r30, 0x01	; 1
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    20fa:	e0 0f       	add	r30, r16
    20fc:	f1 1f       	adc	r31, r17
    20fe:	80 81       	ld	r24, Z
    2100:	8e 83       	std	Y+6, r24	; 0x06
	SPIBuffer[SPICount+2] = SPIC.DATA;
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

void writeSE2FRAM() {
    2102:	f9 01       	movw	r30, r18
    2104:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    2106:	e0 0f       	add	r30, r16
    2108:	f1 1f       	adc	r31, r17
    210a:	80 81       	ld	r24, Z
    210c:	8d 83       	std	Y+5, r24	; 0x05
		sum += currentSample;
    210e:	49 81       	ldd	r20, Y+1	; 0x01
    2110:	5a 81       	ldd	r21, Y+2	; 0x02
    2112:	6b 81       	ldd	r22, Y+3	; 0x03
    2114:	7c 81       	ldd	r23, Y+4	; 0x04
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	af 81       	ldd	r26, Y+7	; 0x07
    211c:	b8 85       	ldd	r27, Y+8	; 0x08
    211e:	84 0f       	add	r24, r20
    2120:	95 1f       	adc	r25, r21
    2122:	a6 1f       	adc	r26, r22
    2124:	b7 1f       	adc	r27, r23
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	ab 83       	std	Y+3, r26	; 0x03
    212c:	bc 83       	std	Y+4, r27	; 0x04
    212e:	2d 5f       	subi	r18, 0xFD	; 253
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile int32_t currentSample;
	sampleCount++;
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    2132:	2c 30       	cpi	r18, 0x0C	; 12
    2134:	31 05       	cpc	r19, r1
    2136:	81 f6       	brne	.-96     	; 0x20d8 <writeSE2FRAM+0x40>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
	
	sum = sum / 4;
    2138:	69 81       	ldd	r22, Y+1	; 0x01
    213a:	7a 81       	ldd	r23, Y+2	; 0x02
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	24 e0       	ldi	r18, 0x04	; 4
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	0e 94 83 34 	call	0x6906	; 0x6906 <__divmodsi4>
    214c:	29 83       	std	Y+1, r18	; 0x01
    214e:	3a 83       	std	Y+2, r19	; 0x02
    2150:	4b 83       	std	Y+3, r20	; 0x03
    2152:	5c 83       	std	Y+4, r21	; 0x04
	SPIBuffer[2] = *(((uint8_t*)&sum)+0);
    2154:	29 81       	ldd	r18, Y+1	; 0x01
    2156:	81 e6       	ldi	r24, 0x61	; 97
    2158:	90 e5       	ldi	r25, 0x50	; 80
    215a:	20 93 61 50 	sts	0x5061, r18
	SPIBuffer[1] = *(((uint8_t*)&sum)+1);
    215e:	2a 81       	ldd	r18, Y+2	; 0x02
    2160:	fc 01       	movw	r30, r24
    2162:	31 97       	sbiw	r30, 0x01	; 1
    2164:	20 83       	st	Z, r18
	SPIBuffer[0] = *(((uint8_t*)&sum)+2);	
    2166:	2b 81       	ldd	r18, Y+3	; 0x03
    2168:	02 97       	sbiw	r24, 0x02	; 2
    216a:	fc 01       	movw	r30, r24
    216c:	20 83       	st	Z, r18


	
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    216e:	80 e1       	ldi	r24, 0x10	; 16
    2170:	e0 e4       	ldi	r30, 0x40	; 64
    2172:	f6 e0       	ldi	r31, 0x06	; 6
    2174:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2176:	88 e0       	ldi	r24, 0x08	; 8
    2178:	e0 e2       	ldi	r30, 0x20	; 32
    217a:	f6 e0       	ldi	r31, 0x06	; 6
    217c:	86 83       	std	Z+6, r24	; 0x06
	nop();
    217e:	00 00       	nop
	SPIC.DATA = FR_WREN;
    2180:	86 e0       	ldi	r24, 0x06	; 6
    2182:	e0 ec       	ldi	r30, 0xC0	; 192
    2184:	f8 e0       	ldi	r31, 0x08	; 8
    2186:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	88 23       	and	r24, r24
    218c:	ec f7       	brge	.-6      	; 0x2188 <writeSE2FRAM+0xf0>
	SPIBuffer[12] = SPIC.DATA;
    218e:	e0 ec       	ldi	r30, 0xC0	; 192
    2190:	f8 e0       	ldi	r31, 0x08	; 8
    2192:	83 81       	ldd	r24, Z+3	; 0x03
    2194:	80 93 6b 50 	sts	0x506B, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
    2198:	a0 e2       	ldi	r26, 0x20	; 32
    219a:	b6 e0       	ldi	r27, 0x06	; 6
    219c:	88 e0       	ldi	r24, 0x08	; 8
    219e:	15 96       	adiw	r26, 0x05	; 5
    21a0:	8c 93       	st	X, r24
    21a2:	15 97       	sbiw	r26, 0x05	; 5
	nop(); // time for CS_FRAM to accept high signal
    21a4:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    21a6:	16 96       	adiw	r26, 0x06	; 6
    21a8:	8c 93       	st	X, r24
    21aa:	16 97       	sbiw	r26, 0x06	; 6
	nop();
    21ac:	00 00       	nop
	SPIC.DATA = FR_WRITE;
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	88 23       	and	r24, r24
    21b6:	ec f7       	brge	.-6      	; 0x21b2 <writeSE2FRAM+0x11a>
	SPIBuffer[12] = SPIC.DATA;
    21b8:	e0 ec       	ldi	r30, 0xC0	; 192
    21ba:	f8 e0       	ldi	r31, 0x08	; 8
    21bc:	83 81       	ldd	r24, Z+3	; 0x03
    21be:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    21c2:	80 91 5b 40 	lds	r24, 0x405B
    21c6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	88 23       	and	r24, r24
    21cc:	ec f7       	brge	.-6      	; 0x21c8 <writeSE2FRAM+0x130>
	SPIBuffer[12] = SPIC.DATA;
    21ce:	e0 ec       	ldi	r30, 0xC0	; 192
    21d0:	f8 e0       	ldi	r31, 0x08	; 8
    21d2:	83 81       	ldd	r24, Z+3	; 0x03
    21d4:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
    21d8:	80 91 5a 40 	lds	r24, 0x405A
    21dc:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	88 23       	and	r24, r24
    21e2:	ec f7       	brge	.-6      	; 0x21de <writeSE2FRAM+0x146>
	SPIBuffer[12] = SPIC.DATA;
    21e4:	e0 ec       	ldi	r30, 0xC0	; 192
    21e6:	f8 e0       	ldi	r31, 0x08	; 8
    21e8:	83 81       	ldd	r24, Z+3	; 0x03
    21ea:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = SPIBuffer[0];
    21ee:	80 91 5f 50 	lds	r24, 0x505F
    21f2:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	88 23       	and	r24, r24
    21f8:	ec f7       	brge	.-6      	; 0x21f4 <writeSE2FRAM+0x15c>
	SPIBuffer[12] = SPIC.DATA;
    21fa:	e0 ec       	ldi	r30, 0xC0	; 192
    21fc:	f8 e0       	ldi	r31, 0x08	; 8
    21fe:	83 81       	ldd	r24, Z+3	; 0x03
    2200:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = SPIBuffer[1];
    2204:	80 91 60 50 	lds	r24, 0x5060
    2208:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	88 23       	and	r24, r24
    220e:	ec f7       	brge	.-6      	; 0x220a <writeSE2FRAM+0x172>
	SPIBuffer[12] = SPIC.DATA;
    2210:	e0 ec       	ldi	r30, 0xC0	; 192
    2212:	f8 e0       	ldi	r31, 0x08	; 8
    2214:	83 81       	ldd	r24, Z+3	; 0x03
    2216:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = SPIBuffer[2];
    221a:	80 91 61 50 	lds	r24, 0x5061
    221e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	88 23       	and	r24, r24
    2224:	ec f7       	brge	.-6      	; 0x2220 <writeSE2FRAM+0x188>
	SPIBuffer[12] = SPIC.DATA;
    2226:	a0 ec       	ldi	r26, 0xC0	; 192
    2228:	b8 e0       	ldi	r27, 0x08	; 8
    222a:	13 96       	adiw	r26, 0x03	; 3
    222c:	8c 91       	ld	r24, X
    222e:	13 97       	sbiw	r26, 0x03	; 3
    2230:	80 93 6b 50 	sts	0x506B, r24
		
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    2234:	88 e0       	ldi	r24, 0x08	; 8
    2236:	e0 e2       	ldi	r30, 0x20	; 32
    2238:	f6 e0       	ldi	r31, 0x06	; 6
    223a:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    223c:	e0 e4       	ldi	r30, 0x40	; 64
    223e:	f6 e0       	ldi	r31, 0x06	; 6
    2240:	80 e1       	ldi	r24, 0x10	; 16
    2242:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2244:	94 e5       	ldi	r25, 0x54	; 84
    2246:	9c 93       	st	X, r25
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2248:	86 83       	std	Z+6, r24	; 0x06
	
	FRAMAddress +=3;
    224a:	80 91 5a 40 	lds	r24, 0x405A
    224e:	90 91 5b 40 	lds	r25, 0x405B
    2252:	03 96       	adiw	r24, 0x03	; 3
    2254:	80 93 5a 40 	sts	0x405A, r24
    2258:	90 93 5b 40 	sts	0x405B, r25
	checksumADC[0] += SPIBuffer[0];
    225c:	80 91 25 21 	lds	r24, 0x2125
    2260:	ef e5       	ldi	r30, 0x5F	; 95
    2262:	f0 e5       	ldi	r31, 0x50	; 80
    2264:	90 81       	ld	r25, Z
    2266:	89 0f       	add	r24, r25
    2268:	80 93 25 21 	sts	0x2125, r24
	checksumADC[1] += SPIBuffer[1];
    226c:	80 91 26 21 	lds	r24, 0x2126
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	89 0f       	add	r24, r25
    2274:	80 93 26 21 	sts	0x2126, r24
	checksumADC[2] += SPIBuffer[2];	
    2278:	80 91 27 21 	lds	r24, 0x2127
    227c:	92 81       	ldd	r25, Z+2	; 0x02
    227e:	89 0f       	add	r24, r25
    2280:	80 93 27 21 	sts	0x2127, r24
}
    2284:	28 96       	adiw	r28, 0x08	; 8
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	1f 91       	pop	r17
    2290:	0f 91       	pop	r16
    2292:	ff 90       	pop	r15
    2294:	08 95       	ret

00002296 <__vector_77>:
ISR(TCD0_CCD_vect) {
	sampleCurrentChannel();
	SPICount = 0;		
}

ISR(TCD0_OVF_vect) {
    2296:	1f 92       	push	r1
    2298:	0f 92       	push	r0
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	0f 92       	push	r0
    229e:	0b b6       	in	r0, 0x3b	; 59
    22a0:	0f 92       	push	r0
    22a2:	11 24       	eor	r1, r1
    22a4:	2f 93       	push	r18
    22a6:	3f 93       	push	r19
    22a8:	4f 93       	push	r20
    22aa:	5f 93       	push	r21
    22ac:	6f 93       	push	r22
    22ae:	7f 93       	push	r23
    22b0:	8f 93       	push	r24
    22b2:	9f 93       	push	r25
    22b4:	af 93       	push	r26
    22b6:	bf 93       	push	r27
    22b8:	ef 93       	push	r30
    22ba:	ff 93       	push	r31
	writeSE2FRAM();
    22bc:	0e 94 4c 10 	call	0x2098	; 0x2098 <writeSE2FRAM>
}
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	7f 91       	pop	r23
    22ce:	6f 91       	pop	r22
    22d0:	5f 91       	pop	r21
    22d2:	4f 91       	pop	r20
    22d4:	3f 91       	pop	r19
    22d6:	2f 91       	pop	r18
    22d8:	0f 90       	pop	r0
    22da:	0b be       	out	0x3b, r0	; 59
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	0f 90       	pop	r0
    22e2:	1f 90       	pop	r1
    22e4:	18 95       	reti

000022e6 <__vector_14>:
		PORTB.OUTSET = PIN1_bm;
	}
	
}

ISR(TCC0_OVF_vect) {
    22e6:	1f 92       	push	r1
    22e8:	0f 92       	push	r0
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	0f 92       	push	r0
    22ee:	0b b6       	in	r0, 0x3b	; 59
    22f0:	0f 92       	push	r0
    22f2:	11 24       	eor	r1, r1
    22f4:	2f 93       	push	r18
    22f6:	3f 93       	push	r19
    22f8:	4f 93       	push	r20
    22fa:	5f 93       	push	r21
    22fc:	6f 93       	push	r22
    22fe:	7f 93       	push	r23
    2300:	8f 93       	push	r24
    2302:	9f 93       	push	r25
    2304:	af 93       	push	r26
    2306:	bf 93       	push	r27
    2308:	ef 93       	push	r30
    230a:	ff 93       	push	r31
	writeSE2FRAM();
    230c:	0e 94 4c 10 	call	0x2098	; 0x2098 <writeSE2FRAM>
}
    2310:	ff 91       	pop	r31
    2312:	ef 91       	pop	r30
    2314:	bf 91       	pop	r27
    2316:	af 91       	pop	r26
    2318:	9f 91       	pop	r25
    231a:	8f 91       	pop	r24
    231c:	7f 91       	pop	r23
    231e:	6f 91       	pop	r22
    2320:	5f 91       	pop	r21
    2322:	4f 91       	pop	r20
    2324:	3f 91       	pop	r19
    2326:	2f 91       	pop	r18
    2328:	0f 90       	pop	r0
    232a:	0b be       	out	0x3b, r0	; 59
    232c:	0f 90       	pop	r0
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	0f 90       	pop	r0
    2332:	1f 90       	pop	r1
    2334:	18 95       	reti

00002336 <readFRAM>:
	checksumADC[2] += SPIBuffer[2];	
}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes) {
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	ec 01       	movw	r28, r24
	SPIInit(SPI_MODE_0_gc);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2346:	00 ec       	ldi	r16, 0xC0	; 192
    2348:	18 e0       	ldi	r17, 0x08	; 8
    234a:	80 ed       	ldi	r24, 0xD0	; 208
    234c:	f8 01       	movw	r30, r16
    234e:	80 83       	st	Z, r24
	SPICS(TRUE);
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2356:	88 e0       	ldi	r24, 0x08	; 8
    2358:	e0 e2       	ldi	r30, 0x20	; 32
    235a:	f6 e0       	ldi	r31, 0x06	; 6
    235c:	86 83       	std	Z+6, r24	; 0x06
	nop();
    235e:	00 00       	nop
								
	SPIC.DATA = FR_READ;
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	f8 01       	movw	r30, r16
    2364:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	88 23       	and	r24, r24
    236a:	ec f7       	brge	.-6      	; 0x2366 <readFRAM+0x30>
	SPIBuffer[12] = SPIC.DATA;
    236c:	e0 ec       	ldi	r30, 0xC0	; 192
    236e:	f8 e0       	ldi	r31, 0x08	; 8
    2370:	83 81       	ldd	r24, Z+3	; 0x03
    2372:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 1);;
    2376:	80 91 5b 40 	lds	r24, 0x405B
    237a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	88 23       	and	r24, r24
    2380:	ec f7       	brge	.-6      	; 0x237c <readFRAM+0x46>
	SPIBuffer[12] = SPIC.DATA;
    2382:	e0 ec       	ldi	r30, 0xC0	; 192
    2384:	f8 e0       	ldi	r31, 0x08	; 8
    2386:	83 81       	ldd	r24, Z+3	; 0x03
    2388:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
    238c:	80 91 5a 40 	lds	r24, 0x405A
    2390:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	88 23       	and	r24, r24
    2396:	ec f7       	brge	.-6      	; 0x2392 <readFRAM+0x5c>
	SPIBuffer[12] = SPIC.DATA;
    2398:	e0 ec       	ldi	r30, 0xC0	; 192
    239a:	f8 e0       	ldi	r31, 0x08	; 8
    239c:	83 81       	ldd	r24, Z+3	; 0x03
    239e:	80 93 6b 50 	sts	0x506B, r24
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    23a2:	20 97       	sbiw	r28, 0x00	; 0
    23a4:	d1 f0       	breq	.+52     	; 0x23da <readFRAM+0xa4>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
		SPIC.DATA = 0xAA;
    23aa:	a0 ec       	ldi	r26, 0xC0	; 192
    23ac:	b8 e0       	ldi	r27, 0x08	; 8
    23ae:	5a ea       	ldi	r21, 0xAA	; 170
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
    23b0:	27 ec       	ldi	r18, 0xC7	; 199
    23b2:	33 e2       	ldi	r19, 0x23	; 35
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
		SPIC.DATA = 0xAA;
    23b4:	13 96       	adiw	r26, 0x03	; 3
    23b6:	5c 93       	st	X, r21
    23b8:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    23ba:	12 96       	adiw	r26, 0x02	; 2
    23bc:	4c 91       	ld	r20, X
    23be:	12 97       	sbiw	r26, 0x02	; 2
    23c0:	44 23       	and	r20, r20
    23c2:	dc f7       	brge	.-10     	; 0x23ba <readFRAM+0x84>
		FRAMReadBuffer[i] = SPIC.DATA;
    23c4:	13 96       	adiw	r26, 0x03	; 3
    23c6:	4c 91       	ld	r20, X
    23c8:	13 97       	sbiw	r26, 0x03	; 3
    23ca:	f9 01       	movw	r30, r18
    23cc:	e8 0f       	add	r30, r24
    23ce:	f9 1f       	adc	r31, r25
    23d0:	40 83       	st	Z, r20
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	8c 17       	cp	r24, r28
    23d6:	9d 07       	cpc	r25, r29
    23d8:	69 f7       	brne	.-38     	; 0x23b4 <readFRAM+0x7e>
		SPIC.DATA = 0xAA;
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
	}

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
    23da:	88 e0       	ldi	r24, 0x08	; 8
    23dc:	e0 e2       	ldi	r30, 0x20	; 32
    23de:	f6 e0       	ldi	r31, 0x06	; 6
    23e0:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();
    23e8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>

}
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
    23f4:	08 95       	ret

000023f6 <calcChecksumFRAM>:

	ADCPower(FALSE);

}

void calcChecksumFRAM() {
    23f6:	2f 92       	push	r2
    23f8:	3f 92       	push	r3
    23fa:	4f 92       	push	r4
    23fc:	5f 92       	push	r5
    23fe:	6f 92       	push	r6
    2400:	7f 92       	push	r7
    2402:	8f 92       	push	r8
    2404:	9f 92       	push	r9
    2406:	af 92       	push	r10
    2408:	bf 92       	push	r11
    240a:	cf 92       	push	r12
    240c:	df 92       	push	r13
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	00 d0       	rcall	.+0      	; 0x241c <calcChecksumFRAM+0x26>
    241c:	00 d0       	rcall	.+0      	; 0x241e <calcChecksumFRAM+0x28>
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
    2422:	e3 e8       	ldi	r30, 0x83	; 131
    2424:	f0 e5       	ldi	r31, 0x50	; 80
    2426:	10 92 83 50 	sts	0x5083, r1
    242a:	10 92 84 50 	sts	0x5084, r1
    242e:	10 92 85 50 	sts	0x5085, r1
    2432:	10 92 86 50 	sts	0x5086, r1
    2436:	10 92 87 50 	sts	0x5087, r1
    243a:	10 92 88 50 	sts	0x5088, r1
    243e:	10 92 89 50 	sts	0x5089, r1
    2442:	10 92 8a 50 	sts	0x508A, r1
    2446:	df 01       	movw	r26, r30
    2448:	18 97       	sbiw	r26, 0x08	; 8
    244a:	1c 92       	st	X, r1
    244c:	11 96       	adiw	r26, 0x01	; 1
    244e:	1c 92       	st	X, r1
    2450:	11 97       	sbiw	r26, 0x01	; 1
    2452:	12 96       	adiw	r26, 0x02	; 2
    2454:	1c 92       	st	X, r1
    2456:	12 97       	sbiw	r26, 0x02	; 2
    2458:	13 96       	adiw	r26, 0x03	; 3
    245a:	1c 92       	st	X, r1
    245c:	13 97       	sbiw	r26, 0x03	; 3
    245e:	14 96       	adiw	r26, 0x04	; 4
    2460:	1c 92       	st	X, r1
    2462:	14 97       	sbiw	r26, 0x04	; 4
    2464:	15 96       	adiw	r26, 0x05	; 5
    2466:	1c 92       	st	X, r1
    2468:	15 97       	sbiw	r26, 0x05	; 5
    246a:	16 96       	adiw	r26, 0x06	; 6
    246c:	1c 92       	st	X, r1
    246e:	16 97       	sbiw	r26, 0x06	; 6
    2470:	17 96       	adiw	r26, 0x07	; 7
    2472:	1c 92       	st	X, r1
    2474:	70 97       	sbiw	r30, 0x10	; 16
    2476:	10 82       	st	Z, r1
    2478:	11 82       	std	Z+1, r1	; 0x01
    247a:	12 82       	std	Z+2, r1	; 0x02
    247c:	13 82       	std	Z+3, r1	; 0x03
    247e:	14 82       	std	Z+4, r1	; 0x04
    2480:	15 82       	std	Z+5, r1	; 0x05
    2482:	16 82       	std	Z+6, r1	; 0x06
    2484:	17 82       	std	Z+7, r1	; 0x07
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
    2486:	84 e2       	ldi	r24, 0x24	; 36
    2488:	91 e2       	ldi	r25, 0x21	; 33
    248a:	10 92 24 21 	sts	0x2124, r1
    248e:	fc 01       	movw	r30, r24
    2490:	31 97       	sbiw	r30, 0x01	; 1
    2492:	10 82       	st	Z, r1
    2494:	02 97       	sbiw	r24, 0x02	; 2
    2496:	dc 01       	movw	r26, r24
    2498:	1c 92       	st	X, r1
	FRAMAddress = FR_BASEADD;
    249a:	10 92 5a 40 	sts	0x405A, r1
    249e:	10 92 5b 40 	sts	0x405B, r1
    24a2:	e9 e0       	ldi	r30, 0x09	; 9
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	e9 83       	std	Y+1, r30	; 0x01
    24a8:	fa 83       	std	Y+2, r31	; 0x02
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    24aa:	0f 2e       	mov	r0, r31
    24ac:	f7 ec       	ldi	r31, 0xC7	; 199
    24ae:	8f 2e       	mov	r8, r31
    24b0:	f3 e2       	ldi	r31, 0x23	; 35
    24b2:	9f 2e       	mov	r9, r31
    24b4:	f0 2d       	mov	r31, r0
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    24b6:	44 24       	eor	r4, r4
    24b8:	4a 94       	dec	r4
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
			if(k%9 == 8) sumFRAM[2] += *temp64;
    24ba:	03 e8       	ldi	r16, 0x83	; 131
    24bc:	10 e5       	ldi	r17, 0x50	; 80
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
    24be:	0f 2e       	mov	r0, r31
    24c0:	fb e7       	ldi	r31, 0x7B	; 123
    24c2:	ef 2e       	mov	r14, r31
    24c4:	f0 e5       	ldi	r31, 0x50	; 80
    24c6:	ff 2e       	mov	r15, r31
    24c8:	f0 2d       	mov	r31, r0
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    24ca:	0f 2e       	mov	r0, r31
    24cc:	f3 e7       	ldi	r31, 0x73	; 115
    24ce:	cf 2e       	mov	r12, r31
    24d0:	f0 e5       	ldi	r31, 0x50	; 80
    24d2:	df 2e       	mov	r13, r31
    24d4:	f0 2d       	mov	r31, r0
void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
    24d6:	81 e7       	ldi	r24, 0x71	; 113
    24d8:	9c e1       	ldi	r25, 0x1C	; 28
    24da:	0e 94 9b 11 	call	0x2336	; 0x2336 <readFRAM>
		FRAMAddress += FR_READ_BUFFER_SIZE;
    24de:	80 91 5a 40 	lds	r24, 0x405A
    24e2:	90 91 5b 40 	lds	r25, 0x405B
    24e6:	8f 58       	subi	r24, 0x8F	; 143
    24e8:	93 4e       	sbci	r25, 0xE3	; 227
    24ea:	80 93 5a 40 	sts	0x405A, r24
    24ee:	90 93 5b 40 	sts	0x405B, r25
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    24f6:	0f 2e       	mov	r0, r31
    24f8:	f9 e0       	ldi	r31, 0x09	; 9
    24fa:	2f 2e       	mov	r2, r31
    24fc:	33 24       	eor	r3, r3
    24fe:	f0 2d       	mov	r31, r0
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    2500:	c9 01       	movw	r24, r18
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	0e 94 3a 34 	call	0x6874	; 0x6874 <__udivmodhi4>
    250a:	ac 01       	movw	r20, r24
    250c:	a2 e2       	ldi	r26, 0x22	; 34
    250e:	b1 e2       	ldi	r27, 0x21	; 33
    2510:	a8 0f       	add	r26, r24
    2512:	b9 1f       	adc	r27, r25
    2514:	8c 91       	ld	r24, X
    2516:	f4 01       	movw	r30, r8
    2518:	e2 0f       	add	r30, r18
    251a:	f3 1f       	adc	r31, r19
    251c:	90 81       	ld	r25, Z
    251e:	89 0f       	add	r24, r25
    2520:	8c 93       	st	X, r24
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
    2522:	41 15       	cp	r20, r1
    2524:	51 05       	cpc	r21, r1
    2526:	49 f5       	brne	.+82     	; 0x257a <calcChecksumFRAM+0x184>
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    2528:	f4 01       	movw	r30, r8
    252a:	e2 0f       	add	r30, r18
    252c:	f3 1f       	adc	r31, r19
    252e:	80 81       	ld	r24, Z
    2530:	88 23       	and	r24, r24
    2532:	6c f4       	brge	.+26     	; 0x254e <calcChecksumFRAM+0x158>
    2534:	e0 91 5d 50 	lds	r30, 0x505D
    2538:	f0 91 5e 50 	lds	r31, 0x505E
    253c:	10 82       	st	Z, r1
    253e:	11 82       	std	Z+1, r1	; 0x01
    2540:	12 82       	std	Z+2, r1	; 0x02
    2542:	43 82       	std	Z+3, r4	; 0x03
    2544:	44 82       	std	Z+4, r4	; 0x04
    2546:	45 82       	std	Z+5, r4	; 0x05
    2548:	46 82       	std	Z+6, r4	; 0x06
    254a:	47 82       	std	Z+7, r4	; 0x07
    254c:	0c c0       	rjmp	.+24     	; 0x2566 <calcChecksumFRAM+0x170>
				else *temp64 = 0x0000000000000000;
    254e:	e0 91 5d 50 	lds	r30, 0x505D
    2552:	f0 91 5e 50 	lds	r31, 0x505E
    2556:	10 82       	st	Z, r1
    2558:	11 82       	std	Z+1, r1	; 0x01
    255a:	12 82       	std	Z+2, r1	; 0x02
    255c:	13 82       	std	Z+3, r1	; 0x03
    255e:	14 82       	std	Z+4, r1	; 0x04
    2560:	15 82       	std	Z+5, r1	; 0x05
    2562:	16 82       	std	Z+6, r1	; 0x06
    2564:	17 82       	std	Z+7, r1	; 0x07
				*(((uint8_t*)temp64) + 2) = FRAMReadBuffer[k];
    2566:	f4 01       	movw	r30, r8
    2568:	e2 0f       	add	r30, r18
    256a:	f3 1f       	adc	r31, r19
    256c:	80 81       	ld	r24, Z
    256e:	e0 91 5d 50 	lds	r30, 0x505D
    2572:	f0 91 5e 50 	lds	r31, 0x505E
    2576:	82 83       	std	Z+2, r24	; 0x02
    2578:	18 c0       	rjmp	.+48     	; 0x25aa <calcChecksumFRAM+0x1b4>
			} else if(k%3 == 1) {
    257a:	41 30       	cpi	r20, 0x01	; 1
    257c:	51 05       	cpc	r21, r1
    257e:	61 f4       	brne	.+24     	; 0x2598 <calcChecksumFRAM+0x1a2>
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
    2580:	a0 91 5d 50 	lds	r26, 0x505D
    2584:	b0 91 5e 50 	lds	r27, 0x505E
    2588:	f4 01       	movw	r30, r8
    258a:	e2 0f       	add	r30, r18
    258c:	f3 1f       	adc	r31, r19
    258e:	80 81       	ld	r24, Z
    2590:	11 96       	adiw	r26, 0x01	; 1
    2592:	8c 93       	st	X, r24
    2594:	11 97       	sbiw	r26, 0x01	; 1
    2596:	09 c0       	rjmp	.+18     	; 0x25aa <calcChecksumFRAM+0x1b4>
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
    2598:	a0 91 5d 50 	lds	r26, 0x505D
    259c:	b0 91 5e 50 	lds	r27, 0x505E
    25a0:	f4 01       	movw	r30, r8
    25a2:	e2 0f       	add	r30, r18
    25a4:	f3 1f       	adc	r31, r19
    25a6:	80 81       	ld	r24, Z
    25a8:	8c 93       	st	X, r24
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    25aa:	c9 01       	movw	r24, r18
    25ac:	b1 01       	movw	r22, r2
    25ae:	0e 94 3a 34 	call	0x6874	; 0x6874 <__udivmodhi4>
    25b2:	82 30       	cpi	r24, 0x02	; 2
    25b4:	91 05       	cpc	r25, r1
    25b6:	09 f0       	breq	.+2      	; 0x25ba <calcChecksumFRAM+0x1c4>
    25b8:	74 c0       	rjmp	.+232    	; 0x26a2 <calcChecksumFRAM+0x2ac>
    25ba:	f6 01       	movw	r30, r12
    25bc:	a0 81       	ld	r26, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	62 81       	ldd	r22, Z+2	; 0x02
    25c2:	53 81       	ldd	r21, Z+3	; 0x03
    25c4:	44 81       	ldd	r20, Z+4	; 0x04
    25c6:	95 81       	ldd	r25, Z+5	; 0x05
    25c8:	86 81       	ldd	r24, Z+6	; 0x06
    25ca:	f7 81       	ldd	r31, Z+7	; 0x07
    25cc:	fd 83       	std	Y+5, r31	; 0x05
    25ce:	e0 91 5d 50 	lds	r30, 0x505D
    25d2:	f0 91 5e 50 	lds	r31, 0x505E
    25d6:	50 80       	ld	r5, Z
    25d8:	b1 81       	ldd	r27, Z+1	; 0x01
    25da:	bb 83       	std	Y+3, r27	; 0x03
    25dc:	b2 81       	ldd	r27, Z+2	; 0x02
    25de:	b3 80       	ldd	r11, Z+3	; 0x03
    25e0:	a4 80       	ldd	r10, Z+4	; 0x04
    25e2:	75 80       	ldd	r7, Z+5	; 0x05
    25e4:	66 80       	ldd	r6, Z+6	; 0x06
    25e6:	e7 81       	ldd	r30, Z+7	; 0x07
    25e8:	5a 0e       	add	r5, r26
    25ea:	5e 82       	std	Y+6, r5	; 0x06
    25ec:	f1 e0       	ldi	r31, 0x01	; 1
    25ee:	5a 16       	cp	r5, r26
    25f0:	08 f0       	brcs	.+2      	; 0x25f4 <calcChecksumFRAM+0x1fe>
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	5b 80       	ldd	r5, Y+3	; 0x03
    25f6:	57 0e       	add	r5, r23
    25f8:	5c 82       	std	Y+4, r5	; 0x04
    25fa:	a1 e0       	ldi	r26, 0x01	; 1
    25fc:	57 16       	cp	r5, r23
    25fe:	08 f0       	brcs	.+2      	; 0x2602 <calcChecksumFRAM+0x20c>
    2600:	a0 e0       	ldi	r26, 0x00	; 0
    2602:	7c 81       	ldd	r23, Y+4	; 0x04
    2604:	7f 0f       	add	r23, r31
    2606:	7b 83       	std	Y+3, r23	; 0x03
    2608:	71 e0       	ldi	r23, 0x01	; 1
    260a:	fb 81       	ldd	r31, Y+3	; 0x03
    260c:	5c 80       	ldd	r5, Y+4	; 0x04
    260e:	f5 15       	cp	r31, r5
    2610:	08 f0       	brcs	.+2      	; 0x2614 <calcChecksumFRAM+0x21e>
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	a7 2b       	or	r26, r23
    2616:	b6 0f       	add	r27, r22
    2618:	71 e0       	ldi	r23, 0x01	; 1
    261a:	b6 17       	cp	r27, r22
    261c:	08 f0       	brcs	.+2      	; 0x2620 <calcChecksumFRAM+0x22a>
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	ab 0f       	add	r26, r27
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	ab 17       	cp	r26, r27
    2626:	08 f0       	brcs	.+2      	; 0x262a <calcChecksumFRAM+0x234>
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	76 2b       	or	r23, r22
    262c:	b5 0e       	add	r11, r21
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	b5 16       	cp	r11, r21
    2632:	08 f0       	brcs	.+2      	; 0x2636 <calcChecksumFRAM+0x240>
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	7b 0d       	add	r23, r11
    2638:	51 e0       	ldi	r21, 0x01	; 1
    263a:	7b 15       	cp	r23, r11
    263c:	08 f0       	brcs	.+2      	; 0x2640 <calcChecksumFRAM+0x24a>
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	65 2b       	or	r22, r21
    2642:	a4 0e       	add	r10, r20
    2644:	51 e0       	ldi	r21, 0x01	; 1
    2646:	a4 16       	cp	r10, r20
    2648:	08 f0       	brcs	.+2      	; 0x264c <calcChecksumFRAM+0x256>
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	6a 0d       	add	r22, r10
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	6a 15       	cp	r22, r10
    2652:	08 f0       	brcs	.+2      	; 0x2656 <calcChecksumFRAM+0x260>
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	54 2b       	or	r21, r20
    2658:	79 0e       	add	r7, r25
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	79 16       	cp	r7, r25
    265e:	08 f0       	brcs	.+2      	; 0x2662 <calcChecksumFRAM+0x26c>
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	57 0d       	add	r21, r7
    2664:	91 e0       	ldi	r25, 0x01	; 1
    2666:	57 15       	cp	r21, r7
    2668:	08 f0       	brcs	.+2      	; 0x266c <calcChecksumFRAM+0x276>
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	49 2b       	or	r20, r25
    266e:	68 0e       	add	r6, r24
    2670:	91 e0       	ldi	r25, 0x01	; 1
    2672:	68 16       	cp	r6, r24
    2674:	08 f0       	brcs	.+2      	; 0x2678 <calcChecksumFRAM+0x282>
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	46 0d       	add	r20, r6
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	46 15       	cp	r20, r6
    267e:	08 f0       	brcs	.+2      	; 0x2682 <calcChecksumFRAM+0x28c>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	98 2b       	or	r25, r24
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	e8 0f       	add	r30, r24
    2688:	9e 0f       	add	r25, r30
    268a:	5e 80       	ldd	r5, Y+6	; 0x06
    268c:	f6 01       	movw	r30, r12
    268e:	50 82       	st	Z, r5
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	81 83       	std	Z+1, r24	; 0x01
    2694:	a2 83       	std	Z+2, r26	; 0x02
    2696:	73 83       	std	Z+3, r23	; 0x03
    2698:	64 83       	std	Z+4, r22	; 0x04
    269a:	55 83       	std	Z+5, r21	; 0x05
    269c:	46 83       	std	Z+6, r20	; 0x06
    269e:	97 83       	std	Z+7, r25	; 0x07
    26a0:	ef c0       	rjmp	.+478    	; 0x2880 <calcChecksumFRAM+0x48a>
			if(k%9 == 5) sumFRAM[1] += *temp64;
    26a2:	85 30       	cpi	r24, 0x05	; 5
    26a4:	91 05       	cpc	r25, r1
    26a6:	09 f0       	breq	.+2      	; 0x26aa <calcChecksumFRAM+0x2b4>
    26a8:	74 c0       	rjmp	.+232    	; 0x2792 <calcChecksumFRAM+0x39c>
    26aa:	f7 01       	movw	r30, r14
    26ac:	a0 81       	ld	r26, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	62 81       	ldd	r22, Z+2	; 0x02
    26b2:	53 81       	ldd	r21, Z+3	; 0x03
    26b4:	44 81       	ldd	r20, Z+4	; 0x04
    26b6:	95 81       	ldd	r25, Z+5	; 0x05
    26b8:	86 81       	ldd	r24, Z+6	; 0x06
    26ba:	f7 81       	ldd	r31, Z+7	; 0x07
    26bc:	fd 83       	std	Y+5, r31	; 0x05
    26be:	e0 91 5d 50 	lds	r30, 0x505D
    26c2:	f0 91 5e 50 	lds	r31, 0x505E
    26c6:	50 80       	ld	r5, Z
    26c8:	b1 81       	ldd	r27, Z+1	; 0x01
    26ca:	bb 83       	std	Y+3, r27	; 0x03
    26cc:	b2 81       	ldd	r27, Z+2	; 0x02
    26ce:	b3 80       	ldd	r11, Z+3	; 0x03
    26d0:	a4 80       	ldd	r10, Z+4	; 0x04
    26d2:	75 80       	ldd	r7, Z+5	; 0x05
    26d4:	66 80       	ldd	r6, Z+6	; 0x06
    26d6:	e7 81       	ldd	r30, Z+7	; 0x07
    26d8:	5a 0e       	add	r5, r26
    26da:	5e 82       	std	Y+6, r5	; 0x06
    26dc:	f1 e0       	ldi	r31, 0x01	; 1
    26de:	5a 16       	cp	r5, r26
    26e0:	08 f0       	brcs	.+2      	; 0x26e4 <calcChecksumFRAM+0x2ee>
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	5b 80       	ldd	r5, Y+3	; 0x03
    26e6:	57 0e       	add	r5, r23
    26e8:	5c 82       	std	Y+4, r5	; 0x04
    26ea:	a1 e0       	ldi	r26, 0x01	; 1
    26ec:	57 16       	cp	r5, r23
    26ee:	08 f0       	brcs	.+2      	; 0x26f2 <calcChecksumFRAM+0x2fc>
    26f0:	a0 e0       	ldi	r26, 0x00	; 0
    26f2:	7c 81       	ldd	r23, Y+4	; 0x04
    26f4:	7f 0f       	add	r23, r31
    26f6:	7b 83       	std	Y+3, r23	; 0x03
    26f8:	71 e0       	ldi	r23, 0x01	; 1
    26fa:	fb 81       	ldd	r31, Y+3	; 0x03
    26fc:	5c 80       	ldd	r5, Y+4	; 0x04
    26fe:	f5 15       	cp	r31, r5
    2700:	08 f0       	brcs	.+2      	; 0x2704 <calcChecksumFRAM+0x30e>
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	a7 2b       	or	r26, r23
    2706:	b6 0f       	add	r27, r22
    2708:	71 e0       	ldi	r23, 0x01	; 1
    270a:	b6 17       	cp	r27, r22
    270c:	08 f0       	brcs	.+2      	; 0x2710 <calcChecksumFRAM+0x31a>
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	ab 0f       	add	r26, r27
    2712:	61 e0       	ldi	r22, 0x01	; 1
    2714:	ab 17       	cp	r26, r27
    2716:	08 f0       	brcs	.+2      	; 0x271a <calcChecksumFRAM+0x324>
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	76 2b       	or	r23, r22
    271c:	b5 0e       	add	r11, r21
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	b5 16       	cp	r11, r21
    2722:	08 f0       	brcs	.+2      	; 0x2726 <calcChecksumFRAM+0x330>
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	7b 0d       	add	r23, r11
    2728:	51 e0       	ldi	r21, 0x01	; 1
    272a:	7b 15       	cp	r23, r11
    272c:	08 f0       	brcs	.+2      	; 0x2730 <calcChecksumFRAM+0x33a>
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	65 2b       	or	r22, r21
    2732:	a4 0e       	add	r10, r20
    2734:	51 e0       	ldi	r21, 0x01	; 1
    2736:	a4 16       	cp	r10, r20
    2738:	08 f0       	brcs	.+2      	; 0x273c <calcChecksumFRAM+0x346>
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	6a 0d       	add	r22, r10
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	6a 15       	cp	r22, r10
    2742:	08 f0       	brcs	.+2      	; 0x2746 <calcChecksumFRAM+0x350>
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	54 2b       	or	r21, r20
    2748:	79 0e       	add	r7, r25
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	79 16       	cp	r7, r25
    274e:	08 f0       	brcs	.+2      	; 0x2752 <calcChecksumFRAM+0x35c>
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	57 0d       	add	r21, r7
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	57 15       	cp	r21, r7
    2758:	08 f0       	brcs	.+2      	; 0x275c <calcChecksumFRAM+0x366>
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	49 2b       	or	r20, r25
    275e:	68 0e       	add	r6, r24
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	68 16       	cp	r6, r24
    2764:	08 f0       	brcs	.+2      	; 0x2768 <calcChecksumFRAM+0x372>
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	46 0d       	add	r20, r6
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	46 15       	cp	r20, r6
    276e:	08 f0       	brcs	.+2      	; 0x2772 <calcChecksumFRAM+0x37c>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	98 2b       	or	r25, r24
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	e8 0f       	add	r30, r24
    2778:	9e 0f       	add	r25, r30
    277a:	5e 80       	ldd	r5, Y+6	; 0x06
    277c:	f7 01       	movw	r30, r14
    277e:	50 82       	st	Z, r5
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	81 83       	std	Z+1, r24	; 0x01
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	73 83       	std	Z+3, r23	; 0x03
    2788:	64 83       	std	Z+4, r22	; 0x04
    278a:	55 83       	std	Z+5, r21	; 0x05
    278c:	46 83       	std	Z+6, r20	; 0x06
    278e:	97 83       	std	Z+7, r25	; 0x07
    2790:	77 c0       	rjmp	.+238    	; 0x2880 <calcChecksumFRAM+0x48a>
			if(k%9 == 8) sumFRAM[2] += *temp64;
    2792:	88 30       	cpi	r24, 0x08	; 8
    2794:	91 05       	cpc	r25, r1
    2796:	09 f0       	breq	.+2      	; 0x279a <calcChecksumFRAM+0x3a4>
    2798:	73 c0       	rjmp	.+230    	; 0x2880 <calcChecksumFRAM+0x48a>
    279a:	f8 01       	movw	r30, r16
    279c:	a0 81       	ld	r26, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	62 81       	ldd	r22, Z+2	; 0x02
    27a2:	53 81       	ldd	r21, Z+3	; 0x03
    27a4:	44 81       	ldd	r20, Z+4	; 0x04
    27a6:	95 81       	ldd	r25, Z+5	; 0x05
    27a8:	86 81       	ldd	r24, Z+6	; 0x06
    27aa:	f7 81       	ldd	r31, Z+7	; 0x07
    27ac:	fd 83       	std	Y+5, r31	; 0x05
    27ae:	e0 91 5d 50 	lds	r30, 0x505D
    27b2:	f0 91 5e 50 	lds	r31, 0x505E
    27b6:	50 80       	ld	r5, Z
    27b8:	b1 81       	ldd	r27, Z+1	; 0x01
    27ba:	bb 83       	std	Y+3, r27	; 0x03
    27bc:	b2 81       	ldd	r27, Z+2	; 0x02
    27be:	b3 80       	ldd	r11, Z+3	; 0x03
    27c0:	a4 80       	ldd	r10, Z+4	; 0x04
    27c2:	75 80       	ldd	r7, Z+5	; 0x05
    27c4:	66 80       	ldd	r6, Z+6	; 0x06
    27c6:	e7 81       	ldd	r30, Z+7	; 0x07
    27c8:	5a 0e       	add	r5, r26
    27ca:	5e 82       	std	Y+6, r5	; 0x06
    27cc:	f1 e0       	ldi	r31, 0x01	; 1
    27ce:	5a 16       	cp	r5, r26
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <calcChecksumFRAM+0x3de>
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	5b 80       	ldd	r5, Y+3	; 0x03
    27d6:	57 0e       	add	r5, r23
    27d8:	5c 82       	std	Y+4, r5	; 0x04
    27da:	a1 e0       	ldi	r26, 0x01	; 1
    27dc:	57 16       	cp	r5, r23
    27de:	08 f0       	brcs	.+2      	; 0x27e2 <calcChecksumFRAM+0x3ec>
    27e0:	a0 e0       	ldi	r26, 0x00	; 0
    27e2:	7c 81       	ldd	r23, Y+4	; 0x04
    27e4:	7f 0f       	add	r23, r31
    27e6:	7b 83       	std	Y+3, r23	; 0x03
    27e8:	71 e0       	ldi	r23, 0x01	; 1
    27ea:	fb 81       	ldd	r31, Y+3	; 0x03
    27ec:	5c 80       	ldd	r5, Y+4	; 0x04
    27ee:	f5 15       	cp	r31, r5
    27f0:	08 f0       	brcs	.+2      	; 0x27f4 <calcChecksumFRAM+0x3fe>
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	a7 2b       	or	r26, r23
    27f6:	b6 0f       	add	r27, r22
    27f8:	71 e0       	ldi	r23, 0x01	; 1
    27fa:	b6 17       	cp	r27, r22
    27fc:	08 f0       	brcs	.+2      	; 0x2800 <calcChecksumFRAM+0x40a>
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	ab 0f       	add	r26, r27
    2802:	61 e0       	ldi	r22, 0x01	; 1
    2804:	ab 17       	cp	r26, r27
    2806:	08 f0       	brcs	.+2      	; 0x280a <calcChecksumFRAM+0x414>
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	76 2b       	or	r23, r22
    280c:	b5 0e       	add	r11, r21
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	b5 16       	cp	r11, r21
    2812:	08 f0       	brcs	.+2      	; 0x2816 <calcChecksumFRAM+0x420>
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	7b 0d       	add	r23, r11
    2818:	51 e0       	ldi	r21, 0x01	; 1
    281a:	7b 15       	cp	r23, r11
    281c:	08 f0       	brcs	.+2      	; 0x2820 <calcChecksumFRAM+0x42a>
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	65 2b       	or	r22, r21
    2822:	a4 0e       	add	r10, r20
    2824:	51 e0       	ldi	r21, 0x01	; 1
    2826:	a4 16       	cp	r10, r20
    2828:	08 f0       	brcs	.+2      	; 0x282c <calcChecksumFRAM+0x436>
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	6a 0d       	add	r22, r10
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	6a 15       	cp	r22, r10
    2832:	08 f0       	brcs	.+2      	; 0x2836 <calcChecksumFRAM+0x440>
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	54 2b       	or	r21, r20
    2838:	79 0e       	add	r7, r25
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	79 16       	cp	r7, r25
    283e:	08 f0       	brcs	.+2      	; 0x2842 <calcChecksumFRAM+0x44c>
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	57 0d       	add	r21, r7
    2844:	91 e0       	ldi	r25, 0x01	; 1
    2846:	57 15       	cp	r21, r7
    2848:	08 f0       	brcs	.+2      	; 0x284c <calcChecksumFRAM+0x456>
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	49 2b       	or	r20, r25
    284e:	68 0e       	add	r6, r24
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	68 16       	cp	r6, r24
    2854:	08 f0       	brcs	.+2      	; 0x2858 <calcChecksumFRAM+0x462>
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	46 0d       	add	r20, r6
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	46 15       	cp	r20, r6
    285e:	08 f0       	brcs	.+2      	; 0x2862 <calcChecksumFRAM+0x46c>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	98 2b       	or	r25, r24
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	e8 0f       	add	r30, r24
    2868:	9e 0f       	add	r25, r30
    286a:	5e 80       	ldd	r5, Y+6	; 0x06
    286c:	f8 01       	movw	r30, r16
    286e:	50 82       	st	Z, r5
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	81 83       	std	Z+1, r24	; 0x01
    2874:	a2 83       	std	Z+2, r26	; 0x02
    2876:	73 83       	std	Z+3, r23	; 0x03
    2878:	64 83       	std	Z+4, r22	; 0x04
    287a:	55 83       	std	Z+5, r21	; 0x05
    287c:	46 83       	std	Z+6, r20	; 0x06
    287e:	97 83       	std	Z+7, r25	; 0x07
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    2880:	2f 5f       	subi	r18, 0xFF	; 255
    2882:	3f 4f       	sbci	r19, 0xFF	; 255
    2884:	9c e1       	ldi	r25, 0x1C	; 28
    2886:	21 37       	cpi	r18, 0x71	; 113
    2888:	39 07       	cpc	r19, r25
    288a:	09 f0       	breq	.+2      	; 0x288e <calcChecksumFRAM+0x498>
    288c:	39 ce       	rjmp	.-910    	; 0x2500 <calcChecksumFRAM+0x10a>
    288e:	a9 81       	ldd	r26, Y+1	; 0x01
    2890:	ba 81       	ldd	r27, Y+2	; 0x02
    2892:	11 97       	sbiw	r26, 0x01	; 1
    2894:	a9 83       	std	Y+1, r26	; 0x01
    2896:	ba 83       	std	Y+2, r27	; 0x02

void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
    2898:	10 97       	sbiw	r26, 0x00	; 0
    289a:	09 f0       	breq	.+2      	; 0x289e <calcChecksumFRAM+0x4a8>
    289c:	1c ce       	rjmp	.-968    	; 0x24d6 <calcChecksumFRAM+0xe0>
			
		}	
		
	}
	
}
    289e:	26 96       	adiw	r28, 0x06	; 6
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	bf 90       	pop	r11
    28b6:	af 90       	pop	r10
    28b8:	9f 90       	pop	r9
    28ba:	8f 90       	pop	r8
    28bc:	7f 90       	pop	r7
    28be:	6f 90       	pop	r6
    28c0:	5f 90       	pop	r5
    28c2:	4f 90       	pop	r4
    28c4:	3f 90       	pop	r3
    28c6:	2f 90       	pop	r2
    28c8:	08 95       	ret

000028ca <FRAMTest1Channel>:

	ADCPower(FALSE);
	
}

void FRAMTest1Channel(void) {
    28ca:	8f 92       	push	r8
    28cc:	9f 92       	push	r9
    28ce:	af 92       	push	r10
    28d0:	bf 92       	push	r11
    28d2:	cf 92       	push	r12
    28d4:	df 92       	push	r13
    28d6:	ef 92       	push	r14
    28d8:	0f 93       	push	r16

	CO_collectSeismic1Channel(ADC_CH_8_gc, FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
    28da:	0f 92       	push	r0
    28dc:	0f 92       	push	r0
    28de:	80 e1       	ldi	r24, 0x10	; 16
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	ed b7       	in	r30, 0x3d	; 61
    28e4:	fe b7       	in	r31, 0x3e	; 62
    28e6:	81 83       	std	Z+1, r24	; 0x01
    28e8:	92 83       	std	Z+2, r25	; 0x02
    28ea:	87 e0       	ldi	r24, 0x07	; 7
    28ec:	68 ec       	ldi	r22, 0xC8	; 200
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	05 e1       	ldi	r16, 0x15	; 21
    28f4:	ee 24       	eor	r14, r14
    28f6:	e3 94       	inc	r14
    28f8:	0f 2e       	mov	r0, r31
    28fa:	fd e0       	ldi	r31, 0x0D	; 13
    28fc:	cf 2e       	mov	r12, r31
    28fe:	dd 24       	eor	r13, r13
    2900:	f0 2d       	mov	r31, r0
    2902:	0f 2e       	mov	r0, r31
    2904:	fe e0       	ldi	r31, 0x0E	; 14
    2906:	af 2e       	mov	r10, r31
    2908:	bb 24       	eor	r11, r11
    290a:	f0 2d       	mov	r31, r0
    290c:	0f 2e       	mov	r0, r31
    290e:	ff e0       	ldi	r31, 0x0F	; 15
    2910:	8f 2e       	mov	r8, r31
    2912:	99 24       	eor	r9, r9
    2914:	f0 2d       	mov	r31, r0
    2916:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <CO_collectSeismic1Channel>
	GAIN_1_gc, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2924:	8f ec       	ldi	r24, 0xCF	; 207
    2926:	97 e0       	ldi	r25, 0x07	; 7
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <FRAMTest1Channel+0x5e>
    292c:	00 c0       	rjmp	.+0      	; 0x292e <FRAMTest1Channel+0x64>
    292e:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    2930:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <calcChecksumFRAM>

	ADCPower(FALSE);
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>

}
    293a:	0f 91       	pop	r16
    293c:	ef 90       	pop	r14
    293e:	df 90       	pop	r13
    2940:	cf 90       	pop	r12
    2942:	bf 90       	pop	r11
    2944:	af 90       	pop	r10
    2946:	9f 90       	pop	r9
    2948:	8f 90       	pop	r8
    294a:	08 95       	ret

0000294c <FRAMTest3Channel>:
	SPICS(FALSE);
	SPIDisable();

}

void FRAMTest3Channel(void) {
    294c:	8f 92       	push	r8
    294e:	9f 92       	push	r9
    2950:	af 92       	push	r10
    2952:	bf 92       	push	r11
    2954:	cf 92       	push	r12
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	00 d0       	rcall	.+0      	; 0x2964 <FRAMTest3Channel+0x18>
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
	uint8_t gains[3] = { GAIN_1_gc, GAIN_1_gc, GAIN_1_gc };
    2968:	19 82       	std	Y+1, r1	; 0x01
    296a:	1a 82       	std	Y+2, r1	; 0x02
    296c:	1b 82       	std	Y+3, r1	; 0x03
			
	CO_collectSeismic3Channel(FILTER_CH_2AND6_bm | FILTER_CH_3AND7_bm |
    296e:	8e ec       	ldi	r24, 0xCE	; 206
    2970:	be 01       	movw	r22, r28
    2972:	6f 5f       	subi	r22, 0xFF	; 255
    2974:	7f 4f       	sbci	r23, 0xFF	; 255
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	25 e1       	ldi	r18, 0x15	; 21
    297a:	01 e0       	ldi	r16, 0x01	; 1
    297c:	0f 2e       	mov	r0, r31
    297e:	fd e0       	ldi	r31, 0x0D	; 13
    2980:	ef 2e       	mov	r14, r31
    2982:	ff 24       	eor	r15, r15
    2984:	f0 2d       	mov	r31, r0
    2986:	0f 2e       	mov	r0, r31
    2988:	fe e0       	ldi	r31, 0x0E	; 14
    298a:	cf 2e       	mov	r12, r31
    298c:	dd 24       	eor	r13, r13
    298e:	f0 2d       	mov	r31, r0
    2990:	0f 2e       	mov	r0, r31
    2992:	ff e0       	ldi	r31, 0x0F	; 15
    2994:	af 2e       	mov	r10, r31
    2996:	bb 24       	eor	r11, r11
    2998:	f0 2d       	mov	r31, r0
    299a:	88 24       	eor	r8, r8
    299c:	99 24       	eor	r9, r9
    299e:	68 94       	set
    29a0:	84 f8       	bld	r8, 4
    29a2:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <CO_collectSeismic3Channel>
		FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
		gains, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
    29ac:	8f ec       	ldi	r24, 0xCF	; 207
    29ae:	97 e0       	ldi	r25, 0x07	; 7
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <FRAMTest3Channel+0x64>
    29b4:	00 c0       	rjmp	.+0      	; 0x29b6 <FRAMTest3Channel+0x6a>
    29b6:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    29b8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <calcChecksumFRAM>

	ADCPower(FALSE);
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	
}
    29c2:	23 96       	adiw	r28, 0x03	; 3
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	df 90       	pop	r13
    29d4:	cf 90       	pop	r12
    29d6:	bf 90       	pop	r11
    29d8:	af 90       	pop	r10
    29da:	9f 90       	pop	r9
    29dc:	8f 90       	pop	r8
    29de:	08 95       	ret

000029e0 <FRAMWriteKnowns>:

	ADCPower(FALSE);

}

void FRAMWriteKnowns() {
    29e0:	2f 92       	push	r2
    29e2:	3f 92       	push	r3
    29e4:	4f 92       	push	r4
    29e6:	5f 92       	push	r5
    29e8:	6f 92       	push	r6
    29ea:	7f 92       	push	r7
    29ec:	8f 92       	push	r8
    29ee:	9f 92       	push	r9
    29f0:	af 92       	push	r10
    29f2:	bf 92       	push	r11
    29f4:	cf 92       	push	r12
    29f6:	df 92       	push	r13
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
	FRAMAddress = FR_BASEADD;
    2a04:	10 92 5a 40 	sts	0x405A, r1
    2a08:	10 92 5b 40 	sts	0x405B, r1
	sampleCount = 0;
    2a0c:	10 92 6c 50 	sts	0x506C, r1
    2a10:	10 92 6d 50 	sts	0x506D, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    2a14:	87 e2       	ldi	r24, 0x27	; 39
    2a16:	91 e2       	ldi	r25, 0x21	; 33
    2a18:	10 92 27 21 	sts	0x2127, r1
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	31 97       	sbiw	r30, 0x01	; 1
    2a20:	10 82       	st	Z, r1
    2a22:	02 97       	sbiw	r24, 0x02	; 2
    2a24:	ec 01       	movw	r28, r24
    2a26:	18 82       	st	Y, r1
	
	ADCPower(TRUE);
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	SPIInit(SPI_MODE_1_gc);
    2a2e:	84 e0       	ldi	r24, 0x04	; 4
    2a30:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2a34:	80 ed       	ldi	r24, 0xD0	; 208
    2a36:	80 93 c0 08 	sts	0x08C0, r24
	SPIBuffer[0] = 0x0D;
    2a3a:	8d e0       	ldi	r24, 0x0D	; 13
    2a3c:	80 93 5f 50 	sts	0x505F, r24
	SPIBuffer[1] = 0xF3;
    2a40:	83 ef       	ldi	r24, 0xF3	; 243
    2a42:	80 93 60 50 	sts	0x5060, r24
	SPIBuffer[2] = 0x57;
    2a46:	87 e5       	ldi	r24, 0x57	; 87
    2a48:	80 93 61 50 	sts	0x5061, r24
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    2a4c:	80 91 6c 50 	lds	r24, 0x506C
    2a50:	90 91 6d 50 	lds	r25, 0x506D
    2a54:	d5 e5       	ldi	r29, 0x55	; 85
    2a56:	83 35       	cpi	r24, 0x53	; 83
    2a58:	9d 07       	cpc	r25, r29
    2a5a:	08 f0       	brcs	.+2      	; 0x2a5e <FRAMWriteKnowns+0x7e>
    2a5c:	ac c0       	rjmp	.+344    	; 0x2bb6 <FRAMWriteKnowns+0x1d6>
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2a5e:	00 e4       	ldi	r16, 0x40	; 64
    2a60:	16 e0       	ldi	r17, 0x06	; 6
    2a62:	30 e1       	ldi	r19, 0x10	; 16
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2a64:	28 e0       	ldi	r18, 0x08	; 8
		nop();
		SPIC.DATA = FR_WREN;
    2a66:	e0 ec       	ldi	r30, 0xC0	; 192
    2a68:	f8 e0       	ldi	r31, 0x08	; 8
    2a6a:	0f 2e       	mov	r0, r31
    2a6c:	f6 e0       	ldi	r31, 0x06	; 6
    2a6e:	9f 2e       	mov	r9, r31
    2a70:	f0 2d       	mov	r31, r0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
    2a72:	ab e6       	ldi	r26, 0x6B	; 107
    2a74:	b0 e5       	ldi	r27, 0x50	; 80
		PORTB.OUTSET = PIN3_bm;  // latch opcode
		nop(); // time for CS_FRAM to accept high signal
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
		nop();
		SPIC.DATA = FR_WRITE;
    2a76:	88 24       	eor	r8, r8
    2a78:	68 94       	set
    2a7a:	81 f8       	bld	r8, 1
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    2a7c:	0f 2e       	mov	r0, r31
    2a7e:	fa e5       	ldi	r31, 0x5A	; 90
    2a80:	ef 2e       	mov	r14, r31
    2a82:	f0 e4       	ldi	r31, 0x40	; 64
    2a84:	ff 2e       	mov	r15, r31
    2a86:	f0 2d       	mov	r31, r0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[0];
    2a88:	bd 01       	movw	r22, r26
    2a8a:	6c 50       	subi	r22, 0x0C	; 12
    2a8c:	70 40       	sbci	r23, 0x00	; 0
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[1];
    2a8e:	0f 2e       	mov	r0, r31
    2a90:	f5 ef       	ldi	r31, 0xF5	; 245
    2a92:	6f 2e       	mov	r6, r31
    2a94:	ff ef       	ldi	r31, 0xFF	; 255
    2a96:	7f 2e       	mov	r7, r31
    2a98:	f0 2d       	mov	r31, r0
    2a9a:	6a 0e       	add	r6, r26
    2a9c:	7b 1e       	adc	r7, r27
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
		SPIC.DATA = SPIBuffer[2];
    2a9e:	0f 2e       	mov	r0, r31
    2aa0:	f6 ef       	ldi	r31, 0xF6	; 246
    2aa2:	4f 2e       	mov	r4, r31
    2aa4:	ff ef       	ldi	r31, 0xFF	; 255
    2aa6:	5f 2e       	mov	r5, r31
    2aa8:	f0 2d       	mov	r31, r0
    2aaa:	4a 0e       	add	r4, r26
    2aac:	5b 1e       	adc	r5, r27
			
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
		
		FRAMAddress +=3;
		checksumADC[0] += SPIBuffer[0];
    2aae:	45 e2       	ldi	r20, 0x25	; 37
    2ab0:	51 e2       	ldi	r21, 0x21	; 33
		checksumADC[1] += SPIBuffer[1];
    2ab2:	6a 01       	movw	r12, r20
    2ab4:	08 94       	sec
    2ab6:	c1 1c       	adc	r12, r1
    2ab8:	d1 1c       	adc	r13, r1
    2aba:	1b 01       	movw	r2, r22
    2abc:	08 94       	sec
    2abe:	21 1c       	adc	r2, r1
    2ac0:	31 1c       	adc	r3, r1
		checksumADC[2] += SPIBuffer[2];
    2ac2:	aa 24       	eor	r10, r10
    2ac4:	bb 24       	eor	r11, r11
    2ac6:	68 94       	set
    2ac8:	a1 f8       	bld	r10, 1
    2aca:	a4 0e       	add	r10, r20
    2acc:	b5 1e       	adc	r11, r21
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2ace:	e8 01       	movw	r28, r16
    2ad0:	3e 83       	std	Y+6, r19	; 0x06
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2ad2:	20 93 26 06 	sts	0x0626, r18
		nop();
    2ad6:	00 00       	nop
		SPIC.DATA = FR_WREN;
    2ad8:	93 82       	std	Z+3, r9	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	88 23       	and	r24, r24
    2ade:	ec f7       	brge	.-6      	; 0x2ada <FRAMWriteKnowns+0xfa>
		SPIBuffer[12] = SPIC.DATA;
    2ae0:	83 81       	ldd	r24, Z+3	; 0x03
    2ae2:	8c 93       	st	X, r24
		PORTB.OUTSET = PIN3_bm;  // latch opcode
    2ae4:	20 93 25 06 	sts	0x0625, r18
		nop(); // time for CS_FRAM to accept high signal
    2ae8:	00 00       	nop
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2aea:	20 93 26 06 	sts	0x0626, r18
		nop();
    2aee:	00 00       	nop
		SPIC.DATA = FR_WRITE;
    2af0:	83 82       	std	Z+3, r8	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	88 23       	and	r24, r24
    2af6:	ec f7       	brge	.-6      	; 0x2af2 <FRAMWriteKnowns+0x112>
		SPIBuffer[12] = SPIC.DATA;
    2af8:	83 81       	ldd	r24, Z+3	; 0x03
    2afa:	8c 93       	st	X, r24
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    2afc:	e7 01       	movw	r28, r14
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	88 23       	and	r24, r24
    2b06:	ec f7       	brge	.-6      	; 0x2b02 <FRAMWriteKnowns+0x122>
		SPIBuffer[12] = SPIC.DATA;
    2b08:	83 81       	ldd	r24, Z+3	; 0x03
    2b0a:	8c 93       	st	X, r24
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
    2b0c:	e7 01       	movw	r28, r14
    2b0e:	88 81       	ld	r24, Y
    2b10:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	88 23       	and	r24, r24
    2b16:	ec f7       	brge	.-6      	; 0x2b12 <FRAMWriteKnowns+0x132>
		SPIBuffer[12] = SPIC.DATA;
    2b18:	83 81       	ldd	r24, Z+3	; 0x03
    2b1a:	8c 93       	st	X, r24
		SPIC.DATA = SPIBuffer[0];
    2b1c:	eb 01       	movw	r28, r22
    2b1e:	88 81       	ld	r24, Y
    2b20:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	88 23       	and	r24, r24
    2b26:	ec f7       	brge	.-6      	; 0x2b22 <FRAMWriteKnowns+0x142>
		SPIBuffer[12] = SPIC.DATA;
    2b28:	83 81       	ldd	r24, Z+3	; 0x03
    2b2a:	8c 93       	st	X, r24
		SPIC.DATA = SPIBuffer[1];
    2b2c:	e3 01       	movw	r28, r6
    2b2e:	88 81       	ld	r24, Y
    2b30:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	88 23       	and	r24, r24
    2b36:	ec f7       	brge	.-6      	; 0x2b32 <FRAMWriteKnowns+0x152>
		SPIBuffer[12] = SPIC.DATA;
    2b38:	83 81       	ldd	r24, Z+3	; 0x03
    2b3a:	8c 93       	st	X, r24
		SPIC.DATA = SPIBuffer[2];
    2b3c:	e2 01       	movw	r28, r4
    2b3e:	88 81       	ld	r24, Y
    2b40:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	88 23       	and	r24, r24
    2b46:	ec f7       	brge	.-6      	; 0x2b42 <FRAMWriteKnowns+0x162>
		SPIBuffer[12] = SPIC.DATA;
    2b48:	83 81       	ldd	r24, Z+3	; 0x03
    2b4a:	8c 93       	st	X, r24
			
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    2b4c:	20 93 25 06 	sts	0x0625, r18
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    2b50:	e8 01       	movw	r28, r16
    2b52:	3d 83       	std	Y+5, r19	; 0x05
		
		FRAMAddress +=3;
    2b54:	80 91 5a 40 	lds	r24, 0x405A
    2b58:	90 91 5b 40 	lds	r25, 0x405B
    2b5c:	03 96       	adiw	r24, 0x03	; 3
    2b5e:	80 93 5a 40 	sts	0x405A, r24
    2b62:	90 93 5b 40 	sts	0x405B, r25
		checksumADC[0] += SPIBuffer[0];
    2b66:	ea 01       	movw	r28, r20
    2b68:	88 81       	ld	r24, Y
    2b6a:	eb 01       	movw	r28, r22
    2b6c:	98 81       	ld	r25, Y
    2b6e:	89 0f       	add	r24, r25
    2b70:	ea 01       	movw	r28, r20
    2b72:	88 83       	st	Y, r24
		checksumADC[1] += SPIBuffer[1];
    2b74:	e6 01       	movw	r28, r12
    2b76:	88 81       	ld	r24, Y
    2b78:	e1 01       	movw	r28, r2
    2b7a:	98 81       	ld	r25, Y
    2b7c:	89 0f       	add	r24, r25
    2b7e:	e6 01       	movw	r28, r12
    2b80:	88 83       	st	Y, r24
		checksumADC[2] += SPIBuffer[2];
    2b82:	e5 01       	movw	r28, r10
    2b84:	88 81       	ld	r24, Y
    2b86:	c1 e6       	ldi	r28, 0x61	; 97
    2b88:	d0 e5       	ldi	r29, 0x50	; 80
    2b8a:	98 81       	ld	r25, Y
    2b8c:	89 0f       	add	r24, r25
    2b8e:	e5 01       	movw	r28, r10
    2b90:	88 83       	st	Y, r24
		
		sampleCount++;
    2b92:	80 91 6c 50 	lds	r24, 0x506C
    2b96:	90 91 6d 50 	lds	r25, 0x506D
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	80 93 6c 50 	sts	0x506C, r24
    2ba0:	90 93 6d 50 	sts	0x506D, r25
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    2ba4:	80 91 6c 50 	lds	r24, 0x506C
    2ba8:	90 91 6d 50 	lds	r25, 0x506D
    2bac:	d5 e5       	ldi	r29, 0x55	; 85
    2bae:	83 35       	cpi	r24, 0x53	; 83
    2bb0:	9d 07       	cpc	r25, r29
    2bb2:	08 f4       	brcc	.+2      	; 0x2bb6 <FRAMWriteKnowns+0x1d6>
    2bb4:	8c cf       	rjmp	.-232    	; 0x2ace <FRAMWriteKnowns+0xee>
		checksumADC[2] += SPIBuffer[2];
		
		sampleCount++;
	}
	
	SPIDisable();
    2bb6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
	ADCPower(FALSE);
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
}
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	bf 90       	pop	r11
    2bd2:	af 90       	pop	r10
    2bd4:	9f 90       	pop	r9
    2bd6:	8f 90       	pop	r8
    2bd8:	7f 90       	pop	r7
    2bda:	6f 90       	pop	r6
    2bdc:	5f 90       	pop	r5
    2bde:	4f 90       	pop	r4
    2be0:	3f 90       	pop	r3
    2be2:	2f 90       	pop	r2
    2be4:	08 95       	ret

00002be6 <FRAMWriteKnownsCheck>:
	
}


void FRAMWriteKnownsCheck() {
	FRAMWriteKnowns();
    2be6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <FRAMWriteKnowns>
	ADCPower(TRUE);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
    2bf0:	8f ec       	ldi	r24, 0xCF	; 207
    2bf2:	97 e0       	ldi	r25, 0x07	; 7
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <FRAMWriteKnownsCheck+0xe>
    2bf8:	00 c0       	rjmp	.+0      	; 0x2bfa <FRAMWriteKnownsCheck+0x14>
    2bfa:	00 00       	nop

	_delay_us(250);
	calcChecksumFRAM();
    2bfc:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <calcChecksumFRAM>

	ADCPower(FALSE);
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>

}
    2c06:	08 95       	ret

00002c08 <SDHC_CS>:
void SDHC_write_block(uint8_t *buffer, uint16_t address, uint16_t numBlocks);
void SDHC_read_register(uint8_t *buffer, uint8_t cmd);

void SDHC_CS(uint8_t enable) {
		
}
    2c08:	08 95       	ret

00002c0a <SPI_write>:


//the following command writes/reads a byte via spi
uint8_t SPI_write(uint8_t byteToSend){
	uint8_t data;
	SPIC.DATA = byteToSend;
    2c0a:	e0 ec       	ldi	r30, 0xC0	; 192
    2c0c:	f8 e0       	ldi	r31, 0x08	; 8
    2c0e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	88 23       	and	r24, r24
    2c14:	ec f7       	brge	.-6      	; 0x2c10 <SPI_write+0x6>
	data = SPIC.DATA; //read SPI data register to reset status flag
    2c16:	e0 ec       	ldi	r30, 0xC0	; 192
    2c18:	f8 e0       	ldi	r31, 0x08	; 8
    2c1a:	83 81       	ldd	r24, Z+3	; 0x03
	return data;
}
    2c1c:	08 95       	ret

00002c1e <SD_command>:
//the following command writes a command to the sd card and returns a response (if any) or 0xFF if no response
uint8_t SD_command(uint8_t cmd, uint32_t arg, uint8_t crc, int read) {
    2c1e:	8f 92       	push	r8
    2c20:	9f 92       	push	r9
    2c22:	af 92       	push	r10
    2c24:	bf 92       	push	r11
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	84 2e       	mov	r8, r20
    2c38:	a5 2e       	mov	r10, r21
    2c3a:	c6 2e       	mov	r12, r22
    2c3c:	c7 2f       	mov	r28, r23
    2c3e:	d2 2f       	mov	r29, r18
    2c40:	78 01       	movw	r14, r16
	
	SPI_write(SDHC_COMMAND_START | cmd);
    2c42:	80 64       	ori	r24, 0x40	; 64
    2c44:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
	SPI_write(arg>>24 & LSBYTE_MASK);
    2c48:	8c 2f       	mov	r24, r28
    2c4a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
	SPI_write(arg>>16 & LSBYTE_MASK);
    2c4e:	8c 2d       	mov	r24, r12
    2c50:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
	SPI_write(arg>>8 & LSBYTE_MASK);
    2c54:	8a 2d       	mov	r24, r10
    2c56:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
	SPI_write(arg & LSBYTE_MASK);
    2c5a:	88 2d       	mov	r24, r8
    2c5c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
	SPI_write(crc);
    2c60:	8d 2f       	mov	r24, r29
    2c62:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
	
	for(int i=0; i<read; i++){
    2c66:	10 16       	cp	r1, r16
    2c68:	11 06       	cpc	r1, r17
    2c6a:	64 f5       	brge	.+88     	; 0x2cc4 <SD_command+0xa6>
    2c6c:	00 e0       	ldi	r16, 0x00	; 0
    2c6e:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(SDHC_DUMMY_BYTE);
    2c70:	0f 2e       	mov	r0, r31
    2c72:	fd e0       	ldi	r31, 0x0D	; 13
    2c74:	cf 2e       	mov	r12, r31
    2c76:	dd 24       	eor	r13, r13
    2c78:	f0 2d       	mov	r31, r0
    2c7a:	0f 2e       	mov	r0, r31
    2c7c:	fb e8       	ldi	r31, 0x8B	; 139
    2c7e:	af 2e       	mov	r10, r31
    2c80:	f0 e5       	ldi	r31, 0x50	; 80
    2c82:	bf 2e       	mov	r11, r31
    2c84:	f0 2d       	mov	r31, r0
    2c86:	c8 01       	movw	r24, r16
    2c88:	b6 01       	movw	r22, r12
    2c8a:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    2c8e:	ec 01       	movw	r28, r24
    2c90:	8f ef       	ldi	r24, 0xFF	; 255
    2c92:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2c96:	f5 01       	movw	r30, r10
    2c98:	ec 0f       	add	r30, r28
    2c9a:	fd 1f       	adc	r31, r29
    2c9c:	80 83       	st	Z, r24
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ca2:	49 f0       	breq	.+18     	; 0x2cb6 <SD_command+0x98>
			 Buffer[1] = Buffer[i%13];
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e5 57       	subi	r30, 0x75	; 117
    2ca8:	ff 4a       	sbci	r31, 0xAF	; 175
    2caa:	80 81       	ld	r24, Z
    2cac:	80 93 8c 50 	sts	0x508C, r24
			 return Buffer[1];
    2cb0:	80 91 8c 50 	lds	r24, 0x508C
    2cb4:	08 c0       	rjmp	.+16     	; 0x2cc6 <SD_command+0xa8>
	SPI_write(arg>>16 & LSBYTE_MASK);
	SPI_write(arg>>8 & LSBYTE_MASK);
	SPI_write(arg & LSBYTE_MASK);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    2cb6:	0f 5f       	subi	r16, 0xFF	; 255
    2cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cba:	0e 15       	cp	r16, r14
    2cbc:	1f 05       	cpc	r17, r15
    2cbe:	19 f7       	brne	.-58     	; 0x2c86 <SD_command+0x68>
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
			 Buffer[1] = Buffer[i%13];
			 return Buffer[1];
		}			
	}
	return SDHC_DUMMY_BYTE;	
    2cc0:	8f ef       	ldi	r24, 0xFF	; 255
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <SD_command+0xa8>
    2cc4:	8f ef       	ldi	r24, 0xFF	; 255
}
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	ff 90       	pop	r15
    2cd0:	ef 90       	pop	r14
    2cd2:	df 90       	pop	r13
    2cd4:	cf 90       	pop	r12
    2cd6:	bf 90       	pop	r11
    2cd8:	af 90       	pop	r10
    2cda:	9f 90       	pop	r9
    2cdc:	8f 90       	pop	r8
    2cde:	08 95       	ret

00002ce0 <SD_write_block>:
//the following command writes one sector to the sdhc card
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
    2ce0:	6f 92       	push	r6
    2ce2:	7f 92       	push	r7
    2ce4:	8f 92       	push	r8
    2ce6:	9f 92       	push	r9
    2ce8:	af 92       	push	r10
    2cea:	bf 92       	push	r11
    2cec:	cf 92       	push	r12
    2cee:	df 92       	push	r13
    2cf0:	ef 92       	push	r14
    2cf2:	ff 92       	push	r15
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	4b 01       	movw	r8, r22
    2cfe:	5c 01       	movw	r10, r24
    2d00:	74 2e       	mov	r7, r20
    2d02:	65 2e       	mov	r6, r21
    2d04:	69 01       	movw	r12, r18
	SPIInit(SPI_MODE_0_gc);
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	7c 01       	movw	r14, r24
    2d18:	ec 18       	sub	r14, r12
    2d1a:	fd 08       	sbc	r15, r13
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	e8 16       	cp	r14, r24
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	f8 06       	cpc	r15, r24
    2d24:	11 f4       	brne	.+4      	; 0x2d2a <SD_write_block+0x4a>
    2d26:	ee 24       	eor	r14, r14
    2d28:	ff 24       	eor	r15, r15
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    2d2a:	cb e0       	ldi	r28, 0x0B	; 11
    2d2c:	d0 e0       	ldi	r29, 0x00	; 0
    2d2e:	03 c0       	rjmp	.+6      	; 0x2d36 <SD_write_block+0x56>
    2d30:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <SD_write_block+0x56>
    2d34:	ff cf       	rjmp	.-2      	; 0x2d34 <SD_write_block+0x54>
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    2d36:	88 e1       	ldi	r24, 0x18	; 24
    2d38:	b5 01       	movw	r22, r10
    2d3a:	a4 01       	movw	r20, r8
    2d3c:	2f ef       	ldi	r18, 0xFF	; 255
    2d3e:	08 e0       	ldi	r16, 0x08	; 8
    2d40:	10 e0       	ldi	r17, 0x00	; 0
    2d42:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
    2d46:	88 23       	and	r24, r24
    2d48:	99 f7       	brne	.-26     	; 0x2d30 <SD_write_block+0x50>
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
    2d4a:	8f ef       	ldi	r24, 0xFF	; 255
    2d4c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2d50:	80 93 8b 50 	sts	0x508B, r24
	SPI_write(SDHC_DATA_TOKEN);	//send data token
    2d54:	8e ef       	ldi	r24, 0xFE	; 254
    2d56:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    2d5a:	1c 14       	cp	r1, r12
    2d5c:	1d 04       	cpc	r1, r13
    2d5e:	bc f4       	brge	.+46     	; 0x2d8e <SD_write_block+0xae>
    2d60:	87 2c       	mov	r8, r7
    2d62:	96 2c       	mov	r9, r6
    2d64:	00 e0       	ldi	r16, 0x00	; 0
    2d66:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(data[i]);
    2d68:	c8 01       	movw	r24, r16
    2d6a:	6d e0       	ldi	r22, 0x0D	; 13
    2d6c:	70 e0       	ldi	r23, 0x00	; 0
    2d6e:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    2d72:	ec 01       	movw	r28, r24
    2d74:	f4 01       	movw	r30, r8
    2d76:	81 91       	ld	r24, Z+
    2d78:	4f 01       	movw	r8, r30
    2d7a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2d7e:	c5 57       	subi	r28, 0x75	; 117
    2d80:	df 4a       	sbci	r29, 0xAF	; 175
    2d82:	88 83       	st	Y, r24
			while(1);
		}
	}
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
	SPI_write(SDHC_DATA_TOKEN);	//send data token
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    2d84:	0f 5f       	subi	r16, 0xFF	; 255
    2d86:	1f 4f       	sbci	r17, 0xFF	; 255
    2d88:	0c 15       	cp	r16, r12
    2d8a:	1d 05       	cpc	r17, r13
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <SD_write_block+0x88>
		Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    2d8e:	1e 14       	cp	r1, r14
    2d90:	1f 04       	cpc	r1, r15
    2d92:	ec f4       	brge	.+58     	; 0x2dce <SD_write_block+0xee>
    2d94:	00 e0       	ldi	r16, 0x00	; 0
    2d96:	10 e0       	ldi	r17, 0x00	; 0
	Buffer[i%13] = SPI_write(FILLER_BYTE);
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	fd e0       	ldi	r31, 0x0D	; 13
    2d9c:	cf 2e       	mov	r12, r31
    2d9e:	dd 24       	eor	r13, r13
    2da0:	f0 2d       	mov	r31, r0
    2da2:	0f 2e       	mov	r0, r31
    2da4:	fb e8       	ldi	r31, 0x8B	; 139
    2da6:	8f 2e       	mov	r8, r31
    2da8:	f0 e5       	ldi	r31, 0x50	; 80
    2daa:	9f 2e       	mov	r9, r31
    2dac:	f0 2d       	mov	r31, r0
    2dae:	c8 01       	movw	r24, r16
    2db0:	b6 01       	movw	r22, r12
    2db2:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    2db6:	ec 01       	movw	r28, r24
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2dbe:	c8 0d       	add	r28, r8
    2dc0:	d9 1d       	adc	r29, r9
    2dc2:	88 83       	st	Y, r24
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
	SPI_write(SDHC_DATA_TOKEN);	//send data token
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
		Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    2dc4:	0f 5f       	subi	r16, 0xFF	; 255
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	0e 15       	cp	r16, r14
    2dca:	1f 05       	cpc	r17, r15
    2dcc:	81 f7       	brne	.-32     	; 0x2dae <SD_write_block+0xce>
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
    2dce:	8f ef       	ldi	r24, 0xFF	; 255
    2dd0:	80 93 8b 50 	sts	0x508B, r24
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    2dd4:	c0 e0       	ldi	r28, 0x00	; 0
    2dd6:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
    2dd8:	0b e8       	ldi	r16, 0x8B	; 139
    2dda:	10 e5       	ldi	r17, 0x50	; 80
    2ddc:	8f ef       	ldi	r24, 0xFF	; 255
    2dde:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2de2:	f8 01       	movw	r30, r16
    2de4:	80 83       	st	Z, r24
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    2de6:	21 96       	adiw	r28, 0x01	; 1
    2de8:	c2 30       	cpi	r28, 0x02	; 2
    2dea:	d1 05       	cpc	r29, r1
    2dec:	bc f3       	brlt	.-18     	; 0x2ddc <SD_write_block+0xfc>
    2dee:	80 81       	ld	r24, Z
    2df0:	8f 3f       	cpi	r24, 0xFF	; 255
    2df2:	a1 f3       	breq	.-24     	; 0x2ddc <SD_write_block+0xfc>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
	}
	if ((Buffer[0] & SDHC_RESPONSE_STATUS_MASK) == 0x02){
    2df4:	80 91 8b 50 	lds	r24, 0x508B
		//data was written successfully
	}
	while(Buffer[0] != SDHC_DUMMY_BYTE) Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to finish internal processes
    2df8:	80 91 8b 50 	lds	r24, 0x508B
    2dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    2dfe:	49 f0       	breq	.+18     	; 0x2e12 <SD_write_block+0x132>
    2e00:	cb e8       	ldi	r28, 0x8B	; 139
    2e02:	d0 e5       	ldi	r29, 0x50	; 80
    2e04:	8f ef       	ldi	r24, 0xFF	; 255
    2e06:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2e0a:	88 83       	st	Y, r24
    2e0c:	88 81       	ld	r24, Y
    2e0e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e10:	c9 f7       	brne	.-14     	; 0x2e04 <SD_write_block+0x124>
	SPICS(FALSE);
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();	
    2e18:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	1f 91       	pop	r17
    2e22:	0f 91       	pop	r16
    2e24:	ff 90       	pop	r15
    2e26:	ef 90       	pop	r14
    2e28:	df 90       	pop	r13
    2e2a:	cf 90       	pop	r12
    2e2c:	bf 90       	pop	r11
    2e2e:	af 90       	pop	r10
    2e30:	9f 90       	pop	r9
    2e32:	8f 90       	pop	r8
    2e34:	7f 90       	pop	r7
    2e36:	6f 90       	pop	r6
    2e38:	08 95       	ret

00002e3a <SD_read_block>:

//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
    2e3a:	af 92       	push	r10
    2e3c:	bf 92       	push	r11
    2e3e:	cf 92       	push	r12
    2e40:	df 92       	push	r13
    2e42:	ef 92       	push	r14
    2e44:	ff 92       	push	r15
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	6b 01       	movw	r12, r22
    2e50:	7c 01       	movw	r14, r24
    2e52:	b4 2e       	mov	r11, r20
    2e54:	a5 2e       	mov	r10, r21
	SPIInit(SPI_MODE_0_gc);
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){	//send command to read data
    2e62:	cb e0       	ldi	r28, 0x0B	; 11
    2e64:	d0 e0       	ldi	r29, 0x00	; 0
    2e66:	03 c0       	rjmp	.+6      	; 0x2e6e <SD_read_block+0x34>
    2e68:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <SD_read_block+0x34>
    2e6c:	ff cf       	rjmp	.-2      	; 0x2e6c <SD_read_block+0x32>
//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){	//send command to read data
    2e6e:	81 e1       	ldi	r24, 0x11	; 17
    2e70:	b7 01       	movw	r22, r14
    2e72:	a6 01       	movw	r20, r12
    2e74:	2f ef       	ldi	r18, 0xFF	; 255
    2e76:	08 e0       	ldi	r16, 0x08	; 8
    2e78:	10 e0       	ldi	r17, 0x00	; 0
    2e7a:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
    2e7e:	88 23       	and	r24, r24
    2e80:	99 f7       	brne	.-26     	; 0x2e68 <SD_read_block+0x2e>
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}
	while(Buffer[0] != SDHC_DATA_TOKEN){
    2e82:	80 91 8b 50 	lds	r24, 0x508B
    2e86:	8e 3f       	cpi	r24, 0xFE	; 254
    2e88:	49 f0       	breq	.+18     	; 0x2e9c <SD_read_block+0x62>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
    2e8a:	cb e8       	ldi	r28, 0x8B	; 139
    2e8c:	d0 e5       	ldi	r29, 0x50	; 80
    2e8e:	8f ef       	ldi	r24, 0xFF	; 255
    2e90:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2e94:	88 83       	st	Y, r24
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}
	while(Buffer[0] != SDHC_DATA_TOKEN){
    2e96:	88 81       	ld	r24, Y
    2e98:	8e 3f       	cpi	r24, 0xFE	; 254
    2e9a:	c9 f7       	brne	.-14     	; 0x2e8e <SD_read_block+0x54>
    2e9c:	0b 2d       	mov	r16, r11
    2e9e:	1a 2d       	mov	r17, r10
//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){	//send command to read data
    2ea0:	c0 e0       	ldi	r28, 0x00	; 0
    2ea2:	d0 e0       	ldi	r29, 0x00	; 0
	}
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
    2ea6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2eaa:	f8 01       	movw	r30, r16
    2eac:	81 93       	st	Z+, r24
    2eae:	8f 01       	movw	r16, r30
		}
	}
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    2eb0:	21 96       	adiw	r28, 0x01	; 1
    2eb2:	f2 e0       	ldi	r31, 0x02	; 2
    2eb4:	c0 30       	cpi	r28, 0x00	; 0
    2eb6:	df 07       	cpc	r29, r31
    2eb8:	a9 f7       	brne	.-22     	; 0x2ea4 <SD_read_block+0x6a>
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
    2eba:	10 92 97 50 	sts	0x5097, r1
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    2ebe:	80 91 97 50 	lds	r24, 0x5097
    2ec2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ec4:	49 f0       	breq	.+18     	; 0x2ed8 <SD_read_block+0x9e>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
    2ec6:	c7 e9       	ldi	r28, 0x97	; 151
    2ec8:	d0 e5       	ldi	r29, 0x50	; 80
    2eca:	8f ef       	ldi	r24, 0xFF	; 255
    2ecc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    2ed0:	88 83       	st	Y, r24
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    2ed2:	88 81       	ld	r24, Y
    2ed4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ed6:	c9 f7       	brne	.-14     	; 0x2eca <SD_read_block+0x90>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
	}

	SPICS(FALSE);
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();
    2ede:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	df 90       	pop	r13
    2ef0:	cf 90       	pop	r12
    2ef2:	bf 90       	pop	r11
    2ef4:	af 90       	pop	r10
    2ef6:	08 95       	ret

00002ef8 <checkMote>:

void checkMote(){
	ADCPower(TRUE);
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	Ext1Power(TRUE);
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f04:	8f ef       	ldi	r24, 0xFF	; 255
    2f06:	93 ec       	ldi	r25, 0xC3	; 195
    2f08:	a9 e0       	ldi	r26, 0x09	; 9
    2f0a:	81 50       	subi	r24, 0x01	; 1
    2f0c:	90 40       	sbci	r25, 0x00	; 0
    2f0e:	a0 40       	sbci	r26, 0x00	; 0
    2f10:	e1 f7       	brne	.-8      	; 0x2f0a <checkMote+0x12>
    2f12:	00 c0       	rjmp	.+0      	; 0x2f14 <checkMote+0x1c>
    2f14:	00 00       	nop
	_delay_ms(100);
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS	
    2f16:	88 e0       	ldi	r24, 0x08	; 8
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	0e 94 27 06 	call	0xc4e	; 0xc4e <PortEx_DIRSET>
	while(1){
		PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    2f1e:	88 e0       	ldi	r24, 0x08	; 8
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0e 94 41 05 	call	0xa82	; 0xa82 <PortEx_OUTSET>
    2f26:	8a ea       	ldi	r24, 0xAA	; 170
    2f28:	96 ee       	ldi	r25, 0xE6	; 230
    2f2a:	a6 e9       	ldi	r26, 0x96	; 150
    2f2c:	b1 e0       	ldi	r27, 0x01	; 1
    2f2e:	81 50       	subi	r24, 0x01	; 1
    2f30:	90 40       	sbci	r25, 0x00	; 0
    2f32:	a0 40       	sbci	r26, 0x00	; 0
    2f34:	b0 40       	sbci	r27, 0x00	; 0
    2f36:	d9 f7       	brne	.-10     	; 0x2f2e <checkMote+0x36>
    2f38:	00 00       	nop
		_delay_ms(5000);
		PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    2f3a:	88 e0       	ldi	r24, 0x08	; 8
    2f3c:	60 e0       	ldi	r22, 0x00	; 0
    2f3e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PortEx_OUTCLR>
    2f42:	8a ea       	ldi	r24, 0xAA	; 170
    2f44:	96 ee       	ldi	r25, 0xE6	; 230
    2f46:	a6 e9       	ldi	r26, 0x96	; 150
    2f48:	b1 e0       	ldi	r27, 0x01	; 1
    2f4a:	81 50       	subi	r24, 0x01	; 1
    2f4c:	90 40       	sbci	r25, 0x00	; 0
    2f4e:	a0 40       	sbci	r26, 0x00	; 0
    2f50:	b0 40       	sbci	r27, 0x00	; 0
    2f52:	d9 f7       	brne	.-10     	; 0x2f4a <checkMote+0x52>
    2f54:	00 00       	nop
    2f56:	e3 cf       	rjmp	.-58     	; 0x2f1e <checkMote+0x26>

00002f58 <SD_init>:
		_delay_ms(5000);
	}
}

//the following function turns on power to the sd card and port expander and initializes the sdhc card in spi mode
void SD_init(void){
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
	ADCPower(TRUE);				//power up portEX
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	Ext1Power(TRUE);			//power up SD card
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>
    2f6c:	8f ef       	ldi	r24, 0xFF	; 255
    2f6e:	93 ec       	ldi	r25, 0xC3	; 195
    2f70:	a9 e0       	ldi	r26, 0x09	; 9
    2f72:	81 50       	subi	r24, 0x01	; 1
    2f74:	90 40       	sbci	r25, 0x00	; 0
    2f76:	a0 40       	sbci	r26, 0x00	; 0
    2f78:	e1 f7       	brne	.-8      	; 0x2f72 <SD_init+0x1a>
    2f7a:	00 c0       	rjmp	.+0      	; 0x2f7c <SD_init+0x24>
    2f7c:	00 00       	nop
	_delay_ms(100);				//wait for bootup

	
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS	
    2f7e:	88 e0       	ldi	r24, 0x08	; 8
    2f80:	60 e0       	ldi	r22, 0x00	; 0
    2f82:	0e 94 27 06 	call	0xc4e	; 0xc4e <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    2f86:	88 e0       	ldi	r24, 0x08	; 8
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	0e 94 41 05 	call	0xa82	; 0xa82 <PortEx_OUTSET>

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	63 e0       	ldi	r22, 0x03	; 3
    2f92:	0e 94 5f 04 	call	0x8be	; 0x8be <SPIInit2>
	SPICS(TRUE);
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
    2f9c:	8a e0       	ldi	r24, 0x0A	; 10
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i=0; i<10; i++){ // idle for 10 bytes / 80 clocks
		SPIC.DATA=SDHC_DUMMY_BYTE;
    2fa0:	e0 ec       	ldi	r30, 0xC0	; 192
    2fa2:	f8 e0       	ldi	r31, 0x08	; 8
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
    2fa6:	a7 e9       	ldi	r26, 0x97	; 151
    2fa8:	b0 e5       	ldi	r27, 0x50	; 80

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	for(int i=0; i<10; i++){ // idle for 10 bytes / 80 clocks
		SPIC.DATA=SDHC_DUMMY_BYTE;
    2faa:	33 83       	std	Z+3, r19	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    2fac:	22 81       	ldd	r18, Z+2	; 0x02
    2fae:	22 23       	and	r18, r18
    2fb0:	ec f7       	brge	.-6      	; 0x2fac <SD_init+0x54>
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
    2fb2:	23 81       	ldd	r18, Z+3	; 0x03
    2fb4:	2c 93       	st	X, r18
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	for(int i=0; i<10; i++){ // idle for 10 bytes / 80 clocks
    2fb8:	c1 f7       	brne	.-16     	; 0x2faa <SD_init+0x52>
		SPIC.DATA=SDHC_DUMMY_BYTE;
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
	}
	
	SPICS(FALSE);
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();
    2fc0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
	

	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    2fc4:	88 e0       	ldi	r24, 0x08	; 8
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PortEx_OUTCLR>
	
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	63 e0       	ldi	r22, 0x03	; 3
    2fd0:	0e 94 5f 04 	call	0x8be	; 0x8be <SPIInit2>
	SPICS(TRUE);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
    2fda:	cb e0       	ldi	r28, 0x0B	; 11
    2fdc:	d0 e0       	ldi	r29, 0x00	; 0
    2fde:	03 c0       	rjmp	.+6      	; 0x2fe6 <SD_init+0x8e>
    2fe0:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {												//try command 10 times before timing out
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <SD_init+0x8e>
    2fe4:	ff cf       	rjmp	.-2      	; 0x2fe4 <SD_init+0x8c>

	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	40 e0       	ldi	r20, 0x00	; 0
    2fea:	50 e0       	ldi	r21, 0x00	; 0
    2fec:	ba 01       	movw	r22, r20
    2fee:	25 e9       	ldi	r18, 0x95	; 149
    2ff0:	08 e0       	ldi	r16, 0x08	; 8
    2ff2:	10 e0       	ldi	r17, 0x00	; 0
    2ff4:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
    2ff8:	81 30       	cpi	r24, 0x01	; 1
    2ffa:	91 f7       	brne	.-28     	; 0x2fe0 <SD_init+0x88>
    2ffc:	8f ef       	ldi	r24, 0xFF	; 255
    2ffe:	93 ec       	ldi	r25, 0xC3	; 195
    3000:	a9 e0       	ldi	r26, 0x09	; 9
    3002:	81 50       	subi	r24, 0x01	; 1
    3004:	90 40       	sbci	r25, 0x00	; 0
    3006:	a0 40       	sbci	r26, 0x00	; 0
    3008:	e1 f7       	brne	.-8      	; 0x3002 <SD_init+0xaa>
    300a:	00 c0       	rjmp	.+0      	; 0x300c <SD_init+0xb4>
    300c:	00 00       	nop
			while(1);
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    300e:	cb e0       	ldi	r28, 0x0B	; 11
    3010:	d0 e0       	ldi	r29, 0x00	; 0
    3012:	03 c0       	rjmp	.+6      	; 0x301a <SD_init+0xc2>
    3014:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    3016:	09 f4       	brne	.+2      	; 0x301a <SD_init+0xc2>
    3018:	ff cf       	rjmp	.-2      	; 0x3018 <SD_init+0xc0>
			while(1);
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    301a:	88 e0       	ldi	r24, 0x08	; 8
    301c:	4a ea       	ldi	r20, 0xAA	; 170
    301e:	51 e0       	ldi	r21, 0x01	; 1
    3020:	60 e0       	ldi	r22, 0x00	; 0
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	27 e8       	ldi	r18, 0x87	; 135
    3026:	08 e0       	ldi	r16, 0x08	; 8
    3028:	10 e0       	ldi	r17, 0x00	; 0
    302a:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	89 f7       	brne	.-30     	; 0x3014 <SD_init+0xbc>
    3032:	c2 e0       	ldi	r28, 0x02	; 2
    3034:	d0 e0       	ldi	r29, 0x00	; 0
			//there was no response to the command
			while(1);
		}			
	}		
	for(int i=0;i<4;i++){
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
    3036:	0b e8       	ldi	r16, 0x8B	; 139
    3038:	10 e5       	ldi	r17, 0x50	; 80
    303a:	8f ef       	ldi	r24, 0xFF	; 255
    303c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3040:	f8 01       	movw	r30, r16
    3042:	ec 0f       	add	r30, r28
    3044:	fd 1f       	adc	r31, r29
    3046:	80 83       	st	Z, r24
    3048:	21 96       	adiw	r28, 0x01	; 1
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}			
	}		
	for(int i=0;i<4;i++){
    304a:	c6 30       	cpi	r28, 0x06	; 6
    304c:	d1 05       	cpc	r29, r1
    304e:	a9 f7       	brne	.-22     	; 0x303a <SD_init+0xe2>
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if((Buffer[4] != 0x01) || (Buffer[5] != 0xAA)){			//check that the response is the same as the argument sent in
    3050:	80 91 8f 50 	lds	r24, 0x508F
    3054:	81 30       	cpi	r24, 0x01	; 1
    3056:	11 f4       	brne	.+4      	; 0x305c <SD_init+0x104>
    3058:	80 91 90 50 	lds	r24, 0x5090
		}
		
	}
	*/
	//send second initialization command
	while(Buffer[1]!= 0x00){
    305c:	80 91 8c 50 	lds	r24, 0x508C
    3060:	88 23       	and	r24, r24
    3062:	b1 f0       	breq	.+44     	; 0x3090 <SD_init+0x138>
    3064:	cc e8       	ldi	r28, 0x8C	; 140
    3066:	d0 e5       	ldi	r29, 0x50	; 80
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
    3068:	87 e3       	ldi	r24, 0x37	; 55
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	ba 01       	movw	r22, r20
    3070:	2f ef       	ldi	r18, 0xFF	; 255
    3072:	08 e0       	ldi	r16, 0x08	; 8
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	60 e0       	ldi	r22, 0x00	; 0
    3082:	70 e4       	ldi	r23, 0x40	; 64
    3084:	2f ef       	ldi	r18, 0xFF	; 255
    3086:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
		}
		
	}
	*/
	//send second initialization command
	while(Buffer[1]!= 0x00){
    308a:	88 81       	ld	r24, Y
    308c:	88 23       	and	r24, r24
    308e:	61 f7       	brne	.-40     	; 0x3068 <SD_init+0x110>
			while(1);
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    3090:	cb e0       	ldi	r28, 0x0B	; 11
    3092:	d0 e0       	ldi	r29, 0x00	; 0
    3094:	03 c0       	rjmp	.+6      	; 0x309c <SD_init+0x144>
		}
		
	}
	*/
	//send second initialization command
	while(Buffer[1]!= 0x00){
    3096:	21 97       	sbiw	r28, 0x01	; 1
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
	}
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//check OCR register
		if (i >= 10) {
    3098:	09 f4       	brne	.+2      	; 0x309c <SD_init+0x144>
    309a:	ff cf       	rjmp	.-2      	; 0x309a <SD_init+0x142>
	//send second initialization command
	while(Buffer[1]!= 0x00){
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
	}
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//check OCR register
    309c:	8a e3       	ldi	r24, 0x3A	; 58
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	ba 01       	movw	r22, r20
    30a4:	2f ef       	ldi	r18, 0xFF	; 255
    30a6:	08 e0       	ldi	r16, 0x08	; 8
    30a8:	10 e0       	ldi	r17, 0x00	; 0
    30aa:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
    30ae:	88 23       	and	r24, r24
    30b0:	91 f7       	brne	.-28     	; 0x3096 <SD_init+0x13e>
    30b2:	c0 e0       	ldi	r28, 0x00	; 0
    30b4:	d0 e0       	ldi	r29, 0x00	; 0
			//there was no response to the command
			while(1);
		}
	}		
	for (int i=0;i<4;i++){
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
    30b6:	0b e8       	ldi	r16, 0x8B	; 139
    30b8:	10 e5       	ldi	r17, 0x50	; 80
    30ba:	8f ef       	ldi	r24, 0xFF	; 255
    30bc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    30c0:	f8 01       	movw	r30, r16
    30c2:	ec 0f       	add	r30, r28
    30c4:	fd 1f       	adc	r31, r29
    30c6:	80 83       	st	Z, r24
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	for (int i=0;i<4;i++){
    30c8:	21 96       	adiw	r28, 0x01	; 1
    30ca:	c4 30       	cpi	r28, 0x04	; 4
    30cc:	d1 05       	cpc	r29, r1
    30ce:	a9 f7       	brne	.-22     	; 0x30ba <SD_init+0x162>
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if (Buffer[0] & 0x40){
    30d0:	80 91 8b 50 	lds	r24, 0x508B
		//the card is addressed in 512 byte sectors
	}
	SPICS(FALSE);
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();	
    30da:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}	
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	08 95       	ret

000030e8 <SD_write_multiple_blocks>:
//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    30e8:	2f 92       	push	r2
    30ea:	3f 92       	push	r3
    30ec:	4f 92       	push	r4
    30ee:	5f 92       	push	r5
    30f0:	6f 92       	push	r6
    30f2:	7f 92       	push	r7
    30f4:	8f 92       	push	r8
    30f6:	9f 92       	push	r9
    30f8:	af 92       	push	r10
    30fa:	bf 92       	push	r11
    30fc:	cf 92       	push	r12
    30fe:	df 92       	push	r13
    3100:	ef 92       	push	r14
    3102:	ff 92       	push	r15
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	2a 97       	sbiw	r28, 0x0a	; 10
    3112:	cd bf       	out	0x3d, r28	; 61
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	6b 01       	movw	r12, r22
    3118:	7c 01       	movw	r14, r24
    311a:	4f 83       	std	Y+7, r20	; 0x07
    311c:	58 87       	std	Y+8, r21	; 0x08
    311e:	89 01       	movw	r16, r18
	SPIInit(SPI_MODE_0_gc);
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
    312c:	c8 01       	movw	r24, r16
    312e:	11 23       	and	r17, r17
    3130:	14 f4       	brge	.+4      	; 0x3136 <SD_write_multiple_blocks+0x4e>
    3132:	81 50       	subi	r24, 0x01	; 1
    3134:	9e 4f       	sbci	r25, 0xFE	; 254
    3136:	9c 01       	movw	r18, r24
    3138:	23 2f       	mov	r18, r19
    313a:	33 0f       	add	r19, r19
    313c:	33 0b       	sbc	r19, r19
    313e:	25 95       	asr	r18
    3140:	2b 83       	std	Y+3, r18	; 0x03
    3142:	3c 83       	std	Y+4, r19	; 0x04
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	32 e0       	ldi	r19, 0x02	; 2
    3148:	c8 01       	movw	r24, r16
    314a:	b9 01       	movw	r22, r18
    314c:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    3150:	29 01       	movw	r4, r18
    3152:	48 1a       	sub	r4, r24
    3154:	59 0a       	sbc	r5, r25
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	43 16       	cp	r4, r19
    315a:	32 e0       	ldi	r19, 0x02	; 2
    315c:	53 06       	cpc	r5, r19
    315e:	31 f0       	breq	.+12     	; 0x316c <SD_write_multiple_blocks+0x84>
	else numSectors++;
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	9c 81       	ldd	r25, Y+4	; 0x04
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	8b 83       	std	Y+3, r24	; 0x03
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <SD_write_multiple_blocks+0x88>
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    316c:	44 24       	eor	r4, r4
    316e:	55 24       	eor	r5, r5
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
    3170:	89 e1       	ldi	r24, 0x19	; 25
    3172:	b7 01       	movw	r22, r14
    3174:	a6 01       	movw	r20, r12
    3176:	2f ef       	ldi	r18, 0xFF	; 255
    3178:	08 e0       	ldi	r16, 0x08	; 8
    317a:	10 e0       	ldi	r17, 0x00	; 0
    317c:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
	for (int j=0;j<numSectors;j++){
    3180:	eb 81       	ldd	r30, Y+3	; 0x03
    3182:	fc 81       	ldd	r31, Y+4	; 0x04
    3184:	1e 16       	cp	r1, r30
    3186:	1f 06       	cpc	r1, r31
    3188:	0c f0       	brlt	.+2      	; 0x318c <SD_write_multiple_blocks+0xa4>
    318a:	ac c0       	rjmp	.+344    	; 0x32e4 <SD_write_multiple_blocks+0x1fc>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    318c:	31 97       	sbiw	r30, 0x01	; 1
    318e:	ed 83       	std	Y+5, r30	; 0x05
    3190:	fe 83       	std	Y+6, r31	; 0x06
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    3192:	9f 01       	movw	r18, r30
    3194:	32 2f       	mov	r19, r18
    3196:	22 27       	eor	r18, r18
    3198:	33 0f       	add	r19, r19
    319a:	8f 81       	ldd	r24, Y+7	; 0x07
    319c:	98 85       	ldd	r25, Y+8	; 0x08
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	9a 83       	std	Y+2, r25	; 0x02
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
    31a2:	66 24       	eor	r6, r6
    31a4:	77 24       	eor	r7, r7
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    31a6:	0f 2e       	mov	r0, r31
    31a8:	fc e8       	ldi	r31, 0x8C	; 140
    31aa:	8f 2e       	mov	r8, r31
    31ac:	f0 e5       	ldi	r31, 0x50	; 80
    31ae:	9f 2e       	mov	r9, r31
    31b0:	f0 2d       	mov	r31, r0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    31b2:	0f 2e       	mov	r0, r31
    31b4:	fc e0       	ldi	r31, 0x0C	; 12
    31b6:	cf 2e       	mov	r12, r31
    31b8:	dd 24       	eor	r13, r13
    31ba:	f0 2d       	mov	r31, r0
    31bc:	0f 2e       	mov	r0, r31
    31be:	fb e8       	ldi	r31, 0x8B	; 139
    31c0:	af 2e       	mov	r10, r31
    31c2:	f0 e5       	ldi	r31, 0x50	; 80
    31c4:	bf 2e       	mov	r11, r31
    31c6:	f0 2d       	mov	r31, r0
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	92 e0       	ldi	r25, 0x02	; 2
    31cc:	1c 01       	movw	r2, r24
    31ce:	24 18       	sub	r2, r4
    31d0:	35 08       	sbc	r3, r5
	}
	SPICS(FALSE);
	SPIDisable();	
}	
//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    31d2:	ef 81       	ldd	r30, Y+7	; 0x07
    31d4:	f8 85       	ldd	r31, Y+8	; 0x08
    31d6:	e2 0f       	add	r30, r18
    31d8:	f3 1f       	adc	r31, r19
    31da:	ef 83       	std	Y+7, r30	; 0x07
    31dc:	f8 87       	std	Y+8, r31	; 0x08
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    31de:	8f ef       	ldi	r24, 0xFF	; 255
    31e0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    31e4:	f4 01       	movw	r30, r8
    31e6:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
    31e8:	8c ef       	ldi	r24, 0xFC	; 252
    31ea:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    31ee:	f4 01       	movw	r30, r8
    31f0:	80 83       	st	Z, r24
		if(j == (numSectors-1)){
    31f2:	2d 81       	ldd	r18, Y+5	; 0x05
    31f4:	3e 81       	ldd	r19, Y+6	; 0x06
    31f6:	26 15       	cp	r18, r6
    31f8:	37 05       	cpc	r19, r7
    31fa:	09 f0       	breq	.+2      	; 0x31fe <SD_write_multiple_blocks+0x116>
    31fc:	41 c0       	rjmp	.+130    	; 0x3280 <SD_write_multiple_blocks+0x198>
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    31fe:	12 14       	cp	r1, r2
    3200:	13 04       	cpc	r1, r3
    3202:	cc f4       	brge	.+50     	; 0x3236 <SD_write_multiple_blocks+0x14e>
	}
	SPICS(FALSE);
	SPIDisable();	
}	
//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    3204:	ef 80       	ldd	r14, Y+7	; 0x07
    3206:	f8 84       	ldd	r15, Y+8	; 0x08
    3208:	00 e0       	ldi	r16, 0x00	; 0
    320a:	10 e0       	ldi	r17, 0x00	; 0
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    320c:	c8 01       	movw	r24, r16
    320e:	b6 01       	movw	r22, r12
    3210:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    3214:	89 87       	std	Y+9, r24	; 0x09
    3216:	9a 87       	std	Y+10, r25	; 0x0a
    3218:	f7 01       	movw	r30, r14
    321a:	81 91       	ld	r24, Z+
    321c:	7f 01       	movw	r14, r30
    321e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3222:	e9 85       	ldd	r30, Y+9	; 0x09
    3224:	fa 85       	ldd	r31, Y+10	; 0x0a
    3226:	ea 0d       	add	r30, r10
    3228:	fb 1d       	adc	r31, r11
    322a:	80 83       	st	Z, r24
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    322c:	0f 5f       	subi	r16, 0xFF	; 255
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	02 15       	cp	r16, r2
    3232:	13 05       	cpc	r17, r3
    3234:	59 f7       	brne	.-42     	; 0x320c <SD_write_multiple_blocks+0x124>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    3236:	14 14       	cp	r1, r4
    3238:	15 04       	cpc	r1, r5
    323a:	9c f4       	brge	.+38     	; 0x3262 <SD_write_multiple_blocks+0x17a>
    323c:	00 e0       	ldi	r16, 0x00	; 0
    323e:	10 e0       	ldi	r17, 0x00	; 0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
    3240:	c8 01       	movw	r24, r16
    3242:	b6 01       	movw	r22, r12
    3244:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    3248:	7c 01       	movw	r14, r24
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3250:	f5 01       	movw	r30, r10
    3252:	ee 0d       	add	r30, r14
    3254:	ff 1d       	adc	r31, r15
    3256:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    3258:	0f 5f       	subi	r16, 0xFF	; 255
    325a:	1f 4f       	sbci	r17, 0xFF	; 255
    325c:	04 15       	cp	r16, r4
    325e:	15 05       	cpc	r17, r5
    3260:	79 f7       	brne	.-34     	; 0x3240 <SD_write_multiple_blocks+0x158>
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
    3262:	8f ef       	ldi	r24, 0xFF	; 255
    3264:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3268:	f4 01       	movw	r30, r8
    326a:	80 83       	st	Z, r24
    326c:	8f ef       	ldi	r24, 0xFF	; 255
    326e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3272:	f4 01       	movw	r30, r8
    3274:	80 83       	st	Z, r24
		Buffer[1] = FILLER_BYTE;
    3276:	10 82       	st	Z, r1
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
    3278:	80 81       	ld	r24, Z
    327a:	8f 3f       	cpi	r24, 0xFF	; 255
    327c:	e1 f4       	brne	.+56     	; 0x32b6 <SD_write_multiple_blocks+0x1ce>
    327e:	23 c0       	rjmp	.+70     	; 0x32c6 <SD_write_multiple_blocks+0x1de>
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    3280:	e9 80       	ldd	r14, Y+1	; 0x01
    3282:	fa 80       	ldd	r15, Y+2	; 0x02
    3284:	00 e0       	ldi	r16, 0x00	; 0
    3286:	10 e0       	ldi	r17, 0x00	; 0
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    3288:	c8 01       	movw	r24, r16
    328a:	b6 01       	movw	r22, r12
    328c:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    3290:	89 87       	std	Y+9, r24	; 0x09
    3292:	9a 87       	std	Y+10, r25	; 0x0a
    3294:	f7 01       	movw	r30, r14
    3296:	81 91       	ld	r24, Z+
    3298:	7f 01       	movw	r14, r30
    329a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    329e:	e9 85       	ldd	r30, Y+9	; 0x09
    32a0:	fa 85       	ldd	r31, Y+10	; 0x0a
    32a2:	ea 0d       	add	r30, r10
    32a4:	fb 1d       	adc	r31, r11
    32a6:	80 83       	st	Z, r24
			for (int i=0;i<fillerBytes;i++){
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    32a8:	0f 5f       	subi	r16, 0xFF	; 255
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	f2 e0       	ldi	r31, 0x02	; 2
    32ae:	00 30       	cpi	r16, 0x00	; 0
    32b0:	1f 07       	cpc	r17, r31
    32b2:	51 f7       	brne	.-44     	; 0x3288 <SD_write_multiple_blocks+0x1a0>
    32b4:	d6 cf       	rjmp	.-84     	; 0x3262 <SD_write_multiple_blocks+0x17a>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
    32b6:	8f ef       	ldi	r24, 0xFF	; 255
    32b8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    32bc:	f4 01       	movw	r30, r8
    32be:	80 83       	st	Z, r24
    32c0:	80 81       	ld	r24, Z
    32c2:	8f 3f       	cpi	r24, 0xFF	; 255
    32c4:	c1 f7       	brne	.-16     	; 0x32b6 <SD_write_multiple_blocks+0x1ce>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
    32c6:	08 94       	sec
    32c8:	61 1c       	adc	r6, r1
    32ca:	71 1c       	adc	r7, r1
    32cc:	29 81       	ldd	r18, Y+1	; 0x01
    32ce:	3a 81       	ldd	r19, Y+2	; 0x02
    32d0:	20 50       	subi	r18, 0x00	; 0
    32d2:	3e 4f       	sbci	r19, 0xFE	; 254
    32d4:	29 83       	std	Y+1, r18	; 0x01
    32d6:	3a 83       	std	Y+2, r19	; 0x02
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	9c 81       	ldd	r25, Y+4	; 0x04
    32dc:	68 16       	cp	r6, r24
    32de:	79 06       	cpc	r7, r25
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <SD_write_multiple_blocks+0x1fc>
    32e2:	7d cf       	rjmp	.-262    	; 0x31de <SD_write_multiple_blocks+0xf6>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    32e4:	ee 24       	eor	r14, r14
    32e6:	ff 24       	eor	r15, r15
    32e8:	68 94       	set
    32ea:	e2 f8       	bld	r14, 2
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    32ec:	0c e8       	ldi	r16, 0x8C	; 140
    32ee:	10 e5       	ldi	r17, 0x50	; 80
    32f0:	8f ef       	ldi	r24, 0xFF	; 255
    32f2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    32f6:	f8 01       	movw	r30, r16
    32f8:	80 83       	st	Z, r24
    32fa:	08 94       	sec
    32fc:	e1 08       	sbc	r14, r1
    32fe:	f1 08       	sbc	r15, r1
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
	}
	for(int i=0;i<4;i++){
    3300:	e1 14       	cp	r14, r1
    3302:	f1 04       	cpc	r15, r1
    3304:	a9 f7       	brne	.-22     	; 0x32f0 <SD_write_multiple_blocks+0x208>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}		
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
    3306:	8d ef       	ldi	r24, 0xFD	; 253
    3308:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    330c:	80 93 8c 50 	sts	0x508C, r24
    3310:	ee 24       	eor	r14, r14
    3312:	ff 24       	eor	r15, r15
    3314:	68 94       	set
    3316:	e2 f8       	bld	r14, 2
	for(int i=0;i<4;i++){
	Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    3318:	0c e8       	ldi	r16, 0x8C	; 140
    331a:	10 e5       	ldi	r17, 0x50	; 80
    331c:	8f ef       	ldi	r24, 0xFF	; 255
    331e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3322:	f8 01       	movw	r30, r16
    3324:	80 83       	st	Z, r24
    3326:	08 94       	sec
    3328:	e1 08       	sbc	r14, r1
    332a:	f1 08       	sbc	r15, r1
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}		
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
	for(int i=0;i<4;i++){
    332c:	e1 14       	cp	r14, r1
    332e:	f1 04       	cpc	r15, r1
    3330:	a9 f7       	brne	.-22     	; 0x331c <SD_write_multiple_blocks+0x234>
	Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}	
	Buffer[1] = FILLER_BYTE;
    3332:	10 92 8c 50 	sts	0x508C, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    3336:	80 91 8c 50 	lds	r24, 0x508C
    333a:	8f 3f       	cpi	r24, 0xFF	; 255
    333c:	51 f0       	breq	.+20     	; 0x3352 <SD_write_multiple_blocks+0x26a>
    333e:	0c e8       	ldi	r16, 0x8C	; 140
    3340:	10 e5       	ldi	r17, 0x50	; 80
    3342:	8f ef       	ldi	r24, 0xFF	; 255
    3344:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3348:	f8 01       	movw	r30, r16
    334a:	80 83       	st	Z, r24
    334c:	80 81       	ld	r24, Z
    334e:	8f 3f       	cpi	r24, 0xFF	; 255
    3350:	c1 f7       	brne	.-16     	; 0x3342 <SD_write_multiple_blocks+0x25a>
	SPICS(FALSE);
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();		
    3358:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}
    335c:	2a 96       	adiw	r28, 0x0a	; 10
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	ff 90       	pop	r15
    336c:	ef 90       	pop	r14
    336e:	df 90       	pop	r13
    3370:	cf 90       	pop	r12
    3372:	bf 90       	pop	r11
    3374:	af 90       	pop	r10
    3376:	9f 90       	pop	r9
    3378:	8f 90       	pop	r8
    337a:	7f 90       	pop	r7
    337c:	6f 90       	pop	r6
    337e:	5f 90       	pop	r5
    3380:	4f 90       	pop	r4
    3382:	3f 90       	pop	r3
    3384:	2f 90       	pop	r2
    3386:	08 95       	ret

00003388 <SD_read_multiple_blocks>:
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
    3388:	2f 92       	push	r2
    338a:	3f 92       	push	r3
    338c:	4f 92       	push	r4
    338e:	5f 92       	push	r5
    3390:	6f 92       	push	r6
    3392:	7f 92       	push	r7
    3394:	8f 92       	push	r8
    3396:	9f 92       	push	r9
    3398:	af 92       	push	r10
    339a:	bf 92       	push	r11
    339c:	cf 92       	push	r12
    339e:	df 92       	push	r13
    33a0:	ef 92       	push	r14
    33a2:	ff 92       	push	r15
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	cf 93       	push	r28
    33aa:	df 93       	push	r29
    33ac:	6b 01       	movw	r12, r22
    33ae:	7c 01       	movw	r14, r24
    33b0:	84 2e       	mov	r8, r20
    33b2:	45 2e       	mov	r4, r21
    33b4:	39 01       	movw	r6, r18
	SPIInit(SPI_MODE_0_gc);
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	Buffer[1] = SDHC_DUMMY_BYTE;
    33c2:	8f ef       	ldi	r24, 0xFF	; 255
    33c4:	80 93 8c 50 	sts	0x508C, r24
	while(Buffer[1] != FILLER_BYTE){
    33c8:	80 91 8c 50 	lds	r24, 0x508C
    33cc:	88 23       	and	r24, r24
    33ce:	69 f0       	breq	.+26     	; 0x33ea <SD_read_multiple_blocks+0x62>
    33d0:	cc e8       	ldi	r28, 0x8C	; 140
    33d2:	d0 e5       	ldi	r29, 0x50	; 80
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
    33d4:	82 e1       	ldi	r24, 0x12	; 18
    33d6:	b7 01       	movw	r22, r14
    33d8:	a6 01       	movw	r20, r12
    33da:	2f ef       	ldi	r18, 0xFF	; 255
    33dc:	08 e0       	ldi	r16, 0x08	; 8
    33de:	10 e0       	ldi	r17, 0x00	; 0
    33e0:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	Buffer[1] = SDHC_DUMMY_BYTE;
	while(Buffer[1] != FILLER_BYTE){
    33e4:	88 81       	ld	r24, Y
    33e6:	88 23       	and	r24, r24
    33e8:	a9 f7       	brne	.-22     	; 0x33d4 <SD_read_multiple_blocks+0x4c>
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
	}
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
    33ea:	16 14       	cp	r1, r6
    33ec:	17 04       	cpc	r1, r7
    33ee:	0c f0       	brlt	.+2      	; 0x33f2 <SD_read_multiple_blocks+0x6a>
    33f0:	46 c0       	rjmp	.+140    	; 0x347e <SD_read_multiple_blocks+0xf6>
    33f2:	a8 2c       	mov	r10, r8
    33f4:	b4 2c       	mov	r11, r4
    33f6:	88 24       	eor	r8, r8
    33f8:	99 24       	eor	r9, r9
		Buffer[1]=SDHC_DUMMY_BYTE;
    33fa:	0f 2e       	mov	r0, r31
    33fc:	fc e8       	ldi	r31, 0x8C	; 140
    33fe:	cf 2e       	mov	r12, r31
    3400:	f0 e5       	ldi	r31, 0x50	; 80
    3402:	df 2e       	mov	r13, r31
    3404:	f0 2d       	mov	r31, r0
    3406:	ff 24       	eor	r15, r15
    3408:	fa 94       	dec	r15
    340a:	ef 2c       	mov	r14, r15
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
	
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    340c:	0f 2e       	mov	r0, r31
    340e:	fb e8       	ldi	r31, 0x8B	; 139
    3410:	4f 2e       	mov	r4, r31
    3412:	f0 e5       	ldi	r31, 0x50	; 80
    3414:	5f 2e       	mov	r5, r31
    3416:	f0 2d       	mov	r31, r0
    3418:	12 01       	movw	r2, r4
    341a:	08 94       	sec
    341c:	21 1c       	adc	r2, r1
    341e:	31 1c       	adc	r3, r1
	while(Buffer[1] != FILLER_BYTE){
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
	}
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
    3420:	f6 01       	movw	r30, r12
    3422:	e0 82       	st	Z, r14
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
    3424:	80 81       	ld	r24, Z
    3426:	8e 3f       	cpi	r24, 0xFE	; 254
    3428:	41 f0       	breq	.+16     	; 0x343a <SD_read_multiple_blocks+0xb2>
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
    342a:	8f 2d       	mov	r24, r15
    342c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3430:	f6 01       	movw	r30, r12
    3432:	80 83       	st	Z, r24
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
	}
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
    3434:	80 81       	ld	r24, Z
    3436:	8e 3f       	cpi	r24, 0xFE	; 254
    3438:	c1 f7       	brne	.-16     	; 0x342a <SD_read_multiple_blocks+0xa2>
	Buffer[1] = SDHC_DUMMY_BYTE;
	while(Buffer[1] != FILLER_BYTE){
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
	}
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
    343a:	85 01       	movw	r16, r10
    343c:	c0 e0       	ldi	r28, 0x00	; 0
    343e:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}			
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    3440:	8f 2d       	mov	r24, r15
    3442:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3446:	f8 01       	movw	r30, r16
    3448:	81 93       	st	Z+, r24
    344a:	8f 01       	movw	r16, r30
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}			
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    344c:	21 96       	adiw	r28, 0x01	; 1
    344e:	f2 e0       	ldi	r31, 0x02	; 2
    3450:	c0 30       	cpi	r28, 0x00	; 0
    3452:	df 07       	cpc	r29, r31
    3454:	a9 f7       	brne	.-22     	; 0x3440 <SD_read_multiple_blocks+0xb8>
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
	
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    3456:	8f 2d       	mov	r24, r15
    3458:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    345c:	f2 01       	movw	r30, r4
    345e:	80 83       	st	Z, r24
    3460:	8f 2d       	mov	r24, r15
    3462:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3466:	f1 01       	movw	r30, r2
    3468:	80 83       	st	Z, r24
	Buffer[1] = SDHC_DUMMY_BYTE;
	while(Buffer[1] != FILLER_BYTE){
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
	}
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
    346a:	08 94       	sec
    346c:	81 1c       	adc	r8, r1
    346e:	91 1c       	adc	r9, r1
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	92 e0       	ldi	r25, 0x02	; 2
    3474:	a8 0e       	add	r10, r24
    3476:	b9 1e       	adc	r11, r25
    3478:	86 14       	cp	r8, r6
    347a:	97 04       	cpc	r9, r7
    347c:	89 f6       	brne	.-94     	; 0x3420 <SD_read_multiple_blocks+0x98>
	
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
		}
	}	
	SD_command(SDHC_CMD_STOP_TRANSMISSION,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//send command to stop reading data
    347e:	8c e0       	ldi	r24, 0x0C	; 12
    3480:	40 e0       	ldi	r20, 0x00	; 0
    3482:	50 e0       	ldi	r21, 0x00	; 0
    3484:	ba 01       	movw	r22, r20
    3486:	2f ef       	ldi	r18, 0xFF	; 255
    3488:	08 e0       	ldi	r16, 0x08	; 8
    348a:	10 e0       	ldi	r17, 0x00	; 0
    348c:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SD_command>
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//read the stuff byte
    3490:	8f ef       	ldi	r24, 0xFF	; 255
    3492:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    3496:	80 93 8b 50 	sts	0x508B, r24
	Buffer[1] = FILLER_BYTE;
    349a:	10 92 8c 50 	sts	0x508C, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    349e:	80 91 8c 50 	lds	r24, 0x508C
    34a2:	8f 3f       	cpi	r24, 0xFF	; 255
    34a4:	49 f0       	breq	.+18     	; 0x34b8 <SD_read_multiple_blocks+0x130>
    34a6:	cc e8       	ldi	r28, 0x8C	; 140
    34a8:	d0 e5       	ldi	r29, 0x50	; 80
    34aa:	8f ef       	ldi	r24, 0xFF	; 255
    34ac:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
    34b0:	88 83       	st	Y, r24
    34b2:	88 81       	ld	r24, Y
    34b4:	8f 3f       	cpi	r24, 0xFF	; 255
    34b6:	c9 f7       	brne	.-14     	; 0x34aa <SD_read_multiple_blocks+0x122>
	SPICS(FALSE);
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();
    34be:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
}
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	1f 91       	pop	r17
    34c8:	0f 91       	pop	r16
    34ca:	ff 90       	pop	r15
    34cc:	ef 90       	pop	r14
    34ce:	df 90       	pop	r13
    34d0:	cf 90       	pop	r12
    34d2:	bf 90       	pop	r11
    34d4:	af 90       	pop	r10
    34d6:	9f 90       	pop	r9
    34d8:	8f 90       	pop	r8
    34da:	7f 90       	pop	r7
    34dc:	6f 90       	pop	r6
    34de:	5f 90       	pop	r5
    34e0:	4f 90       	pop	r4
    34e2:	3f 90       	pop	r3
    34e4:	2f 90       	pop	r2
    34e6:	08 95       	ret

000034e8 <SD_disable>:
//this function deselects the sd card and turns off power to the port expander and the sd card
void SD_disable(){
	PortEx_DIRCLR(BIT3_bm, PS_BANKB);  //pull SD card CS high
    34e8:	88 e0       	ldi	r24, 0x08	; 8
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PortEx_DIRCLR>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);
    34f0:	88 e0       	ldi	r24, 0x08	; 8
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	0e 94 4e 04 	call	0x89c	; 0x89c <SPIInit>
	SPICS(TRUE);
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPI_write(SDHC_DUMMY_BYTE);	//must write a byte to spi when cd card cs is high to have sd card release MISO line
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SPI_write>
	SPICS(FALSE);	//stop spi
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPICS>
	SPIDisable();
    3510:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SPIDisable>
	
	ADCPower(FALSE);		//turn off portEX power
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ADCPower>
	Ext1Power(FALSE);			//power down SD card
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	0e 94 bb 03 	call	0x776	; 0x776 <Ext1Power>
}
    3520:	08 95       	ret

00003522 <SD_write_and_read_knowns>:
//command to check reading and writing to sd card
void SD_write_and_read_knowns(){
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	27 ec       	ldi	r18, 0xC7	; 199
    3530:	33 e2       	ldi	r19, 0x23	; 35
    3532:	f9 01       	movw	r30, r18
    3534:	e8 0f       	add	r30, r24
    3536:	f9 1f       	adc	r31, r25
    3538:	80 83       	st	Z, r24
    353a:	01 96       	adiw	r24, 0x01	; 1
    353c:	88 31       	cpi	r24, 0x18	; 24
    353e:	91 05       	cpc	r25, r1
    3540:	c1 f7       	brne	.-16     	; 0x3532 <SD_write_and_read_knowns+0x10>
	SD_write_block(20,FRAMReadBuffer,24);	//write those values to the card
    3542:	64 e1       	ldi	r22, 0x14	; 20
    3544:	70 e0       	ldi	r23, 0x00	; 0
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	47 ec       	ldi	r20, 0xC7	; 199
    354c:	53 e2       	ldi	r21, 0x23	; 35
    354e:	28 e1       	ldi	r18, 0x18	; 24
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SD_write_block>
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	27 ec       	ldi	r18, 0xC7	; 199
    355c:	33 e2       	ldi	r19, 0x23	; 35
    355e:	f9 01       	movw	r30, r18
    3560:	e8 0f       	add	r30, r24
    3562:	f9 1f       	adc	r31, r25
    3564:	10 82       	st	Z, r1
    3566:	01 96       	adiw	r24, 0x01	; 1
    3568:	88 31       	cpi	r24, 0x18	; 24
    356a:	91 05       	cpc	r25, r1
    356c:	c1 f7       	brne	.-16     	; 0x355e <SD_write_and_read_knowns+0x3c>
	SD_read_block(20,FRAMReadBuffer);	//read into the FRAM buffer from the SD card
    356e:	64 e1       	ldi	r22, 0x14	; 20
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	47 ec       	ldi	r20, 0xC7	; 199
    3578:	53 e2       	ldi	r21, 0x23	; 35
    357a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = i%100;	//write 1250 values to the FRAM buffer	
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	c4 e6       	ldi	r28, 0x64	; 100
    3584:	d0 e0       	ldi	r29, 0x00	; 0
    3586:	07 ec       	ldi	r16, 0xC7	; 199
    3588:	13 e2       	ldi	r17, 0x23	; 35
    358a:	c9 01       	movw	r24, r18
    358c:	be 01       	movw	r22, r28
    358e:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    3592:	f8 01       	movw	r30, r16
    3594:	e2 0f       	add	r30, r18
    3596:	f3 1f       	adc	r31, r19
    3598:	80 83       	st	Z, r24
    359a:	2f 5f       	subi	r18, 0xFF	; 255
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	44 e0       	ldi	r20, 0x04	; 4
    35a0:	22 3e       	cpi	r18, 0xE2	; 226
    35a2:	34 07       	cpc	r19, r20
    35a4:	91 f7       	brne	.-28     	; 0x358a <SD_write_and_read_knowns+0x68>
	SD_write_multiple_blocks(80,FRAMReadBuffer,1250);	//write those values to sd card
    35a6:	60 e5       	ldi	r22, 0x50	; 80
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	47 ec       	ldi	r20, 0xC7	; 199
    35b0:	53 e2       	ldi	r21, 0x23	; 35
    35b2:	22 ee       	ldi	r18, 0xE2	; 226
    35b4:	34 e0       	ldi	r19, 0x04	; 4
    35b6:	0e 94 74 18 	call	0x30e8	; 0x30e8 <SD_write_multiple_blocks>
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = 0;	//clear FRAM buffer
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	27 ec       	ldi	r18, 0xC7	; 199
    35c0:	33 e2       	ldi	r19, 0x23	; 35
    35c2:	f9 01       	movw	r30, r18
    35c4:	e8 0f       	add	r30, r24
    35c6:	f9 1f       	adc	r31, r25
    35c8:	10 82       	st	Z, r1
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	44 e0       	ldi	r20, 0x04	; 4
    35ce:	82 3e       	cpi	r24, 0xE2	; 226
    35d0:	94 07       	cpc	r25, r20
    35d2:	b9 f7       	brne	.-18     	; 0x35c2 <SD_write_and_read_knowns+0xa0>
	SD_read_multiple_blocks(80,FRAMReadBuffer,3);	//read in 3 blocks of data from the memory card
    35d4:	60 e5       	ldi	r22, 0x50	; 80
    35d6:	70 e0       	ldi	r23, 0x00	; 0
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	47 ec       	ldi	r20, 0xC7	; 199
    35de:	53 e2       	ldi	r21, 0x23	; 35
    35e0:	23 e0       	ldi	r18, 0x03	; 3
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	0e 94 c4 19 	call	0x3388	; 0x3388 <SD_read_multiple_blocks>
}
    35e8:	df 91       	pop	r29
    35ea:	cf 91       	pop	r28
    35ec:	1f 91       	pop	r17
    35ee:	0f 91       	pop	r16
    35f0:	08 95       	ret

000035f2 <SD_write_and_read_knowns_FAT>:

void SD_write_and_read_knowns_FAT(){
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	27 ec       	ldi	r18, 0xC7	; 199
    35f8:	33 e2       	ldi	r19, 0x23	; 35
    35fa:	f9 01       	movw	r30, r18
    35fc:	e8 0f       	add	r30, r24
    35fe:	f9 1f       	adc	r31, r25
    3600:	80 83       	st	Z, r24
    3602:	01 96       	adiw	r24, 0x01	; 1
    3604:	88 31       	cpi	r24, 0x18	; 24
    3606:	91 05       	cpc	r25, r1
    3608:	c1 f7       	brne	.-16     	; 0x35fa <SD_write_and_read_knowns_FAT+0x8>
	error = writeFile(newFile);
    360a:	8f e0       	ldi	r24, 0x0F	; 15
    360c:	90 e2       	ldi	r25, 0x20	; 32
    360e:	0e 94 31 21 	call	0x4262	; 0x4262 <writeFile>
    3612:	80 93 53 40 	sts	0x4053, r24
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	27 ec       	ldi	r18, 0xC7	; 199
    361c:	33 e2       	ldi	r19, 0x23	; 35
    361e:	f9 01       	movw	r30, r18
    3620:	e8 0f       	add	r30, r24
    3622:	f9 1f       	adc	r31, r25
    3624:	10 82       	st	Z, r1
    3626:	01 96       	adiw	r24, 0x01	; 1
    3628:	88 31       	cpi	r24, 0x18	; 24
    362a:	91 05       	cpc	r25, r1
    362c:	c1 f7       	brne	.-16     	; 0x361e <SD_write_and_read_knowns_FAT+0x2c>
	error = readFile(READ,newFileR);		//read the data into the buffer from file
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	70 e2       	ldi	r23, 0x20	; 32
    3634:	0e 94 b3 20 	call	0x4166	; 0x4166 <readFile>
    3638:	80 93 53 40 	sts	0x4053, r24
}
    363c:	08 95       	ret

0000363e <RadioCS>:
	PORTD.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
}
*/
//select radio SPI on port D with cs
void RadioCS(uint8_t status){
	if (status) PORTD.OUTCLR = PIN4_bm;
    363e:	88 23       	and	r24, r24
    3640:	29 f0       	breq	.+10     	; 0x364c <RadioCS+0xe>
    3642:	80 e1       	ldi	r24, 0x10	; 16
    3644:	e0 e6       	ldi	r30, 0x60	; 96
    3646:	f6 e0       	ldi	r31, 0x06	; 6
    3648:	86 83       	std	Z+6, r24	; 0x06
    364a:	08 95       	ret
	else {
		PORTD.OUTSET = PIN4_bm;
    364c:	80 e1       	ldi	r24, 0x10	; 16
    364e:	e0 e6       	ldi	r30, 0x60	; 96
    3650:	f6 e0       	ldi	r31, 0x06	; 6
    3652:	85 83       	std	Z+5, r24	; 0x05
    3654:	08 95       	ret

00003656 <SPID_write>:
}
*/
//write a byte of data over SPI port D and read a byte of data simultaneously
uint8_t SPID_write(uint8_t byteToSend){
	uint8_t data;
	SPID.DATA = byteToSend;
    3656:	e0 ec       	ldi	r30, 0xC0	; 192
    3658:	f9 e0       	ldi	r31, 0x09	; 9
    365a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPID.STATUS & SPI_IF_bm)); //wait for byte to be sent
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	88 23       	and	r24, r24
    3660:	ec f7       	brge	.-6      	; 0x365c <SPID_write+0x6>
	data = SPID.DATA; //read SPI data register to reset status flag
    3662:	e0 ec       	ldi	r30, 0xC0	; 192
    3664:	f9 e0       	ldi	r31, 0x09	; 9
    3666:	83 81       	ldd	r24, Z+3	; 0x03
	return data;
}
    3668:	08 95       	ret

0000366a <chibi_test_radio>:
	
}
*/
void chibi_test_radio(){
		
	chb_init();
    366a:	0e 94 53 24 	call	0x48a6	; 0x48a6 <chb_init>
	chb_set_short_addr(0x0001);
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <chb_set_short_addr>
	//chb_set_pwr(10);
	while(1) nop();								//comment this line if testing transmission
    3676:	00 00       	nop
    3678:	fe cf       	rjmp	.-4      	; 0x3676 <chibi_test_radio+0xc>

0000367a <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    367a:	cf 92       	push	r12
    367c:	df 92       	push	r13
    367e:	ef 92       	push	r14
    3680:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    3682:	20 91 47 40 	lds	r18, 0x4047
    3686:	30 91 48 40 	lds	r19, 0x4048
    368a:	c0 90 c3 23 	lds	r12, 0x23C3
    368e:	d0 90 c4 23 	lds	r13, 0x23C4
    3692:	e0 90 c5 23 	lds	r14, 0x23C5
    3696:	f0 90 c6 23 	lds	r15, 0x23C6
    369a:	62 50       	subi	r22, 0x02	; 2
    369c:	70 40       	sbci	r23, 0x00	; 0
    369e:	80 40       	sbci	r24, 0x00	; 0
    36a0:	90 40       	sbci	r25, 0x00	; 0
    36a2:	40 e0       	ldi	r20, 0x00	; 0
    36a4:	50 e0       	ldi	r21, 0x00	; 0
    36a6:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	c8 0e       	add	r12, r24
    36b0:	d9 1e       	adc	r13, r25
    36b2:	ea 1e       	adc	r14, r26
    36b4:	fb 1e       	adc	r15, r27
}
    36b6:	6c 2d       	mov	r22, r12
    36b8:	7d 2d       	mov	r23, r13
    36ba:	8e 2d       	mov	r24, r14
    36bc:	9f 2d       	mov	r25, r15
    36be:	ff 90       	pop	r15
    36c0:	ef 90       	pop	r14
    36c2:	df 90       	pop	r13
    36c4:	cf 90       	pop	r12
    36c6:	08 95       	ret

000036c8 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    36c8:	2f 92       	push	r2
    36ca:	3f 92       	push	r3
    36cc:	4f 92       	push	r4
    36ce:	5f 92       	push	r5
    36d0:	7f 92       	push	r7
    36d2:	8f 92       	push	r8
    36d4:	9f 92       	push	r9
    36d6:	af 92       	push	r10
    36d8:	bf 92       	push	r11
    36da:	cf 92       	push	r12
    36dc:	df 92       	push	r13
    36de:	ef 92       	push	r14
    36e0:	ff 92       	push	r15
    36e2:	0f 93       	push	r16
    36e4:	1f 93       	push	r17
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	74 2e       	mov	r7, r20
    36f0:	18 01       	movw	r2, r16
    36f2:	29 01       	movw	r4, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    36f4:	c0 90 4d 40 	lds	r12, 0x404D
    36f8:	d0 90 4e 40 	lds	r13, 0x404E
    36fc:	4c 01       	movw	r8, r24
    36fe:	5d 01       	movw	r10, r26
    3700:	88 0c       	add	r8, r8
    3702:	99 1c       	adc	r9, r9
    3704:	aa 1c       	adc	r10, r10
    3706:	bb 1c       	adc	r11, r11
    3708:	88 0c       	add	r8, r8
    370a:	99 1c       	adc	r9, r9
    370c:	aa 1c       	adc	r10, r10
    370e:	bb 1c       	adc	r11, r11
    3710:	20 91 3c 40 	lds	r18, 0x403C
    3714:	30 91 3d 40 	lds	r19, 0x403D
    3718:	ee 24       	eor	r14, r14
    371a:	ff 24       	eor	r15, r15
    371c:	80 91 49 40 	lds	r24, 0x4049
    3720:	90 91 4a 40 	lds	r25, 0x404A
    3724:	a0 91 4b 40 	lds	r26, 0x404B
    3728:	b0 91 4c 40 	lds	r27, 0x404C
    372c:	c8 0e       	add	r12, r24
    372e:	d9 1e       	adc	r13, r25
    3730:	ea 1e       	adc	r14, r26
    3732:	fb 1e       	adc	r15, r27
    3734:	40 e0       	ldi	r20, 0x00	; 0
    3736:	50 e0       	ldi	r21, 0x00	; 0
    3738:	c5 01       	movw	r24, r10
    373a:	b4 01       	movw	r22, r8
    373c:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    3740:	c2 0e       	add	r12, r18
    3742:	d3 1e       	adc	r13, r19
    3744:	e4 1e       	adc	r14, r20
    3746:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    3748:	20 91 3c 40 	lds	r18, 0x403C
    374c:	30 91 3d 40 	lds	r19, 0x403D
    3750:	40 e0       	ldi	r20, 0x00	; 0
    3752:	50 e0       	ldi	r21, 0x00	; 0
    3754:	c5 01       	movw	r24, r10
    3756:	b4 01       	movw	r22, r8
    3758:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	ec 01       	movw	r28, r24

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);
    3762:	c7 01       	movw	r24, r14
    3764:	b6 01       	movw	r22, r12
    3766:	4f eb       	ldi	r20, 0xBF	; 191
    3768:	51 e2       	ldi	r21, 0x21	; 33
    376a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &SDBuffer[FATEntryOffset];
    376e:	c1 54       	subi	r28, 0x41	; 65
    3770:	de 4d       	sbci	r29, 0xDE	; 222

if(get_set == GET)
    3772:	77 20       	and	r7, r7
    3774:	31 f4       	brne	.+12     	; 0x3782 <getSetNextCluster+0xba>
  return ((*FATEntryValue) & 0x0fffffff);
    3776:	08 81       	ld	r16, Y
    3778:	19 81       	ldd	r17, Y+1	; 0x01
    377a:	2a 81       	ldd	r18, Y+2	; 0x02
    377c:	3b 81       	ldd	r19, Y+3	; 0x03
    377e:	3f 70       	andi	r19, 0x0F	; 15
    3780:	0f c0       	rjmp	.+30     	; 0x37a0 <getSetNextCluster+0xd8>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    3782:	28 82       	st	Y, r2
    3784:	39 82       	std	Y+1, r3	; 0x01
    3786:	4a 82       	std	Y+2, r4	; 0x02
    3788:	5b 82       	std	Y+3, r5	; 0x03

SD_write_block(FATEntrySector,SDBuffer,512);
    378a:	c7 01       	movw	r24, r14
    378c:	b6 01       	movw	r22, r12
    378e:	4f eb       	ldi	r20, 0xBF	; 191
    3790:	51 e2       	ldi	r21, 0x21	; 33
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	32 e0       	ldi	r19, 0x02	; 2
    3796:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SD_write_block>

return (0);
    379a:	00 e0       	ldi	r16, 0x00	; 0
    379c:	10 e0       	ldi	r17, 0x00	; 0
    379e:	98 01       	movw	r18, r16
}
    37a0:	60 2f       	mov	r22, r16
    37a2:	71 2f       	mov	r23, r17
    37a4:	82 2f       	mov	r24, r18
    37a6:	93 2f       	mov	r25, r19
    37a8:	df 91       	pop	r29
    37aa:	cf 91       	pop	r28
    37ac:	1f 91       	pop	r17
    37ae:	0f 91       	pop	r16
    37b0:	ff 90       	pop	r15
    37b2:	ef 90       	pop	r14
    37b4:	df 90       	pop	r13
    37b6:	cf 90       	pop	r12
    37b8:	bf 90       	pop	r11
    37ba:	af 90       	pop	r10
    37bc:	9f 90       	pop	r9
    37be:	8f 90       	pop	r8
    37c0:	7f 90       	pop	r7
    37c2:	5f 90       	pop	r5
    37c4:	4f 90       	pop	r4
    37c6:	3f 90       	pop	r3
    37c8:	2f 90       	pop	r2
    37ca:	08 95       	ret

000037cc <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    37cc:	cf 92       	push	r12
    37ce:	df 92       	push	r13
    37d0:	ef 92       	push	r14
    37d2:	ff 92       	push	r15
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	c8 2f       	mov	r28, r24
    37dc:	06 2f       	mov	r16, r22
    37de:	69 01       	movw	r12, r18
    37e0:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;
//unsigned char error;

SD_read_block(unusedSectors + 1,SDBuffer);
    37e2:	80 91 49 40 	lds	r24, 0x4049
    37e6:	90 91 4a 40 	lds	r25, 0x404A
    37ea:	a0 91 4b 40 	lds	r26, 0x404B
    37ee:	b0 91 4c 40 	lds	r27, 0x404C
    37f2:	bc 01       	movw	r22, r24
    37f4:	cd 01       	movw	r24, r26
    37f6:	6f 5f       	subi	r22, 0xFF	; 255
    37f8:	7f 4f       	sbci	r23, 0xFF	; 255
    37fa:	8f 4f       	sbci	r24, 0xFF	; 255
    37fc:	9f 4f       	sbci	r25, 0xFF	; 255
    37fe:	4f eb       	ldi	r20, 0xBF	; 191
    3800:	51 e2       	ldi	r21, 0x21	; 33
    3802:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    3806:	80 91 bf 21 	lds	r24, 0x21BF
    380a:	90 91 c0 21 	lds	r25, 0x21C0
    380e:	a0 91 c1 21 	lds	r26, 0x21C1
    3812:	b0 91 c2 21 	lds	r27, 0x21C2
    3816:	82 35       	cpi	r24, 0x52	; 82
    3818:	22 e5       	ldi	r18, 0x52	; 82
    381a:	92 07       	cpc	r25, r18
    381c:	21 e6       	ldi	r18, 0x61	; 97
    381e:	a2 07       	cpc	r26, r18
    3820:	21 e4       	ldi	r18, 0x41	; 65
    3822:	b2 07       	cpc	r27, r18
    3824:	09 f0       	breq	.+2      	; 0x3828 <getSetFreeCluster+0x5c>
    3826:	63 c0       	rjmp	.+198    	; 0x38ee <getSetFreeCluster+0x122>
    3828:	80 91 a3 23 	lds	r24, 0x23A3
    382c:	90 91 a4 23 	lds	r25, 0x23A4
    3830:	a0 91 a5 23 	lds	r26, 0x23A5
    3834:	b0 91 a6 23 	lds	r27, 0x23A6
    3838:	82 37       	cpi	r24, 0x72	; 114
    383a:	22 e7       	ldi	r18, 0x72	; 114
    383c:	92 07       	cpc	r25, r18
    383e:	21 e4       	ldi	r18, 0x41	; 65
    3840:	a2 07       	cpc	r26, r18
    3842:	21 e6       	ldi	r18, 0x61	; 97
    3844:	b2 07       	cpc	r27, r18
    3846:	09 f0       	breq	.+2      	; 0x384a <getSetFreeCluster+0x7e>
    3848:	56 c0       	rjmp	.+172    	; 0x38f6 <getSetFreeCluster+0x12a>
    384a:	80 91 bb 23 	lds	r24, 0x23BB
    384e:	90 91 bc 23 	lds	r25, 0x23BC
    3852:	a0 91 bd 23 	lds	r26, 0x23BD
    3856:	b0 91 be 23 	lds	r27, 0x23BE
    385a:	80 30       	cpi	r24, 0x00	; 0
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	92 07       	cpc	r25, r18
    3860:	25 e5       	ldi	r18, 0x55	; 85
    3862:	a2 07       	cpc	r26, r18
    3864:	2a ea       	ldi	r18, 0xAA	; 170
    3866:	b2 07       	cpc	r27, r18
    3868:	09 f0       	breq	.+2      	; 0x386c <getSetFreeCluster+0xa0>
    386a:	49 c0       	rjmp	.+146    	; 0x38fe <getSetFreeCluster+0x132>
  return 0xffffffff;

 if(get_set == GET)
    386c:	00 23       	and	r16, r16
    386e:	a1 f4       	brne	.+40     	; 0x3898 <getSetFreeCluster+0xcc>
 {
   if(totOrNext == TOTAL_FREE)
    3870:	c1 30       	cpi	r28, 0x01	; 1
    3872:	49 f4       	brne	.+18     	; 0x3886 <getSetFreeCluster+0xba>
      return(FS->freeClusterCount);
    3874:	00 91 a7 23 	lds	r16, 0x23A7
    3878:	10 91 a8 23 	lds	r17, 0x23A8
    387c:	20 91 a9 23 	lds	r18, 0x23A9
    3880:	30 91 aa 23 	lds	r19, 0x23AA
    3884:	3f c0       	rjmp	.+126    	; 0x3904 <getSetFreeCluster+0x138>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    3886:	00 91 ab 23 	lds	r16, 0x23AB
    388a:	10 91 ac 23 	lds	r17, 0x23AC
    388e:	20 91 ad 23 	lds	r18, 0x23AD
    3892:	30 91 ae 23 	lds	r19, 0x23AE
    3896:	36 c0       	rjmp	.+108    	; 0x3904 <getSetFreeCluster+0x138>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    3898:	c1 30       	cpi	r28, 0x01	; 1
    389a:	49 f4       	brne	.+18     	; 0x38ae <getSetFreeCluster+0xe2>
      FS->freeClusterCount = FSEntry;
    389c:	c0 92 a7 23 	sts	0x23A7, r12
    38a0:	d0 92 a8 23 	sts	0x23A8, r13
    38a4:	e0 92 a9 23 	sts	0x23A9, r14
    38a8:	f0 92 aa 23 	sts	0x23AA, r15
    38ac:	08 c0       	rjmp	.+16     	; 0x38be <getSetFreeCluster+0xf2>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    38ae:	c0 92 ab 23 	sts	0x23AB, r12
    38b2:	d0 92 ac 23 	sts	0x23AC, r13
    38b6:	e0 92 ad 23 	sts	0x23AD, r14
    38ba:	f0 92 ae 23 	sts	0x23AE, r15
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
    38be:	80 91 49 40 	lds	r24, 0x4049
    38c2:	90 91 4a 40 	lds	r25, 0x404A
    38c6:	a0 91 4b 40 	lds	r26, 0x404B
    38ca:	b0 91 4c 40 	lds	r27, 0x404C
    38ce:	bc 01       	movw	r22, r24
    38d0:	cd 01       	movw	r24, r26
    38d2:	6f 5f       	subi	r22, 0xFF	; 255
    38d4:	7f 4f       	sbci	r23, 0xFF	; 255
    38d6:	8f 4f       	sbci	r24, 0xFF	; 255
    38d8:	9f 4f       	sbci	r25, 0xFF	; 255
    38da:	4f eb       	ldi	r20, 0xBF	; 191
    38dc:	51 e2       	ldi	r21, 0x21	; 33
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	32 e0       	ldi	r19, 0x02	; 2
    38e2:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SD_write_block>
 }
 return 0xffffffff;
    38e6:	0f ef       	ldi	r16, 0xFF	; 255
    38e8:	1f ef       	ldi	r17, 0xFF	; 255
    38ea:	98 01       	movw	r18, r16
    38ec:	0b c0       	rjmp	.+22     	; 0x3904 <getSetFreeCluster+0x138>
//unsigned char error;

SD_read_block(unusedSectors + 1,SDBuffer);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
    38ee:	0f ef       	ldi	r16, 0xFF	; 255
    38f0:	1f ef       	ldi	r17, 0xFF	; 255
    38f2:	98 01       	movw	r18, r16
    38f4:	07 c0       	rjmp	.+14     	; 0x3904 <getSetFreeCluster+0x138>
    38f6:	0f ef       	ldi	r16, 0xFF	; 255
    38f8:	1f ef       	ldi	r17, 0xFF	; 255
    38fa:	98 01       	movw	r18, r16
    38fc:	03 c0       	rjmp	.+6      	; 0x3904 <getSetFreeCluster+0x138>
    38fe:	0f ef       	ldi	r16, 0xFF	; 255
    3900:	1f ef       	ldi	r17, 0xFF	; 255
    3902:	98 01       	movw	r18, r16
	  FS->nextFreeCluster = FSEntry;
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
 }
 return 0xffffffff;
}
    3904:	60 2f       	mov	r22, r16
    3906:	71 2f       	mov	r23, r17
    3908:	82 2f       	mov	r24, r18
    390a:	93 2f       	mov	r25, r19
    390c:	cf 91       	pop	r28
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	ff 90       	pop	r15
    3914:	ef 90       	pop	r14
    3916:	df 90       	pop	r13
    3918:	cf 90       	pop	r12
    391a:	08 95       	ret

0000391c <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    391c:	ef 92       	push	r14
    391e:	ff 92       	push	r15
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    3928:	10 92 49 40 	sts	0x4049, r1
    392c:	10 92 4a 40 	sts	0x404A, r1
    3930:	10 92 4b 40 	sts	0x404B, r1
    3934:	10 92 4c 40 	sts	0x404C, r1

SD_read_block(0,SDBuffer);
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	cb 01       	movw	r24, r22
    393e:	4f eb       	ldi	r20, 0xBF	; 191
    3940:	51 e2       	ldi	r21, 0x21	; 33
    3942:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
bpb = (struct BS_Structure *)SDBuffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    3946:	80 91 bf 21 	lds	r24, 0x21BF
    394a:	89 3e       	cpi	r24, 0xE9	; 233
    394c:	31 f1       	breq	.+76     	; 0x399a <getBootSectorData+0x7e>
    394e:	8b 3e       	cpi	r24, 0xEB	; 235
    3950:	21 f1       	breq	.+72     	; 0x399a <getBootSectorData+0x7e>
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    3952:	80 91 bd 23 	lds	r24, 0x23BD
    3956:	90 91 be 23 	lds	r25, 0x23BE
    395a:	2a ea       	ldi	r18, 0xAA	; 170
    395c:	85 35       	cpi	r24, 0x55	; 85
    395e:	92 07       	cpc	r25, r18
    3960:	09 f0       	breq	.+2      	; 0x3964 <getBootSectorData+0x48>
    3962:	b7 c0       	rjmp	.+366    	; 0x3ad2 <getBootSectorData+0x1b6>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    3964:	60 91 85 23 	lds	r22, 0x2385
    3968:	70 91 86 23 	lds	r23, 0x2386
    396c:	80 91 87 23 	lds	r24, 0x2387
    3970:	90 91 88 23 	lds	r25, 0x2388
    3974:	60 93 49 40 	sts	0x4049, r22
    3978:	70 93 4a 40 	sts	0x404A, r23
    397c:	80 93 4b 40 	sts	0x404B, r24
    3980:	90 93 4c 40 	sts	0x404C, r25
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
    3984:	4f eb       	ldi	r20, 0xBF	; 191
    3986:	51 e2       	ldi	r21, 0x21	; 33
    3988:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    398c:	80 91 bf 21 	lds	r24, 0x21BF
    3990:	89 3e       	cpi	r24, 0xE9	; 233
    3992:	19 f0       	breq	.+6      	; 0x399a <getBootSectorData+0x7e>
    3994:	8b 3e       	cpi	r24, 0xEB	; 235
    3996:	09 f0       	breq	.+2      	; 0x399a <getBootSectorData+0x7e>
    3998:	9e c0       	rjmp	.+316    	; 0x3ad6 <getBootSectorData+0x1ba>
}

bytesPerSector = bpb->bytesPerSector;
    399a:	80 91 ca 21 	lds	r24, 0x21CA
    399e:	90 91 cb 21 	lds	r25, 0x21CB
    39a2:	80 93 3c 40 	sts	0x403C, r24
    39a6:	90 93 3d 40 	sts	0x403D, r25
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
    39aa:	80 91 cc 21 	lds	r24, 0x21CC
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	80 93 47 40 	sts	0x4047, r24
    39b4:	90 93 48 40 	sts	0x4048, r25
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
    39b8:	e0 90 cd 21 	lds	r14, 0x21CD
    39bc:	f0 90 ce 21 	lds	r15, 0x21CE
    39c0:	e0 92 4d 40 	sts	0x404D, r14
    39c4:	f0 92 4e 40 	sts	0x404E, r15
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    39c8:	80 91 eb 21 	lds	r24, 0x21EB
    39cc:	90 91 ec 21 	lds	r25, 0x21EC
    39d0:	a0 91 ed 21 	lds	r26, 0x21ED
    39d4:	b0 91 ee 21 	lds	r27, 0x21EE
    39d8:	80 93 43 40 	sts	0x4043, r24
    39dc:	90 93 44 40 	sts	0x4044, r25
    39e0:	a0 93 45 40 	sts	0x4045, r26
    39e4:	b0 93 46 40 	sts	0x4046, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    39e8:	c0 91 4d 40 	lds	r28, 0x404D
    39ec:	d0 91 4e 40 	lds	r29, 0x404E
    39f0:	60 91 cf 21 	lds	r22, 0x21CF
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	20 91 e3 21 	lds	r18, 0x21E3
    39fe:	30 91 e4 21 	lds	r19, 0x21E4
    3a02:	40 91 e5 21 	lds	r20, 0x21E5
    3a06:	50 91 e6 21 	lds	r21, 0x21E6
    3a0a:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    3a0e:	8b 01       	movw	r16, r22
    3a10:	9c 01       	movw	r18, r24
    3a12:	ae 01       	movw	r20, r28
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	70 e0       	ldi	r23, 0x00	; 0
    3a18:	80 91 db 21 	lds	r24, 0x21DB
    3a1c:	90 91 dc 21 	lds	r25, 0x21DC
    3a20:	a0 91 dd 21 	lds	r26, 0x21DD
    3a24:	b0 91 de 21 	lds	r27, 0x21DE
    3a28:	84 0f       	add	r24, r20
    3a2a:	95 1f       	adc	r25, r21
    3a2c:	a6 1f       	adc	r26, r22
    3a2e:	b7 1f       	adc	r27, r23
    3a30:	80 0f       	add	r24, r16
    3a32:	91 1f       	adc	r25, r17
    3a34:	a2 1f       	adc	r26, r18
    3a36:	b3 1f       	adc	r27, r19
    3a38:	80 93 c3 23 	sts	0x23C3, r24
    3a3c:	90 93 c4 23 	sts	0x23C4, r25
    3a40:	a0 93 c5 23 	sts	0x23C5, r26
    3a44:	b0 93 c6 23 	sts	0x23C6, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    3a48:	e0 91 47 40 	lds	r30, 0x4047
    3a4c:	f0 91 48 40 	lds	r31, 0x4048
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
    3a50:	c7 01       	movw	r24, r14
    3a52:	a0 e0       	ldi	r26, 0x00	; 0
    3a54:	b0 e0       	ldi	r27, 0x00	; 0
    3a56:	40 91 df 21 	lds	r20, 0x21DF
    3a5a:	50 91 e0 21 	lds	r21, 0x21E0
    3a5e:	60 91 e1 21 	lds	r22, 0x21E1
    3a62:	70 91 e2 21 	lds	r23, 0x21E2
    3a66:	48 1b       	sub	r20, r24
    3a68:	59 0b       	sbc	r21, r25
    3a6a:	6a 0b       	sbc	r22, r26
    3a6c:	7b 0b       	sbc	r23, r27
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
    3a6e:	cb 01       	movw	r24, r22
    3a70:	ba 01       	movw	r22, r20
    3a72:	60 1b       	sub	r22, r16
    3a74:	71 0b       	sbc	r23, r17
    3a76:	82 0b       	sbc	r24, r18
    3a78:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    3a7a:	9f 01       	movw	r18, r30
    3a7c:	40 e0       	ldi	r20, 0x00	; 0
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    3a84:	20 93 3f 40 	sts	0x403F, r18
    3a88:	30 93 40 40 	sts	0x4040, r19
    3a8c:	40 93 41 40 	sts	0x4041, r20
    3a90:	50 93 42 40 	sts	0x4042, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	a9 01       	movw	r20, r18
    3a9e:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <getSetFreeCluster>
    3aa2:	ab 01       	movw	r20, r22
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	80 91 3f 40 	lds	r24, 0x403F
    3aaa:	90 91 40 40 	lds	r25, 0x4040
    3aae:	a0 91 41 40 	lds	r26, 0x4041
    3ab2:	b0 91 42 40 	lds	r27, 0x4042
    3ab6:	84 17       	cp	r24, r20
    3ab8:	95 07       	cpc	r25, r21
    3aba:	a6 07       	cpc	r26, r22
    3abc:	b7 07       	cpc	r27, r23
    3abe:	20 f4       	brcc	.+8      	; 0x3ac8 <getBootSectorData+0x1ac>
     freeClusterCountUpdated = 0;
    3ac0:	10 92 54 40 	sts	0x4054, r1
else
	 freeClusterCountUpdated = 1;
return 0;
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	08 c0       	rjmp	.+16     	; 0x3ad8 <getBootSectorData+0x1bc>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	80 93 54 40 	sts	0x4054, r24
return 0;
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	03 c0       	rjmp	.+6      	; 0x3ad8 <getBootSectorData+0x1bc>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	01 c0       	rjmp	.+2      	; 0x3ad8 <getBootSectorData+0x1bc>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	08 95       	ret

00003ae6 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	cd b7       	in	r28, 0x3d	; 61
    3aec:	de b7       	in	r29, 0x3e	; 62
    3aee:	2b 97       	sbiw	r28, 0x0b	; 11
    3af0:	cd bf       	out	0x3d, r28	; 61
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	9c 01       	movw	r18, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
    3af6:	fc 01       	movw	r30, r24
    3af8:	80 81       	ld	r24, Z
    3afa:	8e 32       	cpi	r24, 0x2E	; 46
    3afc:	81 f0       	breq	.+32     	; 0x3b1e <convertFileName+0x38>
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    3afe:	31 96       	adiw	r30, 0x01	; 1
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    3b00:	41 e0       	ldi	r20, 0x01	; 1
if(fileName[j] == '.') break;
    3b02:	81 91       	ld	r24, Z+
    3b04:	8e 32       	cpi	r24, 0x2E	; 46
    3b06:	29 f0       	breq	.+10     	; 0x3b12 <convertFileName+0x2c>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    3b08:	4f 5f       	subi	r20, 0xFF	; 255
    3b0a:	4c 30       	cpi	r20, 0x0C	; 12
    3b0c:	d1 f7       	brne	.-12     	; 0x3b02 <convertFileName+0x1c>
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	64 c0       	rjmp	.+200    	; 0x3bda <convertFileName+0xf4>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
    3b12:	49 30       	cpi	r20, 0x09	; 9
    3b14:	08 f0       	brcs	.+2      	; 0x3b18 <convertFileName+0x32>
    3b16:	60 c0       	rjmp	.+192    	; 0x3bd8 <convertFileName+0xf2>
	return 1;}

for(k=0; k<j; k++) //setting file name
    3b18:	44 23       	and	r20, r20
    3b1a:	29 f4       	brne	.+10     	; 0x3b26 <convertFileName+0x40>
    3b1c:	01 c0       	rjmp	.+2      	; 0x3b20 <convertFileName+0x3a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	84 2f       	mov	r24, r20

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    3b22:	90 e2       	ldi	r25, 0x20	; 32
    3b24:	14 c0       	rjmp	.+40     	; 0x3b4e <convertFileName+0x68>
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}

for(k=0; k<j; k++) //setting file name
    3b26:	d9 01       	movw	r26, r18
    3b28:	fe 01       	movw	r30, r28
    3b2a:	31 96       	adiw	r30, 0x01	; 1
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    3b2c:	84 2f       	mov	r24, r20
    3b2e:	81 50       	subi	r24, 0x01	; 1
    3b30:	62 e0       	ldi	r22, 0x02	; 2
    3b32:	70 e0       	ldi	r23, 0x00	; 0
    3b34:	6c 0f       	add	r22, r28
    3b36:	7d 1f       	adc	r23, r29
    3b38:	68 0f       	add	r22, r24
    3b3a:	71 1d       	adc	r23, r1
    3b3c:	cb 01       	movw	r24, r22

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
    3b3e:	5d 91       	ld	r21, X+
    3b40:	51 93       	st	Z+, r21
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}

for(k=0; k<j; k++) //setting file name
    3b42:	e8 17       	cp	r30, r24
    3b44:	f9 07       	cpc	r31, r25
    3b46:	d9 f7       	brne	.-10     	; 0x3b3e <convertFileName+0x58>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    3b48:	48 30       	cpi	r20, 0x08	; 8
    3b4a:	50 f3       	brcs	.-44     	; 0x3b20 <convertFileName+0x3a>
    3b4c:	0a c0       	rjmp	.+20     	; 0x3b62 <convertFileName+0x7c>
  fileNameFAT[k] = ' ';
    3b4e:	e1 e0       	ldi	r30, 0x01	; 1
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	ec 0f       	add	r30, r28
    3b54:	fd 1f       	adc	r31, r29
    3b56:	e8 0f       	add	r30, r24
    3b58:	f1 1d       	adc	r31, r1
    3b5a:	90 83       	st	Z, r25
	return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    3b5c:	8f 5f       	subi	r24, 0xFF	; 255
    3b5e:	88 30       	cpi	r24, 0x08	; 8
    3b60:	b0 f3       	brcs	.-20     	; 0x3b4e <convertFileName+0x68>
  fileNameFAT[k] = ' ';

j++;
    3b62:	4f 5f       	subi	r20, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
    3b64:	88 e0       	ldi	r24, 0x08	; 8
{
  if(fileName[j] != 0)
    3b66:	f9 01       	movw	r30, r18
    3b68:	e4 0f       	add	r30, r20
    3b6a:	f1 1d       	adc	r31, r1
    3b6c:	90 81       	ld	r25, Z
    3b6e:	99 23       	and	r25, r25
    3b70:	19 f4       	brne	.+6      	; 0x3b78 <convertFileName+0x92>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    3b72:	8b 30       	cpi	r24, 0x0B	; 11
    3b74:	50 f0       	brcs	.+20     	; 0x3b8a <convertFileName+0xa4>
    3b76:	15 c0       	rjmp	.+42     	; 0x3ba2 <convertFileName+0xbc>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
    3b78:	e1 e0       	ldi	r30, 0x01	; 1
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	ec 0f       	add	r30, r28
    3b7e:	fd 1f       	adc	r31, r29
    3b80:	e8 0f       	add	r30, r24
    3b82:	f1 1d       	adc	r31, r1
    3b84:	90 83       	st	Z, r25
    3b86:	4f 5f       	subi	r20, 0xFF	; 255
    3b88:	0c c0       	rjmp	.+24     	; 0x3ba2 <convertFileName+0xbc>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    3b8a:	90 e2       	ldi	r25, 0x20	; 32
    3b8c:	e1 e0       	ldi	r30, 0x01	; 1
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	ec 0f       	add	r30, r28
    3b92:	fd 1f       	adc	r31, r29
    3b94:	e8 0f       	add	r30, r24
    3b96:	f1 1d       	adc	r31, r1
    3b98:	90 83       	st	Z, r25
    3b9a:	8f 5f       	subi	r24, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    3b9c:	8b 30       	cpi	r24, 0x0B	; 11
    3b9e:	b1 f7       	brne	.-20     	; 0x3b8c <convertFileName+0xa6>
    3ba0:	03 c0       	rjmp	.+6      	; 0x3ba8 <convertFileName+0xc2>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
    3ba2:	8f 5f       	subi	r24, 0xFF	; 255
    3ba4:	8b 30       	cpi	r24, 0x0B	; 11
    3ba6:	f8 f2       	brcs	.-66     	; 0x3b66 <convertFileName+0x80>
    3ba8:	fe 01       	movw	r30, r28
    3baa:	31 96       	adiw	r30, 0x01	; 1
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
    3bac:	ce 01       	movw	r24, r28
    3bae:	0c 96       	adiw	r24, 0x0c	; 12
    3bb0:	df 01       	movw	r26, r30
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    3bb2:	4c 91       	ld	r20, X
    3bb4:	54 2f       	mov	r21, r20
    3bb6:	51 56       	subi	r21, 0x61	; 97
    3bb8:	5a 31       	cpi	r21, 0x1A	; 26
    3bba:	10 f4       	brcc	.+4      	; 0x3bc0 <convertFileName+0xda>
    fileNameFAT[j] -= 0x20;
    3bbc:	40 52       	subi	r20, 0x20	; 32
    3bbe:	4c 93       	st	X, r20
    3bc0:	11 96       	adiw	r26, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    3bc2:	a8 17       	cp	r26, r24
    3bc4:	b9 07       	cpc	r27, r25
    3bc6:	a9 f7       	brne	.-22     	; 0x3bb2 <convertFileName+0xcc>
    3bc8:	d9 01       	movw	r26, r18
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
    3bca:	21 91       	ld	r18, Z+
    3bcc:	2d 93       	st	X+, r18

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    3bce:	8e 17       	cp	r24, r30
    3bd0:	9f 07       	cpc	r25, r31
    3bd2:	d9 f7       	brne	.-10     	; 0x3bca <convertFileName+0xe4>
  fileName[j] = fileNameFAT[j];

return 0;
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	01 c0       	rjmp	.+2      	; 0x3bda <convertFileName+0xf4>

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}
    3bd8:	81 e0       	ldi	r24, 0x01	; 1

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];

return 0;
}
    3bda:	2b 96       	adiw	r28, 0x0b	; 11
    3bdc:	cd bf       	out	0x3d, r28	; 61
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	08 95       	ret

00003be6 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    3be6:	4f 92       	push	r4
    3be8:	5f 92       	push	r5
    3bea:	6f 92       	push	r6
    3bec:	7f 92       	push	r7
    3bee:	8f 92       	push	r8
    3bf0:	9f 92       	push	r9
    3bf2:	af 92       	push	r10
    3bf4:	bf 92       	push	r11
    3bf6:	cf 92       	push	r12
    3bf8:	df 92       	push	r13
    3bfa:	ef 92       	push	r14
    3bfc:	ff 92       	push	r15
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	2b 01       	movw	r4, r22
    3c04:	3c 01       	movw	r6, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    3c06:	20 e8       	ldi	r18, 0x80	; 128
    3c08:	3f ef       	ldi	r19, 0xFF	; 255
    3c0a:	4f ef       	ldi	r20, 0xFF	; 255
    3c0c:	5f ef       	ldi	r21, 0xFF	; 255
    3c0e:	42 22       	and	r4, r18
    3c10:	53 22       	and	r5, r19
    3c12:	64 22       	and	r6, r20
    3c14:	75 22       	and	r7, r21
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    3c16:	80 91 3f 40 	lds	r24, 0x403F
    3c1a:	90 91 40 40 	lds	r25, 0x4040
    3c1e:	a0 91 41 40 	lds	r26, 0x4041
    3c22:	b0 91 42 40 	lds	r27, 0x4042
    3c26:	48 16       	cp	r4, r24
    3c28:	59 06       	cpc	r5, r25
    3c2a:	6a 06       	cpc	r6, r26
    3c2c:	7b 06       	cpc	r7, r27
    3c2e:	08 f0       	brcs	.+2      	; 0x3c32 <searchNextFreeCluster+0x4c>
    3c30:	77 c0       	rjmp	.+238    	; 0x3d20 <searchNextFreeCluster+0x13a>
    3c32:	53 01       	movw	r10, r6
    3c34:	42 01       	movw	r8, r4
    3c36:	88 0c       	add	r8, r8
    3c38:	99 1c       	adc	r9, r9
    3c3a:	aa 1c       	adc	r10, r10
    3c3c:	bb 1c       	adc	r11, r11
    3c3e:	88 0c       	add	r8, r8
    3c40:	99 1c       	adc	r9, r9
    3c42:	aa 1c       	adc	r10, r10
    3c44:	bb 1c       	adc	r11, r11
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
    3c46:	cf eb       	ldi	r28, 0xBF	; 191
    3c48:	d1 e2       	ldi	r29, 0x21	; 33
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    3c4a:	c0 90 4d 40 	lds	r12, 0x404D
    3c4e:	d0 90 4e 40 	lds	r13, 0x404E
    3c52:	20 91 3c 40 	lds	r18, 0x403C
    3c56:	30 91 3d 40 	lds	r19, 0x403D
    3c5a:	ee 24       	eor	r14, r14
    3c5c:	ff 24       	eor	r15, r15
    3c5e:	80 91 49 40 	lds	r24, 0x4049
    3c62:	90 91 4a 40 	lds	r25, 0x404A
    3c66:	a0 91 4b 40 	lds	r26, 0x404B
    3c6a:	b0 91 4c 40 	lds	r27, 0x404C
    3c6e:	c8 0e       	add	r12, r24
    3c70:	d9 1e       	adc	r13, r25
    3c72:	ea 1e       	adc	r14, r26
    3c74:	fb 1e       	adc	r15, r27
    3c76:	40 e0       	ldi	r20, 0x00	; 0
    3c78:	50 e0       	ldi	r21, 0x00	; 0
    3c7a:	c5 01       	movw	r24, r10
    3c7c:	b4 01       	movw	r22, r8
    3c7e:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    3c82:	c7 01       	movw	r24, r14
    3c84:	b6 01       	movw	r22, r12
    3c86:	62 0f       	add	r22, r18
    3c88:	73 1f       	adc	r23, r19
    3c8a:	84 1f       	adc	r24, r20
    3c8c:	95 1f       	adc	r25, r21
      SD_read_block(sector,SDBuffer);
    3c8e:	ae 01       	movw	r20, r28
    3c90:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    3c94:	88 81       	ld	r24, Y
    3c96:	99 81       	ldd	r25, Y+1	; 0x01
    3c98:	aa 81       	ldd	r26, Y+2	; 0x02
    3c9a:	bb 81       	ldd	r27, Y+3	; 0x03
    3c9c:	bf 70       	andi	r27, 0x0F	; 15
    3c9e:	00 97       	sbiw	r24, 0x00	; 0
    3ca0:	a1 05       	cpc	r26, r1
    3ca2:	b1 05       	cpc	r27, r1
    3ca4:	99 f0       	breq	.+38     	; 0x3ccc <searchNextFreeCluster+0xe6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    3ca6:	21 e0       	ldi	r18, 0x01	; 1
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
    3ca8:	e2 2f       	mov	r30, r18
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	ee 0f       	add	r30, r30
    3cae:	ff 1f       	adc	r31, r31
    3cb0:	ee 0f       	add	r30, r30
    3cb2:	ff 1f       	adc	r31, r31
    3cb4:	e1 54       	subi	r30, 0x41	; 65
    3cb6:	fe 4d       	sbci	r31, 0xDE	; 222
         if(((*value) & 0x0fffffff) == 0)
    3cb8:	80 81       	ld	r24, Z
    3cba:	91 81       	ldd	r25, Z+1	; 0x01
    3cbc:	a2 81       	ldd	r26, Z+2	; 0x02
    3cbe:	b3 81       	ldd	r27, Z+3	; 0x03
    3cc0:	bf 70       	andi	r27, 0x0F	; 15
    3cc2:	00 97       	sbiw	r24, 0x00	; 0
    3cc4:	a1 05       	cpc	r26, r1
    3cc6:	b1 05       	cpc	r27, r1
    3cc8:	39 f4       	brne	.+14     	; 0x3cd8 <searchNextFreeCluster+0xf2>
    3cca:	01 c0       	rjmp	.+2      	; 0x3cce <searchNextFreeCluster+0xe8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
    3cce:	42 0e       	add	r4, r18
    3cd0:	51 1c       	adc	r5, r1
    3cd2:	61 1c       	adc	r6, r1
    3cd4:	71 1c       	adc	r7, r1
    3cd6:	27 c0       	rjmp	.+78     	; 0x3d26 <searchNextFreeCluster+0x140>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    3cd8:	2f 5f       	subi	r18, 0xFF	; 255
    3cda:	32 f7       	brpl	.-52     	; 0x3ca8 <searchNextFreeCluster+0xc2>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    3cdc:	80 e8       	ldi	r24, 0x80	; 128
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	a0 e0       	ldi	r26, 0x00	; 0
    3ce2:	b0 e0       	ldi	r27, 0x00	; 0
    3ce4:	48 0e       	add	r4, r24
    3ce6:	59 1e       	adc	r5, r25
    3ce8:	6a 1e       	adc	r6, r26
    3cea:	7b 1e       	adc	r7, r27
    3cec:	80 91 3f 40 	lds	r24, 0x403F
    3cf0:	90 91 40 40 	lds	r25, 0x4040
    3cf4:	a0 91 41 40 	lds	r26, 0x4041
    3cf8:	b0 91 42 40 	lds	r27, 0x4042
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	32 e0       	ldi	r19, 0x02	; 2
    3d00:	40 e0       	ldi	r20, 0x00	; 0
    3d02:	50 e0       	ldi	r21, 0x00	; 0
    3d04:	82 0e       	add	r8, r18
    3d06:	93 1e       	adc	r9, r19
    3d08:	a4 1e       	adc	r10, r20
    3d0a:	b5 1e       	adc	r11, r21
    3d0c:	48 16       	cp	r4, r24
    3d0e:	59 06       	cpc	r5, r25
    3d10:	6a 06       	cpc	r6, r26
    3d12:	7b 06       	cpc	r7, r27
    3d14:	08 f4       	brcc	.+2      	; 0x3d18 <searchNextFreeCluster+0x132>
    3d16:	99 cf       	rjmp	.-206    	; 0x3c4a <searchNextFreeCluster+0x64>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
    3d18:	44 24       	eor	r4, r4
    3d1a:	55 24       	eor	r5, r5
    3d1c:	32 01       	movw	r6, r4
    3d1e:	03 c0       	rjmp	.+6      	; 0x3d26 <searchNextFreeCluster+0x140>
    3d20:	44 24       	eor	r4, r4
    3d22:	55 24       	eor	r5, r5
    3d24:	32 01       	movw	r6, r4
}
    3d26:	64 2d       	mov	r22, r4
    3d28:	75 2d       	mov	r23, r5
    3d2a:	86 2d       	mov	r24, r6
    3d2c:	97 2d       	mov	r25, r7
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	ff 90       	pop	r15
    3d34:	ef 90       	pop	r14
    3d36:	df 90       	pop	r13
    3d38:	cf 90       	pop	r12
    3d3a:	bf 90       	pop	r11
    3d3c:	af 90       	pop	r10
    3d3e:	9f 90       	pop	r9
    3d40:	8f 90       	pop	r8
    3d42:	7f 90       	pop	r7
    3d44:	6f 90       	pop	r6
    3d46:	5f 90       	pop	r5
    3d48:	4f 90       	pop	r4
    3d4a:	08 95       	ret

00003d4c <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    3d4c:	cf 92       	push	r12
    3d4e:	df 92       	push	r13
    3d50:	ef 92       	push	r14
    3d52:	ff 92       	push	r15
    3d54:	cf 93       	push	r28
    3d56:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    3d58:	db 01       	movw	r26, r22
    3d5a:	ca 01       	movw	r24, r20
    3d5c:	91 70       	andi	r25, 0x01	; 1
    3d5e:	a0 70       	andi	r26, 0x00	; 0
    3d60:	b0 70       	andi	r27, 0x00	; 0
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	a1 05       	cpc	r26, r1
    3d66:	b1 05       	cpc	r27, r1
    3d68:	51 f4       	brne	.+20     	; 0x3d7e <freeMemoryUpdate+0x32>
    3d6a:	03 2e       	mov	r0, r19
    3d6c:	39 e0       	ldi	r19, 0x09	; 9
    3d6e:	76 95       	lsr	r23
    3d70:	67 95       	ror	r22
    3d72:	57 95       	ror	r21
    3d74:	47 95       	ror	r20
    3d76:	3a 95       	dec	r19
    3d78:	d1 f7       	brne	.-12     	; 0x3d6e <freeMemoryUpdate+0x22>
    3d7a:	30 2d       	mov	r19, r0
    3d7c:	0d c0       	rjmp	.+26     	; 0x3d98 <freeMemoryUpdate+0x4c>
  else size = (size / 512) +1;
    3d7e:	03 2e       	mov	r0, r19
    3d80:	39 e0       	ldi	r19, 0x09	; 9
    3d82:	76 95       	lsr	r23
    3d84:	67 95       	ror	r22
    3d86:	57 95       	ror	r21
    3d88:	47 95       	ror	r20
    3d8a:	3a 95       	dec	r19
    3d8c:	d1 f7       	brne	.-12     	; 0x3d82 <freeMemoryUpdate+0x36>
    3d8e:	30 2d       	mov	r19, r0
    3d90:	4f 5f       	subi	r20, 0xFF	; 255
    3d92:	5f 4f       	sbci	r21, 0xFF	; 255
    3d94:	6f 4f       	sbci	r22, 0xFF	; 255
    3d96:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
    3d98:	db 01       	movw	r26, r22
    3d9a:	ca 01       	movw	r24, r20
    3d9c:	87 70       	andi	r24, 0x07	; 7
    3d9e:	90 70       	andi	r25, 0x00	; 0
    3da0:	a0 70       	andi	r26, 0x00	; 0
    3da2:	b0 70       	andi	r27, 0x00	; 0
    3da4:	00 97       	sbiw	r24, 0x00	; 0
    3da6:	a1 05       	cpc	r26, r1
    3da8:	b1 05       	cpc	r27, r1
    3daa:	59 f4       	brne	.+22     	; 0x3dc2 <freeMemoryUpdate+0x76>
    3dac:	6a 01       	movw	r12, r20
    3dae:	7b 01       	movw	r14, r22
    3db0:	68 94       	set
    3db2:	12 f8       	bld	r1, 2
    3db4:	f6 94       	lsr	r15
    3db6:	e7 94       	ror	r14
    3db8:	d7 94       	ror	r13
    3dba:	c7 94       	ror	r12
    3dbc:	16 94       	lsr	r1
    3dbe:	d1 f7       	brne	.-12     	; 0x3db4 <freeMemoryUpdate+0x68>
    3dc0:	0f c0       	rjmp	.+30     	; 0x3de0 <freeMemoryUpdate+0x94>
  else size = (size / 8) +1;
    3dc2:	6a 01       	movw	r12, r20
    3dc4:	7b 01       	movw	r14, r22
    3dc6:	68 94       	set
    3dc8:	12 f8       	bld	r1, 2
    3dca:	f6 94       	lsr	r15
    3dcc:	e7 94       	ror	r14
    3dce:	d7 94       	ror	r13
    3dd0:	c7 94       	ror	r12
    3dd2:	16 94       	lsr	r1
    3dd4:	d1 f7       	brne	.-12     	; 0x3dca <freeMemoryUpdate+0x7e>
    3dd6:	08 94       	sec
    3dd8:	c1 1c       	adc	r12, r1
    3dda:	d1 1c       	adc	r13, r1
    3ddc:	e1 1c       	adc	r14, r1
    3dde:	f1 1c       	adc	r15, r1

  if(freeClusterCountUpdated)
    3de0:	80 91 54 40 	lds	r24, 0x4054
    3de4:	88 23       	and	r24, r24
    3de6:	d1 f0       	breq	.+52     	; 0x3e1c <freeMemoryUpdate+0xd0>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	a9 01       	movw	r20, r18
    3df2:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <getSetFreeCluster>
	if(flag == ADD)
    3df6:	cc 23       	and	r28, r28
    3df8:	39 f4       	brne	.+14     	; 0x3e08 <freeMemoryUpdate+0xbc>
  	   freeClusters = freeClusters + size;
    3dfa:	9b 01       	movw	r18, r22
    3dfc:	ac 01       	movw	r20, r24
    3dfe:	2c 0d       	add	r18, r12
    3e00:	3d 1d       	adc	r19, r13
    3e02:	4e 1d       	adc	r20, r14
    3e04:	5f 1d       	adc	r21, r15
    3e06:	06 c0       	rjmp	.+12     	; 0x3e14 <freeMemoryUpdate+0xc8>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    3e08:	9b 01       	movw	r18, r22
    3e0a:	ac 01       	movw	r20, r24
    3e0c:	2c 19       	sub	r18, r12
    3e0e:	3d 09       	sbc	r19, r13
    3e10:	4e 09       	sbc	r20, r14
    3e12:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	61 e0       	ldi	r22, 0x01	; 1
    3e18:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <getSetFreeCluster>
  }
}
    3e1c:	cf 91       	pop	r28
    3e1e:	ff 90       	pop	r15
    3e20:	ef 90       	pop	r14
    3e22:	df 90       	pop	r13
    3e24:	cf 90       	pop	r12
    3e26:	08 95       	ret

00003e28 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    3e28:	2f 92       	push	r2
    3e2a:	3f 92       	push	r3
    3e2c:	4f 92       	push	r4
    3e2e:	5f 92       	push	r5
    3e30:	6f 92       	push	r6
    3e32:	7f 92       	push	r7
    3e34:	8f 92       	push	r8
    3e36:	9f 92       	push	r9
    3e38:	af 92       	push	r10
    3e3a:	bf 92       	push	r11
    3e3c:	cf 92       	push	r12
    3e3e:	df 92       	push	r13
    3e40:	ef 92       	push	r14
    3e42:	ff 92       	push	r15
    3e44:	0f 93       	push	r16
    3e46:	1f 93       	push	r17
    3e48:	cf 93       	push	r28
    3e4a:	df 93       	push	r29
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	2e 97       	sbiw	r28, 0x0e	; 14
    3e52:	cd bf       	out	0x3d, r28	; 61
    3e54:	de bf       	out	0x3e, r29	; 62
    3e56:	d8 2e       	mov	r13, r24
    3e58:	1b 01       	movw	r2, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    3e5a:	80 91 43 40 	lds	r24, 0x4043
    3e5e:	90 91 44 40 	lds	r25, 0x4044
    3e62:	a0 91 45 40 	lds	r26, 0x4045
    3e66:	b0 91 46 40 	lds	r27, 0x4046
    3e6a:	8f 83       	std	Y+7, r24	; 0x07
    3e6c:	98 87       	std	Y+8, r25	; 0x08
    3e6e:	a9 87       	std	Y+9, r26	; 0x09
    3e70:	ba 87       	std	Y+10, r27	; 0x0a
		      //transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    3e72:	cd 2c       	mov	r12, r13
    3e74:	ca 94       	dec	r12
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    3e76:	af eb       	ldi	r26, 0xBF	; 191
    3e78:	b1 e2       	ldi	r27, 0x21	; 33
    3e7a:	fa 2e       	mov	r15, r26
    3e7c:	eb 2e       	mov	r14, r27
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    3e7e:	fb 01       	movw	r30, r22
    3e80:	31 96       	adiw	r30, 0x01	; 1
    3e82:	ed 83       	std	Y+5, r30	; 0x05
    3e84:	fe 83       	std	Y+6, r31	; 0x06

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    3e86:	6f 81       	ldd	r22, Y+7	; 0x07
    3e88:	78 85       	ldd	r23, Y+8	; 0x08
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	0e 94 3d 1b 	call	0x367a	; 0x367a <getFirstSector>
    3e92:	69 83       	std	Y+1, r22	; 0x01
    3e94:	7a 83       	std	Y+2, r23	; 0x02
    3e96:	8b 83       	std	Y+3, r24	; 0x03
    3e98:	9c 83       	std	Y+4, r25	; 0x04

   for(sector = 0; sector < sectorPerCluster; sector++)
    3e9a:	80 91 47 40 	lds	r24, 0x4047
    3e9e:	90 91 48 40 	lds	r25, 0x4048
    3ea2:	00 97       	sbiw	r24, 0x00	; 0
    3ea4:	09 f4       	brne	.+2      	; 0x3ea8 <findFiles+0x80>
    3ea6:	0f c1       	rjmp	.+542    	; 0x40c6 <findFiles+0x29e>
    3ea8:	88 24       	eor	r8, r8
    3eaa:	99 24       	eor	r9, r9
    3eac:	54 01       	movw	r10, r8
    3eae:	0c 2d       	mov	r16, r12
   {
     SD_read_block (firstSector + sector,SDBuffer);
    3eb0:	49 80       	ldd	r4, Y+1	; 0x01
    3eb2:	5a 80       	ldd	r5, Y+2	; 0x02
    3eb4:	6b 80       	ldd	r6, Y+3	; 0x03
    3eb6:	7c 80       	ldd	r7, Y+4	; 0x04
    3eb8:	48 0c       	add	r4, r8
    3eba:	59 1c       	adc	r5, r9
    3ebc:	6a 1c       	adc	r6, r10
    3ebe:	7b 1c       	adc	r7, r11
    3ec0:	c3 01       	movw	r24, r6
    3ec2:	b2 01       	movw	r22, r4
    3ec4:	4f 2d       	mov	r20, r15
    3ec6:	5e 2d       	mov	r21, r14
    3ec8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    3ecc:	80 91 3c 40 	lds	r24, 0x403C
    3ed0:	90 91 3d 40 	lds	r25, 0x403D
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	09 f4       	brne	.+2      	; 0x3eda <findFiles+0xb2>
    3ed8:	e4 c0       	rjmp	.+456    	; 0x40a2 <findFiles+0x27a>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    3eda:	af eb       	ldi	r26, 0xBF	; 191
    3edc:	b1 e2       	ldi	r27, 0x21	; 33
    3ede:	8c 91       	ld	r24, X
    3ee0:	88 23       	and	r24, r24
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <findFiles+0xbe>
    3ee4:	0f c1       	rjmp	.+542    	; 0x4104 <findFiles+0x2dc>
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    3ee6:	af 2d       	mov	r26, r15
    3ee8:	be 2d       	mov	r27, r14
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	6d 81       	ldd	r22, Y+5	; 0x05
    3ef0:	7e 81       	ldd	r23, Y+6	; 0x06
    3ef2:	07 c0       	rjmp	.+14     	; 0x3f02 <findFiles+0xda>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    3ef4:	d9 01       	movw	r26, r18
    3ef6:	a1 54       	subi	r26, 0x41	; 65
    3ef8:	be 4d       	sbci	r27, 0xDE	; 222

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    3efa:	8c 91       	ld	r24, X
    3efc:	88 23       	and	r24, r24
    3efe:	09 f4       	brne	.+2      	; 0x3f02 <findFiles+0xda>
    3f00:	04 c1       	rjmp	.+520    	; 0x410a <findFiles+0x2e2>
		{
		  //if(flag == DELETE)
		      //transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    3f02:	85 3e       	cpi	r24, 0xE5	; 229
    3f04:	09 f4       	brne	.+2      	; 0x3f08 <findFiles+0xe0>
    3f06:	c3 c0       	rjmp	.+390    	; 0x408e <findFiles+0x266>
    3f08:	1b 96       	adiw	r26, 0x0b	; 11
    3f0a:	8c 91       	ld	r24, X
    3f0c:	1b 97       	sbiw	r26, 0x0b	; 11
    3f0e:	8f 30       	cpi	r24, 0x0F	; 15
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <findFiles+0xec>
    3f12:	bd c0       	rjmp	.+378    	; 0x408e <findFiles+0x266>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    3f14:	02 30       	cpi	r16, 0x02	; 2
    3f16:	08 f0       	brcs	.+2      	; 0x3f1a <findFiles+0xf2>
    3f18:	ba c0       	rjmp	.+372    	; 0x408e <findFiles+0x266>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    3f1a:	9c 91       	ld	r25, X
    3f1c:	f1 01       	movw	r30, r2
    3f1e:	80 81       	ld	r24, Z
    3f20:	98 17       	cp	r25, r24
    3f22:	09 f0       	breq	.+2      	; 0x3f26 <findFiles+0xfe>
    3f24:	b4 c0       	rjmp	.+360    	; 0x408e <findFiles+0x266>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    3f26:	fd 01       	movw	r30, r26
    3f28:	31 96       	adiw	r30, 0x01	; 1
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	6b 87       	std	Y+11, r22	; 0x0b
    3f2e:	7c 87       	std	Y+12, r23	; 0x0c
    3f30:	ad 87       	std	Y+13, r26	; 0x0d
    3f32:	be 87       	std	Y+14, r27	; 0x0e
    3f34:	a9 01       	movw	r20, r18
            if(dir->name[j] != fileName[j]) break;
    3f36:	21 91       	ld	r18, Z+
    3f38:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f3a:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f3c:	9d 91       	ld	r25, X+
    3f3e:	ab 87       	std	Y+11, r26	; 0x0b
    3f40:	bc 87       	std	Y+12, r27	; 0x0c
    3f42:	29 17       	cp	r18, r25
    3f44:	41 f4       	brne	.+16     	; 0x3f56 <findFiles+0x12e>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    3f46:	8f 5f       	subi	r24, 0xFF	; 255
    3f48:	8b 30       	cpi	r24, 0x0B	; 11
    3f4a:	a9 f7       	brne	.-22     	; 0x3f36 <findFiles+0x10e>
    3f4c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3f4e:	be 85       	ldd	r27, Y+14	; 0x0e
    3f50:	9a 01       	movw	r18, r20
    3f52:	7d 01       	movw	r14, r26
    3f54:	07 c0       	rjmp	.+14     	; 0x3f64 <findFiles+0x13c>
    3f56:	ad 85       	ldd	r26, Y+13	; 0x0d
    3f58:	be 85       	ldd	r27, Y+14	; 0x0e
    3f5a:	9a 01       	movw	r18, r20
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    3f5c:	8b 30       	cpi	r24, 0x0B	; 11
    3f5e:	09 f0       	breq	.+2      	; 0x3f62 <findFiles+0x13a>
    3f60:	96 c0       	rjmp	.+300    	; 0x408e <findFiles+0x266>
    3f62:	7d 01       	movw	r14, r26
			{
			  if(flag == GET_FILE)
    3f64:	e1 e0       	ldi	r30, 0x01	; 1
    3f66:	de 16       	cp	r13, r30
    3f68:	c1 f5       	brne	.+112    	; 0x3fda <findFiles+0x1b2>
              {
			    appendFileSector = firstSector + sector;
    3f6a:	40 92 55 40 	sts	0x4055, r4
    3f6e:	50 92 56 40 	sts	0x4056, r5
    3f72:	60 92 57 40 	sts	0x4057, r6
    3f76:	70 92 58 40 	sts	0x4058, r7
				appendFileLocation = i;
    3f7a:	a9 01       	movw	r20, r18
    3f7c:	60 e0       	ldi	r22, 0x00	; 0
    3f7e:	70 e0       	ldi	r23, 0x00	; 0
    3f80:	40 93 bf 23 	sts	0x23BF, r20
    3f84:	50 93 c0 23 	sts	0x23C0, r21
    3f88:	60 93 c1 23 	sts	0x23C1, r22
    3f8c:	70 93 c2 23 	sts	0x23C2, r23
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    3f90:	f7 01       	movw	r30, r14
    3f92:	04 89       	ldd	r16, Z+20	; 0x14
    3f94:	15 89       	ldd	r17, Z+21	; 0x15
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	98 01       	movw	r18, r16
    3f9c:	11 27       	eor	r17, r17
    3f9e:	00 27       	eor	r16, r16
    3fa0:	42 8d       	ldd	r20, Z+26	; 0x1a
    3fa2:	53 8d       	ldd	r21, Z+27	; 0x1b
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	70 e0       	ldi	r23, 0x00	; 0
    3fa8:	40 2b       	or	r20, r16
    3faa:	51 2b       	or	r21, r17
    3fac:	62 2b       	or	r22, r18
    3fae:	73 2b       	or	r23, r19
    3fb0:	40 93 4f 40 	sts	0x404F, r20
    3fb4:	50 93 50 40 	sts	0x4050, r21
    3fb8:	60 93 51 40 	sts	0x4051, r22
    3fbc:	70 93 52 40 	sts	0x4052, r23
				fileSize = dir->fileSize;
    3fc0:	44 8d       	ldd	r20, Z+28	; 0x1c
    3fc2:	55 8d       	ldd	r21, Z+29	; 0x1d
    3fc4:	66 8d       	ldd	r22, Z+30	; 0x1e
    3fc6:	77 8d       	ldd	r23, Z+31	; 0x1f
    3fc8:	40 93 38 40 	sts	0x4038, r20
    3fcc:	50 93 39 40 	sts	0x4039, r21
    3fd0:	60 93 3a 40 	sts	0x403A, r22
    3fd4:	70 93 3b 40 	sts	0x403B, r23
			    return (dir);
    3fd8:	a0 c0       	rjmp	.+320    	; 0x411a <findFiles+0x2f2>
			     TX_NEWLINE;
				 transmitString_F(PSTR("Deleting.."));
				 TX_NEWLINE;
				 TX_NEWLINE;
				 */
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    3fda:	d7 01       	movw	r26, r14
    3fdc:	54 96       	adiw	r26, 0x14	; 20
    3fde:	8d 91       	ld	r24, X+
    3fe0:	9c 91       	ld	r25, X
    3fe2:	55 97       	sbiw	r26, 0x15	; 21
    3fe4:	a0 e0       	ldi	r26, 0x00	; 0
    3fe6:	b0 e0       	ldi	r27, 0x00	; 0
    3fe8:	5c 01       	movw	r10, r24
    3fea:	99 24       	eor	r9, r9
    3fec:	88 24       	eor	r8, r8
    3fee:	f7 01       	movw	r30, r14
    3ff0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ff2:	93 8d       	ldd	r25, Z+27	; 0x1b
    3ff4:	a0 e0       	ldi	r26, 0x00	; 0
    3ff6:	b0 e0       	ldi	r27, 0x00	; 0
    3ff8:	88 2a       	or	r8, r24
    3ffa:	99 2a       	or	r9, r25
    3ffc:	aa 2a       	or	r10, r26
    3ffe:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    4000:	85 ee       	ldi	r24, 0xE5	; 229
    4002:	80 83       	st	Z, r24
				 SD_write_block (firstSector+sector,SDBuffer,512);
    4004:	c3 01       	movw	r24, r6
    4006:	b2 01       	movw	r22, r4
    4008:	4f eb       	ldi	r20, 0xBF	; 191
    400a:	51 e2       	ldi	r21, 0x21	; 33
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	32 e0       	ldi	r19, 0x02	; 2
    4010:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SD_write_block>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    4014:	d7 01       	movw	r26, r14
    4016:	5c 96       	adiw	r26, 0x1c	; 28
    4018:	4d 91       	ld	r20, X+
    401a:	5d 91       	ld	r21, X+
    401c:	6d 91       	ld	r22, X+
    401e:	7c 91       	ld	r23, X
    4020:	5f 97       	sbiw	r26, 0x1f	; 31
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    4028:	82 e0       	ldi	r24, 0x02	; 2
    402a:	60 e0       	ldi	r22, 0x00	; 0
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	a9 01       	movw	r20, r18
    4032:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <getSetFreeCluster>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
				 if(firstCluster < cluster)
    403a:	88 16       	cp	r8, r24
    403c:	99 06       	cpc	r9, r25
    403e:	aa 06       	cpc	r10, r26
    4040:	bb 06       	cpc	r11, r27
    4042:	30 f4       	brcc	.+12     	; 0x4050 <findFiles+0x228>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    4044:	82 e0       	ldi	r24, 0x02	; 2
    4046:	61 e0       	ldi	r22, 0x01	; 1
    4048:	a5 01       	movw	r20, r10
    404a:	94 01       	movw	r18, r8
    404c:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    4050:	c5 01       	movw	r24, r10
    4052:	b4 01       	movw	r22, r8
    4054:	40 e0       	ldi	r20, 0x00	; 0
    4056:	00 e0       	ldi	r16, 0x00	; 0
    4058:	10 e0       	ldi	r17, 0x00	; 0
    405a:	98 01       	movw	r18, r16
    405c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
    4060:	6b 01       	movw	r12, r22
    4062:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    4064:	c5 01       	movw	r24, r10
    4066:	b4 01       	movw	r22, r8
    4068:	41 e0       	ldi	r20, 0x01	; 1
    406a:	00 e0       	ldi	r16, 0x00	; 0
    406c:	10 e0       	ldi	r17, 0x00	; 0
    406e:	98 01       	movw	r18, r16
    4070:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    4074:	b7 ef       	ldi	r27, 0xF7	; 247
    4076:	cb 16       	cp	r12, r27
    4078:	bf ef       	ldi	r27, 0xFF	; 255
    407a:	db 06       	cpc	r13, r27
    407c:	bf ef       	ldi	r27, 0xFF	; 255
    407e:	eb 06       	cpc	r14, r27
    4080:	bf e0       	ldi	r27, 0x0F	; 15
    4082:	fb 06       	cpc	r15, r27
    4084:	08 f0       	brcs	.+2      	; 0x4088 <findFiles+0x260>
    4086:	44 c0       	rjmp	.+136    	; 0x4110 <findFiles+0x2e8>
					   {//transmitString_F(PSTR("File deleted!"));
						   return 0;}
					firstCluster = nextCluster;
    4088:	46 01       	movw	r8, r12
    408a:	57 01       	movw	r10, r14
    408c:	e1 cf       	rjmp	.-62     	; 0x4050 <findFiles+0x228>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    408e:	20 5e       	subi	r18, 0xE0	; 224
    4090:	3f 4f       	sbci	r19, 0xFF	; 255
    4092:	80 91 3c 40 	lds	r24, 0x403C
    4096:	90 91 3d 40 	lds	r25, 0x403D
    409a:	28 17       	cp	r18, r24
    409c:	39 07       	cpc	r19, r25
    409e:	08 f4       	brcc	.+2      	; 0x40a2 <findFiles+0x27a>
    40a0:	29 cf       	rjmp	.-430    	; 0x3ef4 <findFiles+0xcc>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    40a2:	08 94       	sec
    40a4:	81 1c       	adc	r8, r1
    40a6:	91 1c       	adc	r9, r1
    40a8:	a1 1c       	adc	r10, r1
    40aa:	b1 1c       	adc	r11, r1
    40ac:	80 91 47 40 	lds	r24, 0x4047
    40b0:	90 91 48 40 	lds	r25, 0x4048
    40b4:	a0 e0       	ldi	r26, 0x00	; 0
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	88 16       	cp	r8, r24
    40ba:	99 06       	cpc	r9, r25
    40bc:	aa 06       	cpc	r10, r26
    40be:	bb 06       	cpc	r11, r27
    40c0:	08 f4       	brcc	.+2      	; 0x40c4 <findFiles+0x29c>
    40c2:	f6 ce       	rjmp	.-532    	; 0x3eb0 <findFiles+0x88>
    40c4:	c0 2e       	mov	r12, r16
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    40c6:	6f 81       	ldd	r22, Y+7	; 0x07
    40c8:	78 85       	ldd	r23, Y+8	; 0x08
    40ca:	89 85       	ldd	r24, Y+9	; 0x09
    40cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	00 e0       	ldi	r16, 0x00	; 0
    40d2:	10 e0       	ldi	r17, 0x00	; 0
    40d4:	98 01       	movw	r18, r16
    40d6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
    40da:	6f 83       	std	Y+7, r22	; 0x07
    40dc:	78 87       	std	Y+8, r23	; 0x08
    40de:	89 87       	std	Y+9, r24	; 0x09
    40e0:	9a 87       	std	Y+10, r25	; 0x0a

   if(cluster > 0x0ffffff6)
    40e2:	67 3f       	cpi	r22, 0xF7	; 247
    40e4:	ef ef       	ldi	r30, 0xFF	; 255
    40e6:	7e 07       	cpc	r23, r30
    40e8:	ef ef       	ldi	r30, 0xFF	; 255
    40ea:	8e 07       	cpc	r24, r30
    40ec:	ef e0       	ldi	r30, 0x0F	; 15
    40ee:	9e 07       	cpc	r25, r30
    40f0:	90 f4       	brcc	.+36     	; 0x4116 <findFiles+0x2ee>
   	 return 0;
   if(cluster == 0) 
    40f2:	61 15       	cp	r22, r1
    40f4:	71 05       	cpc	r23, r1
    40f6:	81 05       	cpc	r24, r1
    40f8:	91 05       	cpc	r25, r1
    40fa:	09 f0       	breq	.+2      	; 0x40fe <findFiles+0x2d6>
    40fc:	c4 ce       	rjmp	.-632    	; 0x3e86 <findFiles+0x5e>
   {//transmitString_F(PSTR("Error in getting cluster"));  
	   return 0;}
    40fe:	a0 e0       	ldi	r26, 0x00	; 0
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	0b c0       	rjmp	.+22     	; 0x411a <findFiles+0x2f2>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  //if(flag == DELETE)
		      //transmitString_F(PSTR("File does not exist!"));
		  return 0;   
    4104:	a0 e0       	ldi	r26, 0x00	; 0
    4106:	b0 e0       	ldi	r27, 0x00	; 0
    4108:	08 c0       	rjmp	.+16     	; 0x411a <findFiles+0x2f2>
    410a:	a0 e0       	ldi	r26, 0x00	; 0
    410c:	b0 e0       	ldi	r27, 0x00	; 0
    410e:	05 c0       	rjmp	.+10     	; 0x411a <findFiles+0x2f2>
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {//transmitString_F(PSTR("File deleted!"));
						   return 0;}
    4110:	a0 e0       	ldi	r26, 0x00	; 0
    4112:	b0 e0       	ldi	r27, 0x00	; 0
    4114:	02 c0       	rjmp	.+4      	; 0x411a <findFiles+0x2f2>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    4116:	a0 e0       	ldi	r26, 0x00	; 0
    4118:	b0 e0       	ldi	r27, 0x00	; 0
   if(cluster == 0) 
   {//transmitString_F(PSTR("Error in getting cluster"));  
	   return 0;}
 }
return 0;
}
    411a:	8a 2f       	mov	r24, r26
    411c:	9b 2f       	mov	r25, r27
    411e:	2e 96       	adiw	r28, 0x0e	; 14
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	de bf       	out	0x3e, r29	; 62
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	1f 91       	pop	r17
    412a:	0f 91       	pop	r16
    412c:	ff 90       	pop	r15
    412e:	ef 90       	pop	r14
    4130:	df 90       	pop	r13
    4132:	cf 90       	pop	r12
    4134:	bf 90       	pop	r11
    4136:	af 90       	pop	r10
    4138:	9f 90       	pop	r9
    413a:	8f 90       	pop	r8
    413c:	7f 90       	pop	r7
    413e:	6f 90       	pop	r6
    4140:	5f 90       	pop	r5
    4142:	4f 90       	pop	r4
    4144:	3f 90       	pop	r3
    4146:	2f 90       	pop	r2
    4148:	08 95       	ret

0000414a <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    4150:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <convertFileName>
  if(error) return;
    4154:	88 23       	and	r24, r24
    4156:	21 f4       	brne	.+8      	; 0x4160 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	be 01       	movw	r22, r28
    415c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <findFiles>
}
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	08 95       	ret

00004166 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    4166:	4f 92       	push	r4
    4168:	5f 92       	push	r5
    416a:	6f 92       	push	r6
    416c:	7f 92       	push	r7
    416e:	af 92       	push	r10
    4170:	bf 92       	push	r11
    4172:	cf 92       	push	r12
    4174:	df 92       	push	r13
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	18 2f       	mov	r17, r24
    4184:	eb 01       	movw	r28, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    4186:	cb 01       	movw	r24, r22
    4188:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <convertFileName>
if(error) return 2;
    418c:	88 23       	and	r24, r24
    418e:	09 f0       	breq	.+2      	; 0x4192 <readFile+0x2c>
    4190:	56 c0       	rjmp	.+172    	; 0x423e <readFile+0xd8>

dir = findFiles (GET_FILE, fileName); //get the file location
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	be 01       	movw	r22, r28
    4196:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <findFiles>
    419a:	fc 01       	movw	r30, r24
if(dir == 0) 
    419c:	00 97       	sbiw	r24, 0x00	; 0
    419e:	31 f4       	brne	.+12     	; 0x41ac <readFile+0x46>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	11 23       	and	r17, r17
    41a4:	09 f4       	brne	.+2      	; 0x41a8 <readFile+0x42>
    41a6:	4e c0       	rjmp	.+156    	; 0x4244 <readFile+0xde>
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	4c c0       	rjmp	.+152    	; 0x4244 <readFile+0xde>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    41ac:	11 30       	cpi	r17, 0x01	; 1
    41ae:	09 f4       	brne	.+2      	; 0x41b2 <readFile+0x4c>
    41b0:	48 c0       	rjmp	.+144    	; 0x4242 <readFile+0xdc>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    41b2:	44 88       	ldd	r4, Z+20	; 0x14
    41b4:	55 88       	ldd	r5, Z+21	; 0x15
    41b6:	66 24       	eor	r6, r6
    41b8:	77 24       	eor	r7, r7
    41ba:	32 01       	movw	r6, r4
    41bc:	55 24       	eor	r5, r5
    41be:	44 24       	eor	r4, r4
    41c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    41c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    41c4:	a0 e0       	ldi	r26, 0x00	; 0
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	48 2a       	or	r4, r24
    41ca:	59 2a       	or	r5, r25
    41cc:	6a 2a       	or	r6, r26
    41ce:	7b 2a       	or	r7, r27
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    41d0:	0f 2e       	mov	r0, r31
    41d2:	f7 ec       	ldi	r31, 0xC7	; 199
    41d4:	af 2e       	mov	r10, r31
    41d6:	f3 e2       	ldi	r31, 0x23	; 35
    41d8:	bf 2e       	mov	r11, r31
    41da:	f0 2d       	mov	r31, r0
TX_NEWLINE;
TX_NEWLINE;
*/
while(1)
{
  firstSector = getFirstSector (cluster);
    41dc:	c3 01       	movw	r24, r6
    41de:	b2 01       	movw	r22, r4
    41e0:	0e 94 3d 1b 	call	0x367a	; 0x367a <getFirstSector>
    41e4:	6b 01       	movw	r12, r22
    41e6:	7c 01       	movw	r14, r24

  for(j=0; j<sectorPerCluster; j++)
    41e8:	80 91 47 40 	lds	r24, 0x4047
    41ec:	90 91 48 40 	lds	r25, 0x4048
    41f0:	00 97       	sbiw	r24, 0x00	; 0
    41f2:	a1 f0       	breq	.+40     	; 0x421c <readFile+0xb6>
    41f4:	c0 e0       	ldi	r28, 0x00	; 0
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    41f6:	c7 01       	movw	r24, r14
    41f8:	b6 01       	movw	r22, r12
    41fa:	6c 0f       	add	r22, r28
    41fc:	71 1d       	adc	r23, r1
    41fe:	81 1d       	adc	r24, r1
    4200:	91 1d       	adc	r25, r1
    4202:	a5 01       	movw	r20, r10
    4204:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
*/
while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    4208:	cf 5f       	subi	r28, 0xFF	; 255
    420a:	80 91 47 40 	lds	r24, 0x4047
    420e:	90 91 48 40 	lds	r25, 0x4048
    4212:	2c 2f       	mov	r18, r28
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	28 17       	cp	r18, r24
    4218:	39 07       	cpc	r19, r25
    421a:	68 f3       	brcs	.-38     	; 0x41f6 <readFile+0x90>
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
	*/
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    421c:	c3 01       	movw	r24, r6
    421e:	b2 01       	movw	r22, r4
    4220:	40 e0       	ldi	r20, 0x00	; 0
    4222:	00 e0       	ldi	r16, 0x00	; 0
    4224:	10 e0       	ldi	r17, 0x00	; 0
    4226:	98 01       	movw	r18, r16
    4228:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
    422c:	2b 01       	movw	r4, r22
    422e:	3c 01       	movw	r6, r24
  if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
    4230:	61 15       	cp	r22, r1
    4232:	71 05       	cpc	r23, r1
    4234:	81 05       	cpc	r24, r1
    4236:	91 05       	cpc	r25, r1
    4238:	89 f6       	brne	.-94     	; 0x41dc <readFile+0x76>
	  return 0;}
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	03 c0       	rjmp	.+6      	; 0x4244 <readFile+0xde>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    423e:	82 e0       	ldi	r24, 0x02	; 2
    4240:	01 c0       	rjmp	.+2      	; 0x4244 <readFile+0xde>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    4242:	81 e0       	ldi	r24, 0x01	; 1
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
	  return 0;}
}
return 0;
}
    4244:	df 91       	pop	r29
    4246:	cf 91       	pop	r28
    4248:	1f 91       	pop	r17
    424a:	0f 91       	pop	r16
    424c:	ff 90       	pop	r15
    424e:	ef 90       	pop	r14
    4250:	df 90       	pop	r13
    4252:	cf 90       	pop	r12
    4254:	bf 90       	pop	r11
    4256:	af 90       	pop	r10
    4258:	7f 90       	pop	r7
    425a:	6f 90       	pop	r6
    425c:	5f 90       	pop	r5
    425e:	4f 90       	pop	r4
    4260:	08 95       	ret

00004262 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
    4262:	2f 92       	push	r2
    4264:	3f 92       	push	r3
    4266:	4f 92       	push	r4
    4268:	5f 92       	push	r5
    426a:	6f 92       	push	r6
    426c:	7f 92       	push	r7
    426e:	8f 92       	push	r8
    4270:	9f 92       	push	r9
    4272:	af 92       	push	r10
    4274:	bf 92       	push	r11
    4276:	cf 92       	push	r12
    4278:	df 92       	push	r13
    427a:	ef 92       	push	r14
    427c:	ff 92       	push	r15
    427e:	0f 93       	push	r16
    4280:	1f 93       	push	r17
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
    428a:	29 97       	sbiw	r28, 0x09	; 9
    428c:	cd bf       	out	0x3d, r28	; 61
    428e:	de bf       	out	0x3e, r29	; 62
    4290:	98 2e       	mov	r9, r24
    4292:	a9 2e       	mov	r10, r25
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	69 2d       	mov	r22, r9
    4298:	79 2f       	mov	r23, r25
    429a:	0e 94 b3 20 	call	0x4166	; 0x4166 <readFile>

if(j == 1) 
    429e:	81 30       	cpi	r24, 0x01	; 1
    42a0:	09 f0       	breq	.+2      	; 0x42a4 <writeFile+0x42>
    42a2:	d7 c0       	rjmp	.+430    	; 0x4452 <writeFile+0x1f0>
{
  //transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
  cluster = appendStartCluster;
    42a4:	90 90 4f 40 	lds	r9, 0x404F
    42a8:	b0 90 50 40 	lds	r11, 0x4050
    42ac:	80 90 51 40 	lds	r8, 0x4051
    42b0:	a0 90 52 40 	lds	r10, 0x4052
  clusterCount=0;
    42b4:	cc 24       	eor	r12, r12
    42b6:	dd 24       	eor	r13, r13
    42b8:	76 01       	movw	r14, r12
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    42ba:	69 2d       	mov	r22, r9
    42bc:	7b 2d       	mov	r23, r11
    42be:	88 2d       	mov	r24, r8
    42c0:	9a 2d       	mov	r25, r10
    42c2:	40 e0       	ldi	r20, 0x00	; 0
    42c4:	00 e0       	ldi	r16, 0x00	; 0
    42c6:	10 e0       	ldi	r17, 0x00	; 0
    42c8:	98 01       	movw	r18, r16
    42ca:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    if(nextCluster == EOF) break;
    42d2:	8f 3f       	cpi	r24, 0xFF	; 255
    42d4:	2f ef       	ldi	r18, 0xFF	; 255
    42d6:	92 07       	cpc	r25, r18
    42d8:	2f ef       	ldi	r18, 0xFF	; 255
    42da:	a2 07       	cpc	r26, r18
    42dc:	2f e0       	ldi	r18, 0x0F	; 15
    42de:	b2 07       	cpc	r27, r18
    42e0:	51 f0       	breq	.+20     	; 0x42f6 <writeFile+0x94>
	cluster = nextCluster;
	clusterCount++;
    42e2:	08 94       	sec
    42e4:	c1 1c       	adc	r12, r1
    42e6:	d1 1c       	adc	r13, r1
    42e8:	e1 1c       	adc	r14, r1
    42ea:	f1 1c       	adc	r15, r1
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    42ec:	98 2e       	mov	r9, r24
    42ee:	b9 2e       	mov	r11, r25
    42f0:	8a 2e       	mov	r8, r26
    42f2:	ab 2e       	mov	r10, r27
	clusterCount++;
  }
    42f4:	e2 cf       	rjmp	.-60     	; 0x42ba <writeFile+0x58>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    42f6:	20 91 47 40 	lds	r18, 0x4047
    42fa:	30 91 48 40 	lds	r19, 0x4048
    42fe:	80 91 3c 40 	lds	r24, 0x403C
    4302:	90 91 3d 40 	lds	r25, 0x403D
    4306:	00 91 3c 40 	lds	r16, 0x403C
    430a:	10 91 3d 40 	lds	r17, 0x403D
    430e:	bc 01       	movw	r22, r24
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	40 e0       	ldi	r20, 0x00	; 0
    4316:	50 e0       	ldi	r21, 0x00	; 0
    4318:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    431c:	a7 01       	movw	r20, r14
    431e:	96 01       	movw	r18, r12
    4320:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	40 91 38 40 	lds	r20, 0x4038
    432c:	50 91 39 40 	lds	r21, 0x4039
    4330:	60 91 3a 40 	lds	r22, 0x403A
    4334:	70 91 3b 40 	lds	r23, 0x403B
    4338:	6a 01       	movw	r12, r20
    433a:	7b 01       	movw	r14, r22
    433c:	c8 1a       	sub	r12, r24
    433e:	d9 0a       	sbc	r13, r25
    4340:	ea 0a       	sbc	r14, r26
    4342:	fb 0a       	sbc	r15, r27
    4344:	c7 01       	movw	r24, r14
    4346:	b6 01       	movw	r22, r12
    4348:	98 01       	movw	r18, r16
    434a:	40 e0       	ldi	r20, 0x00	; 0
    434c:	50 e0       	ldi	r21, 0x00	; 0
    434e:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    4352:	02 2f       	mov	r16, r18
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    4354:	69 2d       	mov	r22, r9
    4356:	7b 2d       	mov	r23, r11
    4358:	88 2d       	mov	r24, r8
    435a:	9a 2d       	mov	r25, r10
    435c:	0e 94 3d 1b 	call	0x367a	; 0x367a <getFirstSector>
    4360:	ab 01       	movw	r20, r22
    4362:	bc 01       	movw	r22, r24
    4364:	80 2f       	mov	r24, r16
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	84 0f       	add	r24, r20
    436a:	95 1f       	adc	r25, r21
	  SD_read_block (startBlock,SDBuffer);
    436c:	6c 01       	movw	r12, r24
    436e:	ee 24       	eor	r14, r14
    4370:	ff 24       	eor	r15, r15
    4372:	0f eb       	ldi	r16, 0xBF	; 191
    4374:	11 e2       	ldi	r17, 0x21	; 33
    4376:	c7 01       	movw	r24, r14
    4378:	b6 01       	movw	r22, r12
    437a:	a8 01       	movw	r20, r16
    437c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
	  i = fileSize % bytesPerSector;
    4380:	80 91 3c 40 	lds	r24, 0x403C
    4384:	90 91 3d 40 	lds	r25, 0x403D
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid
	 */ 
	// {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	  // i=0;
	  fileSize += 512;
    4388:	80 91 38 40 	lds	r24, 0x4038
    438c:	90 91 39 40 	lds	r25, 0x4039
    4390:	a0 91 3a 40 	lds	r26, 0x403A
    4394:	b0 91 3b 40 	lds	r27, 0x403B
    4398:	80 50       	subi	r24, 0x00	; 0
    439a:	9e 4f       	sbci	r25, 0xFE	; 254
    439c:	af 4f       	sbci	r26, 0xFF	; 255
    439e:	bf 4f       	sbci	r27, 0xFF	; 255
    43a0:	80 93 38 40 	sts	0x4038, r24
    43a4:	90 93 39 40 	sts	0x4039, r25
    43a8:	a0 93 3a 40 	sts	0x403A, r26
    43ac:	b0 93 3b 40 	sts	0x403B, r27
	   SD_write_block (startBlock,FRAMReadBuffer,512);
    43b0:	c7 01       	movw	r24, r14
    43b2:	b6 01       	movw	r22, r12
    43b4:	47 ec       	ldi	r20, 0xC7	; 199
    43b6:	53 e2       	ldi	r21, 0x23	; 35
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	32 e0       	ldi	r19, 0x02	; 2
    43bc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SD_write_block>
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
    43c0:	80 91 47 40 	lds	r24, 0x4047
    43c4:	90 91 48 40 	lds	r25, 0x4048

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    43c8:	82 e0       	ldi	r24, 0x02	; 2
    43ca:	61 e0       	ldi	r22, 0x01	; 1
    43cc:	29 2d       	mov	r18, r9
    43ce:	3b 2d       	mov	r19, r11
    43d0:	48 2d       	mov	r20, r8
    43d2:	5a 2d       	mov	r21, r10
    43d4:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <getSetFreeCluster>
//error = getDateTime_FAT();    //get current date & time from the RTC
//if(error) { dateFAT = 0; timeFAT = 0;}

if(appendFile)  //executes this loop if file is to be appended
{
  SD_read_block (appendFileSector,SDBuffer);    
    43d8:	60 91 55 40 	lds	r22, 0x4055
    43dc:	70 91 56 40 	lds	r23, 0x4056
    43e0:	80 91 57 40 	lds	r24, 0x4057
    43e4:	90 91 58 40 	lds	r25, 0x4058
    43e8:	a8 01       	movw	r20, r16
    43ea:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
  dir = (struct dir_Structure *) &SDBuffer[appendFileLocation]; 
    43ee:	e0 91 bf 23 	lds	r30, 0x23BF
    43f2:	f0 91 c0 23 	lds	r31, 0x23C0
    43f6:	e0 0f       	add	r30, r16
    43f8:	f1 1f       	adc	r31, r17

  dir->lastAccessDate = 0;   //date of last access ignored
    43fa:	12 8a       	std	Z+18, r1	; 0x12
    43fc:	13 8a       	std	Z+19, r1	; 0x13
  //dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
  //dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
  extraMemory = fileSize - dir->fileSize;
    43fe:	80 91 38 40 	lds	r24, 0x4038
    4402:	90 91 39 40 	lds	r25, 0x4039
    4406:	a0 91 3a 40 	lds	r26, 0x403A
    440a:	b0 91 3b 40 	lds	r27, 0x403B
    440e:	44 8d       	ldd	r20, Z+28	; 0x1c
    4410:	55 8d       	ldd	r21, Z+29	; 0x1d
    4412:	66 8d       	ldd	r22, Z+30	; 0x1e
    4414:	77 8d       	ldd	r23, Z+31	; 0x1f
    4416:	6c 01       	movw	r12, r24
    4418:	7d 01       	movw	r14, r26
    441a:	c4 1a       	sub	r12, r20
    441c:	d5 0a       	sbc	r13, r21
    441e:	e6 0a       	sbc	r14, r22
    4420:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    4422:	84 8f       	std	Z+28, r24	; 0x1c
    4424:	95 8f       	std	Z+29, r25	; 0x1d
    4426:	a6 8f       	std	Z+30, r26	; 0x1e
    4428:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_write_block (appendFileSector,SDBuffer,512);
    442a:	60 91 55 40 	lds	r22, 0x4055
    442e:	70 91 56 40 	lds	r23, 0x4056
    4432:	80 91 57 40 	lds	r24, 0x4057
    4436:	90 91 58 40 	lds	r25, 0x4058
    443a:	a8 01       	movw	r20, r16
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	32 e0       	ldi	r19, 0x02	; 2
    4440:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SD_write_block>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	b7 01       	movw	r22, r14
    4448:	a6 01       	movw	r20, r12
    444a:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <freeMemoryUpdate>

  
 // TX_NEWLINE;
 // transmitString_F(PSTR(" File appended!"));

  return 0;
    444e:	80 e0       	ldi	r24, 0x00	; 0
    4450:	50 c1       	rjmp	.+672    	; 0x46f2 <writeFile+0x490>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
    4452:	82 30       	cpi	r24, 0x02	; 2
    4454:	09 f4       	brne	.+2      	; 0x4458 <writeFile+0x1f6>
    4456:	44 c1       	rjmp	.+648    	; 0x46e0 <writeFile+0x47e>
else
{
 // TX_NEWLINE;
 // transmitString_F(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    4458:	82 e0       	ldi	r24, 0x02	; 2
    445a:	60 e0       	ldi	r22, 0x00	; 0
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	a9 01       	movw	r20, r18
    4462:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <getSetFreeCluster>
  if(cluster > totalClusters)
    4466:	00 91 3f 40 	lds	r16, 0x403F
    446a:	10 91 40 40 	lds	r17, 0x4040
    446e:	20 91 41 40 	lds	r18, 0x4041
    4472:	30 91 42 40 	lds	r19, 0x4042
    4476:	06 17       	cp	r16, r22
    4478:	17 07       	cpc	r17, r23
    447a:	28 07       	cpc	r18, r24
    447c:	39 07       	cpc	r19, r25
    447e:	40 f4       	brcc	.+16     	; 0x4490 <writeFile+0x22e>
     cluster = rootCluster;
    4480:	60 91 43 40 	lds	r22, 0x4043
    4484:	70 91 44 40 	lds	r23, 0x4044
    4488:	80 91 45 40 	lds	r24, 0x4045
    448c:	90 91 46 40 	lds	r25, 0x4046

  cluster = searchNextFreeCluster(cluster);
    4490:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <searchNextFreeCluster>
    4494:	6b 01       	movw	r12, r22
    4496:	7c 01       	movw	r14, r24
   if(cluster == 0)
    4498:	61 15       	cp	r22, r1
    449a:	71 05       	cpc	r23, r1
    449c:	81 05       	cpc	r24, r1
    449e:	91 05       	cpc	r25, r1
    44a0:	09 f4       	brne	.+2      	; 0x44a4 <writeFile+0x242>
    44a2:	20 c1       	rjmp	.+576    	; 0x46e4 <writeFile+0x482>
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  */
	  return 2;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    44a4:	41 e0       	ldi	r20, 0x01	; 1
    44a6:	0f ef       	ldi	r16, 0xFF	; 255
    44a8:	1f ef       	ldi	r17, 0xFF	; 255
    44aa:	2f ef       	ldi	r18, 0xFF	; 255
    44ac:	3f e0       	ldi	r19, 0x0F	; 15
    44ae:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    44b2:	27 01       	movw	r4, r14
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    44b4:	16 01       	movw	r2, r12
  fileSize = 0;
    44b6:	10 92 38 40 	sts	0x4038, r1
    44ba:	10 92 39 40 	sts	0x4039, r1
    44be:	10 92 3a 40 	sts	0x403A, r1
    44c2:	10 92 3b 40 	sts	0x403B, r1
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    44c6:	c7 01       	movw	r24, r14
    44c8:	b6 01       	movw	r22, r12
    44ca:	0e 94 3d 1b 	call	0x367a	; 0x367a <getFirstSector>
    44ce:	ab 01       	movw	r20, r22
    44d0:	bc 01       	movw	r22, r24
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid
	 */ 
	// {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	  // i=0;
	  fileSize += 512;
    44d2:	80 91 38 40 	lds	r24, 0x4038
    44d6:	90 91 39 40 	lds	r25, 0x4039
    44da:	a0 91 3a 40 	lds	r26, 0x403A
    44de:	b0 91 3b 40 	lds	r27, 0x403B
    44e2:	80 50       	subi	r24, 0x00	; 0
    44e4:	9e 4f       	sbci	r25, 0xFE	; 254
    44e6:	af 4f       	sbci	r26, 0xFF	; 255
    44e8:	bf 4f       	sbci	r27, 0xFF	; 255
    44ea:	80 93 38 40 	sts	0x4038, r24
    44ee:	90 93 39 40 	sts	0x4039, r25
    44f2:	a0 93 3a 40 	sts	0x403A, r26
    44f6:	b0 93 3b 40 	sts	0x403B, r27
	   SD_write_block (startBlock,FRAMReadBuffer,512);
    44fa:	ba 01       	movw	r22, r20
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	47 ec       	ldi	r20, 0xC7	; 199
    4502:	53 e2       	ldi	r21, 0x23	; 35
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	32 e0       	ldi	r19, 0x02	; 2
    4508:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SD_write_block>
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
    450c:	80 91 47 40 	lds	r24, 0x4047
    4510:	90 91 48 40 	lds	r25, 0x4048

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    4514:	82 e0       	ldi	r24, 0x02	; 2
    4516:	61 e0       	ldi	r22, 0x01	; 1
    4518:	a7 01       	movw	r20, r14
    451a:	96 01       	movw	r18, r12
    451c:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <getSetFreeCluster>
  return 0;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    4520:	c0 90 43 40 	lds	r12, 0x4043
    4524:	d0 90 44 40 	lds	r13, 0x4044
    4528:	e0 90 45 40 	lds	r14, 0x4045
    452c:	f0 90 46 40 	lds	r15, 0x4046
    4530:	ce 82       	std	Y+6, r12	; 0x06
    4532:	df 82       	std	Y+7, r13	; 0x07
    4534:	e8 86       	std	Y+8, r14	; 0x08
    4536:	f9 86       	std	Y+9, r15	; 0x09
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    4538:	bb 24       	eor	r11, r11

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    453a:	88 24       	eor	r8, r8
    453c:	68 94       	set
    453e:	85 f8       	bld	r8, 5
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4540:	0f 2e       	mov	r0, r31
    4542:	ff eb       	ldi	r31, 0xBF	; 191
    4544:	6f 2e       	mov	r6, r31
    4546:	f1 e2       	ldi	r31, 0x21	; 33
    4548:	7f 2e       	mov	r7, r31
    454a:	f0 2d       	mov	r31, r0
    454c:	04 c0       	rjmp	.+8      	; 0x4556 <writeFile+0x2f4>
      }
   }
   if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
	   return 4;}
   
   prevCluster = cluster;
    454e:	ce 82       	std	Y+6, r12	; 0x06
    4550:	df 82       	std	Y+7, r13	; 0x07
    4552:	e8 86       	std	Y+8, r14	; 0x08
    4554:	f9 86       	std	Y+9, r15	; 0x09

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    4556:	6e 81       	ldd	r22, Y+6	; 0x06
    4558:	7f 81       	ldd	r23, Y+7	; 0x07
    455a:	88 85       	ldd	r24, Y+8	; 0x08
    455c:	99 85       	ldd	r25, Y+9	; 0x09
    455e:	0e 94 3d 1b 	call	0x367a	; 0x367a <getFirstSector>
    4562:	6a 83       	std	Y+2, r22	; 0x02
    4564:	7b 83       	std	Y+3, r23	; 0x03
    4566:	8c 83       	std	Y+4, r24	; 0x04
    4568:	9d 83       	std	Y+5, r25	; 0x05

   for(sector = 0; sector < sectorPerCluster; sector++)
    456a:	80 91 47 40 	lds	r24, 0x4047
    456e:	90 91 48 40 	lds	r25, 0x4048
    4572:	00 97       	sbiw	r24, 0x00	; 0
    4574:	09 f4       	brne	.+2      	; 0x4578 <writeFile+0x316>
    4576:	76 c0       	rjmp	.+236    	; 0x4664 <writeFile+0x402>
    4578:	19 82       	std	Y+1, r1	; 0x01
   {
     SD_read_block (firstSector + sector,SDBuffer);
    457a:	ca 80       	ldd	r12, Y+2	; 0x02
    457c:	db 80       	ldd	r13, Y+3	; 0x03
    457e:	ec 80       	ldd	r14, Y+4	; 0x04
    4580:	fd 80       	ldd	r15, Y+5	; 0x05
    4582:	29 81       	ldd	r18, Y+1	; 0x01
    4584:	c2 0e       	add	r12, r18
    4586:	d1 1c       	adc	r13, r1
    4588:	e1 1c       	adc	r14, r1
    458a:	f1 1c       	adc	r15, r1
    458c:	c7 01       	movw	r24, r14
    458e:	b6 01       	movw	r22, r12
    4590:	a3 01       	movw	r20, r6
    4592:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    4596:	80 91 3c 40 	lds	r24, 0x403C
    459a:	90 91 3d 40 	lds	r25, 0x403D
    459e:	00 97       	sbiw	r24, 0x00	; 0
    45a0:	09 f4       	brne	.+2      	; 0x45a4 <writeFile+0x342>
    45a2:	53 c0       	rjmp	.+166    	; 0x464a <writeFile+0x3e8>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    45a4:	bb 20       	and	r11, r11
    45a6:	09 f0       	breq	.+2      	; 0x45aa <writeFile+0x348>
    45a8:	9f c0       	rjmp	.+318    	; 0x46e8 <writeFile+0x486>
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    45aa:	a3 01       	movw	r20, r6
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    45ac:	00 e0       	ldi	r16, 0x00	; 0
    45ae:	10 e0       	ldi	r17, 0x00	; 0
    45b0:	2b 2d       	mov	r18, r11
    45b2:	06 c0       	rjmp	.+12     	; 0x45c0 <writeFile+0x35e>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];
    45b4:	a8 01       	movw	r20, r16
    45b6:	41 54       	subi	r20, 0x41	; 65
    45b8:	5e 4d       	sbci	r21, 0xDE	; 222

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    45ba:	22 23       	and	r18, r18
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <writeFile+0x35e>
    45be:	96 c0       	rjmp	.+300    	; 0x46ec <writeFile+0x48a>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    45c0:	da 01       	movw	r26, r20
    45c2:	8c 91       	ld	r24, X
    45c4:	88 23       	and	r24, r24
    45c6:	29 f4       	brne	.+10     	; 0x45d2 <writeFile+0x370>
    45c8:	e9 2d       	mov	r30, r9
    45ca:	fa 2d       	mov	r31, r10
    45cc:	da 01       	movw	r26, r20
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	03 c0       	rjmp	.+6      	; 0x45d8 <writeFile+0x376>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    45d2:	85 3e       	cpi	r24, 0xE5	; 229
    45d4:	79 f5       	brne	.+94     	; 0x4634 <writeFile+0x3d2>
    45d6:	f8 cf       	rjmp	.-16     	; 0x45c8 <writeFile+0x366>
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    45d8:	91 91       	ld	r25, Z+
    45da:	9d 93       	st	X+, r25
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    45dc:	8f 5f       	subi	r24, 0xFF	; 255
    45de:	8b 30       	cpi	r24, 0x0B	; 11
    45e0:	d9 f7       	brne	.-10     	; 0x45d8 <writeFile+0x376>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    45e2:	fa 01       	movw	r30, r20
    45e4:	83 86       	std	Z+11, r8	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    45e6:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    45e8:	15 86       	std	Z+13, r1	; 0x0d
		  //dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
    45ea:	12 8a       	std	Z+18, r1	; 0x12
    45ec:	13 8a       	std	Z+19, r1	; 0x13
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
    45ee:	44 8a       	std	Z+20, r4	; 0x14
    45f0:	55 8a       	std	Z+21, r5	; 0x15
		  dir->firstClusterLO = firstClusterLow;
    45f2:	22 8e       	std	Z+26, r2	; 0x1a
    45f4:	33 8e       	std	Z+27, r3	; 0x1b
		  dir->fileSize = fileSize;
    45f6:	80 91 38 40 	lds	r24, 0x4038
    45fa:	90 91 39 40 	lds	r25, 0x4039
    45fe:	a0 91 3a 40 	lds	r26, 0x403A
    4602:	b0 91 3b 40 	lds	r27, 0x403B
    4606:	84 8f       	std	Z+28, r24	; 0x1c
    4608:	95 8f       	std	Z+29, r25	; 0x1d
    460a:	a6 8f       	std	Z+30, r26	; 0x1e
    460c:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_write_block (firstSector + sector,SDBuffer,512);
    460e:	c7 01       	movw	r24, r14
    4610:	b6 01       	movw	r22, r12
    4612:	a3 01       	movw	r20, r6
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	32 e0       	ldi	r19, 0x02	; 2
    4618:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <SD_write_block>

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    461c:	40 91 38 40 	lds	r20, 0x4038
    4620:	50 91 39 40 	lds	r21, 0x4039
    4624:	60 91 3a 40 	lds	r22, 0x403A
    4628:	70 91 3b 40 	lds	r23, 0x403B
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_write_block (firstSector + sector,SDBuffer,512);
		  fileCreatedFlag = 1;
    4632:	21 e0       	ldi	r18, 0x01	; 1
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    4634:	00 5e       	subi	r16, 0xE0	; 224
    4636:	1f 4f       	sbci	r17, 0xFF	; 255
    4638:	80 91 3c 40 	lds	r24, 0x403C
    463c:	90 91 3d 40 	lds	r25, 0x403D
    4640:	08 17       	cp	r16, r24
    4642:	19 07       	cpc	r17, r25
    4644:	08 f4       	brcc	.+2      	; 0x4648 <writeFile+0x3e6>
    4646:	b6 cf       	rjmp	.-148    	; 0x45b4 <writeFile+0x352>
    4648:	b2 2e       	mov	r11, r18

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    464a:	f9 81       	ldd	r31, Y+1	; 0x01
    464c:	ff 5f       	subi	r31, 0xFF	; 255
    464e:	f9 83       	std	Y+1, r31	; 0x01
    4650:	20 91 47 40 	lds	r18, 0x4047
    4654:	30 91 48 40 	lds	r19, 0x4048
    4658:	8f 2f       	mov	r24, r31
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	82 17       	cp	r24, r18
    465e:	93 07       	cpc	r25, r19
    4660:	08 f4       	brcc	.+2      	; 0x4664 <writeFile+0x402>
    4662:	8b cf       	rjmp	.-234    	; 0x457a <writeFile+0x318>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    4664:	6e 81       	ldd	r22, Y+6	; 0x06
    4666:	7f 81       	ldd	r23, Y+7	; 0x07
    4668:	88 85       	ldd	r24, Y+8	; 0x08
    466a:	99 85       	ldd	r25, Y+9	; 0x09
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	00 e0       	ldi	r16, 0x00	; 0
    4670:	10 e0       	ldi	r17, 0x00	; 0
    4672:	98 01       	movw	r18, r16
    4674:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
    4678:	6b 01       	movw	r12, r22
    467a:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    467c:	67 3f       	cpi	r22, 0xF7	; 247
    467e:	2f ef       	ldi	r18, 0xFF	; 255
    4680:	72 07       	cpc	r23, r18
    4682:	2f ef       	ldi	r18, 0xFF	; 255
    4684:	82 07       	cpc	r24, r18
    4686:	2f e0       	ldi	r18, 0x0F	; 15
    4688:	92 07       	cpc	r25, r18
    468a:	10 f1       	brcs	.+68     	; 0x46d0 <writeFile+0x46e>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    468c:	6f 3f       	cpi	r22, 0xFF	; 255
    468e:	4f ef       	ldi	r20, 0xFF	; 255
    4690:	74 07       	cpc	r23, r20
    4692:	4f ef       	ldi	r20, 0xFF	; 255
    4694:	84 07       	cpc	r24, r20
    4696:	4f e0       	ldi	r20, 0x0F	; 15
    4698:	94 07       	cpc	r25, r20
    469a:	51 f5       	brne	.+84     	; 0x46f0 <writeFile+0x48e>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    469c:	6e 81       	ldd	r22, Y+6	; 0x06
    469e:	7f 81       	ldd	r23, Y+7	; 0x07
    46a0:	88 85       	ldd	r24, Y+8	; 0x08
    46a2:	99 85       	ldd	r25, Y+9	; 0x09
    46a4:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <searchNextFreeCluster>
    46a8:	6b 01       	movw	r12, r22
    46aa:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    46ac:	6e 81       	ldd	r22, Y+6	; 0x06
    46ae:	7f 81       	ldd	r23, Y+7	; 0x07
    46b0:	88 85       	ldd	r24, Y+8	; 0x08
    46b2:	99 85       	ldd	r25, Y+9	; 0x09
    46b4:	41 e0       	ldi	r20, 0x01	; 1
    46b6:	97 01       	movw	r18, r14
    46b8:	86 01       	movw	r16, r12
    46ba:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    46be:	c7 01       	movw	r24, r14
    46c0:	b6 01       	movw	r22, r12
    46c2:	41 e0       	ldi	r20, 0x01	; 1
    46c4:	0f ef       	ldi	r16, 0xFF	; 255
    46c6:	1f ef       	ldi	r17, 0xFF	; 255
    46c8:	2f ef       	ldi	r18, 0xFF	; 255
    46ca:	3f e0       	ldi	r19, 0x0F	; 15
    46cc:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <getSetNextCluster>
      {	
	    //transmitString_F(PSTR("End of Cluster Chain")); 
	    return 3;
      }
   }
   if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
    46d0:	c1 14       	cp	r12, r1
    46d2:	d1 04       	cpc	r13, r1
    46d4:	e1 04       	cpc	r14, r1
    46d6:	f1 04       	cpc	r15, r1
    46d8:	09 f0       	breq	.+2      	; 0x46dc <writeFile+0x47a>
    46da:	39 cf       	rjmp	.-398    	; 0x454e <writeFile+0x2ec>
	   return 4;}
    46dc:	84 e0       	ldi	r24, 0x04	; 4
    46de:	09 c0       	rjmp	.+18     	; 0x46f2 <writeFile+0x490>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
   return 1; //invalid file name
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	07 c0       	rjmp	.+14     	; 0x46f2 <writeFile+0x490>
   {
	   /*
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  */
	  return 2;
    46e4:	82 e0       	ldi	r24, 0x02	; 2
    46e6:	05 c0       	rjmp	.+10     	; 0x46f2 <writeFile+0x490>

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	03 c0       	rjmp	.+6      	; 0x46f2 <writeFile+0x490>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	01 c0       	rjmp	.+2      	; 0x46f2 <writeFile+0x490>
      } 

      else
      {	
	    //transmitString_F(PSTR("End of Cluster Chain")); 
	    return 3;
    46f0:	83 e0       	ldi	r24, 0x03	; 3
   
   prevCluster = cluster;
 }
 
 return 0;
}
    46f2:	29 96       	adiw	r28, 0x09	; 9
    46f4:	cd bf       	out	0x3d, r28	; 61
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	df 91       	pop	r29
    46fa:	cf 91       	pop	r28
    46fc:	1f 91       	pop	r17
    46fe:	0f 91       	pop	r16
    4700:	ff 90       	pop	r15
    4702:	ef 90       	pop	r14
    4704:	df 90       	pop	r13
    4706:	cf 90       	pop	r12
    4708:	bf 90       	pop	r11
    470a:	af 90       	pop	r10
    470c:	9f 90       	pop	r9
    470e:	8f 90       	pop	r8
    4710:	7f 90       	pop	r7
    4712:	6f 90       	pop	r6
    4714:	5f 90       	pop	r5
    4716:	4f 90       	pop	r4
    4718:	3f 90       	pop	r3
    471a:	2f 90       	pop	r2
    471c:	08 95       	ret

0000471e <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
    471e:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    4724:	84 81       	ldd	r24, Z+4	; 0x04
    4726:	95 81       	ldd	r25, Z+5	; 0x05
    4728:	86 1b       	sub	r24, r22
    472a:	91 09       	sbc	r25, r1

	return answer;
}
    472c:	08 95       	ret

0000472e <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    472e:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    4734:	84 81       	ldd	r24, Z+4	; 0x04
    4736:	95 81       	ldd	r25, Z+5	; 0x05
    4738:	77 27       	eor	r23, r23
    473a:	67 fd       	sbrc	r22, 7
    473c:	70 95       	com	r23
    473e:	86 1b       	sub	r24, r22
    4740:	97 0b       	sbc	r25, r23

	return answer;
}
    4742:	08 95       	ret

00004744 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
    4744:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    474a:	84 81       	ldd	r24, Z+4	; 0x04
    474c:	95 81       	ldd	r25, Z+5	; 0x05
}
    474e:	08 95       	ret

00004750 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
    4750:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
    4756:	84 81       	ldd	r24, Z+4	; 0x04
}
    4758:	08 95       	ret

0000475a <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
    475a:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
    4760:	85 81       	ldd	r24, Z+5	; 0x05
}
    4762:	08 95       	ret

00004764 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
    4764:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    4766:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
    4768:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    476a:	9a e2       	ldi	r25, 0x2A	; 42
    476c:	9a 95       	dec	r25
    476e:	f1 f7       	brne	.-4      	; 0x476c <ADC_Wait_8MHz+0x8>
    4770:	00 c0       	rjmp	.+0      	; 0x4772 <ADC_Wait_8MHz+0xe>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    4772:	84 83       	std	Z+4, r24	; 0x04
}
    4774:	08 95       	ret

00004776 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
    4776:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    4778:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
    477a:	91 e0       	ldi	r25, 0x01	; 1
    477c:	94 83       	std	Z+4, r25	; 0x04
    477e:	95 e5       	ldi	r25, 0x55	; 85
    4780:	9a 95       	dec	r25
    4782:	f1 f7       	brne	.-4      	; 0x4780 <ADC_Wait_32MHz+0xa>
    4784:	00 00       	nop

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    4786:	84 83       	std	Z+4, r24	; 0x04
}
    4788:	08 95       	ret

0000478a <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    478a:	ef 92       	push	r14
    478c:	ff 92       	push	r15
    478e:	0f 93       	push	r16
    4790:	1f 93       	push	r17
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	eb 01       	movw	r28, r22
    if (oversampling)
    4798:	44 23       	and	r20, r20
    479a:	c9 f0       	breq	.+50     	; 0x47ce <ADC_Offset_Get_Unsigned+0x44>
    479c:	04 e0       	ldi	r16, 0x04	; 4
    479e:	10 e0       	ldi	r17, 0x00	; 0
    47a0:	ee 24       	eor	r14, r14
    47a2:	ff 24       	eor	r15, r15
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    47a4:	88 81       	ld	r24, Y
    47a6:	80 68       	ori	r24, 0x80	; 128
    47a8:	88 83       	st	Y, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    47aa:	8b 81       	ldd	r24, Y+3	; 0x03
    47ac:	80 ff       	sbrs	r24, 0
    47ae:	fd cf       	rjmp	.-6      	; 0x47aa <ADC_Offset_Get_Unsigned+0x20>
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
    47b0:	ce 01       	movw	r24, r28
    47b2:	60 e0       	ldi	r22, 0x00	; 0
    47b4:	0e 94 8f 23 	call	0x471e	; 0x471e <ADC_ResultCh_GetWord_Unsigned>
    47b8:	e8 0e       	add	r14, r24
    47ba:	f9 1e       	adc	r15, r25
    47bc:	01 50       	subi	r16, 0x01	; 1
    47be:	10 40       	sbci	r17, 0x00	; 0
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
    47c0:	89 f7       	brne	.-30     	; 0x47a4 <ADC_Offset_Get_Unsigned+0x1a>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
    47c2:	c7 01       	movw	r24, r14
    47c4:	96 95       	lsr	r25
    47c6:	87 95       	ror	r24
    47c8:	96 95       	lsr	r25
    47ca:	87 95       	ror	r24
    47cc:	09 c0       	rjmp	.+18     	; 0x47e0 <ADC_Offset_Get_Unsigned+0x56>
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    47ce:	88 81       	ld	r24, Y
    47d0:	80 68       	ori	r24, 0x80	; 128
    47d2:	88 83       	st	Y, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    47d4:	8b 81       	ldd	r24, Y+3	; 0x03
    47d6:	80 ff       	sbrs	r24, 0
    47d8:	fd cf       	rjmp	.-6      	; 0x47d4 <ADC_Offset_Get_Unsigned+0x4a>
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
    47da:	ce 01       	movw	r24, r28
    47dc:	0e 94 a2 23 	call	0x4744	; 0x4744 <ADC_ResultCh_GetWord>
      
      return offset;
    }
}
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	1f 91       	pop	r17
    47e6:	0f 91       	pop	r16
    47e8:	ff 90       	pop	r15
    47ea:	ef 90       	pop	r14
    47ec:	08 95       	ret

000047ee <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    47ee:	ef 92       	push	r14
    47f0:	ff 92       	push	r15
    47f2:	0f 93       	push	r16
    47f4:	1f 93       	push	r17
    47f6:	cf 93       	push	r28
    47f8:	df 93       	push	r29
    47fa:	eb 01       	movw	r28, r22
    if (oversampling)
    47fc:	44 23       	and	r20, r20
    47fe:	e1 f0       	breq	.+56     	; 0x4838 <ADC_Offset_Get_Signed+0x4a>
    4800:	04 e0       	ldi	r16, 0x04	; 4
    4802:	10 e0       	ldi	r17, 0x00	; 0
    4804:	ee 24       	eor	r14, r14
    4806:	ff 24       	eor	r15, r15
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    4808:	88 81       	ld	r24, Y
    480a:	80 68       	ori	r24, 0x80	; 128
    480c:	88 83       	st	Y, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    480e:	8b 81       	ldd	r24, Y+3	; 0x03
    4810:	80 ff       	sbrs	r24, 0
    4812:	fd cf       	rjmp	.-6      	; 0x480e <ADC_Offset_Get_Signed+0x20>
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
    4814:	ce 01       	movw	r24, r28
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	0e 94 97 23 	call	0x472e	; 0x472e <ADC_ResultCh_GetWord_Signed>
    481c:	e8 0e       	add	r14, r24
    481e:	f9 1e       	adc	r15, r25
    4820:	01 50       	subi	r16, 0x01	; 1
    4822:	10 40       	sbci	r17, 0x00	; 0
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
    4824:	89 f7       	brne	.-30     	; 0x4808 <ADC_Offset_Get_Signed+0x1a>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
    4826:	c7 01       	movw	r24, r14
    4828:	99 23       	and	r25, r25
    482a:	0c f4       	brge	.+2      	; 0x482e <ADC_Offset_Get_Signed+0x40>
    482c:	03 96       	adiw	r24, 0x03	; 3
    482e:	95 95       	asr	r25
    4830:	87 95       	ror	r24
    4832:	95 95       	asr	r25
    4834:	87 95       	ror	r24
    4836:	0a c0       	rjmp	.+20     	; 0x484c <ADC_Offset_Get_Signed+0x5e>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    4838:	88 81       	ld	r24, Y
    483a:	80 68       	ori	r24, 0x80	; 128
    483c:	88 83       	st	Y, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    483e:	8b 81       	ldd	r24, Y+3	; 0x03
    4840:	80 ff       	sbrs	r24, 0
    4842:	fd cf       	rjmp	.-6      	; 0x483e <ADC_Offset_Get_Signed+0x50>
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
    4844:	ce 01       	movw	r24, r28
    4846:	60 e0       	ldi	r22, 0x00	; 0
    4848:	0e 94 97 23 	call	0x472e	; 0x472e <ADC_ResultCh_GetWord_Signed>
      
      return offset;
    }
}
    484c:	df 91       	pop	r29
    484e:	cf 91       	pop	r28
    4850:	1f 91       	pop	r17
    4852:	0f 91       	pop	r16
    4854:	ff 90       	pop	r15
    4856:	ef 90       	pop	r14
    4858:	08 95       	ret

0000485a <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    485a:	aa ec       	ldi	r26, 0xCA	; 202
    485c:	b1 e0       	ldi	r27, 0x01	; 1
    485e:	92 e0       	ldi	r25, 0x02	; 2
    4860:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    4862:	e8 2f       	mov	r30, r24
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    4868:	1c 92       	st	X, r1

	return result;
}
    486a:	08 95       	ret

0000486c <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
    4872:	82 e0       	ldi	r24, 0x02	; 2
    4874:	c0 30       	cpi	r28, 0x00	; 0
    4876:	d8 07       	cpc	r29, r24
    4878:	59 f4       	brne	.+22     	; 0x4890 <ADC_CalibrationValues_Load+0x24>
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    487a:	80 e2       	ldi	r24, 0x20	; 32
    487c:	0e 94 2d 24 	call	0x485a	; 0x485a <SP_ReadCalibrationByte>
    4880:	c0 e0       	ldi	r28, 0x00	; 0
    4882:	d2 e0       	ldi	r29, 0x02	; 2
    4884:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    4886:	81 e2       	ldi	r24, 0x21	; 33
    4888:	0e 94 2d 24 	call	0x485a	; 0x485a <SP_ReadCalibrationByte>
    488c:	8d 87       	std	Y+13, r24	; 0x0d
    488e:	08 c0       	rjmp	.+16     	; 0x48a0 <ADC_CalibrationValues_Load+0x34>
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    4890:	84 e2       	ldi	r24, 0x24	; 36
    4892:	0e 94 2d 24 	call	0x485a	; 0x485a <SP_ReadCalibrationByte>
    4896:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    4898:	85 e2       	ldi	r24, 0x25	; 37
    489a:	0e 94 2d 24 	call	0x485a	; 0x485a <SP_ReadCalibrationByte>
    489e:	8d 87       	std	Y+13, r24	; 0x0d
	}
}
    48a0:	df 91       	pop	r29
    48a2:	cf 91       	pop	r28
    48a4:	08 95       	ret

000048a6 <chb_init>:

*/
/**************************************************************************/
void chb_init()
{
    memset(&pcb, 0, sizeof(pcb_t));
    48a6:	84 e1       	ldi	r24, 0x14	; 20
    48a8:	e8 e2       	ldi	r30, 0x28	; 40
    48aa:	f1 e2       	ldi	r31, 0x21	; 33
    48ac:	df 01       	movw	r26, r30
    48ae:	1d 92       	st	X+, r1
    48b0:	8a 95       	dec	r24
    48b2:	e9 f7       	brne	.-6      	; 0x48ae <chb_init+0x8>
    pcb.src_addr = chb_get_short_addr();
    48b4:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <chb_get_short_addr>
    48b8:	80 93 28 21 	sts	0x2128, r24
    48bc:	90 93 29 21 	sts	0x2129, r25
    chb_drvr_init();
    48c0:	0e 94 e5 27 	call	0x4fca	; 0x4fca <chb_drvr_init>
}
    48c4:	08 95       	ret

000048c6 <chb_get_pcb>:
*/
/**************************************************************************/
pcb_t *chb_get_pcb()
{
    return &pcb;
}
    48c6:	88 e2       	ldi	r24, 0x28	; 40
    48c8:	91 e2       	ldi	r25, 0x21	; 33
    48ca:	08 95       	ret

000048cc <chb_write>:
/*!

*/
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U8 len)
{
    48cc:	2f 92       	push	r2
    48ce:	3f 92       	push	r3
    48d0:	4f 92       	push	r4
    48d2:	5f 92       	push	r5
    48d4:	6f 92       	push	r6
    48d6:	7f 92       	push	r7
    48d8:	8f 92       	push	r8
    48da:	9f 92       	push	r9
    48dc:	af 92       	push	r10
    48de:	bf 92       	push	r11
    48e0:	cf 92       	push	r12
    48e2:	df 92       	push	r13
    48e4:	ef 92       	push	r14
    48e6:	ff 92       	push	r15
    48e8:	0f 93       	push	r16
    48ea:	1f 93       	push	r17
    48ec:	cf 93       	push	r28
    48ee:	df 93       	push	r29
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
    48f4:	2a 97       	sbiw	r28, 0x0a	; 10
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	de bf       	out	0x3e, r29	; 62
    48fa:	6c 01       	movw	r12, r24
    48fc:	4b 01       	movw	r8, r22
    48fe:	14 2f       	mov	r17, r20
    U8 status, frm_len, hdr_len, hdr[CHB_HDR_SZ + 1];
    
    while (len > 0)
    4900:	44 23       	and	r20, r20
    4902:	09 f4       	brne	.+2      	; 0x4906 <chb_write+0x3a>
    4904:	7c c0       	rjmp	.+248    	; 0x49fe <chb_write+0x132>
    {
        // calculate which frame len to use. if greater than max payload, split
        // up operation.
        frm_len = (len > CHB_MAX_PAYLOAD) ? CHB_MAX_PAYLOAD : len;
    4906:	0f 2e       	mov	r0, r31
    4908:	f4 e6       	ldi	r31, 0x64	; 100
    490a:	3f 2e       	mov	r3, r31
    490c:	f0 2d       	mov	r31, r0
    // frame size = hdr sz + payload len + fcs len
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    490e:	0f 2e       	mov	r0, r31
    4910:	f1 e4       	ldi	r31, 0x41	; 65
    4912:	2f 2e       	mov	r2, r31
    4914:	f0 2d       	mov	r31, r0
    4916:	0f 2e       	mov	r0, r31
    4918:	f1 e6       	ldi	r31, 0x61	; 97
    491a:	af 2e       	mov	r10, r31
    491c:	f0 2d       	mov	r31, r0
    *hdr_ptr++ = CHB_FCF_BYTE_1;
    491e:	0f 2e       	mov	r0, r31
    4920:	f8 e9       	ldi	r31, 0x98	; 152
    4922:	bf 2e       	mov	r11, r31
    4924:	f0 2d       	mov	r31, r0

    *hdr_ptr++ = pcb.seq++;
    4926:	0f 2e       	mov	r0, r31
    4928:	fa e2       	ldi	r31, 0x2A	; 42
    492a:	ef 2e       	mov	r14, r31
    492c:	f1 e2       	ldi	r31, 0x21	; 33
    492e:	ff 2e       	mov	r15, r31
    4930:	f0 2d       	mov	r31, r0

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
    4932:	0f 2e       	mov	r0, r31
    4934:	f4 e3       	ldi	r31, 0x34	; 52
    4936:	6f 2e       	mov	r6, r31
    4938:	f2 e1       	ldi	r31, 0x12	; 18
    493a:	7f 2e       	mov	r7, r31
    493c:	f0 2d       	mov	r31, r0
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = addr;
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = pcb.src_addr;
    493e:	0f 2e       	mov	r0, r31
    4940:	fe ef       	ldi	r31, 0xFE	; 254
    4942:	4f 2e       	mov	r4, r31
    4944:	ff ef       	ldi	r31, 0xFF	; 255
    4946:	5f 2e       	mov	r5, r31
    4948:	f0 2d       	mov	r31, r0
    494a:	4e 0c       	add	r4, r14
    494c:	5f 1c       	adc	r5, r15
    
    while (len > 0)
    {
        // calculate which frame len to use. if greater than max payload, split
        // up operation.
        frm_len = (len > CHB_MAX_PAYLOAD) ? CHB_MAX_PAYLOAD : len;
    494e:	01 2f       	mov	r16, r17
    4950:	15 36       	cpi	r17, 0x65	; 101
    4952:	08 f0       	brcs	.+2      	; 0x4956 <chb_write+0x8a>
    4954:	03 2d       	mov	r16, r3
{
    U8 *hdr_ptr = hdr;

    // calc frame size and put in 0 position of array
    // frame size = hdr sz + payload len + fcs len
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;
    4956:	80 2f       	mov	r24, r16
    4958:	85 5f       	subi	r24, 0xF5	; 245
    495a:	89 83       	std	Y+1, r24	; 0x01

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    495c:	8f ef       	ldi	r24, 0xFF	; 255
    495e:	c8 16       	cp	r12, r24
    4960:	8f ef       	ldi	r24, 0xFF	; 255
    4962:	d8 06       	cpc	r13, r24
    4964:	11 f0       	breq	.+4      	; 0x496a <chb_write+0x9e>
    4966:	8a 2d       	mov	r24, r10
    4968:	01 c0       	rjmp	.+2      	; 0x496c <chb_write+0xa0>
    496a:	82 2d       	mov	r24, r2
    496c:	8a 83       	std	Y+2, r24	; 0x02
    *hdr_ptr++ = CHB_FCF_BYTE_1;
    496e:	bb 82       	std	Y+3, r11	; 0x03

    *hdr_ptr++ = pcb.seq++;
    4970:	f7 01       	movw	r30, r14
    4972:	80 81       	ld	r24, Z
    4974:	8c 83       	std	Y+4, r24	; 0x04
    4976:	8f 5f       	subi	r24, 0xFF	; 255
    4978:	80 83       	st	Z, r24

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
    497a:	6d 82       	std	Y+5, r6	; 0x05
    497c:	7e 82       	std	Y+6, r7	; 0x06
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = addr;
    497e:	cf 82       	std	Y+7, r12	; 0x07
    4980:	d8 86       	std	Y+8, r13	; 0x08
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = pcb.src_addr;
    4982:	f2 01       	movw	r30, r4
    4984:	80 81       	ld	r24, Z
    4986:	91 81       	ldd	r25, Z+1	; 0x01
    4988:	89 87       	std	Y+9, r24	; 0x09
    498a:	9a 87       	std	Y+10, r25	; 0x0a

        // gen frame header
        hdr_len = chb_gen_hdr(hdr, addr, frm_len);

        // send data to chip
        status = chb_tx(hdr, data, frm_len);
    498c:	ce 01       	movw	r24, r28
    498e:	01 96       	adiw	r24, 0x01	; 1
    4990:	b4 01       	movw	r22, r8
    4992:	40 2f       	mov	r20, r16
    4994:	0e 94 91 27 	call	0x4f22	; 0x4f22 <chb_tx>
		
        if (status != CHB_SUCCESS)
    4998:	88 23       	and	r24, r24
    499a:	69 f1       	breq	.+90     	; 0x49f6 <chb_write+0x12a>

        // gen frame header
        hdr_len = chb_gen_hdr(hdr, addr, frm_len);

        // send data to chip
        status = chb_tx(hdr, data, frm_len);
    499c:	28 2f       	mov	r18, r24
		
        if (status != CHB_SUCCESS)
        {
            switch (status)
    499e:	83 30       	cpi	r24, 0x03	; 3
    49a0:	f9 f0       	breq	.+62     	; 0x49e0 <chb_write+0x114>
    49a2:	84 30       	cpi	r24, 0x04	; 4
    49a4:	18 f4       	brcc	.+6      	; 0x49ac <chb_write+0xe0>
    49a6:	81 30       	cpi	r24, 0x01	; 1
    49a8:	59 f5       	brne	.+86     	; 0x4a00 <chb_write+0x134>
    49aa:	04 c0       	rjmp	.+8      	; 0x49b4 <chb_write+0xe8>
    49ac:	85 30       	cpi	r24, 0x05	; 5
    49ae:	69 f0       	breq	.+26     	; 0x49ca <chb_write+0xfe>
    49b0:	80 34       	cpi	r24, 0x40	; 64
    49b2:	31 f5       	brne	.+76     	; 0x4a00 <chb_write+0x134>
            {
            case RADIO_SUCCESS:
                // fall through
            case CHB_SUCCESS_DATA_PENDING:
                pcb.txd_success++;
    49b4:	20 91 2f 21 	lds	r18, 0x212F
    49b8:	30 91 30 21 	lds	r19, 0x2130
    49bc:	2f 5f       	subi	r18, 0xFF	; 255
    49be:	3f 4f       	sbci	r19, 0xFF	; 255
    49c0:	20 93 2f 21 	sts	0x212F, r18
    49c4:	30 93 30 21 	sts	0x2130, r19
                break;
    49c8:	1b c0       	rjmp	.+54     	; 0x4a00 <chb_write+0x134>

            case CHB_NO_ACK:
                pcb.txd_noack++;
    49ca:	80 91 31 21 	lds	r24, 0x2131
    49ce:	90 91 32 21 	lds	r25, 0x2132
    49d2:	01 96       	adiw	r24, 0x01	; 1
    49d4:	80 93 31 21 	sts	0x2131, r24
    49d8:	90 93 32 21 	sts	0x2132, r25
                break;

            default:
                break;
            }
            return status;
    49dc:	82 2f       	mov	r24, r18
                pcb.txd_success++;
                break;

            case CHB_NO_ACK:
                pcb.txd_noack++;
                break;
    49de:	10 c0       	rjmp	.+32     	; 0x4a00 <chb_write+0x134>

            case CHB_CHANNEL_ACCESS_FAILURE:
                pcb.txd_channel_fail++;
    49e0:	20 91 33 21 	lds	r18, 0x2133
    49e4:	30 91 34 21 	lds	r19, 0x2134
    49e8:	2f 5f       	subi	r18, 0xFF	; 255
    49ea:	3f 4f       	sbci	r19, 0xFF	; 255
    49ec:	20 93 33 21 	sts	0x2133, r18
    49f0:	30 93 34 21 	sts	0x2134, r19
                break;
    49f4:	05 c0       	rjmp	.+10     	; 0x4a00 <chb_write+0x134>
            }
            return status;
        }

        // adjust len and restart
        len = len - frm_len;
    49f6:	10 1b       	sub	r17, r16
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U8 len)
{
    U8 status, frm_len, hdr_len, hdr[CHB_HDR_SZ + 1];
    
    while (len > 0)
    49f8:	09 f0       	breq	.+2      	; 0x49fc <chb_write+0x130>
    49fa:	a9 cf       	rjmp	.-174    	; 0x494e <chb_write+0x82>
    49fc:	01 c0       	rjmp	.+2      	; 0x4a00 <chb_write+0x134>
        }

        // adjust len and restart
        len = len - frm_len;
    }
    return CHB_SUCCESS;
    49fe:	80 e0       	ldi	r24, 0x00	; 0
}
    4a00:	2a 96       	adiw	r28, 0x0a	; 10
    4a02:	cd bf       	out	0x3d, r28	; 61
    4a04:	de bf       	out	0x3e, r29	; 62
    4a06:	df 91       	pop	r29
    4a08:	cf 91       	pop	r28
    4a0a:	1f 91       	pop	r17
    4a0c:	0f 91       	pop	r16
    4a0e:	ff 90       	pop	r15
    4a10:	ef 90       	pop	r14
    4a12:	df 90       	pop	r13
    4a14:	cf 90       	pop	r12
    4a16:	bf 90       	pop	r11
    4a18:	af 90       	pop	r10
    4a1a:	9f 90       	pop	r9
    4a1c:	8f 90       	pop	r8
    4a1e:	7f 90       	pop	r7
    4a20:	6f 90       	pop	r6
    4a22:	5f 90       	pop	r5
    4a24:	4f 90       	pop	r4
    4a26:	3f 90       	pop	r3
    4a28:	2f 90       	pop	r2
    4a2a:	08 95       	ret

00004a2c <chb_read>:
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
{
    4a2c:	df 92       	push	r13
    4a2e:	ef 92       	push	r14
    4a30:	ff 92       	push	r15
    4a32:	0f 93       	push	r16
    4a34:	1f 93       	push	r17
    4a36:	cf 93       	push	r28
    4a38:	df 93       	push	r29
    4a3a:	7c 01       	movw	r14, r24

    data_ptr = rx->data;

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    4a3c:	0e 94 92 25 	call	0x4b24	; 0x4b24 <chb_buf_read>
    4a40:	d8 2e       	mov	r13, r24
    4a42:	88 23       	and	r24, r24
    4a44:	0c f4       	brge	.+2      	; 0x4a48 <chb_read+0x1c>
    4a46:	47 c0       	rjmp	.+142    	; 0x4ad6 <chb_read+0xaa>
    {
        return 0;
    }
    *data_ptr++ = len;
    4a48:	f7 01       	movw	r30, r14
    4a4a:	85 83       	std	Z+5, r24	; 0x05

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    4a4c:	88 23       	and	r24, r24
    4a4e:	71 f0       	breq	.+28     	; 0x4a6c <chb_read+0x40>
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    {
        return 0;
    }
    *data_ptr++ = len;
    4a50:	e7 01       	movw	r28, r14
    4a52:	26 96       	adiw	r28, 0x06	; 6
 
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
    4a54:	87 01       	movw	r16, r14
    4a56:	09 5f       	subi	r16, 0xF9	; 249
    4a58:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5a:	81 50       	subi	r24, 0x01	; 1
    4a5c:	08 0f       	add	r16, r24
    4a5e:	11 1d       	adc	r17, r1
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    {
        *data_ptr++ = chb_buf_read();
    4a60:	0e 94 92 25 	call	0x4b24	; 0x4b24 <chb_buf_read>
    4a64:	89 93       	st	Y+, r24
        return 0;
    }
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
    4a66:	c0 17       	cp	r28, r16
    4a68:	d1 07       	cpc	r29, r17
    4a6a:	d1 f7       	brne	.-12     	; 0x4a60 <chb_read+0x34>
    // we'll use it as temp storage to parse the frame. then move the frame
    // down so that only the payload will be in the buffer.

    // extract the sequence number
    data_ptr = rx->data + 3;    // location of sequence number
    seq = *data_ptr;
    4a6c:	f7 01       	movw	r30, r14
    4a6e:	c0 85       	ldd	r28, Z+8	; 0x08

    // parse the buffer and extract the dest and src addresses
    data_ptr = rx->data + 6;                // location of dest addr
    rx->dest_addr = *(U16 *)data_ptr;
    4a70:	83 85       	ldd	r24, Z+11	; 0x0b
    4a72:	94 85       	ldd	r25, Z+12	; 0x0c
    4a74:	83 83       	std	Z+3, r24	; 0x03
    4a76:	94 83       	std	Z+4, r25	; 0x04
    data_ptr += sizeof(U16);
    rx->src_addr = *(U16 *)data_ptr;
    4a78:	85 85       	ldd	r24, Z+13	; 0x0d
    4a7a:	96 85       	ldd	r25, Z+14	; 0x0e
    4a7c:	81 83       	std	Z+1, r24	; 0x01
    4a7e:	92 83       	std	Z+2, r25	; 0x02
    data_ptr += sizeof(U16);

    // if the data in the rx buf is 0, then clear the rx_flag. otherwise, keep it raised
    if (!chb_buf_get_len())
    4a80:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <chb_buf_get_len>
    4a84:	88 23       	and	r24, r24
    4a86:	11 f4       	brne	.+4      	; 0x4a8c <chb_read+0x60>
    {
        pcb.data_rcv = false;
    4a88:	10 92 2b 21 	sts	0x212B, r1
#else
    // duplicate frame check (dupe check). we want to remove frames that have been already been received since they 
    // are just retries. 
    // note: this dupe check only removes duplicate frames from the previous transfer. if another frame from a different
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    4a8c:	80 91 1e 20 	lds	r24, 0x201E
    4a90:	c8 17       	cp	r28, r24
    4a92:	51 f4       	brne	.+20     	; 0x4aa8 <chb_read+0x7c>
    4a94:	f7 01       	movw	r30, r14
    4a96:	21 81       	ldd	r18, Z+1	; 0x01
    4a98:	32 81       	ldd	r19, Z+2	; 0x02
    4a9a:	80 91 1f 20 	lds	r24, 0x201F
    4a9e:	90 91 20 20 	lds	r25, 0x2020
    4aa2:	28 17       	cp	r18, r24
    4aa4:	39 07       	cpc	r19, r25
    4aa6:	c9 f0       	breq	.+50     	; 0x4ada <chb_read+0xae>
        // it properly. discard.
        return 0;
    }
    else
    {
        prev_seq = seq;
    4aa8:	c0 93 1e 20 	sts	0x201E, r28
        prev_src_addr = rx->src_addr;
    4aac:	f7 01       	movw	r30, r14
    4aae:	81 81       	ldd	r24, Z+1	; 0x01
    4ab0:	92 81       	ldd	r25, Z+2	; 0x02
    4ab2:	80 93 1f 20 	sts	0x201F, r24
    4ab6:	90 93 20 20 	sts	0x2020, r25
    }

    // move the payload down to the beginning of the data buffer
    memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
    4aba:	b7 01       	movw	r22, r14
    4abc:	61 5f       	subi	r22, 0xF1	; 241
    4abe:	7f 4f       	sbci	r23, 0xFF	; 255
    4ac0:	4d 2d       	mov	r20, r13
    4ac2:	50 e0       	ldi	r21, 0x00	; 0
    4ac4:	49 50       	subi	r20, 0x09	; 9
    4ac6:	50 40       	sbci	r21, 0x00	; 0
    4ac8:	c7 01       	movw	r24, r14
    4aca:	05 96       	adiw	r24, 0x05	; 5
    4acc:	0e 94 d6 34 	call	0x69ac	; 0x69ac <memmove>
	//memmove(rx->data, data_ptr+((seq%4)*128)+128, len - CHB_HDR_SZ);
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
    4ad0:	8d 2d       	mov	r24, r13
    4ad2:	8b 50       	subi	r24, 0x0B	; 11
    4ad4:	03 c0       	rjmp	.+6      	; 0x4adc <chb_read+0xb0>

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
    {
        return 0;
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	01 c0       	rjmp	.+2      	; 0x4adc <chb_read+0xb0>
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    {
        // this is a duplicate frame from a retry. the remote node thinks we didn't receive 
        // it properly. discard.
        return 0;
    4ada:	80 e0       	ldi	r24, 0x00	; 0
    memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	//memmove(rx->data, data_ptr+((seq%4)*128)+128, len - CHB_HDR_SZ);
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
#endif
}
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	1f 91       	pop	r17
    4ae2:	0f 91       	pop	r16
    4ae4:	ff 90       	pop	r15
    4ae6:	ef 90       	pop	r14
    4ae8:	df 90       	pop	r13
    4aea:	08 95       	ret

00004aec <chb_buf_init>:

*/
/**************************************************************************/
void chb_buf_init()
{
    rd_ptr = 0;
    4aec:	10 92 3c 21 	sts	0x213C, r1
    wr_ptr = 0;
    4af0:	10 92 3d 21 	sts	0x213D, r1
    len = 0;
    4af4:	10 92 3e 21 	sts	0x213E, r1
}
    4af8:	08 95       	ret

00004afa <chb_buf_write>:

*/
/**************************************************************************/
void chb_buf_write(U8 data)
{
    chb_buf[wr_ptr] = data;
    4afa:	20 91 3d 21 	lds	r18, 0x213D
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	f9 01       	movw	r30, r18
    4b02:	e1 5c       	subi	r30, 0xC1	; 193
    4b04:	fe 4d       	sbci	r31, 0xDE	; 222
    4b06:	80 83       	st	Z, r24
    wr_ptr = (wr_ptr + 1) % CHB_BUF_SZ;
    4b08:	c9 01       	movw	r24, r18
    4b0a:	01 96       	adiw	r24, 0x01	; 1
    4b0c:	60 e8       	ldi	r22, 0x80	; 128
    4b0e:	70 e0       	ldi	r23, 0x00	; 0
    4b10:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    4b14:	80 93 3d 21 	sts	0x213D, r24
    len++;
    4b18:	80 91 3e 21 	lds	r24, 0x213E
    4b1c:	8f 5f       	subi	r24, 0xFF	; 255
    4b1e:	80 93 3e 21 	sts	0x213E, r24
}
    4b22:	08 95       	ret

00004b24 <chb_buf_read>:
/**************************************************************************/
U8 chb_buf_read()
{
    U8 data;

    data = chb_buf[rd_ptr];
    4b24:	20 91 3c 21 	lds	r18, 0x213C
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	f9 01       	movw	r30, r18
    4b2c:	e1 5c       	subi	r30, 0xC1	; 193
    4b2e:	fe 4d       	sbci	r31, 0xDE	; 222
    4b30:	40 81       	ld	r20, Z
    rd_ptr = (rd_ptr + 1) % CHB_BUF_SZ;
    4b32:	2f 5f       	subi	r18, 0xFF	; 255
    4b34:	3f 4f       	sbci	r19, 0xFF	; 255
    4b36:	c9 01       	movw	r24, r18
    4b38:	60 e8       	ldi	r22, 0x80	; 128
    4b3a:	70 e0       	ldi	r23, 0x00	; 0
    4b3c:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    4b40:	80 93 3c 21 	sts	0x213C, r24
    len--;
    4b44:	80 91 3e 21 	lds	r24, 0x213E
    4b48:	81 50       	subi	r24, 0x01	; 1
    4b4a:	80 93 3e 21 	sts	0x213E, r24
    return data;
}
    4b4e:	84 2f       	mov	r24, r20
    4b50:	08 95       	ret

00004b52 <chb_buf_get_len>:
*/
/**************************************************************************/
U8 chb_buf_get_len()
{
    return len;
}
    4b52:	80 91 3e 21 	lds	r24, 0x213E
    4b56:	08 95       	ret

00004b58 <chb_reg_read>:
/*!

*/
/**************************************************************************/
U8 chb_reg_read(U8 addr)
{
    4b58:	cf 93       	push	r28
    4b5a:	c8 2f       	mov	r28, r24
    U8 val = 0;

    /* Add the register read command to the register address. */
    addr |= 0x80;

    CHB_ENTER_CRIT();
    4b5c:	8f b7       	in	r24, 0x3f	; 63
    4b5e:	80 93 3e 40 	sts	0x403E, r24
    4b62:	f8 94       	cli
    RadioCS(TRUE);
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>

    /*Send Register address and read register content.*/
    val = SPID_write(addr);
    4b6a:	8c 2f       	mov	r24, r28
    4b6c:	80 68       	ori	r24, 0x80	; 128
    4b6e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
    val = SPID_write(val);
    4b72:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
    4b76:	c8 2f       	mov	r28, r24

    RadioCS(FALSE);
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>
    CHB_LEAVE_CRIT();
    4b7e:	80 91 3e 40 	lds	r24, 0x403E
    4b82:	8f bf       	out	0x3f, r24	; 63
    4b84:	78 94       	sei

    return val;
}
    4b86:	8c 2f       	mov	r24, r28
    4b88:	cf 91       	pop	r28
    4b8a:	08 95       	ret

00004b8c <chb_get_state>:

*/
/**************************************************************************/
static U8 chb_get_state()
{
    return chb_reg_read(TRX_STATUS) & 0x1f;
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
}
    4b92:	8f 71       	andi	r24, 0x1F	; 31
    4b94:	08 95       	ret

00004b96 <chb_reset>:

*/
/**************************************************************************/
void chb_reset()
{
    CHB_RST_DISABLE();
    4b96:	e4 e6       	ldi	r30, 0x64	; 100
    4b98:	f6 e0       	ldi	r31, 0x06	; 6
    4b9a:	80 81       	ld	r24, Z
    4b9c:	81 60       	ori	r24, 0x01	; 1
    4b9e:	80 83       	st	Z, r24
    CHB_SLPTR_DISABLE();
    4ba0:	80 81       	ld	r24, Z
    4ba2:	8d 7f       	andi	r24, 0xFD	; 253
    4ba4:	80 83       	st	Z, r24
    4ba6:	8e e7       	ldi	r24, 0x7E	; 126
    4ba8:	8a 95       	dec	r24
    4baa:	f1 f7       	brne	.-4      	; 0x4ba8 <chb_reset+0x12>
    4bac:	00 c0       	rjmp	.+0      	; 0x4bae <chb_reset+0x18>

    // wait a bit while transceiver wakes up
    _delay_us(TIME_P_ON_TO_CLKM_AVAIL);

    // reset the device
    CHB_RST_ENABLE();
    4bae:	80 81       	ld	r24, Z
    4bb0:	8e 7f       	andi	r24, 0xFE	; 254
    4bb2:	80 83       	st	Z, r24
    4bb4:	00 00       	nop
    _delay_us(TIME_RST_PULSE_WIDTH);
    CHB_RST_DISABLE();
    4bb6:	80 81       	ld	r24, Z
    4bb8:	81 60       	ori	r24, 0x01	; 1
    4bba:	80 83       	st	Z, r24
    while (1)
    {
        // if you're stuck in this loop, that means that you're not reading
        // the version and part number register correctly. possible that version number
        // changes. if so, update version num in header file
        if ((chb_reg_read(VERSION_NUM) == CHB_AT86RF212_VER_NUM) && (chb_reg_read(PART_NUM) == CHB_AT86RF212_PART_NUM)) 
    4bbc:	8d e1       	ldi	r24, 0x1D	; 29
    4bbe:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    4bc2:	81 30       	cpi	r24, 0x01	; 1
    4bc4:	d9 f7       	brne	.-10     	; 0x4bbc <chb_reset+0x26>
    4bc6:	8c e1       	ldi	r24, 0x1C	; 28
    4bc8:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    4bcc:	87 30       	cpi	r24, 0x07	; 7
    4bce:	b1 f7       	brne	.-20     	; 0x4bbc <chb_reset+0x26>
            break;
        }
    }
	

}
    4bd0:	08 95       	ret

00004bd2 <chb_reg_read16>:
/*! 
 
*/
/**************************************************************************/
U16 chb_reg_read16(U8 addr)
{
    4bd2:	cf 93       	push	r28
    4bd4:	c8 2f       	mov	r28, r24
    U8 i;
    U16 val = 0;

    for (i=0; i<2; i++)
    {
        addr |= chb_reg_read(addr + i) << (8 * i);
    4bd6:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    4bda:	8c 2b       	or	r24, r28
    4bdc:	8f 5f       	subi	r24, 0xFF	; 255
    4bde:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    }
    return val;
}
    4be2:	80 e0       	ldi	r24, 0x00	; 0
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	cf 91       	pop	r28
    4be8:	08 95       	ret

00004bea <chb_reg_write>:
/*!

*/
/**************************************************************************/
void chb_reg_write(U8 addr, U8 val)
{
    4bea:	cf 93       	push	r28
    4bec:	df 93       	push	r29
    4bee:	d8 2f       	mov	r29, r24
    4bf0:	c6 2f       	mov	r28, r22
    U8 dummy; 

    /* Add the Register Write command to the address. */
    addr |= 0xC0;

    CHB_ENTER_CRIT();
    4bf2:	8f b7       	in	r24, 0x3f	; 63
    4bf4:	80 93 3e 40 	sts	0x403E, r24
    4bf8:	f8 94       	cli
    RadioCS(TRUE);
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>

    /*Send Register address and write register content.*/
    dummy = SPID_write(addr);
    4c00:	8d 2f       	mov	r24, r29
    4c02:	80 6c       	ori	r24, 0xC0	; 192
    4c04:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
    dummy = SPID_write(val);
    4c08:	8c 2f       	mov	r24, r28
    4c0a:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>

    RadioCS(FALSE);
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>
    CHB_LEAVE_CRIT();
    4c14:	80 91 3e 40 	lds	r24, 0x403E
    4c18:	8f bf       	out	0x3f, r24	; 63
    4c1a:	78 94       	sei
}
    4c1c:	df 91       	pop	r29
    4c1e:	cf 91       	pop	r28
    4c20:	08 95       	ret

00004c22 <chb_reg_write16>:
/*!

*/
/**************************************************************************/
void chb_reg_write16(U8 addr, U16 val)
{
    4c22:	cf 93       	push	r28
    4c24:	df 93       	push	r29
    4c26:	c8 2f       	mov	r28, r24
    4c28:	d7 2f       	mov	r29, r23
    U8 i;

    for (i=0; i<2; i++)
    {
        chb_reg_write(addr + i, val >> (8 * i));
    4c2a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <chb_reg_write>
    4c2e:	8c 2f       	mov	r24, r28
    4c30:	8f 5f       	subi	r24, 0xFF	; 255
    4c32:	6d 2f       	mov	r22, r29
    4c34:	0e 94 f5 25 	call	0x4bea	; 0x4bea <chb_reg_write>
    }
}
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	08 95       	ret

00004c3e <chb_reg_write64>:
/*!

*/
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    4c3e:	0f 93       	push	r16
    4c40:	1f 93       	push	r17
    4c42:	cf 93       	push	r28
    4c44:	df 93       	push	r29
    4c46:	08 2f       	mov	r16, r24
    U8 i;

    for (i=0; i<8; i++)
    4c48:	c6 2f       	mov	r28, r22
    4c4a:	d7 2f       	mov	r29, r23
    4c4c:	10 e0       	ldi	r17, 0x00	; 0
    {
        chb_reg_write(addr + i, *(val + i));
    4c4e:	69 91       	ld	r22, Y+
    4c50:	81 2f       	mov	r24, r17
    4c52:	80 0f       	add	r24, r16
    4c54:	0e 94 f5 25 	call	0x4bea	; 0x4bea <chb_reg_write>
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    U8 i;

    for (i=0; i<8; i++)
    4c58:	1f 5f       	subi	r17, 0xFF	; 255
    4c5a:	18 30       	cpi	r17, 0x08	; 8
    4c5c:	c1 f7       	brne	.-16     	; 0x4c4e <chb_reg_write64+0x10>
    {
        chb_reg_write(addr + i, *(val + i));
    }
}
    4c5e:	df 91       	pop	r29
    4c60:	cf 91       	pop	r28
    4c62:	1f 91       	pop	r17
    4c64:	0f 91       	pop	r16
    4c66:	08 95       	ret

00004c68 <chb_reg_read_mod_write>:
/*!

*/
/**************************************************************************/
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    4c68:	1f 93       	push	r17
    4c6a:	cf 93       	push	r28
    4c6c:	df 93       	push	r29
    4c6e:	c8 2f       	mov	r28, r24
    4c70:	16 2f       	mov	r17, r22
    4c72:	d4 2f       	mov	r29, r20
    U8 tmp;

    tmp = chb_reg_read(addr);
    4c74:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    val &= mask;                // mask off stray bits from val
    tmp &= ~mask;               // mask off bits in reg val
    4c78:	6d 2f       	mov	r22, r29
    4c7a:	60 95       	com	r22
    4c7c:	68 23       	and	r22, r24
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    U8 tmp;

    tmp = chb_reg_read(addr);
    val &= mask;                // mask off stray bits from val
    4c7e:	d1 23       	and	r29, r17
    tmp &= ~mask;               // mask off bits in reg val
    tmp |= val;                 // copy val into reg val
    4c80:	6d 2b       	or	r22, r29
    chb_reg_write(addr, tmp);   // write back to reg
    4c82:	8c 2f       	mov	r24, r28
    4c84:	0e 94 f5 25 	call	0x4bea	; 0x4bea <chb_reg_write>
}
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	1f 91       	pop	r17
    4c8e:	08 95       	ret

00004c90 <chb_frame_write>:
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
{
    4c90:	df 92       	push	r13
    4c92:	ef 92       	push	r14
    4c94:	ff 92       	push	r15
    4c96:	0f 93       	push	r16
    4c98:	1f 93       	push	r17
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    4c9e:	8c 01       	movw	r16, r24
    4ca0:	c6 2f       	mov	r28, r22
    4ca2:	7a 01       	movw	r14, r20
    4ca4:	d2 2e       	mov	r13, r18
    U8 i, dummy;

    // dont allow transmission longer than max frame size
    if ((hdr_len + data_len) > 127)
    4ca6:	82 2f       	mov	r24, r18
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	86 0f       	add	r24, r22
    4cac:	91 1d       	adc	r25, r1
    4cae:	80 38       	cpi	r24, 0x80	; 128
    4cb0:	91 05       	cpc	r25, r1
    4cb2:	8c f5       	brge	.+98     	; 0x4d16 <chb_frame_write+0x86>
    {
        return;
    }

    // initiate spi transaction
    CHB_ENTER_CRIT();
    4cb4:	8f b7       	in	r24, 0x3f	; 63
    4cb6:	80 93 3e 40 	sts	0x403E, r24
    4cba:	f8 94       	cli
    RadioCS(TRUE); 
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>

    // send fifo write command
    dummy = SPID_write(CHB_SPI_CMD_FW);
    4cc2:	80 e6       	ldi	r24, 0x60	; 96
    4cc4:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    4cc8:	cc 23       	and	r28, r28
    4cca:	79 f0       	breq	.+30     	; 0x4cea <chb_frame_write+0x5a>
/**************************************************************************/
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
    4ccc:	c8 01       	movw	r24, r16
    4cce:	01 96       	adiw	r24, 0x01	; 1
    4cd0:	c1 50       	subi	r28, 0x01	; 1
    4cd2:	9c 01       	movw	r18, r24
    4cd4:	2c 0f       	add	r18, r28
    4cd6:	31 1d       	adc	r19, r1
    4cd8:	e9 01       	movw	r28, r18
    dummy = SPID_write(CHB_SPI_CMD_FW);

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    {
        dummy = SPID_write(*hdr++);
    4cda:	f8 01       	movw	r30, r16
    4cdc:	81 91       	ld	r24, Z+
    4cde:	8f 01       	movw	r16, r30
    4ce0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>

    // send fifo write command
    dummy = SPID_write(CHB_SPI_CMD_FW);

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
    4ce4:	0c 17       	cp	r16, r28
    4ce6:	1d 07       	cpc	r17, r29
    4ce8:	c1 f7       	brne	.-16     	; 0x4cda <chb_frame_write+0x4a>
    {
        dummy = SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    4cea:	dd 20       	and	r13, r13
    4cec:	69 f0       	breq	.+26     	; 0x4d08 <chb_frame_write+0x78>
/**************************************************************************/
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
    4cee:	e7 01       	movw	r28, r14
    4cf0:	21 96       	adiw	r28, 0x01	; 1
    4cf2:	da 94       	dec	r13
    4cf4:	cd 0d       	add	r28, r13
    4cf6:	d1 1d       	adc	r29, r1
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    {
        dummy = SPID_write(*data++);
    4cf8:	f7 01       	movw	r30, r14
    4cfa:	81 91       	ld	r24, Z+
    4cfc:	7f 01       	movw	r14, r30
    4cfe:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
    {
        dummy = SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    4d02:	ec 16       	cp	r14, r28
    4d04:	fd 06       	cpc	r15, r29
    4d06:	c1 f7       	brne	.-16     	; 0x4cf8 <chb_frame_write+0x68>
    {
        dummy = SPID_write(*data++);
    }

    // terminate spi transaction
    RadioCS(FALSE); 
    4d08:	80 e0       	ldi	r24, 0x00	; 0
    4d0a:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>
    CHB_LEAVE_CRIT();
    4d0e:	80 91 3e 40 	lds	r24, 0x403E
    4d12:	8f bf       	out	0x3f, r24	; 63
    4d14:	78 94       	sei
}
    4d16:	df 91       	pop	r29
    4d18:	cf 91       	pop	r28
    4d1a:	1f 91       	pop	r17
    4d1c:	0f 91       	pop	r16
    4d1e:	ff 90       	pop	r15
    4d20:	ef 90       	pop	r14
    4d22:	df 90       	pop	r13
    4d24:	08 95       	ret

00004d26 <chb_set_mode>:
    Set the channel mode, BPSK, OQPSK, etc...
*/
/**************************************************************************/
void chb_set_mode(U8 mode)
{
    switch (mode)
    4d26:	81 30       	cpi	r24, 0x01	; 1
    4d28:	91 f0       	breq	.+36     	; 0x4d4e <chb_set_mode+0x28>
    4d2a:	81 30       	cpi	r24, 0x01	; 1
    4d2c:	28 f0       	brcs	.+10     	; 0x4d38 <chb_set_mode+0x12>
    4d2e:	82 30       	cpi	r24, 0x02	; 2
    4d30:	c9 f0       	breq	.+50     	; 0x4d64 <chb_set_mode+0x3e>
    4d32:	83 30       	cpi	r24, 0x03	; 3
    4d34:	61 f5       	brne	.+88     	; 0x4d8e <chb_set_mode+0x68>
    4d36:	21 c0       	rjmp	.+66     	; 0x4d7a <chb_set_mode+0x54>
    {
    case OQPSK_868MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x08, 0x3f);                 // 802.15.4-2006, channel page 2, channel 0 (868 MHz, Europe)
    4d38:	8c e0       	ldi	r24, 0x0C	; 12
    4d3a:	68 e0       	ldi	r22, 0x08	; 8
    4d3c:	4f e3       	ldi	r20, 0x3F	; 63
    4d3e:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    4d42:	86 e1       	ldi	r24, 0x16	; 22
    4d44:	62 e0       	ldi	r22, 0x02	; 2
    4d46:	43 e0       	ldi	r20, 0x03	; 3
    4d48:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
        break;
    4d4c:	08 95       	ret
    case OQPSK_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);                 // 802.15.4-2006, channel page 2, channels 1-10 (915 MHz, US)
    4d4e:	8c e0       	ldi	r24, 0x0C	; 12
    4d50:	6c e0       	ldi	r22, 0x0C	; 12
    4d52:	4f e3       	ldi	r20, 0x3F	; 63
    4d54:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    4d58:	86 e1       	ldi	r24, 0x16	; 22
    4d5a:	62 e0       	ldi	r22, 0x02	; 2
    4d5c:	43 e0       	ldi	r20, 0x03	; 3
    4d5e:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
        break;
    4d62:	08 95       	ret
    case OQPSK_780MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x1c, 0x3f);                 // 802.15.4-2006, channel page 5, channel 0-3 (780 MHz, China)
    4d64:	8c e0       	ldi	r24, 0x0C	; 12
    4d66:	6c e1       	ldi	r22, 0x1C	; 28
    4d68:	4f e3       	ldi	r20, 0x3F	; 63
    4d6a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
    4d6e:	86 e1       	ldi	r24, 0x16	; 22
    4d70:	62 e0       	ldi	r22, 0x02	; 2
    4d72:	43 e0       	ldi	r20, 0x03	; 3
    4d74:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
        break;
    4d78:	08 95       	ret
    case BPSK40_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x00, 0x3f);                 // 802.15.4-2006, BPSK, 40 kbps
    4d7a:	8c e0       	ldi	r24, 0x0C	; 12
    4d7c:	60 e0       	ldi	r22, 0x00	; 0
    4d7e:	4f e3       	ldi	r20, 0x3F	; 63
    4d80:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_BPSK_TX_OFFSET, 0x3);     // this is according to table 7-16 in at86rf212 datasheet
    4d84:	86 e1       	ldi	r24, 0x16	; 22
    4d86:	63 e0       	ldi	r22, 0x03	; 3
    4d88:	43 e0       	ldi	r20, 0x03	; 3
    4d8a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
    4d8e:	08 95       	ret

00004d90 <chb_set_channel>:
/*!

*/
/**************************************************************************/
U8 chb_set_channel(U8 channel)
{
    4d90:	cf 93       	push	r28
    4d92:	c8 2f       	mov	r28, r24
    //    {
    //        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);
    //    }
    //}
        
    chb_reg_read_mod_write(PHY_CC_CCA, channel, 0x1f); 
    4d94:	88 e0       	ldi	r24, 0x08	; 8
    4d96:	6c 2f       	mov	r22, r28
    4d98:	4f e1       	ldi	r20, 0x1F	; 31
    4d9a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
#endif

    // add a delay to allow the PLL to lock if in active mode.
    state = chb_get_state();
    4d9e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <chb_get_state>
    if ((state == CHB_RX_ON) || (state == CHB_PLL_ON))
    4da2:	86 30       	cpi	r24, 0x06	; 6
    4da4:	11 f0       	breq	.+4      	; 0x4daa <chb_set_channel+0x1a>
    4da6:	89 30       	cpi	r24, 0x09	; 9
    4da8:	21 f4       	brne	.+8      	; 0x4db2 <chb_set_channel+0x22>
    4daa:	84 e2       	ldi	r24, 0x24	; 36
    4dac:	8a 95       	dec	r24
    4dae:	f1 f7       	brne	.-4      	; 0x4dac <chb_set_channel+0x1c>
    4db0:	00 c0       	rjmp	.+0      	; 0x4db2 <chb_set_channel+0x22>
    {
        _delay_us(TIME_PLL_LOCK_TIME);
    }

    return ((chb_reg_read(PHY_CC_CCA) & 0x1f) == channel) ? RADIO_SUCCESS : RADIO_TIMED_OUT;
    4db2:	88 e0       	ldi	r24, 0x08	; 8
    4db4:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	8f 71       	andi	r24, 0x1F	; 31
    4dbc:	90 70       	andi	r25, 0x00	; 0
    4dbe:	6c 2f       	mov	r22, r28
    4dc0:	70 e0       	ldi	r23, 0x00	; 0
    4dc2:	86 17       	cp	r24, r22
    4dc4:	97 07       	cpc	r25, r23
    4dc6:	11 f4       	brne	.+4      	; 0x4dcc <chb_set_channel+0x3c>
    4dc8:	80 e4       	ldi	r24, 0x40	; 64
    4dca:	01 c0       	rjmp	.+2      	; 0x4dce <chb_set_channel+0x3e>
    4dcc:	83 e4       	ldi	r24, 0x43	; 67
}
    4dce:	cf 91       	pop	r28
    4dd0:	08 95       	ret

00004dd2 <chb_set_pwr>:
/*!
    Set the power level
*/
/**************************************************************************/
void chb_set_pwr(U8 val)
{
    4dd2:	68 2f       	mov	r22, r24
    chb_reg_write(PHY_TX_PWR, val);
    4dd4:	85 e0       	ldi	r24, 0x05	; 5
    4dd6:	0e 94 f5 25 	call	0x4bea	; 0x4bea <chb_reg_write>
}
    4dda:	08 95       	ret

00004ddc <chb_set_state>:
    for certain operations. Check the datasheet for more details on the state 
    machine and manipulations.
*/
/**************************************************************************/
U8 chb_set_state(U8 state)
{
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	d8 2f       	mov	r29, r24
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    4de2:	80 91 64 06 	lds	r24, 0x0664
    4de6:	81 fd       	sbrc	r24, 1
    4de8:	40 c0       	rjmp	.+128    	; 0x4e6a <chb_set_state+0x8e>
    {
        return RADIO_WRONG_STATE;
    }

    // if we're in a transition state, wait for the state to become stable
    curr_state = chb_get_state();
    4dea:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <chb_get_state>
    4dee:	c8 2f       	mov	r28, r24
    if ((curr_state == CHB_BUSY_TX_ARET) || (curr_state == CHB_BUSY_RX_AACK) || (curr_state == CHB_BUSY_RX) || (curr_state == CHB_BUSY_TX))
    4df0:	81 51       	subi	r24, 0x11	; 17
    4df2:	82 30       	cpi	r24, 0x02	; 2
    4df4:	20 f0       	brcs	.+8      	; 0x4dfe <chb_set_state+0x22>
    4df6:	c1 30       	cpi	r28, 0x01	; 1
    4df8:	11 f0       	breq	.+4      	; 0x4dfe <chb_set_state+0x22>
    4dfa:	c2 30       	cpi	r28, 0x02	; 2
    4dfc:	21 f4       	brne	.+8      	; 0x4e06 <chb_set_state+0x2a>
    {
        while (chb_get_state() == curr_state);
    4dfe:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <chb_get_state>
    4e02:	8c 17       	cp	r24, r28
    4e04:	e1 f3       	breq	.-8      	; 0x4dfe <chb_set_state+0x22>
    }

    // At this point it is clear that the requested new_state is:
    // TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
    // we need to handle some special cases before we transition to the new state
    switch (state)
    4e06:	d6 31       	cpi	r29, 0x16	; 22
    4e08:	c9 f0       	breq	.+50     	; 0x4e3c <chb_set_state+0x60>
    4e0a:	d9 31       	cpi	r29, 0x19	; 25
    4e0c:	71 f0       	breq	.+28     	; 0x4e2a <chb_set_state+0x4e>
    4e0e:	d8 30       	cpi	r29, 0x08	; 8
    4e10:	e9 f4       	brne	.+58     	; 0x4e4c <chb_set_state+0x70>
    {
    case CHB_TRX_OFF:
        /* Go to TRX_OFF from any state. */
        CHB_SLPTR_DISABLE();
    4e12:	e4 e6       	ldi	r30, 0x64	; 100
    4e14:	f6 e0       	ldi	r31, 0x06	; 6
    4e16:	80 81       	ld	r24, Z
    4e18:	8d 7f       	andi	r24, 0xFD	; 253
    4e1a:	80 83       	st	Z, r24
        chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1f);
    4e1c:	82 e0       	ldi	r24, 0x02	; 2
    4e1e:	63 e0       	ldi	r22, 0x03	; 3
    4e20:	4f e1       	ldi	r20, 0x1F	; 31
    4e22:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
    4e26:	00 00       	nop
    4e28:	11 c0       	rjmp	.+34     	; 0x4e4c <chb_set_state+0x70>
        _delay_us(TIME_ALL_STATES_TRX_OFF);
        break;

    case CHB_TX_ARET_ON:
        if (curr_state == CHB_RX_AACK_ON)
    4e2a:	c6 31       	cpi	r28, 0x16	; 22
    4e2c:	79 f4       	brne	.+30     	; 0x4e4c <chb_set_state+0x70>
        {
            /* First do intermediate state transition to PLL_ON, then to TX_ARET_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
    4e2e:	82 e0       	ldi	r24, 0x02	; 2
    4e30:	69 e0       	ldi	r22, 0x09	; 9
    4e32:	4f e1       	ldi	r20, 0x1F	; 31
    4e34:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
    4e38:	00 00       	nop
    4e3a:	08 c0       	rjmp	.+16     	; 0x4e4c <chb_set_state+0x70>
            _delay_us(TIME_RX_ON_PLL_ON);
        }
        break;

    case CHB_RX_AACK_ON:
        if (curr_state == CHB_TX_ARET_ON)
    4e3c:	c9 31       	cpi	r28, 0x19	; 25
    4e3e:	31 f4       	brne	.+12     	; 0x4e4c <chb_set_state+0x70>
        {
            /* First do intermediate state transition to RX_ON, then to RX_AACK_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
    4e40:	82 e0       	ldi	r24, 0x02	; 2
    4e42:	69 e0       	ldi	r22, 0x09	; 9
    4e44:	4f e1       	ldi	r20, 0x1F	; 31
    4e46:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
    4e4a:	00 00       	nop
        }
        break;
    }

    /* Now we're okay to transition to any new state. */
    chb_reg_read_mod_write(TRX_STATE, state, 0x1f);
    4e4c:	82 e0       	ldi	r24, 0x02	; 2
    4e4e:	6d 2f       	mov	r22, r29
    4e50:	4f e1       	ldi	r20, 0x1F	; 31
    4e52:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
    4e56:	84 e2       	ldi	r24, 0x24	; 36
    4e58:	8a 95       	dec	r24
    4e5a:	f1 f7       	brne	.-4      	; 0x4e58 <chb_set_state+0x7c>
    4e5c:	00 c0       	rjmp	.+0      	; 0x4e5e <chb_set_state+0x82>

    /* When the PLL is active most states can be reached in 1us. However, from */
    /* TRX_OFF the PLL needs time to activate. */
    _delay_us(TIME_TRX_OFF_PLL_ON);

    if (chb_get_state() == state)
    4e5e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <chb_get_state>
    4e62:	8d 17       	cp	r24, r29
    4e64:	21 f4       	brne	.+8      	; 0x4e6e <chb_set_state+0x92>
    {
        return RADIO_SUCCESS;
    4e66:	80 e4       	ldi	r24, 0x40	; 64
    4e68:	03 c0       	rjmp	.+6      	; 0x4e70 <chb_set_state+0x94>
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    {
        return RADIO_WRONG_STATE;
    4e6a:	84 e4       	ldi	r24, 0x44	; 68
    4e6c:	01 c0       	rjmp	.+2      	; 0x4e70 <chb_set_state+0x94>

    if (chb_get_state() == state)
    {
        return RADIO_SUCCESS;
    }
    return RADIO_TIMED_OUT;
    4e6e:	83 e4       	ldi	r24, 0x43	; 67
}
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	08 95       	ret

00004e76 <chb_set_ieee_addr>:
/*! 
 
*/
/**************************************************************************/
void chb_set_ieee_addr(U8 *addr)
{
    4e76:	cf 93       	push	r28
    4e78:	df 93       	push	r29
    4e7a:	ec 01       	movw	r28, r24
    chb_eeprom_write(CHB_EEPROM_IEEE_ADDR, addr, 8); 
    4e7c:	80 e0       	ldi	r24, 0x00	; 0
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	be 01       	movw	r22, r28
    4e82:	48 e0       	ldi	r20, 0x08	; 8
    4e84:	50 e0       	ldi	r21, 0x00	; 0
    4e86:	0e 94 87 29 	call	0x530e	; 0x530e <chb_eeprom_write>
    chb_reg_write64(IEEE_ADDR_0, addr); 
    4e8a:	84 e2       	ldi	r24, 0x24	; 36
    4e8c:	be 01       	movw	r22, r28
    4e8e:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <chb_reg_write64>
}
    4e92:	df 91       	pop	r29
    4e94:	cf 91       	pop	r28
    4e96:	08 95       	ret

00004e98 <chb_get_ieee_addr>:
/*!

*/
/**************************************************************************/
void chb_get_ieee_addr(U8 *addr)
{
    4e98:	bc 01       	movw	r22, r24
    chb_eeprom_read(CHB_EEPROM_IEEE_ADDR, addr, 8);
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	48 e0       	ldi	r20, 0x08	; 8
    4ea0:	50 e0       	ldi	r21, 0x00	; 0
    4ea2:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <chb_eeprom_read>
}
    4ea6:	08 95       	ret

00004ea8 <chb_set_short_addr>:
/*!

*/
/**************************************************************************/
void chb_set_short_addr(U16 addr)
{
    4ea8:	0f 93       	push	r16
    4eaa:	1f 93       	push	r17
    4eac:	cf 93       	push	r28
    4eae:	df 93       	push	r29
    4eb0:	0f 92       	push	r0
    4eb2:	0f 92       	push	r0
    4eb4:	cd b7       	in	r28, 0x3d	; 61
    4eb6:	de b7       	in	r29, 0x3e	; 62
    4eb8:	89 83       	std	Y+1, r24	; 0x01
    4eba:	9a 83       	std	Y+2, r25	; 0x02
    U8 *addr_ptr = (U8 *)&addr;
    pcb_t *pcb = chb_get_pcb();
    4ebc:	0e 94 63 24 	call	0x48c6	; 0x48c6 <chb_get_pcb>
    4ec0:	8c 01       	movw	r16, r24

    chb_eeprom_write(CHB_EEPROM_SHORT_ADDR, addr_ptr, 2);
    4ec2:	89 e0       	ldi	r24, 0x09	; 9
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	be 01       	movw	r22, r28
    4ec8:	6f 5f       	subi	r22, 0xFF	; 255
    4eca:	7f 4f       	sbci	r23, 0xFF	; 255
    4ecc:	42 e0       	ldi	r20, 0x02	; 2
    4ece:	50 e0       	ldi	r21, 0x00	; 0
    4ed0:	0e 94 87 29 	call	0x530e	; 0x530e <chb_eeprom_write>
    chb_reg_write16(SHORT_ADDR_0, addr);
    4ed4:	69 81       	ldd	r22, Y+1	; 0x01
    4ed6:	7a 81       	ldd	r23, Y+2	; 0x02
    4ed8:	80 e2       	ldi	r24, 0x20	; 32
    4eda:	0e 94 11 26 	call	0x4c22	; 0x4c22 <chb_reg_write16>
    pcb->src_addr = addr;
    4ede:	89 81       	ldd	r24, Y+1	; 0x01
    4ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee2:	f8 01       	movw	r30, r16
    4ee4:	80 83       	st	Z, r24
    4ee6:	91 83       	std	Z+1, r25	; 0x01
}
    4ee8:	0f 90       	pop	r0
    4eea:	0f 90       	pop	r0
    4eec:	df 91       	pop	r29
    4eee:	cf 91       	pop	r28
    4ef0:	1f 91       	pop	r17
    4ef2:	0f 91       	pop	r16
    4ef4:	08 95       	ret

00004ef6 <chb_get_short_addr>:
/*!

*/
/**************************************************************************/
U16 chb_get_short_addr()
{
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	0f 92       	push	r0
    4efc:	0f 92       	push	r0
    4efe:	cd b7       	in	r28, 0x3d	; 61
    4f00:	de b7       	in	r29, 0x3e	; 62
    U8 addr[2];

    chb_eeprom_read(CHB_EEPROM_SHORT_ADDR, addr, 2);
    4f02:	89 e0       	ldi	r24, 0x09	; 9
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	be 01       	movw	r22, r28
    4f08:	6f 5f       	subi	r22, 0xFF	; 255
    4f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f0c:	42 e0       	ldi	r20, 0x02	; 2
    4f0e:	50 e0       	ldi	r21, 0x00	; 0
    4f10:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <chb_eeprom_read>
    return *(U16 *)addr;
}
    4f14:	89 81       	ldd	r24, Y+1	; 0x01
    4f16:	9a 81       	ldd	r25, Y+2	; 0x02
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	df 91       	pop	r29
    4f1e:	cf 91       	pop	r28
    4f20:	08 95       	ret

00004f22 <chb_tx>:
    Load the data into the fifo, initiate a transmission attempt,
    and return the status of the transmission attempt.
*/
/**************************************************************************/
U8 chb_tx(U8 *hdr, U8 *data, U8 len)
{
    4f22:	cf 92       	push	r12
    4f24:	df 92       	push	r13
    4f26:	ef 92       	push	r14
    4f28:	ff 92       	push	r15
    4f2a:	0f 93       	push	r16
    4f2c:	1f 93       	push	r17
    4f2e:	cf 93       	push	r28
    4f30:	df 93       	push	r29
    4f32:	7c 01       	movw	r14, r24
    4f34:	6b 01       	movw	r12, r22
    4f36:	04 2f       	mov	r16, r20
    U8 state = chb_get_state();
    4f38:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <chb_get_state>
    4f3c:	18 2f       	mov	r17, r24
    pcb_t *pcb = chb_get_pcb();
    4f3e:	0e 94 63 24 	call	0x48c6	; 0x48c6 <chb_get_pcb>
    4f42:	ec 01       	movw	r28, r24

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    4f44:	12 30       	cpi	r17, 0x02	; 2
    4f46:	f1 f0       	breq	.+60     	; 0x4f84 <chb_tx+0x62>
    4f48:	12 31       	cpi	r17, 0x12	; 18
    4f4a:	f1 f0       	breq	.+60     	; 0x4f88 <chb_tx+0x66>
    {
        return RADIO_WRONG_STATE;
    }

    // TODO: check why we need to transition to the off state before we go to tx_aret_on
    chb_set_state(CHB_TRX_OFF);
    4f4c:	88 e0       	ldi	r24, 0x08	; 8
    4f4e:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <chb_set_state>
    chb_set_state(CHB_TX_ARET_ON);
    4f52:	89 e1       	ldi	r24, 0x19	; 25
    4f54:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <chb_set_state>

    // TODO: try and start the frame transmission by writing TX_START command instead of toggling
    // sleep pin...i just feel like it's kind of weird...

    // write frame to buffer. first write header into buffer (add 1 for len byte), then data. 
    chb_frame_write(hdr, CHB_HDR_SZ + 1, data, len);
    4f58:	c7 01       	movw	r24, r14
    4f5a:	6a e0       	ldi	r22, 0x0A	; 10
    4f5c:	a6 01       	movw	r20, r12
    4f5e:	20 2f       	mov	r18, r16
    4f60:	0e 94 48 26 	call	0x4c90	; 0x4c90 <chb_frame_write>

    //Do frame transmission. 
    chb_reg_read_mod_write(TRX_STATE, CMD_TX_START, 0x1F);
    4f64:	82 e0       	ldi	r24, 0x02	; 2
    4f66:	62 e0       	ldi	r22, 0x02	; 2
    4f68:	4f e1       	ldi	r20, 0x1F	; 31
    4f6a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>

    // wait for the transmission to end, signalled by the TRX END flag
    while (!pcb->tx_end);
    4f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4f70:	88 23       	and	r24, r24
    4f72:	e9 f3       	breq	.-6      	; 0x4f6e <chb_tx+0x4c>
    pcb->tx_end = false;
    4f74:	1c 82       	std	Y+4, r1	; 0x04

*/
/**************************************************************************/
static U8 chb_get_status()
{
    return chb_reg_read(TRX_STATE) >> CHB_TRAC_STATUS_POS;
    4f76:	82 e0       	ldi	r24, 0x02	; 2
    4f78:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    4f7c:	82 95       	swap	r24
    4f7e:	86 95       	lsr	r24
    4f80:	87 70       	andi	r24, 0x07	; 7
    // wait for the transmission to end, signalled by the TRX END flag
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
    4f82:	03 c0       	rjmp	.+6      	; 0x4f8a <chb_tx+0x68>
    U8 state = chb_get_state();
    pcb_t *pcb = chb_get_pcb();

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    {
        return RADIO_WRONG_STATE;
    4f84:	84 e4       	ldi	r24, 0x44	; 68
    4f86:	01 c0       	rjmp	.+2      	; 0x4f8a <chb_tx+0x68>
    4f88:	84 e4       	ldi	r24, 0x44	; 68
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
}
    4f8a:	df 91       	pop	r29
    4f8c:	cf 91       	pop	r28
    4f8e:	1f 91       	pop	r17
    4f90:	0f 91       	pop	r16
    4f92:	ff 90       	pop	r15
    4f94:	ef 90       	pop	r14
    4f96:	df 90       	pop	r13
    4f98:	cf 90       	pop	r12
    4f9a:	08 95       	ret

00004f9c <chb_sleep>:
    Enable or disable the radio's sleep mode.
*/
/**************************************************************************/
void chb_sleep(U8 enb)
{
    if (enb)
    4f9c:	88 23       	and	r24, r24
    4f9e:	49 f0       	breq	.+18     	; 0x4fb2 <chb_sleep+0x16>
    {
        // first we need to go to TRX OFF state
        chb_set_state(CHB_TRX_OFF);
    4fa0:	88 e0       	ldi	r24, 0x08	; 8
    4fa2:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <chb_set_state>

        // set the SLPTR pin
        CHB_SLPTR_PORT |= _BV(CHB_SLPTR_PIN);
    4fa6:	e4 e6       	ldi	r30, 0x64	; 100
    4fa8:	f6 e0       	ldi	r31, 0x06	; 6
    4faa:	80 81       	ld	r24, Z
    4fac:	82 60       	ori	r24, 0x02	; 2
    4fae:	80 83       	st	Z, r24
    4fb0:	08 95       	ret
    }
    else
    {
        // make sure the SLPTR pin is low first
        CHB_SLPTR_PORT &= ~(_BV(CHB_SLPTR_PIN));
    4fb2:	e4 e6       	ldi	r30, 0x64	; 100
    4fb4:	f6 e0       	ldi	r31, 0x06	; 6
    4fb6:	80 81       	ld	r24, Z
    4fb8:	8d 7f       	andi	r24, 0xFD	; 253
    4fba:	80 83       	st	Z, r24
    4fbc:	80 e5       	ldi	r24, 0x50	; 80
    4fbe:	8a 95       	dec	r24
    4fc0:	f1 f7       	brne	.-4      	; 0x4fbe <chb_sleep+0x22>

        // we need to allow some time for the PLL to lock
        _delay_us(TIME_SLEEP_TO_TRX_OFF);

        // Turn the transceiver back on
        chb_set_state(RX_STATE);
    4fc2:	86 e1       	ldi	r24, 0x16	; 22
    4fc4:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <chb_set_state>
    4fc8:	08 95       	ret

00004fca <chb_drvr_init>:
/*!

*/
/**************************************************************************/
void chb_drvr_init()
{
    4fca:	0f 93       	push	r16
    4fcc:	1f 93       	push	r17
    4fce:	cf 93       	push	r28
    4fd0:	df 93       	push	r29
    4fd2:	cd b7       	in	r28, 0x3d	; 61
    4fd4:	de b7       	in	r29, 0x3e	; 62
    4fd6:	ea 97       	sbiw	r28, 0x3a	; 58
    4fd8:	cd bf       	out	0x3d, r28	; 61
    4fda:	de bf       	out	0x3e, r29	; 62
    // config SPI for at86rf230 access
    chb_spi_init();
    4fdc:	0e 94 22 2a 	call	0x5444	; 0x5444 <chb_spi_init>
	//SPIDInit(SPI_MODE0_bm);
	//RadioCS(FALSE);
    // configure IOs
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    4fe0:	e0 e6       	ldi	r30, 0x60	; 96
    4fe2:	f6 e0       	ldi	r31, 0x06	; 6
    4fe4:	80 81       	ld	r24, Z
    4fe6:	82 60       	ori	r24, 0x02	; 2
    4fe8:	80 83       	st	Z, r24
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));
    4fea:	80 81       	ld	r24, Z
    4fec:	81 60       	ori	r24, 0x01	; 1
    4fee:	80 83       	st	Z, r24
static void chb_radio_init()
{
    U8 ieee_addr[8];

    // reset chip
    chb_reset();
    4ff0:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <chb_reset>

    // disable intps while we config the radio
    chb_reg_write(IRQ_MASK, 0);
    4ff4:	8e e0       	ldi	r24, 0x0E	; 14
    4ff6:	60 e0       	ldi	r22, 0x00	; 0
    4ff8:	0e 94 f5 25 	call	0x4bea	; 0x4bea <chb_reg_write>

    // force transceiver off while we configure the intps
    chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1F);
    4ffc:	82 e0       	ldi	r24, 0x02	; 2
    4ffe:	63 e0       	ldi	r22, 0x03	; 3
    5000:	4f e1       	ldi	r20, 0x1F	; 31
    5002:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>

    // make sure the transceiver is in the off state before proceeding
    while ((chb_reg_read(TRX_STATUS) & 0x1f) != CHB_TRX_OFF);
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    500c:	8f 71       	andi	r24, 0x1F	; 31
    500e:	88 30       	cpi	r24, 0x08	; 8
    5010:	d1 f7       	brne	.-12     	; 0x5006 <chb_drvr_init+0x3c>
    //chb_ret_write(CSMA_SEED0, CHB_CSMA_SEED0);     
    //chb_reg_read_mod_write(PHY_CC_CCA, CHB_CCA_MODE << CHB_CCA_MODE_POS,0x3 << CHB_CCA_MODE_POS);
    //chb_reg_write(CCA_THRES, CHB_CCA_ED_THRES);

    // set frame version that we'll accept
    chb_reg_read_mod_write(CSMA_SEED_1, CHB_FRM_VER << CHB_FVN_POS, 3 << CHB_FVN_POS);
    5012:	8e e2       	ldi	r24, 0x2E	; 46
    5014:	60 e4       	ldi	r22, 0x40	; 64
    5016:	40 ec       	ldi	r20, 0xC0	; 192
    5018:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>

    // set interrupt mask
    // re-enable intps while we config the radio
    chb_reg_write(IRQ_MASK, (1<<IRQ_RX_START) | (1<<IRQ_TRX_END));
    501c:	8e e0       	ldi	r24, 0x0E	; 14
    501e:	6c e0       	ldi	r22, 0x0C	; 12
    5020:	0e 94 f5 25 	call	0x4bea	; 0x4bea <chb_reg_write>

    #if (CHB_PROMISCUOUS == 0)
    // set autocrc mode
    chb_reg_read_mod_write(TRX_CTRL_1, 1 << CHB_AUTO_CRC_POS, 1 << CHB_AUTO_CRC_POS);
    5024:	84 e0       	ldi	r24, 0x04	; 4
    5026:	60 e2       	ldi	r22, 0x20	; 32
    5028:	40 e2       	ldi	r20, 0x20	; 32
    502a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <chb_reg_read_mod_write>
    #endif

    // set up default phy modulation and data rate - OQPSK, 250 kbps, 915 MHz
    chb_set_mode(CHB_INIT_MODE);
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	0e 94 93 26 	call	0x4d26	; 0x4d26 <chb_set_mode>

    chb_set_channel(CHB_CHANNEL);
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <chb_set_channel>

    // set fsm state
    // put trx in rx auto ack mode
    chb_set_state(RX_STATE);
    503a:	86 e1       	ldi	r24, 0x16	; 22
    503c:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <chb_set_state>

    // set pan ID
    chb_reg_write16(PAN_ID_0, CHB_PAN_ID);
    5040:	82 e2       	ldi	r24, 0x22	; 34
    5042:	64 e3       	ldi	r22, 0x34	; 52
    5044:	72 e1       	ldi	r23, 0x12	; 18
    5046:	0e 94 11 26 	call	0x4c22	; 0x4c22 <chb_reg_write16>

    // set short addr
    // NOTE: Possibly get this from EEPROM
    chb_reg_write16(SHORT_ADDR_0, chb_get_short_addr());
    504a:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <chb_get_short_addr>
    504e:	bc 01       	movw	r22, r24
    5050:	80 e2       	ldi	r24, 0x20	; 32
    5052:	0e 94 11 26 	call	0x4c22	; 0x4c22 <chb_reg_write16>

    // set long addr
    // NOTE: Possibly get this from EEPROM
    chb_get_ieee_addr(ieee_addr);
    5056:	ce 01       	movw	r24, r28
    5058:	01 96       	adiw	r24, 0x01	; 1
    505a:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <chb_get_ieee_addr>
    chb_reg_write64(IEEE_ADDR_0, ieee_addr);
    505e:	84 e2       	ldi	r24, 0x24	; 36
    5060:	be 01       	movw	r22, r28
    5062:	6f 5f       	subi	r22, 0xFF	; 255
    5064:	7f 4f       	sbci	r23, 0xFF	; 255
    5066:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <chb_reg_write64>
    // set power to 0 dBm if CC1190 is being used. 
    chb_set_pwr(0x24);   
#endif

    // enable mcu intp pin
    CFG_CHB_INTP_RISE_EDGE();
    506a:	e2 e7       	ldi	r30, 0x72	; 114
    506c:	f6 e0       	ldi	r31, 0x06	; 6
    506e:	80 81       	ld	r24, Z
    5070:	81 60       	ori	r24, 0x01	; 1
    5072:	80 83       	st	Z, r24
    5074:	e9 e6       	ldi	r30, 0x69	; 105
    5076:	f6 e0       	ldi	r31, 0x06	; 6
    5078:	80 81       	ld	r24, Z
    507a:	82 60       	ori	r24, 0x02	; 2
    507c:	80 83       	st	Z, r24
    507e:	ea e6       	ldi	r30, 0x6A	; 106
    5080:	f6 e0       	ldi	r31, 0x06	; 6
    5082:	80 81       	ld	r24, Z
    5084:	84 60       	ori	r24, 0x04	; 4
    5086:	80 83       	st	Z, r24
	PMIC.CTRL = 0x07;	//enable interrupts on MCU
    5088:	87 e0       	ldi	r24, 0x07	; 7
    508a:	e0 ea       	ldi	r30, 0xA0	; 160
    508c:	f0 e0       	ldi	r31, 0x00	; 0
    508e:	82 83       	std	Z+2, r24	; 0x02

    if (chb_get_state() != RX_STATE)
    5090:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <chb_get_state>
    5094:	86 31       	cpi	r24, 0x16	; 22
    5096:	91 f0       	breq	.+36     	; 0x50bc <chb_drvr_init+0xf2>
    {
        // ERROR occurred initializing the radio. Print out error message.
        char buf[50];

        // grab the error message from flash & print it out
        strcpy_P(buf, chb_err_init);
    5098:	8e 01       	movw	r16, r28
    509a:	07 5f       	subi	r16, 0xF7	; 247
    509c:	1f 4f       	sbci	r17, 0xFF	; 255
    509e:	c8 01       	movw	r24, r16
    50a0:	68 ee       	ldi	r22, 0xE8	; 232
    50a2:	71 e0       	ldi	r23, 0x01	; 1
    50a4:	0e 94 cf 34 	call	0x699e	; 0x699e <strcpy_P>
        printf(buf);
    50a8:	0f 92       	push	r0
    50aa:	0f 92       	push	r0
    50ac:	ed b7       	in	r30, 0x3d	; 61
    50ae:	fe b7       	in	r31, 0x3e	; 62
    50b0:	01 83       	std	Z+1, r16	; 0x01
    50b2:	12 83       	std	Z+2, r17	; 0x02
    50b4:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <printf>
    50b8:	0f 90       	pop	r0
    50ba:	0f 90       	pop	r0
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));

    // config radio
    chb_radio_init();
}
    50bc:	ea 96       	adiw	r28, 0x3a	; 58
    50be:	cd bf       	out	0x3d, r28	; 61
    50c0:	de bf       	out	0x3e, r29	; 62
    50c2:	df 91       	pop	r29
    50c4:	cf 91       	pop	r28
    50c6:	1f 91       	pop	r17
    50c8:	0f 91       	pop	r16
    50ca:	08 95       	ret

000050cc <__vector_64>:
/*!

*/
/**************************************************************************/
ISR(CHB_RADIO_IRQ)
{
    50cc:	1f 92       	push	r1
    50ce:	0f 92       	push	r0
    50d0:	0f b6       	in	r0, 0x3f	; 63
    50d2:	0f 92       	push	r0
    50d4:	0b b6       	in	r0, 0x3b	; 59
    50d6:	0f 92       	push	r0
    50d8:	11 24       	eor	r1, r1
    50da:	4f 92       	push	r4
    50dc:	5f 92       	push	r5
    50de:	6f 92       	push	r6
    50e0:	7f 92       	push	r7
    50e2:	8f 92       	push	r8
    50e4:	9f 92       	push	r9
    50e6:	af 92       	push	r10
    50e8:	bf 92       	push	r11
    50ea:	df 92       	push	r13
    50ec:	ef 92       	push	r14
    50ee:	ff 92       	push	r15
    50f0:	0f 93       	push	r16
    50f2:	1f 93       	push	r17
    50f4:	2f 93       	push	r18
    50f6:	3f 93       	push	r19
    50f8:	4f 93       	push	r20
    50fa:	5f 93       	push	r21
    50fc:	6f 93       	push	r22
    50fe:	7f 93       	push	r23
    5100:	8f 93       	push	r24
    5102:	9f 93       	push	r25
    5104:	af 93       	push	r26
    5106:	bf 93       	push	r27
    5108:	ef 93       	push	r30
    510a:	ff 93       	push	r31
    510c:	cf 93       	push	r28
    510e:	df 93       	push	r29
    5110:	cd b7       	in	r28, 0x3d	; 61
    5112:	de b7       	in	r29, 0x3e	; 62
    5114:	e2 97       	sbiw	r28, 0x32	; 50
    5116:	cd bf       	out	0x3d, r28	; 61
    5118:	de bf       	out	0x3e, r29	; 62
    U8 dummy, state, intp_src = 0;
    pcb_t *pcb = chb_get_pcb();
    511a:	0e 94 63 24 	call	0x48c6	; 0x48c6 <chb_get_pcb>
    511e:	7c 01       	movw	r14, r24

    CHB_ENTER_CRIT();
    5120:	8f b7       	in	r24, 0x3f	; 63
    5122:	80 93 3e 40 	sts	0x403E, r24
    5126:	f8 94       	cli

    /*Read Interrupt source.*/
    RadioCS(TRUE);   
    5128:	81 e0       	ldi	r24, 0x01	; 1
    512a:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>

    /*Send Register address and read register content.*/
    dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    512e:	8f e8       	ldi	r24, 0x8F	; 143
    5130:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
    intp_src = SPID_write(0);
    5134:	80 e0       	ldi	r24, 0x00	; 0
    5136:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
    513a:	18 2f       	mov	r17, r24

    RadioCS(FALSE);
    513c:	80 e0       	ldi	r24, 0x00	; 0
    513e:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>

    while (intp_src)
    5142:	11 23       	and	r17, r17
    5144:	09 f4       	brne	.+2      	; 0x5148 <__vector_64+0x7c>
    5146:	b7 c0       	rjmp	.+366    	; 0x52b6 <__vector_64+0x1ea>
                {
                    // get the data
                    chb_frame_read();
                    pcb->rcvd_xfers++;
                    pcb->data_rcv = true;
					chb_read(FRAMReadBuffer);				//read the data into the FRAM buffer right away --vlad
    5148:	0f 2e       	mov	r0, r31
    514a:	f7 ec       	ldi	r31, 0xC7	; 199
    514c:	af 2e       	mov	r10, r31
    514e:	f3 e2       	ldi	r31, 0x23	; 35
    5150:	bf 2e       	mov	r11, r31
    5152:	f0 2d       	mov	r31, r0

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
    5154:	88 24       	eor	r8, r8
    5156:	99 24       	eor	r9, r9
    5158:	68 94       	set
    515a:	87 f8       	bld	r8, 7

            // Increment the overflow stat
            pcb->overflow++;

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
    515c:	0f 2e       	mov	r0, r31
    515e:	f8 e0       	ldi	r31, 0x08	; 8
    5160:	6f 2e       	mov	r6, r31
    5162:	f2 e0       	ldi	r31, 0x02	; 2
    5164:	7f 2e       	mov	r7, r31
    5166:	f0 2d       	mov	r31, r0
    RadioCS(FALSE);

    while (intp_src)
    {
        /*Handle the incomming interrupt. Prioritized.*/
        if ((intp_src & CHB_IRQ_RX_START_MASK))
    5168:	12 ff       	sbrs	r17, 2
    516a:	02 c0       	rjmp	.+4      	; 0x5170 <__vector_64+0xa4>
        {
            intp_src &= ~CHB_IRQ_RX_START_MASK;
    516c:	1b 7f       	andi	r17, 0xFB	; 251
    516e:	a0 c0       	rjmp	.+320    	; 0x52b0 <__vector_64+0x1e4>
        }
        else if (intp_src & CHB_IRQ_TRX_END_MASK)
    5170:	13 ff       	sbrs	r17, 3
    5172:	85 c0       	rjmp	.+266    	; 0x527e <__vector_64+0x1b2>
        {
            state = chb_get_state();
    5174:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <chb_get_state>

            if ((state == CHB_RX_ON) || (state == CHB_RX_AACK_ON) || (state == CHB_BUSY_RX_AACK))
    5178:	86 30       	cpi	r24, 0x06	; 6
    517a:	29 f0       	breq	.+10     	; 0x5186 <__vector_64+0xba>
    517c:	86 31       	cpi	r24, 0x16	; 22
    517e:	19 f0       	breq	.+6      	; 0x5186 <__vector_64+0xba>
    5180:	81 31       	cpi	r24, 0x11	; 17
    5182:	09 f0       	breq	.+2      	; 0x5186 <__vector_64+0xba>
    5184:	72 c0       	rjmp	.+228    	; 0x526a <__vector_64+0x19e>
            {
                // get the ed measurement
                pcb->ed = chb_reg_read(PHY_ED_LEVEL);
    5186:	87 e0       	ldi	r24, 0x07	; 7
    5188:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    518c:	f7 01       	movw	r30, r14
    518e:	82 8b       	std	Z+18, r24	; 0x12

                // get the crc
                pcb->crc = (chb_reg_read(PHY_RSSI) & (1<<7)) ? 1 : 0;
    5190:	86 e0       	ldi	r24, 0x06	; 6
    5192:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
    5196:	88 1f       	adc	r24, r24
    5198:	88 27       	eor	r24, r24
    519a:	88 1f       	adc	r24, r24
    519c:	f7 01       	movw	r30, r14
    519e:	83 8b       	std	Z+19, r24	; 0x13

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc)
    51a0:	88 23       	and	r24, r24
    51a2:	09 f4       	brne	.+2      	; 0x51a6 <__vector_64+0xda>
    51a4:	65 c0       	rjmp	.+202    	; 0x5270 <__vector_64+0x1a4>
/**************************************************************************/
static void chb_frame_read()
{
    U8 i, len, data;

    CHB_ENTER_CRIT();
    51a6:	8f b7       	in	r24, 0x3f	; 63
    51a8:	80 93 3e 40 	sts	0x403E, r24
    51ac:	f8 94       	cli
    RadioCS(TRUE);
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>

    /*Send frame read command and read the length.*/
    SPID_write(CHB_SPI_CMD_FR);
    51b4:	80 e2       	ldi	r24, 0x20	; 32
    51b6:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
    len = SPID_write(0);
    51ba:	80 e0       	ldi	r24, 0x00	; 0
    51bc:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
    51c0:	d8 2e       	mov	r13, r24

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    51c2:	83 50       	subi	r24, 0x03	; 3
    51c4:	8d 37       	cpi	r24, 0x7D	; 125
    51c6:	f0 f5       	brcc	.+124    	; 0x5244 <__vector_64+0x178>
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
    51c8:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <chb_buf_get_len>
    51cc:	2d 2d       	mov	r18, r13
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	a4 01       	movw	r20, r8
    51d2:	48 1b       	sub	r20, r24
    51d4:	51 09       	sbc	r21, r1
    51d6:	24 17       	cp	r18, r20
    51d8:	35 07       	cpc	r19, r21
    51da:	7c f4       	brge	.+30     	; 0x51fa <__vector_64+0x12e>
        {
            chb_buf_write(len);
    51dc:	8d 2d       	mov	r24, r13
    51de:	0e 94 7d 25 	call	0x4afa	; 0x4afa <chb_buf_write>
            
            for (i=0; i<len; i++)
    51e2:	dd 20       	and	r13, r13
    51e4:	79 f1       	breq	.+94     	; 0x5244 <__vector_64+0x178>
    51e6:	00 e0       	ldi	r16, 0x00	; 0
            {
                data = SPID_write(0);
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
                chb_buf_write(data);
    51ee:	0e 94 7d 25 	call	0x4afa	; 0x4afa <chb_buf_write>
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
        {
            chb_buf_write(len);
            
            for (i=0; i<len; i++)
    51f2:	0f 5f       	subi	r16, 0xFF	; 255
    51f4:	0d 15       	cp	r16, r13
    51f6:	c1 f7       	brne	.-16     	; 0x51e8 <__vector_64+0x11c>
    51f8:	25 c0       	rjmp	.+74     	; 0x5244 <__vector_64+0x178>
            }
        }
        else
        {
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
    51fa:	0e 94 63 24 	call	0x48c6	; 0x48c6 <chb_get_pcb>
    51fe:	2c 01       	movw	r4, r24
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
    5200:	dd 20       	and	r13, r13
    5202:	39 f0       	breq	.+14     	; 0x5212 <__vector_64+0x146>
    5204:	00 e0       	ldi	r16, 0x00	; 0
            {
                data = SPID_write(0);
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPID_write>
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
    520c:	0f 5f       	subi	r16, 0xFF	; 255
    520e:	0d 15       	cp	r16, r13
    5210:	d1 f7       	brne	.-12     	; 0x5206 <__vector_64+0x13a>
            {
                data = SPID_write(0);
            }

            // Increment the overflow stat
            pcb->overflow++;
    5212:	f2 01       	movw	r30, r4
    5214:	85 85       	ldd	r24, Z+13	; 0x0d
    5216:	96 85       	ldd	r25, Z+14	; 0x0e
    5218:	01 96       	adiw	r24, 0x01	; 1
    521a:	85 87       	std	Z+13, r24	; 0x0d
    521c:	96 87       	std	Z+14, r25	; 0x0e

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
    521e:	ce 01       	movw	r24, r28
    5220:	01 96       	adiw	r24, 0x01	; 1
    5222:	b3 01       	movw	r22, r6
    5224:	0e 94 cf 34 	call	0x699e	; 0x699e <strcpy_P>
            printf(buf);
    5228:	0f 92       	push	r0
    522a:	0f 92       	push	r0
    522c:	41 e0       	ldi	r20, 0x01	; 1
    522e:	50 e0       	ldi	r21, 0x00	; 0
    5230:	4c 0f       	add	r20, r28
    5232:	5d 1f       	adc	r21, r29
    5234:	ed b7       	in	r30, 0x3d	; 61
    5236:	fe b7       	in	r31, 0x3e	; 62
    5238:	41 83       	std	Z+1, r20	; 0x01
    523a:	52 83       	std	Z+2, r21	; 0x02
    523c:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <printf>
    5240:	0f 90       	pop	r0
    5242:	0f 90       	pop	r0
        }
    }

    RadioCS(FALSE);
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	0e 94 1f 1b 	call	0x363e	; 0x363e <RadioCS>
    CHB_LEAVE_CRIT();
    524a:	80 91 3e 40 	lds	r24, 0x403E
    524e:	8f bf       	out	0x3f, r24	; 63
    5250:	78 94       	sei
                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc)
                {
                    // get the data
                    chb_frame_read();
                    pcb->rcvd_xfers++;
    5252:	f7 01       	movw	r30, r14
    5254:	85 81       	ldd	r24, Z+5	; 0x05
    5256:	96 81       	ldd	r25, Z+6	; 0x06
    5258:	01 96       	adiw	r24, 0x01	; 1
    525a:	85 83       	std	Z+5, r24	; 0x05
    525c:	96 83       	std	Z+6, r25	; 0x06
                    pcb->data_rcv = true;
    525e:	81 e0       	ldi	r24, 0x01	; 1
    5260:	83 83       	std	Z+3, r24	; 0x03
					chb_read(FRAMReadBuffer);				//read the data into the FRAM buffer right away --vlad
    5262:	c5 01       	movw	r24, r10
    5264:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <chb_read>
    5268:	03 c0       	rjmp	.+6      	; 0x5270 <__vector_64+0x1a4>
                }
            }
            else
            {
                pcb->tx_end = true;
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	f7 01       	movw	r30, r14
    526e:	84 83       	std	Z+4, r24	; 0x04
            }
            intp_src &= ~CHB_IRQ_TRX_END_MASK;
    5270:	17 7f       	andi	r17, 0xF7	; 247
            while (chb_set_state(RX_STATE) != RADIO_SUCCESS);
    5272:	86 e1       	ldi	r24, 0x16	; 22
    5274:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <chb_set_state>
    5278:	80 34       	cpi	r24, 0x40	; 64
    527a:	d9 f7       	brne	.-10     	; 0x5272 <__vector_64+0x1a6>
    527c:	19 c0       	rjmp	.+50     	; 0x52b0 <__vector_64+0x1e4>
        }
        else if (intp_src & CHB_IRQ_TRX_UR_MASK)
    527e:	16 ff       	sbrs	r17, 6
    5280:	08 c0       	rjmp	.+16     	; 0x5292 <__vector_64+0x1c6>
        {
            intp_src &= ~CHB_IRQ_TRX_UR_MASK;
    5282:	1f 7b       	andi	r17, 0xBF	; 191
            pcb->underrun++;
    5284:	f7 01       	movw	r30, r14
    5286:	87 85       	ldd	r24, Z+15	; 0x0f
    5288:	90 89       	ldd	r25, Z+16	; 0x10
    528a:	01 96       	adiw	r24, 0x01	; 1
    528c:	87 87       	std	Z+15, r24	; 0x0f
    528e:	90 8b       	std	Z+16, r25	; 0x10
    5290:	0f c0       	rjmp	.+30     	; 0x52b0 <__vector_64+0x1e4>
        }
        else if (intp_src & CHB_IRQ_PLL_UNLOCK_MASK)
    5292:	11 ff       	sbrs	r17, 1
    5294:	02 c0       	rjmp	.+4      	; 0x529a <__vector_64+0x1ce>
        {
            intp_src &= ~CHB_IRQ_PLL_UNLOCK_MASK;
    5296:	1d 7f       	andi	r17, 0xFD	; 253
    5298:	0b c0       	rjmp	.+22     	; 0x52b0 <__vector_64+0x1e4>
        }
        else if (intp_src & CHB_IRQ_PLL_LOCK_MASK)
    529a:	10 ff       	sbrs	r17, 0
    529c:	02 c0       	rjmp	.+4      	; 0x52a2 <__vector_64+0x1d6>
        {
            intp_src &= ~CHB_IRQ_PLL_LOCK_MASK;
    529e:	1e 7f       	andi	r17, 0xFE	; 254
    52a0:	07 c0       	rjmp	.+14     	; 0x52b0 <__vector_64+0x1e4>
        }
        else if (intp_src & CHB_IRQ_BAT_LOW_MASK)
    52a2:	11 23       	and	r17, r17
    52a4:	2c f4       	brge	.+10     	; 0x52b0 <__vector_64+0x1e4>
        {
            intp_src &= ~CHB_IRQ_BAT_LOW_MASK;
    52a6:	1f 77       	andi	r17, 0x7F	; 127
            pcb->battlow++;
    52a8:	f7 01       	movw	r30, r14
    52aa:	81 89       	ldd	r24, Z+17	; 0x11
    52ac:	8f 5f       	subi	r24, 0xFF	; 255
    52ae:	81 8b       	std	Z+17, r24	; 0x11
    dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    intp_src = SPID_write(0);

    RadioCS(FALSE);

    while (intp_src)
    52b0:	11 23       	and	r17, r17
    52b2:	09 f0       	breq	.+2      	; 0x52b6 <__vector_64+0x1ea>
    52b4:	59 cf       	rjmp	.-334    	; 0x5168 <__vector_64+0x9c>
        }
        else
        {
        }
    }
    CHB_LEAVE_CRIT();
    52b6:	80 91 3e 40 	lds	r24, 0x403E
    52ba:	8f bf       	out	0x3f, r24	; 63
    52bc:	78 94       	sei
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
    52be:	8f e0       	ldi	r24, 0x0F	; 15
    52c0:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <chb_reg_read>
}
    52c4:	e2 96       	adiw	r28, 0x32	; 50
    52c6:	cd bf       	out	0x3d, r28	; 61
    52c8:	de bf       	out	0x3e, r29	; 62
    52ca:	df 91       	pop	r29
    52cc:	cf 91       	pop	r28
    52ce:	ff 91       	pop	r31
    52d0:	ef 91       	pop	r30
    52d2:	bf 91       	pop	r27
    52d4:	af 91       	pop	r26
    52d6:	9f 91       	pop	r25
    52d8:	8f 91       	pop	r24
    52da:	7f 91       	pop	r23
    52dc:	6f 91       	pop	r22
    52de:	5f 91       	pop	r21
    52e0:	4f 91       	pop	r20
    52e2:	3f 91       	pop	r19
    52e4:	2f 91       	pop	r18
    52e6:	1f 91       	pop	r17
    52e8:	0f 91       	pop	r16
    52ea:	ff 90       	pop	r15
    52ec:	ef 90       	pop	r14
    52ee:	df 90       	pop	r13
    52f0:	bf 90       	pop	r11
    52f2:	af 90       	pop	r10
    52f4:	9f 90       	pop	r9
    52f6:	8f 90       	pop	r8
    52f8:	7f 90       	pop	r7
    52fa:	6f 90       	pop	r6
    52fc:	5f 90       	pop	r5
    52fe:	4f 90       	pop	r4
    5300:	0f 90       	pop	r0
    5302:	0b be       	out	0x3b, r0	; 59
    5304:	0f 90       	pop	r0
    5306:	0f be       	out	0x3f, r0	; 63
    5308:	0f 90       	pop	r0
    530a:	1f 90       	pop	r1
    530c:	18 95       	reti

0000530e <chb_eeprom_write>:
/*!

*/
/**************************************************************************/
void chb_eeprom_write(U16 addr, U8 *buf, U16 size)
{
    530e:	0f 93       	push	r16
    5310:	1f 93       	push	r17
    5312:	cf 93       	push	r28
    5314:	df 93       	push	r29
    5316:	8c 01       	movw	r16, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
    5318:	e0 ec       	ldi	r30, 0xC0	; 192
    531a:	f1 e0       	ldi	r31, 0x01	; 1
    531c:	84 85       	ldd	r24, Z+12	; 0x0c
    531e:	87 7f       	andi	r24, 0xF7	; 247
    5320:	84 87       	std	Z+12, r24	; 0x0c

    // Write bytes
    for(U8 i=0; i<size; i++)
    5322:	41 15       	cp	r20, r1
    5324:	51 05       	cpc	r21, r1
    5326:	09 f4       	brne	.+2      	; 0x532a <chb_eeprom_write+0x1c>
    5328:	50 c0       	rjmp	.+160    	; 0x53ca <chb_eeprom_write+0xbc>
    532a:	e0 e0       	ldi	r30, 0x00	; 0
    532c:	f0 e0       	ldi	r31, 0x00	; 0
    532e:	20 e0       	ldi	r18, 0x00	; 0
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5330:	a0 ec       	ldi	r26, 0xC0	; 192
    5332:	b1 e0       	ldi	r27, 0x01	; 1

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5334:	d6 e3       	ldi	r29, 0x36	; 54
        NVM_EXEC();
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5336:	c3 e3       	ldi	r28, 0x33	; 51

    // load the data to write
    NVM.DATA0 = value;

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5338:	35 e3       	ldi	r19, 0x35	; 53
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
    {
        chb_eep_write_byte(addr+i, buf[i]);
    533a:	cf 01       	movw	r24, r30
    533c:	80 0f       	add	r24, r16
    533e:	91 1f       	adc	r25, r17
    5340:	e6 0f       	add	r30, r22
    5342:	f7 1f       	adc	r31, r23
    5344:	f0 81       	ld	r31, Z
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5346:	1f 96       	adiw	r26, 0x0f	; 15
    5348:	ec 91       	ld	r30, X
    534a:	1f 97       	sbiw	r26, 0x0f	; 15
    534c:	ee 23       	and	r30, r30
    534e:	dc f3       	brlt	.-10     	; 0x5346 <chb_eeprom_write+0x38>

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5350:	1f 96       	adiw	r26, 0x0f	; 15
    5352:	ec 91       	ld	r30, X
    5354:	1f 97       	sbiw	r26, 0x0f	; 15
    5356:	e1 ff       	sbrs	r30, 1
    5358:	11 c0       	rjmp	.+34     	; 0x537c <chb_eeprom_write+0x6e>
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    535a:	1a 96       	adiw	r26, 0x0a	; 10
    535c:	dc 93       	st	X, r29
    535e:	1a 97       	sbiw	r26, 0x0a	; 10
        NVM_EXEC();
    5360:	ef 93       	push	r30
    5362:	ff 93       	push	r31
    5364:	0f 93       	push	r16
    5366:	2f 93       	push	r18
    5368:	eb ec       	ldi	r30, 0xCB	; 203
    536a:	f1 e0       	ldi	r31, 0x01	; 1
    536c:	08 ed       	ldi	r16, 0xD8	; 216
    536e:	21 e0       	ldi	r18, 0x01	; 1
    5370:	04 bf       	out	0x34, r16	; 52
    5372:	20 83       	st	Z, r18
    5374:	2f 91       	pop	r18
    5376:	0f 91       	pop	r16
    5378:	ff 91       	pop	r31
    537a:	ef 91       	pop	r30
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    537c:	1a 96       	adiw	r26, 0x0a	; 10
    537e:	cc 93       	st	X, r28
    5380:	1a 97       	sbiw	r26, 0x0a	; 10

    // load the address
    NVM.ADDR0 = addr & 0xFF;
    5382:	8c 93       	st	X, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    5384:	89 2f       	mov	r24, r25
    5386:	8f 71       	andi	r24, 0x1F	; 31
    5388:	11 96       	adiw	r26, 0x01	; 1
    538a:	8c 93       	st	X, r24
    538c:	11 97       	sbiw	r26, 0x01	; 1
    NVM.ADDR2 = 0x00;
    538e:	12 96       	adiw	r26, 0x02	; 2
    5390:	1c 92       	st	X, r1
    5392:	12 97       	sbiw	r26, 0x02	; 2

    // load the data to write
    NVM.DATA0 = value;
    5394:	14 96       	adiw	r26, 0x04	; 4
    5396:	fc 93       	st	X, r31
    5398:	14 97       	sbiw	r26, 0x04	; 4

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    539a:	1a 96       	adiw	r26, 0x0a	; 10
    539c:	3c 93       	st	X, r19
    539e:	1a 97       	sbiw	r26, 0x0a	; 10
    NVM_EXEC();
    53a0:	ef 93       	push	r30
    53a2:	ff 93       	push	r31
    53a4:	0f 93       	push	r16
    53a6:	2f 93       	push	r18
    53a8:	eb ec       	ldi	r30, 0xCB	; 203
    53aa:	f1 e0       	ldi	r31, 0x01	; 1
    53ac:	08 ed       	ldi	r16, 0xD8	; 216
    53ae:	21 e0       	ldi	r18, 0x01	; 1
    53b0:	04 bf       	out	0x34, r16	; 52
    53b2:	20 83       	st	Z, r18
    53b4:	2f 91       	pop	r18
    53b6:	0f 91       	pop	r16
    53b8:	ff 91       	pop	r31
    53ba:	ef 91       	pop	r30
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
    53bc:	2f 5f       	subi	r18, 0xFF	; 255
    53be:	e2 2f       	mov	r30, r18
    53c0:	f0 e0       	ldi	r31, 0x00	; 0
    53c2:	e4 17       	cp	r30, r20
    53c4:	f5 07       	cpc	r31, r21
    53c6:	08 f4       	brcc	.+2      	; 0x53ca <chb_eeprom_write+0xbc>
    53c8:	b8 cf       	rjmp	.-144    	; 0x533a <chb_eeprom_write+0x2c>
    {
        chb_eep_write_byte(addr+i, buf[i]);
    }
}
    53ca:	df 91       	pop	r29
    53cc:	cf 91       	pop	r28
    53ce:	1f 91       	pop	r17
    53d0:	0f 91       	pop	r16
    53d2:	08 95       	ret

000053d4 <chb_eeprom_read>:
/*!

*/
/**************************************************************************/
void chb_eeprom_read(U16 addr, U8 *buf, U16 size)
{
    53d4:	1f 93       	push	r17
    53d6:	cf 93       	push	r28
    53d8:	df 93       	push	r29
    53da:	9c 01       	movw	r18, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
    53dc:	e0 ec       	ldi	r30, 0xC0	; 192
    53de:	f1 e0       	ldi	r31, 0x01	; 1
    53e0:	84 85       	ldd	r24, Z+12	; 0x0c
    53e2:	87 7f       	andi	r24, 0xF7	; 247
    53e4:	84 87       	std	Z+12, r24	; 0x0c

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    53e6:	41 15       	cp	r20, r1
    53e8:	51 05       	cpc	r21, r1
    53ea:	41 f1       	breq	.+80     	; 0x543c <chb_eeprom_read+0x68>
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	c0 e0       	ldi	r28, 0x00	; 0
    NVM.ADDR0 = addr & 0xFF;
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    NVM.ADDR2 = 0x00;

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    53f2:	d6 e0       	ldi	r29, 0x06	; 6
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
    53f4:	db 01       	movw	r26, r22
    53f6:	a8 0f       	add	r26, r24
    53f8:	b9 1f       	adc	r27, r25
    53fa:	82 0f       	add	r24, r18
    53fc:	93 1f       	adc	r25, r19
*/
/**************************************************************************/
static U8 chb_eep_read_byte(U16 addr)
{
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    53fe:	17 85       	ldd	r17, Z+15	; 0x0f
    5400:	11 23       	and	r17, r17
    5402:	ec f3       	brlt	.-6      	; 0x53fe <chb_eeprom_read+0x2a>

    /* Set address to read from. */
    NVM.ADDR0 = addr & 0xFF;
    5404:	80 83       	st	Z, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    5406:	89 2f       	mov	r24, r25
    5408:	8f 71       	andi	r24, 0x1F	; 31
    540a:	81 83       	std	Z+1, r24	; 0x01
    NVM.ADDR2 = 0x00;
    540c:	12 82       	std	Z+2, r1	; 0x02

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    540e:	d2 87       	std	Z+10, r29	; 0x0a
    NVM_EXEC();
    5410:	ef 93       	push	r30
    5412:	ff 93       	push	r31
    5414:	0f 93       	push	r16
    5416:	2f 93       	push	r18
    5418:	eb ec       	ldi	r30, 0xCB	; 203
    541a:	f1 e0       	ldi	r31, 0x01	; 1
    541c:	08 ed       	ldi	r16, 0xD8	; 216
    541e:	21 e0       	ldi	r18, 0x01	; 1
    5420:	04 bf       	out	0x34, r16	; 52
    5422:	20 83       	st	Z, r18
    5424:	2f 91       	pop	r18
    5426:	0f 91       	pop	r16
    5428:	ff 91       	pop	r31
    542a:	ef 91       	pop	r30

    return NVM.DATA0;
    542c:	84 81       	ldd	r24, Z+4	; 0x04
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
    542e:	8c 93       	st	X, r24
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    5430:	cf 5f       	subi	r28, 0xFF	; 255
    5432:	8c 2f       	mov	r24, r28
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	84 17       	cp	r24, r20
    5438:	95 07       	cpc	r25, r21
    543a:	e0 f2       	brcs	.-72     	; 0x53f4 <chb_eeprom_read+0x20>
    {
        buf[i] = chb_eep_read_byte(addr+i);
    }
}
    543c:	df 91       	pop	r29
    543e:	cf 91       	pop	r28
    5440:	1f 91       	pop	r17
    5442:	08 95       	ret

00005444 <chb_spi_init>:

void chb_spi_init()
{
    // configure the SPI slave_select, spi clk, and mosi pins as output. the miso pin
    // is cleared since its an input.
    CHB_SPI_DDIR |= (1<<CHB_SSPIN) | (1<<CHB_MOSI) | (1<<CHB_SCK);
    5444:	e0 e6       	ldi	r30, 0x60	; 96
    5446:	f6 e0       	ldi	r31, 0x06	; 6
    5448:	80 81       	ld	r24, Z
    544a:	80 6b       	ori	r24, 0xB0	; 176
    544c:	80 83       	st	Z, r24
    CHB_SPI_PORT |= (1<<CHB_SSPIN);
    544e:	e4 e6       	ldi	r30, 0x64	; 100
    5450:	f6 e0       	ldi	r31, 0x06	; 6
    5452:	80 81       	ld	r24, Z
    5454:	80 61       	ori	r24, 0x10	; 16
    5456:	80 83       	st	Z, r24

    // set to master mode
    // set the clock freq to fck/16
    CHB_CTRL |= (1<<SPI_MASTER_bp) | (1<<SPI_ENABLE_bp) | (1<<SPI_PRESCALER_gp);
    5458:	a0 ec       	ldi	r26, 0xC0	; 192
    545a:	b9 e0       	ldi	r27, 0x09	; 9
    545c:	8c 91       	ld	r24, X
    545e:	81 65       	ori	r24, 0x51	; 81
    5460:	8c 93       	st	X, r24

    // set the slave select to idle
    CHB_SPI_DISABLE();
    5462:	80 81       	ld	r24, Z
    5464:	80 61       	ori	r24, 0x10	; 16
    5466:	80 83       	st	Z, r24
}
    5468:	08 95       	ret

0000546a <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    546a:	0f 93       	push	r16
    546c:	cf 93       	push	r28
    546e:	df 93       	push	r29
    5470:	0f 92       	push	r0
    5472:	cd b7       	in	r28, 0x3d	; 61
    5474:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    5476:	2f b7       	in	r18, 0x3f	; 63
    5478:	29 83       	std	Y+1, r18	; 0x01
    547a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    547c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    547e:	fc 01       	movw	r30, r24
    5480:	08 ed       	ldi	r16, 0xD8	; 216
    5482:	04 bf       	out	0x34, r16	; 52
    5484:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    5486:	89 81       	ldd	r24, Y+1	; 0x01
    5488:	8f bf       	out	0x3f, r24	; 63
#endif
}
    548a:	0f 90       	pop	r0
    548c:	df 91       	pop	r29
    548e:	cf 91       	pop	r28
    5490:	0f 91       	pop	r16
    5492:	08 95       	ret

00005494 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    5494:	66 23       	and	r22, r22
    5496:	11 f0       	breq	.+4      	; 0x549c <CLKSYS_XOSC_Config+0x8>
    5498:	90 e2       	ldi	r25, 0x20	; 32
    549a:	01 c0       	rjmp	.+2      	; 0x549e <CLKSYS_XOSC_Config+0xa>
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	84 2b       	or	r24, r20
    54a0:	89 2b       	or	r24, r25
    54a2:	e0 e5       	ldi	r30, 0x50	; 80
    54a4:	f0 e0       	ldi	r31, 0x00	; 0
    54a6:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    54a8:	08 95       	ret

000054aa <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
    54aa:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    54ac:	86 2b       	or	r24, r22
    54ae:	e0 e5       	ldi	r30, 0x50	; 80
    54b0:	f0 e0       	ldi	r31, 0x00	; 0
    54b2:	85 83       	std	Z+5, r24	; 0x05
}
    54b4:	08 95       	ret

000054b6 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    54b6:	e0 e5       	ldi	r30, 0x50	; 80
    54b8:	f0 e0       	ldi	r31, 0x00	; 0
    54ba:	90 81       	ld	r25, Z
    54bc:	28 2f       	mov	r18, r24
    54be:	20 95       	com	r18
    54c0:	92 23       	and	r25, r18
    54c2:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    54c4:	90 81       	ld	r25, Z
	return clkEnabled;
}
    54c6:	89 23       	and	r24, r25
    54c8:	08 95       	ret

000054ca <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    54ca:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
    54cc:	81 e4       	ldi	r24, 0x41	; 65
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	0e 94 35 2a 	call	0x546a	; 0x546a <CCPWrite>
}
    54d4:	08 95       	ret

000054d6 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    54d6:	1f 93       	push	r17
    54d8:	cf 93       	push	r28
    54da:	df 93       	push	r29
    54dc:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    54de:	c0 e4       	ldi	r28, 0x40	; 64
    54e0:	d0 e0       	ldi	r29, 0x00	; 0
    54e2:	68 81       	ld	r22, Y
    54e4:	68 7f       	andi	r22, 0xF8	; 248
    54e6:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    54e8:	80 e4       	ldi	r24, 0x40	; 64
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	0e 94 35 2a 	call	0x546a	; 0x546a <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    54f0:	88 81       	ld	r24, Y
	return clkCtrl;
}
    54f2:	81 23       	and	r24, r17
    54f4:	df 91       	pop	r29
    54f6:	cf 91       	pop	r28
    54f8:	1f 91       	pop	r17
    54fa:	08 95       	ret

000054fc <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    54fc:	e0 e4       	ldi	r30, 0x40	; 64
    54fe:	f0 e0       	ldi	r31, 0x00	; 0
    5500:	93 81       	ldd	r25, Z+3	; 0x03
    5502:	91 7f       	andi	r25, 0xF1	; 241
    5504:	91 60       	ori	r25, 0x01	; 1
    5506:	89 2b       	or	r24, r25
    5508:	83 83       	std	Z+3, r24	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    550a:	08 95       	ret

0000550c <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    550c:	e0 e5       	ldi	r30, 0x50	; 80
    550e:	f0 e0       	ldi	r31, 0x00	; 0
    5510:	26 81       	ldd	r18, Z+6	; 0x06
    5512:	98 2f       	mov	r25, r24
    5514:	38 2f       	mov	r19, r24
    5516:	30 95       	com	r19
    5518:	23 23       	and	r18, r19
    551a:	66 23       	and	r22, r22
    551c:	09 f4       	brne	.+2      	; 0x5520 <CLKSYS_AutoCalibration_Enable+0x14>
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	92 2b       	or	r25, r18
    5522:	e0 e5       	ldi	r30, 0x50	; 80
    5524:	f0 e0       	ldi	r31, 0x00	; 0
    5526:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    5528:	81 30       	cpi	r24, 0x01	; 1
    552a:	31 f4       	brne	.+12     	; 0x5538 <CLKSYS_AutoCalibration_Enable+0x2c>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    552c:	e8 e6       	ldi	r30, 0x68	; 104
    552e:	f0 e0       	ldi	r31, 0x00	; 0
    5530:	80 81       	ld	r24, Z
    5532:	81 60       	ori	r24, 0x01	; 1
    5534:	80 83       	st	Z, r24
    5536:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    5538:	82 30       	cpi	r24, 0x02	; 2
    553a:	29 f4       	brne	.+10     	; 0x5546 <CLKSYS_AutoCalibration_Enable+0x3a>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    553c:	e0 e6       	ldi	r30, 0x60	; 96
    553e:	f0 e0       	ldi	r31, 0x00	; 0
    5540:	80 81       	ld	r24, Z
    5542:	81 60       	ori	r24, 0x01	; 1
    5544:	80 83       	st	Z, r24
    5546:	08 95       	ret

00005548 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
    5548:	83 e5       	ldi	r24, 0x53	; 83
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	63 e0       	ldi	r22, 0x03	; 3
    554e:	0e 94 35 2a 	call	0x546a	; 0x546a <CCPWrite>
}
    5552:	08 95       	ret

00005554 <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
    5554:	82 e4       	ldi	r24, 0x42	; 66
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	61 e0       	ldi	r22, 0x01	; 1
    555a:	0e 94 35 2a 	call	0x546a	; 0x546a <CCPWrite>
}
    555e:	08 95       	ret

00005560 <__muldi3>:
    5560:	a0 e3       	ldi	r26, 0x30	; 48
    5562:	b0 e0       	ldi	r27, 0x00	; 0
    5564:	e6 eb       	ldi	r30, 0xB6	; 182
    5566:	fa e2       	ldi	r31, 0x2A	; 42
    5568:	0c 94 a0 34 	jmp	0x6940	; 0x6940 <__prologue_saves__+0x4>
    556c:	29 8f       	std	Y+25, r18	; 0x19
    556e:	3a 8f       	std	Y+26, r19	; 0x1a
    5570:	4b 8f       	std	Y+27, r20	; 0x1b
    5572:	5c 8f       	std	Y+28, r21	; 0x1c
    5574:	6d 8f       	std	Y+29, r22	; 0x1d
    5576:	7e 8f       	std	Y+30, r23	; 0x1e
    5578:	8f 8f       	std	Y+31, r24	; 0x1f
    557a:	98 a3       	lds	r25, 0x58
    557c:	a9 8a       	std	Y+17, r10	; 0x11
    557e:	ba 8a       	std	Y+18, r11	; 0x12
    5580:	cb 8a       	std	Y+19, r12	; 0x13
    5582:	dc 8a       	std	Y+20, r13	; 0x14
    5584:	ed 8a       	std	Y+21, r14	; 0x15
    5586:	fe 8a       	std	Y+22, r15	; 0x16
    5588:	0f 8b       	std	Y+23, r16	; 0x17
    558a:	18 8f       	std	Y+24, r17	; 0x18
    558c:	09 8d       	ldd	r16, Y+25	; 0x19
    558e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    5590:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5592:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5594:	09 a3       	lds	r16, 0x59
    5596:	1a a3       	lds	r17, 0x5a
    5598:	2b a3       	lds	r18, 0x5b
    559a:	3c a3       	lds	r19, 0x5c
    559c:	68 01       	movw	r12, r16
    559e:	79 01       	movw	r14, r18
    55a0:	8f ef       	ldi	r24, 0xFF	; 255
    55a2:	9f ef       	ldi	r25, 0xFF	; 255
    55a4:	a0 e0       	ldi	r26, 0x00	; 0
    55a6:	b0 e0       	ldi	r27, 0x00	; 0
    55a8:	c8 22       	and	r12, r24
    55aa:	d9 22       	and	r13, r25
    55ac:	ea 22       	and	r14, r26
    55ae:	fb 22       	and	r15, r27
    55b0:	89 01       	movw	r16, r18
    55b2:	22 27       	eor	r18, r18
    55b4:	33 27       	eor	r19, r19
    55b6:	09 a7       	lds	r16, 0x79
    55b8:	1a a7       	lds	r17, 0x7a
    55ba:	2b a7       	lds	r18, 0x7b
    55bc:	3c a7       	lds	r19, 0x7c
    55be:	09 89       	ldd	r16, Y+17	; 0x11
    55c0:	1a 89       	ldd	r17, Y+18	; 0x12
    55c2:	2b 89       	ldd	r18, Y+19	; 0x13
    55c4:	3c 89       	ldd	r19, Y+20	; 0x14
    55c6:	0d a3       	lds	r16, 0x5d
    55c8:	1e a3       	lds	r17, 0x5e
    55ca:	2f a3       	lds	r18, 0x5f
    55cc:	38 a7       	lds	r19, 0x78
    55ce:	48 01       	movw	r8, r16
    55d0:	59 01       	movw	r10, r18
    55d2:	88 22       	and	r8, r24
    55d4:	99 22       	and	r9, r25
    55d6:	aa 22       	and	r10, r26
    55d8:	bb 22       	and	r11, r27
    55da:	29 01       	movw	r4, r18
    55dc:	66 24       	eor	r6, r6
    55de:	77 24       	eor	r7, r7
    55e0:	c5 01       	movw	r24, r10
    55e2:	b4 01       	movw	r22, r8
    55e4:	a7 01       	movw	r20, r14
    55e6:	96 01       	movw	r18, r12
    55e8:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    55ec:	6d a7       	lds	r22, 0x7d
    55ee:	7e a7       	lds	r23, 0x7e
    55f0:	8f a7       	lds	r24, 0x7f
    55f2:	98 ab       	sts	0x58, r25
    55f4:	c3 01       	movw	r24, r6
    55f6:	b2 01       	movw	r22, r4
    55f8:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    55fc:	6b 01       	movw	r12, r22
    55fe:	7c 01       	movw	r14, r24
    5600:	c5 01       	movw	r24, r10
    5602:	b4 01       	movw	r22, r8
    5604:	29 a5       	lds	r18, 0x69
    5606:	3a a5       	lds	r19, 0x6a
    5608:	4b a5       	lds	r20, 0x6b
    560a:	5c a5       	lds	r21, 0x6c
    560c:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    5610:	4b 01       	movw	r8, r22
    5612:	5c 01       	movw	r10, r24
    5614:	c3 01       	movw	r24, r6
    5616:	b2 01       	movw	r22, r4
    5618:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    561c:	ab 01       	movw	r20, r22
    561e:	bc 01       	movw	r22, r24
    5620:	c8 0c       	add	r12, r8
    5622:	d9 1c       	adc	r13, r9
    5624:	ea 1c       	adc	r14, r10
    5626:	fb 1c       	adc	r15, r11
    5628:	0d a5       	lds	r16, 0x6d
    562a:	1e a5       	lds	r17, 0x6e
    562c:	2f a5       	lds	r18, 0x6f
    562e:	38 a9       	sts	0x48, r19
    5630:	c9 01       	movw	r24, r18
    5632:	aa 27       	eor	r26, r26
    5634:	bb 27       	eor	r27, r27
    5636:	c8 0e       	add	r12, r24
    5638:	d9 1e       	adc	r13, r25
    563a:	ea 1e       	adc	r14, r26
    563c:	fb 1e       	adc	r15, r27
    563e:	c8 14       	cp	r12, r8
    5640:	d9 04       	cpc	r13, r9
    5642:	ea 04       	cpc	r14, r10
    5644:	fb 04       	cpc	r15, r11
    5646:	20 f4       	brcc	.+8      	; 0x5650 <__muldi3+0xf0>
    5648:	40 50       	subi	r20, 0x00	; 0
    564a:	50 40       	sbci	r21, 0x00	; 0
    564c:	6f 4f       	sbci	r22, 0xFF	; 255
    564e:	7f 4f       	sbci	r23, 0xFF	; 255
    5650:	c7 01       	movw	r24, r14
    5652:	aa 27       	eor	r26, r26
    5654:	bb 27       	eor	r27, r27
    5656:	84 0f       	add	r24, r20
    5658:	95 1f       	adc	r25, r21
    565a:	a6 1f       	adc	r26, r22
    565c:	b7 1f       	adc	r27, r23
    565e:	8d 83       	std	Y+5, r24	; 0x05
    5660:	9e 83       	std	Y+6, r25	; 0x06
    5662:	af 83       	std	Y+7, r26	; 0x07
    5664:	b8 87       	std	Y+8, r27	; 0x08
    5666:	76 01       	movw	r14, r12
    5668:	dd 24       	eor	r13, r13
    566a:	cc 24       	eor	r12, r12
    566c:	4d a5       	lds	r20, 0x6d
    566e:	5e a5       	lds	r21, 0x6e
    5670:	6f a5       	lds	r22, 0x6f
    5672:	78 a9       	sts	0x48, r23
    5674:	60 70       	andi	r22, 0x00	; 0
    5676:	70 70       	andi	r23, 0x00	; 0
    5678:	c4 0e       	add	r12, r20
    567a:	d5 1e       	adc	r13, r21
    567c:	e6 1e       	adc	r14, r22
    567e:	f7 1e       	adc	r15, r23
    5680:	c9 82       	std	Y+1, r12	; 0x01
    5682:	da 82       	std	Y+2, r13	; 0x02
    5684:	eb 82       	std	Y+3, r14	; 0x03
    5686:	fc 82       	std	Y+4, r15	; 0x04
    5688:	1c 2d       	mov	r17, r12
    568a:	0a 81       	ldd	r16, Y+2	; 0x02
    568c:	8b 80       	ldd	r8, Y+3	; 0x03
    568e:	4c 80       	ldd	r4, Y+4	; 0x04
    5690:	8d 87       	std	Y+13, r24	; 0x0d
    5692:	8e 81       	ldd	r24, Y+6	; 0x06
    5694:	8e 87       	std	Y+14, r24	; 0x0e
    5696:	8f 81       	ldd	r24, Y+7	; 0x07
    5698:	8f 87       	std	Y+15, r24	; 0x0f
    569a:	88 85       	ldd	r24, Y+8	; 0x08
    569c:	88 8b       	std	Y+16, r24	; 0x10
    569e:	2d 89       	ldd	r18, Y+21	; 0x15
    56a0:	3e 89       	ldd	r19, Y+22	; 0x16
    56a2:	4f 89       	ldd	r20, Y+23	; 0x17
    56a4:	58 8d       	ldd	r21, Y+24	; 0x18
    56a6:	69 a1       	lds	r22, 0x49
    56a8:	7a a1       	lds	r23, 0x4a
    56aa:	8b a1       	lds	r24, 0x4b
    56ac:	9c a1       	lds	r25, 0x4c
    56ae:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    56b2:	6b 01       	movw	r12, r22
    56b4:	7c 01       	movw	r14, r24
    56b6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    56b8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    56ba:	4f 8d       	ldd	r20, Y+31	; 0x1f
    56bc:	58 a1       	lds	r21, 0x48
    56be:	6d a1       	lds	r22, 0x4d
    56c0:	7e a1       	lds	r23, 0x4e
    56c2:	8f a1       	lds	r24, 0x4f
    56c4:	98 a5       	lds	r25, 0x68
    56c6:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    56ca:	dc 01       	movw	r26, r24
    56cc:	cb 01       	movw	r24, r22
    56ce:	c8 0e       	add	r12, r24
    56d0:	d9 1e       	adc	r13, r25
    56d2:	ea 1e       	adc	r14, r26
    56d4:	fb 1e       	adc	r15, r27
    56d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    56d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    56da:	af 85       	ldd	r26, Y+15	; 0x0f
    56dc:	b8 89       	ldd	r27, Y+16	; 0x10
    56de:	8c 0d       	add	r24, r12
    56e0:	9d 1d       	adc	r25, r13
    56e2:	ae 1d       	adc	r26, r14
    56e4:	bf 1d       	adc	r27, r15
    56e6:	8d 87       	std	Y+13, r24	; 0x0d
    56e8:	9e 87       	std	Y+14, r25	; 0x0e
    56ea:	af 87       	std	Y+15, r26	; 0x0f
    56ec:	b8 8b       	std	Y+16, r27	; 0x10
    56ee:	68 2f       	mov	r22, r24
    56f0:	7e 85       	ldd	r23, Y+14	; 0x0e
    56f2:	21 2f       	mov	r18, r17
    56f4:	30 2f       	mov	r19, r16
    56f6:	48 2d       	mov	r20, r8
    56f8:	54 2d       	mov	r21, r4
    56fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    56fc:	98 89       	ldd	r25, Y+16	; 0x10
    56fe:	e0 96       	adiw	r28, 0x30	; 48
    5700:	e0 e1       	ldi	r30, 0x10	; 16
    5702:	0c 94 b9 34 	jmp	0x6972	; 0x6972 <__epilogue_restores__+0x4>

00005706 <__ashldi3>:
    5706:	cf 92       	push	r12
    5708:	df 92       	push	r13
    570a:	ef 92       	push	r14
    570c:	ff 92       	push	r15
    570e:	0f 93       	push	r16
    5710:	cf 93       	push	r28
    5712:	df 93       	push	r29
    5714:	cd b7       	in	r28, 0x3d	; 61
    5716:	de b7       	in	r29, 0x3e	; 62
    5718:	60 97       	sbiw	r28, 0x10	; 16
    571a:	cd bf       	out	0x3d, r28	; 61
    571c:	de bf       	out	0x3e, r29	; 62
    571e:	00 23       	and	r16, r16
    5720:	09 f4       	brne	.+2      	; 0x5724 <__ashldi3+0x1e>
    5722:	5a c0       	rjmp	.+180    	; 0x57d8 <__ashldi3+0xd2>
    5724:	29 87       	std	Y+9, r18	; 0x09
    5726:	3a 87       	std	Y+10, r19	; 0x0a
    5728:	4b 87       	std	Y+11, r20	; 0x0b
    572a:	5c 87       	std	Y+12, r21	; 0x0c
    572c:	6d 87       	std	Y+13, r22	; 0x0d
    572e:	7e 87       	std	Y+14, r23	; 0x0e
    5730:	8f 87       	std	Y+15, r24	; 0x0f
    5732:	98 8b       	std	Y+16, r25	; 0x10
    5734:	80 e2       	ldi	r24, 0x20	; 32
    5736:	80 1b       	sub	r24, r16
    5738:	49 85       	ldd	r20, Y+9	; 0x09
    573a:	5a 85       	ldd	r21, Y+10	; 0x0a
    573c:	6b 85       	ldd	r22, Y+11	; 0x0b
    573e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5740:	18 16       	cp	r1, r24
    5742:	b4 f0       	brlt	.+44     	; 0x5770 <__ashldi3+0x6a>
    5744:	19 82       	std	Y+1, r1	; 0x01
    5746:	1a 82       	std	Y+2, r1	; 0x02
    5748:	1b 82       	std	Y+3, r1	; 0x03
    574a:	1c 82       	std	Y+4, r1	; 0x04
    574c:	99 27       	eor	r25, r25
    574e:	87 fd       	sbrc	r24, 7
    5750:	90 95       	com	r25
    5752:	90 95       	com	r25
    5754:	81 95       	neg	r24
    5756:	9f 4f       	sbci	r25, 0xFF	; 255
    5758:	04 c0       	rjmp	.+8      	; 0x5762 <__ashldi3+0x5c>
    575a:	44 0f       	add	r20, r20
    575c:	55 1f       	adc	r21, r21
    575e:	66 1f       	adc	r22, r22
    5760:	77 1f       	adc	r23, r23
    5762:	8a 95       	dec	r24
    5764:	d2 f7       	brpl	.-12     	; 0x575a <__ashldi3+0x54>
    5766:	4d 83       	std	Y+5, r20	; 0x05
    5768:	5e 83       	std	Y+6, r21	; 0x06
    576a:	6f 83       	std	Y+7, r22	; 0x07
    576c:	78 87       	std	Y+8, r23	; 0x08
    576e:	2c c0       	rjmp	.+88     	; 0x57c8 <__ashldi3+0xc2>
    5770:	6a 01       	movw	r12, r20
    5772:	7b 01       	movw	r14, r22
    5774:	00 2e       	mov	r0, r16
    5776:	04 c0       	rjmp	.+8      	; 0x5780 <__ashldi3+0x7a>
    5778:	cc 0c       	add	r12, r12
    577a:	dd 1c       	adc	r13, r13
    577c:	ee 1c       	adc	r14, r14
    577e:	ff 1c       	adc	r15, r15
    5780:	0a 94       	dec	r0
    5782:	d2 f7       	brpl	.-12     	; 0x5778 <__ashldi3+0x72>
    5784:	c9 82       	std	Y+1, r12	; 0x01
    5786:	da 82       	std	Y+2, r13	; 0x02
    5788:	eb 82       	std	Y+3, r14	; 0x03
    578a:	fc 82       	std	Y+4, r15	; 0x04
    578c:	6a 01       	movw	r12, r20
    578e:	7b 01       	movw	r14, r22
    5790:	04 c0       	rjmp	.+8      	; 0x579a <__ashldi3+0x94>
    5792:	f6 94       	lsr	r15
    5794:	e7 94       	ror	r14
    5796:	d7 94       	ror	r13
    5798:	c7 94       	ror	r12
    579a:	8a 95       	dec	r24
    579c:	d2 f7       	brpl	.-12     	; 0x5792 <__ashldi3+0x8c>
    579e:	d7 01       	movw	r26, r14
    57a0:	c6 01       	movw	r24, r12
    57a2:	4d 85       	ldd	r20, Y+13	; 0x0d
    57a4:	5e 85       	ldd	r21, Y+14	; 0x0e
    57a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    57a8:	78 89       	ldd	r23, Y+16	; 0x10
    57aa:	04 c0       	rjmp	.+8      	; 0x57b4 <__ashldi3+0xae>
    57ac:	44 0f       	add	r20, r20
    57ae:	55 1f       	adc	r21, r21
    57b0:	66 1f       	adc	r22, r22
    57b2:	77 1f       	adc	r23, r23
    57b4:	0a 95       	dec	r16
    57b6:	d2 f7       	brpl	.-12     	; 0x57ac <__ashldi3+0xa6>
    57b8:	84 2b       	or	r24, r20
    57ba:	95 2b       	or	r25, r21
    57bc:	a6 2b       	or	r26, r22
    57be:	b7 2b       	or	r27, r23
    57c0:	8d 83       	std	Y+5, r24	; 0x05
    57c2:	9e 83       	std	Y+6, r25	; 0x06
    57c4:	af 83       	std	Y+7, r26	; 0x07
    57c6:	b8 87       	std	Y+8, r27	; 0x08
    57c8:	29 81       	ldd	r18, Y+1	; 0x01
    57ca:	3a 81       	ldd	r19, Y+2	; 0x02
    57cc:	4b 81       	ldd	r20, Y+3	; 0x03
    57ce:	5c 81       	ldd	r21, Y+4	; 0x04
    57d0:	6d 81       	ldd	r22, Y+5	; 0x05
    57d2:	7e 81       	ldd	r23, Y+6	; 0x06
    57d4:	8f 81       	ldd	r24, Y+7	; 0x07
    57d6:	98 85       	ldd	r25, Y+8	; 0x08
    57d8:	60 96       	adiw	r28, 0x10	; 16
    57da:	cd bf       	out	0x3d, r28	; 61
    57dc:	de bf       	out	0x3e, r29	; 62
    57de:	df 91       	pop	r29
    57e0:	cf 91       	pop	r28
    57e2:	0f 91       	pop	r16
    57e4:	ff 90       	pop	r15
    57e6:	ef 90       	pop	r14
    57e8:	df 90       	pop	r13
    57ea:	cf 90       	pop	r12
    57ec:	08 95       	ret

000057ee <__ashrdi3>:
    57ee:	0f 93       	push	r16
    57f0:	cf 93       	push	r28
    57f2:	df 93       	push	r29
    57f4:	cd b7       	in	r28, 0x3d	; 61
    57f6:	de b7       	in	r29, 0x3e	; 62
    57f8:	60 97       	sbiw	r28, 0x10	; 16
    57fa:	cd bf       	out	0x3d, r28	; 61
    57fc:	de bf       	out	0x3e, r29	; 62
    57fe:	00 23       	and	r16, r16
    5800:	09 f4       	brne	.+2      	; 0x5804 <__ashrdi3+0x16>
    5802:	56 c0       	rjmp	.+172    	; 0x58b0 <__ashrdi3+0xc2>
    5804:	29 87       	std	Y+9, r18	; 0x09
    5806:	3a 87       	std	Y+10, r19	; 0x0a
    5808:	4b 87       	std	Y+11, r20	; 0x0b
    580a:	5c 87       	std	Y+12, r21	; 0x0c
    580c:	6d 87       	std	Y+13, r22	; 0x0d
    580e:	7e 87       	std	Y+14, r23	; 0x0e
    5810:	8f 87       	std	Y+15, r24	; 0x0f
    5812:	98 8b       	std	Y+16, r25	; 0x10
    5814:	20 e2       	ldi	r18, 0x20	; 32
    5816:	20 1b       	sub	r18, r16
    5818:	8d 85       	ldd	r24, Y+13	; 0x0d
    581a:	9e 85       	ldd	r25, Y+14	; 0x0e
    581c:	af 85       	ldd	r26, Y+15	; 0x0f
    581e:	b8 89       	ldd	r27, Y+16	; 0x10
    5820:	ac 01       	movw	r20, r24
    5822:	bd 01       	movw	r22, r26
    5824:	12 16       	cp	r1, r18
    5826:	b4 f0       	brlt	.+44     	; 0x5854 <__ashrdi3+0x66>
    5828:	77 0f       	add	r23, r23
    582a:	44 0b       	sbc	r20, r20
    582c:	54 2f       	mov	r21, r20
    582e:	ba 01       	movw	r22, r20
    5830:	4d 83       	std	Y+5, r20	; 0x05
    5832:	5e 83       	std	Y+6, r21	; 0x06
    5834:	6f 83       	std	Y+7, r22	; 0x07
    5836:	78 87       	std	Y+8, r23	; 0x08
    5838:	33 27       	eor	r19, r19
    583a:	27 fd       	sbrc	r18, 7
    583c:	30 95       	com	r19
    583e:	30 95       	com	r19
    5840:	21 95       	neg	r18
    5842:	3f 4f       	sbci	r19, 0xFF	; 255
    5844:	04 c0       	rjmp	.+8      	; 0x584e <__ashrdi3+0x60>
    5846:	b5 95       	asr	r27
    5848:	a7 95       	ror	r26
    584a:	97 95       	ror	r25
    584c:	87 95       	ror	r24
    584e:	2a 95       	dec	r18
    5850:	d2 f7       	brpl	.-12     	; 0x5846 <__ashrdi3+0x58>
    5852:	22 c0       	rjmp	.+68     	; 0x5898 <__ashrdi3+0xaa>
    5854:	00 2e       	mov	r0, r16
    5856:	04 c0       	rjmp	.+8      	; 0x5860 <__ashrdi3+0x72>
    5858:	75 95       	asr	r23
    585a:	67 95       	ror	r22
    585c:	57 95       	ror	r21
    585e:	47 95       	ror	r20
    5860:	0a 94       	dec	r0
    5862:	d2 f7       	brpl	.-12     	; 0x5858 <__ashrdi3+0x6a>
    5864:	4d 83       	std	Y+5, r20	; 0x05
    5866:	5e 83       	std	Y+6, r21	; 0x06
    5868:	6f 83       	std	Y+7, r22	; 0x07
    586a:	78 87       	std	Y+8, r23	; 0x08
    586c:	04 c0       	rjmp	.+8      	; 0x5876 <__ashrdi3+0x88>
    586e:	88 0f       	add	r24, r24
    5870:	99 1f       	adc	r25, r25
    5872:	aa 1f       	adc	r26, r26
    5874:	bb 1f       	adc	r27, r27
    5876:	2a 95       	dec	r18
    5878:	d2 f7       	brpl	.-12     	; 0x586e <__ashrdi3+0x80>
    587a:	49 85       	ldd	r20, Y+9	; 0x09
    587c:	5a 85       	ldd	r21, Y+10	; 0x0a
    587e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5880:	7c 85       	ldd	r23, Y+12	; 0x0c
    5882:	04 c0       	rjmp	.+8      	; 0x588c <__ashrdi3+0x9e>
    5884:	76 95       	lsr	r23
    5886:	67 95       	ror	r22
    5888:	57 95       	ror	r21
    588a:	47 95       	ror	r20
    588c:	0a 95       	dec	r16
    588e:	d2 f7       	brpl	.-12     	; 0x5884 <__ashrdi3+0x96>
    5890:	84 2b       	or	r24, r20
    5892:	95 2b       	or	r25, r21
    5894:	a6 2b       	or	r26, r22
    5896:	b7 2b       	or	r27, r23
    5898:	89 83       	std	Y+1, r24	; 0x01
    589a:	9a 83       	std	Y+2, r25	; 0x02
    589c:	ab 83       	std	Y+3, r26	; 0x03
    589e:	bc 83       	std	Y+4, r27	; 0x04
    58a0:	29 81       	ldd	r18, Y+1	; 0x01
    58a2:	3a 81       	ldd	r19, Y+2	; 0x02
    58a4:	4b 81       	ldd	r20, Y+3	; 0x03
    58a6:	5c 81       	ldd	r21, Y+4	; 0x04
    58a8:	6d 81       	ldd	r22, Y+5	; 0x05
    58aa:	7e 81       	ldd	r23, Y+6	; 0x06
    58ac:	8f 81       	ldd	r24, Y+7	; 0x07
    58ae:	98 85       	ldd	r25, Y+8	; 0x08
    58b0:	60 96       	adiw	r28, 0x10	; 16
    58b2:	cd bf       	out	0x3d, r28	; 61
    58b4:	de bf       	out	0x3e, r29	; 62
    58b6:	df 91       	pop	r29
    58b8:	cf 91       	pop	r28
    58ba:	0f 91       	pop	r16
    58bc:	08 95       	ret

000058be <__divdi3>:
    58be:	a8 e4       	ldi	r26, 0x48	; 72
    58c0:	b0 e0       	ldi	r27, 0x00	; 0
    58c2:	e5 e6       	ldi	r30, 0x65	; 101
    58c4:	fc e2       	ldi	r31, 0x2C	; 44
    58c6:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__prologue_saves__+0x2>
    58ca:	f5 01       	movw	r30, r10
    58cc:	29 a3       	lds	r18, 0x59
    58ce:	3a a3       	lds	r19, 0x5a
    58d0:	4b a3       	lds	r20, 0x5b
    58d2:	5c a3       	lds	r21, 0x5c
    58d4:	6d a3       	lds	r22, 0x5d
    58d6:	7e a3       	lds	r23, 0x5e
    58d8:	8f a3       	lds	r24, 0x5f
    58da:	98 a7       	lds	r25, 0x78
    58dc:	a9 8e       	std	Y+25, r10	; 0x19
    58de:	fa 8f       	std	Y+26, r31	; 0x1a
    58e0:	cb 8e       	std	Y+27, r12	; 0x1b
    58e2:	dc 8e       	std	Y+28, r13	; 0x1c
    58e4:	ed 8e       	std	Y+29, r14	; 0x1d
    58e6:	fe 8e       	std	Y+30, r15	; 0x1e
    58e8:	0f 8f       	std	Y+31, r16	; 0x1f
    58ea:	18 a3       	lds	r17, 0x58
    58ec:	8d a0       	lds	r24, 0x8d
    58ee:	9e a0       	lds	r25, 0x8e
    58f0:	af a0       	lds	r26, 0x8f
    58f2:	b8 a4       	lds	r27, 0xa8
    58f4:	b7 fe       	sbrs	r11, 7
    58f6:	67 c0       	rjmp	.+206    	; 0x59c6 <__divdi3+0x108>
    58f8:	21 95       	neg	r18
    58fa:	b1 e0       	ldi	r27, 0x01	; 1
    58fc:	12 16       	cp	r1, r18
    58fe:	08 f0       	brcs	.+2      	; 0x5902 <__divdi3+0x44>
    5900:	b0 e0       	ldi	r27, 0x00	; 0
    5902:	31 95       	neg	r19
    5904:	a1 e0       	ldi	r26, 0x01	; 1
    5906:	13 16       	cp	r1, r19
    5908:	08 f0       	brcs	.+2      	; 0x590c <__divdi3+0x4e>
    590a:	a0 e0       	ldi	r26, 0x00	; 0
    590c:	b3 2e       	mov	r11, r19
    590e:	bb 1a       	sub	r11, r27
    5910:	bb 2d       	mov	r27, r11
    5912:	88 24       	eor	r8, r8
    5914:	83 94       	inc	r8
    5916:	3b 15       	cp	r19, r11
    5918:	08 f0       	brcs	.+2      	; 0x591c <__divdi3+0x5e>
    591a:	88 24       	eor	r8, r8
    591c:	a8 29       	or	r26, r8
    591e:	41 95       	neg	r20
    5920:	31 e0       	ldi	r19, 0x01	; 1
    5922:	14 16       	cp	r1, r20
    5924:	08 f0       	brcs	.+2      	; 0x5928 <__divdi3+0x6a>
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	b4 2e       	mov	r11, r20
    592a:	ba 1a       	sub	r11, r26
    592c:	ab 2d       	mov	r26, r11
    592e:	88 24       	eor	r8, r8
    5930:	83 94       	inc	r8
    5932:	4b 15       	cp	r20, r11
    5934:	08 f0       	brcs	.+2      	; 0x5938 <__divdi3+0x7a>
    5936:	88 24       	eor	r8, r8
    5938:	38 29       	or	r19, r8
    593a:	51 95       	neg	r21
    593c:	41 e0       	ldi	r20, 0x01	; 1
    593e:	15 16       	cp	r1, r21
    5940:	08 f0       	brcs	.+2      	; 0x5944 <__divdi3+0x86>
    5942:	40 e0       	ldi	r20, 0x00	; 0
    5944:	45 2e       	mov	r4, r21
    5946:	43 1a       	sub	r4, r19
    5948:	31 e0       	ldi	r19, 0x01	; 1
    594a:	54 15       	cp	r21, r4
    594c:	08 f0       	brcs	.+2      	; 0x5950 <__divdi3+0x92>
    594e:	30 e0       	ldi	r19, 0x00	; 0
    5950:	43 2b       	or	r20, r19
    5952:	61 95       	neg	r22
    5954:	31 e0       	ldi	r19, 0x01	; 1
    5956:	16 16       	cp	r1, r22
    5958:	08 f0       	brcs	.+2      	; 0x595c <__divdi3+0x9e>
    595a:	30 e0       	ldi	r19, 0x00	; 0
    595c:	86 2e       	mov	r8, r22
    595e:	84 1a       	sub	r8, r20
    5960:	41 e0       	ldi	r20, 0x01	; 1
    5962:	68 15       	cp	r22, r8
    5964:	08 f0       	brcs	.+2      	; 0x5968 <__divdi3+0xaa>
    5966:	40 e0       	ldi	r20, 0x00	; 0
    5968:	34 2b       	or	r19, r20
    596a:	71 95       	neg	r23
    596c:	41 e0       	ldi	r20, 0x01	; 1
    596e:	17 16       	cp	r1, r23
    5970:	08 f0       	brcs	.+2      	; 0x5974 <__divdi3+0xb6>
    5972:	40 e0       	ldi	r20, 0x00	; 0
    5974:	57 2f       	mov	r21, r23
    5976:	53 1b       	sub	r21, r19
    5978:	31 e0       	ldi	r19, 0x01	; 1
    597a:	75 17       	cp	r23, r21
    597c:	08 f0       	brcs	.+2      	; 0x5980 <__divdi3+0xc2>
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	43 2b       	or	r20, r19
    5982:	81 95       	neg	r24
    5984:	31 e0       	ldi	r19, 0x01	; 1
    5986:	18 16       	cp	r1, r24
    5988:	08 f0       	brcs	.+2      	; 0x598c <__divdi3+0xce>
    598a:	30 e0       	ldi	r19, 0x00	; 0
    598c:	68 2f       	mov	r22, r24
    598e:	64 1b       	sub	r22, r20
    5990:	46 2f       	mov	r20, r22
    5992:	61 e0       	ldi	r22, 0x01	; 1
    5994:	84 17       	cp	r24, r20
    5996:	08 f0       	brcs	.+2      	; 0x599a <__divdi3+0xdc>
    5998:	60 e0       	ldi	r22, 0x00	; 0
    599a:	36 2b       	or	r19, r22
    599c:	91 95       	neg	r25
    599e:	93 1b       	sub	r25, r19
    59a0:	29 a3       	lds	r18, 0x59
    59a2:	ba a3       	lds	r27, 0x5a
    59a4:	ab a3       	lds	r26, 0x5b
    59a6:	4c a2       	lds	r20, 0x9c
    59a8:	8d a2       	lds	r24, 0x9d
    59aa:	5e a3       	lds	r21, 0x5e
    59ac:	4f a3       	lds	r20, 0x5f
    59ae:	98 a7       	lds	r25, 0x78
    59b0:	8f ef       	ldi	r24, 0xFF	; 255
    59b2:	9f ef       	ldi	r25, 0xFF	; 255
    59b4:	af ef       	ldi	r26, 0xFF	; 255
    59b6:	bf ef       	ldi	r27, 0xFF	; 255
    59b8:	25 96       	adiw	r28, 0x05	; 5
    59ba:	8c af       	sts	0x7c, r24
    59bc:	9d af       	sts	0x7d, r25
    59be:	ae af       	sts	0x7e, r26
    59c0:	bf af       	sts	0x7f, r27
    59c2:	25 97       	sbiw	r28, 0x05	; 5
    59c4:	06 c0       	rjmp	.+12     	; 0x59d2 <__divdi3+0x114>
    59c6:	25 96       	adiw	r28, 0x05	; 5
    59c8:	1c ae       	sts	0xbc, r17
    59ca:	1d ae       	sts	0xbd, r17
    59cc:	1e ae       	sts	0xbe, r17
    59ce:	1f ae       	sts	0xbf, r17
    59d0:	25 97       	sbiw	r28, 0x05	; 5
    59d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59d6:	af 8d       	ldd	r26, Y+31	; 0x1f
    59d8:	b8 a1       	lds	r27, 0x48
    59da:	b7 ff       	sbrs	r27, 7
    59dc:	68 c0       	rjmp	.+208    	; 0x5aae <__divdi3+0x1f0>
    59de:	25 96       	adiw	r28, 0x05	; 5
    59e0:	2c ad       	sts	0x6c, r18
    59e2:	3d ad       	sts	0x6d, r19
    59e4:	4e ad       	sts	0x6e, r20
    59e6:	5f ad       	sts	0x6f, r21
    59e8:	25 97       	sbiw	r28, 0x05	; 5
    59ea:	20 95       	com	r18
    59ec:	30 95       	com	r19
    59ee:	40 95       	com	r20
    59f0:	50 95       	com	r21
    59f2:	25 96       	adiw	r28, 0x05	; 5
    59f4:	2c af       	sts	0x7c, r18
    59f6:	3d af       	sts	0x7d, r19
    59f8:	4e af       	sts	0x7e, r20
    59fa:	5f af       	sts	0x7f, r21
    59fc:	25 97       	sbiw	r28, 0x05	; 5
    59fe:	e1 95       	neg	r30
    5a00:	81 e0       	ldi	r24, 0x01	; 1
    5a02:	1e 16       	cp	r1, r30
    5a04:	08 f0       	brcs	.+2      	; 0x5a08 <__divdi3+0x14a>
    5a06:	80 e0       	ldi	r24, 0x00	; 0
    5a08:	f1 95       	neg	r31
    5a0a:	91 e0       	ldi	r25, 0x01	; 1
    5a0c:	1f 16       	cp	r1, r31
    5a0e:	08 f0       	brcs	.+2      	; 0x5a12 <__divdi3+0x154>
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	4f 2f       	mov	r20, r31
    5a14:	48 1b       	sub	r20, r24
    5a16:	81 e0       	ldi	r24, 0x01	; 1
    5a18:	f4 17       	cp	r31, r20
    5a1a:	08 f0       	brcs	.+2      	; 0x5a1e <__divdi3+0x160>
    5a1c:	80 e0       	ldi	r24, 0x00	; 0
    5a1e:	98 2b       	or	r25, r24
    5a20:	c1 94       	neg	r12
    5a22:	81 e0       	ldi	r24, 0x01	; 1
    5a24:	1c 14       	cp	r1, r12
    5a26:	08 f0       	brcs	.+2      	; 0x5a2a <__divdi3+0x16c>
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	6c 2d       	mov	r22, r12
    5a2c:	69 1b       	sub	r22, r25
    5a2e:	91 e0       	ldi	r25, 0x01	; 1
    5a30:	c6 16       	cp	r12, r22
    5a32:	08 f0       	brcs	.+2      	; 0x5a36 <__divdi3+0x178>
    5a34:	90 e0       	ldi	r25, 0x00	; 0
    5a36:	89 2b       	or	r24, r25
    5a38:	d1 94       	neg	r13
    5a3a:	91 e0       	ldi	r25, 0x01	; 1
    5a3c:	1d 14       	cp	r1, r13
    5a3e:	08 f0       	brcs	.+2      	; 0x5a42 <__divdi3+0x184>
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	5d 2d       	mov	r21, r13
    5a44:	58 1b       	sub	r21, r24
    5a46:	81 e0       	ldi	r24, 0x01	; 1
    5a48:	d5 16       	cp	r13, r21
    5a4a:	08 f0       	brcs	.+2      	; 0x5a4e <__divdi3+0x190>
    5a4c:	80 e0       	ldi	r24, 0x00	; 0
    5a4e:	98 2b       	or	r25, r24
    5a50:	e1 94       	neg	r14
    5a52:	81 e0       	ldi	r24, 0x01	; 1
    5a54:	1e 14       	cp	r1, r14
    5a56:	08 f0       	brcs	.+2      	; 0x5a5a <__divdi3+0x19c>
    5a58:	80 e0       	ldi	r24, 0x00	; 0
    5a5a:	3e 2d       	mov	r19, r14
    5a5c:	39 1b       	sub	r19, r25
    5a5e:	91 e0       	ldi	r25, 0x01	; 1
    5a60:	e3 16       	cp	r14, r19
    5a62:	08 f0       	brcs	.+2      	; 0x5a66 <__divdi3+0x1a8>
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	89 2b       	or	r24, r25
    5a68:	f1 94       	neg	r15
    5a6a:	91 e0       	ldi	r25, 0x01	; 1
    5a6c:	1f 14       	cp	r1, r15
    5a6e:	08 f0       	brcs	.+2      	; 0x5a72 <__divdi3+0x1b4>
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	2f 2d       	mov	r18, r15
    5a74:	28 1b       	sub	r18, r24
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	f2 16       	cp	r15, r18
    5a7a:	08 f0       	brcs	.+2      	; 0x5a7e <__divdi3+0x1c0>
    5a7c:	80 e0       	ldi	r24, 0x00	; 0
    5a7e:	98 2b       	or	r25, r24
    5a80:	01 95       	neg	r16
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	10 16       	cp	r1, r16
    5a86:	08 f0       	brcs	.+2      	; 0x5a8a <__divdi3+0x1cc>
    5a88:	80 e0       	ldi	r24, 0x00	; 0
    5a8a:	70 2f       	mov	r23, r16
    5a8c:	79 1b       	sub	r23, r25
    5a8e:	97 2f       	mov	r25, r23
    5a90:	71 e0       	ldi	r23, 0x01	; 1
    5a92:	09 17       	cp	r16, r25
    5a94:	08 f0       	brcs	.+2      	; 0x5a98 <__divdi3+0x1da>
    5a96:	70 e0       	ldi	r23, 0x00	; 0
    5a98:	87 2b       	or	r24, r23
    5a9a:	11 95       	neg	r17
    5a9c:	18 1b       	sub	r17, r24
    5a9e:	e9 8f       	std	Y+25, r30	; 0x19
    5aa0:	4a 8f       	std	Y+26, r20	; 0x1a
    5aa2:	6b 8f       	std	Y+27, r22	; 0x1b
    5aa4:	5c 8f       	std	Y+28, r21	; 0x1c
    5aa6:	3d 8f       	std	Y+29, r19	; 0x1d
    5aa8:	2e 8f       	std	Y+30, r18	; 0x1e
    5aaa:	9f 8f       	std	Y+31, r25	; 0x1f
    5aac:	18 a3       	lds	r17, 0x58
    5aae:	79 8d       	ldd	r23, Y+25	; 0x19
    5ab0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5ab2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5ab4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5ab6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    5ab8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5aba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5abc:	88 a1       	lds	r24, 0x48
    5abe:	e9 a1       	lds	r30, 0x49
    5ac0:	e9 8b       	std	Y+17, r30	; 0x11
    5ac2:	ea a1       	lds	r30, 0x4a
    5ac4:	ea 8b       	std	Y+18, r30	; 0x12
    5ac6:	eb a1       	lds	r30, 0x4b
    5ac8:	eb 8b       	std	Y+19, r30	; 0x13
    5aca:	ec a1       	lds	r30, 0x4c
    5acc:	ec 8b       	std	Y+20, r30	; 0x14
    5ace:	ed a1       	lds	r30, 0x4d
    5ad0:	ed 8b       	std	Y+21, r30	; 0x15
    5ad2:	ee a1       	lds	r30, 0x4e
    5ad4:	ee 8b       	std	Y+22, r30	; 0x16
    5ad6:	ef a1       	lds	r30, 0x4f
    5ad8:	ef 8b       	std	Y+23, r30	; 0x17
    5ada:	e8 a5       	lds	r30, 0x68
    5adc:	e8 8f       	std	Y+24, r30	; 0x18
    5ade:	79 87       	std	Y+9, r23	; 0x09
    5ae0:	6a 87       	std	Y+10, r22	; 0x0a
    5ae2:	5b 87       	std	Y+11, r21	; 0x0b
    5ae4:	4c 87       	std	Y+12, r20	; 0x0c
    5ae6:	3d 87       	std	Y+13, r19	; 0x0d
    5ae8:	2e 87       	std	Y+14, r18	; 0x0e
    5aea:	9f 87       	std	Y+15, r25	; 0x0f
    5aec:	88 8b       	std	Y+16, r24	; 0x10
    5aee:	89 84       	ldd	r8, Y+9	; 0x09
    5af0:	9a 84       	ldd	r9, Y+10	; 0x0a
    5af2:	ab 84       	ldd	r10, Y+11	; 0x0b
    5af4:	bc 84       	ldd	r11, Y+12	; 0x0c
    5af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5afa:	af 85       	ldd	r26, Y+15	; 0x0f
    5afc:	b8 89       	ldd	r27, Y+16	; 0x10
    5afe:	e9 88       	ldd	r14, Y+17	; 0x11
    5b00:	fa 88       	ldd	r15, Y+18	; 0x12
    5b02:	0b 89       	ldd	r16, Y+19	; 0x13
    5b04:	1c 89       	ldd	r17, Y+20	; 0x14
    5b06:	ed aa       	sts	0x9d, r30
    5b08:	fe aa       	sts	0x9e, r31
    5b0a:	0f ab       	sts	0x5f, r16
    5b0c:	18 af       	sts	0x78, r17
    5b0e:	cd 88       	ldd	r12, Y+21	; 0x15
    5b10:	de 88       	ldd	r13, Y+22	; 0x16
    5b12:	ef 88       	ldd	r14, Y+23	; 0x17
    5b14:	f8 8c       	ldd	r15, Y+24	; 0x18
    5b16:	00 97       	sbiw	r24, 0x00	; 0
    5b18:	a1 05       	cpc	r26, r1
    5b1a:	b1 05       	cpc	r27, r1
    5b1c:	09 f0       	breq	.+2      	; 0x5b20 <__divdi3+0x262>
    5b1e:	bd c3       	rjmp	.+1914   	; 0x629a <__stack+0x29b>
    5b20:	c8 14       	cp	r12, r8
    5b22:	d9 04       	cpc	r13, r9
    5b24:	ea 04       	cpc	r14, r10
    5b26:	fb 04       	cpc	r15, r11
    5b28:	08 f0       	brcs	.+2      	; 0x5b2c <__divdi3+0x26e>
    5b2a:	4d c1       	rjmp	.+666    	; 0x5dc6 <__divdi3+0x508>
    5b2c:	00 e0       	ldi	r16, 0x00	; 0
    5b2e:	80 16       	cp	r8, r16
    5b30:	00 e0       	ldi	r16, 0x00	; 0
    5b32:	90 06       	cpc	r9, r16
    5b34:	01 e0       	ldi	r16, 0x01	; 1
    5b36:	a0 06       	cpc	r10, r16
    5b38:	00 e0       	ldi	r16, 0x00	; 0
    5b3a:	b0 06       	cpc	r11, r16
    5b3c:	58 f4       	brcc	.+22     	; 0x5b54 <__divdi3+0x296>
    5b3e:	1f ef       	ldi	r17, 0xFF	; 255
    5b40:	81 16       	cp	r8, r17
    5b42:	91 04       	cpc	r9, r1
    5b44:	a1 04       	cpc	r10, r1
    5b46:	b1 04       	cpc	r11, r1
    5b48:	09 f0       	breq	.+2      	; 0x5b4c <__divdi3+0x28e>
    5b4a:	90 f4       	brcc	.+36     	; 0x5b70 <__divdi3+0x2b2>
    5b4c:	80 e0       	ldi	r24, 0x00	; 0
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
    5b50:	dc 01       	movw	r26, r24
    5b52:	17 c0       	rjmp	.+46     	; 0x5b82 <__divdi3+0x2c4>
    5b54:	20 e0       	ldi	r18, 0x00	; 0
    5b56:	82 16       	cp	r8, r18
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	92 06       	cpc	r9, r18
    5b5c:	20 e0       	ldi	r18, 0x00	; 0
    5b5e:	a2 06       	cpc	r10, r18
    5b60:	21 e0       	ldi	r18, 0x01	; 1
    5b62:	b2 06       	cpc	r11, r18
    5b64:	50 f4       	brcc	.+20     	; 0x5b7a <__divdi3+0x2bc>
    5b66:	80 e1       	ldi	r24, 0x10	; 16
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	a0 e0       	ldi	r26, 0x00	; 0
    5b6c:	b0 e0       	ldi	r27, 0x00	; 0
    5b6e:	09 c0       	rjmp	.+18     	; 0x5b82 <__divdi3+0x2c4>
    5b70:	88 e0       	ldi	r24, 0x08	; 8
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	a0 e0       	ldi	r26, 0x00	; 0
    5b76:	b0 e0       	ldi	r27, 0x00	; 0
    5b78:	04 c0       	rjmp	.+8      	; 0x5b82 <__divdi3+0x2c4>
    5b7a:	88 e1       	ldi	r24, 0x18	; 24
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	a0 e0       	ldi	r26, 0x00	; 0
    5b80:	b0 e0       	ldi	r27, 0x00	; 0
    5b82:	b5 01       	movw	r22, r10
    5b84:	a4 01       	movw	r20, r8
    5b86:	08 2e       	mov	r0, r24
    5b88:	04 c0       	rjmp	.+8      	; 0x5b92 <__divdi3+0x2d4>
    5b8a:	76 95       	lsr	r23
    5b8c:	67 95       	ror	r22
    5b8e:	57 95       	ror	r21
    5b90:	47 95       	ror	r20
    5b92:	0a 94       	dec	r0
    5b94:	d2 f7       	brpl	.-12     	; 0x5b8a <__divdi3+0x2cc>
    5b96:	fa 01       	movw	r30, r20
    5b98:	ef 5d       	subi	r30, 0xDF	; 223
    5b9a:	ff 4d       	sbci	r31, 0xDF	; 223
    5b9c:	20 81       	ld	r18, Z
    5b9e:	40 e2       	ldi	r20, 0x20	; 32
    5ba0:	50 e0       	ldi	r21, 0x00	; 0
    5ba2:	60 e0       	ldi	r22, 0x00	; 0
    5ba4:	70 e0       	ldi	r23, 0x00	; 0
    5ba6:	48 1b       	sub	r20, r24
    5ba8:	59 0b       	sbc	r21, r25
    5baa:	6a 0b       	sbc	r22, r26
    5bac:	7b 0b       	sbc	r23, r27
    5bae:	42 1b       	sub	r20, r18
    5bb0:	51 09       	sbc	r21, r1
    5bb2:	61 09       	sbc	r22, r1
    5bb4:	71 09       	sbc	r23, r1
    5bb6:	41 15       	cp	r20, r1
    5bb8:	51 05       	cpc	r21, r1
    5bba:	61 05       	cpc	r22, r1
    5bbc:	71 05       	cpc	r23, r1
    5bbe:	a1 f1       	breq	.+104    	; 0x5c28 <__divdi3+0x36a>
    5bc0:	04 2e       	mov	r0, r20
    5bc2:	04 c0       	rjmp	.+8      	; 0x5bcc <__divdi3+0x30e>
    5bc4:	88 0c       	add	r8, r8
    5bc6:	99 1c       	adc	r9, r9
    5bc8:	aa 1c       	adc	r10, r10
    5bca:	bb 1c       	adc	r11, r11
    5bcc:	0a 94       	dec	r0
    5bce:	d2 f7       	brpl	.-12     	; 0x5bc4 <__divdi3+0x306>
    5bd0:	97 01       	movw	r18, r14
    5bd2:	86 01       	movw	r16, r12
    5bd4:	04 2e       	mov	r0, r20
    5bd6:	04 c0       	rjmp	.+8      	; 0x5be0 <__divdi3+0x322>
    5bd8:	00 0f       	add	r16, r16
    5bda:	11 1f       	adc	r17, r17
    5bdc:	22 1f       	adc	r18, r18
    5bde:	33 1f       	adc	r19, r19
    5be0:	0a 94       	dec	r0
    5be2:	d2 f7       	brpl	.-12     	; 0x5bd8 <__divdi3+0x31a>
    5be4:	80 e2       	ldi	r24, 0x20	; 32
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	84 1b       	sub	r24, r20
    5bea:	95 0b       	sbc	r25, r21
    5bec:	cd a8       	sts	0x8d, r28
    5bee:	de a8       	sts	0x8e, r29
    5bf0:	ef a8       	sts	0x8f, r30
    5bf2:	f8 ac       	sts	0xa8, r31
    5bf4:	04 c0       	rjmp	.+8      	; 0x5bfe <__divdi3+0x340>
    5bf6:	f6 94       	lsr	r15
    5bf8:	e7 94       	ror	r14
    5bfa:	d7 94       	ror	r13
    5bfc:	c7 94       	ror	r12
    5bfe:	8a 95       	dec	r24
    5c00:	d2 f7       	brpl	.-12     	; 0x5bf6 <__divdi3+0x338>
    5c02:	c0 2a       	or	r12, r16
    5c04:	d1 2a       	or	r13, r17
    5c06:	e2 2a       	or	r14, r18
    5c08:	f3 2a       	or	r15, r19
    5c0a:	0d a9       	sts	0x4d, r16
    5c0c:	1e a9       	sts	0x4e, r17
    5c0e:	2f a9       	sts	0x4f, r18
    5c10:	38 ad       	sts	0x68, r19
    5c12:	04 c0       	rjmp	.+8      	; 0x5c1c <__divdi3+0x35e>
    5c14:	00 0f       	add	r16, r16
    5c16:	11 1f       	adc	r17, r17
    5c18:	22 1f       	adc	r18, r18
    5c1a:	33 1f       	adc	r19, r19
    5c1c:	4a 95       	dec	r20
    5c1e:	d2 f7       	brpl	.-12     	; 0x5c14 <__divdi3+0x356>
    5c20:	0d ab       	sts	0x5d, r16
    5c22:	1e ab       	sts	0x5e, r17
    5c24:	2f ab       	sts	0x5f, r18
    5c26:	38 af       	sts	0x78, r19
    5c28:	25 01       	movw	r4, r10
    5c2a:	66 24       	eor	r6, r6
    5c2c:	77 24       	eor	r7, r7
    5c2e:	95 01       	movw	r18, r10
    5c30:	84 01       	movw	r16, r8
    5c32:	20 70       	andi	r18, 0x00	; 0
    5c34:	30 70       	andi	r19, 0x00	; 0
    5c36:	09 ab       	sts	0x59, r16
    5c38:	1a ab       	sts	0x5a, r17
    5c3a:	2b ab       	sts	0x5b, r18
    5c3c:	3c ab       	sts	0x5c, r19
    5c3e:	c7 01       	movw	r24, r14
    5c40:	b6 01       	movw	r22, r12
    5c42:	a3 01       	movw	r20, r6
    5c44:	92 01       	movw	r18, r4
    5c46:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    5c4a:	2d a7       	lds	r18, 0x7d
    5c4c:	3e a7       	lds	r19, 0x7e
    5c4e:	4f a7       	lds	r20, 0x7f
    5c50:	58 ab       	sts	0x58, r21
    5c52:	69 a7       	lds	r22, 0x79
    5c54:	7a a7       	lds	r23, 0x7a
    5c56:	8b a7       	lds	r24, 0x7b
    5c58:	9c a7       	lds	r25, 0x7c
    5c5a:	c7 01       	movw	r24, r14
    5c5c:	b6 01       	movw	r22, r12
    5c5e:	a3 01       	movw	r20, r6
    5c60:	92 01       	movw	r18, r4
    5c62:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    5c66:	ca 01       	movw	r24, r20
    5c68:	b9 01       	movw	r22, r18
    5c6a:	29 a9       	sts	0x49, r18
    5c6c:	3a a9       	sts	0x4a, r19
    5c6e:	4b a9       	sts	0x4b, r20
    5c70:	5c a9       	sts	0x4c, r21
    5c72:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    5c76:	ab 01       	movw	r20, r22
    5c78:	bc 01       	movw	r22, r24
    5c7a:	09 a5       	lds	r16, 0x69
    5c7c:	1a a5       	lds	r17, 0x6a
    5c7e:	2b a5       	lds	r18, 0x6b
    5c80:	3c a5       	lds	r19, 0x6c
    5c82:	78 01       	movw	r14, r16
    5c84:	dd 24       	eor	r13, r13
    5c86:	cc 24       	eor	r12, r12
    5c88:	0d a9       	sts	0x4d, r16
    5c8a:	1e a9       	sts	0x4e, r17
    5c8c:	2f a9       	sts	0x4f, r18
    5c8e:	38 ad       	sts	0x68, r19
    5c90:	c9 01       	movw	r24, r18
    5c92:	aa 27       	eor	r26, r26
    5c94:	bb 27       	eor	r27, r27
    5c96:	c8 2a       	or	r12, r24
    5c98:	d9 2a       	or	r13, r25
    5c9a:	ea 2a       	or	r14, r26
    5c9c:	fb 2a       	or	r15, r27
    5c9e:	0d a5       	lds	r16, 0x6d
    5ca0:	1e a5       	lds	r17, 0x6e
    5ca2:	2f a5       	lds	r18, 0x6f
    5ca4:	38 a9       	sts	0x48, r19
    5ca6:	c4 16       	cp	r12, r20
    5ca8:	d5 06       	cpc	r13, r21
    5caa:	e6 06       	cpc	r14, r22
    5cac:	f7 06       	cpc	r15, r23
    5cae:	38 f5       	brcc	.+78     	; 0x5cfe <__divdi3+0x440>
    5cb0:	01 50       	subi	r16, 0x01	; 1
    5cb2:	10 40       	sbci	r17, 0x00	; 0
    5cb4:	20 40       	sbci	r18, 0x00	; 0
    5cb6:	30 40       	sbci	r19, 0x00	; 0
    5cb8:	09 a7       	lds	r16, 0x79
    5cba:	1a a7       	lds	r17, 0x7a
    5cbc:	2b a7       	lds	r18, 0x7b
    5cbe:	3c a7       	lds	r19, 0x7c
    5cc0:	c8 0c       	add	r12, r8
    5cc2:	d9 1c       	adc	r13, r9
    5cc4:	ea 1c       	adc	r14, r10
    5cc6:	fb 1c       	adc	r15, r11
    5cc8:	c8 14       	cp	r12, r8
    5cca:	d9 04       	cpc	r13, r9
    5ccc:	ea 04       	cpc	r14, r10
    5cce:	fb 04       	cpc	r15, r11
    5cd0:	d0 f0       	brcs	.+52     	; 0x5d06 <__divdi3+0x448>
    5cd2:	c4 16       	cp	r12, r20
    5cd4:	d5 06       	cpc	r13, r21
    5cd6:	e6 06       	cpc	r14, r22
    5cd8:	f7 06       	cpc	r15, r23
    5cda:	a8 f4       	brcc	.+42     	; 0x5d06 <__divdi3+0x448>
    5cdc:	0d a5       	lds	r16, 0x6d
    5cde:	1e a5       	lds	r17, 0x6e
    5ce0:	2f a5       	lds	r18, 0x6f
    5ce2:	38 a9       	sts	0x48, r19
    5ce4:	02 50       	subi	r16, 0x02	; 2
    5ce6:	10 40       	sbci	r17, 0x00	; 0
    5ce8:	20 40       	sbci	r18, 0x00	; 0
    5cea:	30 40       	sbci	r19, 0x00	; 0
    5cec:	09 a7       	lds	r16, 0x79
    5cee:	1a a7       	lds	r17, 0x7a
    5cf0:	2b a7       	lds	r18, 0x7b
    5cf2:	3c a7       	lds	r19, 0x7c
    5cf4:	c8 0c       	add	r12, r8
    5cf6:	d9 1c       	adc	r13, r9
    5cf8:	ea 1c       	adc	r14, r10
    5cfa:	fb 1c       	adc	r15, r11
    5cfc:	04 c0       	rjmp	.+8      	; 0x5d06 <__divdi3+0x448>
    5cfe:	09 a7       	lds	r16, 0x79
    5d00:	1a a7       	lds	r17, 0x7a
    5d02:	2b a7       	lds	r18, 0x7b
    5d04:	3c a7       	lds	r19, 0x7c
    5d06:	c4 1a       	sub	r12, r20
    5d08:	d5 0a       	sbc	r13, r21
    5d0a:	e6 0a       	sbc	r14, r22
    5d0c:	f7 0a       	sbc	r15, r23
    5d0e:	c7 01       	movw	r24, r14
    5d10:	b6 01       	movw	r22, r12
    5d12:	a3 01       	movw	r20, r6
    5d14:	92 01       	movw	r18, r4
    5d16:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    5d1a:	2d a7       	lds	r18, 0x7d
    5d1c:	3e a7       	lds	r19, 0x7e
    5d1e:	4f a7       	lds	r20, 0x7f
    5d20:	58 ab       	sts	0x58, r21
    5d22:	69 af       	sts	0x79, r22
    5d24:	7a af       	sts	0x7a, r23
    5d26:	8b af       	sts	0x7b, r24
    5d28:	9c af       	sts	0x7c, r25
    5d2a:	c7 01       	movw	r24, r14
    5d2c:	b6 01       	movw	r22, r12
    5d2e:	a3 01       	movw	r20, r6
    5d30:	92 01       	movw	r18, r4
    5d32:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    5d36:	ca 01       	movw	r24, r20
    5d38:	b9 01       	movw	r22, r18
    5d3a:	29 a9       	sts	0x49, r18
    5d3c:	3a a9       	sts	0x4a, r19
    5d3e:	4b a9       	sts	0x4b, r20
    5d40:	5c a9       	sts	0x4c, r21
    5d42:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    5d46:	6b 01       	movw	r12, r22
    5d48:	7c 01       	movw	r14, r24
    5d4a:	49 ad       	sts	0x69, r20
    5d4c:	5a ad       	sts	0x6a, r21
    5d4e:	6b ad       	sts	0x6b, r22
    5d50:	7c ad       	sts	0x6c, r23
    5d52:	9a 01       	movw	r18, r20
    5d54:	11 27       	eor	r17, r17
    5d56:	00 27       	eor	r16, r16
    5d58:	4d a9       	sts	0x4d, r20
    5d5a:	5e a9       	sts	0x4e, r21
    5d5c:	6f a9       	sts	0x4f, r22
    5d5e:	78 ad       	sts	0x68, r23
    5d60:	60 70       	andi	r22, 0x00	; 0
    5d62:	70 70       	andi	r23, 0x00	; 0
    5d64:	04 2b       	or	r16, r20
    5d66:	15 2b       	or	r17, r21
    5d68:	26 2b       	or	r18, r22
    5d6a:	37 2b       	or	r19, r23
    5d6c:	8d a5       	lds	r24, 0x6d
    5d6e:	9e a5       	lds	r25, 0x6e
    5d70:	af a5       	lds	r26, 0x6f
    5d72:	b8 a9       	sts	0x48, r27
    5d74:	0c 15       	cp	r16, r12
    5d76:	1d 05       	cpc	r17, r13
    5d78:	2e 05       	cpc	r18, r14
    5d7a:	3f 05       	cpc	r19, r15
    5d7c:	c0 f4       	brcc	.+48     	; 0x5dae <__divdi3+0x4f0>
    5d7e:	01 97       	sbiw	r24, 0x01	; 1
    5d80:	a1 09       	sbc	r26, r1
    5d82:	b1 09       	sbc	r27, r1
    5d84:	08 0d       	add	r16, r8
    5d86:	19 1d       	adc	r17, r9
    5d88:	2a 1d       	adc	r18, r10
    5d8a:	3b 1d       	adc	r19, r11
    5d8c:	08 15       	cp	r16, r8
    5d8e:	19 05       	cpc	r17, r9
    5d90:	2a 05       	cpc	r18, r10
    5d92:	3b 05       	cpc	r19, r11
    5d94:	60 f0       	brcs	.+24     	; 0x5dae <__divdi3+0x4f0>
    5d96:	0c 15       	cp	r16, r12
    5d98:	1d 05       	cpc	r17, r13
    5d9a:	2e 05       	cpc	r18, r14
    5d9c:	3f 05       	cpc	r19, r15
    5d9e:	38 f4       	brcc	.+14     	; 0x5dae <__divdi3+0x4f0>
    5da0:	8d a5       	lds	r24, 0x6d
    5da2:	9e a5       	lds	r25, 0x6e
    5da4:	af a5       	lds	r26, 0x6f
    5da6:	b8 a9       	sts	0x48, r27
    5da8:	02 97       	sbiw	r24, 0x02	; 2
    5daa:	a1 09       	sbc	r26, r1
    5dac:	b1 09       	sbc	r27, r1
    5dae:	09 a5       	lds	r16, 0x69
    5db0:	1a a5       	lds	r17, 0x6a
    5db2:	2b a5       	lds	r18, 0x6b
    5db4:	3c a5       	lds	r19, 0x6c
    5db6:	78 01       	movw	r14, r16
    5db8:	dd 24       	eor	r13, r13
    5dba:	cc 24       	eor	r12, r12
    5dbc:	c8 2a       	or	r12, r24
    5dbe:	d9 2a       	or	r13, r25
    5dc0:	ea 2a       	or	r14, r26
    5dc2:	fb 2a       	or	r15, r27
    5dc4:	b7 c4       	rjmp	.+2414   	; 0x6734 <__stack+0x735>
    5dc6:	81 14       	cp	r8, r1
    5dc8:	91 04       	cpc	r9, r1
    5dca:	a1 04       	cpc	r10, r1
    5dcc:	b1 04       	cpc	r11, r1
    5dce:	51 f4       	brne	.+20     	; 0x5de4 <__divdi3+0x526>
    5dd0:	61 e0       	ldi	r22, 0x01	; 1
    5dd2:	70 e0       	ldi	r23, 0x00	; 0
    5dd4:	80 e0       	ldi	r24, 0x00	; 0
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	a5 01       	movw	r20, r10
    5dda:	94 01       	movw	r18, r8
    5ddc:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    5de0:	49 01       	movw	r8, r18
    5de2:	5a 01       	movw	r10, r20
    5de4:	10 e0       	ldi	r17, 0x00	; 0
    5de6:	81 16       	cp	r8, r17
    5de8:	10 e0       	ldi	r17, 0x00	; 0
    5dea:	91 06       	cpc	r9, r17
    5dec:	11 e0       	ldi	r17, 0x01	; 1
    5dee:	a1 06       	cpc	r10, r17
    5df0:	10 e0       	ldi	r17, 0x00	; 0
    5df2:	b1 06       	cpc	r11, r17
    5df4:	58 f4       	brcc	.+22     	; 0x5e0c <__divdi3+0x54e>
    5df6:	2f ef       	ldi	r18, 0xFF	; 255
    5df8:	82 16       	cp	r8, r18
    5dfa:	91 04       	cpc	r9, r1
    5dfc:	a1 04       	cpc	r10, r1
    5dfe:	b1 04       	cpc	r11, r1
    5e00:	09 f0       	breq	.+2      	; 0x5e04 <__divdi3+0x546>
    5e02:	90 f4       	brcc	.+36     	; 0x5e28 <__divdi3+0x56a>
    5e04:	80 e0       	ldi	r24, 0x00	; 0
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	dc 01       	movw	r26, r24
    5e0a:	17 c0       	rjmp	.+46     	; 0x5e3a <__divdi3+0x57c>
    5e0c:	30 e0       	ldi	r19, 0x00	; 0
    5e0e:	83 16       	cp	r8, r19
    5e10:	30 e0       	ldi	r19, 0x00	; 0
    5e12:	93 06       	cpc	r9, r19
    5e14:	30 e0       	ldi	r19, 0x00	; 0
    5e16:	a3 06       	cpc	r10, r19
    5e18:	31 e0       	ldi	r19, 0x01	; 1
    5e1a:	b3 06       	cpc	r11, r19
    5e1c:	50 f4       	brcc	.+20     	; 0x5e32 <__divdi3+0x574>
    5e1e:	80 e1       	ldi	r24, 0x10	; 16
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	a0 e0       	ldi	r26, 0x00	; 0
    5e24:	b0 e0       	ldi	r27, 0x00	; 0
    5e26:	09 c0       	rjmp	.+18     	; 0x5e3a <__divdi3+0x57c>
    5e28:	88 e0       	ldi	r24, 0x08	; 8
    5e2a:	90 e0       	ldi	r25, 0x00	; 0
    5e2c:	a0 e0       	ldi	r26, 0x00	; 0
    5e2e:	b0 e0       	ldi	r27, 0x00	; 0
    5e30:	04 c0       	rjmp	.+8      	; 0x5e3a <__divdi3+0x57c>
    5e32:	88 e1       	ldi	r24, 0x18	; 24
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	a0 e0       	ldi	r26, 0x00	; 0
    5e38:	b0 e0       	ldi	r27, 0x00	; 0
    5e3a:	b5 01       	movw	r22, r10
    5e3c:	a4 01       	movw	r20, r8
    5e3e:	08 2e       	mov	r0, r24
    5e40:	04 c0       	rjmp	.+8      	; 0x5e4a <__divdi3+0x58c>
    5e42:	76 95       	lsr	r23
    5e44:	67 95       	ror	r22
    5e46:	57 95       	ror	r21
    5e48:	47 95       	ror	r20
    5e4a:	0a 94       	dec	r0
    5e4c:	d2 f7       	brpl	.-12     	; 0x5e42 <__divdi3+0x584>
    5e4e:	fa 01       	movw	r30, r20
    5e50:	ef 5d       	subi	r30, 0xDF	; 223
    5e52:	ff 4d       	sbci	r31, 0xDF	; 223
    5e54:	20 81       	ld	r18, Z
    5e56:	ac 01       	movw	r20, r24
    5e58:	bd 01       	movw	r22, r26
    5e5a:	42 0f       	add	r20, r18
    5e5c:	51 1d       	adc	r21, r1
    5e5e:	61 1d       	adc	r22, r1
    5e60:	71 1d       	adc	r23, r1
    5e62:	80 e2       	ldi	r24, 0x20	; 32
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	a0 e0       	ldi	r26, 0x00	; 0
    5e68:	b0 e0       	ldi	r27, 0x00	; 0
    5e6a:	84 1b       	sub	r24, r20
    5e6c:	95 0b       	sbc	r25, r21
    5e6e:	a6 0b       	sbc	r26, r22
    5e70:	b7 0b       	sbc	r27, r23
    5e72:	51 f4       	brne	.+20     	; 0x5e88 <__divdi3+0x5ca>
    5e74:	c8 18       	sub	r12, r8
    5e76:	d9 08       	sbc	r13, r9
    5e78:	ea 08       	sbc	r14, r10
    5e7a:	fb 08       	sbc	r15, r11
    5e7c:	f1 e0       	ldi	r31, 0x01	; 1
    5e7e:	4f 2e       	mov	r4, r31
    5e80:	51 2c       	mov	r5, r1
    5e82:	61 2c       	mov	r6, r1
    5e84:	71 2c       	mov	r7, r1
    5e86:	28 c1       	rjmp	.+592    	; 0x60d8 <__stack+0xd9>
    5e88:	08 2e       	mov	r0, r24
    5e8a:	04 c0       	rjmp	.+8      	; 0x5e94 <__divdi3+0x5d6>
    5e8c:	88 0c       	add	r8, r8
    5e8e:	99 1c       	adc	r9, r9
    5e90:	aa 1c       	adc	r10, r10
    5e92:	bb 1c       	adc	r11, r11
    5e94:	0a 94       	dec	r0
    5e96:	d2 f7       	brpl	.-12     	; 0x5e8c <__divdi3+0x5ce>
    5e98:	97 01       	movw	r18, r14
    5e9a:	86 01       	movw	r16, r12
    5e9c:	04 2e       	mov	r0, r20
    5e9e:	04 c0       	rjmp	.+8      	; 0x5ea8 <__divdi3+0x5ea>
    5ea0:	36 95       	lsr	r19
    5ea2:	27 95       	ror	r18
    5ea4:	17 95       	ror	r17
    5ea6:	07 95       	ror	r16
    5ea8:	0a 94       	dec	r0
    5eaa:	d2 f7       	brpl	.-12     	; 0x5ea0 <__divdi3+0x5e2>
    5eac:	09 ab       	sts	0x59, r16
    5eae:	1a ab       	sts	0x5a, r17
    5eb0:	2b ab       	sts	0x5b, r18
    5eb2:	3c ab       	sts	0x5c, r19
    5eb4:	97 01       	movw	r18, r14
    5eb6:	86 01       	movw	r16, r12
    5eb8:	08 2e       	mov	r0, r24
    5eba:	04 c0       	rjmp	.+8      	; 0x5ec4 <__divdi3+0x606>
    5ebc:	00 0f       	add	r16, r16
    5ebe:	11 1f       	adc	r17, r17
    5ec0:	22 1f       	adc	r18, r18
    5ec2:	33 1f       	adc	r19, r19
    5ec4:	0a 94       	dec	r0
    5ec6:	d2 f7       	brpl	.-12     	; 0x5ebc <__divdi3+0x5fe>
    5ec8:	0d a7       	lds	r16, 0x7d
    5eca:	1e a7       	lds	r17, 0x7e
    5ecc:	2f a7       	lds	r18, 0x7f
    5ece:	38 ab       	sts	0x58, r19
    5ed0:	ed a8       	sts	0x8d, r30
    5ed2:	fe a8       	sts	0x8e, r31
    5ed4:	0f a9       	sts	0x4f, r16
    5ed6:	18 ad       	sts	0x68, r17
    5ed8:	04 c0       	rjmp	.+8      	; 0x5ee2 <__divdi3+0x624>
    5eda:	16 95       	lsr	r17
    5edc:	07 95       	ror	r16
    5ede:	f7 94       	ror	r15
    5ee0:	e7 94       	ror	r14
    5ee2:	4a 95       	dec	r20
    5ee4:	d2 f7       	brpl	.-12     	; 0x5eda <__divdi3+0x61c>
    5ee6:	b8 01       	movw	r22, r16
    5ee8:	a7 01       	movw	r20, r14
    5eea:	0d a5       	lds	r16, 0x6d
    5eec:	1e a5       	lds	r17, 0x6e
    5eee:	2f a5       	lds	r18, 0x6f
    5ef0:	38 a9       	sts	0x48, r19
    5ef2:	04 2b       	or	r16, r20
    5ef4:	15 2b       	or	r17, r21
    5ef6:	26 2b       	or	r18, r22
    5ef8:	37 2b       	or	r19, r23
    5efa:	0d a7       	lds	r16, 0x7d
    5efc:	1e a7       	lds	r17, 0x7e
    5efe:	2f a7       	lds	r18, 0x7f
    5f00:	38 ab       	sts	0x58, r19
    5f02:	ed a8       	sts	0x8d, r30
    5f04:	fe a8       	sts	0x8e, r31
    5f06:	0f a9       	sts	0x4f, r16
    5f08:	18 ad       	sts	0x68, r17
    5f0a:	04 c0       	rjmp	.+8      	; 0x5f14 <__divdi3+0x656>
    5f0c:	ee 0c       	add	r14, r14
    5f0e:	ff 1c       	adc	r15, r15
    5f10:	00 1f       	adc	r16, r16
    5f12:	11 1f       	adc	r17, r17
    5f14:	8a 95       	dec	r24
    5f16:	d2 f7       	brpl	.-12     	; 0x5f0c <__divdi3+0x64e>
    5f18:	ed aa       	sts	0x9d, r30
    5f1a:	fe aa       	sts	0x9e, r31
    5f1c:	0f ab       	sts	0x5f, r16
    5f1e:	18 af       	sts	0x78, r17
    5f20:	25 01       	movw	r4, r10
    5f22:	66 24       	eor	r6, r6
    5f24:	77 24       	eor	r7, r7
    5f26:	95 01       	movw	r18, r10
    5f28:	84 01       	movw	r16, r8
    5f2a:	20 70       	andi	r18, 0x00	; 0
    5f2c:	30 70       	andi	r19, 0x00	; 0
    5f2e:	09 af       	sts	0x79, r16
    5f30:	1a af       	sts	0x7a, r17
    5f32:	2b af       	sts	0x7b, r18
    5f34:	3c af       	sts	0x7c, r19
    5f36:	69 a9       	sts	0x49, r22
    5f38:	7a a9       	sts	0x4a, r23
    5f3a:	8b a9       	sts	0x4b, r24
    5f3c:	9c a9       	sts	0x4c, r25
    5f3e:	a3 01       	movw	r20, r6
    5f40:	92 01       	movw	r18, r4
    5f42:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    5f46:	29 a7       	lds	r18, 0x79
    5f48:	3a a7       	lds	r19, 0x7a
    5f4a:	4b a7       	lds	r20, 0x7b
    5f4c:	5c a7       	lds	r21, 0x7c
    5f4e:	6b 01       	movw	r12, r22
    5f50:	7c 01       	movw	r14, r24
    5f52:	69 a9       	sts	0x49, r22
    5f54:	7a a9       	sts	0x4a, r23
    5f56:	8b a9       	sts	0x4b, r24
    5f58:	9c a9       	sts	0x4c, r25
    5f5a:	a3 01       	movw	r20, r6
    5f5c:	92 01       	movw	r18, r4
    5f5e:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    5f62:	ca 01       	movw	r24, r20
    5f64:	b9 01       	movw	r22, r18
    5f66:	29 ad       	sts	0x69, r18
    5f68:	3a ad       	sts	0x6a, r19
    5f6a:	4b ad       	sts	0x6b, r20
    5f6c:	5c ad       	sts	0x6c, r21
    5f6e:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    5f72:	ab 01       	movw	r20, r22
    5f74:	bc 01       	movw	r22, r24
    5f76:	76 01       	movw	r14, r12
    5f78:	dd 24       	eor	r13, r13
    5f7a:	cc 24       	eor	r12, r12
    5f7c:	0d a5       	lds	r16, 0x6d
    5f7e:	1e a5       	lds	r17, 0x6e
    5f80:	2f a5       	lds	r18, 0x6f
    5f82:	38 a9       	sts	0x48, r19
    5f84:	c9 01       	movw	r24, r18
    5f86:	aa 27       	eor	r26, r26
    5f88:	bb 27       	eor	r27, r27
    5f8a:	c8 2a       	or	r12, r24
    5f8c:	d9 2a       	or	r13, r25
    5f8e:	ea 2a       	or	r14, r26
    5f90:	fb 2a       	or	r15, r27
    5f92:	09 a5       	lds	r16, 0x69
    5f94:	1a a5       	lds	r17, 0x6a
    5f96:	2b a5       	lds	r18, 0x6b
    5f98:	3c a5       	lds	r19, 0x6c
    5f9a:	c4 16       	cp	r12, r20
    5f9c:	d5 06       	cpc	r13, r21
    5f9e:	e6 06       	cpc	r14, r22
    5fa0:	f7 06       	cpc	r15, r23
    5fa2:	38 f5       	brcc	.+78     	; 0x5ff2 <__divdi3+0x734>
    5fa4:	01 50       	subi	r16, 0x01	; 1
    5fa6:	10 40       	sbci	r17, 0x00	; 0
    5fa8:	20 40       	sbci	r18, 0x00	; 0
    5faa:	30 40       	sbci	r19, 0x00	; 0
    5fac:	09 ab       	sts	0x59, r16
    5fae:	1a ab       	sts	0x5a, r17
    5fb0:	2b ab       	sts	0x5b, r18
    5fb2:	3c ab       	sts	0x5c, r19
    5fb4:	c8 0c       	add	r12, r8
    5fb6:	d9 1c       	adc	r13, r9
    5fb8:	ea 1c       	adc	r14, r10
    5fba:	fb 1c       	adc	r15, r11
    5fbc:	c8 14       	cp	r12, r8
    5fbe:	d9 04       	cpc	r13, r9
    5fc0:	ea 04       	cpc	r14, r10
    5fc2:	fb 04       	cpc	r15, r11
    5fc4:	d0 f0       	brcs	.+52     	; 0x5ffa <__divdi3+0x73c>
    5fc6:	c4 16       	cp	r12, r20
    5fc8:	d5 06       	cpc	r13, r21
    5fca:	e6 06       	cpc	r14, r22
    5fcc:	f7 06       	cpc	r15, r23
    5fce:	a8 f4       	brcc	.+42     	; 0x5ffa <__divdi3+0x73c>
    5fd0:	09 a5       	lds	r16, 0x69
    5fd2:	1a a5       	lds	r17, 0x6a
    5fd4:	2b a5       	lds	r18, 0x6b
    5fd6:	3c a5       	lds	r19, 0x6c
    5fd8:	02 50       	subi	r16, 0x02	; 2
    5fda:	10 40       	sbci	r17, 0x00	; 0
    5fdc:	20 40       	sbci	r18, 0x00	; 0
    5fde:	30 40       	sbci	r19, 0x00	; 0
    5fe0:	09 ab       	sts	0x59, r16
    5fe2:	1a ab       	sts	0x5a, r17
    5fe4:	2b ab       	sts	0x5b, r18
    5fe6:	3c ab       	sts	0x5c, r19
    5fe8:	c8 0c       	add	r12, r8
    5fea:	d9 1c       	adc	r13, r9
    5fec:	ea 1c       	adc	r14, r10
    5fee:	fb 1c       	adc	r15, r11
    5ff0:	04 c0       	rjmp	.+8      	; 0x5ffa <__divdi3+0x73c>
    5ff2:	09 ab       	sts	0x59, r16
    5ff4:	1a ab       	sts	0x5a, r17
    5ff6:	2b ab       	sts	0x5b, r18
    5ff8:	3c ab       	sts	0x5c, r19
    5ffa:	c4 1a       	sub	r12, r20
    5ffc:	d5 0a       	sbc	r13, r21
    5ffe:	e6 0a       	sbc	r14, r22
    6000:	f7 0a       	sbc	r15, r23
    6002:	c7 01       	movw	r24, r14
    6004:	b6 01       	movw	r22, r12
    6006:	a3 01       	movw	r20, r6
    6008:	92 01       	movw	r18, r4
    600a:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    600e:	29 a7       	lds	r18, 0x79
    6010:	3a a7       	lds	r19, 0x7a
    6012:	4b a7       	lds	r20, 0x7b
    6014:	5c a7       	lds	r21, 0x7c
    6016:	21 96       	adiw	r28, 0x01	; 1
    6018:	6c af       	sts	0x7c, r22
    601a:	7d af       	sts	0x7d, r23
    601c:	8e af       	sts	0x7e, r24
    601e:	9f af       	sts	0x7f, r25
    6020:	21 97       	sbiw	r28, 0x01	; 1
    6022:	c7 01       	movw	r24, r14
    6024:	b6 01       	movw	r22, r12
    6026:	a3 01       	movw	r20, r6
    6028:	92 01       	movw	r18, r4
    602a:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    602e:	ca 01       	movw	r24, r20
    6030:	b9 01       	movw	r22, r18
    6032:	29 ad       	sts	0x69, r18
    6034:	3a ad       	sts	0x6a, r19
    6036:	4b ad       	sts	0x6b, r20
    6038:	5c ad       	sts	0x6c, r21
    603a:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    603e:	8b 01       	movw	r16, r22
    6040:	9c 01       	movw	r18, r24
    6042:	21 96       	adiw	r28, 0x01	; 1
    6044:	4c ad       	sts	0x6c, r20
    6046:	5d ad       	sts	0x6d, r21
    6048:	6e ad       	sts	0x6e, r22
    604a:	7f ad       	sts	0x6f, r23
    604c:	21 97       	sbiw	r28, 0x01	; 1
    604e:	da 01       	movw	r26, r20
    6050:	99 27       	eor	r25, r25
    6052:	88 27       	eor	r24, r24
    6054:	4d a5       	lds	r20, 0x6d
    6056:	5e a5       	lds	r21, 0x6e
    6058:	6f a5       	lds	r22, 0x6f
    605a:	78 a9       	sts	0x48, r23
    605c:	60 70       	andi	r22, 0x00	; 0
    605e:	70 70       	andi	r23, 0x00	; 0
    6060:	84 2b       	or	r24, r20
    6062:	95 2b       	or	r25, r21
    6064:	a6 2b       	or	r26, r22
    6066:	b7 2b       	or	r27, r23
    6068:	49 a5       	lds	r20, 0x69
    606a:	5a a5       	lds	r21, 0x6a
    606c:	6b a5       	lds	r22, 0x6b
    606e:	7c a5       	lds	r23, 0x6c
    6070:	80 17       	cp	r24, r16
    6072:	91 07       	cpc	r25, r17
    6074:	a2 07       	cpc	r26, r18
    6076:	b3 07       	cpc	r27, r19
    6078:	f0 f4       	brcc	.+60     	; 0x60b6 <__stack+0xb7>
    607a:	41 50       	subi	r20, 0x01	; 1
    607c:	50 40       	sbci	r21, 0x00	; 0
    607e:	60 40       	sbci	r22, 0x00	; 0
    6080:	70 40       	sbci	r23, 0x00	; 0
    6082:	88 0d       	add	r24, r8
    6084:	99 1d       	adc	r25, r9
    6086:	aa 1d       	adc	r26, r10
    6088:	bb 1d       	adc	r27, r11
    608a:	88 15       	cp	r24, r8
    608c:	99 05       	cpc	r25, r9
    608e:	aa 05       	cpc	r26, r10
    6090:	bb 05       	cpc	r27, r11
    6092:	88 f0       	brcs	.+34     	; 0x60b6 <__stack+0xb7>
    6094:	80 17       	cp	r24, r16
    6096:	91 07       	cpc	r25, r17
    6098:	a2 07       	cpc	r26, r18
    609a:	b3 07       	cpc	r27, r19
    609c:	60 f4       	brcc	.+24     	; 0x60b6 <__stack+0xb7>
    609e:	49 a5       	lds	r20, 0x69
    60a0:	5a a5       	lds	r21, 0x6a
    60a2:	6b a5       	lds	r22, 0x6b
    60a4:	7c a5       	lds	r23, 0x6c
    60a6:	42 50       	subi	r20, 0x02	; 2
    60a8:	50 40       	sbci	r21, 0x00	; 0
    60aa:	60 40       	sbci	r22, 0x00	; 0
    60ac:	70 40       	sbci	r23, 0x00	; 0
    60ae:	88 0d       	add	r24, r8
    60b0:	99 1d       	adc	r25, r9
    60b2:	aa 1d       	adc	r26, r10
    60b4:	bb 1d       	adc	r27, r11
    60b6:	6c 01       	movw	r12, r24
    60b8:	7d 01       	movw	r14, r26
    60ba:	c0 1a       	sub	r12, r16
    60bc:	d1 0a       	sbc	r13, r17
    60be:	e2 0a       	sbc	r14, r18
    60c0:	f3 0a       	sbc	r15, r19
    60c2:	09 a9       	sts	0x49, r16
    60c4:	1a a9       	sts	0x4a, r17
    60c6:	2b a9       	sts	0x4b, r18
    60c8:	3c a9       	sts	0x4c, r19
    60ca:	38 01       	movw	r6, r16
    60cc:	55 24       	eor	r5, r5
    60ce:	44 24       	eor	r4, r4
    60d0:	44 2a       	or	r4, r20
    60d2:	55 2a       	or	r5, r21
    60d4:	66 2a       	or	r6, r22
    60d6:	77 2a       	or	r7, r23
    60d8:	85 01       	movw	r16, r10
    60da:	22 27       	eor	r18, r18
    60dc:	33 27       	eor	r19, r19
    60de:	0d a7       	lds	r16, 0x7d
    60e0:	1e a7       	lds	r17, 0x7e
    60e2:	2f a7       	lds	r18, 0x7f
    60e4:	38 ab       	sts	0x58, r19
    60e6:	95 01       	movw	r18, r10
    60e8:	84 01       	movw	r16, r8
    60ea:	20 70       	andi	r18, 0x00	; 0
    60ec:	30 70       	andi	r19, 0x00	; 0
    60ee:	09 af       	sts	0x79, r16
    60f0:	1a af       	sts	0x7a, r17
    60f2:	2b af       	sts	0x7b, r18
    60f4:	3c af       	sts	0x7c, r19
    60f6:	c7 01       	movw	r24, r14
    60f8:	b6 01       	movw	r22, r12
    60fa:	2d a5       	lds	r18, 0x6d
    60fc:	3e a5       	lds	r19, 0x6e
    60fe:	4f a5       	lds	r20, 0x6f
    6100:	58 a9       	sts	0x48, r21
    6102:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    6106:	29 a7       	lds	r18, 0x79
    6108:	3a a7       	lds	r19, 0x7a
    610a:	4b a7       	lds	r20, 0x7b
    610c:	5c a7       	lds	r21, 0x7c
    610e:	69 ab       	sts	0x59, r22
    6110:	7a ab       	sts	0x5a, r23
    6112:	8b ab       	sts	0x5b, r24
    6114:	9c ab       	sts	0x5c, r25
    6116:	c7 01       	movw	r24, r14
    6118:	b6 01       	movw	r22, r12
    611a:	2d a5       	lds	r18, 0x6d
    611c:	3e a5       	lds	r19, 0x6e
    611e:	4f a5       	lds	r20, 0x6f
    6120:	58 a9       	sts	0x48, r21
    6122:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    6126:	ca 01       	movw	r24, r20
    6128:	b9 01       	movw	r22, r18
    612a:	29 ad       	sts	0x69, r18
    612c:	3a ad       	sts	0x6a, r19
    612e:	4b ad       	sts	0x6b, r20
    6130:	5c ad       	sts	0x6c, r21
    6132:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    6136:	ab 01       	movw	r20, r22
    6138:	bc 01       	movw	r22, r24
    613a:	09 a9       	sts	0x49, r16
    613c:	1a a9       	sts	0x4a, r17
    613e:	2b a9       	sts	0x4b, r18
    6140:	3c a9       	sts	0x4c, r19
    6142:	78 01       	movw	r14, r16
    6144:	dd 24       	eor	r13, r13
    6146:	cc 24       	eor	r12, r12
    6148:	0d a9       	sts	0x4d, r16
    614a:	1e a9       	sts	0x4e, r17
    614c:	2f a9       	sts	0x4f, r18
    614e:	38 ad       	sts	0x68, r19
    6150:	c9 01       	movw	r24, r18
    6152:	aa 27       	eor	r26, r26
    6154:	bb 27       	eor	r27, r27
    6156:	c8 2a       	or	r12, r24
    6158:	d9 2a       	or	r13, r25
    615a:	ea 2a       	or	r14, r26
    615c:	fb 2a       	or	r15, r27
    615e:	09 a5       	lds	r16, 0x69
    6160:	1a a5       	lds	r17, 0x6a
    6162:	2b a5       	lds	r18, 0x6b
    6164:	3c a5       	lds	r19, 0x6c
    6166:	c4 16       	cp	r12, r20
    6168:	d5 06       	cpc	r13, r21
    616a:	e6 06       	cpc	r14, r22
    616c:	f7 06       	cpc	r15, r23
    616e:	38 f5       	brcc	.+78     	; 0x61be <__stack+0x1bf>
    6170:	01 50       	subi	r16, 0x01	; 1
    6172:	10 40       	sbci	r17, 0x00	; 0
    6174:	20 40       	sbci	r18, 0x00	; 0
    6176:	30 40       	sbci	r19, 0x00	; 0
    6178:	09 ab       	sts	0x59, r16
    617a:	1a ab       	sts	0x5a, r17
    617c:	2b ab       	sts	0x5b, r18
    617e:	3c ab       	sts	0x5c, r19
    6180:	c8 0c       	add	r12, r8
    6182:	d9 1c       	adc	r13, r9
    6184:	ea 1c       	adc	r14, r10
    6186:	fb 1c       	adc	r15, r11
    6188:	c8 14       	cp	r12, r8
    618a:	d9 04       	cpc	r13, r9
    618c:	ea 04       	cpc	r14, r10
    618e:	fb 04       	cpc	r15, r11
    6190:	d0 f0       	brcs	.+52     	; 0x61c6 <__stack+0x1c7>
    6192:	c4 16       	cp	r12, r20
    6194:	d5 06       	cpc	r13, r21
    6196:	e6 06       	cpc	r14, r22
    6198:	f7 06       	cpc	r15, r23
    619a:	a8 f4       	brcc	.+42     	; 0x61c6 <__stack+0x1c7>
    619c:	09 a5       	lds	r16, 0x69
    619e:	1a a5       	lds	r17, 0x6a
    61a0:	2b a5       	lds	r18, 0x6b
    61a2:	3c a5       	lds	r19, 0x6c
    61a4:	02 50       	subi	r16, 0x02	; 2
    61a6:	10 40       	sbci	r17, 0x00	; 0
    61a8:	20 40       	sbci	r18, 0x00	; 0
    61aa:	30 40       	sbci	r19, 0x00	; 0
    61ac:	09 ab       	sts	0x59, r16
    61ae:	1a ab       	sts	0x5a, r17
    61b0:	2b ab       	sts	0x5b, r18
    61b2:	3c ab       	sts	0x5c, r19
    61b4:	c8 0c       	add	r12, r8
    61b6:	d9 1c       	adc	r13, r9
    61b8:	ea 1c       	adc	r14, r10
    61ba:	fb 1c       	adc	r15, r11
    61bc:	04 c0       	rjmp	.+8      	; 0x61c6 <__stack+0x1c7>
    61be:	09 ab       	sts	0x59, r16
    61c0:	1a ab       	sts	0x5a, r17
    61c2:	2b ab       	sts	0x5b, r18
    61c4:	3c ab       	sts	0x5c, r19
    61c6:	c4 1a       	sub	r12, r20
    61c8:	d5 0a       	sbc	r13, r21
    61ca:	e6 0a       	sbc	r14, r22
    61cc:	f7 0a       	sbc	r15, r23
    61ce:	c7 01       	movw	r24, r14
    61d0:	b6 01       	movw	r22, r12
    61d2:	2d a5       	lds	r18, 0x6d
    61d4:	3e a5       	lds	r19, 0x6e
    61d6:	4f a5       	lds	r20, 0x6f
    61d8:	58 a9       	sts	0x48, r21
    61da:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    61de:	29 a7       	lds	r18, 0x79
    61e0:	3a a7       	lds	r19, 0x7a
    61e2:	4b a7       	lds	r20, 0x7b
    61e4:	5c a7       	lds	r21, 0x7c
    61e6:	21 96       	adiw	r28, 0x01	; 1
    61e8:	6c af       	sts	0x7c, r22
    61ea:	7d af       	sts	0x7d, r23
    61ec:	8e af       	sts	0x7e, r24
    61ee:	9f af       	sts	0x7f, r25
    61f0:	21 97       	sbiw	r28, 0x01	; 1
    61f2:	c7 01       	movw	r24, r14
    61f4:	b6 01       	movw	r22, r12
    61f6:	2d a5       	lds	r18, 0x6d
    61f8:	3e a5       	lds	r19, 0x6e
    61fa:	4f a5       	lds	r20, 0x6f
    61fc:	58 a9       	sts	0x48, r21
    61fe:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    6202:	ca 01       	movw	r24, r20
    6204:	b9 01       	movw	r22, r18
    6206:	29 ad       	sts	0x69, r18
    6208:	3a ad       	sts	0x6a, r19
    620a:	4b ad       	sts	0x6b, r20
    620c:	5c ad       	sts	0x6c, r21
    620e:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    6212:	8b 01       	movw	r16, r22
    6214:	9c 01       	movw	r18, r24
    6216:	21 96       	adiw	r28, 0x01	; 1
    6218:	4c ad       	sts	0x6c, r20
    621a:	5d ad       	sts	0x6d, r21
    621c:	6e ad       	sts	0x6e, r22
    621e:	7f ad       	sts	0x6f, r23
    6220:	21 97       	sbiw	r28, 0x01	; 1
    6222:	da 01       	movw	r26, r20
    6224:	99 27       	eor	r25, r25
    6226:	88 27       	eor	r24, r24
    6228:	4d a9       	sts	0x4d, r20
    622a:	5e a9       	sts	0x4e, r21
    622c:	6f a9       	sts	0x4f, r22
    622e:	78 ad       	sts	0x68, r23
    6230:	60 70       	andi	r22, 0x00	; 0
    6232:	70 70       	andi	r23, 0x00	; 0
    6234:	84 2b       	or	r24, r20
    6236:	95 2b       	or	r25, r21
    6238:	a6 2b       	or	r26, r22
    623a:	b7 2b       	or	r27, r23
    623c:	49 a5       	lds	r20, 0x69
    623e:	5a a5       	lds	r21, 0x6a
    6240:	6b a5       	lds	r22, 0x6b
    6242:	7c a5       	lds	r23, 0x6c
    6244:	80 17       	cp	r24, r16
    6246:	91 07       	cpc	r25, r17
    6248:	a2 07       	cpc	r26, r18
    624a:	b3 07       	cpc	r27, r19
    624c:	d0 f4       	brcc	.+52     	; 0x6282 <__stack+0x283>
    624e:	41 50       	subi	r20, 0x01	; 1
    6250:	50 40       	sbci	r21, 0x00	; 0
    6252:	60 40       	sbci	r22, 0x00	; 0
    6254:	70 40       	sbci	r23, 0x00	; 0
    6256:	88 0d       	add	r24, r8
    6258:	99 1d       	adc	r25, r9
    625a:	aa 1d       	adc	r26, r10
    625c:	bb 1d       	adc	r27, r11
    625e:	88 15       	cp	r24, r8
    6260:	99 05       	cpc	r25, r9
    6262:	aa 05       	cpc	r26, r10
    6264:	bb 05       	cpc	r27, r11
    6266:	68 f0       	brcs	.+26     	; 0x6282 <__stack+0x283>
    6268:	80 17       	cp	r24, r16
    626a:	91 07       	cpc	r25, r17
    626c:	a2 07       	cpc	r26, r18
    626e:	b3 07       	cpc	r27, r19
    6270:	40 f4       	brcc	.+16     	; 0x6282 <__stack+0x283>
    6272:	49 a5       	lds	r20, 0x69
    6274:	5a a5       	lds	r21, 0x6a
    6276:	6b a5       	lds	r22, 0x6b
    6278:	7c a5       	lds	r23, 0x6c
    627a:	42 50       	subi	r20, 0x02	; 2
    627c:	50 40       	sbci	r21, 0x00	; 0
    627e:	60 40       	sbci	r22, 0x00	; 0
    6280:	70 40       	sbci	r23, 0x00	; 0
    6282:	09 a9       	sts	0x49, r16
    6284:	1a a9       	sts	0x4a, r17
    6286:	2b a9       	sts	0x4b, r18
    6288:	3c a9       	sts	0x4c, r19
    628a:	78 01       	movw	r14, r16
    628c:	dd 24       	eor	r13, r13
    628e:	cc 24       	eor	r12, r12
    6290:	c4 2a       	or	r12, r20
    6292:	d5 2a       	or	r13, r21
    6294:	e6 2a       	or	r14, r22
    6296:	f7 2a       	or	r15, r23
    6298:	50 c2       	rjmp	.+1184   	; 0x673a <__stack+0x73b>
    629a:	c8 16       	cp	r12, r24
    629c:	d9 06       	cpc	r13, r25
    629e:	ea 06       	cpc	r14, r26
    62a0:	fb 06       	cpc	r15, r27
    62a2:	08 f4       	brcc	.+2      	; 0x62a6 <__stack+0x2a7>
    62a4:	37 c2       	rjmp	.+1134   	; 0x6714 <__stack+0x715>
    62a6:	80 30       	cpi	r24, 0x00	; 0
    62a8:	10 e0       	ldi	r17, 0x00	; 0
    62aa:	91 07       	cpc	r25, r17
    62ac:	11 e0       	ldi	r17, 0x01	; 1
    62ae:	a1 07       	cpc	r26, r17
    62b0:	10 e0       	ldi	r17, 0x00	; 0
    62b2:	b1 07       	cpc	r27, r17
    62b4:	50 f4       	brcc	.+20     	; 0x62ca <__stack+0x2cb>
    62b6:	8f 3f       	cpi	r24, 0xFF	; 255
    62b8:	91 05       	cpc	r25, r1
    62ba:	a1 05       	cpc	r26, r1
    62bc:	b1 05       	cpc	r27, r1
    62be:	09 f0       	breq	.+2      	; 0x62c2 <__stack+0x2c3>
    62c0:	88 f4       	brcc	.+34     	; 0x62e4 <__stack+0x2e5>
    62c2:	00 e0       	ldi	r16, 0x00	; 0
    62c4:	10 e0       	ldi	r17, 0x00	; 0
    62c6:	98 01       	movw	r18, r16
    62c8:	16 c0       	rjmp	.+44     	; 0x62f6 <__stack+0x2f7>
    62ca:	80 30       	cpi	r24, 0x00	; 0
    62cc:	20 e0       	ldi	r18, 0x00	; 0
    62ce:	92 07       	cpc	r25, r18
    62d0:	20 e0       	ldi	r18, 0x00	; 0
    62d2:	a2 07       	cpc	r26, r18
    62d4:	21 e0       	ldi	r18, 0x01	; 1
    62d6:	b2 07       	cpc	r27, r18
    62d8:	50 f4       	brcc	.+20     	; 0x62ee <__stack+0x2ef>
    62da:	00 e1       	ldi	r16, 0x10	; 16
    62dc:	10 e0       	ldi	r17, 0x00	; 0
    62de:	20 e0       	ldi	r18, 0x00	; 0
    62e0:	30 e0       	ldi	r19, 0x00	; 0
    62e2:	09 c0       	rjmp	.+18     	; 0x62f6 <__stack+0x2f7>
    62e4:	08 e0       	ldi	r16, 0x08	; 8
    62e6:	10 e0       	ldi	r17, 0x00	; 0
    62e8:	20 e0       	ldi	r18, 0x00	; 0
    62ea:	30 e0       	ldi	r19, 0x00	; 0
    62ec:	04 c0       	rjmp	.+8      	; 0x62f6 <__stack+0x2f7>
    62ee:	08 e1       	ldi	r16, 0x18	; 24
    62f0:	10 e0       	ldi	r17, 0x00	; 0
    62f2:	20 e0       	ldi	r18, 0x00	; 0
    62f4:	30 e0       	ldi	r19, 0x00	; 0
    62f6:	ac 01       	movw	r20, r24
    62f8:	bd 01       	movw	r22, r26
    62fa:	00 2e       	mov	r0, r16
    62fc:	04 c0       	rjmp	.+8      	; 0x6306 <__stack+0x307>
    62fe:	76 95       	lsr	r23
    6300:	67 95       	ror	r22
    6302:	57 95       	ror	r21
    6304:	47 95       	ror	r20
    6306:	0a 94       	dec	r0
    6308:	d2 f7       	brpl	.-12     	; 0x62fe <__stack+0x2ff>
    630a:	fa 01       	movw	r30, r20
    630c:	ef 5d       	subi	r30, 0xDF	; 223
    630e:	ff 4d       	sbci	r31, 0xDF	; 223
    6310:	40 81       	ld	r20, Z
    6312:	04 0f       	add	r16, r20
    6314:	11 1d       	adc	r17, r1
    6316:	21 1d       	adc	r18, r1
    6318:	31 1d       	adc	r19, r1
    631a:	40 e2       	ldi	r20, 0x20	; 32
    631c:	50 e0       	ldi	r21, 0x00	; 0
    631e:	60 e0       	ldi	r22, 0x00	; 0
    6320:	70 e0       	ldi	r23, 0x00	; 0
    6322:	40 1b       	sub	r20, r16
    6324:	51 0b       	sbc	r21, r17
    6326:	62 0b       	sbc	r22, r18
    6328:	73 0b       	sbc	r23, r19
    632a:	a1 f4       	brne	.+40     	; 0x6354 <__stack+0x355>
    632c:	8c 15       	cp	r24, r12
    632e:	9d 05       	cpc	r25, r13
    6330:	ae 05       	cpc	r26, r14
    6332:	bf 05       	cpc	r27, r15
    6334:	08 f4       	brcc	.+2      	; 0x6338 <__stack+0x339>
    6336:	f5 c1       	rjmp	.+1002   	; 0x6722 <__stack+0x723>
    6338:	ed a8       	sts	0x8d, r30
    633a:	fe a8       	sts	0x8e, r31
    633c:	0f a9       	sts	0x4f, r16
    633e:	18 ad       	sts	0x68, r17
    6340:	44 24       	eor	r4, r4
    6342:	55 24       	eor	r5, r5
    6344:	32 01       	movw	r6, r4
    6346:	e8 14       	cp	r14, r8
    6348:	f9 04       	cpc	r15, r9
    634a:	0a 05       	cpc	r16, r10
    634c:	1b 05       	cpc	r17, r11
    634e:	08 f0       	brcs	.+2      	; 0x6352 <__stack+0x353>
    6350:	eb c1       	rjmp	.+982    	; 0x6728 <__stack+0x729>
    6352:	e3 c1       	rjmp	.+966    	; 0x671a <__stack+0x71b>
    6354:	34 2e       	mov	r3, r20
    6356:	2c 01       	movw	r4, r24
    6358:	3d 01       	movw	r6, r26
    635a:	04 c0       	rjmp	.+8      	; 0x6364 <__stack+0x365>
    635c:	44 0c       	add	r4, r4
    635e:	55 1c       	adc	r5, r5
    6360:	66 1c       	adc	r6, r6
    6362:	77 1c       	adc	r7, r7
    6364:	4a 95       	dec	r20
    6366:	d2 f7       	brpl	.-12     	; 0x635c <__stack+0x35d>
    6368:	d5 01       	movw	r26, r10
    636a:	c4 01       	movw	r24, r8
    636c:	00 2e       	mov	r0, r16
    636e:	04 c0       	rjmp	.+8      	; 0x6378 <__stack+0x379>
    6370:	b6 95       	lsr	r27
    6372:	a7 95       	ror	r26
    6374:	97 95       	ror	r25
    6376:	87 95       	ror	r24
    6378:	0a 94       	dec	r0
    637a:	d2 f7       	brpl	.-12     	; 0x6370 <__stack+0x371>
    637c:	48 2a       	or	r4, r24
    637e:	59 2a       	or	r5, r25
    6380:	6a 2a       	or	r6, r26
    6382:	7b 2a       	or	r7, r27
    6384:	a5 01       	movw	r20, r10
    6386:	94 01       	movw	r18, r8
    6388:	03 2c       	mov	r0, r3
    638a:	04 c0       	rjmp	.+8      	; 0x6394 <__stack+0x395>
    638c:	22 0f       	add	r18, r18
    638e:	33 1f       	adc	r19, r19
    6390:	44 1f       	adc	r20, r20
    6392:	55 1f       	adc	r21, r21
    6394:	0a 94       	dec	r0
    6396:	d2 f7       	brpl	.-12     	; 0x638c <__stack+0x38d>
    6398:	29 af       	sts	0x79, r18
    639a:	3a af       	sts	0x7a, r19
    639c:	4b af       	sts	0x7b, r20
    639e:	5c af       	sts	0x7c, r21
    63a0:	b7 01       	movw	r22, r14
    63a2:	a6 01       	movw	r20, r12
    63a4:	00 2e       	mov	r0, r16
    63a6:	04 c0       	rjmp	.+8      	; 0x63b0 <__stack+0x3b1>
    63a8:	76 95       	lsr	r23
    63aa:	67 95       	ror	r22
    63ac:	57 95       	ror	r21
    63ae:	47 95       	ror	r20
    63b0:	0a 94       	dec	r0
    63b2:	d2 f7       	brpl	.-12     	; 0x63a8 <__stack+0x3a9>
    63b4:	49 ab       	sts	0x59, r20
    63b6:	5a ab       	sts	0x5a, r21
    63b8:	6b ab       	sts	0x5b, r22
    63ba:	7c ab       	sts	0x5c, r23
    63bc:	c7 01       	movw	r24, r14
    63be:	b6 01       	movw	r22, r12
    63c0:	03 2c       	mov	r0, r3
    63c2:	04 c0       	rjmp	.+8      	; 0x63cc <__stack+0x3cd>
    63c4:	66 0f       	add	r22, r22
    63c6:	77 1f       	adc	r23, r23
    63c8:	88 1f       	adc	r24, r24
    63ca:	99 1f       	adc	r25, r25
    63cc:	0a 94       	dec	r0
    63ce:	d2 f7       	brpl	.-12     	; 0x63c4 <__stack+0x3c5>
    63d0:	6d a7       	lds	r22, 0x7d
    63d2:	7e a7       	lds	r23, 0x7e
    63d4:	8f a7       	lds	r24, 0x7f
    63d6:	98 ab       	sts	0x58, r25
    63d8:	8d a9       	sts	0x4d, r24
    63da:	9e a9       	sts	0x4e, r25
    63dc:	af a9       	sts	0x4f, r26
    63de:	b8 ad       	sts	0x68, r27
    63e0:	04 c0       	rjmp	.+8      	; 0x63ea <__stack+0x3eb>
    63e2:	b6 95       	lsr	r27
    63e4:	a7 95       	ror	r26
    63e6:	97 95       	ror	r25
    63e8:	87 95       	ror	r24
    63ea:	0a 95       	dec	r16
    63ec:	d2 f7       	brpl	.-12     	; 0x63e2 <__stack+0x3e3>
    63ee:	4d a5       	lds	r20, 0x6d
    63f0:	5e a5       	lds	r21, 0x6e
    63f2:	6f a5       	lds	r22, 0x6f
    63f4:	78 a9       	sts	0x48, r23
    63f6:	48 2b       	or	r20, r24
    63f8:	59 2b       	or	r21, r25
    63fa:	6a 2b       	or	r22, r26
    63fc:	7b 2b       	or	r23, r27
    63fe:	4d a7       	lds	r20, 0x7d
    6400:	5e a7       	lds	r21, 0x7e
    6402:	6f a7       	lds	r22, 0x7f
    6404:	78 ab       	sts	0x58, r23
    6406:	43 01       	movw	r8, r6
    6408:	aa 24       	eor	r10, r10
    640a:	bb 24       	eor	r11, r11
    640c:	93 01       	movw	r18, r6
    640e:	82 01       	movw	r16, r4
    6410:	20 70       	andi	r18, 0x00	; 0
    6412:	30 70       	andi	r19, 0x00	; 0
    6414:	21 96       	adiw	r28, 0x01	; 1
    6416:	0c af       	sts	0x7c, r16
    6418:	1d af       	sts	0x7d, r17
    641a:	2e af       	sts	0x7e, r18
    641c:	3f af       	sts	0x7f, r19
    641e:	21 97       	sbiw	r28, 0x01	; 1
    6420:	69 a9       	sts	0x49, r22
    6422:	7a a9       	sts	0x4a, r23
    6424:	8b a9       	sts	0x4b, r24
    6426:	9c a9       	sts	0x4c, r25
    6428:	a5 01       	movw	r20, r10
    642a:	94 01       	movw	r18, r8
    642c:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    6430:	29 a7       	lds	r18, 0x79
    6432:	3a a7       	lds	r19, 0x7a
    6434:	4b a7       	lds	r20, 0x7b
    6436:	5c a7       	lds	r21, 0x7c
    6438:	6b 01       	movw	r12, r22
    643a:	7c 01       	movw	r14, r24
    643c:	69 a9       	sts	0x49, r22
    643e:	7a a9       	sts	0x4a, r23
    6440:	8b a9       	sts	0x4b, r24
    6442:	9c a9       	sts	0x4c, r25
    6444:	a5 01       	movw	r20, r10
    6446:	94 01       	movw	r18, r8
    6448:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    644c:	ca 01       	movw	r24, r20
    644e:	b9 01       	movw	r22, r18
    6450:	21 96       	adiw	r28, 0x01	; 1
    6452:	2c ad       	sts	0x6c, r18
    6454:	3d ad       	sts	0x6d, r19
    6456:	4e ad       	sts	0x6e, r20
    6458:	5f ad       	sts	0x6f, r21
    645a:	21 97       	sbiw	r28, 0x01	; 1
    645c:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    6460:	dc 01       	movw	r26, r24
    6462:	cb 01       	movw	r24, r22
    6464:	76 01       	movw	r14, r12
    6466:	dd 24       	eor	r13, r13
    6468:	cc 24       	eor	r12, r12
    646a:	0d a5       	lds	r16, 0x6d
    646c:	1e a5       	lds	r17, 0x6e
    646e:	2f a5       	lds	r18, 0x6f
    6470:	38 a9       	sts	0x48, r19
    6472:	a9 01       	movw	r20, r18
    6474:	66 27       	eor	r22, r22
    6476:	77 27       	eor	r23, r23
    6478:	c4 2a       	or	r12, r20
    647a:	d5 2a       	or	r13, r21
    647c:	e6 2a       	or	r14, r22
    647e:	f7 2a       	or	r15, r23
    6480:	09 a5       	lds	r16, 0x69
    6482:	1a a5       	lds	r17, 0x6a
    6484:	2b a5       	lds	r18, 0x6b
    6486:	3c a5       	lds	r19, 0x6c
    6488:	c8 16       	cp	r12, r24
    648a:	d9 06       	cpc	r13, r25
    648c:	ea 06       	cpc	r14, r26
    648e:	fb 06       	cpc	r15, r27
    6490:	38 f5       	brcc	.+78     	; 0x64e0 <__stack+0x4e1>
    6492:	01 50       	subi	r16, 0x01	; 1
    6494:	10 40       	sbci	r17, 0x00	; 0
    6496:	20 40       	sbci	r18, 0x00	; 0
    6498:	30 40       	sbci	r19, 0x00	; 0
    649a:	09 ab       	sts	0x59, r16
    649c:	1a ab       	sts	0x5a, r17
    649e:	2b ab       	sts	0x5b, r18
    64a0:	3c ab       	sts	0x5c, r19
    64a2:	c4 0c       	add	r12, r4
    64a4:	d5 1c       	adc	r13, r5
    64a6:	e6 1c       	adc	r14, r6
    64a8:	f7 1c       	adc	r15, r7
    64aa:	c4 14       	cp	r12, r4
    64ac:	d5 04       	cpc	r13, r5
    64ae:	e6 04       	cpc	r14, r6
    64b0:	f7 04       	cpc	r15, r7
    64b2:	d0 f0       	brcs	.+52     	; 0x64e8 <__stack+0x4e9>
    64b4:	c8 16       	cp	r12, r24
    64b6:	d9 06       	cpc	r13, r25
    64b8:	ea 06       	cpc	r14, r26
    64ba:	fb 06       	cpc	r15, r27
    64bc:	a8 f4       	brcc	.+42     	; 0x64e8 <__stack+0x4e9>
    64be:	09 a5       	lds	r16, 0x69
    64c0:	1a a5       	lds	r17, 0x6a
    64c2:	2b a5       	lds	r18, 0x6b
    64c4:	3c a5       	lds	r19, 0x6c
    64c6:	02 50       	subi	r16, 0x02	; 2
    64c8:	10 40       	sbci	r17, 0x00	; 0
    64ca:	20 40       	sbci	r18, 0x00	; 0
    64cc:	30 40       	sbci	r19, 0x00	; 0
    64ce:	09 ab       	sts	0x59, r16
    64d0:	1a ab       	sts	0x5a, r17
    64d2:	2b ab       	sts	0x5b, r18
    64d4:	3c ab       	sts	0x5c, r19
    64d6:	c4 0c       	add	r12, r4
    64d8:	d5 1c       	adc	r13, r5
    64da:	e6 1c       	adc	r14, r6
    64dc:	f7 1c       	adc	r15, r7
    64de:	04 c0       	rjmp	.+8      	; 0x64e8 <__stack+0x4e9>
    64e0:	09 ab       	sts	0x59, r16
    64e2:	1a ab       	sts	0x5a, r17
    64e4:	2b ab       	sts	0x5b, r18
    64e6:	3c ab       	sts	0x5c, r19
    64e8:	c8 1a       	sub	r12, r24
    64ea:	d9 0a       	sbc	r13, r25
    64ec:	ea 0a       	sbc	r14, r26
    64ee:	fb 0a       	sbc	r15, r27
    64f0:	c7 01       	movw	r24, r14
    64f2:	b6 01       	movw	r22, r12
    64f4:	a5 01       	movw	r20, r10
    64f6:	94 01       	movw	r18, r8
    64f8:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    64fc:	29 a7       	lds	r18, 0x79
    64fe:	3a a7       	lds	r19, 0x7a
    6500:	4b a7       	lds	r20, 0x7b
    6502:	5c a7       	lds	r21, 0x7c
    6504:	29 96       	adiw	r28, 0x09	; 9
    6506:	6c af       	sts	0x7c, r22
    6508:	7d af       	sts	0x7d, r23
    650a:	8e af       	sts	0x7e, r24
    650c:	9f af       	sts	0x7f, r25
    650e:	29 97       	sbiw	r28, 0x09	; 9
    6510:	c7 01       	movw	r24, r14
    6512:	b6 01       	movw	r22, r12
    6514:	a5 01       	movw	r20, r10
    6516:	94 01       	movw	r18, r8
    6518:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    651c:	ca 01       	movw	r24, r20
    651e:	b9 01       	movw	r22, r18
    6520:	21 96       	adiw	r28, 0x01	; 1
    6522:	2c ad       	sts	0x6c, r18
    6524:	3d ad       	sts	0x6d, r19
    6526:	4e ad       	sts	0x6e, r20
    6528:	5f ad       	sts	0x6f, r21
    652a:	21 97       	sbiw	r28, 0x01	; 1
    652c:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    6530:	4b 01       	movw	r8, r22
    6532:	5c 01       	movw	r10, r24
    6534:	29 96       	adiw	r28, 0x09	; 9
    6536:	4c ad       	sts	0x6c, r20
    6538:	5d ad       	sts	0x6d, r21
    653a:	6e ad       	sts	0x6e, r22
    653c:	7f ad       	sts	0x6f, r23
    653e:	29 97       	sbiw	r28, 0x09	; 9
    6540:	9a 01       	movw	r18, r20
    6542:	11 27       	eor	r17, r17
    6544:	00 27       	eor	r16, r16
    6546:	8d a5       	lds	r24, 0x6d
    6548:	9e a5       	lds	r25, 0x6e
    654a:	af a5       	lds	r26, 0x6f
    654c:	b8 a9       	sts	0x48, r27
    654e:	a0 70       	andi	r26, 0x00	; 0
    6550:	b0 70       	andi	r27, 0x00	; 0
    6552:	08 2b       	or	r16, r24
    6554:	19 2b       	or	r17, r25
    6556:	2a 2b       	or	r18, r26
    6558:	3b 2b       	or	r19, r27
    655a:	89 a5       	lds	r24, 0x69
    655c:	9a a5       	lds	r25, 0x6a
    655e:	ab a5       	lds	r26, 0x6b
    6560:	bc a5       	lds	r27, 0x6c
    6562:	08 15       	cp	r16, r8
    6564:	19 05       	cpc	r17, r9
    6566:	2a 05       	cpc	r18, r10
    6568:	3b 05       	cpc	r19, r11
    656a:	e0 f4       	brcc	.+56     	; 0x65a4 <__stack+0x5a5>
    656c:	01 97       	sbiw	r24, 0x01	; 1
    656e:	a1 09       	sbc	r26, r1
    6570:	b1 09       	sbc	r27, r1
    6572:	04 0d       	add	r16, r4
    6574:	15 1d       	adc	r17, r5
    6576:	26 1d       	adc	r18, r6
    6578:	37 1d       	adc	r19, r7
    657a:	04 15       	cp	r16, r4
    657c:	15 05       	cpc	r17, r5
    657e:	26 05       	cpc	r18, r6
    6580:	37 05       	cpc	r19, r7
    6582:	80 f0       	brcs	.+32     	; 0x65a4 <__stack+0x5a5>
    6584:	08 15       	cp	r16, r8
    6586:	19 05       	cpc	r17, r9
    6588:	2a 05       	cpc	r18, r10
    658a:	3b 05       	cpc	r19, r11
    658c:	58 f4       	brcc	.+22     	; 0x65a4 <__stack+0x5a5>
    658e:	89 a5       	lds	r24, 0x69
    6590:	9a a5       	lds	r25, 0x6a
    6592:	ab a5       	lds	r26, 0x6b
    6594:	bc a5       	lds	r27, 0x6c
    6596:	02 97       	sbiw	r24, 0x02	; 2
    6598:	a1 09       	sbc	r26, r1
    659a:	b1 09       	sbc	r27, r1
    659c:	04 0d       	add	r16, r4
    659e:	15 1d       	adc	r17, r5
    65a0:	26 1d       	adc	r18, r6
    65a2:	37 1d       	adc	r19, r7
    65a4:	b9 01       	movw	r22, r18
    65a6:	a8 01       	movw	r20, r16
    65a8:	48 19       	sub	r20, r8
    65aa:	59 09       	sbc	r21, r9
    65ac:	6a 09       	sbc	r22, r10
    65ae:	7b 09       	sbc	r23, r11
    65b0:	4d a7       	lds	r20, 0x7d
    65b2:	5e a7       	lds	r21, 0x7e
    65b4:	6f a7       	lds	r22, 0x7f
    65b6:	78 ab       	sts	0x58, r23
    65b8:	09 a9       	sts	0x49, r16
    65ba:	1a a9       	sts	0x4a, r17
    65bc:	2b a9       	sts	0x4b, r18
    65be:	3c a9       	sts	0x4c, r19
    65c0:	78 01       	movw	r14, r16
    65c2:	dd 24       	eor	r13, r13
    65c4:	cc 24       	eor	r12, r12
    65c6:	c8 2a       	or	r12, r24
    65c8:	d9 2a       	or	r13, r25
    65ca:	ea 2a       	or	r14, r26
    65cc:	fb 2a       	or	r15, r27
    65ce:	ff ef       	ldi	r31, 0xFF	; 255
    65d0:	8f 2e       	mov	r8, r31
    65d2:	ff ef       	ldi	r31, 0xFF	; 255
    65d4:	9f 2e       	mov	r9, r31
    65d6:	a1 2c       	mov	r10, r1
    65d8:	b1 2c       	mov	r11, r1
    65da:	8c 20       	and	r8, r12
    65dc:	9d 20       	and	r9, r13
    65de:	ae 20       	and	r10, r14
    65e0:	bf 20       	and	r11, r15
    65e2:	87 01       	movw	r16, r14
    65e4:	22 27       	eor	r18, r18
    65e6:	33 27       	eor	r19, r19
    65e8:	09 a7       	lds	r16, 0x79
    65ea:	1a a7       	lds	r17, 0x7a
    65ec:	2b a7       	lds	r18, 0x7b
    65ee:	3c a7       	lds	r19, 0x7c
    65f0:	49 ac       	sts	0xa9, r20
    65f2:	5a ac       	sts	0xaa, r21
    65f4:	6b ac       	sts	0xab, r22
    65f6:	7c ac       	sts	0xac, r23
    65f8:	2f ef       	ldi	r18, 0xFF	; 255
    65fa:	3f ef       	ldi	r19, 0xFF	; 255
    65fc:	40 e0       	ldi	r20, 0x00	; 0
    65fe:	50 e0       	ldi	r21, 0x00	; 0
    6600:	42 22       	and	r4, r18
    6602:	53 22       	and	r5, r19
    6604:	64 22       	and	r6, r20
    6606:	75 22       	and	r7, r21
    6608:	29 ad       	sts	0x69, r18
    660a:	3a ad       	sts	0x6a, r19
    660c:	4b ad       	sts	0x6b, r20
    660e:	5c ad       	sts	0x6c, r21
    6610:	8a 01       	movw	r16, r20
    6612:	22 27       	eor	r18, r18
    6614:	33 27       	eor	r19, r19
    6616:	09 ab       	sts	0x59, r16
    6618:	1a ab       	sts	0x5a, r17
    661a:	2b ab       	sts	0x5b, r18
    661c:	3c ab       	sts	0x5c, r19
    661e:	c5 01       	movw	r24, r10
    6620:	b4 01       	movw	r22, r8
    6622:	a3 01       	movw	r20, r6
    6624:	92 01       	movw	r18, r4
    6626:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    662a:	69 af       	sts	0x79, r22
    662c:	7a af       	sts	0x7a, r23
    662e:	8b af       	sts	0x7b, r24
    6630:	9c af       	sts	0x7c, r25
    6632:	c5 01       	movw	r24, r10
    6634:	b4 01       	movw	r22, r8
    6636:	29 a9       	sts	0x49, r18
    6638:	3a a9       	sts	0x4a, r19
    663a:	4b a9       	sts	0x4b, r20
    663c:	5c a9       	sts	0x4c, r21
    663e:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    6642:	4b 01       	movw	r8, r22
    6644:	5c 01       	movw	r10, r24
    6646:	69 a5       	lds	r22, 0x69
    6648:	7a a5       	lds	r23, 0x6a
    664a:	8b a5       	lds	r24, 0x6b
    664c:	9c a5       	lds	r25, 0x6c
    664e:	a3 01       	movw	r20, r6
    6650:	92 01       	movw	r18, r4
    6652:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    6656:	2b 01       	movw	r4, r22
    6658:	3c 01       	movw	r6, r24
    665a:	69 a5       	lds	r22, 0x69
    665c:	7a a5       	lds	r23, 0x6a
    665e:	8b a5       	lds	r24, 0x6b
    6660:	9c a5       	lds	r25, 0x6c
    6662:	29 a9       	sts	0x49, r18
    6664:	3a a9       	sts	0x4a, r19
    6666:	4b a9       	sts	0x4b, r20
    6668:	5c a9       	sts	0x4c, r21
    666a:	0e 94 1b 34 	call	0x6836	; 0x6836 <__mulsi3>
    666e:	ab 01       	movw	r20, r22
    6670:	bc 01       	movw	r22, r24
    6672:	84 0c       	add	r8, r4
    6674:	95 1c       	adc	r9, r5
    6676:	a6 1c       	adc	r10, r6
    6678:	b7 1c       	adc	r11, r7
    667a:	09 ad       	sts	0x69, r16
    667c:	1a ad       	sts	0x6a, r17
    667e:	2b ad       	sts	0x6b, r18
    6680:	3c ad       	sts	0x6c, r19
    6682:	c9 01       	movw	r24, r18
    6684:	aa 27       	eor	r26, r26
    6686:	bb 27       	eor	r27, r27
    6688:	88 0e       	add	r8, r24
    668a:	99 1e       	adc	r9, r25
    668c:	aa 1e       	adc	r10, r26
    668e:	bb 1e       	adc	r11, r27
    6690:	84 14       	cp	r8, r4
    6692:	95 04       	cpc	r9, r5
    6694:	a6 04       	cpc	r10, r6
    6696:	b7 04       	cpc	r11, r7
    6698:	20 f4       	brcc	.+8      	; 0x66a2 <__stack+0x6a3>
    669a:	40 50       	subi	r20, 0x00	; 0
    669c:	50 40       	sbci	r21, 0x00	; 0
    669e:	6f 4f       	sbci	r22, 0xFF	; 255
    66a0:	7f 4f       	sbci	r23, 0xFF	; 255
    66a2:	c5 01       	movw	r24, r10
    66a4:	aa 27       	eor	r26, r26
    66a6:	bb 27       	eor	r27, r27
    66a8:	84 0f       	add	r24, r20
    66aa:	95 1f       	adc	r25, r21
    66ac:	a6 1f       	adc	r26, r22
    66ae:	b7 1f       	adc	r27, r23
    66b0:	0d a5       	lds	r16, 0x6d
    66b2:	1e a5       	lds	r17, 0x6e
    66b4:	2f a5       	lds	r18, 0x6f
    66b6:	38 a9       	sts	0x48, r19
    66b8:	08 17       	cp	r16, r24
    66ba:	19 07       	cpc	r17, r25
    66bc:	2a 07       	cpc	r18, r26
    66be:	3b 07       	cpc	r19, r27
    66c0:	18 f1       	brcs	.+70     	; 0x6708 <__stack+0x709>
    66c2:	80 17       	cp	r24, r16
    66c4:	91 07       	cpc	r25, r17
    66c6:	a2 07       	cpc	r26, r18
    66c8:	b3 07       	cpc	r27, r19
    66ca:	a1 f5       	brne	.+104    	; 0x6734 <__stack+0x735>
    66cc:	54 01       	movw	r10, r8
    66ce:	99 24       	eor	r9, r9
    66d0:	88 24       	eor	r8, r8
    66d2:	89 ad       	sts	0x69, r24
    66d4:	9a ad       	sts	0x6a, r25
    66d6:	ab ad       	sts	0x6b, r26
    66d8:	bc ad       	sts	0x6c, r27
    66da:	a0 70       	andi	r26, 0x00	; 0
    66dc:	b0 70       	andi	r27, 0x00	; 0
    66de:	88 0e       	add	r8, r24
    66e0:	99 1e       	adc	r9, r25
    66e2:	aa 1e       	adc	r10, r26
    66e4:	bb 1e       	adc	r11, r27
    66e6:	4d a9       	sts	0x4d, r20
    66e8:	5e a9       	sts	0x4e, r21
    66ea:	6f a9       	sts	0x4f, r22
    66ec:	78 ad       	sts	0x68, r23
    66ee:	03 2c       	mov	r0, r3
    66f0:	04 c0       	rjmp	.+8      	; 0x66fa <__stack+0x6fb>
    66f2:	44 0f       	add	r20, r20
    66f4:	55 1f       	adc	r21, r21
    66f6:	66 1f       	adc	r22, r22
    66f8:	77 1f       	adc	r23, r23
    66fa:	0a 94       	dec	r0
    66fc:	d2 f7       	brpl	.-12     	; 0x66f2 <__stack+0x6f3>
    66fe:	48 15       	cp	r20, r8
    6700:	59 05       	cpc	r21, r9
    6702:	6a 05       	cpc	r22, r10
    6704:	7b 05       	cpc	r23, r11
    6706:	b0 f4       	brcc	.+44     	; 0x6734 <__stack+0x735>
    6708:	08 94       	sec
    670a:	c1 08       	sbc	r12, r1
    670c:	d1 08       	sbc	r13, r1
    670e:	e1 08       	sbc	r14, r1
    6710:	f1 08       	sbc	r15, r1
    6712:	10 c0       	rjmp	.+32     	; 0x6734 <__stack+0x735>
    6714:	44 24       	eor	r4, r4
    6716:	55 24       	eor	r5, r5
    6718:	32 01       	movw	r6, r4
    671a:	cc 24       	eor	r12, r12
    671c:	dd 24       	eor	r13, r13
    671e:	76 01       	movw	r14, r12
    6720:	0c c0       	rjmp	.+24     	; 0x673a <__stack+0x73b>
    6722:	44 24       	eor	r4, r4
    6724:	55 24       	eor	r5, r5
    6726:	32 01       	movw	r6, r4
    6728:	81 e0       	ldi	r24, 0x01	; 1
    672a:	c8 2e       	mov	r12, r24
    672c:	d1 2c       	mov	r13, r1
    672e:	e1 2c       	mov	r14, r1
    6730:	f1 2c       	mov	r15, r1
    6732:	03 c0       	rjmp	.+6      	; 0x673a <__stack+0x73b>
    6734:	44 24       	eor	r4, r4
    6736:	55 24       	eor	r5, r5
    6738:	32 01       	movw	r6, r4
    673a:	fe 01       	movw	r30, r28
    673c:	31 96       	adiw	r30, 0x01	; 1
    673e:	88 e0       	ldi	r24, 0x08	; 8
    6740:	df 01       	movw	r26, r30
    6742:	1d 92       	st	X+, r1
    6744:	8a 95       	dec	r24
    6746:	e9 f7       	brne	.-6      	; 0x6742 <__stack+0x743>
    6748:	c9 82       	std	Y+1, r12	; 0x01
    674a:	da 82       	std	Y+2, r13	; 0x02
    674c:	eb 82       	std	Y+3, r14	; 0x03
    674e:	fc 82       	std	Y+4, r15	; 0x04
    6750:	4d 82       	std	Y+5, r4	; 0x05
    6752:	5e 82       	std	Y+6, r5	; 0x06
    6754:	6f 82       	std	Y+7, r6	; 0x07
    6756:	78 86       	std	Y+8, r7	; 0x08
    6758:	2c 2d       	mov	r18, r12
    675a:	3a 81       	ldd	r19, Y+2	; 0x02
    675c:	4b 81       	ldd	r20, Y+3	; 0x03
    675e:	5c 81       	ldd	r21, Y+4	; 0x04
    6760:	64 2d       	mov	r22, r4
    6762:	7e 81       	ldd	r23, Y+6	; 0x06
    6764:	8f 81       	ldd	r24, Y+7	; 0x07
    6766:	98 85       	ldd	r25, Y+8	; 0x08
    6768:	25 96       	adiw	r28, 0x05	; 5
    676a:	ec ac       	sts	0xac, r30
    676c:	fd ac       	sts	0xad, r31
    676e:	0e ad       	sts	0x6e, r16
    6770:	1f ad       	sts	0x6f, r17
    6772:	25 97       	sbiw	r28, 0x05	; 5
    6774:	e1 14       	cp	r14, r1
    6776:	f1 04       	cpc	r15, r1
    6778:	01 05       	cpc	r16, r1
    677a:	11 05       	cpc	r17, r1
    677c:	09 f4       	brne	.+2      	; 0x6780 <__stack+0x781>
    677e:	56 c0       	rjmp	.+172    	; 0x682c <__stack+0x82d>
    6780:	21 95       	neg	r18
    6782:	e1 e0       	ldi	r30, 0x01	; 1
    6784:	12 16       	cp	r1, r18
    6786:	08 f0       	brcs	.+2      	; 0x678a <__stack+0x78b>
    6788:	e0 e0       	ldi	r30, 0x00	; 0
    678a:	31 95       	neg	r19
    678c:	f1 e0       	ldi	r31, 0x01	; 1
    678e:	13 16       	cp	r1, r19
    6790:	08 f0       	brcs	.+2      	; 0x6794 <__stack+0x795>
    6792:	f0 e0       	ldi	r31, 0x00	; 0
    6794:	03 2f       	mov	r16, r19
    6796:	0e 1b       	sub	r16, r30
    6798:	e1 e0       	ldi	r30, 0x01	; 1
    679a:	30 17       	cp	r19, r16
    679c:	08 f0       	brcs	.+2      	; 0x67a0 <__stack+0x7a1>
    679e:	e0 e0       	ldi	r30, 0x00	; 0
    67a0:	fe 2b       	or	r31, r30
    67a2:	41 95       	neg	r20
    67a4:	e1 e0       	ldi	r30, 0x01	; 1
    67a6:	14 16       	cp	r1, r20
    67a8:	08 f0       	brcs	.+2      	; 0x67ac <__stack+0x7ad>
    67aa:	e0 e0       	ldi	r30, 0x00	; 0
    67ac:	14 2f       	mov	r17, r20
    67ae:	1f 1b       	sub	r17, r31
    67b0:	31 e0       	ldi	r19, 0x01	; 1
    67b2:	41 17       	cp	r20, r17
    67b4:	08 f0       	brcs	.+2      	; 0x67b8 <__stack+0x7b9>
    67b6:	30 e0       	ldi	r19, 0x00	; 0
    67b8:	e3 2b       	or	r30, r19
    67ba:	51 95       	neg	r21
    67bc:	f1 e0       	ldi	r31, 0x01	; 1
    67be:	15 16       	cp	r1, r21
    67c0:	08 f0       	brcs	.+2      	; 0x67c4 <__stack+0x7c5>
    67c2:	f0 e0       	ldi	r31, 0x00	; 0
    67c4:	b5 2f       	mov	r27, r21
    67c6:	be 1b       	sub	r27, r30
    67c8:	31 e0       	ldi	r19, 0x01	; 1
    67ca:	5b 17       	cp	r21, r27
    67cc:	08 f0       	brcs	.+2      	; 0x67d0 <__stack+0x7d1>
    67ce:	30 e0       	ldi	r19, 0x00	; 0
    67d0:	f3 2b       	or	r31, r19
    67d2:	61 95       	neg	r22
    67d4:	e1 e0       	ldi	r30, 0x01	; 1
    67d6:	16 16       	cp	r1, r22
    67d8:	08 f0       	brcs	.+2      	; 0x67dc <__stack+0x7dd>
    67da:	e0 e0       	ldi	r30, 0x00	; 0
    67dc:	46 2e       	mov	r4, r22
    67de:	4f 1a       	sub	r4, r31
    67e0:	31 e0       	ldi	r19, 0x01	; 1
    67e2:	64 15       	cp	r22, r4
    67e4:	08 f0       	brcs	.+2      	; 0x67e8 <__stack+0x7e9>
    67e6:	30 e0       	ldi	r19, 0x00	; 0
    67e8:	e3 2b       	or	r30, r19
    67ea:	71 95       	neg	r23
    67ec:	f1 e0       	ldi	r31, 0x01	; 1
    67ee:	17 16       	cp	r1, r23
    67f0:	08 f0       	brcs	.+2      	; 0x67f4 <__stack+0x7f5>
    67f2:	f0 e0       	ldi	r31, 0x00	; 0
    67f4:	a7 2f       	mov	r26, r23
    67f6:	ae 1b       	sub	r26, r30
    67f8:	31 e0       	ldi	r19, 0x01	; 1
    67fa:	7a 17       	cp	r23, r26
    67fc:	08 f0       	brcs	.+2      	; 0x6800 <__stack+0x801>
    67fe:	30 e0       	ldi	r19, 0x00	; 0
    6800:	f3 2b       	or	r31, r19
    6802:	81 95       	neg	r24
    6804:	e1 e0       	ldi	r30, 0x01	; 1
    6806:	18 16       	cp	r1, r24
    6808:	08 f0       	brcs	.+2      	; 0x680c <__stack+0x80d>
    680a:	e0 e0       	ldi	r30, 0x00	; 0
    680c:	f8 2e       	mov	r15, r24
    680e:	ff 1a       	sub	r15, r31
    6810:	ff 2d       	mov	r31, r15
    6812:	31 e0       	ldi	r19, 0x01	; 1
    6814:	8f 15       	cp	r24, r15
    6816:	08 f0       	brcs	.+2      	; 0x681a <__stack+0x81b>
    6818:	30 e0       	ldi	r19, 0x00	; 0
    681a:	e3 2b       	or	r30, r19
    681c:	91 95       	neg	r25
    681e:	30 2f       	mov	r19, r16
    6820:	41 2f       	mov	r20, r17
    6822:	5b 2f       	mov	r21, r27
    6824:	64 2d       	mov	r22, r4
    6826:	7a 2f       	mov	r23, r26
    6828:	8f 2f       	mov	r24, r31
    682a:	9e 1b       	sub	r25, r30
    682c:	c8 5b       	subi	r28, 0xB8	; 184
    682e:	df 4f       	sbci	r29, 0xFF	; 255
    6830:	e1 e1       	ldi	r30, 0x11	; 17
    6832:	0c 94 b8 34 	jmp	0x6970	; 0x6970 <__epilogue_restores__+0x2>

00006836 <__mulsi3>:
    6836:	62 9f       	mul	r22, r18
    6838:	d0 01       	movw	r26, r0
    683a:	73 9f       	mul	r23, r19
    683c:	f0 01       	movw	r30, r0
    683e:	82 9f       	mul	r24, r18
    6840:	e0 0d       	add	r30, r0
    6842:	f1 1d       	adc	r31, r1
    6844:	64 9f       	mul	r22, r20
    6846:	e0 0d       	add	r30, r0
    6848:	f1 1d       	adc	r31, r1
    684a:	92 9f       	mul	r25, r18
    684c:	f0 0d       	add	r31, r0
    684e:	83 9f       	mul	r24, r19
    6850:	f0 0d       	add	r31, r0
    6852:	74 9f       	mul	r23, r20
    6854:	f0 0d       	add	r31, r0
    6856:	65 9f       	mul	r22, r21
    6858:	f0 0d       	add	r31, r0
    685a:	99 27       	eor	r25, r25
    685c:	72 9f       	mul	r23, r18
    685e:	b0 0d       	add	r27, r0
    6860:	e1 1d       	adc	r30, r1
    6862:	f9 1f       	adc	r31, r25
    6864:	63 9f       	mul	r22, r19
    6866:	b0 0d       	add	r27, r0
    6868:	e1 1d       	adc	r30, r1
    686a:	f9 1f       	adc	r31, r25
    686c:	bd 01       	movw	r22, r26
    686e:	cf 01       	movw	r24, r30
    6870:	11 24       	eor	r1, r1
    6872:	08 95       	ret

00006874 <__udivmodhi4>:
    6874:	aa 1b       	sub	r26, r26
    6876:	bb 1b       	sub	r27, r27
    6878:	51 e1       	ldi	r21, 0x11	; 17
    687a:	07 c0       	rjmp	.+14     	; 0x688a <__udivmodhi4_ep>

0000687c <__udivmodhi4_loop>:
    687c:	aa 1f       	adc	r26, r26
    687e:	bb 1f       	adc	r27, r27
    6880:	a6 17       	cp	r26, r22
    6882:	b7 07       	cpc	r27, r23
    6884:	10 f0       	brcs	.+4      	; 0x688a <__udivmodhi4_ep>
    6886:	a6 1b       	sub	r26, r22
    6888:	b7 0b       	sbc	r27, r23

0000688a <__udivmodhi4_ep>:
    688a:	88 1f       	adc	r24, r24
    688c:	99 1f       	adc	r25, r25
    688e:	5a 95       	dec	r21
    6890:	a9 f7       	brne	.-22     	; 0x687c <__udivmodhi4_loop>
    6892:	80 95       	com	r24
    6894:	90 95       	com	r25
    6896:	bc 01       	movw	r22, r24
    6898:	cd 01       	movw	r24, r26
    689a:	08 95       	ret

0000689c <__divmodhi4>:
    689c:	97 fb       	bst	r25, 7
    689e:	09 2e       	mov	r0, r25
    68a0:	07 26       	eor	r0, r23
    68a2:	0a d0       	rcall	.+20     	; 0x68b8 <__divmodhi4_neg1>
    68a4:	77 fd       	sbrc	r23, 7
    68a6:	04 d0       	rcall	.+8      	; 0x68b0 <__divmodhi4_neg2>
    68a8:	e5 df       	rcall	.-54     	; 0x6874 <__udivmodhi4>
    68aa:	06 d0       	rcall	.+12     	; 0x68b8 <__divmodhi4_neg1>
    68ac:	00 20       	and	r0, r0
    68ae:	1a f4       	brpl	.+6      	; 0x68b6 <__divmodhi4_exit>

000068b0 <__divmodhi4_neg2>:
    68b0:	70 95       	com	r23
    68b2:	61 95       	neg	r22
    68b4:	7f 4f       	sbci	r23, 0xFF	; 255

000068b6 <__divmodhi4_exit>:
    68b6:	08 95       	ret

000068b8 <__divmodhi4_neg1>:
    68b8:	f6 f7       	brtc	.-4      	; 0x68b6 <__divmodhi4_exit>
    68ba:	90 95       	com	r25
    68bc:	81 95       	neg	r24
    68be:	9f 4f       	sbci	r25, 0xFF	; 255
    68c0:	08 95       	ret

000068c2 <__udivmodsi4>:
    68c2:	a1 e2       	ldi	r26, 0x21	; 33
    68c4:	1a 2e       	mov	r1, r26
    68c6:	aa 1b       	sub	r26, r26
    68c8:	bb 1b       	sub	r27, r27
    68ca:	fd 01       	movw	r30, r26
    68cc:	0d c0       	rjmp	.+26     	; 0x68e8 <__udivmodsi4_ep>

000068ce <__udivmodsi4_loop>:
    68ce:	aa 1f       	adc	r26, r26
    68d0:	bb 1f       	adc	r27, r27
    68d2:	ee 1f       	adc	r30, r30
    68d4:	ff 1f       	adc	r31, r31
    68d6:	a2 17       	cp	r26, r18
    68d8:	b3 07       	cpc	r27, r19
    68da:	e4 07       	cpc	r30, r20
    68dc:	f5 07       	cpc	r31, r21
    68de:	20 f0       	brcs	.+8      	; 0x68e8 <__udivmodsi4_ep>
    68e0:	a2 1b       	sub	r26, r18
    68e2:	b3 0b       	sbc	r27, r19
    68e4:	e4 0b       	sbc	r30, r20
    68e6:	f5 0b       	sbc	r31, r21

000068e8 <__udivmodsi4_ep>:
    68e8:	66 1f       	adc	r22, r22
    68ea:	77 1f       	adc	r23, r23
    68ec:	88 1f       	adc	r24, r24
    68ee:	99 1f       	adc	r25, r25
    68f0:	1a 94       	dec	r1
    68f2:	69 f7       	brne	.-38     	; 0x68ce <__udivmodsi4_loop>
    68f4:	60 95       	com	r22
    68f6:	70 95       	com	r23
    68f8:	80 95       	com	r24
    68fa:	90 95       	com	r25
    68fc:	9b 01       	movw	r18, r22
    68fe:	ac 01       	movw	r20, r24
    6900:	bd 01       	movw	r22, r26
    6902:	cf 01       	movw	r24, r30
    6904:	08 95       	ret

00006906 <__divmodsi4>:
    6906:	97 fb       	bst	r25, 7
    6908:	09 2e       	mov	r0, r25
    690a:	05 26       	eor	r0, r21
    690c:	0e d0       	rcall	.+28     	; 0x692a <__divmodsi4_neg1>
    690e:	57 fd       	sbrc	r21, 7
    6910:	04 d0       	rcall	.+8      	; 0x691a <__divmodsi4_neg2>
    6912:	d7 df       	rcall	.-82     	; 0x68c2 <__udivmodsi4>
    6914:	0a d0       	rcall	.+20     	; 0x692a <__divmodsi4_neg1>
    6916:	00 1c       	adc	r0, r0
    6918:	38 f4       	brcc	.+14     	; 0x6928 <__divmodsi4_exit>

0000691a <__divmodsi4_neg2>:
    691a:	50 95       	com	r21
    691c:	40 95       	com	r20
    691e:	30 95       	com	r19
    6920:	21 95       	neg	r18
    6922:	3f 4f       	sbci	r19, 0xFF	; 255
    6924:	4f 4f       	sbci	r20, 0xFF	; 255
    6926:	5f 4f       	sbci	r21, 0xFF	; 255

00006928 <__divmodsi4_exit>:
    6928:	08 95       	ret

0000692a <__divmodsi4_neg1>:
    692a:	f6 f7       	brtc	.-4      	; 0x6928 <__divmodsi4_exit>
    692c:	90 95       	com	r25
    692e:	80 95       	com	r24
    6930:	70 95       	com	r23
    6932:	61 95       	neg	r22
    6934:	7f 4f       	sbci	r23, 0xFF	; 255
    6936:	8f 4f       	sbci	r24, 0xFF	; 255
    6938:	9f 4f       	sbci	r25, 0xFF	; 255
    693a:	08 95       	ret

0000693c <__prologue_saves__>:
    693c:	2f 92       	push	r2
    693e:	3f 92       	push	r3
    6940:	4f 92       	push	r4
    6942:	5f 92       	push	r5
    6944:	6f 92       	push	r6
    6946:	7f 92       	push	r7
    6948:	8f 92       	push	r8
    694a:	9f 92       	push	r9
    694c:	af 92       	push	r10
    694e:	bf 92       	push	r11
    6950:	cf 92       	push	r12
    6952:	df 92       	push	r13
    6954:	ef 92       	push	r14
    6956:	ff 92       	push	r15
    6958:	0f 93       	push	r16
    695a:	1f 93       	push	r17
    695c:	cf 93       	push	r28
    695e:	df 93       	push	r29
    6960:	cd b7       	in	r28, 0x3d	; 61
    6962:	de b7       	in	r29, 0x3e	; 62
    6964:	ca 1b       	sub	r28, r26
    6966:	db 0b       	sbc	r29, r27
    6968:	cd bf       	out	0x3d, r28	; 61
    696a:	de bf       	out	0x3e, r29	; 62
    696c:	19 94       	eijmp

0000696e <__epilogue_restores__>:
    696e:	2a 88       	ldd	r2, Y+18	; 0x12
    6970:	39 88       	ldd	r3, Y+17	; 0x11
    6972:	48 88       	ldd	r4, Y+16	; 0x10
    6974:	5f 84       	ldd	r5, Y+15	; 0x0f
    6976:	6e 84       	ldd	r6, Y+14	; 0x0e
    6978:	7d 84       	ldd	r7, Y+13	; 0x0d
    697a:	8c 84       	ldd	r8, Y+12	; 0x0c
    697c:	9b 84       	ldd	r9, Y+11	; 0x0b
    697e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6980:	b9 84       	ldd	r11, Y+9	; 0x09
    6982:	c8 84       	ldd	r12, Y+8	; 0x08
    6984:	df 80       	ldd	r13, Y+7	; 0x07
    6986:	ee 80       	ldd	r14, Y+6	; 0x06
    6988:	fd 80       	ldd	r15, Y+5	; 0x05
    698a:	0c 81       	ldd	r16, Y+4	; 0x04
    698c:	1b 81       	ldd	r17, Y+3	; 0x03
    698e:	aa 81       	ldd	r26, Y+2	; 0x02
    6990:	b9 81       	ldd	r27, Y+1	; 0x01
    6992:	ce 0f       	add	r28, r30
    6994:	d1 1d       	adc	r29, r1
    6996:	cd bf       	out	0x3d, r28	; 61
    6998:	de bf       	out	0x3e, r29	; 62
    699a:	ed 01       	movw	r28, r26
    699c:	08 95       	ret

0000699e <strcpy_P>:
    699e:	fb 01       	movw	r30, r22
    69a0:	dc 01       	movw	r26, r24
    69a2:	05 90       	lpm	r0, Z+
    69a4:	0d 92       	st	X+, r0
    69a6:	00 20       	and	r0, r0
    69a8:	e1 f7       	brne	.-8      	; 0x69a2 <strcpy_P+0x4>
    69aa:	08 95       	ret

000069ac <memmove>:
    69ac:	68 17       	cp	r22, r24
    69ae:	79 07       	cpc	r23, r25
    69b0:	68 f4       	brcc	.+26     	; 0x69cc <memmove+0x20>
    69b2:	fb 01       	movw	r30, r22
    69b4:	dc 01       	movw	r26, r24
    69b6:	e4 0f       	add	r30, r20
    69b8:	f5 1f       	adc	r31, r21
    69ba:	a4 0f       	add	r26, r20
    69bc:	b5 1f       	adc	r27, r21
    69be:	02 c0       	rjmp	.+4      	; 0x69c4 <memmove+0x18>
    69c0:	02 90       	ld	r0, -Z
    69c2:	0e 92       	st	-X, r0
    69c4:	41 50       	subi	r20, 0x01	; 1
    69c6:	50 40       	sbci	r21, 0x00	; 0
    69c8:	d8 f7       	brcc	.-10     	; 0x69c0 <memmove+0x14>
    69ca:	08 95       	ret
    69cc:	0c 94 06 37 	jmp	0x6e0c	; 0x6e0c <memcpy>

000069d0 <printf>:
    69d0:	cf 93       	push	r28
    69d2:	df 93       	push	r29
    69d4:	cd b7       	in	r28, 0x3d	; 61
    69d6:	de b7       	in	r29, 0x3e	; 62
    69d8:	fe 01       	movw	r30, r28
    69da:	36 96       	adiw	r30, 0x06	; 6
    69dc:	61 91       	ld	r22, Z+
    69de:	71 91       	ld	r23, Z+
    69e0:	80 91 9c 50 	lds	r24, 0x509C
    69e4:	90 91 9d 50 	lds	r25, 0x509D
    69e8:	af 01       	movw	r20, r30
    69ea:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <vfprintf>
    69ee:	df 91       	pop	r29
    69f0:	cf 91       	pop	r28
    69f2:	08 95       	ret

000069f4 <vfprintf>:
    69f4:	2f 92       	push	r2
    69f6:	3f 92       	push	r3
    69f8:	4f 92       	push	r4
    69fa:	5f 92       	push	r5
    69fc:	6f 92       	push	r6
    69fe:	7f 92       	push	r7
    6a00:	8f 92       	push	r8
    6a02:	9f 92       	push	r9
    6a04:	af 92       	push	r10
    6a06:	bf 92       	push	r11
    6a08:	cf 92       	push	r12
    6a0a:	df 92       	push	r13
    6a0c:	ef 92       	push	r14
    6a0e:	ff 92       	push	r15
    6a10:	0f 93       	push	r16
    6a12:	1f 93       	push	r17
    6a14:	cf 93       	push	r28
    6a16:	df 93       	push	r29
    6a18:	cd b7       	in	r28, 0x3d	; 61
    6a1a:	de b7       	in	r29, 0x3e	; 62
    6a1c:	2d 97       	sbiw	r28, 0x0d	; 13
    6a1e:	cd bf       	out	0x3d, r28	; 61
    6a20:	de bf       	out	0x3e, r29	; 62
    6a22:	3c 01       	movw	r6, r24
    6a24:	6c 87       	std	Y+12, r22	; 0x0c
    6a26:	7d 87       	std	Y+13, r23	; 0x0d
    6a28:	5a 01       	movw	r10, r20
    6a2a:	fc 01       	movw	r30, r24
    6a2c:	16 82       	std	Z+6, r1	; 0x06
    6a2e:	17 82       	std	Z+7, r1	; 0x07
    6a30:	83 81       	ldd	r24, Z+3	; 0x03
    6a32:	81 ff       	sbrs	r24, 1
    6a34:	c8 c1       	rjmp	.+912    	; 0x6dc6 <vfprintf+0x3d2>
    6a36:	2e 01       	movw	r4, r28
    6a38:	08 94       	sec
    6a3a:	41 1c       	adc	r4, r1
    6a3c:	51 1c       	adc	r5, r1
    6a3e:	f3 01       	movw	r30, r6
    6a40:	93 81       	ldd	r25, Z+3	; 0x03
    6a42:	ec 85       	ldd	r30, Y+12	; 0x0c
    6a44:	fd 85       	ldd	r31, Y+13	; 0x0d
    6a46:	93 fd       	sbrc	r25, 3
    6a48:	85 91       	lpm	r24, Z+
    6a4a:	93 ff       	sbrs	r25, 3
    6a4c:	81 91       	ld	r24, Z+
    6a4e:	ec 87       	std	Y+12, r30	; 0x0c
    6a50:	fd 87       	std	Y+13, r31	; 0x0d
    6a52:	88 23       	and	r24, r24
    6a54:	09 f4       	brne	.+2      	; 0x6a58 <vfprintf+0x64>
    6a56:	b3 c1       	rjmp	.+870    	; 0x6dbe <vfprintf+0x3ca>
    6a58:	85 32       	cpi	r24, 0x25	; 37
    6a5a:	41 f4       	brne	.+16     	; 0x6a6c <vfprintf+0x78>
    6a5c:	93 fd       	sbrc	r25, 3
    6a5e:	85 91       	lpm	r24, Z+
    6a60:	93 ff       	sbrs	r25, 3
    6a62:	81 91       	ld	r24, Z+
    6a64:	ec 87       	std	Y+12, r30	; 0x0c
    6a66:	fd 87       	std	Y+13, r31	; 0x0d
    6a68:	85 32       	cpi	r24, 0x25	; 37
    6a6a:	29 f4       	brne	.+10     	; 0x6a76 <vfprintf+0x82>
    6a6c:	90 e0       	ldi	r25, 0x00	; 0
    6a6e:	b3 01       	movw	r22, r6
    6a70:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6a74:	e4 cf       	rjmp	.-56     	; 0x6a3e <vfprintf+0x4a>
    6a76:	ff 24       	eor	r15, r15
    6a78:	ee 24       	eor	r14, r14
    6a7a:	10 e0       	ldi	r17, 0x00	; 0
    6a7c:	10 32       	cpi	r17, 0x20	; 32
    6a7e:	b0 f4       	brcc	.+44     	; 0x6aac <vfprintf+0xb8>
    6a80:	8b 32       	cpi	r24, 0x2B	; 43
    6a82:	69 f0       	breq	.+26     	; 0x6a9e <vfprintf+0xaa>
    6a84:	8c 32       	cpi	r24, 0x2C	; 44
    6a86:	28 f4       	brcc	.+10     	; 0x6a92 <vfprintf+0x9e>
    6a88:	80 32       	cpi	r24, 0x20	; 32
    6a8a:	51 f0       	breq	.+20     	; 0x6aa0 <vfprintf+0xac>
    6a8c:	83 32       	cpi	r24, 0x23	; 35
    6a8e:	71 f4       	brne	.+28     	; 0x6aac <vfprintf+0xb8>
    6a90:	0b c0       	rjmp	.+22     	; 0x6aa8 <vfprintf+0xb4>
    6a92:	8d 32       	cpi	r24, 0x2D	; 45
    6a94:	39 f0       	breq	.+14     	; 0x6aa4 <vfprintf+0xb0>
    6a96:	80 33       	cpi	r24, 0x30	; 48
    6a98:	49 f4       	brne	.+18     	; 0x6aac <vfprintf+0xb8>
    6a9a:	11 60       	ori	r17, 0x01	; 1
    6a9c:	2c c0       	rjmp	.+88     	; 0x6af6 <vfprintf+0x102>
    6a9e:	12 60       	ori	r17, 0x02	; 2
    6aa0:	14 60       	ori	r17, 0x04	; 4
    6aa2:	29 c0       	rjmp	.+82     	; 0x6af6 <vfprintf+0x102>
    6aa4:	18 60       	ori	r17, 0x08	; 8
    6aa6:	27 c0       	rjmp	.+78     	; 0x6af6 <vfprintf+0x102>
    6aa8:	10 61       	ori	r17, 0x10	; 16
    6aaa:	25 c0       	rjmp	.+74     	; 0x6af6 <vfprintf+0x102>
    6aac:	17 fd       	sbrc	r17, 7
    6aae:	2e c0       	rjmp	.+92     	; 0x6b0c <vfprintf+0x118>
    6ab0:	28 2f       	mov	r18, r24
    6ab2:	20 53       	subi	r18, 0x30	; 48
    6ab4:	2a 30       	cpi	r18, 0x0A	; 10
    6ab6:	98 f4       	brcc	.+38     	; 0x6ade <vfprintf+0xea>
    6ab8:	16 ff       	sbrs	r17, 6
    6aba:	08 c0       	rjmp	.+16     	; 0x6acc <vfprintf+0xd8>
    6abc:	8f 2d       	mov	r24, r15
    6abe:	88 0f       	add	r24, r24
    6ac0:	f8 2e       	mov	r15, r24
    6ac2:	ff 0c       	add	r15, r15
    6ac4:	ff 0c       	add	r15, r15
    6ac6:	f8 0e       	add	r15, r24
    6ac8:	f2 0e       	add	r15, r18
    6aca:	15 c0       	rjmp	.+42     	; 0x6af6 <vfprintf+0x102>
    6acc:	8e 2d       	mov	r24, r14
    6ace:	88 0f       	add	r24, r24
    6ad0:	e8 2e       	mov	r14, r24
    6ad2:	ee 0c       	add	r14, r14
    6ad4:	ee 0c       	add	r14, r14
    6ad6:	e8 0e       	add	r14, r24
    6ad8:	e2 0e       	add	r14, r18
    6ada:	10 62       	ori	r17, 0x20	; 32
    6adc:	0c c0       	rjmp	.+24     	; 0x6af6 <vfprintf+0x102>
    6ade:	8e 32       	cpi	r24, 0x2E	; 46
    6ae0:	21 f4       	brne	.+8      	; 0x6aea <vfprintf+0xf6>
    6ae2:	16 fd       	sbrc	r17, 6
    6ae4:	6c c1       	rjmp	.+728    	; 0x6dbe <vfprintf+0x3ca>
    6ae6:	10 64       	ori	r17, 0x40	; 64
    6ae8:	06 c0       	rjmp	.+12     	; 0x6af6 <vfprintf+0x102>
    6aea:	8c 36       	cpi	r24, 0x6C	; 108
    6aec:	11 f4       	brne	.+4      	; 0x6af2 <vfprintf+0xfe>
    6aee:	10 68       	ori	r17, 0x80	; 128
    6af0:	02 c0       	rjmp	.+4      	; 0x6af6 <vfprintf+0x102>
    6af2:	88 36       	cpi	r24, 0x68	; 104
    6af4:	59 f4       	brne	.+22     	; 0x6b0c <vfprintf+0x118>
    6af6:	ec 85       	ldd	r30, Y+12	; 0x0c
    6af8:	fd 85       	ldd	r31, Y+13	; 0x0d
    6afa:	93 fd       	sbrc	r25, 3
    6afc:	85 91       	lpm	r24, Z+
    6afe:	93 ff       	sbrs	r25, 3
    6b00:	81 91       	ld	r24, Z+
    6b02:	ec 87       	std	Y+12, r30	; 0x0c
    6b04:	fd 87       	std	Y+13, r31	; 0x0d
    6b06:	88 23       	and	r24, r24
    6b08:	09 f0       	breq	.+2      	; 0x6b0c <vfprintf+0x118>
    6b0a:	b8 cf       	rjmp	.-144    	; 0x6a7c <vfprintf+0x88>
    6b0c:	98 2f       	mov	r25, r24
    6b0e:	95 54       	subi	r25, 0x45	; 69
    6b10:	93 30       	cpi	r25, 0x03	; 3
    6b12:	18 f0       	brcs	.+6      	; 0x6b1a <vfprintf+0x126>
    6b14:	90 52       	subi	r25, 0x20	; 32
    6b16:	93 30       	cpi	r25, 0x03	; 3
    6b18:	38 f4       	brcc	.+14     	; 0x6b28 <vfprintf+0x134>
    6b1a:	24 e0       	ldi	r18, 0x04	; 4
    6b1c:	30 e0       	ldi	r19, 0x00	; 0
    6b1e:	a2 0e       	add	r10, r18
    6b20:	b3 1e       	adc	r11, r19
    6b22:	3f e3       	ldi	r19, 0x3F	; 63
    6b24:	39 83       	std	Y+1, r19	; 0x01
    6b26:	0f c0       	rjmp	.+30     	; 0x6b46 <vfprintf+0x152>
    6b28:	83 36       	cpi	r24, 0x63	; 99
    6b2a:	31 f0       	breq	.+12     	; 0x6b38 <vfprintf+0x144>
    6b2c:	83 37       	cpi	r24, 0x73	; 115
    6b2e:	81 f0       	breq	.+32     	; 0x6b50 <vfprintf+0x15c>
    6b30:	83 35       	cpi	r24, 0x53	; 83
    6b32:	09 f0       	breq	.+2      	; 0x6b36 <vfprintf+0x142>
    6b34:	5a c0       	rjmp	.+180    	; 0x6bea <vfprintf+0x1f6>
    6b36:	22 c0       	rjmp	.+68     	; 0x6b7c <vfprintf+0x188>
    6b38:	f5 01       	movw	r30, r10
    6b3a:	80 81       	ld	r24, Z
    6b3c:	89 83       	std	Y+1, r24	; 0x01
    6b3e:	22 e0       	ldi	r18, 0x02	; 2
    6b40:	30 e0       	ldi	r19, 0x00	; 0
    6b42:	a2 0e       	add	r10, r18
    6b44:	b3 1e       	adc	r11, r19
    6b46:	21 e0       	ldi	r18, 0x01	; 1
    6b48:	c2 2e       	mov	r12, r18
    6b4a:	d1 2c       	mov	r13, r1
    6b4c:	42 01       	movw	r8, r4
    6b4e:	14 c0       	rjmp	.+40     	; 0x6b78 <vfprintf+0x184>
    6b50:	92 e0       	ldi	r25, 0x02	; 2
    6b52:	29 2e       	mov	r2, r25
    6b54:	31 2c       	mov	r3, r1
    6b56:	2a 0c       	add	r2, r10
    6b58:	3b 1c       	adc	r3, r11
    6b5a:	f5 01       	movw	r30, r10
    6b5c:	80 80       	ld	r8, Z
    6b5e:	91 80       	ldd	r9, Z+1	; 0x01
    6b60:	16 ff       	sbrs	r17, 6
    6b62:	03 c0       	rjmp	.+6      	; 0x6b6a <vfprintf+0x176>
    6b64:	6f 2d       	mov	r22, r15
    6b66:	70 e0       	ldi	r23, 0x00	; 0
    6b68:	02 c0       	rjmp	.+4      	; 0x6b6e <vfprintf+0x17a>
    6b6a:	6f ef       	ldi	r22, 0xFF	; 255
    6b6c:	7f ef       	ldi	r23, 0xFF	; 255
    6b6e:	c4 01       	movw	r24, r8
    6b70:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <strnlen>
    6b74:	6c 01       	movw	r12, r24
    6b76:	51 01       	movw	r10, r2
    6b78:	1f 77       	andi	r17, 0x7F	; 127
    6b7a:	15 c0       	rjmp	.+42     	; 0x6ba6 <vfprintf+0x1b2>
    6b7c:	82 e0       	ldi	r24, 0x02	; 2
    6b7e:	28 2e       	mov	r2, r24
    6b80:	31 2c       	mov	r3, r1
    6b82:	2a 0c       	add	r2, r10
    6b84:	3b 1c       	adc	r3, r11
    6b86:	f5 01       	movw	r30, r10
    6b88:	80 80       	ld	r8, Z
    6b8a:	91 80       	ldd	r9, Z+1	; 0x01
    6b8c:	16 ff       	sbrs	r17, 6
    6b8e:	03 c0       	rjmp	.+6      	; 0x6b96 <vfprintf+0x1a2>
    6b90:	6f 2d       	mov	r22, r15
    6b92:	70 e0       	ldi	r23, 0x00	; 0
    6b94:	02 c0       	rjmp	.+4      	; 0x6b9a <vfprintf+0x1a6>
    6b96:	6f ef       	ldi	r22, 0xFF	; 255
    6b98:	7f ef       	ldi	r23, 0xFF	; 255
    6b9a:	c4 01       	movw	r24, r8
    6b9c:	0e 94 fb 36 	call	0x6df6	; 0x6df6 <strnlen_P>
    6ba0:	6c 01       	movw	r12, r24
    6ba2:	10 68       	ori	r17, 0x80	; 128
    6ba4:	51 01       	movw	r10, r2
    6ba6:	13 fd       	sbrc	r17, 3
    6ba8:	1c c0       	rjmp	.+56     	; 0x6be2 <vfprintf+0x1ee>
    6baa:	06 c0       	rjmp	.+12     	; 0x6bb8 <vfprintf+0x1c4>
    6bac:	80 e2       	ldi	r24, 0x20	; 32
    6bae:	90 e0       	ldi	r25, 0x00	; 0
    6bb0:	b3 01       	movw	r22, r6
    6bb2:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6bb6:	ea 94       	dec	r14
    6bb8:	8e 2d       	mov	r24, r14
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	c8 16       	cp	r12, r24
    6bbe:	d9 06       	cpc	r13, r25
    6bc0:	a8 f3       	brcs	.-22     	; 0x6bac <vfprintf+0x1b8>
    6bc2:	0f c0       	rjmp	.+30     	; 0x6be2 <vfprintf+0x1ee>
    6bc4:	f4 01       	movw	r30, r8
    6bc6:	17 fd       	sbrc	r17, 7
    6bc8:	85 91       	lpm	r24, Z+
    6bca:	17 ff       	sbrs	r17, 7
    6bcc:	81 91       	ld	r24, Z+
    6bce:	4f 01       	movw	r8, r30
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	b3 01       	movw	r22, r6
    6bd4:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6bd8:	e1 10       	cpse	r14, r1
    6bda:	ea 94       	dec	r14
    6bdc:	08 94       	sec
    6bde:	c1 08       	sbc	r12, r1
    6be0:	d1 08       	sbc	r13, r1
    6be2:	c1 14       	cp	r12, r1
    6be4:	d1 04       	cpc	r13, r1
    6be6:	71 f7       	brne	.-36     	; 0x6bc4 <vfprintf+0x1d0>
    6be8:	e7 c0       	rjmp	.+462    	; 0x6db8 <vfprintf+0x3c4>
    6bea:	84 36       	cpi	r24, 0x64	; 100
    6bec:	11 f0       	breq	.+4      	; 0x6bf2 <vfprintf+0x1fe>
    6bee:	89 36       	cpi	r24, 0x69	; 105
    6bf0:	51 f5       	brne	.+84     	; 0x6c46 <vfprintf+0x252>
    6bf2:	f5 01       	movw	r30, r10
    6bf4:	17 ff       	sbrs	r17, 7
    6bf6:	07 c0       	rjmp	.+14     	; 0x6c06 <vfprintf+0x212>
    6bf8:	80 81       	ld	r24, Z
    6bfa:	91 81       	ldd	r25, Z+1	; 0x01
    6bfc:	a2 81       	ldd	r26, Z+2	; 0x02
    6bfe:	b3 81       	ldd	r27, Z+3	; 0x03
    6c00:	24 e0       	ldi	r18, 0x04	; 4
    6c02:	30 e0       	ldi	r19, 0x00	; 0
    6c04:	08 c0       	rjmp	.+16     	; 0x6c16 <vfprintf+0x222>
    6c06:	80 81       	ld	r24, Z
    6c08:	91 81       	ldd	r25, Z+1	; 0x01
    6c0a:	aa 27       	eor	r26, r26
    6c0c:	97 fd       	sbrc	r25, 7
    6c0e:	a0 95       	com	r26
    6c10:	ba 2f       	mov	r27, r26
    6c12:	22 e0       	ldi	r18, 0x02	; 2
    6c14:	30 e0       	ldi	r19, 0x00	; 0
    6c16:	a2 0e       	add	r10, r18
    6c18:	b3 1e       	adc	r11, r19
    6c1a:	01 2f       	mov	r16, r17
    6c1c:	0f 76       	andi	r16, 0x6F	; 111
    6c1e:	b7 ff       	sbrs	r27, 7
    6c20:	08 c0       	rjmp	.+16     	; 0x6c32 <vfprintf+0x23e>
    6c22:	b0 95       	com	r27
    6c24:	a0 95       	com	r26
    6c26:	90 95       	com	r25
    6c28:	81 95       	neg	r24
    6c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    6c2c:	af 4f       	sbci	r26, 0xFF	; 255
    6c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    6c30:	00 68       	ori	r16, 0x80	; 128
    6c32:	bc 01       	movw	r22, r24
    6c34:	cd 01       	movw	r24, r26
    6c36:	a2 01       	movw	r20, r4
    6c38:	2a e0       	ldi	r18, 0x0A	; 10
    6c3a:	30 e0       	ldi	r19, 0x00	; 0
    6c3c:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <__ultoa_invert>
    6c40:	d8 2e       	mov	r13, r24
    6c42:	d4 18       	sub	r13, r4
    6c44:	3f c0       	rjmp	.+126    	; 0x6cc4 <vfprintf+0x2d0>
    6c46:	85 37       	cpi	r24, 0x75	; 117
    6c48:	21 f4       	brne	.+8      	; 0x6c52 <vfprintf+0x25e>
    6c4a:	1f 7e       	andi	r17, 0xEF	; 239
    6c4c:	2a e0       	ldi	r18, 0x0A	; 10
    6c4e:	30 e0       	ldi	r19, 0x00	; 0
    6c50:	20 c0       	rjmp	.+64     	; 0x6c92 <vfprintf+0x29e>
    6c52:	19 7f       	andi	r17, 0xF9	; 249
    6c54:	8f 36       	cpi	r24, 0x6F	; 111
    6c56:	a9 f0       	breq	.+42     	; 0x6c82 <vfprintf+0x28e>
    6c58:	80 37       	cpi	r24, 0x70	; 112
    6c5a:	20 f4       	brcc	.+8      	; 0x6c64 <vfprintf+0x270>
    6c5c:	88 35       	cpi	r24, 0x58	; 88
    6c5e:	09 f0       	breq	.+2      	; 0x6c62 <vfprintf+0x26e>
    6c60:	ae c0       	rjmp	.+348    	; 0x6dbe <vfprintf+0x3ca>
    6c62:	0b c0       	rjmp	.+22     	; 0x6c7a <vfprintf+0x286>
    6c64:	80 37       	cpi	r24, 0x70	; 112
    6c66:	21 f0       	breq	.+8      	; 0x6c70 <vfprintf+0x27c>
    6c68:	88 37       	cpi	r24, 0x78	; 120
    6c6a:	09 f0       	breq	.+2      	; 0x6c6e <vfprintf+0x27a>
    6c6c:	a8 c0       	rjmp	.+336    	; 0x6dbe <vfprintf+0x3ca>
    6c6e:	01 c0       	rjmp	.+2      	; 0x6c72 <vfprintf+0x27e>
    6c70:	10 61       	ori	r17, 0x10	; 16
    6c72:	14 ff       	sbrs	r17, 4
    6c74:	09 c0       	rjmp	.+18     	; 0x6c88 <vfprintf+0x294>
    6c76:	14 60       	ori	r17, 0x04	; 4
    6c78:	07 c0       	rjmp	.+14     	; 0x6c88 <vfprintf+0x294>
    6c7a:	14 ff       	sbrs	r17, 4
    6c7c:	08 c0       	rjmp	.+16     	; 0x6c8e <vfprintf+0x29a>
    6c7e:	16 60       	ori	r17, 0x06	; 6
    6c80:	06 c0       	rjmp	.+12     	; 0x6c8e <vfprintf+0x29a>
    6c82:	28 e0       	ldi	r18, 0x08	; 8
    6c84:	30 e0       	ldi	r19, 0x00	; 0
    6c86:	05 c0       	rjmp	.+10     	; 0x6c92 <vfprintf+0x29e>
    6c88:	20 e1       	ldi	r18, 0x10	; 16
    6c8a:	30 e0       	ldi	r19, 0x00	; 0
    6c8c:	02 c0       	rjmp	.+4      	; 0x6c92 <vfprintf+0x29e>
    6c8e:	20 e1       	ldi	r18, 0x10	; 16
    6c90:	32 e0       	ldi	r19, 0x02	; 2
    6c92:	f5 01       	movw	r30, r10
    6c94:	17 ff       	sbrs	r17, 7
    6c96:	07 c0       	rjmp	.+14     	; 0x6ca6 <vfprintf+0x2b2>
    6c98:	60 81       	ld	r22, Z
    6c9a:	71 81       	ldd	r23, Z+1	; 0x01
    6c9c:	82 81       	ldd	r24, Z+2	; 0x02
    6c9e:	93 81       	ldd	r25, Z+3	; 0x03
    6ca0:	44 e0       	ldi	r20, 0x04	; 4
    6ca2:	50 e0       	ldi	r21, 0x00	; 0
    6ca4:	06 c0       	rjmp	.+12     	; 0x6cb2 <vfprintf+0x2be>
    6ca6:	60 81       	ld	r22, Z
    6ca8:	71 81       	ldd	r23, Z+1	; 0x01
    6caa:	80 e0       	ldi	r24, 0x00	; 0
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	42 e0       	ldi	r20, 0x02	; 2
    6cb0:	50 e0       	ldi	r21, 0x00	; 0
    6cb2:	a4 0e       	add	r10, r20
    6cb4:	b5 1e       	adc	r11, r21
    6cb6:	a2 01       	movw	r20, r4
    6cb8:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <__ultoa_invert>
    6cbc:	d8 2e       	mov	r13, r24
    6cbe:	d4 18       	sub	r13, r4
    6cc0:	01 2f       	mov	r16, r17
    6cc2:	0f 77       	andi	r16, 0x7F	; 127
    6cc4:	06 ff       	sbrs	r16, 6
    6cc6:	09 c0       	rjmp	.+18     	; 0x6cda <vfprintf+0x2e6>
    6cc8:	0e 7f       	andi	r16, 0xFE	; 254
    6cca:	df 14       	cp	r13, r15
    6ccc:	30 f4       	brcc	.+12     	; 0x6cda <vfprintf+0x2e6>
    6cce:	04 ff       	sbrs	r16, 4
    6cd0:	06 c0       	rjmp	.+12     	; 0x6cde <vfprintf+0x2ea>
    6cd2:	02 fd       	sbrc	r16, 2
    6cd4:	04 c0       	rjmp	.+8      	; 0x6cde <vfprintf+0x2ea>
    6cd6:	0f 7e       	andi	r16, 0xEF	; 239
    6cd8:	02 c0       	rjmp	.+4      	; 0x6cde <vfprintf+0x2ea>
    6cda:	1d 2d       	mov	r17, r13
    6cdc:	01 c0       	rjmp	.+2      	; 0x6ce0 <vfprintf+0x2ec>
    6cde:	1f 2d       	mov	r17, r15
    6ce0:	80 2f       	mov	r24, r16
    6ce2:	90 e0       	ldi	r25, 0x00	; 0
    6ce4:	04 ff       	sbrs	r16, 4
    6ce6:	0c c0       	rjmp	.+24     	; 0x6d00 <vfprintf+0x30c>
    6ce8:	fe 01       	movw	r30, r28
    6cea:	ed 0d       	add	r30, r13
    6cec:	f1 1d       	adc	r31, r1
    6cee:	20 81       	ld	r18, Z
    6cf0:	20 33       	cpi	r18, 0x30	; 48
    6cf2:	11 f4       	brne	.+4      	; 0x6cf8 <vfprintf+0x304>
    6cf4:	09 7e       	andi	r16, 0xE9	; 233
    6cf6:	09 c0       	rjmp	.+18     	; 0x6d0a <vfprintf+0x316>
    6cf8:	02 ff       	sbrs	r16, 2
    6cfa:	06 c0       	rjmp	.+12     	; 0x6d08 <vfprintf+0x314>
    6cfc:	1e 5f       	subi	r17, 0xFE	; 254
    6cfe:	05 c0       	rjmp	.+10     	; 0x6d0a <vfprintf+0x316>
    6d00:	86 78       	andi	r24, 0x86	; 134
    6d02:	90 70       	andi	r25, 0x00	; 0
    6d04:	00 97       	sbiw	r24, 0x00	; 0
    6d06:	09 f0       	breq	.+2      	; 0x6d0a <vfprintf+0x316>
    6d08:	1f 5f       	subi	r17, 0xFF	; 255
    6d0a:	80 2e       	mov	r8, r16
    6d0c:	99 24       	eor	r9, r9
    6d0e:	03 fd       	sbrc	r16, 3
    6d10:	12 c0       	rjmp	.+36     	; 0x6d36 <vfprintf+0x342>
    6d12:	00 ff       	sbrs	r16, 0
    6d14:	0d c0       	rjmp	.+26     	; 0x6d30 <vfprintf+0x33c>
    6d16:	fd 2c       	mov	r15, r13
    6d18:	1e 15       	cp	r17, r14
    6d1a:	50 f4       	brcc	.+20     	; 0x6d30 <vfprintf+0x33c>
    6d1c:	fe 0c       	add	r15, r14
    6d1e:	f1 1a       	sub	r15, r17
    6d20:	1e 2d       	mov	r17, r14
    6d22:	06 c0       	rjmp	.+12     	; 0x6d30 <vfprintf+0x33c>
    6d24:	80 e2       	ldi	r24, 0x20	; 32
    6d26:	90 e0       	ldi	r25, 0x00	; 0
    6d28:	b3 01       	movw	r22, r6
    6d2a:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6d2e:	1f 5f       	subi	r17, 0xFF	; 255
    6d30:	1e 15       	cp	r17, r14
    6d32:	c0 f3       	brcs	.-16     	; 0x6d24 <vfprintf+0x330>
    6d34:	04 c0       	rjmp	.+8      	; 0x6d3e <vfprintf+0x34a>
    6d36:	1e 15       	cp	r17, r14
    6d38:	10 f4       	brcc	.+4      	; 0x6d3e <vfprintf+0x34a>
    6d3a:	e1 1a       	sub	r14, r17
    6d3c:	01 c0       	rjmp	.+2      	; 0x6d40 <vfprintf+0x34c>
    6d3e:	ee 24       	eor	r14, r14
    6d40:	84 fe       	sbrs	r8, 4
    6d42:	0f c0       	rjmp	.+30     	; 0x6d62 <vfprintf+0x36e>
    6d44:	80 e3       	ldi	r24, 0x30	; 48
    6d46:	90 e0       	ldi	r25, 0x00	; 0
    6d48:	b3 01       	movw	r22, r6
    6d4a:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6d4e:	82 fe       	sbrs	r8, 2
    6d50:	1f c0       	rjmp	.+62     	; 0x6d90 <vfprintf+0x39c>
    6d52:	81 fe       	sbrs	r8, 1
    6d54:	03 c0       	rjmp	.+6      	; 0x6d5c <vfprintf+0x368>
    6d56:	88 e5       	ldi	r24, 0x58	; 88
    6d58:	90 e0       	ldi	r25, 0x00	; 0
    6d5a:	10 c0       	rjmp	.+32     	; 0x6d7c <vfprintf+0x388>
    6d5c:	88 e7       	ldi	r24, 0x78	; 120
    6d5e:	90 e0       	ldi	r25, 0x00	; 0
    6d60:	0d c0       	rjmp	.+26     	; 0x6d7c <vfprintf+0x388>
    6d62:	c4 01       	movw	r24, r8
    6d64:	86 78       	andi	r24, 0x86	; 134
    6d66:	90 70       	andi	r25, 0x00	; 0
    6d68:	00 97       	sbiw	r24, 0x00	; 0
    6d6a:	91 f0       	breq	.+36     	; 0x6d90 <vfprintf+0x39c>
    6d6c:	81 fc       	sbrc	r8, 1
    6d6e:	02 c0       	rjmp	.+4      	; 0x6d74 <vfprintf+0x380>
    6d70:	80 e2       	ldi	r24, 0x20	; 32
    6d72:	01 c0       	rjmp	.+2      	; 0x6d76 <vfprintf+0x382>
    6d74:	8b e2       	ldi	r24, 0x2B	; 43
    6d76:	07 fd       	sbrc	r16, 7
    6d78:	8d e2       	ldi	r24, 0x2D	; 45
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	b3 01       	movw	r22, r6
    6d7e:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6d82:	06 c0       	rjmp	.+12     	; 0x6d90 <vfprintf+0x39c>
    6d84:	80 e3       	ldi	r24, 0x30	; 48
    6d86:	90 e0       	ldi	r25, 0x00	; 0
    6d88:	b3 01       	movw	r22, r6
    6d8a:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6d8e:	fa 94       	dec	r15
    6d90:	df 14       	cp	r13, r15
    6d92:	c0 f3       	brcs	.-16     	; 0x6d84 <vfprintf+0x390>
    6d94:	da 94       	dec	r13
    6d96:	f2 01       	movw	r30, r4
    6d98:	ed 0d       	add	r30, r13
    6d9a:	f1 1d       	adc	r31, r1
    6d9c:	80 81       	ld	r24, Z
    6d9e:	90 e0       	ldi	r25, 0x00	; 0
    6da0:	b3 01       	movw	r22, r6
    6da2:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6da6:	dd 20       	and	r13, r13
    6da8:	a9 f7       	brne	.-22     	; 0x6d94 <vfprintf+0x3a0>
    6daa:	06 c0       	rjmp	.+12     	; 0x6db8 <vfprintf+0x3c4>
    6dac:	80 e2       	ldi	r24, 0x20	; 32
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	b3 01       	movw	r22, r6
    6db2:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <fputc>
    6db6:	ea 94       	dec	r14
    6db8:	ee 20       	and	r14, r14
    6dba:	c1 f7       	brne	.-16     	; 0x6dac <vfprintf+0x3b8>
    6dbc:	40 ce       	rjmp	.-896    	; 0x6a3e <vfprintf+0x4a>
    6dbe:	f3 01       	movw	r30, r6
    6dc0:	86 81       	ldd	r24, Z+6	; 0x06
    6dc2:	97 81       	ldd	r25, Z+7	; 0x07
    6dc4:	02 c0       	rjmp	.+4      	; 0x6dca <vfprintf+0x3d6>
    6dc6:	8f ef       	ldi	r24, 0xFF	; 255
    6dc8:	9f ef       	ldi	r25, 0xFF	; 255
    6dca:	2d 96       	adiw	r28, 0x0d	; 13
    6dcc:	cd bf       	out	0x3d, r28	; 61
    6dce:	de bf       	out	0x3e, r29	; 62
    6dd0:	df 91       	pop	r29
    6dd2:	cf 91       	pop	r28
    6dd4:	1f 91       	pop	r17
    6dd6:	0f 91       	pop	r16
    6dd8:	ff 90       	pop	r15
    6dda:	ef 90       	pop	r14
    6ddc:	df 90       	pop	r13
    6dde:	cf 90       	pop	r12
    6de0:	bf 90       	pop	r11
    6de2:	af 90       	pop	r10
    6de4:	9f 90       	pop	r9
    6de6:	8f 90       	pop	r8
    6de8:	7f 90       	pop	r7
    6dea:	6f 90       	pop	r6
    6dec:	5f 90       	pop	r5
    6dee:	4f 90       	pop	r4
    6df0:	3f 90       	pop	r3
    6df2:	2f 90       	pop	r2
    6df4:	08 95       	ret

00006df6 <strnlen_P>:
    6df6:	fc 01       	movw	r30, r24
    6df8:	05 90       	lpm	r0, Z+
    6dfa:	61 50       	subi	r22, 0x01	; 1
    6dfc:	70 40       	sbci	r23, 0x00	; 0
    6dfe:	01 10       	cpse	r0, r1
    6e00:	d8 f7       	brcc	.-10     	; 0x6df8 <strnlen_P+0x2>
    6e02:	80 95       	com	r24
    6e04:	90 95       	com	r25
    6e06:	8e 0f       	add	r24, r30
    6e08:	9f 1f       	adc	r25, r31
    6e0a:	08 95       	ret

00006e0c <memcpy>:
    6e0c:	fb 01       	movw	r30, r22
    6e0e:	dc 01       	movw	r26, r24
    6e10:	02 c0       	rjmp	.+4      	; 0x6e16 <memcpy+0xa>
    6e12:	01 90       	ld	r0, Z+
    6e14:	0d 92       	st	X+, r0
    6e16:	41 50       	subi	r20, 0x01	; 1
    6e18:	50 40       	sbci	r21, 0x00	; 0
    6e1a:	d8 f7       	brcc	.-10     	; 0x6e12 <memcpy+0x6>
    6e1c:	08 95       	ret

00006e1e <strnlen>:
    6e1e:	fc 01       	movw	r30, r24
    6e20:	61 50       	subi	r22, 0x01	; 1
    6e22:	70 40       	sbci	r23, 0x00	; 0
    6e24:	01 90       	ld	r0, Z+
    6e26:	01 10       	cpse	r0, r1
    6e28:	d8 f7       	brcc	.-10     	; 0x6e20 <strnlen+0x2>
    6e2a:	80 95       	com	r24
    6e2c:	90 95       	com	r25
    6e2e:	8e 0f       	add	r24, r30
    6e30:	9f 1f       	adc	r25, r31
    6e32:	08 95       	ret

00006e34 <fputc>:
    6e34:	0f 93       	push	r16
    6e36:	1f 93       	push	r17
    6e38:	cf 93       	push	r28
    6e3a:	df 93       	push	r29
    6e3c:	8c 01       	movw	r16, r24
    6e3e:	eb 01       	movw	r28, r22
    6e40:	8b 81       	ldd	r24, Y+3	; 0x03
    6e42:	81 ff       	sbrs	r24, 1
    6e44:	1b c0       	rjmp	.+54     	; 0x6e7c <fputc+0x48>
    6e46:	82 ff       	sbrs	r24, 2
    6e48:	0d c0       	rjmp	.+26     	; 0x6e64 <fputc+0x30>
    6e4a:	2e 81       	ldd	r18, Y+6	; 0x06
    6e4c:	3f 81       	ldd	r19, Y+7	; 0x07
    6e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    6e50:	9d 81       	ldd	r25, Y+5	; 0x05
    6e52:	28 17       	cp	r18, r24
    6e54:	39 07       	cpc	r19, r25
    6e56:	64 f4       	brge	.+24     	; 0x6e70 <fputc+0x3c>
    6e58:	e8 81       	ld	r30, Y
    6e5a:	f9 81       	ldd	r31, Y+1	; 0x01
    6e5c:	01 93       	st	Z+, r16
    6e5e:	e8 83       	st	Y, r30
    6e60:	f9 83       	std	Y+1, r31	; 0x01
    6e62:	06 c0       	rjmp	.+12     	; 0x6e70 <fputc+0x3c>
    6e64:	e8 85       	ldd	r30, Y+8	; 0x08
    6e66:	f9 85       	ldd	r31, Y+9	; 0x09
    6e68:	80 2f       	mov	r24, r16
    6e6a:	19 95       	eicall
    6e6c:	00 97       	sbiw	r24, 0x00	; 0
    6e6e:	31 f4       	brne	.+12     	; 0x6e7c <fputc+0x48>
    6e70:	8e 81       	ldd	r24, Y+6	; 0x06
    6e72:	9f 81       	ldd	r25, Y+7	; 0x07
    6e74:	01 96       	adiw	r24, 0x01	; 1
    6e76:	8e 83       	std	Y+6, r24	; 0x06
    6e78:	9f 83       	std	Y+7, r25	; 0x07
    6e7a:	02 c0       	rjmp	.+4      	; 0x6e80 <fputc+0x4c>
    6e7c:	0f ef       	ldi	r16, 0xFF	; 255
    6e7e:	1f ef       	ldi	r17, 0xFF	; 255
    6e80:	c8 01       	movw	r24, r16
    6e82:	df 91       	pop	r29
    6e84:	cf 91       	pop	r28
    6e86:	1f 91       	pop	r17
    6e88:	0f 91       	pop	r16
    6e8a:	08 95       	ret

00006e8c <__ultoa_invert>:
    6e8c:	fa 01       	movw	r30, r20
    6e8e:	aa 27       	eor	r26, r26
    6e90:	28 30       	cpi	r18, 0x08	; 8
    6e92:	51 f1       	breq	.+84     	; 0x6ee8 <__ultoa_invert+0x5c>
    6e94:	20 31       	cpi	r18, 0x10	; 16
    6e96:	81 f1       	breq	.+96     	; 0x6ef8 <__ultoa_invert+0x6c>
    6e98:	e8 94       	clt
    6e9a:	6f 93       	push	r22
    6e9c:	6e 7f       	andi	r22, 0xFE	; 254
    6e9e:	6e 5f       	subi	r22, 0xFE	; 254
    6ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ea6:	af 4f       	sbci	r26, 0xFF	; 255
    6ea8:	b1 e0       	ldi	r27, 0x01	; 1
    6eaa:	3e d0       	rcall	.+124    	; 0x6f28 <__ultoa_invert+0x9c>
    6eac:	b4 e0       	ldi	r27, 0x04	; 4
    6eae:	3c d0       	rcall	.+120    	; 0x6f28 <__ultoa_invert+0x9c>
    6eb0:	67 0f       	add	r22, r23
    6eb2:	78 1f       	adc	r23, r24
    6eb4:	89 1f       	adc	r24, r25
    6eb6:	9a 1f       	adc	r25, r26
    6eb8:	a1 1d       	adc	r26, r1
    6eba:	68 0f       	add	r22, r24
    6ebc:	79 1f       	adc	r23, r25
    6ebe:	8a 1f       	adc	r24, r26
    6ec0:	91 1d       	adc	r25, r1
    6ec2:	a1 1d       	adc	r26, r1
    6ec4:	6a 0f       	add	r22, r26
    6ec6:	71 1d       	adc	r23, r1
    6ec8:	81 1d       	adc	r24, r1
    6eca:	91 1d       	adc	r25, r1
    6ecc:	a1 1d       	adc	r26, r1
    6ece:	20 d0       	rcall	.+64     	; 0x6f10 <__ultoa_invert+0x84>
    6ed0:	09 f4       	brne	.+2      	; 0x6ed4 <__ultoa_invert+0x48>
    6ed2:	68 94       	set
    6ed4:	3f 91       	pop	r19
    6ed6:	2a e0       	ldi	r18, 0x0A	; 10
    6ed8:	26 9f       	mul	r18, r22
    6eda:	11 24       	eor	r1, r1
    6edc:	30 19       	sub	r19, r0
    6ede:	30 5d       	subi	r19, 0xD0	; 208
    6ee0:	31 93       	st	Z+, r19
    6ee2:	de f6       	brtc	.-74     	; 0x6e9a <__ultoa_invert+0xe>
    6ee4:	cf 01       	movw	r24, r30
    6ee6:	08 95       	ret
    6ee8:	46 2f       	mov	r20, r22
    6eea:	47 70       	andi	r20, 0x07	; 7
    6eec:	40 5d       	subi	r20, 0xD0	; 208
    6eee:	41 93       	st	Z+, r20
    6ef0:	b3 e0       	ldi	r27, 0x03	; 3
    6ef2:	0f d0       	rcall	.+30     	; 0x6f12 <__ultoa_invert+0x86>
    6ef4:	c9 f7       	brne	.-14     	; 0x6ee8 <__ultoa_invert+0x5c>
    6ef6:	f6 cf       	rjmp	.-20     	; 0x6ee4 <__ultoa_invert+0x58>
    6ef8:	46 2f       	mov	r20, r22
    6efa:	4f 70       	andi	r20, 0x0F	; 15
    6efc:	40 5d       	subi	r20, 0xD0	; 208
    6efe:	4a 33       	cpi	r20, 0x3A	; 58
    6f00:	18 f0       	brcs	.+6      	; 0x6f08 <__ultoa_invert+0x7c>
    6f02:	49 5d       	subi	r20, 0xD9	; 217
    6f04:	31 fd       	sbrc	r19, 1
    6f06:	40 52       	subi	r20, 0x20	; 32
    6f08:	41 93       	st	Z+, r20
    6f0a:	02 d0       	rcall	.+4      	; 0x6f10 <__ultoa_invert+0x84>
    6f0c:	a9 f7       	brne	.-22     	; 0x6ef8 <__ultoa_invert+0x6c>
    6f0e:	ea cf       	rjmp	.-44     	; 0x6ee4 <__ultoa_invert+0x58>
    6f10:	b4 e0       	ldi	r27, 0x04	; 4
    6f12:	a6 95       	lsr	r26
    6f14:	97 95       	ror	r25
    6f16:	87 95       	ror	r24
    6f18:	77 95       	ror	r23
    6f1a:	67 95       	ror	r22
    6f1c:	ba 95       	dec	r27
    6f1e:	c9 f7       	brne	.-14     	; 0x6f12 <__ultoa_invert+0x86>
    6f20:	00 97       	sbiw	r24, 0x00	; 0
    6f22:	61 05       	cpc	r22, r1
    6f24:	71 05       	cpc	r23, r1
    6f26:	08 95       	ret
    6f28:	9b 01       	movw	r18, r22
    6f2a:	ac 01       	movw	r20, r24
    6f2c:	0a 2e       	mov	r0, r26
    6f2e:	06 94       	lsr	r0
    6f30:	57 95       	ror	r21
    6f32:	47 95       	ror	r20
    6f34:	37 95       	ror	r19
    6f36:	27 95       	ror	r18
    6f38:	ba 95       	dec	r27
    6f3a:	c9 f7       	brne	.-14     	; 0x6f2e <__ultoa_invert+0xa2>
    6f3c:	62 0f       	add	r22, r18
    6f3e:	73 1f       	adc	r23, r19
    6f40:	84 1f       	adc	r24, r20
    6f42:	95 1f       	adc	r25, r21
    6f44:	a0 1d       	adc	r26, r0
    6f46:	08 95       	ret

00006f48 <_exit>:
    6f48:	f8 94       	cli

00006f4a <__stop_program>:
    6f4a:	ff cf       	rjmp	.-2      	; 0x6f4a <__stop_program>
