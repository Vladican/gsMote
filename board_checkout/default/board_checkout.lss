
board_checkout.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004124  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00802000  00004124  000041b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002cb8  00802100  00802100  000042b8  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000042b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00004a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a9c  00000000  00000000  00004c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e7b  00000000  00000000  0000a704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001721  00000000  00000000  0000b57f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cbc  00000000  00000000  0000cca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000339d  00000000  00000000  0000d95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b84  00000000  00000000  00010cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0001487d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__vector_14>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__vector_16>
      44:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_17>
      48:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__vector_18>
      4c:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_19>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__vector_79>
     140:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_80>
     144:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_81>
     148:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_82>
     14c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_104>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	11 e2       	ldi	r17, 0x21	; 33
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e4 e2       	ldi	r30, 0x24	; 36
     200:	f1 e4       	ldi	r31, 0x41	; 65
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a0 30       	cpi	r26, 0x00	; 0
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	1d e4       	ldi	r17, 0x4D	; 77
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b1 e2       	ldi	r27, 0x21	; 33
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a8 3b       	cpi	r26, 0xB8	; 184
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <main>
     226:	0c 94 90 20 	jmp	0x4120	; 0x4120 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
     22e:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	95 81       	ldd	r25, Z+5	; 0x05
     238:	86 1b       	sub	r24, r22
     23a:	91 09       	sbc	r25, r1

	return answer;
}
     23c:	08 95       	ret

0000023e <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
     23e:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     244:	84 81       	ldd	r24, Z+4	; 0x04
     246:	95 81       	ldd	r25, Z+5	; 0x05
     248:	77 27       	eor	r23, r23
     24a:	67 fd       	sbrc	r22, 7
     24c:	70 95       	com	r23
     24e:	86 1b       	sub	r24, r22
     250:	97 0b       	sbc	r25, r23

	return answer;
}
     252:	08 95       	ret

00000254 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
     254:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
     25a:	84 81       	ldd	r24, Z+4	; 0x04
     25c:	95 81       	ldd	r25, Z+5	; 0x05
}
     25e:	08 95       	ret

00000260 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
     260:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
     266:	84 81       	ldd	r24, Z+4	; 0x04
}
     268:	08 95       	ret

0000026a <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
     26a:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
     270:	85 81       	ldd	r24, Z+5	; 0x05
}
     272:	08 95       	ret

00000274 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
     274:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
     276:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
     278:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27a:	9a e2       	ldi	r25, 0x2A	; 42
     27c:	9a 95       	dec	r25
     27e:	f1 f7       	brne	.-4      	; 0x27c <ADC_Wait_8MHz+0x8>
     280:	00 c0       	rjmp	.+0      	; 0x282 <ADC_Wait_8MHz+0xe>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
     282:	84 83       	std	Z+4, r24	; 0x04
}
     284:	08 95       	ret

00000286 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
     286:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
     288:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	94 83       	std	Z+4, r25	; 0x04
     28e:	95 e5       	ldi	r25, 0x55	; 85
     290:	9a 95       	dec	r25
     292:	f1 f7       	brne	.-4      	; 0x290 <ADC_Wait_32MHz+0xa>
     294:	00 00       	nop

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
     296:	84 83       	std	Z+4, r24	; 0x04
}
     298:	08 95       	ret

0000029a <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     29a:	fb 01       	movw	r30, r22
    if (oversampling)
     29c:	44 23       	and	r20, r20
     29e:	c9 f0       	breq	.+50     	; 0x2d2 <ADC_Offset_Get_Unsigned+0x38>
     2a0:	24 e0       	ldi	r18, 0x04	; 4
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	50 e0       	ldi	r21, 0x00	; 0
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     2a8:	61 e0       	ldi	r22, 0x01	; 1
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     2aa:	80 81       	ld	r24, Z
     2ac:	80 68       	ori	r24, 0x80	; 128
     2ae:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
     2b0:	83 81       	ldd	r24, Z+3	; 0x03
     2b2:	80 ff       	sbrs	r24, 0
     2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <ADC_Offset_Get_Unsigned+0x16>
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     2b6:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
     2b8:	84 81       	ldd	r24, Z+4	; 0x04
     2ba:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
     2bc:	48 0f       	add	r20, r24
     2be:	59 1f       	adc	r21, r25
     2c0:	21 50       	subi	r18, 0x01	; 1
     2c2:	30 40       	sbci	r19, 0x00	; 0
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
     2c4:	91 f7       	brne	.-28     	; 0x2aa <ADC_Offset_Get_Unsigned+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
     2c6:	ca 01       	movw	r24, r20
     2c8:	96 95       	lsr	r25
     2ca:	87 95       	ror	r24
     2cc:	96 95       	lsr	r25
     2ce:	87 95       	ror	r24
     2d0:	08 95       	ret
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
     2d2:	80 81       	ld	r24, Z
     2d4:	80 68       	ori	r24, 0x80	; 128
     2d6:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
     2d8:	83 81       	ldd	r24, Z+3	; 0x03
     2da:	80 ff       	sbrs	r24, 0
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <ADC_Offset_Get_Unsigned+0x3e>
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
     2e2:	84 81       	ldd	r24, Z+4	; 0x04
     2e4:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
      
      return offset;
    }
}
     2e6:	08 95       	ret

000002e8 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     2e8:	fb 01       	movw	r30, r22
    if (oversampling)
     2ea:	44 23       	and	r20, r20
     2ec:	d1 f0       	breq	.+52     	; 0x322 <ADC_Offset_Get_Signed+0x3a>
     2ee:	44 e0       	ldi	r20, 0x04	; 4
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     2f6:	61 e0       	ldi	r22, 0x01	; 1
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     2f8:	80 81       	ld	r24, Z
     2fa:	80 68       	ori	r24, 0x80	; 128
     2fc:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
     2fe:	83 81       	ldd	r24, Z+3	; 0x03
     300:	80 ff       	sbrs	r24, 0
     302:	fd cf       	rjmp	.-6      	; 0x2fe <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     304:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     306:	84 81       	ldd	r24, Z+4	; 0x04
     308:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
     30e:	41 50       	subi	r20, 0x01	; 1
     310:	50 40       	sbci	r21, 0x00	; 0
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
     312:	91 f7       	brne	.-28     	; 0x2f8 <ADC_Offset_Get_Signed+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
     314:	c9 01       	movw	r24, r18
     316:	64 e0       	ldi	r22, 0x04	; 4
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	0e 94 0f 20 	call	0x401e	; 0x401e <__divmodhi4>
     31e:	86 2f       	mov	r24, r22
     320:	08 95       	ret
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
     322:	80 81       	ld	r24, Z
     324:	80 68       	ori	r24, 0x80	; 128
     326:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
     328:	83 81       	ldd	r24, Z+3	; 0x03
     32a:	80 ff       	sbrs	r24, 0
     32c:	fd cf       	rjmp	.-6      	; 0x328 <ADC_Offset_Get_Signed+0x40>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     332:	84 81       	ldd	r24, Z+4	; 0x04
     334:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
      
      return offset;
    }
}
     336:	08 95       	ret

00000338 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     338:	aa ec       	ldi	r26, 0xCA	; 202
     33a:	b1 e0       	ldi	r27, 0x01	; 1
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
     340:	e8 2f       	mov	r30, r24
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     346:	1c 92       	st	X, r1

	return result;
}
     348:	08 95       	ret

0000034a <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	c0 30       	cpi	r28, 0x00	; 0
     354:	d8 07       	cpc	r29, r24
     356:	31 f4       	brne	.+12     	; 0x364 <ADC_CalibrationValues_Load+0x1a>
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
     358:	80 e2       	ldi	r24, 0x20	; 32
     35a:	0e 94 9c 01 	call	0x338	; 0x338 <SP_ReadCalibrationByte>
     35e:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
     360:	81 e2       	ldi	r24, 0x21	; 33
     362:	05 c0       	rjmp	.+10     	; 0x36e <ADC_CalibrationValues_Load+0x24>
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
     364:	84 e2       	ldi	r24, 0x24	; 36
     366:	0e 94 9c 01 	call	0x338	; 0x338 <SP_ReadCalibrationByte>
     36a:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
     36c:	85 e2       	ldi	r24, 0x25	; 37
     36e:	0e 94 9c 01 	call	0x338	; 0x338 <SP_ReadCalibrationByte>
     372:	8d 87       	std	Y+13, r24	; 0x0d
	}
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     37a:	0f 93       	push	r16
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	0f 92       	push	r0
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     386:	2f b7       	in	r18, 0x3f	; 63
     388:	29 83       	std	Y+1, r18	; 0x01
     38a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     38c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     38e:	fc 01       	movw	r30, r24
     390:	08 ed       	ldi	r16, 0xD8	; 216
     392:	04 bf       	out	0x34, r16	; 52
     394:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	8f bf       	out	0x3f, r24	; 63
#endif
}
     39a:	0f 90       	pop	r0
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     3a4:	66 23       	and	r22, r22
     3a6:	11 f0       	breq	.+4      	; 0x3ac <CLKSYS_XOSC_Config+0x8>
     3a8:	90 e2       	ldi	r25, 0x20	; 32
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <CLKSYS_XOSC_Config+0xa>
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	84 2b       	or	r24, r20
     3b0:	89 2b       	or	r24, r25
     3b2:	e0 e5       	ldi	r30, 0x50	; 80
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     3b8:	08 95       	ret

000003ba <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     3ba:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     3bc:	68 2b       	or	r22, r24
     3be:	e0 e5       	ldi	r30, 0x50	; 80
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	65 83       	std	Z+5, r22	; 0x05
}
     3c4:	08 95       	ret

000003c6 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     3c6:	e0 e5       	ldi	r30, 0x50	; 80
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	20 81       	ld	r18, Z
     3cc:	98 2f       	mov	r25, r24
     3ce:	90 95       	com	r25
     3d0:	92 23       	and	r25, r18
     3d2:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     3d4:	90 81       	ld	r25, Z
	return clkEnabled;
}
     3d6:	89 23       	and	r24, r25
     3d8:	08 95       	ret

000003da <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     3da:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     3dc:	81 e4       	ldi	r24, 0x41	; 65
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 bd 01 	call	0x37a	; 0x37a <CCPWrite>
}
     3e4:	08 95       	ret

000003e6 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     3ee:	c0 e4       	ldi	r28, 0x40	; 64
     3f0:	d0 e0       	ldi	r29, 0x00	; 0
     3f2:	68 81       	ld	r22, Y
     3f4:	68 7f       	andi	r22, 0xF8	; 248
     3f6:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     3f8:	80 e4       	ldi	r24, 0x40	; 64
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 bd 01 	call	0x37a	; 0x37a <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     400:	88 81       	ld	r24, Y
	return clkCtrl;
}
     402:	81 23       	and	r24, r17
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	08 95       	ret

0000040c <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
     40c:	e0 e4       	ldi	r30, 0x40	; 64
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	93 81       	ldd	r25, Z+3	; 0x03
     412:	91 7f       	andi	r25, 0xF1	; 241
     414:	91 60       	ori	r25, 0x01	; 1
     416:	98 2b       	or	r25, r24
     418:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
     41a:	08 95       	ret

0000041c <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
     41c:	30 91 56 00 	lds	r19, 0x0056
     420:	28 2f       	mov	r18, r24
     422:	98 2f       	mov	r25, r24
     424:	90 95       	com	r25
     426:	93 23       	and	r25, r19
     428:	66 23       	and	r22, r22
     42a:	09 f4       	brne	.+2      	; 0x42e <CLKSYS_AutoCalibration_Enable+0x12>
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	92 2b       	or	r25, r18
     430:	e0 e5       	ldi	r30, 0x50	; 80
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	31 f4       	brne	.+12     	; 0x446 <CLKSYS_AutoCalibration_Enable+0x2a>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
     43a:	80 91 68 00 	lds	r24, 0x0068
     43e:	81 60       	ori	r24, 0x01	; 1
     440:	80 93 68 00 	sts	0x0068, r24
     444:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
     446:	82 30       	cpi	r24, 0x02	; 2
     448:	29 f4       	brne	.+10     	; 0x454 <CLKSYS_AutoCalibration_Enable+0x38>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     44a:	80 91 60 00 	lds	r24, 0x0060
     44e:	81 60       	ori	r24, 0x01	; 1
     450:	80 93 60 00 	sts	0x0060, r24
     454:	08 95       	ret

00000456 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
     456:	83 e5       	ldi	r24, 0x53	; 83
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	63 e0       	ldi	r22, 0x03	; 3
     45c:	0e 94 bd 01 	call	0x37a	; 0x37a <CCPWrite>
}
     460:	08 95       	ret

00000462 <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
     462:	82 e4       	ldi	r24, 0x42	; 66
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	0e 94 bd 01 	call	0x37a	; 0x37a <CCPWrite>
}
     46c:	08 95       	ret

0000046e <setXOSC_32MHz>:
//  - LS900-SI-02 does not contain the crystal
//  - SFLX02-A03 does contain the crystal
// The high frequency crystal is required to clock the ADC without jitter
void setXOSC_32MHz() {
	// configure the crystal to match the chip 
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc,
     46e:	80 ec       	ldi	r24, 0xC0	; 192
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	4b e0       	ldi	r20, 0x0B	; 11
     474:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <CLKSYS_XOSC_Config>
		                    false,
		                    OSC_XOSCSEL_XTAL_16KCLK_gc );
	CLKSYS_Enable(OSC_XOSCEN_bm);
     478:	80 91 50 00 	lds	r24, 0x0050
     47c:	88 60       	ori	r24, 0x08	; 8
     47e:	80 93 50 00 	sts	0x0050, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     482:	80 91 51 00 	lds	r24, 0x0051
     486:	83 ff       	sbrs	r24, 3
     488:	fc cf       	rjmp	.-8      	; 0x482 <setXOSC_32MHz+0x14>
	// configure PLL to use the crystal and turn on
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     48a:	80 ec       	ldi	r24, 0xC0	; 192
     48c:	62 e0       	ldi	r22, 0x02	; 2
     48e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     492:	80 91 50 00 	lds	r24, 0x0050
     496:	80 61       	ori	r24, 0x10	; 16
     498:	80 93 50 00 	sts	0x0050, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     49c:	80 91 51 00 	lds	r24, 0x0051
     4a0:	84 ff       	sbrs	r24, 4
     4a2:	fc cf       	rjmp	.-8      	; 0x49c <setXOSC_32MHz+0x2e>
	// set as system clock and disable unused RC oscillator
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CLKSYS_Disable>
}
     4b0:	08 95       	ret

000004b2 <set_16MHz>:

// produces consistent but inaccurate clock period.
void set_16MHz() {
	// select 32MHz Oscillator and prescale by 1/2
	CLKSYS_Enable(OSC_RC32MEN_bm);
     4b2:	80 91 50 00 	lds	r24, 0x0050
     4b6:	82 60       	ori	r24, 0x02	; 2
     4b8:	80 93 50 00 	sts	0x0050, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	0e 94 ed 01 	call	0x3da	; 0x3da <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
     4c4:	80 91 51 00 	lds	r24, 0x0051
     4c8:	81 ff       	sbrs	r24, 1
     4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <set_16MHz+0x12>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CLKSYS_Disable>
	
}
     4d8:	08 95       	ret

000004da <set_32MHz>:


// produces consistent but inaccurate clock period.
void set_32MHz() {
	// select 32MHz Oscillator and prescale by 1
	CLKSYS_Enable(OSC_RC32MEN_bm);
     4da:	80 91 50 00 	lds	r24, 0x0050
     4de:	82 60       	ori	r24, 0x02	; 2
     4e0:	80 93 50 00 	sts	0x0050, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	0e 94 ed 01 	call	0x3da	; 0x3da <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
     4ec:	80 91 51 00 	lds	r24, 0x0051
     4f0:	81 ff       	sbrs	r24, 1
     4f2:	fc cf       	rjmp	.-8      	; 0x4ec <set_32MHz+0x12>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CLKSYS_Disable>
	
}
     500:	08 95       	ret

00000502 <portExCS>:
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     502:	88 23       	and	r24, r24
     504:	29 f0       	breq	.+10     	; 0x510 <portExCS+0xe>
     506:	88 e0       	ldi	r24, 0x08	; 8
     508:	e0 e0       	ldi	r30, 0x00	; 0
     50a:	f6 e0       	ldi	r31, 0x06	; 6
     50c:	86 83       	std	Z+6, r24	; 0x06
     50e:	04 c0       	rjmp	.+8      	; 0x518 <portExCS+0x16>
	else {
		PORTA.OUTSET = PIN3_bm;
     510:	88 e0       	ldi	r24, 0x08	; 8
     512:	e0 e0       	ldi	r30, 0x00	; 0
     514:	f6 e0       	ldi	r31, 0x06	; 6
     516:	85 83       	std	Z+5, r24	; 0x05
     518:	8a e6       	ldi	r24, 0x6A	; 106
     51a:	8a 95       	dec	r24
     51c:	f1 f7       	brne	.-4      	; 0x51a <portExCS+0x18>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <portExCS+0x1e>
	}
	_delay_us(10);
}
     520:	08 95       	ret

00000522 <Ext1Power>:
	}
}

void Ext1Power(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN5_bm;
     522:	e0 ea       	ldi	r30, 0xA0	; 160
     524:	f6 e0       	ldi	r31, 0x06	; 6
		
	}
}

void Ext1Power(uint8_t on) {
	if (on) {
     526:	88 23       	and	r24, r24
     528:	69 f0       	breq	.+26     	; 0x544 <Ext1Power+0x22>
		PORTF.DIRSET = PIN5_bm;
     52a:	80 e2       	ldi	r24, 0x20	; 32
     52c:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN5_bm;
     52e:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	93 ec       	ldi	r25, 0xC3	; 195
     534:	a9 e0       	ldi	r26, 0x09	; 9
     536:	81 50       	subi	r24, 0x01	; 1
     538:	90 40       	sbci	r25, 0x00	; 0
     53a:	a0 40       	sbci	r26, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <Ext1Power+0x14>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <Ext1Power+0x1e>
     540:	00 00       	nop
     542:	08 95       	ret
		//PortEx_DIRSET(PIN3_bm, PS_BANKB);
		//PortEx_OUTSET(PIN3_bm, PS_BANKB);  //write protect SDHC
		_delay_ms(100);
		
	} else {
		PORTF.OUTCLR = PIN5_bm;
     544:	80 e2       	ldi	r24, 0x20	; 32
     546:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN5_bm;
     548:	82 83       	std	Z+2, r24	; 0x02
     54a:	08 95       	ret

0000054c <Ext2Power>:
	}
}

void Ext2Power(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN6_bm;
     54c:	e0 ea       	ldi	r30, 0xA0	; 160
     54e:	f6 e0       	ldi	r31, 0x06	; 6
		//PortEx_OUTCLR(PIN3_bm, PS_BANKB);  //no need to write protect SDHC
	}
}

void Ext2Power(uint8_t on) {
	if (on) {
     550:	88 23       	and	r24, r24
     552:	69 f0       	breq	.+26     	; 0x56e <Ext2Power+0x22>
		PORTF.DIRSET = PIN6_bm;
     554:	80 e4       	ldi	r24, 0x40	; 64
     556:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN6_bm;
     558:	85 83       	std	Z+5, r24	; 0x05
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	93 ec       	ldi	r25, 0xC3	; 195
     55e:	a9 e0       	ldi	r26, 0x09	; 9
     560:	81 50       	subi	r24, 0x01	; 1
     562:	90 40       	sbci	r25, 0x00	; 0
     564:	a0 40       	sbci	r26, 0x00	; 0
     566:	e1 f7       	brne	.-8      	; 0x560 <Ext2Power+0x14>
     568:	00 c0       	rjmp	.+0      	; 0x56a <Ext2Power+0x1e>
     56a:	00 00       	nop
     56c:	08 95       	ret
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN6_bm;
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN6_bm;
     572:	82 83       	std	Z+2, r24	; 0x02
     574:	08 95       	ret

00000576 <HVPower>:
	}
}

void HVPower(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN7_bm;
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f6 e0       	ldi	r31, 0x06	; 6
		PORTF.DIRCLR = PIN6_bm;
	}
}

void HVPower(uint8_t on) {
	if (on) {
     57a:	88 23       	and	r24, r24
     57c:	69 f0       	breq	.+26     	; 0x598 <HVPower+0x22>
		PORTF.DIRSET = PIN7_bm;
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN7_bm;
     582:	85 83       	std	Z+5, r24	; 0x05
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	93 ec       	ldi	r25, 0xC3	; 195
     588:	a9 e0       	ldi	r26, 0x09	; 9
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	90 40       	sbci	r25, 0x00	; 0
     58e:	a0 40       	sbci	r26, 0x00	; 0
     590:	e1 f7       	brne	.-8      	; 0x58a <HVPower+0x14>
     592:	00 c0       	rjmp	.+0      	; 0x594 <HVPower+0x1e>
     594:	00 00       	nop
     596:	03 c0       	rjmp	.+6      	; 0x59e <HVPower+0x28>
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN7_bm;
     598:	80 e8       	ldi	r24, 0x80	; 128
     59a:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN7_bm;
     59c:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59e:	af e3       	ldi	r26, 0x3F	; 63
     5a0:	bf e1       	ldi	r27, 0x1F	; 31
     5a2:	11 97       	sbiw	r26, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <HVPower+0x2c>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <HVPower+0x32>
     5a8:	00 00       	nop
	}
	_delay_us(1000);
}
     5aa:	08 95       	ret

000005ac <enableADCMUX>:
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
     5ac:	e0 e0       	ldi	r30, 0x00	; 0
     5ae:	f6 e0       	ldi	r31, 0x06	; 6
	if (upperCS) upperMuxCS(FALSE);
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
     5b0:	88 23       	and	r24, r24
     5b2:	21 f0       	breq	.+8      	; 0x5bc <enableADCMUX+0x10>
		PORTA.DIRSET = PIN5_bm;
     5b4:	80 e2       	ldi	r24, 0x20	; 32
     5b6:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
     5b8:	85 83       	std	Z+5, r24	; 0x05
     5ba:	08 95       	ret
	} else {
		PORTA.OUTCLR = PIN5_bm;
     5bc:	80 e2       	ldi	r24, 0x20	; 32
     5be:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
     5c0:	82 83       	std	Z+2, r24	; 0x02
     5c2:	08 95       	ret

000005c4 <lowerMuxCS>:
	}
}

void lowerMuxCS(uint8_t write) {
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
     5c4:	88 23       	and	r24, r24
     5c6:	29 f0       	breq	.+10     	; 0x5d2 <lowerMuxCS+0xe>
     5c8:	80 e1       	ldi	r24, 0x10	; 16
     5ca:	e0 e8       	ldi	r30, 0x80	; 128
     5cc:	f6 e0       	ldi	r31, 0x06	; 6
     5ce:	86 83       	std	Z+6, r24	; 0x06
     5d0:	08 95       	ret
	else PORTE.OUTSET = PIN4_bm;
     5d2:	80 e1       	ldi	r24, 0x10	; 16
     5d4:	e0 e8       	ldi	r30, 0x80	; 128
     5d6:	f6 e0       	ldi	r31, 0x06	; 6
     5d8:	85 83       	std	Z+5, r24	; 0x05
     5da:	08 95       	ret

000005dc <upperMuxCS>:
}
void upperMuxCS(uint8_t write) {
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
     5dc:	88 23       	and	r24, r24
     5de:	29 f0       	breq	.+10     	; 0x5ea <upperMuxCS+0xe>
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	e0 e4       	ldi	r30, 0x40	; 64
     5e4:	f6 e0       	ldi	r31, 0x06	; 6
     5e6:	86 83       	std	Z+6, r24	; 0x06
     5e8:	08 95       	ret
	else PORTC.OUTSET = PIN1_bm;
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	e0 e4       	ldi	r30, 0x40	; 64
     5ee:	f6 e0       	ldi	r31, 0x06	; 6
     5f0:	85 83       	std	Z+5, r24	; 0x05
     5f2:	08 95       	ret

000005f4 <setADCInput>:

/*! \brief Sets input channel to AD7767 via the A0, A1, A2 control lines of ADG758
 */
void setADCInput(uint8_t channel) {
	// set bit A0 to LSB
	if(channel & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
     5f4:	20 e4       	ldi	r18, 0x40	; 64
     5f6:	e0 e0       	ldi	r30, 0x00	; 0
     5f8:	f6 e0       	ldi	r31, 0x06	; 6
     5fa:	80 ff       	sbrs	r24, 0
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <setADCInput+0xe>
     5fe:	25 83       	std	Z+5, r18	; 0x05
     600:	01 c0       	rjmp	.+2      	; 0x604 <setADCInput+0x10>
	else {PORTA.OUTCLR = PIN6_bm;}
     602:	26 83       	std	Z+6, r18	; 0x06
	// set bit A1 to second bit
	if(channel & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
     604:	22 e0       	ldi	r18, 0x02	; 2
     606:	e0 e2       	ldi	r30, 0x20	; 32
     608:	f6 e0       	ldi	r31, 0x06	; 6
     60a:	81 ff       	sbrs	r24, 1
     60c:	02 c0       	rjmp	.+4      	; 0x612 <setADCInput+0x1e>
     60e:	25 83       	std	Z+5, r18	; 0x05
     610:	01 c0       	rjmp	.+2      	; 0x614 <setADCInput+0x20>
	else {PORTB.OUTCLR = PIN1_bm;}
     612:	26 83       	std	Z+6, r18	; 0x06
	// set bit A3 to third bit
	if(channel & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
     614:	82 ff       	sbrs	r24, 2
     616:	05 c0       	rjmp	.+10     	; 0x622 <setADCInput+0x2e>
     618:	84 e0       	ldi	r24, 0x04	; 4
     61a:	e0 e2       	ldi	r30, 0x20	; 32
     61c:	f6 e0       	ldi	r31, 0x06	; 6
     61e:	85 83       	std	Z+5, r24	; 0x05
     620:	08 95       	ret
	else {PORTB.OUTCLR = PIN2_bm;}
     622:	84 e0       	ldi	r24, 0x04	; 4
     624:	e0 e2       	ldi	r30, 0x20	; 32
     626:	f6 e0       	ldi	r31, 0x06	; 6
     628:	86 83       	std	Z+6, r24	; 0x06
     62a:	08 95       	ret

0000062c <SPIInit>:
}


void SPIInit(uint8_t mode) {
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
     62c:	e0 e4       	ldi	r30, 0x40	; 64
     62e:	f6 e0       	ldi	r31, 0x06	; 6
     630:	90 e1       	ldi	r25, 0x10	; 16
     632:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
     634:	28 e3       	ldi	r18, 0x38	; 56
     636:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
     638:	95 83       	std	Z+5, r25	; 0x05

	// init SPI
	SPIC.CTRL =	SPI_PRESCALER |  // set clock speed
     63a:	81 65       	ori	r24, 0x51	; 81
     63c:	a0 ec       	ldi	r26, 0xC0	; 192
     63e:	b8 e0       	ldi	r27, 0x08	; 8
     640:	8c 93       	st	X, r24
	            0x00 |  // set data order msb first
	            SPI_MASTER_bm | // set SPI master
	            mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     642:	11 96       	adiw	r26, 0x01	; 1
     644:	1c 92       	st	X, r1
     646:	11 97       	sbiw	r26, 0x01	; 1

 	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
     648:	80 ea       	ldi	r24, 0xA0	; 160
     64a:	81 83       	std	Z+1, r24	; 0x01

	
}
     64c:	08 95       	ret

0000064e <SPICS>:

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     64e:	88 23       	and	r24, r24
     650:	29 f0       	breq	.+10     	; 0x65c <SPICS+0xe>
     652:	80 e1       	ldi	r24, 0x10	; 16
     654:	e0 e4       	ldi	r30, 0x40	; 64
     656:	f6 e0       	ldi	r31, 0x06	; 6
     658:	86 83       	std	Z+6, r24	; 0x06
     65a:	08 95       	ret
	else {
		PORTC.OUTSET = PIN4_bm;
     65c:	80 e1       	ldi	r24, 0x10	; 16
     65e:	e0 e4       	ldi	r30, 0x40	; 64
     660:	f6 e0       	ldi	r31, 0x06	; 6
     662:	85 83       	std	Z+5, r24	; 0x05
     664:	08 95       	ret

00000666 <SPIDisable>:
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
     666:	e0 e4       	ldi	r30, 0x40	; 64
     668:	f6 e0       	ldi	r31, 0x06	; 6
     66a:	80 e1       	ldi	r24, 0x10	; 16
     66c:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
     66e:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     672:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     674:	80 eb       	ldi	r24, 0xB0	; 176
     676:	82 83       	std	Z+2, r24	; 0x02

}
     678:	08 95       	ret

0000067a <set_filter>:
 *	filterConfig[2]	Channel 3 and 7 mask
 *	filterConfig[3]	Channel 4 and 8 mask
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
*/
void set_filter(uint8_t filterConfig) {
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
	// hack to get ADC to work
	//filterConfig |= 0x0F;

	// boolean flags for upper/lower channels CS
	uint8_t lowerCS = filterConfig & 0x03; 
     67e:	d8 2f       	mov	r29, r24
     680:	d3 70       	andi	r29, 0x03	; 3
	uint8_t upperCS = filterConfig & 0x0C;
     682:	c8 2f       	mov	r28, r24
     684:	cc 70       	andi	r28, 0x0C	; 12

	// update left and right channel status
	if (filterConfig & (BIT0_bm | BIT2_bm)) channelStatus = 
     686:	28 2f       	mov	r18, r24
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	a9 01       	movw	r20, r18
     68c:	45 70       	andi	r20, 0x05	; 5
     68e:	50 70       	andi	r21, 0x00	; 0
     690:	41 15       	cp	r20, r1
     692:	51 05       	cpc	r21, r1
     694:	49 f0       	breq	.+18     	; 0x6a8 <set_filter+0x2e>
     696:	40 91 8d 4d 	lds	r20, 0x4D8D
     69a:	98 2f       	mov	r25, r24
     69c:	92 95       	swap	r25
     69e:	9f 70       	andi	r25, 0x0F	; 15
     6a0:	40 7f       	andi	r20, 0xF0	; 240
     6a2:	94 2b       	or	r25, r20
     6a4:	90 93 8d 4d 	sts	0x4D8D, r25
		(0xF0 & channelStatus) | (filterConfig >> 4);  //right
	if (filterConfig & (BIT1_bm | BIT3_bm)) channelStatus =
     6a8:	2a 70       	andi	r18, 0x0A	; 10
     6aa:	30 70       	andi	r19, 0x00	; 0
     6ac:	21 15       	cp	r18, r1
     6ae:	31 05       	cpc	r19, r1
     6b0:	39 f0       	breq	.+14     	; 0x6c0 <set_filter+0x46>
     6b2:	90 91 8d 4d 	lds	r25, 0x4D8D
     6b6:	80 7f       	andi	r24, 0xF0	; 240
     6b8:	9f 70       	andi	r25, 0x0F	; 15
     6ba:	89 2b       	or	r24, r25
     6bc:	80 93 8d 4d 	sts	0x4D8D, r24
		(0xF0 & filterConfig) | (0x0F & channelStatus); //left
		
	SPIInit(SPI_MODE_1_gc);
     6c0:	84 e0       	ldi	r24, 0x04	; 4
     6c2:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>

	
	SPIBuffer[0] = channelStatus;
     6c6:	80 91 8d 4d 	lds	r24, 0x4D8D
     6ca:	80 93 7d 4d 	sts	0x4D7D, r24
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
     6ce:	dd 23       	and	r29, r29
     6d0:	19 f0       	breq	.+6      	; 0x6d8 <set_filter+0x5e>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <lowerMuxCS>
	if (upperCS) upperMuxCS(TRUE);
     6d8:	cc 23       	and	r28, r28
     6da:	19 f0       	breq	.+6      	; 0x6e2 <set_filter+0x68>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0e 94 ee 02 	call	0x5dc	; 0x5dc <upperMuxCS>

	SPICS(TRUE);
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>

	// Send all logic high to ensure that the SDO line on the chip is
	// left in high Z state after SPI transaction.
	// The t-1 SDI transaction is output on the SDO and the pin left in the configuration.
	// of the last bit
	SPIC.DATA = 0xFF;
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	e0 ec       	ldi	r30, 0xC0	; 192
     6ec:	f8 e0       	ldi	r31, 0x08	; 8
     6ee:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     6f0:	80 91 c2 08 	lds	r24, 0x08C2
     6f4:	87 ff       	sbrs	r24, 7
     6f6:	fc cf       	rjmp	.-8      	; 0x6f0 <set_filter+0x76>
	SPIBuffer[12] = SPIC.DATA;
     6f8:	80 91 c3 08 	lds	r24, 0x08C3
     6fc:	80 93 89 4d 	sts	0x4D89, r24

	nop();
     700:	00 00       	nop

	SPIC.DATA = SPIBuffer[0];
     702:	80 91 7d 4d 	lds	r24, 0x4D7D
     706:	e0 ec       	ldi	r30, 0xC0	; 192
     708:	f8 e0       	ldi	r31, 0x08	; 8
     70a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     70c:	80 91 c2 08 	lds	r24, 0x08C2
     710:	87 ff       	sbrs	r24, 7
     712:	fc cf       	rjmp	.-8      	; 0x70c <set_filter+0x92>
	SPIBuffer[12] = SPIC.DATA;
     714:	80 91 c3 08 	lds	r24, 0x08C3
     718:	80 93 89 4d 	sts	0x4D89, r24
	SPICS(FALSE);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>

	if (lowerCS) lowerMuxCS(FALSE);
     722:	dd 23       	and	r29, r29
     724:	19 f0       	breq	.+6      	; 0x72c <set_filter+0xb2>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <lowerMuxCS>
	if (upperCS) upperMuxCS(FALSE);
     72c:	cc 23       	and	r28, r28
     72e:	19 f0       	breq	.+6      	; 0x736 <set_filter+0xbc>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 ee 02 	call	0x5dc	; 0x5dc <upperMuxCS>
	SPIDisable();
     736:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <PortEx_OUTCLR>:
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	0f 92       	push	r0
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	69 83       	std	Y+1, r22	; 0x01
     752:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPICS(TRUE);
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	portExCS(TRUE);
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 81 02 	call	0x502	; 0x502 <portExCS>
     762:	91 2f       	mov	r25, r17
     764:	90 95       	com	r25
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
     766:	69 81       	ldd	r22, Y+1	; 0x01
     768:	66 23       	and	r22, r22
     76a:	31 f0       	breq	.+12     	; 0x778 <PortEx_OUTCLR+0x38>
     76c:	80 91 06 21 	lds	r24, 0x2106
     770:	89 23       	and	r24, r25
     772:	80 93 06 21 	sts	0x2106, r24
     776:	05 c0       	rjmp	.+10     	; 0x782 <PortEx_OUTCLR+0x42>
	else bankB_DIR = (uint8_t) (bankB_OUT & ~pins);
     778:	80 91 8e 4d 	lds	r24, 0x4D8E
     77c:	89 23       	and	r24, r25
     77e:	80 93 b7 4d 	sts	0x4DB7, r24
	
	SPIBuffer[0] = PS_WRITE;
     782:	80 e4       	ldi	r24, 0x40	; 64
     784:	80 93 7d 4d 	sts	0x4D7D, r24
	if(bank) {
     788:	66 23       	and	r22, r22
     78a:	31 f0       	breq	.+12     	; 0x798 <PortEx_OUTCLR+0x58>
		SPIBuffer[1]=PS_OLATA;
     78c:	84 e1       	ldi	r24, 0x14	; 20
     78e:	80 93 7e 4d 	sts	0x4D7E, r24
		SPIBuffer[2] = bankA_OUT;
     792:	80 91 06 21 	lds	r24, 0x2106
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <PortEx_OUTCLR+0x62>
	} else {
		SPIBuffer[1]=PS_OLATB;
     798:	85 e1       	ldi	r24, 0x15	; 21
     79a:	80 93 7e 4d 	sts	0x4D7E, r24
		SPIBuffer[2] = bankB_OUT; 
     79e:	80 91 8e 4d 	lds	r24, 0x4D8E
     7a2:	80 93 7f 4d 	sts	0x4D7F, r24
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     7aa:	e0 ec       	ldi	r30, 0xC0	; 192
     7ac:	f8 e0       	ldi	r31, 0x08	; 8
     7ae:	dc 01       	movw	r26, r24
     7b0:	a3 58       	subi	r26, 0x83	; 131
     7b2:	b2 4b       	sbci	r27, 0xB2	; 178
     7b4:	2c 91       	ld	r18, X
     7b6:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
     7b8:	20 91 c2 08 	lds	r18, 0x08C2
     7bc:	27 ff       	sbrs	r18, 7
     7be:	fc cf       	rjmp	.-8      	; 0x7b8 <PortEx_OUTCLR+0x78>
		SPIBuffer[12] = SPIC.DATA;
     7c0:	20 91 c3 08 	lds	r18, 0x08C3
     7c4:	20 93 89 4d 	sts	0x4D89, r18
     7c8:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     7ca:	83 30       	cpi	r24, 0x03	; 3
     7cc:	91 05       	cpc	r25, r1
     7ce:	79 f7       	brne	.-34     	; 0x7ae <PortEx_OUTCLR+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	portExCS(FALSE);
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 81 02 	call	0x502	; 0x502 <portExCS>
	SPIDisable();
     7dc:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
}
     7e0:	0f 90       	pop	r0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	08 95       	ret

000007ea <PortEx_OUTSET>:
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	0f 92       	push	r0
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	69 83       	std	Y+1, r22	; 0x01
     7fc:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPICS(TRUE);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	portExCS(TRUE);
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 81 02 	call	0x502	; 0x502 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
     80c:	69 81       	ldd	r22, Y+1	; 0x01
     80e:	66 23       	and	r22, r22
     810:	31 f0       	breq	.+12     	; 0x81e <PortEx_OUTSET+0x34>
     812:	80 91 06 21 	lds	r24, 0x2106
     816:	81 2b       	or	r24, r17
     818:	80 93 06 21 	sts	0x2106, r24
     81c:	05 c0       	rjmp	.+10     	; 0x828 <PortEx_OUTSET+0x3e>
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
     81e:	80 91 8e 4d 	lds	r24, 0x4D8E
     822:	81 2b       	or	r24, r17
     824:	80 93 8e 4d 	sts	0x4D8E, r24
	
	SPIBuffer[0] = PS_WRITE;
     828:	80 e4       	ldi	r24, 0x40	; 64
     82a:	80 93 7d 4d 	sts	0x4D7D, r24
	if(bank) {
     82e:	66 23       	and	r22, r22
     830:	31 f0       	breq	.+12     	; 0x83e <PortEx_OUTSET+0x54>
		SPIBuffer[1]=PS_OLATA;
     832:	84 e1       	ldi	r24, 0x14	; 20
     834:	80 93 7e 4d 	sts	0x4D7E, r24
		SPIBuffer[2] = bankA_OUT;
     838:	80 91 06 21 	lds	r24, 0x2106
     83c:	05 c0       	rjmp	.+10     	; 0x848 <PortEx_OUTSET+0x5e>
	} else {
		SPIBuffer[1]=PS_OLATB;
     83e:	85 e1       	ldi	r24, 0x15	; 21
     840:	80 93 7e 4d 	sts	0x4D7E, r24
		SPIBuffer[2] = bankB_OUT; 
     844:	80 91 8e 4d 	lds	r24, 0x4D8E
     848:	80 93 7f 4d 	sts	0x4D7F, r24
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     850:	e0 ec       	ldi	r30, 0xC0	; 192
     852:	f8 e0       	ldi	r31, 0x08	; 8
     854:	dc 01       	movw	r26, r24
     856:	a3 58       	subi	r26, 0x83	; 131
     858:	b2 4b       	sbci	r27, 0xB2	; 178
     85a:	2c 91       	ld	r18, X
     85c:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
     85e:	20 91 c2 08 	lds	r18, 0x08C2
     862:	27 ff       	sbrs	r18, 7
     864:	fc cf       	rjmp	.-8      	; 0x85e <PortEx_OUTSET+0x74>
		SPIBuffer[12] = SPIC.DATA;
     866:	20 91 c3 08 	lds	r18, 0x08C3
     86a:	20 93 89 4d 	sts	0x4D89, r18
     86e:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     870:	83 30       	cpi	r24, 0x03	; 3
     872:	91 05       	cpc	r25, r1
     874:	79 f7       	brne	.-34     	; 0x854 <PortEx_OUTSET+0x6a>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	portExCS(FALSE);
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 81 02 	call	0x502	; 0x502 <portExCS>
	SPIDisable();
     882:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
}
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	08 95       	ret

00000890 <set_ampGain>:
 *	All selected op-amps will be set to the same gain value.
 *
 *	\param channel	channel for gain to be set
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 */
void set_ampGain(uint8_t channel, uint8_t gainExponent) {
     890:	cf 93       	push	r28
     892:	c6 2f       	mov	r28, r22
	// set chip select.  note: AD8231 CS is select on low
	PortEx_OUTCLR((1 << channel), PS_BANKA);
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	02 c0       	rjmp	.+4      	; 0x89e <set_ampGain+0xe>
     89a:	22 0f       	add	r18, r18
     89c:	33 1f       	adc	r19, r19
     89e:	8a 95       	dec	r24
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <set_ampGain+0xa>
     8a2:	82 2f       	mov	r24, r18
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	0e 94 a0 03 	call	0x740	; 0x740 <PortEx_OUTCLR>
	//setPortEx(~(1 << channel), PS_BANKA);
	// set gain
	// set bit A0
	if(gainExponent & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
     8aa:	80 e4       	ldi	r24, 0x40	; 64
     8ac:	e0 e0       	ldi	r30, 0x00	; 0
     8ae:	f6 e0       	ldi	r31, 0x06	; 6
     8b0:	c0 ff       	sbrs	r28, 0
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <set_ampGain+0x28>
     8b4:	85 83       	std	Z+5, r24	; 0x05
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <set_ampGain+0x2a>
	else {PORTA.OUTCLR = PIN6_bm;}
     8b8:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1
	if(gainExponent & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	e0 e2       	ldi	r30, 0x20	; 32
     8be:	f6 e0       	ldi	r31, 0x06	; 6
     8c0:	c1 ff       	sbrs	r28, 1
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <set_ampGain+0x38>
     8c4:	85 83       	std	Z+5, r24	; 0x05
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <set_ampGain+0x3a>
	else {PORTB.OUTCLR = PIN1_bm;}
     8c8:	86 83       	std	Z+6, r24	; 0x06
	// set bit A2
	if(gainExponent & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
     8ca:	84 e0       	ldi	r24, 0x04	; 4
     8cc:	e0 e2       	ldi	r30, 0x20	; 32
     8ce:	f6 e0       	ldi	r31, 0x06	; 6
     8d0:	c2 ff       	sbrs	r28, 2
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <set_ampGain+0x48>
     8d4:	85 83       	std	Z+5, r24	; 0x05
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <set_ampGain+0x4a>
	else {PORTB.OUTCLR = PIN2_bm;}
     8d8:	86 83       	std	Z+6, r24	; 0x06
     8da:	8a e0       	ldi	r24, 0x0A	; 10
     8dc:	8a 95       	dec	r24
     8de:	f1 f7       	brne	.-4      	; 0x8dc <set_ampGain+0x4c>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <set_ampGain+0x52>

	_delay_us(1);

	PortEx_OUTSET(0xFF, PS_BANKA);	// write protect all AD8231 amps
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <PortEx_OUTSET>
	//setPortEx(0xFF, PS_BANKA);

}
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <PortEx_DIRCLR>:
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	0f 92       	push	r0
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	69 83       	std	Y+1, r22	; 0x01
     900:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPICS(TRUE);
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	portExCS(TRUE);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 81 02 	call	0x502	; 0x502 <portExCS>
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
     910:	69 81       	ldd	r22, Y+1	; 0x01
     912:	66 23       	and	r22, r22
     914:	39 f0       	breq	.+14     	; 0x924 <PortEx_DIRCLR+0x36>
     916:	80 91 8c 4d 	lds	r24, 0x4D8C
     91a:	80 95       	com	r24
     91c:	81 23       	and	r24, r17
     91e:	80 93 8c 4d 	sts	0x4D8C, r24
     922:	06 c0       	rjmp	.+12     	; 0x930 <PortEx_DIRCLR+0x42>
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
     924:	80 91 b7 4d 	lds	r24, 0x4DB7
     928:	80 95       	com	r24
     92a:	81 23       	and	r24, r17
     92c:	80 93 b7 4d 	sts	0x4DB7, r24
	
	SPIBuffer[0] = PS_WRITE;
     930:	80 e4       	ldi	r24, 0x40	; 64
     932:	80 93 7d 4d 	sts	0x4D7D, r24
	if(bank) {
     936:	66 23       	and	r22, r22
     938:	29 f0       	breq	.+10     	; 0x944 <PortEx_DIRCLR+0x56>
		SPIBuffer[1]=PS_IODIRA;
     93a:	10 92 7e 4d 	sts	0x4D7E, r1
		SPIBuffer[2] = ~bankA_DIR; 
     93e:	80 91 8c 4d 	lds	r24, 0x4D8C
     942:	05 c0       	rjmp	.+10     	; 0x94e <PortEx_DIRCLR+0x60>
	} else {
		SPIBuffer[1]=PS_IODIRB;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 7e 4d 	sts	0x4D7E, r24
		SPIBuffer[2] = ~bankB_DIR;
     94a:	80 91 b7 4d 	lds	r24, 0x4DB7
     94e:	80 95       	com	r24
     950:	80 93 7f 4d 	sts	0x4D7F, r24
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     958:	e0 ec       	ldi	r30, 0xC0	; 192
     95a:	f8 e0       	ldi	r31, 0x08	; 8
     95c:	dc 01       	movw	r26, r24
     95e:	a3 58       	subi	r26, 0x83	; 131
     960:	b2 4b       	sbci	r27, 0xB2	; 178
     962:	2c 91       	ld	r18, X
     964:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
     966:	20 91 c2 08 	lds	r18, 0x08C2
     96a:	27 ff       	sbrs	r18, 7
     96c:	fc cf       	rjmp	.-8      	; 0x966 <PortEx_DIRCLR+0x78>
		SPIBuffer[12] = SPIC.DATA;
     96e:	20 91 c3 08 	lds	r18, 0x08C3
     972:	20 93 89 4d 	sts	0x4D89, r18
     976:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	91 05       	cpc	r25, r1
     97c:	79 f7       	brne	.-34     	; 0x95c <PortEx_DIRCLR+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	portExCS(FALSE);
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0e 94 81 02 	call	0x502	; 0x502 <portExCS>
	SPIDisable();
     98a:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
}
     98e:	0f 90       	pop	r0
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <PortEx_DIRSET>:
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	0f 92       	push	r0
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	69 83       	std	Y+1, r22	; 0x01
     9aa:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPICS(TRUE);
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	portExCS(TRUE);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 81 02 	call	0x502	; 0x502 <portExCS>

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
     9ba:	69 81       	ldd	r22, Y+1	; 0x01
     9bc:	66 23       	and	r22, r22
     9be:	31 f0       	breq	.+12     	; 0x9cc <PortEx_DIRSET+0x34>
     9c0:	80 91 8c 4d 	lds	r24, 0x4D8C
     9c4:	81 2b       	or	r24, r17
     9c6:	80 93 8c 4d 	sts	0x4D8C, r24
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <PortEx_DIRSET+0x3e>
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
     9cc:	80 91 b7 4d 	lds	r24, 0x4DB7
     9d0:	81 2b       	or	r24, r17
     9d2:	80 93 b7 4d 	sts	0x4DB7, r24
	
	SPIBuffer[0] = PS_WRITE;
     9d6:	80 e4       	ldi	r24, 0x40	; 64
     9d8:	80 93 7d 4d 	sts	0x4D7D, r24
	if(bank) {
     9dc:	66 23       	and	r22, r22
     9de:	29 f0       	breq	.+10     	; 0x9ea <PortEx_DIRSET+0x52>
		SPIBuffer[1]=PS_IODIRA;
     9e0:	10 92 7e 4d 	sts	0x4D7E, r1
		SPIBuffer[2] = ~bankA_DIR; 
     9e4:	80 91 8c 4d 	lds	r24, 0x4D8C
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <PortEx_DIRSET+0x5c>
	} else {
		SPIBuffer[1]=PS_IODIRB;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	80 93 7e 4d 	sts	0x4D7E, r24
		SPIBuffer[2] = ~bankB_DIR;
     9f0:	80 91 b7 4d 	lds	r24, 0x4DB7
     9f4:	80 95       	com	r24
     9f6:	80 93 7f 4d 	sts	0x4D7F, r24
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     9fe:	e0 ec       	ldi	r30, 0xC0	; 192
     a00:	f8 e0       	ldi	r31, 0x08	; 8
     a02:	dc 01       	movw	r26, r24
     a04:	a3 58       	subi	r26, 0x83	; 131
     a06:	b2 4b       	sbci	r27, 0xB2	; 178
     a08:	2c 91       	ld	r18, X
     a0a:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
     a0c:	20 91 c2 08 	lds	r18, 0x08C2
     a10:	27 ff       	sbrs	r18, 7
     a12:	fc cf       	rjmp	.-8      	; 0xa0c <PortEx_DIRSET+0x74>
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
     a14:	20 91 c3 08 	lds	r18, 0x08C3
     a18:	20 93 89 4d 	sts	0x4D89, r18
     a1c:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     a1e:	83 30       	cpi	r24, 0x03	; 3
     a20:	91 05       	cpc	r25, r1
     a22:	79 f7       	brne	.-34     	; 0xa02 <PortEx_DIRSET+0x6a>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
	}

	portExCS(FALSE);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 81 02 	call	0x502	; 0x502 <portExCS>
	SPICS(FALSE);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	SPIDisable();
     a30:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>


}
     a34:	0f 90       	pop	r0
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	08 95       	ret

00000a3e <ADCPower>:
	portExCS(FALSE);	
	SPIDisable();
}
*/

void ADCPower(uint8_t on) {
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
	if (on) {
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
     a46:	00 e0       	ldi	r16, 0x00	; 0
     a48:	16 e0       	ldi	r17, 0x06	; 6
	SPIDisable();
}
*/

void ADCPower(uint8_t on) {
	if (on) {
     a4a:	88 23       	and	r24, r24
     a4c:	09 f4       	brne	.+2      	; 0xa50 <ADCPower+0x12>
     a4e:	44 c0       	rjmp	.+136    	; 0xad8 <ADCPower+0x9a>
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
     a50:	8e ed       	ldi	r24, 0xDE	; 222
     a52:	d8 01       	movw	r26, r16
     a54:	11 96       	adiw	r26, 0x01	; 1
     a56:	8c 93       	st	X, r24
		PORTB.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     a58:	c0 e2       	ldi	r28, 0x20	; 32
     a5a:	d6 e0       	ldi	r29, 0x06	; 6
     a5c:	4e e0       	ldi	r20, 0x0E	; 14
     a5e:	49 83       	std	Y+1, r20	; 0x01
		PORTC.DIRSET = PIN0_bm | PIN1_bm;// VDCA and VDC-2 and MUX-SYNC1
     a60:	e0 e4       	ldi	r30, 0x40	; 64
     a62:	f6 e0       	ldi	r31, 0x06	; 6
     a64:	63 e0       	ldi	r22, 0x03	; 3
     a66:	61 83       	std	Z+1, r22	; 0x01
		PORTE.DIRSET = PIN4_bm; // MUX-SYNC2
     a68:	80 e8       	ldi	r24, 0x80	; 128
     a6a:	96 e0       	ldi	r25, 0x06	; 6
     a6c:	50 e1       	ldi	r21, 0x10	; 16
     a6e:	dc 01       	movw	r26, r24
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	5c 93       	st	X, r21
		PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; // DAC LDAC and CS
     a74:	20 ea       	ldi	r18, 0xA0	; 160
     a76:	36 e0       	ldi	r19, 0x06	; 6
     a78:	d9 01       	movw	r26, r18
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	4c 93       	st	X, r20

		// high signal to write protect
		PORTA.OUTSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm;; // portEx-CS
     a7e:	7e e9       	ldi	r23, 0x9E	; 158
     a80:	d8 01       	movw	r26, r16
     a82:	15 96       	adiw	r26, 0x05	; 5
     a84:	7c 93       	st	X, r23
		PORTB.OUTSET = PIN3_bm; // FRAM-CS
     a86:	78 e0       	ldi	r23, 0x08	; 8
     a88:	7d 83       	std	Y+5, r23	; 0x05
		PORTC.OUTSET = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     a8a:	65 83       	std	Z+5, r22	; 0x05
		PORTE.OUTSET = PIN4_bm; // MUX-SYNC2
     a8c:	ec 01       	movw	r28, r24
     a8e:	5d 83       	std	Y+5, r21	; 0x05
		PORTF.OUTSET = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     a90:	d9 01       	movw	r26, r18
     a92:	15 96       	adiw	r26, 0x05	; 5
     a94:	4c 93       	st	X, r20
		channelStatus = 0x00; // POR to zeros
     a96:	10 92 8d 4d 	sts	0x4D8D, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	93 ec       	ldi	r25, 0xC3	; 195
     a9e:	a9 e0       	ldi	r26, 0x09	; 9
     aa0:	81 50       	subi	r24, 0x01	; 1
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	a0 40       	sbci	r26, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <ADCPower+0x62>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <ADCPower+0x6c>
     aaa:	00 00       	nop
		_delay_ms(100);

		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     aac:	80 e4       	ldi	r24, 0x40	; 64
     aae:	82 83       	std	Z+2, r24	; 0x02
				
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     ab0:	10 92 8e 4d 	sts	0x4D8E, r1
     ab4:	10 92 b7 4d 	sts	0x4DB7, r1
     ab8:	10 92 06 21 	sts	0x2106, r1
     abc:	10 92 8c 4d 	sts	0x4D8C, r1
		PortEx_DIRSET(0xFF, PS_BANKA);
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	0e 94 cc 04 	call	0x998	; 0x998 <PortEx_DIRSET>
		PortEx_OUTSET(0xFF, PS_BANKA);  //write protect IN-AMP 1 thru 8
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <PortEx_OUTSET>
		//setPortEx(0xFF, PS_BANKA);
		set_filter(0xFF);  // set filters initially to ensure data out pulled high
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	0e 94 3d 03 	call	0x67a	; 0x67a <set_filter>
     ad6:	30 c0       	rjmp	.+96     	; 0xb38 <ADCPower+0xfa>

	} else {
		// low signal for low power
		PORTA.OUTCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and A0
     ad8:	7e ed       	ldi	r23, 0xDE	; 222
     ada:	d8 01       	movw	r26, r16
     adc:	16 96       	adiw	r26, 0x06	; 6
     ade:	7c 93       	st	X, r23
		PORTB.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     ae0:	a0 e2       	ldi	r26, 0x20	; 32
     ae2:	b6 e0       	ldi	r27, 0x06	; 6
     ae4:	4e e0       	ldi	r20, 0x0E	; 14
     ae6:	16 96       	adiw	r26, 0x06	; 6
     ae8:	4c 93       	st	X, r20
     aea:	16 97       	sbiw	r26, 0x06	; 6
		PORTC.OUTCLR = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     aec:	20 e4       	ldi	r18, 0x40	; 64
     aee:	36 e0       	ldi	r19, 0x06	; 6
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	e9 01       	movw	r28, r18
     af4:	6e 83       	std	Y+6, r22	; 0x06
		PORTE.OUTCLR = PIN4_bm; // MUX-SYNC2
     af6:	c0 e8       	ldi	r28, 0x80	; 128
     af8:	d6 e0       	ldi	r29, 0x06	; 6
     afa:	50 e1       	ldi	r21, 0x10	; 16
     afc:	5e 83       	std	Y+6, r21	; 0x06
		PORTF.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     afe:	80 ea       	ldi	r24, 0xA0	; 160
     b00:	96 e0       	ldi	r25, 0x06	; 6
     b02:	fc 01       	movw	r30, r24
     b04:	46 83       	std	Z+6, r20	; 0x06


		PORTA.DIRCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm | PIN6_bm;
     b06:	f8 01       	movw	r30, r16
     b08:	72 83       	std	Z+2, r23	; 0x02
		PORTB.DIRCLR = PIN1_bm | PIN2_bm| PIN3_bm;
     b0a:	12 96       	adiw	r26, 0x02	; 2
     b0c:	4c 93       	st	X, r20
		PORTC.DIRCLR = PIN0_bm | PIN1_bm;
     b0e:	d9 01       	movw	r26, r18
     b10:	12 96       	adiw	r26, 0x02	; 2
     b12:	6c 93       	st	X, r22
     b14:	12 97       	sbiw	r26, 0x02	; 2
		PORTE.DIRCLR = PIN4_bm;
     b16:	5a 83       	std	Y+2, r21	; 0x02
		PORTF.DIRCLR = PIN1_bm | PIN2_bm | PIN3_bm;
     b18:	ec 01       	movw	r28, r24
     b1a:	4a 83       	std	Y+2, r20	; 0x02
		
		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
     b1c:	80 e4       	ldi	r24, 0x40	; 64
     b1e:	12 96       	adiw	r26, 0x02	; 2
     b20:	8c 93       	st	X, r24
     b22:	12 97       	sbiw	r26, 0x02	; 2
		
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     b24:	10 92 8e 4d 	sts	0x4D8E, r1
     b28:	10 92 b7 4d 	sts	0x4DB7, r1
     b2c:	10 92 06 21 	sts	0x2106, r1
     b30:	10 92 8c 4d 	sts	0x4D8C, r1
		channelStatus = 0x00;
     b34:	10 92 8d 4d 	sts	0x4D8D, r1
		
	}
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <CO_collectTemp>:
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
     b42:	2f 92       	push	r2
     b44:	3f 92       	push	r3
     b46:	4f 92       	push	r4
     b48:	5f 92       	push	r5
     b4a:	6f 92       	push	r6
     b4c:	7f 92       	push	r7
     b4e:	8f 92       	push	r8
     b50:	9f 92       	push	r9
     b52:	af 92       	push	r10
     b54:	bf 92       	push	r11
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	25 97       	sbiw	r28, 0x05	; 5
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	1c 01       	movw	r2, r24
     b72:	6a 83       	std	Y+2, r22	; 0x02
     b74:	7b 83       	std	Y+3, r23	; 0x03
     b76:	4c 83       	std	Y+4, r20	; 0x04
     b78:	5d 83       	std	Y+5, r21	; 0x05
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>

	/* Move stored calibration values to ADCA. */
	ADC_CalibrationValues_Load(&ADCA);
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 a5 01 	call	0x34a	; 0x34a <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
     b88:	00 e0       	ldi	r16, 0x00	; 0
     b8a:	12 e0       	ldi	r17, 0x02	; 2
     b8c:	80 91 01 02 	lds	r24, 0x0201
     b90:	89 7e       	andi	r24, 0xE9	; 233
     b92:	f8 01       	movw	r30, r16
     b94:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV32_gc);
     b96:	80 91 04 02 	lds	r24, 0x0204
     b9a:	88 7f       	andi	r24, 0xF8	; 248
     b9c:	83 60       	ori	r24, 0x03	; 3
     b9e:	84 83       	std	Z+4, r24	; 0x04

	/* Set reference voltage on ADCA to be 1.0 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_INT1V_gc); 
     ba0:	80 91 02 02 	lds	r24, 0x0202
     ba4:	8f 7c       	andi	r24, 0xCF	; 207
     ba6:	82 83       	std	Z+2, r24	; 0x02

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     ba8:	a0 e2       	ldi	r26, 0x20	; 32
     baa:	ca 2e       	mov	r12, r26
     bac:	a2 e0       	ldi	r26, 0x02	; 2
     bae:	da 2e       	mov	r13, r26
     bb0:	80 91 20 02 	lds	r24, 0x0220
     bb4:	80 7e       	andi	r24, 0xE0	; 224
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	80 93 20 02 	sts	0x0220, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	/* Get offset value for ADCA. */
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
     bbc:	89 e0       	ldi	r24, 0x09	; 9
     bbe:	f6 01       	movw	r30, r12
     bc0:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
     bc2:	80 91 00 02 	lds	r24, 0x0200
     bc6:	81 60       	ori	r24, 0x01	; 1
     bc8:	80 93 00 02 	sts	0x0200, r24
	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	0e 94 43 01 	call	0x286	; 0x286 <ADC_Wait_32MHz>
 	offset = ADC_Offset_Get_Unsigned(&ADCA, &ADCA.CH0, false);
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	60 e2       	ldi	r22, 0x20	; 32
     bda:	72 e0       	ldi	r23, 0x02	; 2
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_Offset_Get_Unsigned>
     be2:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCA);
     be4:	80 91 00 02 	lds	r24, 0x0200
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	80 93 00 02 	sts	0x0200, r24
    
	/* Set input to the channels in ADCA */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
     bee:	f6 01       	movw	r30, r12
     bf0:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
     bf2:	80 91 03 02 	lds	r24, 0x0203
     bf6:	8f 73       	andi	r24, 0x3F	; 63
     bf8:	f8 01       	movw	r30, r16
     bfa:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC .*/
	ADC_Enable(&ADCA);
     bfc:	80 91 00 02 	lds	r24, 0x0200
     c00:	81 60       	ori	r24, 0x01	; 1
     c02:	80 93 00 02 	sts	0x0200, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	0e 94 43 01 	call	0x286	; 0x286 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
     c0e:	80 91 01 02 	lds	r24, 0x0201
     c12:	88 60       	ori	r24, 0x08	; 8
     c14:	f8 01       	movw	r30, r16
     c16:	81 83       	std	Z+1, r24	; 0x01
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	14 e0       	ldi	r17, 0x04	; 4
void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
     c1c:	88 24       	eor	r8, r8
     c1e:	99 24       	eor	r9, r9
     c20:	54 01       	movw	r10, r8

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
     c22:	41 2c       	mov	r4, r1
     c24:	b0 e1       	ldi	r27, 0x10	; 16
     c26:	5b 2e       	mov	r5, r27
     c28:	61 2c       	mov	r6, r1
     c2a:	71 2c       	mov	r7, r1
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
     c2c:	cc 24       	eor	r12, r12
     c2e:	dd 24       	eor	r13, r13
     c30:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
     c32:	80 91 23 02 	lds	r24, 0x0223
     c36:	80 ff       	sbrs	r24, 0
     c38:	fc cf       	rjmp	.-8      	; 0xc32 <CO_collectTemp+0xf0>
		tempResult = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
     c3a:	69 81       	ldd	r22, Y+1	; 0x01
     c3c:	80 e2       	ldi	r24, 0x20	; 32
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 1f 01 	call	0x23e	; 0x23e <ADC_ResultCh_GetWord_Signed>
		sum+=tempResult;
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	c8 0e       	add	r12, r24
     c4a:	d9 1e       	adc	r13, r25
     c4c:	ea 1e       	adc	r14, r26
     c4e:	fb 1e       	adc	r15, r27
     c50:	88 16       	cp	r8, r24
     c52:	99 06       	cpc	r9, r25
     c54:	aa 06       	cpc	r10, r26
     c56:	bb 06       	cpc	r11, r27
     c58:	10 f4       	brcc	.+4      	; 0xc5e <CO_collectTemp+0x11c>
     c5a:	4c 01       	movw	r8, r24
     c5c:	5d 01       	movw	r10, r26
     c5e:	84 15       	cp	r24, r4
     c60:	95 05       	cpc	r25, r5
     c62:	a6 05       	cpc	r26, r6
     c64:	b7 05       	cpc	r27, r7
     c66:	10 f4       	brcc	.+4      	; 0xc6c <CO_collectTemp+0x12a>
     c68:	2c 01       	movw	r4, r24
     c6a:	3d 01       	movw	r6, r26
     c6c:	01 50       	subi	r16, 0x01	; 1
     c6e:	10 40       	sbci	r17, 0x00	; 0

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);

	/* Sample onboard ADC.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
     c70:	01 f7       	brne	.-64     	; 0xc32 <CO_collectTemp+0xf0>
		if (min > tempResult) { min = tempResult;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCA);
     c72:	80 91 01 02 	lds	r24, 0x0201
     c76:	87 7f       	andi	r24, 0xF7	; 247
     c78:	e0 e0       	ldi	r30, 0x00	; 0
     c7a:	f2 e0       	ldi	r31, 0x02	; 2
     c7c:	81 83       	std	Z+1, r24	; 0x01
	ADC_Pipeline_Flush(&ADCA);
     c7e:	80 91 00 02 	lds	r24, 0x0200
     c82:	82 60       	ori	r24, 0x02	; 2
     c84:	80 93 00 02 	sts	0x0200, r24
	ADC_Disable(&ADCA);
     c88:	80 91 00 02 	lds	r24, 0x0200
     c8c:	8e 7f       	andi	r24, 0xFE	; 254
     c8e:	80 93 00 02 	sts	0x0200, r24

	ADCPower(FALSE);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>

	average = sum / NUM_SAMPLES;
     c98:	c7 01       	movw	r24, r14
     c9a:	b6 01       	movw	r22, r12
     c9c:	2a e0       	ldi	r18, 0x0A	; 10
     c9e:	96 95       	lsr	r25
     ca0:	87 95       	ror	r24
     ca2:	77 95       	ror	r23
     ca4:	67 95       	ror	r22
     ca6:	2a 95       	dec	r18
     ca8:	d1 f7       	brne	.-12     	; 0xc9e <CO_collectTemp+0x15c>

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
     caa:	28 ee       	ldi	r18, 0xE8	; 232
     cac:	33 e0       	ldi	r19, 0x03	; 3
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
     cb6:	ef ef       	ldi	r30, 0xFF	; 255
     cb8:	ce 2e       	mov	r12, r30
     cba:	ef e0       	ldi	r30, 0x0F	; 15
     cbc:	de 2e       	mov	r13, r30
     cbe:	e1 2c       	mov	r14, r1
     cc0:	f1 2c       	mov	r15, r1
     cc2:	a7 01       	movw	r20, r14
     cc4:	96 01       	movw	r18, r12
     cc6:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
     cca:	c9 01       	movw	r24, r18
     ccc:	c2 97       	sbiw	r24, 0x32	; 50
     cce:	f1 01       	movw	r30, r2
     cd0:	80 83       	st	Z, r24
     cd2:	91 83       	std	Z+1, r25	; 0x01
	*maxV = (max * 1000 / 4095) - 50;
     cd4:	c5 01       	movw	r24, r10
     cd6:	b4 01       	movw	r22, r8
     cd8:	28 ee       	ldi	r18, 0xE8	; 232
     cda:	33 e0       	ldi	r19, 0x03	; 3
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
     ce4:	a7 01       	movw	r20, r14
     ce6:	96 01       	movw	r18, r12
     ce8:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
     cec:	22 53       	subi	r18, 0x32	; 50
     cee:	30 40       	sbci	r19, 0x00	; 0
     cf0:	ec 81       	ldd	r30, Y+4	; 0x04
     cf2:	fd 81       	ldd	r31, Y+5	; 0x05
     cf4:	20 83       	st	Z, r18
     cf6:	31 83       	std	Z+1, r19	; 0x01
	*minV = (min * 1000  / 4095) - 50;
     cf8:	c3 01       	movw	r24, r6
     cfa:	b2 01       	movw	r22, r4
     cfc:	28 ee       	ldi	r18, 0xE8	; 232
     cfe:	33 e0       	ldi	r19, 0x03	; 3
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
     d08:	a7 01       	movw	r20, r14
     d0a:	96 01       	movw	r18, r12
     d0c:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
     d10:	22 53       	subi	r18, 0x32	; 50
     d12:	30 40       	sbci	r19, 0x00	; 0
     d14:	ea 81       	ldd	r30, Y+2	; 0x02
     d16:	fb 81       	ldd	r31, Y+3	; 0x03
     d18:	20 83       	st	Z, r18
     d1a:	31 83       	std	Z+1, r19	; 0x01
}
     d1c:	25 96       	adiw	r28, 0x05	; 5
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	df 90       	pop	r13
     d30:	cf 90       	pop	r12
     d32:	bf 90       	pop	r11
     d34:	af 90       	pop	r10
     d36:	9f 90       	pop	r9
     d38:	8f 90       	pop	r8
     d3a:	7f 90       	pop	r7
     d3c:	6f 90       	pop	r6
     d3e:	5f 90       	pop	r5
     d40:	4f 90       	pop	r4
     d42:	3f 90       	pop	r3
     d44:	2f 90       	pop	r2
     d46:	08 95       	ret

00000d48 <CO_collectBatt>:


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
     d48:	2f 92       	push	r2
     d4a:	3f 92       	push	r3
     d4c:	4f 92       	push	r4
     d4e:	5f 92       	push	r5
     d50:	6f 92       	push	r6
     d52:	7f 92       	push	r7
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	25 97       	sbiw	r28, 0x05	; 5
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	1c 01       	movw	r2, r24
     d78:	6a 83       	std	Y+2, r22	; 0x02
     d7a:	7b 83       	std	Y+3, r23	; 0x03
     d7c:	4c 83       	std	Y+4, r20	; 0x04
     d7e:	5d 83       	std	Y+5, r21	; 0x05
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	PortEx_DIRSET(BIT2_bm, PS_BANKB);
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	0e 94 cc 04 	call	0x998	; 0x998 <PortEx_DIRSET>
	PortEx_OUTSET(BIT2_bm, PS_BANKB); // activate PIO24 (VBATT)
     d8e:	84 e0       	ldi	r24, 0x04	; 4
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	0e 94 f5 03 	call	0x7ea	; 0x7ea <PortEx_OUTSET>
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	93 ec       	ldi	r25, 0xC3	; 195
     d9a:	a9 e0       	ldi	r26, 0x09	; 9
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	90 40       	sbci	r25, 0x00	; 0
     da0:	a0 40       	sbci	r26, 0x00	; 0
     da2:	e1 f7       	brne	.-8      	; 0xd9c <CO_collectBatt+0x54>
     da4:	00 c0       	rjmp	.+0      	; 0xda6 <CO_collectBatt+0x5e>
     da6:	00 00       	nop
	_delay_ms(100);
	//setPortEx(BIT2_bm, PS_BANKB);
		
	/* Move stored calibration values to ADCB. */
	ADC_CalibrationValues_Load(&ADCB);
     da8:	80 e4       	ldi	r24, 0x40	; 64
     daa:	92 e0       	ldi	r25, 0x02	; 2
     dac:	0e 94 a5 01 	call	0x34a	; 0x34a <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
     db0:	00 e4       	ldi	r16, 0x40	; 64
     db2:	12 e0       	ldi	r17, 0x02	; 2
     db4:	80 91 41 02 	lds	r24, 0x0241
     db8:	89 7e       	andi	r24, 0xE9	; 233
     dba:	d8 01       	movw	r26, r16
     dbc:	11 96       	adiw	r26, 0x01	; 1
     dbe:	8c 93       	st	X, r24
     dc0:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV32_gc);
     dc2:	80 91 44 02 	lds	r24, 0x0244
     dc6:	88 7f       	andi	r24, 0xF8	; 248
     dc8:	83 60       	ori	r24, 0x03	; 3
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	8c 93       	st	X, r24
     dce:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCB to be 1.0 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_INT1V_gc); 
     dd0:	80 91 42 02 	lds	r24, 0x0242
     dd4:	8f 7c       	andi	r24, 0xCF	; 207
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	8c 93       	st	X, r24

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
     dda:	80 e6       	ldi	r24, 0x60	; 96
     ddc:	c8 2e       	mov	r12, r24
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	d8 2e       	mov	r13, r24
     de2:	80 91 60 02 	lds	r24, 0x0260
     de6:	80 7e       	andi	r24, 0xE0	; 224
     de8:	81 60       	ori	r24, 0x01	; 1
     dea:	80 93 60 02 	sts	0x0260, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	// Get offset value for ADCB.
   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
     dee:	89 e0       	ldi	r24, 0x09	; 9
     df0:	f6 01       	movw	r30, r12
     df2:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
     df4:	80 91 40 02 	lds	r24, 0x0240
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	80 93 40 02 	sts	0x0240, r24
	// Wait until common mode voltage is stable. Default clk is 16MHz
	ADC_Wait_32MHz(&ADCB);
     dfe:	80 e4       	ldi	r24, 0x40	; 64
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	0e 94 43 01 	call	0x286	; 0x286 <ADC_Wait_32MHz>
	offset = ADC_Offset_Get_Unsigned(&ADCB, &ADCB.CH0, false);
     e06:	80 e4       	ldi	r24, 0x40	; 64
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	60 e6       	ldi	r22, 0x60	; 96
     e0c:	72 e0       	ldi	r23, 0x02	; 2
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_Offset_Get_Unsigned>
     e14:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCB);
     e16:	80 91 40 02 	lds	r24, 0x0240
     e1a:	8e 7f       	andi	r24, 0xFE	; 254
     e1c:	80 93 40 02 	sts	0x0240, r24
    
	/* Set input to the channels in ADC B */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
     e20:	d6 01       	movw	r26, r12
     e22:	11 96       	adiw	r26, 0x01	; 1
     e24:	1c 92       	st	X, r1
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0_gc);
     e26:	80 91 43 02 	lds	r24, 0x0243
     e2a:	8f 73       	andi	r24, 0x3F	; 63
     e2c:	f8 01       	movw	r30, r16
     e2e:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC .*/
	ADC_Enable(&ADCB);
     e30:	80 91 40 02 	lds	r24, 0x0240
     e34:	81 60       	ori	r24, 0x01	; 1
     e36:	80 93 40 02 	sts	0x0240, r24

	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 43 01 	call	0x286	; 0x286 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);
     e42:	80 91 41 02 	lds	r24, 0x0241
     e46:	88 60       	ori	r24, 0x08	; 8
     e48:	d8 01       	movw	r26, r16
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	8c 93       	st	X, r24
     e4e:	11 97       	sbiw	r26, 0x01	; 1
     e50:	00 e0       	ldi	r16, 0x00	; 0
     e52:	14 e0       	ldi	r17, 0x04	; 4
void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
     e54:	88 24       	eor	r8, r8
     e56:	99 24       	eor	r9, r9
     e58:	54 01       	movw	r10, r8

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
     e5a:	41 2c       	mov	r4, r1
     e5c:	20 e1       	ldi	r18, 0x10	; 16
     e5e:	52 2e       	mov	r5, r18
     e60:	61 2c       	mov	r6, r1
     e62:	71 2c       	mov	r7, r1
	*minV = (min * 1000  / 4095) - 50;
}


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
     e64:	cc 24       	eor	r12, r12
     e66:	dd 24       	eor	r13, r13
     e68:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCB channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCB.CH0));
     e6a:	80 91 63 02 	lds	r24, 0x0263
     e6e:	80 ff       	sbrs	r24, 0
     e70:	fc cf       	rjmp	.-8      	; 0xe6a <CO_collectBatt+0x122>
		tempResultB = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, offset);
     e72:	69 81       	ldd	r22, Y+1	; 0x01
     e74:	80 e6       	ldi	r24, 0x60	; 96
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	0e 94 1f 01 	call	0x23e	; 0x23e <ADC_ResultCh_GetWord_Signed>
		sum+=tempResultB;
     e7c:	a0 e0       	ldi	r26, 0x00	; 0
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	c8 0e       	add	r12, r24
     e82:	d9 1e       	adc	r13, r25
     e84:	ea 1e       	adc	r14, r26
     e86:	fb 1e       	adc	r15, r27
     e88:	88 16       	cp	r8, r24
     e8a:	99 06       	cpc	r9, r25
     e8c:	aa 06       	cpc	r10, r26
     e8e:	bb 06       	cpc	r11, r27
     e90:	10 f4       	brcc	.+4      	; 0xe96 <CO_collectBatt+0x14e>
     e92:	4c 01       	movw	r8, r24
     e94:	5d 01       	movw	r10, r26
     e96:	84 15       	cp	r24, r4
     e98:	95 05       	cpc	r25, r5
     e9a:	a6 05       	cpc	r26, r6
     e9c:	b7 05       	cpc	r27, r7
     e9e:	10 f4       	brcc	.+4      	; 0xea4 <CO_collectBatt+0x15c>
     ea0:	2c 01       	movw	r4, r24
     ea2:	3d 01       	movw	r6, r26
     ea4:	01 50       	subi	r16, 0x01	; 1
     ea6:	10 40       	sbci	r17, 0x00	; 0

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);

	/* Store samples.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
     ea8:	01 f7       	brne	.-64     	; 0xe6a <CO_collectBatt+0x122>
		if (min > tempResultB) { min = tempResultB;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
     eaa:	80 91 41 02 	lds	r24, 0x0241
     eae:	87 7f       	andi	r24, 0xF7	; 247
     eb0:	e0 e4       	ldi	r30, 0x40	; 64
     eb2:	f2 e0       	ldi	r31, 0x02	; 2
     eb4:	81 83       	std	Z+1, r24	; 0x01
	ADC_Disable(&ADCB);
     eb6:	80 91 40 02 	lds	r24, 0x0240
     eba:	8e 7f       	andi	r24, 0xFE	; 254
     ebc:	80 93 40 02 	sts	0x0240, r24

	average = sum / NUM_SAMPLES;
	
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
     ec0:	84 e0       	ldi	r24, 0x04	; 4
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	0e 94 77 04 	call	0x8ee	; 0x8ee <PortEx_DIRCLR>
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
	ADC_Disable(&ADCB);

	average = sum / NUM_SAMPLES;
     ece:	c7 01       	movw	r24, r14
     ed0:	b6 01       	movw	r22, r12
     ed2:	1a e0       	ldi	r17, 0x0A	; 10
     ed4:	96 95       	lsr	r25
     ed6:	87 95       	ror	r24
     ed8:	77 95       	ror	r23
     eda:	67 95       	ror	r22
     edc:	1a 95       	dec	r17
     ede:	d1 f7       	brne	.-12     	; 0xed4 <CO_collectBatt+0x18c>
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
     ee0:	28 ee       	ldi	r18, 0xE8	; 232
     ee2:	33 e0       	ldi	r19, 0x03	; 3
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
     eec:	0f ef       	ldi	r16, 0xFF	; 255
     eee:	c0 2e       	mov	r12, r16
     ef0:	0f e0       	ldi	r16, 0x0F	; 15
     ef2:	d0 2e       	mov	r13, r16
     ef4:	e1 2c       	mov	r14, r1
     ef6:	f1 2c       	mov	r15, r1
     ef8:	a7 01       	movw	r20, r14
     efa:	96 01       	movw	r18, r12
     efc:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
     f00:	c9 01       	movw	r24, r18
     f02:	c2 97       	sbiw	r24, 0x32	; 50
     f04:	f1 01       	movw	r30, r2
     f06:	80 83       	st	Z, r24
     f08:	91 83       	std	Z+1, r25	; 0x01
	*maxV = (max * 1000 / 4095) - 50;
     f0a:	c5 01       	movw	r24, r10
     f0c:	b4 01       	movw	r22, r8
     f0e:	28 ee       	ldi	r18, 0xE8	; 232
     f10:	33 e0       	ldi	r19, 0x03	; 3
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
     f1a:	a7 01       	movw	r20, r14
     f1c:	96 01       	movw	r18, r12
     f1e:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
     f22:	22 53       	subi	r18, 0x32	; 50
     f24:	30 40       	sbci	r19, 0x00	; 0
     f26:	ac 81       	ldd	r26, Y+4	; 0x04
     f28:	bd 81       	ldd	r27, Y+5	; 0x05
     f2a:	2d 93       	st	X+, r18
     f2c:	3c 93       	st	X, r19
     f2e:	11 97       	sbiw	r26, 0x01	; 1
	*minV = (min * 1000  / 4095) - 50;
     f30:	c3 01       	movw	r24, r6
     f32:	b2 01       	movw	r22, r4
     f34:	28 ee       	ldi	r18, 0xE8	; 232
     f36:	33 e0       	ldi	r19, 0x03	; 3
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
     f40:	a7 01       	movw	r20, r14
     f42:	96 01       	movw	r18, r12
     f44:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
     f48:	22 53       	subi	r18, 0x32	; 50
     f4a:	30 40       	sbci	r19, 0x00	; 0
     f4c:	ea 81       	ldd	r30, Y+2	; 0x02
     f4e:	fb 81       	ldd	r31, Y+3	; 0x03
     f50:	20 83       	st	Z, r18
     f52:	31 83       	std	Z+1, r19	; 0x01
}
     f54:	25 96       	adiw	r28, 0x05	; 5
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	bf 90       	pop	r11
     f6c:	af 90       	pop	r10
     f6e:	9f 90       	pop	r9
     f70:	8f 90       	pop	r8
     f72:	7f 90       	pop	r7
     f74:	6f 90       	pop	r6
     f76:	5f 90       	pop	r5
     f78:	4f 90       	pop	r4
     f7a:	3f 90       	pop	r3
     f7c:	2f 90       	pop	r2
     f7e:	08 95       	ret

00000f80 <__vector_104>:
	*maxV = (int32_t) -(max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
	*minV = (int32_t) -(min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);

}

ISR(PORTF_INT0_vect) {
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	0b b6       	in	r0, 0x3b	; 59
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
	// skip first samples because cannot perform recommended reset
	if (discardCount < ADC_DISCARD) {
     fa6:	80 91 7a 3d 	lds	r24, 0x3D7A
     faa:	87 fd       	sbrc	r24, 7
     fac:	06 c0       	rjmp	.+12     	; 0xfba <__vector_104+0x3a>
		discardCount++;
     fae:	80 91 7a 3d 	lds	r24, 0x3D7A
     fb2:	8f 5f       	subi	r24, 0xFF	; 255
     fb4:	80 93 7a 3d 	sts	0x3D7A, r24
     fb8:	64 c0       	rjmp	.+200    	; 0x1082 <__vector_104+0x102>
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	e0 ea       	ldi	r30, 0xA0	; 160
     fc4:	f6 e0       	ldi	r31, 0x06	; 6
     fc6:	86 83       	std	Z+6, r24	; 0x06
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
     fcc:	e0 ec       	ldi	r30, 0xC0	; 192
     fce:	f8 e0       	ldi	r31, 0x08	; 8
     fd0:	2a ea       	ldi	r18, 0xAA	; 170
     fd2:	23 83       	std	Z+3, r18	; 0x03
			while(!(SPIC.STATUS & SPI_IF_bm));
     fd4:	30 91 c2 08 	lds	r19, 0x08C2
     fd8:	37 ff       	sbrs	r19, 7
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <__vector_104+0x54>
			SPIBuffer[bufIndex] = SPIC.DATA;
     fdc:	30 91 c3 08 	lds	r19, 0x08C3
     fe0:	dc 01       	movw	r26, r24
     fe2:	a3 58       	subi	r26, 0x83	; 131
     fe4:	b2 4b       	sbci	r27, 0xB2	; 178
     fe6:	3c 93       	st	X, r19
     fe8:	01 96       	adiw	r24, 0x01	; 1
		discardCount++;
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	91 05       	cpc	r25, r1
     fee:	89 f7       	brne	.-30     	; 0xfd2 <__vector_104+0x52>
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	e0 ea       	ldi	r30, 0xA0	; 160
     ff4:	f6 e0       	ldi	r31, 0x06	; 6
     ff6:	85 83       	std	Z+5, r24	; 0x05
		SPICS(FALSE);
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>

		// create 32 bits from SPIBuffer[0:2] with sign extension of SPIBuffer[0][7]
		if(SPIBuffer[0] & BIT7_bm) *(((uint8_t*)&data24Bit[sampleCount]) + 3) = 0xFF; // sign extension if negative
     ffe:	80 91 7d 4d 	lds	r24, 0x4D7D
    1002:	e0 91 8a 4d 	lds	r30, 0x4D8A
    1006:	f0 91 8b 4d 	lds	r31, 0x4D8B
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	e2 58       	subi	r30, 0x82	; 130
    1014:	f2 4c       	sbci	r31, 0xC2	; 194
    1016:	87 ff       	sbrs	r24, 7
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <__vector_104+0xa0>
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	80 83       	st	Z, r24
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <__vector_104+0xa2>
		else *(((uint8_t*)&data24Bit[sampleCount]) + 3) = 0x00;
    1020:	10 82       	st	Z, r1
	
		*(((uint8_t*)&data24Bit[sampleCount]) + 2) = SPIBuffer[0];
    1022:	e0 91 8a 4d 	lds	r30, 0x4D8A
    1026:	f0 91 8b 4d 	lds	r31, 0x4D8B
    102a:	80 91 7d 4d 	lds	r24, 0x4D7D
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	e3 58       	subi	r30, 0x83	; 131
    1038:	f2 4c       	sbci	r31, 0xC2	; 194
    103a:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 1) = SPIBuffer[1];
    103c:	e0 91 8a 4d 	lds	r30, 0x4D8A
    1040:	f0 91 8b 4d 	lds	r31, 0x4D8B
    1044:	80 91 7e 4d 	lds	r24, 0x4D7E
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e4 58       	subi	r30, 0x84	; 132
    1052:	f2 4c       	sbci	r31, 0xC2	; 194
    1054:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 0) = SPIBuffer[2];
    1056:	e0 91 8a 4d 	lds	r30, 0x4D8A
    105a:	f0 91 8b 4d 	lds	r31, 0x4D8B
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	e5 58       	subi	r30, 0x85	; 133
    1068:	f2 4c       	sbci	r31, 0xC2	; 194
    106a:	80 91 7f 4d 	lds	r24, 0x4D7F
    106e:	80 83       	st	Z, r24

		sampleCount++;
    1070:	80 91 8a 4d 	lds	r24, 0x4D8A
    1074:	90 91 8b 4d 	lds	r25, 0x4D8B
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	80 93 8a 4d 	sts	0x4D8A, r24
    107e:	90 93 8b 4d 	sts	0x4D8B, r25
	}
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0b be       	out	0x3b, r0	; 59
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <ACC_DCPassEnable>:

// Enable DC Pass for acc
// Pull PIO27 high to enable
void ACC_DCPassEnable(uint8_t enable) {
	if (enable) {
    10a8:	88 23       	and	r24, r24
    10aa:	49 f0       	breq	.+18     	; 0x10be <ACC_DCPassEnable+0x16>
		PortEx_DIRSET(BIT5_bm, PS_BANKB);
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	0e 94 cc 04 	call	0x998	; 0x998 <PortEx_DIRSET>
		PortEx_OUTSET(BIT5_bm, PS_BANKB);
    10b4:	80 e2       	ldi	r24, 0x20	; 32
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <PortEx_OUTSET>
    10bc:	08 95       	ret
		//setPortEx(BIT5_bm, PS_BANKB);
	} else {
		PortEx_DIRCLR(BIT5_bm, PS_BANKB);
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	0e 94 77 04 	call	0x8ee	; 0x8ee <PortEx_DIRCLR>
    10c6:	08 95       	ret

000010c8 <CO_collectADC>:
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {
    10c8:	2f 92       	push	r2
    10ca:	3f 92       	push	r3
    10cc:	4f 92       	push	r4
    10ce:	5f 92       	push	r5
    10d0:	6f 92       	push	r6
    10d2:	7f 92       	push	r7
    10d4:	8f 92       	push	r8
    10d6:	9f 92       	push	r9
    10d8:	af 92       	push	r10
    10da:	bf 92       	push	r11
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	61 97       	sbiw	r28, 0x11	; 17
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	f8 2e       	mov	r15, r24
    10f8:	d6 2e       	mov	r13, r22
    10fa:	4a 87       	std	Y+10, r20	; 0x0a
    10fc:	5b 87       	std	Y+11, r21	; 0x0b
    10fe:	2c 87       	std	Y+12, r18	; 0x0c
    1100:	3d 87       	std	Y+13, r19	; 0x0d
    1102:	0e 87       	std	Y+14, r16	; 0x0e
    1104:	1f 87       	std	Y+15, r17	; 0x0f
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
	uint16_t period;
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gainExponent);
    110c:	8f 2d       	mov	r24, r15
    110e:	6e 2d       	mov	r22, r14
    1110:	0e 94 48 04 	call	0x890	; 0x890 <set_ampGain>
	set_filter(filterConfig);
    1114:	8d 2d       	mov	r24, r13
    1116:	0e 94 3d 03 	call	0x67a	; 0x67a <set_filter>

	// if acc channel then enable DC Pass 
	// it is assumed that if not using high frequency acc specific function then 
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
    111a:	8f 2d       	mov	r24, r15
    111c:	85 50       	subi	r24, 0x05	; 5
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	18 f4       	brcc	.+6      	; 0x1128 <CO_collectADC+0x60>
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	0e 94 54 08 	call	0x10a8	; 0x10a8 <ACC_DCPassEnable>

	enableADCMUX(TRUE);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <enableADCMUX>
	setADCInput(channel);
    112e:	8f 2d       	mov	r24, r15
    1130:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <setADCInput>
	SPIInit(SPI_MODE_1_gc);
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    113a:	84 e5       	ldi	r24, 0x54	; 84
    113c:	80 93 c0 08 	sts	0x08C0, r24
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.DIRCLR = PIN0_bm;
    1140:	e0 ea       	ldi	r30, 0xA0	; 160
    1142:	f6 e0       	ldi	r31, 0x06	; 6
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	82 83       	std	Z+2, r24	; 0x02
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.INT0MASK = PIN0_bm;
    114c:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_LO_gc;
    114e:	81 87       	std	Z+9, r24	; 0x09

	// Configure clock for AD7767 MCLK for desired sample frequency
	// f_samples = f_MCLK / 16
	// f_MCLK = f_peripheral(2^25Hz) / (f_period + 1Hz)
	// Set IO14 (PE5) to output
	PORTE.DIRSET = PIN5_bm;
    1150:	80 e2       	ldi	r24, 0x20	; 32
    1152:	e0 e8       	ldi	r30, 0x80	; 128
    1154:	f6 e0       	ldi	r31, 0x06	; 6
    1156:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    1158:	e0 e4       	ldi	r30, 0x40	; 64
    115a:	fa e0       	ldi	r31, 0x0A	; 10
    115c:	83 e2       	ldi	r24, 0x23	; 35
    115e:	81 83       	std	Z+1, r24	; 0x01
	// set period
	period = (1 << (21 - spsExponent)) - 1;
    1160:	25 e1       	ldi	r18, 0x15	; 21
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	2c 19       	sub	r18, r12
    1166:	31 09       	sbc	r19, r1
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <CO_collectADC+0xaa>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	2a 95       	dec	r18
    1174:	e2 f7       	brpl	.-8      	; 0x116e <CO_collectADC+0xa6>
    1176:	01 97       	sbiw	r24, 0x01	; 1
	TCE1.PER = period;
    1178:	86 a3       	lds	r24, 0x56
    117a:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = period / 2;
    117c:	96 95       	lsr	r25
    117e:	87 95       	ror	r24
    1180:	82 af       	sts	0x72, r24
    1182:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1184:	80 91 40 0a 	lds	r24, 0x0A40
    1188:	80 7f       	andi	r24, 0xF0	; 240
    118a:	81 60       	ori	r24, 0x01	; 1
    118c:	80 93 40 0a 	sts	0x0A40, r24
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1190:	80 91 a2 00 	lds	r24, 0x00A2
    1194:	81 60       	ori	r24, 0x01	; 1
    1196:	e0 ea       	ldi	r30, 0xA0	; 160
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	82 83       	std	Z+2, r24	; 0x02
	sei();
    119c:	78 94       	sei

	sampleCount = 0;
    119e:	10 92 8a 4d 	sts	0x4D8A, r1
    11a2:	10 92 8b 4d 	sts	0x4D8B, r1
	discardCount = 0;
    11a6:	10 92 7a 3d 	sts	0x3D7A, r1
	
	// wait for ADC to collect samples
	while(sampleCount < NUM_SAMPLES);
    11aa:	80 91 8a 4d 	lds	r24, 0x4D8A
    11ae:	90 91 8b 4d 	lds	r25, 0x4D8B
    11b2:	24 e0       	ldi	r18, 0x04	; 4
    11b4:	80 30       	cpi	r24, 0x00	; 0
    11b6:	92 07       	cpc	r25, r18
    11b8:	c0 f3       	brcs	.-16     	; 0x11aa <CO_collectADC+0xe2>

	// turn off timer and interupts
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    11ba:	80 91 40 0a 	lds	r24, 0x0A40
    11be:	80 7f       	andi	r24, 0xF0	; 240
    11c0:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~PMIC_LOLVLEN_bm;	
    11c4:	80 91 a2 00 	lds	r24, 0x00A2
    11c8:	8e 7f       	andi	r24, 0xFE	; 254
    11ca:	e0 ea       	ldi	r30, 0xA0	; 160
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	82 83       	std	Z+2, r24	; 0x02
	cli();
    11d0:	f8 94       	cli

	SPIDisable();	
    11d2:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
	enableADCMUX(FALSE);
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <enableADCMUX>
	ADCPower(FALSE);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    11e2:	10 92 8a 4d 	sts	0x4D8A, r1
    11e6:	10 92 8b 4d 	sts	0x4D8B, r1
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
    11ea:	31 e0       	ldi	r19, 0x01	; 1
    11ec:	38 87       	std	Y+8, r19	; 0x08
    11ee:	1d 82       	std	Y+5, r1	; 0x05
    11f0:	50 e8       	ldi	r21, 0x80	; 128
    11f2:	5e 83       	std	Y+6, r21	; 0x06
    11f4:	6f ef       	ldi	r22, 0xFF	; 255
    11f6:	69 87       	std	Y+9, r22	; 0x09
    11f8:	44 24       	eor	r4, r4
    11fa:	4a 94       	dec	r4
    11fc:	33 24       	eor	r3, r3
    11fe:	3a 94       	dec	r3
    1200:	22 24       	eor	r2, r2
    1202:	2a 94       	dec	r2
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	88 8b       	std	Y+16, r24	; 0x10
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    120a:	9f 83       	std	Y+7, r25	; 0x07
    120c:	af ef       	ldi	r26, 0xFF	; 255
    120e:	a9 83       	std	Y+1, r26	; 0x01
    1210:	bf e7       	ldi	r27, 0x7F	; 127
    1212:	ba 83       	std	Y+2, r27	; 0x02
    1214:	1b 82       	std	Y+3, r1	; 0x03
    1216:	1c 82       	std	Y+4, r1	; 0x04
    1218:	66 24       	eor	r6, r6
    121a:	55 24       	eor	r5, r5
    121c:	77 24       	eor	r7, r7
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	00 e0       	ldi	r16, 0x00	; 0
    1226:	cc 24       	eor	r12, r12
    1228:	88 24       	eor	r8, r8
    122a:	ff 24       	eor	r15, r15
    122c:	e0 e0       	ldi	r30, 0x00	; 0
    122e:	ef 2e       	mov	r14, r31
    1230:	a9 8b       	std	Y+17, r26	; 0x11
    1232:	2e 2f       	mov	r18, r30
    1234:	99 24       	eor	r9, r9
    1236:	9a 94       	dec	r9
	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    1238:	18 c1       	rjmp	.+560    	; 0x146a <CO_collectADC+0x3a2>
		sum += data24Bit[sampleCount];
    123a:	e0 91 8a 4d 	lds	r30, 0x4D8A
    123e:	f0 91 8b 4d 	lds	r31, 0x4D8B
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	e5 58       	subi	r30, 0x85	; 133
    124c:	f2 4c       	sbci	r31, 0xC2	; 194
    124e:	40 81       	ld	r20, Z
    1250:	51 81       	ldd	r21, Z+1	; 0x01
    1252:	62 81       	ldd	r22, Z+2	; 0x02
    1254:	73 81       	ldd	r23, Z+3	; 0x03
    1256:	35 2f       	mov	r19, r21
    1258:	fb 01       	movw	r30, r22
    125a:	db 01       	movw	r26, r22
    125c:	ca 01       	movw	r24, r20
    125e:	bb 0f       	add	r27, r27
    1260:	88 0b       	sbc	r24, r24
    1262:	98 2f       	mov	r25, r24
    1264:	dc 01       	movw	r26, r24
    1266:	d8 2e       	mov	r13, r24
    1268:	b8 2e       	mov	r11, r24
    126a:	a8 2e       	mov	r10, r24
    126c:	4e 0d       	add	r20, r14
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	4e 15       	cp	r20, r14
    1272:	08 f0       	brcs	.+2      	; 0x1276 <CO_collectADC+0x1ae>
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	59 89       	ldd	r21, Y+17	; 0x11
    1278:	35 0f       	add	r19, r21
    127a:	51 e0       	ldi	r21, 0x01	; 1
    127c:	69 89       	ldd	r22, Y+17	; 0x11
    127e:	36 17       	cp	r19, r22
    1280:	08 f0       	brcs	.+2      	; 0x1284 <CO_collectADC+0x1bc>
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	69 2f       	mov	r22, r25
    1286:	63 0f       	add	r22, r19
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	63 17       	cp	r22, r19
    128c:	08 f0       	brcs	.+2      	; 0x1290 <CO_collectADC+0x1c8>
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	59 2b       	or	r21, r25
    1292:	e1 0f       	add	r30, r17
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	e1 17       	cp	r30, r17
    1298:	08 f0       	brcs	.+2      	; 0x129c <CO_collectADC+0x1d4>
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	15 2f       	mov	r17, r21
    129e:	1e 0f       	add	r17, r30
    12a0:	31 e0       	ldi	r19, 0x01	; 1
    12a2:	1e 17       	cp	r17, r30
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <CO_collectADC+0x1e0>
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	93 2b       	or	r25, r19
    12aa:	f0 0f       	add	r31, r16
    12ac:	31 e0       	ldi	r19, 0x01	; 1
    12ae:	f0 17       	cp	r31, r16
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <CO_collectADC+0x1ec>
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	09 2f       	mov	r16, r25
    12b6:	0f 0f       	add	r16, r31
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0f 17       	cp	r16, r31
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <CO_collectADC+0x1f8>
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	39 2b       	or	r19, r25
    12c2:	dc 0c       	add	r13, r12
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	dc 14       	cp	r13, r12
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <CO_collectADC+0x204>
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	c3 2e       	mov	r12, r19
    12ce:	cd 0c       	add	r12, r13
    12d0:	31 e0       	ldi	r19, 0x01	; 1
    12d2:	cd 14       	cp	r12, r13
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <CO_collectADC+0x210>
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	93 2b       	or	r25, r19
    12da:	b8 0c       	add	r11, r8
    12dc:	51 e0       	ldi	r21, 0x01	; 1
    12de:	b8 14       	cp	r11, r8
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <CO_collectADC+0x21c>
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	89 2e       	mov	r8, r25
    12e6:	8b 0c       	add	r8, r11
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	8b 14       	cp	r8, r11
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <CO_collectADC+0x228>
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	59 2b       	or	r21, r25
    12f2:	af 0c       	add	r10, r15
    12f4:	31 e0       	ldi	r19, 0x01	; 1
    12f6:	af 14       	cp	r10, r15
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <CO_collectADC+0x234>
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	f5 2e       	mov	r15, r21
    12fe:	fa 0c       	add	r15, r10
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	fa 14       	cp	r15, r10
    1304:	08 f0       	brcs	.+2      	; 0x1308 <CO_collectADC+0x240>
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	39 2b       	or	r19, r25
    130a:	28 0f       	add	r18, r24
    130c:	e4 2e       	mov	r14, r20
    130e:	69 8b       	std	Y+17, r22	; 0x11
    1310:	23 0f       	add	r18, r19
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
    1312:	e0 91 8a 4d 	lds	r30, 0x4D8A
    1316:	f0 91 8b 4d 	lds	r31, 0x4D8B
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	e5 58       	subi	r30, 0x85	; 133
    1324:	f2 4c       	sbci	r31, 0xC2	; 194
    1326:	80 81       	ld	r24, Z
    1328:	91 81       	ldd	r25, Z+1	; 0x01
    132a:	a2 81       	ldd	r26, Z+2	; 0x02
    132c:	b3 81       	ldd	r27, Z+3	; 0x03
    132e:	68 2f       	mov	r22, r24
    1330:	39 2f       	mov	r19, r25
    1332:	ad 01       	movw	r20, r26
    1334:	bb 0f       	add	r27, r27
    1336:	88 0b       	sbc	r24, r24
    1338:	98 2f       	mov	r25, r24
    133a:	dc 01       	movw	r26, r24
    133c:	98 89       	ldd	r25, Y+16	; 0x10
    133e:	98 17       	cp	r25, r24
    1340:	fc f0       	brlt	.+62     	; 0x1380 <CO_collectADC+0x2b8>
    1342:	89 17       	cp	r24, r25
    1344:	b9 f5       	brne	.+110    	; 0x13b4 <CO_collectADC+0x2ec>
    1346:	29 16       	cp	r2, r25
    1348:	d8 f0       	brcs	.+54     	; 0x1380 <CO_collectADC+0x2b8>
    134a:	92 15       	cp	r25, r2
    134c:	99 f5       	brne	.+102    	; 0x13b4 <CO_collectADC+0x2ec>
    134e:	39 16       	cp	r3, r25
    1350:	b8 f0       	brcs	.+46     	; 0x1380 <CO_collectADC+0x2b8>
    1352:	93 15       	cp	r25, r3
    1354:	79 f5       	brne	.+94     	; 0x13b4 <CO_collectADC+0x2ec>
    1356:	49 16       	cp	r4, r25
    1358:	98 f0       	brcs	.+38     	; 0x1380 <CO_collectADC+0x2b8>
    135a:	94 15       	cp	r25, r4
    135c:	59 f5       	brne	.+86     	; 0x13b4 <CO_collectADC+0x2ec>
    135e:	95 16       	cp	r9, r21
    1360:	78 f0       	brcs	.+30     	; 0x1380 <CO_collectADC+0x2b8>
    1362:	59 15       	cp	r21, r9
    1364:	39 f5       	brne	.+78     	; 0x13b4 <CO_collectADC+0x2ec>
    1366:	ae 81       	ldd	r26, Y+6	; 0x06
    1368:	a4 17       	cp	r26, r20
    136a:	50 f0       	brcs	.+20     	; 0x1380 <CO_collectADC+0x2b8>
    136c:	4a 17       	cp	r20, r26
    136e:	11 f5       	brne	.+68     	; 0x13b4 <CO_collectADC+0x2ec>
    1370:	bd 81       	ldd	r27, Y+5	; 0x05
    1372:	b3 17       	cp	r27, r19
    1374:	28 f0       	brcs	.+10     	; 0x1380 <CO_collectADC+0x2b8>
    1376:	3b 17       	cp	r19, r27
    1378:	e9 f4       	brne	.+58     	; 0x13b4 <CO_collectADC+0x2ec>
    137a:	e8 85       	ldd	r30, Y+8	; 0x08
    137c:	e6 17       	cp	r30, r22
    137e:	d0 f4       	brcc	.+52     	; 0x13b4 <CO_collectADC+0x2ec>
    1380:	e0 91 8a 4d 	lds	r30, 0x4D8A
    1384:	f0 91 8b 4d 	lds	r31, 0x4D8B
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	e5 58       	subi	r30, 0x85	; 133
    1392:	f2 4c       	sbci	r31, 0xC2	; 194
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	a2 81       	ldd	r26, Z+2	; 0x02
    139a:	b3 81       	ldd	r27, Z+3	; 0x03
    139c:	88 87       	std	Y+8, r24	; 0x08
    139e:	9d 83       	std	Y+5, r25	; 0x05
    13a0:	ae 83       	std	Y+6, r26	; 0x06
    13a2:	9b 2e       	mov	r9, r27
    13a4:	bb 0f       	add	r27, r27
    13a6:	88 0b       	sbc	r24, r24
    13a8:	98 2f       	mov	r25, r24
    13aa:	dc 01       	movw	r26, r24
    13ac:	48 2e       	mov	r4, r24
    13ae:	38 2e       	mov	r3, r24
    13b0:	28 2e       	mov	r2, r24
    13b2:	88 8b       	std	Y+16, r24	; 0x10
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
    13b4:	e0 91 8a 4d 	lds	r30, 0x4D8A
    13b8:	f0 91 8b 4d 	lds	r31, 0x4D8B
    13bc:	ee 0f       	add	r30, r30
    13be:	ff 1f       	adc	r31, r31
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	e5 58       	subi	r30, 0x85	; 133
    13c6:	f2 4c       	sbci	r31, 0xC2	; 194
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	a2 81       	ldd	r26, Z+2	; 0x02
    13ce:	b3 81       	ldd	r27, Z+3	; 0x03
    13d0:	68 2f       	mov	r22, r24
    13d2:	39 2f       	mov	r19, r25
    13d4:	ad 01       	movw	r20, r26
    13d6:	bb 0f       	add	r27, r27
    13d8:	88 0b       	sbc	r24, r24
    13da:	98 2f       	mov	r25, r24
    13dc:	dc 01       	movw	r26, r24
    13de:	87 15       	cp	r24, r7
    13e0:	0c f1       	brlt	.+66     	; 0x1424 <CO_collectADC+0x35c>
    13e2:	78 16       	cp	r7, r24
    13e4:	c9 f5       	brne	.+114    	; 0x1458 <CO_collectADC+0x390>
    13e6:	75 14       	cp	r7, r5
    13e8:	e8 f0       	brcs	.+58     	; 0x1424 <CO_collectADC+0x35c>
    13ea:	57 14       	cp	r5, r7
    13ec:	a9 f5       	brne	.+106    	; 0x1458 <CO_collectADC+0x390>
    13ee:	56 14       	cp	r5, r6
    13f0:	c8 f0       	brcs	.+50     	; 0x1424 <CO_collectADC+0x35c>
    13f2:	65 14       	cp	r6, r5
    13f4:	89 f5       	brne	.+98     	; 0x1458 <CO_collectADC+0x390>
    13f6:	fc 81       	ldd	r31, Y+4	; 0x04
    13f8:	6f 16       	cp	r6, r31
    13fa:	a0 f0       	brcs	.+40     	; 0x1424 <CO_collectADC+0x35c>
    13fc:	f6 15       	cp	r31, r6
    13fe:	61 f5       	brne	.+88     	; 0x1458 <CO_collectADC+0x390>
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	58 17       	cp	r21, r24
    1404:	78 f0       	brcs	.+30     	; 0x1424 <CO_collectADC+0x35c>
    1406:	85 17       	cp	r24, r21
    1408:	39 f5       	brne	.+78     	; 0x1458 <CO_collectADC+0x390>
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	49 17       	cp	r20, r25
    140e:	50 f0       	brcs	.+20     	; 0x1424 <CO_collectADC+0x35c>
    1410:	94 17       	cp	r25, r20
    1412:	11 f5       	brne	.+68     	; 0x1458 <CO_collectADC+0x390>
    1414:	a9 81       	ldd	r26, Y+1	; 0x01
    1416:	3a 17       	cp	r19, r26
    1418:	28 f0       	brcs	.+10     	; 0x1424 <CO_collectADC+0x35c>
    141a:	a3 17       	cp	r26, r19
    141c:	e9 f4       	brne	.+58     	; 0x1458 <CO_collectADC+0x390>
    141e:	bf 81       	ldd	r27, Y+7	; 0x07
    1420:	6b 17       	cp	r22, r27
    1422:	d0 f4       	brcc	.+52     	; 0x1458 <CO_collectADC+0x390>
    1424:	e0 91 8a 4d 	lds	r30, 0x4D8A
    1428:	f0 91 8b 4d 	lds	r31, 0x4D8B
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	e5 58       	subi	r30, 0x85	; 133
    1436:	f2 4c       	sbci	r31, 0xC2	; 194
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	a2 81       	ldd	r26, Z+2	; 0x02
    143e:	b3 81       	ldd	r27, Z+3	; 0x03
    1440:	8f 83       	std	Y+7, r24	; 0x07
    1442:	99 83       	std	Y+1, r25	; 0x01
    1444:	aa 83       	std	Y+2, r26	; 0x02
    1446:	bb 83       	std	Y+3, r27	; 0x03
    1448:	bb 0f       	add	r27, r27
    144a:	88 0b       	sbc	r24, r24
    144c:	98 2f       	mov	r25, r24
    144e:	dc 01       	movw	r26, r24
    1450:	8c 83       	std	Y+4, r24	; 0x04
    1452:	68 2e       	mov	r6, r24
    1454:	58 2e       	mov	r5, r24
    1456:	78 2e       	mov	r7, r24
	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    1458:	80 91 8a 4d 	lds	r24, 0x4D8A
    145c:	90 91 8b 4d 	lds	r25, 0x4D8B
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	80 93 8a 4d 	sts	0x4D8A, r24
    1466:	90 93 8b 4d 	sts	0x4D8B, r25
    146a:	80 91 8a 4d 	lds	r24, 0x4D8A
    146e:	90 91 8b 4d 	lds	r25, 0x4D8B
    1472:	e4 e0       	ldi	r30, 0x04	; 4
    1474:	80 30       	cpi	r24, 0x00	; 0
    1476:	9e 07       	cpc	r25, r30
    1478:	08 f4       	brcc	.+2      	; 0x147c <CO_collectADC+0x3b4>
    147a:	df ce       	rjmp	.-578    	; 0x123a <CO_collectADC+0x172>
    147c:	a9 89       	ldd	r26, Y+17	; 0x11
    147e:	e2 2f       	mov	r30, r18
    1480:	99 86       	std	Y+9, r9	; 0x09
		sum += data24Bit[sampleCount];
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
	}
	average = sum / NUM_SAMPLES;
    1482:	2e 2d       	mov	r18, r14
    1484:	3a 2f       	mov	r19, r26
    1486:	41 2f       	mov	r20, r17
    1488:	50 2f       	mov	r21, r16
    148a:	6c 2d       	mov	r22, r12
    148c:	78 2d       	mov	r23, r8
    148e:	8f 2d       	mov	r24, r15
    1490:	9e 2f       	mov	r25, r30
    1492:	e7 ff       	sbrs	r30, 7
    1494:	2b c0       	rjmp	.+86     	; 0x14ec <CO_collectADC+0x424>
    1496:	21 50       	subi	r18, 0x01	; 1
    1498:	31 e0       	ldi	r19, 0x01	; 1
    149a:	2e 15       	cp	r18, r14
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <CO_collectADC+0x3d8>
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	8a 2f       	mov	r24, r26
    14a2:	8d 5f       	subi	r24, 0xFD	; 253
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	8a 17       	cp	r24, r26
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <CO_collectADC+0x3e4>
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	38 0f       	add	r19, r24
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	38 17       	cp	r19, r24
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <CO_collectADC+0x3ee>
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	49 2b       	or	r20, r25
    14b8:	41 0f       	add	r20, r17
    14ba:	51 e0       	ldi	r21, 0x01	; 1
    14bc:	41 17       	cp	r20, r17
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <CO_collectADC+0x3fa>
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	50 0f       	add	r21, r16
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	50 17       	cp	r21, r16
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <CO_collectADC+0x404>
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	6c 0d       	add	r22, r12
    14ce:	71 e0       	ldi	r23, 0x01	; 1
    14d0:	6c 15       	cp	r22, r12
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <CO_collectADC+0x40e>
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	78 0d       	add	r23, r8
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	78 15       	cp	r23, r8
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <CO_collectADC+0x418>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	8f 0d       	add	r24, r15
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	8f 15       	cp	r24, r15
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <CO_collectADC+0x422>
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9e 0f       	add	r25, r30
    14ec:	0a e0       	ldi	r16, 0x0A	; 10
    14ee:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__ashrdi3>

	//convert to uV
	*avgV = (int32_t) -(average * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    14f2:	e0 ea       	ldi	r30, 0xA0	; 160
    14f4:	ae 2e       	mov	r10, r30
    14f6:	f5 e2       	ldi	r31, 0x25	; 37
    14f8:	bf 2e       	mov	r11, r31
    14fa:	a6 e2       	ldi	r26, 0x26	; 38
    14fc:	ca 2e       	mov	r12, r26
    14fe:	dd 24       	eor	r13, r13
    1500:	ee 24       	eor	r14, r14
    1502:	ff 24       	eor	r15, r15
    1504:	00 e0       	ldi	r16, 0x00	; 0
    1506:	10 e0       	ldi	r17, 0x00	; 0
    1508:	0e 94 56 14 	call	0x28ac	; 0x28ac <__muldi3>
    150c:	aa 24       	eor	r10, r10
    150e:	aa 94       	dec	r10
    1510:	bb 24       	eor	r11, r11
    1512:	ba 94       	dec	r11
    1514:	bf e7       	ldi	r27, 0x7F	; 127
    1516:	cb 2e       	mov	r12, r27
    1518:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__divdi3>
    151c:	01 e0       	ldi	r16, 0x01	; 1
    151e:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__ashldi3>
    1522:	03 e0       	ldi	r16, 0x03	; 3
    1524:	a0 2e       	mov	r10, r16
    1526:	bb 24       	eor	r11, r11
    1528:	cc 24       	eor	r12, r12
    152a:	00 e0       	ldi	r16, 0x00	; 0
    152c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__divdi3>
    1530:	49 01       	movw	r8, r18
    1532:	5a 01       	movw	r10, r20
    1534:	b0 94       	com	r11
    1536:	a0 94       	com	r10
    1538:	90 94       	com	r9
    153a:	80 94       	com	r8
    153c:	81 1c       	adc	r8, r1
    153e:	91 1c       	adc	r9, r1
    1540:	a1 1c       	adc	r10, r1
    1542:	b1 1c       	adc	r11, r1
    1544:	aa 85       	ldd	r26, Y+10	; 0x0a
    1546:	bb 85       	ldd	r27, Y+11	; 0x0b
    1548:	8d 92       	st	X+, r8
    154a:	9d 92       	st	X+, r9
    154c:	ad 92       	st	X+, r10
    154e:	bc 92       	st	X, r11
    1550:	13 97       	sbiw	r26, 0x03	; 3
	*maxV = (int32_t) -(max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    1552:	28 85       	ldd	r18, Y+8	; 0x08
    1554:	3d 81       	ldd	r19, Y+5	; 0x05
    1556:	4e 81       	ldd	r20, Y+6	; 0x06
    1558:	59 85       	ldd	r21, Y+9	; 0x09
    155a:	64 2d       	mov	r22, r4
    155c:	73 2d       	mov	r23, r3
    155e:	82 2d       	mov	r24, r2
    1560:	98 89       	ldd	r25, Y+16	; 0x10
    1562:	e0 ea       	ldi	r30, 0xA0	; 160
    1564:	ae 2e       	mov	r10, r30
    1566:	f5 e2       	ldi	r31, 0x25	; 37
    1568:	bf 2e       	mov	r11, r31
    156a:	e6 e2       	ldi	r30, 0x26	; 38
    156c:	ce 2e       	mov	r12, r30
    156e:	dd 24       	eor	r13, r13
    1570:	ee 24       	eor	r14, r14
    1572:	ff 24       	eor	r15, r15
    1574:	0e 94 56 14 	call	0x28ac	; 0x28ac <__muldi3>
    1578:	aa 24       	eor	r10, r10
    157a:	aa 94       	dec	r10
    157c:	bb 24       	eor	r11, r11
    157e:	ba 94       	dec	r11
    1580:	ff e7       	ldi	r31, 0x7F	; 127
    1582:	cf 2e       	mov	r12, r31
    1584:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__divdi3>
    1588:	01 e0       	ldi	r16, 0x01	; 1
    158a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__ashldi3>
    158e:	03 e0       	ldi	r16, 0x03	; 3
    1590:	a0 2e       	mov	r10, r16
    1592:	bb 24       	eor	r11, r11
    1594:	cc 24       	eor	r12, r12
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__divdi3>
    159c:	49 01       	movw	r8, r18
    159e:	5a 01       	movw	r10, r20
    15a0:	b0 94       	com	r11
    15a2:	a0 94       	com	r10
    15a4:	90 94       	com	r9
    15a6:	80 94       	com	r8
    15a8:	81 1c       	adc	r8, r1
    15aa:	91 1c       	adc	r9, r1
    15ac:	a1 1c       	adc	r10, r1
    15ae:	b1 1c       	adc	r11, r1
    15b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    15b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    15b4:	80 82       	st	Z, r8
    15b6:	91 82       	std	Z+1, r9	; 0x01
    15b8:	a2 82       	std	Z+2, r10	; 0x02
    15ba:	b3 82       	std	Z+3, r11	; 0x03
	*minV = (int32_t) -(min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    15bc:	2f 81       	ldd	r18, Y+7	; 0x07
    15be:	39 81       	ldd	r19, Y+1	; 0x01
    15c0:	4a 81       	ldd	r20, Y+2	; 0x02
    15c2:	5b 81       	ldd	r21, Y+3	; 0x03
    15c4:	6c 81       	ldd	r22, Y+4	; 0x04
    15c6:	76 2d       	mov	r23, r6
    15c8:	85 2d       	mov	r24, r5
    15ca:	97 2d       	mov	r25, r7
    15cc:	0f 2e       	mov	r0, r31
    15ce:	f0 ea       	ldi	r31, 0xA0	; 160
    15d0:	af 2e       	mov	r10, r31
    15d2:	f0 2d       	mov	r31, r0
    15d4:	0f 2e       	mov	r0, r31
    15d6:	f5 e2       	ldi	r31, 0x25	; 37
    15d8:	bf 2e       	mov	r11, r31
    15da:	f0 2d       	mov	r31, r0
    15dc:	0f 2e       	mov	r0, r31
    15de:	f6 e2       	ldi	r31, 0x26	; 38
    15e0:	cf 2e       	mov	r12, r31
    15e2:	f0 2d       	mov	r31, r0
    15e4:	dd 24       	eor	r13, r13
    15e6:	ee 24       	eor	r14, r14
    15e8:	ff 24       	eor	r15, r15
    15ea:	0e 94 56 14 	call	0x28ac	; 0x28ac <__muldi3>
    15ee:	aa 24       	eor	r10, r10
    15f0:	aa 94       	dec	r10
    15f2:	bb 24       	eor	r11, r11
    15f4:	ba 94       	dec	r11
    15f6:	0f 2e       	mov	r0, r31
    15f8:	ff e7       	ldi	r31, 0x7F	; 127
    15fa:	cf 2e       	mov	r12, r31
    15fc:	f0 2d       	mov	r31, r0
    15fe:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__divdi3>
    1602:	01 e0       	ldi	r16, 0x01	; 1
    1604:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__ashldi3>
    1608:	03 e0       	ldi	r16, 0x03	; 3
    160a:	a0 2e       	mov	r10, r16
    160c:	bb 24       	eor	r11, r11
    160e:	cc 24       	eor	r12, r12
    1610:	00 e0       	ldi	r16, 0x00	; 0
    1612:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__divdi3>
    1616:	49 01       	movw	r8, r18
    1618:	5a 01       	movw	r10, r20
    161a:	b0 94       	com	r11
    161c:	a0 94       	com	r10
    161e:	90 94       	com	r9
    1620:	80 94       	com	r8
    1622:	81 1c       	adc	r8, r1
    1624:	91 1c       	adc	r9, r1
    1626:	a1 1c       	adc	r10, r1
    1628:	b1 1c       	adc	r11, r1
    162a:	ac 85       	ldd	r26, Y+12	; 0x0c
    162c:	bd 85       	ldd	r27, Y+13	; 0x0d
    162e:	8d 92       	st	X+, r8
    1630:	9d 92       	st	X+, r9
    1632:	ad 92       	st	X+, r10
    1634:	bc 92       	st	X, r11
    1636:	13 97       	sbiw	r26, 0x03	; 3

}
    1638:	61 96       	adiw	r28, 0x11	; 17
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	df 90       	pop	r13
    164c:	cf 90       	pop	r12
    164e:	bf 90       	pop	r11
    1650:	af 90       	pop	r10
    1652:	9f 90       	pop	r9
    1654:	8f 90       	pop	r8
    1656:	7f 90       	pop	r7
    1658:	6f 90       	pop	r6
    165a:	5f 90       	pop	r5
    165c:	4f 90       	pop	r4
    165e:	3f 90       	pop	r3
    1660:	2f 90       	pop	r2
    1662:	08 95       	ret

00001664 <CO_collectSeismic3Channel>:
	}
}

void CO_collectSeismic3Channel(uint8_t filterConfig, uint8_t gain[], uint8_t subsamplesPerSecond,
	uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
	uint16_t averagingPtC, uint16_t averagingPtD) {
    1664:	6f 92       	push	r6
    1666:	7f 92       	push	r7
    1668:	8f 92       	push	r8
    166a:	9f 92       	push	r9
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	0f 92       	push	r0
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	18 2f       	mov	r17, r24
    168a:	3b 01       	movw	r6, r22
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	29 83       	std	Y+1, r18	; 0x01
    1690:	4a 83       	std	Y+2, r20	; 0x02
    1692:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	
	// Set gains, filters, and input channel	
	set_ampGain(ADC_CH_6_gc, gain[0]);
    1696:	85 e0       	ldi	r24, 0x05	; 5
    1698:	f3 01       	movw	r30, r6
    169a:	60 81       	ld	r22, Z
    169c:	0e 94 48 04 	call	0x890	; 0x890 <set_ampGain>
	set_ampGain(ADC_CH_7_gc, gain[1]);
    16a0:	86 e0       	ldi	r24, 0x06	; 6
    16a2:	f3 01       	movw	r30, r6
    16a4:	61 81       	ldd	r22, Z+1	; 0x01
    16a6:	0e 94 48 04 	call	0x890	; 0x890 <set_ampGain>
	set_ampGain(ADC_CH_8_gc, gain[2]);
    16aa:	87 e0       	ldi	r24, 0x07	; 7
    16ac:	f3 01       	movw	r30, r6
    16ae:	62 81       	ldd	r22, Z+2	; 0x02
    16b0:	0e 94 48 04 	call	0x890	; 0x890 <set_ampGain>
	set_filter(filterConfig);
    16b4:	81 2f       	mov	r24, r17
    16b6:	0e 94 3d 03 	call	0x67a	; 0x67a <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    16ba:	80 2f       	mov	r24, r16
    16bc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    16c0:	84 e0       	ldi	r24, 0x04	; 4
    16c2:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    16c6:	84 e5       	ldi	r24, 0x54	; 84
    16c8:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 d6 02 	call	0x5ac	; 0x5ac <enableADCMUX>
	setADCInput(ADC_CH_6_gc);
    16d2:	85 e0       	ldi	r24, 0x05	; 5
    16d4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <setADCInput>
	

	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    16d8:	e0 ea       	ldi	r30, 0xA0	; 160
    16da:	f6 e0       	ldi	r31, 0x06	; 6
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	92 83       	std	Z+2, r25	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    16e4:	98 e7       	ldi	r25, 0x78	; 120
    16e6:	90 93 80 01 	sts	0x0180, r25

	// Configure counter for IO13(PF0) events
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    16ea:	e0 e0       	ldi	r30, 0x00	; 0
    16ec:	f8 e0       	ldi	r31, 0x08	; 8
    16ee:	90 ef       	ldi	r25, 0xF0	; 240
    16f0:	91 83       	std	Z+1, r25	; 0x01
	TCC0.CCA = averagingPtA;
    16f2:	e0 a6       	lds	r30, 0xb0
    16f4:	f1 a6       	lds	r31, 0xb1
	TCC0.CCB = averagingPtB;
    16f6:	c2 a6       	lds	r28, 0xb2
    16f8:	d3 a6       	lds	r29, 0xb3
	TCC0.CCC = averagingPtC;
    16fa:	a4 a6       	lds	r26, 0xb4
    16fc:	b5 a6       	lds	r27, 0xb5
	TCC0.CCD = averagingPtD;
    16fe:	86 a6       	lds	r24, 0xb6
    1700:	97 a6       	lds	r25, 0xb7
	TCC0.PER = subsamplesPerChannel - 1;
    1702:	29 81       	ldd	r18, Y+1	; 0x01
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	21 50       	subi	r18, 0x01	; 1
    1708:	30 40       	sbci	r19, 0x00	; 0
    170a:	26 a3       	lds	r18, 0x56
    170c:	37 a3       	lds	r19, 0x57
	TCC0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    170e:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    1714:	80 91 00 08 	lds	r24, 0x0800
    1718:	80 7f       	andi	r24, 0xF0	; 240
    171a:	88 60       	ori	r24, 0x08	; 8
    171c:	80 93 00 08 	sts	0x0800, r24

	FRAMAddress = FR_BASEADD;
    1720:	10 92 78 3d 	sts	0x3D78, r1
    1724:	10 92 79 3d 	sts	0x3D79, r1
	sampleCount = 0;
    1728:	10 92 8a 4d 	sts	0x4D8A, r1
    172c:	10 92 8b 4d 	sts	0x4D8B, r1
	SPICount = 0;
    1730:	10 92 b6 4d 	sts	0x4DB6, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    1734:	10 92 05 21 	sts	0x2105, r1
    1738:	10 92 04 21 	sts	0x2104, r1
    173c:	10 92 03 21 	sts	0x2103, r1

	// Enable interrupts.
	PMIC.CTRL |= (PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);
    1740:	80 91 a2 00 	lds	r24, 0x00A2
    1744:	86 60       	ori	r24, 0x06	; 6
    1746:	e0 ea       	ldi	r30, 0xA0	; 160
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	82 83       	std	Z+2, r24	; 0x02
	sei();
    174c:	78 94       	sei

	SPICS(TRUE);
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    1754:	80 e2       	ldi	r24, 0x20	; 32
    1756:	e0 e8       	ldi	r30, 0x80	; 128
    1758:	f6 e0       	ldi	r31, 0x06	; 6
    175a:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    175c:	e0 e4       	ldi	r30, 0x40	; 64
    175e:	fa e0       	ldi	r31, 0x0A	; 10
    1760:	83 e2       	ldi	r24, 0x23	; 35
    1762:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	4a 81       	ldd	r20, Y+2	; 0x02
    176a:	04 2e       	mov	r0, r20
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <CO_collectSeismic3Channel+0x10e>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <CO_collectSeismic3Channel+0x10a>
    1776:	86 a3       	lds	r24, 0x56
    1778:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    177a:	80 e1       	ldi	r24, 0x10	; 16
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <CO_collectSeismic3Channel+0x120>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	4a 95       	dec	r20
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <CO_collectSeismic3Channel+0x11c>
    1788:	82 af       	sts	0x72, r24
    178a:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    178c:	80 91 40 0a 	lds	r24, 0x0A40
    1790:	80 7f       	andi	r24, 0xF0	; 240
    1792:	81 60       	ori	r24, 0x01	; 1
    1794:	80 93 40 0a 	sts	0x0A40, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    1798:	80 91 8a 4d 	lds	r24, 0x4D8A
    179c:	90 91 8b 4d 	lds	r25, 0x4D8B
    17a0:	f5 e5       	ldi	r31, 0x55	; 85
    17a2:	83 35       	cpi	r24, 0x53	; 83
    17a4:	9f 07       	cpc	r25, r31
    17a6:	c0 f3       	brcs	.-16     	; 0x1798 <CO_collectSeismic3Channel+0x134>

	// turn off timer and interrupts
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    17a8:	80 91 00 08 	lds	r24, 0x0800
    17ac:	80 7f       	andi	r24, 0xF0	; 240
    17ae:	80 93 00 08 	sts	0x0800, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    17b2:	80 91 40 0a 	lds	r24, 0x0A40
    17b6:	80 7f       	andi	r24, 0xF0	; 240
    17b8:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    17bc:	80 91 a2 00 	lds	r24, 0x00A2
    17c0:	89 7f       	andi	r24, 0xF9	; 249
    17c2:	e0 ea       	ldi	r30, 0xA0	; 160
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	82 83       	std	Z+2, r24	; 0x02
	cli();
    17c8:	f8 94       	cli

	SPICS(FALSE);
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	SPIDisable();
    17d0:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
	enableADCMUX(FALSE);
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <enableADCMUX>
	ADCPower(FALSE);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	7f 90       	pop	r7
    17fe:	6f 90       	pop	r6
    1800:	08 95       	ret

00001802 <CO_collectSeismic1Channel>:
}

void CO_collectSeismic1Channel(uint8_t channel, uint8_t filterConfig, uint8_t gain,
	uint8_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable,
	uint16_t averagingPtA, uint16_t averagingPtB, uint16_t averagingPtC,
	uint16_t averagingPtD) {
    1802:	8f 92       	push	r8
    1804:	9f 92       	push	r9
    1806:	af 92       	push	r10
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	0f 92       	push	r0
    181c:	0f 92       	push	r0
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	18 2f       	mov	r17, r24
    1824:	f6 2e       	mov	r15, r22
				
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	2a 83       	std	Y+2, r18	; 0x02
    182a:	49 83       	std	Y+1, r20	; 0x01
    182c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	
	// Set gains, filters, and input channel	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gain);
    1830:	81 2f       	mov	r24, r17
    1832:	49 81       	ldd	r20, Y+1	; 0x01
    1834:	64 2f       	mov	r22, r20
    1836:	0e 94 48 04 	call	0x890	; 0x890 <set_ampGain>
	set_filter(filterConfig);
    183a:	8f 2d       	mov	r24, r15
    183c:	0e 94 3d 03 	call	0x67a	; 0x67a <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    1840:	8e 2d       	mov	r24, r14
    1842:	0e 94 54 08 	call	0x10a8	; 0x10a8 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    1846:	84 e0       	ldi	r24, 0x04	; 4
    1848:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    184c:	84 e5       	ldi	r24, 0x54	; 84
    184e:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 d6 02 	call	0x5ac	; 0x5ac <enableADCMUX>
	setADCInput(channel);
    1858:	81 2f       	mov	r24, r17
    185a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <setADCInput>
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    185e:	e0 ea       	ldi	r30, 0xA0	; 160
    1860:	f6 e0       	ldi	r31, 0x06	; 6
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	92 83       	std	Z+2, r25	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    186a:	98 e7       	ldi	r25, 0x78	; 120
    186c:	90 93 80 01 	sts	0x0180, r25

	// Configure counter for IO13(PF0) events
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    1870:	e0 e0       	ldi	r30, 0x00	; 0
    1872:	f9 e0       	ldi	r31, 0x09	; 9
    1874:	90 ef       	ldi	r25, 0xF0	; 240
    1876:	91 83       	std	Z+1, r25	; 0x01
	TCD0.CCA = averagingPtA;
    1878:	c0 a6       	lds	r28, 0xb0
    187a:	d1 a6       	lds	r29, 0xb1
	TCD0.CCB = averagingPtB;
    187c:	a2 a6       	lds	r26, 0xb2
    187e:	b3 a6       	lds	r27, 0xb3
	TCD0.CCC = averagingPtC;
    1880:	84 a6       	lds	r24, 0xb4
    1882:	95 a6       	lds	r25, 0xb5
	TCD0.CCD = averagingPtD;
    1884:	4a 89       	ldd	r20, Y+18	; 0x12
    1886:	5b 89       	ldd	r21, Y+19	; 0x13
    1888:	46 a7       	lds	r20, 0x76
    188a:	57 a7       	lds	r21, 0x77
	TCD0.PER = subsamplesPerSample - 1;
    188c:	10 e0       	ldi	r17, 0x00	; 0
    188e:	01 50       	subi	r16, 0x01	; 1
    1890:	10 40       	sbci	r17, 0x00	; 0
    1892:	06 a3       	lds	r16, 0x56
    1894:	17 a3       	lds	r17, 0x57
	TCD0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    1896:	86 83       	std	Z+6, r24	; 0x06
	TCD0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	87 83       	std	Z+7, r24	; 0x07
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    189c:	80 91 00 09 	lds	r24, 0x0900
    18a0:	80 7f       	andi	r24, 0xF0	; 240
    18a2:	88 60       	ori	r24, 0x08	; 8
    18a4:	80 93 00 09 	sts	0x0900, r24

	FRAMAddress = FR_BASEADD;
    18a8:	10 92 78 3d 	sts	0x3D78, r1
    18ac:	10 92 79 3d 	sts	0x3D79, r1
	sampleCount = 0;
    18b0:	10 92 8a 4d 	sts	0x4D8A, r1
    18b4:	10 92 8b 4d 	sts	0x4D8B, r1
	SPICount = 0;
    18b8:	10 92 b6 4d 	sts	0x4DB6, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;	
    18bc:	10 92 05 21 	sts	0x2105, r1
    18c0:	10 92 04 21 	sts	0x2104, r1
    18c4:	10 92 03 21 	sts	0x2103, r1
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm;
    18c8:	80 91 a2 00 	lds	r24, 0x00A2
    18cc:	86 60       	ori	r24, 0x06	; 6
    18ce:	e0 ea       	ldi	r30, 0xA0	; 160
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	82 83       	std	Z+2, r24	; 0x02
	sei();
    18d4:	78 94       	sei

	SPICS(TRUE);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    18dc:	80 e2       	ldi	r24, 0x20	; 32
    18de:	e0 e8       	ldi	r30, 0x80	; 128
    18e0:	f6 e0       	ldi	r31, 0x06	; 6
    18e2:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    18e4:	e0 e4       	ldi	r30, 0x40	; 64
    18e6:	fa e0       	ldi	r31, 0x0A	; 10
    18e8:	83 e2       	ldi	r24, 0x23	; 35
    18ea:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	2a 81       	ldd	r18, Y+2	; 0x02
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <CO_collectSeismic1Channel+0xf8>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <CO_collectSeismic1Channel+0xf4>
    18fe:	86 a3       	lds	r24, 0x56
    1900:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    1902:	80 e1       	ldi	r24, 0x10	; 16
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 c0       	rjmp	.+4      	; 0x190c <CO_collectSeismic1Channel+0x10a>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	2a 95       	dec	r18
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <CO_collectSeismic1Channel+0x106>
    1910:	82 af       	sts	0x72, r24
    1912:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1914:	80 91 40 0a 	lds	r24, 0x0A40
    1918:	80 7f       	andi	r24, 0xF0	; 240
    191a:	81 60       	ori	r24, 0x01	; 1
    191c:	80 93 40 0a 	sts	0x0A40, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    1920:	80 91 8a 4d 	lds	r24, 0x4D8A
    1924:	90 91 8b 4d 	lds	r25, 0x4D8B
    1928:	25 e5       	ldi	r18, 0x55	; 85
    192a:	83 35       	cpi	r24, 0x53	; 83
    192c:	92 07       	cpc	r25, r18
    192e:	c0 f3       	brcs	.-16     	; 0x1920 <CO_collectSeismic1Channel+0x11e>

	// turn off timer and interrupts
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1930:	80 91 00 09 	lds	r24, 0x0900
    1934:	80 7f       	andi	r24, 0xF0	; 240
    1936:	80 93 00 09 	sts	0x0900, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    193a:	80 91 40 0a 	lds	r24, 0x0A40
    193e:	80 7f       	andi	r24, 0xF0	; 240
    1940:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    1944:	80 91 a2 00 	lds	r24, 0x00A2
    1948:	89 7f       	andi	r24, 0xF9	; 249
    194a:	e0 ea       	ldi	r30, 0xA0	; 160
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	82 83       	std	Z+2, r24	; 0x02
	cli();
    1950:	f8 94       	cli

	SPICS(FALSE);
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	SPIDisable();
    1958:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
	enableADCMUX(FALSE);
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <enableADCMUX>
	ADCPower(FALSE);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	08 95       	ret

00001986 <sampleCurrentChannel>:
ISR(TCD0_OVF_vect) {
	writeSE2FRAM();
}

void sampleCurrentChannel() {
	PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	e0 ea       	ldi	r30, 0xA0	; 160
    198a:	f6 e0       	ldi	r31, 0x06	; 6
    198c:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    198e:	8a ea       	ldi	r24, 0xAA	; 170
    1990:	e0 ec       	ldi	r30, 0xC0	; 192
    1992:	f8 e0       	ldi	r31, 0x08	; 8
    1994:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1996:	80 91 c2 08 	lds	r24, 0x08C2
    199a:	87 ff       	sbrs	r24, 7
    199c:	fc cf       	rjmp	.-8      	; 0x1996 <sampleCurrentChannel+0x10>
	SPIBuffer[SPICount] = SPIC.DATA;
    199e:	e0 91 b6 4d 	lds	r30, 0x4DB6
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 91 c3 08 	lds	r24, 0x08C3
    19a8:	e3 58       	subi	r30, 0x83	; 131
    19aa:	f2 4b       	sbci	r31, 0xB2	; 178
    19ac:	80 83       	st	Z, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    19ae:	8a ea       	ldi	r24, 0xAA	; 170
    19b0:	e0 ec       	ldi	r30, 0xC0	; 192
    19b2:	f8 e0       	ldi	r31, 0x08	; 8
    19b4:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    19b6:	80 91 c2 08 	lds	r24, 0x08C2
    19ba:	87 ff       	sbrs	r24, 7
    19bc:	fc cf       	rjmp	.-8      	; 0x19b6 <sampleCurrentChannel+0x30>
	SPIBuffer[SPICount+1] = SPIC.DATA;
    19be:	e0 91 b6 4d 	lds	r30, 0x4DB6
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 91 c3 08 	lds	r24, 0x08C3
    19c8:	e2 58       	subi	r30, 0x82	; 130
    19ca:	f2 4b       	sbci	r31, 0xB2	; 178
    19cc:	80 83       	st	Z, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    19ce:	8a ea       	ldi	r24, 0xAA	; 170
    19d0:	e0 ec       	ldi	r30, 0xC0	; 192
    19d2:	f8 e0       	ldi	r31, 0x08	; 8
    19d4:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    19d6:	80 91 c2 08 	lds	r24, 0x08C2
    19da:	87 ff       	sbrs	r24, 7
    19dc:	fc cf       	rjmp	.-8      	; 0x19d6 <sampleCurrentChannel+0x50>
	SPIBuffer[SPICount+2] = SPIC.DATA;
    19de:	e0 91 b6 4d 	lds	r30, 0x4DB6
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 91 c3 08 	lds	r24, 0x08C3
    19e8:	e1 58       	subi	r30, 0x81	; 129
    19ea:	f2 4b       	sbci	r31, 0xB2	; 178
    19ec:	80 83       	st	Z, r24
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	e0 ea       	ldi	r30, 0xA0	; 160
    19f2:	f6 e0       	ldi	r31, 0x06	; 6
    19f4:	85 83       	std	Z+5, r24	; 0x05
	SPICount +=3;
    19f6:	80 91 b6 4d 	lds	r24, 0x4DB6
    19fa:	8d 5f       	subi	r24, 0xFD	; 253
    19fc:	80 93 b6 4d 	sts	0x4DB6, r24
}
    1a00:	08 95       	ret

00001a02 <__vector_82>:

ISR(TCD0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCD_vect) {
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	0b b6       	in	r0, 0x3b	; 59
    1a0c:	0f 92       	push	r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	2f 93       	push	r18
    1a12:	3f 93       	push	r19
    1a14:	4f 93       	push	r20
    1a16:	5f 93       	push	r21
    1a18:	6f 93       	push	r22
    1a1a:	7f 93       	push	r23
    1a1c:	8f 93       	push	r24
    1a1e:	9f 93       	push	r25
    1a20:	af 93       	push	r26
    1a22:	bf 93       	push	r27
    1a24:	ef 93       	push	r30
    1a26:	ff 93       	push	r31
	sampleCurrentChannel();
    1a28:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sampleCurrentChannel>
	SPICount = 0;		
    1a2c:	10 92 b6 4d 	sts	0x4DB6, r1
}
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0b be       	out	0x3b, r0	; 59
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <__vector_81>:

ISR(TCD0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCC_vect) {
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	0b b6       	in	r0, 0x3b	; 59
    1a60:	0f 92       	push	r0
    1a62:	11 24       	eor	r1, r1
    1a64:	2f 93       	push	r18
    1a66:	3f 93       	push	r19
    1a68:	4f 93       	push	r20
    1a6a:	5f 93       	push	r21
    1a6c:	6f 93       	push	r22
    1a6e:	7f 93       	push	r23
    1a70:	8f 93       	push	r24
    1a72:	9f 93       	push	r25
    1a74:	af 93       	push	r26
    1a76:	bf 93       	push	r27
    1a78:	ef 93       	push	r30
    1a7a:	ff 93       	push	r31
	sampleCurrentChannel();
    1a7c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sampleCurrentChannel>
}
    1a80:	ff 91       	pop	r31
    1a82:	ef 91       	pop	r30
    1a84:	bf 91       	pop	r27
    1a86:	af 91       	pop	r26
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	7f 91       	pop	r23
    1a8e:	6f 91       	pop	r22
    1a90:	5f 91       	pop	r21
    1a92:	4f 91       	pop	r20
    1a94:	3f 91       	pop	r19
    1a96:	2f 91       	pop	r18
    1a98:	0f 90       	pop	r0
    1a9a:	0b be       	out	0x3b, r0	; 59
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <__vector_80>:

ISR(TCD0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCB_vect) {
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	0b b6       	in	r0, 0x3b	; 59
    1ab0:	0f 92       	push	r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	2f 93       	push	r18
    1ab6:	3f 93       	push	r19
    1ab8:	4f 93       	push	r20
    1aba:	5f 93       	push	r21
    1abc:	6f 93       	push	r22
    1abe:	7f 93       	push	r23
    1ac0:	8f 93       	push	r24
    1ac2:	9f 93       	push	r25
    1ac4:	af 93       	push	r26
    1ac6:	bf 93       	push	r27
    1ac8:	ef 93       	push	r30
    1aca:	ff 93       	push	r31
	sampleCurrentChannel();
    1acc:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sampleCurrentChannel>
}
    1ad0:	ff 91       	pop	r31
    1ad2:	ef 91       	pop	r30
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0b be       	out	0x3b, r0	; 59
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	0f 90       	pop	r0
    1af2:	1f 90       	pop	r1
    1af4:	18 95       	reti

00001af6 <__vector_79>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCD0_CCA_vect) {
    1af6:	1f 92       	push	r1
    1af8:	0f 92       	push	r0
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	0f 92       	push	r0
    1afe:	0b b6       	in	r0, 0x3b	; 59
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
	sampleCurrentChannel();
    1b1c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sampleCurrentChannel>
}
    1b20:	ff 91       	pop	r31
    1b22:	ef 91       	pop	r30
    1b24:	bf 91       	pop	r27
    1b26:	af 91       	pop	r26
    1b28:	9f 91       	pop	r25
    1b2a:	8f 91       	pop	r24
    1b2c:	7f 91       	pop	r23
    1b2e:	6f 91       	pop	r22
    1b30:	5f 91       	pop	r21
    1b32:	4f 91       	pop	r20
    1b34:	3f 91       	pop	r19
    1b36:	2f 91       	pop	r18
    1b38:	0f 90       	pop	r0
    1b3a:	0b be       	out	0x3b, r0	; 59
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	0f 90       	pop	r0
    1b42:	1f 90       	pop	r1
    1b44:	18 95       	reti

00001b46 <__vector_19>:

ISR(TCC0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCD_vect) {
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	0b b6       	in	r0, 0x3b	; 59
    1b50:	0f 92       	push	r0
    1b52:	11 24       	eor	r1, r1
    1b54:	2f 93       	push	r18
    1b56:	3f 93       	push	r19
    1b58:	4f 93       	push	r20
    1b5a:	5f 93       	push	r21
    1b5c:	6f 93       	push	r22
    1b5e:	7f 93       	push	r23
    1b60:	8f 93       	push	r24
    1b62:	9f 93       	push	r25
    1b64:	af 93       	push	r26
    1b66:	bf 93       	push	r27
    1b68:	ef 93       	push	r30
    1b6a:	ff 93       	push	r31
	sampleCurrentChannel();
    1b6c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sampleCurrentChannel>
	SPICount = 0;
    1b70:	10 92 b6 4d 	sts	0x4DB6, r1
	if(PORTB.OUT & PIN1_bm) {
    1b74:	e0 e2       	ldi	r30, 0x20	; 32
    1b76:	f6 e0       	ldi	r31, 0x06	; 6
    1b78:	80 91 24 06 	lds	r24, 0x0624
    1b7c:	81 ff       	sbrs	r24, 1
    1b7e:	0b c0       	rjmp	.+22     	; 0x1b96 <__vector_19+0x50>
		if (PORTA.OUT & PIN6_bm) PORTB.OUTTGL = PIN1_bm;
    1b80:	80 91 04 06 	lds	r24, 0x0604
    1b84:	86 ff       	sbrs	r24, 6
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <__vector_19+0x46>
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <__vector_19+0x4c>
		else PORTA.OUTTGL = PIN6_bm;
    1b8c:	80 e4       	ldi	r24, 0x40	; 64
    1b8e:	e0 e0       	ldi	r30, 0x00	; 0
    1b90:	f6 e0       	ldi	r31, 0x06	; 6
    1b92:	87 83       	std	Z+7, r24	; 0x07
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <__vector_19+0x5e>
	} else {
		PORTA.OUTCLR = PIN6_bm;
    1b96:	80 e4       	ldi	r24, 0x40	; 64
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b6 e0       	ldi	r27, 0x06	; 6
    1b9c:	16 96       	adiw	r26, 0x06	; 6
    1b9e:	8c 93       	st	X, r24
		PORTB.OUTSET = PIN1_bm;
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	85 83       	std	Z+5, r24	; 0x05
	}
	
}
    1ba4:	ff 91       	pop	r31
    1ba6:	ef 91       	pop	r30
    1ba8:	bf 91       	pop	r27
    1baa:	af 91       	pop	r26
    1bac:	9f 91       	pop	r25
    1bae:	8f 91       	pop	r24
    1bb0:	7f 91       	pop	r23
    1bb2:	6f 91       	pop	r22
    1bb4:	5f 91       	pop	r21
    1bb6:	4f 91       	pop	r20
    1bb8:	3f 91       	pop	r19
    1bba:	2f 91       	pop	r18
    1bbc:	0f 90       	pop	r0
    1bbe:	0b be       	out	0x3b, r0	; 59
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <__vector_18>:

ISR(TCC0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCC_vect) {
    1bca:	1f 92       	push	r1
    1bcc:	0f 92       	push	r0
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	0f 92       	push	r0
    1bd2:	0b b6       	in	r0, 0x3b	; 59
    1bd4:	0f 92       	push	r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	2f 93       	push	r18
    1bda:	3f 93       	push	r19
    1bdc:	4f 93       	push	r20
    1bde:	5f 93       	push	r21
    1be0:	6f 93       	push	r22
    1be2:	7f 93       	push	r23
    1be4:	8f 93       	push	r24
    1be6:	9f 93       	push	r25
    1be8:	af 93       	push	r26
    1bea:	bf 93       	push	r27
    1bec:	ef 93       	push	r30
    1bee:	ff 93       	push	r31
	sampleCurrentChannel();
    1bf0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sampleCurrentChannel>
}
    1bf4:	ff 91       	pop	r31
    1bf6:	ef 91       	pop	r30
    1bf8:	bf 91       	pop	r27
    1bfa:	af 91       	pop	r26
    1bfc:	9f 91       	pop	r25
    1bfe:	8f 91       	pop	r24
    1c00:	7f 91       	pop	r23
    1c02:	6f 91       	pop	r22
    1c04:	5f 91       	pop	r21
    1c06:	4f 91       	pop	r20
    1c08:	3f 91       	pop	r19
    1c0a:	2f 91       	pop	r18
    1c0c:	0f 90       	pop	r0
    1c0e:	0b be       	out	0x3b, r0	; 59
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <__vector_17>:

ISR(TCC0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCB_vect) {
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	0b b6       	in	r0, 0x3b	; 59
    1c24:	0f 92       	push	r0
    1c26:	11 24       	eor	r1, r1
    1c28:	2f 93       	push	r18
    1c2a:	3f 93       	push	r19
    1c2c:	4f 93       	push	r20
    1c2e:	5f 93       	push	r21
    1c30:	6f 93       	push	r22
    1c32:	7f 93       	push	r23
    1c34:	8f 93       	push	r24
    1c36:	9f 93       	push	r25
    1c38:	af 93       	push	r26
    1c3a:	bf 93       	push	r27
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
	sampleCurrentChannel();
    1c40:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sampleCurrentChannel>
}
    1c44:	ff 91       	pop	r31
    1c46:	ef 91       	pop	r30
    1c48:	bf 91       	pop	r27
    1c4a:	af 91       	pop	r26
    1c4c:	9f 91       	pop	r25
    1c4e:	8f 91       	pop	r24
    1c50:	7f 91       	pop	r23
    1c52:	6f 91       	pop	r22
    1c54:	5f 91       	pop	r21
    1c56:	4f 91       	pop	r20
    1c58:	3f 91       	pop	r19
    1c5a:	2f 91       	pop	r18
    1c5c:	0f 90       	pop	r0
    1c5e:	0b be       	out	0x3b, r0	; 59
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	0f 90       	pop	r0
    1c66:	1f 90       	pop	r1
    1c68:	18 95       	reti

00001c6a <__vector_16>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCC0_CCA_vect) {
    1c6a:	1f 92       	push	r1
    1c6c:	0f 92       	push	r0
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	0f 92       	push	r0
    1c72:	0b b6       	in	r0, 0x3b	; 59
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
	sampleCurrentChannel();
    1c90:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sampleCurrentChannel>
}
    1c94:	ff 91       	pop	r31
    1c96:	ef 91       	pop	r30
    1c98:	bf 91       	pop	r27
    1c9a:	af 91       	pop	r26
    1c9c:	9f 91       	pop	r25
    1c9e:	8f 91       	pop	r24
    1ca0:	7f 91       	pop	r23
    1ca2:	6f 91       	pop	r22
    1ca4:	5f 91       	pop	r21
    1ca6:	4f 91       	pop	r20
    1ca8:	3f 91       	pop	r19
    1caa:	2f 91       	pop	r18
    1cac:	0f 90       	pop	r0
    1cae:	0b be       	out	0x3b, r0	; 59
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti

00001cba <writeSE2FRAM>:
	SPIBuffer[SPICount+2] = SPIC.DATA;
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

void writeSE2FRAM() {
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	28 97       	sbiw	r28, 0x08	; 8
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	de bf       	out	0x3e, r29	; 62
	volatile int32_t sum = 0;
    1cce:	1d 82       	std	Y+5, r1	; 0x05
    1cd0:	1e 82       	std	Y+6, r1	; 0x06
    1cd2:	1f 82       	std	Y+7, r1	; 0x07
    1cd4:	18 86       	std	Y+8, r1	; 0x08
	volatile int32_t currentSample;
	sampleCount++;
    1cd6:	80 91 8a 4d 	lds	r24, 0x4D8A
    1cda:	90 91 8b 4d 	lds	r25, 0x4D8B
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	80 93 8a 4d 	sts	0x4D8A, r24
    1ce4:	90 93 8b 4d 	sts	0x4D8B, r25
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    1ce8:	80 ed       	ldi	r24, 0xD0	; 208
    1cea:	80 93 c0 08 	sts	0x08C0, r24
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    1cf2:	1f ef       	ldi	r17, 0xFF	; 255
    1cf4:	f9 01       	movw	r30, r18
    1cf6:	e3 58       	subi	r30, 0x83	; 131
    1cf8:	f2 4b       	sbci	r31, 0xB2	; 178
    1cfa:	80 81       	ld	r24, Z
    1cfc:	87 ff       	sbrs	r24, 7
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <writeSE2FRAM+0x4a>
    1d00:	1c 83       	std	Y+4, r17	; 0x04
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <writeSE2FRAM+0x4c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    1d04:	1c 82       	std	Y+4, r1	; 0x04
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    1d06:	4d e7       	ldi	r20, 0x7D	; 125
    1d08:	e4 2e       	mov	r14, r20
    1d0a:	4d e4       	ldi	r20, 0x4D	; 77
    1d0c:	f4 2e       	mov	r15, r20
    1d0e:	80 81       	ld	r24, Z
    1d10:	8b 83       	std	Y+3, r24	; 0x03
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    1d12:	f9 01       	movw	r30, r18
    1d14:	e2 58       	subi	r30, 0x82	; 130
    1d16:	f2 4b       	sbci	r31, 0xB2	; 178
    1d18:	80 81       	ld	r24, Z
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	e1 58       	subi	r30, 0x81	; 129
    1d20:	f2 4b       	sbci	r31, 0xB2	; 178
    1d22:	80 81       	ld	r24, Z
    1d24:	89 83       	std	Y+1, r24	; 0x01
		sum += currentSample;
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	af 81       	ldd	r26, Y+7	; 0x07
    1d2c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d2e:	49 81       	ldd	r20, Y+1	; 0x01
    1d30:	5a 81       	ldd	r21, Y+2	; 0x02
    1d32:	6b 81       	ldd	r22, Y+3	; 0x03
    1d34:	7c 81       	ldd	r23, Y+4	; 0x04
    1d36:	84 0f       	add	r24, r20
    1d38:	95 1f       	adc	r25, r21
    1d3a:	a6 1f       	adc	r26, r22
    1d3c:	b7 1f       	adc	r27, r23
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	af 83       	std	Y+7, r26	; 0x07
    1d44:	b8 87       	std	Y+8, r27	; 0x08
    1d46:	2d 5f       	subi	r18, 0xFD	; 253
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile int32_t currentSample;
	sampleCount++;
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    1d4a:	2c 30       	cpi	r18, 0x0C	; 12
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	91 f6       	brne	.-92     	; 0x1cf4 <writeSE2FRAM+0x3a>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
	
	sum = sum / 4;
    1d50:	6d 81       	ldd	r22, Y+5	; 0x05
    1d52:	7e 81       	ldd	r23, Y+6	; 0x06
    1d54:	8f 81       	ldd	r24, Y+7	; 0x07
    1d56:	98 85       	ldd	r25, Y+8	; 0x08
    1d58:	24 e0       	ldi	r18, 0x04	; 4
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	0e 94 44 20 	call	0x4088	; 0x4088 <__divmodsi4>
    1d64:	2d 83       	std	Y+5, r18	; 0x05
    1d66:	3e 83       	std	Y+6, r19	; 0x06
    1d68:	4f 83       	std	Y+7, r20	; 0x07
    1d6a:	58 87       	std	Y+8, r21	; 0x08
	SPIBuffer[2] = *(((uint8_t*)&sum)+0);
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	f7 01       	movw	r30, r14
    1d70:	82 83       	std	Z+2, r24	; 0x02
	SPIBuffer[1] = *(((uint8_t*)&sum)+1);
    1d72:	8e 81       	ldd	r24, Y+6	; 0x06
    1d74:	81 83       	std	Z+1, r24	; 0x01
	SPIBuffer[0] = *(((uint8_t*)&sum)+2);	
    1d76:	8f 81       	ldd	r24, Y+7	; 0x07
    1d78:	80 93 7d 4d 	sts	0x4D7D, r24


	
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    1d7c:	80 e1       	ldi	r24, 0x10	; 16
    1d7e:	e0 e4       	ldi	r30, 0x40	; 64
    1d80:	f6 e0       	ldi	r31, 0x06	; 6
    1d82:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    1d84:	88 e0       	ldi	r24, 0x08	; 8
    1d86:	e0 e2       	ldi	r30, 0x20	; 32
    1d88:	f6 e0       	ldi	r31, 0x06	; 6
    1d8a:	86 83       	std	Z+6, r24	; 0x06
	nop();
    1d8c:	00 00       	nop
	SPIC.DATA = FR_WREN;
    1d8e:	86 e0       	ldi	r24, 0x06	; 6
    1d90:	e0 ec       	ldi	r30, 0xC0	; 192
    1d92:	f8 e0       	ldi	r31, 0x08	; 8
    1d94:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1d96:	80 91 c2 08 	lds	r24, 0x08C2
    1d9a:	87 ff       	sbrs	r24, 7
    1d9c:	fc cf       	rjmp	.-8      	; 0x1d96 <writeSE2FRAM+0xdc>
	SPIBuffer[12] = SPIC.DATA;
    1d9e:	80 91 c3 08 	lds	r24, 0x08C3
    1da2:	80 93 89 4d 	sts	0x4D89, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
    1da6:	e0 e2       	ldi	r30, 0x20	; 32
    1da8:	f6 e0       	ldi	r31, 0x06	; 6
    1daa:	88 e0       	ldi	r24, 0x08	; 8
    1dac:	85 83       	std	Z+5, r24	; 0x05
	nop(); // time for CS_FRAM to accept high signal
    1dae:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    1db0:	86 83       	std	Z+6, r24	; 0x06
	nop();
    1db2:	00 00       	nop
	SPIC.DATA = FR_WRITE;
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	e0 ec       	ldi	r30, 0xC0	; 192
    1db8:	f8 e0       	ldi	r31, 0x08	; 8
    1dba:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1dbc:	80 91 c2 08 	lds	r24, 0x08C2
    1dc0:	87 ff       	sbrs	r24, 7
    1dc2:	fc cf       	rjmp	.-8      	; 0x1dbc <writeSE2FRAM+0x102>
	SPIBuffer[12] = SPIC.DATA;
    1dc4:	80 91 c3 08 	lds	r24, 0x08C3
    1dc8:	80 93 89 4d 	sts	0x4D89, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    1dcc:	80 91 79 3d 	lds	r24, 0x3D79
    1dd0:	e0 ec       	ldi	r30, 0xC0	; 192
    1dd2:	f8 e0       	ldi	r31, 0x08	; 8
    1dd4:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1dd6:	80 91 c2 08 	lds	r24, 0x08C2
    1dda:	87 ff       	sbrs	r24, 7
    1ddc:	fc cf       	rjmp	.-8      	; 0x1dd6 <writeSE2FRAM+0x11c>
	SPIBuffer[12] = SPIC.DATA;
    1dde:	80 91 c3 08 	lds	r24, 0x08C3
    1de2:	80 93 89 4d 	sts	0x4D89, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
    1de6:	80 91 78 3d 	lds	r24, 0x3D78
    1dea:	e0 ec       	ldi	r30, 0xC0	; 192
    1dec:	f8 e0       	ldi	r31, 0x08	; 8
    1dee:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1df0:	80 91 c2 08 	lds	r24, 0x08C2
    1df4:	87 ff       	sbrs	r24, 7
    1df6:	fc cf       	rjmp	.-8      	; 0x1df0 <writeSE2FRAM+0x136>
	SPIBuffer[12] = SPIC.DATA;
    1df8:	80 91 c3 08 	lds	r24, 0x08C3
    1dfc:	80 93 89 4d 	sts	0x4D89, r24
	SPIC.DATA = SPIBuffer[0];
    1e00:	80 91 7d 4d 	lds	r24, 0x4D7D
    1e04:	e0 ec       	ldi	r30, 0xC0	; 192
    1e06:	f8 e0       	ldi	r31, 0x08	; 8
    1e08:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e0a:	80 91 c2 08 	lds	r24, 0x08C2
    1e0e:	87 ff       	sbrs	r24, 7
    1e10:	fc cf       	rjmp	.-8      	; 0x1e0a <writeSE2FRAM+0x150>
	SPIBuffer[12] = SPIC.DATA;
    1e12:	80 91 c3 08 	lds	r24, 0x08C3
    1e16:	80 93 89 4d 	sts	0x4D89, r24
	SPIC.DATA = SPIBuffer[1];
    1e1a:	80 91 7e 4d 	lds	r24, 0x4D7E
    1e1e:	e0 ec       	ldi	r30, 0xC0	; 192
    1e20:	f8 e0       	ldi	r31, 0x08	; 8
    1e22:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e24:	80 91 c2 08 	lds	r24, 0x08C2
    1e28:	87 ff       	sbrs	r24, 7
    1e2a:	fc cf       	rjmp	.-8      	; 0x1e24 <writeSE2FRAM+0x16a>
	SPIBuffer[12] = SPIC.DATA;
    1e2c:	80 91 c3 08 	lds	r24, 0x08C3
    1e30:	80 93 89 4d 	sts	0x4D89, r24
	SPIC.DATA = SPIBuffer[2];
    1e34:	80 91 7f 4d 	lds	r24, 0x4D7F
    1e38:	e0 ec       	ldi	r30, 0xC0	; 192
    1e3a:	f8 e0       	ldi	r31, 0x08	; 8
    1e3c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e3e:	80 91 c2 08 	lds	r24, 0x08C2
    1e42:	87 ff       	sbrs	r24, 7
    1e44:	fc cf       	rjmp	.-8      	; 0x1e3e <writeSE2FRAM+0x184>
	SPIBuffer[12] = SPIC.DATA;
    1e46:	80 91 c3 08 	lds	r24, 0x08C3
    1e4a:	80 93 89 4d 	sts	0x4D89, r24
		
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    1e4e:	88 e0       	ldi	r24, 0x08	; 8
    1e50:	e0 e2       	ldi	r30, 0x20	; 32
    1e52:	f6 e0       	ldi	r31, 0x06	; 6
    1e54:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    1e56:	e0 e4       	ldi	r30, 0x40	; 64
    1e58:	f6 e0       	ldi	r31, 0x06	; 6
    1e5a:	80 e1       	ldi	r24, 0x10	; 16
    1e5c:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    1e5e:	94 e5       	ldi	r25, 0x54	; 84
    1e60:	90 93 c0 08 	sts	0x08C0, r25
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    1e64:	86 83       	std	Z+6, r24	; 0x06
	
	FRAMAddress +=3;
    1e66:	80 91 78 3d 	lds	r24, 0x3D78
    1e6a:	90 91 79 3d 	lds	r25, 0x3D79
    1e6e:	03 96       	adiw	r24, 0x03	; 3
    1e70:	80 93 78 3d 	sts	0x3D78, r24
    1e74:	90 93 79 3d 	sts	0x3D79, r25
	checksumADC[0] += SPIBuffer[0];
    1e78:	90 91 03 21 	lds	r25, 0x2103
    1e7c:	80 91 7d 4d 	lds	r24, 0x4D7D
    1e80:	89 0f       	add	r24, r25
    1e82:	80 93 03 21 	sts	0x2103, r24
	checksumADC[1] += SPIBuffer[1];
    1e86:	90 91 04 21 	lds	r25, 0x2104
    1e8a:	80 91 7e 4d 	lds	r24, 0x4D7E
    1e8e:	89 0f       	add	r24, r25
    1e90:	80 93 04 21 	sts	0x2104, r24
	checksumADC[2] += SPIBuffer[2];	
    1e94:	90 91 05 21 	lds	r25, 0x2105
    1e98:	80 91 7f 4d 	lds	r24, 0x4D7F
    1e9c:	89 0f       	add	r24, r25
    1e9e:	80 93 05 21 	sts	0x2105, r24
}
    1ea2:	28 96       	adiw	r28, 0x08	; 8
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	ff 90       	pop	r15
    1eb0:	ef 90       	pop	r14
    1eb2:	08 95       	ret

00001eb4 <__vector_77>:
ISR(TCD0_CCD_vect) {
	sampleCurrentChannel();
	SPICount = 0;		
}

ISR(TCD0_OVF_vect) {
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	0b b6       	in	r0, 0x3b	; 59
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
	writeSE2FRAM();
    1eda:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <writeSE2FRAM>
}
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	7f 91       	pop	r23
    1eec:	6f 91       	pop	r22
    1eee:	5f 91       	pop	r21
    1ef0:	4f 91       	pop	r20
    1ef2:	3f 91       	pop	r19
    1ef4:	2f 91       	pop	r18
    1ef6:	0f 90       	pop	r0
    1ef8:	0b be       	out	0x3b, r0	; 59
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	0f 90       	pop	r0
    1f00:	1f 90       	pop	r1
    1f02:	18 95       	reti

00001f04 <__vector_14>:
		PORTB.OUTSET = PIN1_bm;
	}
	
}

ISR(TCC0_OVF_vect) {
    1f04:	1f 92       	push	r1
    1f06:	0f 92       	push	r0
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	0f 92       	push	r0
    1f0c:	0b b6       	in	r0, 0x3b	; 59
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	2f 93       	push	r18
    1f14:	3f 93       	push	r19
    1f16:	4f 93       	push	r20
    1f18:	5f 93       	push	r21
    1f1a:	6f 93       	push	r22
    1f1c:	7f 93       	push	r23
    1f1e:	8f 93       	push	r24
    1f20:	9f 93       	push	r25
    1f22:	af 93       	push	r26
    1f24:	bf 93       	push	r27
    1f26:	ef 93       	push	r30
    1f28:	ff 93       	push	r31
	writeSE2FRAM();
    1f2a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <writeSE2FRAM>
}
    1f2e:	ff 91       	pop	r31
    1f30:	ef 91       	pop	r30
    1f32:	bf 91       	pop	r27
    1f34:	af 91       	pop	r26
    1f36:	9f 91       	pop	r25
    1f38:	8f 91       	pop	r24
    1f3a:	7f 91       	pop	r23
    1f3c:	6f 91       	pop	r22
    1f3e:	5f 91       	pop	r21
    1f40:	4f 91       	pop	r20
    1f42:	3f 91       	pop	r19
    1f44:	2f 91       	pop	r18
    1f46:	0f 90       	pop	r0
    1f48:	0b be       	out	0x3b, r0	; 59
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	0f 90       	pop	r0
    1f50:	1f 90       	pop	r1
    1f52:	18 95       	reti

00001f54 <readFRAM>:
	checksumADC[2] += SPIBuffer[2];	
}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes) {
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	ec 01       	movw	r28, r24
	SPIInit(SPI_MODE_0_gc);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    1f60:	80 ed       	ldi	r24, 0xD0	; 208
    1f62:	80 93 c0 08 	sts	0x08C0, r24
	SPICS(TRUE);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    1f6c:	88 e0       	ldi	r24, 0x08	; 8
    1f6e:	e0 e2       	ldi	r30, 0x20	; 32
    1f70:	f6 e0       	ldi	r31, 0x06	; 6
    1f72:	86 83       	std	Z+6, r24	; 0x06
	nop();
    1f74:	00 00       	nop
								
	SPIC.DATA = FR_READ;
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	e0 ec       	ldi	r30, 0xC0	; 192
    1f7a:	f8 e0       	ldi	r31, 0x08	; 8
    1f7c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1f7e:	80 91 c2 08 	lds	r24, 0x08C2
    1f82:	87 ff       	sbrs	r24, 7
    1f84:	fc cf       	rjmp	.-8      	; 0x1f7e <readFRAM+0x2a>
	SPIBuffer[12] = SPIC.DATA;
    1f86:	80 91 c3 08 	lds	r24, 0x08C3
    1f8a:	80 93 89 4d 	sts	0x4D89, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 1);;
    1f8e:	80 91 79 3d 	lds	r24, 0x3D79
    1f92:	e0 ec       	ldi	r30, 0xC0	; 192
    1f94:	f8 e0       	ldi	r31, 0x08	; 8
    1f96:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1f98:	80 91 c2 08 	lds	r24, 0x08C2
    1f9c:	87 ff       	sbrs	r24, 7
    1f9e:	fc cf       	rjmp	.-8      	; 0x1f98 <readFRAM+0x44>
	SPIBuffer[12] = SPIC.DATA;
    1fa0:	80 91 c3 08 	lds	r24, 0x08C3
    1fa4:	80 93 89 4d 	sts	0x4D89, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
    1fa8:	80 91 78 3d 	lds	r24, 0x3D78
    1fac:	e0 ec       	ldi	r30, 0xC0	; 192
    1fae:	f8 e0       	ldi	r31, 0x08	; 8
    1fb0:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1fb2:	80 91 c2 08 	lds	r24, 0x08C2
    1fb6:	87 ff       	sbrs	r24, 7
    1fb8:	fc cf       	rjmp	.-8      	; 0x1fb2 <readFRAM+0x5e>
	SPIBuffer[12] = SPIC.DATA;
    1fba:	80 91 c3 08 	lds	r24, 0x08C3
    1fbe:	80 93 89 4d 	sts	0x4D89, r24
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
		SPIC.DATA = 0xAA;
    1fc6:	a0 ec       	ldi	r26, 0xC0	; 192
    1fc8:	b8 e0       	ldi	r27, 0x08	; 8
    1fca:	2a ea       	ldi	r18, 0xAA	; 170
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    1fcc:	0e c0       	rjmp	.+28     	; 0x1fea <readFRAM+0x96>
		SPIC.DATA = 0xAA;
    1fce:	13 96       	adiw	r26, 0x03	; 3
    1fd0:	2c 93       	st	X, r18
    1fd2:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    1fd4:	30 91 c2 08 	lds	r19, 0x08C2
    1fd8:	37 ff       	sbrs	r19, 7
    1fda:	fc cf       	rjmp	.-8      	; 0x1fd4 <readFRAM+0x80>
		FRAMReadBuffer[i] = SPIC.DATA;
    1fdc:	30 91 c3 08 	lds	r19, 0x08C3
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	e9 5f       	subi	r30, 0xF9	; 249
    1fe4:	fe 4d       	sbci	r31, 0xDE	; 222
    1fe6:	30 83       	st	Z, r19
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	8c 17       	cp	r24, r28
    1fec:	9d 07       	cpc	r25, r29
    1fee:	79 f7       	brne	.-34     	; 0x1fce <readFRAM+0x7a>
		SPIC.DATA = 0xAA;
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
	}

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
    1ff0:	88 e0       	ldi	r24, 0x08	; 8
    1ff2:	e0 e2       	ldi	r30, 0x20	; 32
    1ff4:	f6 e0       	ldi	r31, 0x06	; 6
    1ff6:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	SPIDisable();
    1ffe:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>

}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <calcChecksumFRAM>:

	ADCPower(FALSE);

}

void calcChecksumFRAM() {
    2008:	2f 92       	push	r2
    200a:	3f 92       	push	r3
    200c:	4f 92       	push	r4
    200e:	5f 92       	push	r5
    2010:	6f 92       	push	r6
    2012:	7f 92       	push	r7
    2014:	8f 92       	push	r8
    2016:	9f 92       	push	r9
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
    202c:	10 92 a1 4d 	sts	0x4DA1, r1
    2030:	10 92 a2 4d 	sts	0x4DA2, r1
    2034:	10 92 a3 4d 	sts	0x4DA3, r1
    2038:	10 92 a4 4d 	sts	0x4DA4, r1
    203c:	10 92 a5 4d 	sts	0x4DA5, r1
    2040:	10 92 a6 4d 	sts	0x4DA6, r1
    2044:	10 92 a7 4d 	sts	0x4DA7, r1
    2048:	10 92 a8 4d 	sts	0x4DA8, r1
    204c:	e9 e9       	ldi	r30, 0x99	; 153
    204e:	fd e4       	ldi	r31, 0x4D	; 77
    2050:	10 92 99 4d 	sts	0x4D99, r1
    2054:	11 82       	std	Z+1, r1	; 0x01
    2056:	12 82       	std	Z+2, r1	; 0x02
    2058:	13 82       	std	Z+3, r1	; 0x03
    205a:	14 82       	std	Z+4, r1	; 0x04
    205c:	15 82       	std	Z+5, r1	; 0x05
    205e:	16 82       	std	Z+6, r1	; 0x06
    2060:	17 82       	std	Z+7, r1	; 0x07
    2062:	df 01       	movw	r26, r30
    2064:	18 97       	sbiw	r26, 0x08	; 8
    2066:	10 92 91 4d 	sts	0x4D91, r1
    206a:	11 96       	adiw	r26, 0x01	; 1
    206c:	1c 92       	st	X, r1
    206e:	11 97       	sbiw	r26, 0x01	; 1
    2070:	12 96       	adiw	r26, 0x02	; 2
    2072:	1c 92       	st	X, r1
    2074:	12 97       	sbiw	r26, 0x02	; 2
    2076:	13 96       	adiw	r26, 0x03	; 3
    2078:	1c 92       	st	X, r1
    207a:	13 97       	sbiw	r26, 0x03	; 3
    207c:	14 96       	adiw	r26, 0x04	; 4
    207e:	1c 92       	st	X, r1
    2080:	14 97       	sbiw	r26, 0x04	; 4
    2082:	15 96       	adiw	r26, 0x05	; 5
    2084:	1c 92       	st	X, r1
    2086:	15 97       	sbiw	r26, 0x05	; 5
    2088:	16 96       	adiw	r26, 0x06	; 6
    208a:	1c 92       	st	X, r1
    208c:	16 97       	sbiw	r26, 0x06	; 6
    208e:	17 96       	adiw	r26, 0x07	; 7
    2090:	1c 92       	st	X, r1
    2092:	17 97       	sbiw	r26, 0x07	; 7
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
    2094:	10 92 02 21 	sts	0x2102, r1
    2098:	10 92 01 21 	sts	0x2101, r1
    209c:	10 92 00 21 	sts	0x2100, r1
	FRAMAddress = FR_BASEADD;
    20a0:	10 92 78 3d 	sts	0x3D78, r1
    20a4:	10 92 79 3d 	sts	0x3D79, r1
    20a8:	59 e0       	ldi	r21, 0x09	; 9
    20aa:	45 2e       	mov	r4, r21
    20ac:	51 2c       	mov	r5, r1
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    20ae:	63 e0       	ldi	r22, 0x03	; 3
    20b0:	26 2e       	mov	r2, r22
    20b2:	31 2c       	mov	r3, r1
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    20b4:	ee 24       	eor	r14, r14
    20b6:	ea 94       	dec	r14
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
			if(k%9 == 8) sumFRAM[2] += *temp64;
    20b8:	70 e1       	ldi	r23, 0x10	; 16
    20ba:	67 2e       	mov	r6, r23
    20bc:	71 2c       	mov	r7, r1
    20be:	6a 0e       	add	r6, r26
    20c0:	7b 1e       	adc	r7, r27
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
    20c2:	4f 01       	movw	r8, r30
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    20c4:	5d 01       	movw	r10, r26
void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
    20c6:	81 e7       	ldi	r24, 0x71	; 113
    20c8:	9c e1       	ldi	r25, 0x1C	; 28
    20ca:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <readFRAM>
		FRAMAddress += FR_READ_BUFFER_SIZE;
    20ce:	80 91 78 3d 	lds	r24, 0x3D78
    20d2:	90 91 79 3d 	lds	r25, 0x3D79
    20d6:	8f 58       	subi	r24, 0x8F	; 143
    20d8:	93 4e       	sbci	r25, 0xE3	; 227
    20da:	80 93 78 3d 	sts	0x3D78, r24
    20de:	90 93 79 3d 	sts	0x3D79, r25
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    20e2:	cc 24       	eor	r12, r12
    20e4:	dd 24       	eor	r13, r13
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    20e6:	c6 01       	movw	r24, r12
    20e8:	b1 01       	movw	r22, r2
    20ea:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__udivmodhi4>
    20ee:	fc 01       	movw	r30, r24
    20f0:	e0 50       	subi	r30, 0x00	; 0
    20f2:	ff 4d       	sbci	r31, 0xDF	; 223
    20f4:	20 81       	ld	r18, Z
    20f6:	d6 01       	movw	r26, r12
    20f8:	a9 5f       	subi	r26, 0xF9	; 249
    20fa:	be 4d       	sbci	r27, 0xDE	; 222
    20fc:	3c 91       	ld	r19, X
    20fe:	23 0f       	add	r18, r19
    2100:	20 83       	st	Z, r18
    2102:	e0 91 7b 4d 	lds	r30, 0x4D7B
    2106:	f0 91 7c 4d 	lds	r31, 0x4D7C
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	c1 f4       	brne	.+48     	; 0x213e <calcChecksumFRAM+0x136>
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    210e:	8c 91       	ld	r24, X
    2110:	10 82       	st	Z, r1
    2112:	11 82       	std	Z+1, r1	; 0x01
    2114:	12 82       	std	Z+2, r1	; 0x02
    2116:	87 ff       	sbrs	r24, 7
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <calcChecksumFRAM+0x11e>
    211a:	e3 82       	std	Z+3, r14	; 0x03
    211c:	e4 82       	std	Z+4, r14	; 0x04
    211e:	e5 82       	std	Z+5, r14	; 0x05
    2120:	e6 82       	std	Z+6, r14	; 0x06
    2122:	e7 82       	std	Z+7, r14	; 0x07
    2124:	05 c0       	rjmp	.+10     	; 0x2130 <calcChecksumFRAM+0x128>
				else *temp64 = 0x0000000000000000;
    2126:	13 82       	std	Z+3, r1	; 0x03
    2128:	14 82       	std	Z+4, r1	; 0x04
    212a:	15 82       	std	Z+5, r1	; 0x05
    212c:	16 82       	std	Z+6, r1	; 0x06
    212e:	17 82       	std	Z+7, r1	; 0x07
				*(((uint8_t*)temp64) + 2) = FRAMReadBuffer[k];
    2130:	8c 91       	ld	r24, X
    2132:	e0 91 7b 4d 	lds	r30, 0x4D7B
    2136:	f0 91 7c 4d 	lds	r31, 0x4D7C
    213a:	82 83       	std	Z+2, r24	; 0x02
    213c:	08 c0       	rjmp	.+16     	; 0x214e <calcChecksumFRAM+0x146>
			} else if(k%3 == 1) {
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	91 05       	cpc	r25, r1
    2142:	19 f4       	brne	.+6      	; 0x214a <calcChecksumFRAM+0x142>
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
    2144:	8c 91       	ld	r24, X
    2146:	81 83       	std	Z+1, r24	; 0x01
    2148:	02 c0       	rjmp	.+4      	; 0x214e <calcChecksumFRAM+0x146>
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
    214a:	8c 91       	ld	r24, X
    214c:	80 83       	st	Z, r24
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    214e:	c6 01       	movw	r24, r12
    2150:	69 e0       	ldi	r22, 0x09	; 9
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__udivmodhi4>
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	91 05       	cpc	r25, r1
    215c:	09 f0       	breq	.+2      	; 0x2160 <calcChecksumFRAM+0x158>
    215e:	69 c0       	rjmp	.+210    	; 0x2232 <calcChecksumFRAM+0x22a>
    2160:	70 91 91 4d 	lds	r23, 0x4D91
    2164:	60 91 92 4d 	lds	r22, 0x4D92
    2168:	50 91 93 4d 	lds	r21, 0x4D93
    216c:	40 91 94 4d 	lds	r20, 0x4D94
    2170:	30 91 95 4d 	lds	r19, 0x4D95
    2174:	20 91 96 4d 	lds	r18, 0x4D96
    2178:	90 91 97 4d 	lds	r25, 0x4D97
    217c:	f0 90 98 4d 	lds	r15, 0x4D98
    2180:	e0 91 7b 4d 	lds	r30, 0x4D7B
    2184:	f0 91 7c 4d 	lds	r31, 0x4D7C
    2188:	80 81       	ld	r24, Z
    218a:	11 81       	ldd	r17, Z+1	; 0x01
    218c:	d2 81       	ldd	r29, Z+2	; 0x02
    218e:	c3 81       	ldd	r28, Z+3	; 0x03
    2190:	b4 81       	ldd	r27, Z+4	; 0x04
    2192:	a5 81       	ldd	r26, Z+5	; 0x05
    2194:	06 81       	ldd	r16, Z+6	; 0x06
    2196:	e7 81       	ldd	r30, Z+7	; 0x07
    2198:	87 0f       	add	r24, r23
    219a:	f1 e0       	ldi	r31, 0x01	; 1
    219c:	87 17       	cp	r24, r23
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <calcChecksumFRAM+0x19a>
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	16 0f       	add	r17, r22
    21a4:	71 e0       	ldi	r23, 0x01	; 1
    21a6:	16 17       	cp	r17, r22
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <calcChecksumFRAM+0x1a4>
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	f1 0f       	add	r31, r17
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	f1 17       	cp	r31, r17
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <calcChecksumFRAM+0x1ae>
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	76 2b       	or	r23, r22
    21b8:	d5 0f       	add	r29, r21
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	d5 17       	cp	r29, r21
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <calcChecksumFRAM+0x1ba>
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	7d 0f       	add	r23, r29
    21c4:	51 e0       	ldi	r21, 0x01	; 1
    21c6:	7d 17       	cp	r23, r29
    21c8:	08 f0       	brcs	.+2      	; 0x21cc <calcChecksumFRAM+0x1c4>
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	65 2b       	or	r22, r21
    21ce:	c4 0f       	add	r28, r20
    21d0:	51 e0       	ldi	r21, 0x01	; 1
    21d2:	c4 17       	cp	r28, r20
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <calcChecksumFRAM+0x1d0>
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	6c 0f       	add	r22, r28
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	6c 17       	cp	r22, r28
    21de:	08 f0       	brcs	.+2      	; 0x21e2 <calcChecksumFRAM+0x1da>
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	54 2b       	or	r21, r20
    21e4:	b3 0f       	add	r27, r19
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	b3 17       	cp	r27, r19
    21ea:	08 f0       	brcs	.+2      	; 0x21ee <calcChecksumFRAM+0x1e6>
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	5b 0f       	add	r21, r27
    21f0:	31 e0       	ldi	r19, 0x01	; 1
    21f2:	5b 17       	cp	r21, r27
    21f4:	08 f0       	brcs	.+2      	; 0x21f8 <calcChecksumFRAM+0x1f0>
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	43 2b       	or	r20, r19
    21fa:	a2 0f       	add	r26, r18
    21fc:	31 e0       	ldi	r19, 0x01	; 1
    21fe:	a2 17       	cp	r26, r18
    2200:	08 f0       	brcs	.+2      	; 0x2204 <calcChecksumFRAM+0x1fc>
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a 0f       	add	r20, r26
    2206:	21 e0       	ldi	r18, 0x01	; 1
    2208:	4a 17       	cp	r20, r26
    220a:	08 f0       	brcs	.+2      	; 0x220e <calcChecksumFRAM+0x206>
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	32 2b       	or	r19, r18
    2210:	09 0f       	add	r16, r25
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	09 17       	cp	r16, r25
    2216:	08 f0       	brcs	.+2      	; 0x221a <calcChecksumFRAM+0x212>
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 0f       	add	r19, r16
    221c:	91 e0       	ldi	r25, 0x01	; 1
    221e:	30 17       	cp	r19, r16
    2220:	08 f0       	brcs	.+2      	; 0x2224 <calcChecksumFRAM+0x21c>
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	92 2b       	or	r25, r18
    2226:	fe 0e       	add	r15, r30
    2228:	9f 0d       	add	r25, r15
    222a:	80 93 91 4d 	sts	0x4D91, r24
    222e:	d5 01       	movw	r26, r10
    2230:	d9 c0       	rjmp	.+434    	; 0x23e4 <calcChecksumFRAM+0x3dc>
			if(k%9 == 5) sumFRAM[1] += *temp64;
    2232:	85 30       	cpi	r24, 0x05	; 5
    2234:	91 05       	cpc	r25, r1
    2236:	09 f0       	breq	.+2      	; 0x223a <calcChecksumFRAM+0x232>
    2238:	69 c0       	rjmp	.+210    	; 0x230c <calcChecksumFRAM+0x304>
    223a:	70 91 99 4d 	lds	r23, 0x4D99
    223e:	60 91 9a 4d 	lds	r22, 0x4D9A
    2242:	50 91 9b 4d 	lds	r21, 0x4D9B
    2246:	40 91 9c 4d 	lds	r20, 0x4D9C
    224a:	30 91 9d 4d 	lds	r19, 0x4D9D
    224e:	20 91 9e 4d 	lds	r18, 0x4D9E
    2252:	90 91 9f 4d 	lds	r25, 0x4D9F
    2256:	f0 90 a0 4d 	lds	r15, 0x4DA0
    225a:	e0 91 7b 4d 	lds	r30, 0x4D7B
    225e:	f0 91 7c 4d 	lds	r31, 0x4D7C
    2262:	80 81       	ld	r24, Z
    2264:	11 81       	ldd	r17, Z+1	; 0x01
    2266:	d2 81       	ldd	r29, Z+2	; 0x02
    2268:	c3 81       	ldd	r28, Z+3	; 0x03
    226a:	b4 81       	ldd	r27, Z+4	; 0x04
    226c:	a5 81       	ldd	r26, Z+5	; 0x05
    226e:	06 81       	ldd	r16, Z+6	; 0x06
    2270:	e7 81       	ldd	r30, Z+7	; 0x07
    2272:	87 0f       	add	r24, r23
    2274:	f1 e0       	ldi	r31, 0x01	; 1
    2276:	87 17       	cp	r24, r23
    2278:	08 f0       	brcs	.+2      	; 0x227c <calcChecksumFRAM+0x274>
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	16 0f       	add	r17, r22
    227e:	71 e0       	ldi	r23, 0x01	; 1
    2280:	16 17       	cp	r17, r22
    2282:	08 f0       	brcs	.+2      	; 0x2286 <calcChecksumFRAM+0x27e>
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	f1 0f       	add	r31, r17
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	f1 17       	cp	r31, r17
    228c:	08 f0       	brcs	.+2      	; 0x2290 <calcChecksumFRAM+0x288>
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	76 2b       	or	r23, r22
    2292:	d5 0f       	add	r29, r21
    2294:	61 e0       	ldi	r22, 0x01	; 1
    2296:	d5 17       	cp	r29, r21
    2298:	08 f0       	brcs	.+2      	; 0x229c <calcChecksumFRAM+0x294>
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	7d 0f       	add	r23, r29
    229e:	51 e0       	ldi	r21, 0x01	; 1
    22a0:	7d 17       	cp	r23, r29
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <calcChecksumFRAM+0x29e>
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	65 2b       	or	r22, r21
    22a8:	c4 0f       	add	r28, r20
    22aa:	51 e0       	ldi	r21, 0x01	; 1
    22ac:	c4 17       	cp	r28, r20
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <calcChecksumFRAM+0x2aa>
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	6c 0f       	add	r22, r28
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	6c 17       	cp	r22, r28
    22b8:	08 f0       	brcs	.+2      	; 0x22bc <calcChecksumFRAM+0x2b4>
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	54 2b       	or	r21, r20
    22be:	b3 0f       	add	r27, r19
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	b3 17       	cp	r27, r19
    22c4:	08 f0       	brcs	.+2      	; 0x22c8 <calcChecksumFRAM+0x2c0>
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	5b 0f       	add	r21, r27
    22ca:	31 e0       	ldi	r19, 0x01	; 1
    22cc:	5b 17       	cp	r21, r27
    22ce:	08 f0       	brcs	.+2      	; 0x22d2 <calcChecksumFRAM+0x2ca>
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	43 2b       	or	r20, r19
    22d4:	a2 0f       	add	r26, r18
    22d6:	31 e0       	ldi	r19, 0x01	; 1
    22d8:	a2 17       	cp	r26, r18
    22da:	08 f0       	brcs	.+2      	; 0x22de <calcChecksumFRAM+0x2d6>
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a 0f       	add	r20, r26
    22e0:	21 e0       	ldi	r18, 0x01	; 1
    22e2:	4a 17       	cp	r20, r26
    22e4:	08 f0       	brcs	.+2      	; 0x22e8 <calcChecksumFRAM+0x2e0>
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	32 2b       	or	r19, r18
    22ea:	09 0f       	add	r16, r25
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	09 17       	cp	r16, r25
    22f0:	08 f0       	brcs	.+2      	; 0x22f4 <calcChecksumFRAM+0x2ec>
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 0f       	add	r19, r16
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	30 17       	cp	r19, r16
    22fa:	08 f0       	brcs	.+2      	; 0x22fe <calcChecksumFRAM+0x2f6>
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	92 2b       	or	r25, r18
    2300:	fe 0e       	add	r15, r30
    2302:	9f 0d       	add	r25, r15
    2304:	80 93 99 4d 	sts	0x4D99, r24
    2308:	d4 01       	movw	r26, r8
    230a:	6c c0       	rjmp	.+216    	; 0x23e4 <calcChecksumFRAM+0x3dc>
			if(k%9 == 8) sumFRAM[2] += *temp64;
    230c:	88 30       	cpi	r24, 0x08	; 8
    230e:	91 05       	cpc	r25, r1
    2310:	09 f0       	breq	.+2      	; 0x2314 <calcChecksumFRAM+0x30c>
    2312:	7d c0       	rjmp	.+250    	; 0x240e <calcChecksumFRAM+0x406>
    2314:	70 91 a1 4d 	lds	r23, 0x4DA1
    2318:	60 91 a2 4d 	lds	r22, 0x4DA2
    231c:	50 91 a3 4d 	lds	r21, 0x4DA3
    2320:	40 91 a4 4d 	lds	r20, 0x4DA4
    2324:	30 91 a5 4d 	lds	r19, 0x4DA5
    2328:	20 91 a6 4d 	lds	r18, 0x4DA6
    232c:	90 91 a7 4d 	lds	r25, 0x4DA7
    2330:	f0 90 a8 4d 	lds	r15, 0x4DA8
    2334:	e0 91 7b 4d 	lds	r30, 0x4D7B
    2338:	f0 91 7c 4d 	lds	r31, 0x4D7C
    233c:	80 81       	ld	r24, Z
    233e:	11 81       	ldd	r17, Z+1	; 0x01
    2340:	d2 81       	ldd	r29, Z+2	; 0x02
    2342:	c3 81       	ldd	r28, Z+3	; 0x03
    2344:	b4 81       	ldd	r27, Z+4	; 0x04
    2346:	a5 81       	ldd	r26, Z+5	; 0x05
    2348:	06 81       	ldd	r16, Z+6	; 0x06
    234a:	e7 81       	ldd	r30, Z+7	; 0x07
    234c:	87 0f       	add	r24, r23
    234e:	f1 e0       	ldi	r31, 0x01	; 1
    2350:	87 17       	cp	r24, r23
    2352:	08 f0       	brcs	.+2      	; 0x2356 <calcChecksumFRAM+0x34e>
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	16 0f       	add	r17, r22
    2358:	71 e0       	ldi	r23, 0x01	; 1
    235a:	16 17       	cp	r17, r22
    235c:	08 f0       	brcs	.+2      	; 0x2360 <calcChecksumFRAM+0x358>
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	f1 0f       	add	r31, r17
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	f1 17       	cp	r31, r17
    2366:	08 f0       	brcs	.+2      	; 0x236a <calcChecksumFRAM+0x362>
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	76 2b       	or	r23, r22
    236c:	d5 0f       	add	r29, r21
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	d5 17       	cp	r29, r21
    2372:	08 f0       	brcs	.+2      	; 0x2376 <calcChecksumFRAM+0x36e>
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	7d 0f       	add	r23, r29
    2378:	51 e0       	ldi	r21, 0x01	; 1
    237a:	7d 17       	cp	r23, r29
    237c:	08 f0       	brcs	.+2      	; 0x2380 <calcChecksumFRAM+0x378>
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	65 2b       	or	r22, r21
    2382:	c4 0f       	add	r28, r20
    2384:	51 e0       	ldi	r21, 0x01	; 1
    2386:	c4 17       	cp	r28, r20
    2388:	08 f0       	brcs	.+2      	; 0x238c <calcChecksumFRAM+0x384>
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	6c 0f       	add	r22, r28
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	6c 17       	cp	r22, r28
    2392:	08 f0       	brcs	.+2      	; 0x2396 <calcChecksumFRAM+0x38e>
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	54 2b       	or	r21, r20
    2398:	b3 0f       	add	r27, r19
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	b3 17       	cp	r27, r19
    239e:	08 f0       	brcs	.+2      	; 0x23a2 <calcChecksumFRAM+0x39a>
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	5b 0f       	add	r21, r27
    23a4:	31 e0       	ldi	r19, 0x01	; 1
    23a6:	5b 17       	cp	r21, r27
    23a8:	08 f0       	brcs	.+2      	; 0x23ac <calcChecksumFRAM+0x3a4>
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	43 2b       	or	r20, r19
    23ae:	a2 0f       	add	r26, r18
    23b0:	31 e0       	ldi	r19, 0x01	; 1
    23b2:	a2 17       	cp	r26, r18
    23b4:	08 f0       	brcs	.+2      	; 0x23b8 <calcChecksumFRAM+0x3b0>
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a 0f       	add	r20, r26
    23ba:	21 e0       	ldi	r18, 0x01	; 1
    23bc:	4a 17       	cp	r20, r26
    23be:	08 f0       	brcs	.+2      	; 0x23c2 <calcChecksumFRAM+0x3ba>
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	32 2b       	or	r19, r18
    23c4:	09 0f       	add	r16, r25
    23c6:	21 e0       	ldi	r18, 0x01	; 1
    23c8:	09 17       	cp	r16, r25
    23ca:	08 f0       	brcs	.+2      	; 0x23ce <calcChecksumFRAM+0x3c6>
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 0f       	add	r19, r16
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	30 17       	cp	r19, r16
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <calcChecksumFRAM+0x3d0>
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	92 2b       	or	r25, r18
    23da:	fe 0e       	add	r15, r30
    23dc:	9f 0d       	add	r25, r15
    23de:	80 93 a1 4d 	sts	0x4DA1, r24
    23e2:	d3 01       	movw	r26, r6
    23e4:	11 96       	adiw	r26, 0x01	; 1
    23e6:	fc 93       	st	X, r31
    23e8:	11 97       	sbiw	r26, 0x01	; 1
    23ea:	12 96       	adiw	r26, 0x02	; 2
    23ec:	7c 93       	st	X, r23
    23ee:	12 97       	sbiw	r26, 0x02	; 2
    23f0:	13 96       	adiw	r26, 0x03	; 3
    23f2:	6c 93       	st	X, r22
    23f4:	13 97       	sbiw	r26, 0x03	; 3
    23f6:	14 96       	adiw	r26, 0x04	; 4
    23f8:	5c 93       	st	X, r21
    23fa:	14 97       	sbiw	r26, 0x04	; 4
    23fc:	15 96       	adiw	r26, 0x05	; 5
    23fe:	4c 93       	st	X, r20
    2400:	15 97       	sbiw	r26, 0x05	; 5
    2402:	16 96       	adiw	r26, 0x06	; 6
    2404:	3c 93       	st	X, r19
    2406:	16 97       	sbiw	r26, 0x06	; 6
    2408:	17 96       	adiw	r26, 0x07	; 7
    240a:	9c 93       	st	X, r25
    240c:	17 97       	sbiw	r26, 0x07	; 7
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    240e:	08 94       	sec
    2410:	c1 1c       	adc	r12, r1
    2412:	d1 1c       	adc	r13, r1
    2414:	b1 e7       	ldi	r27, 0x71	; 113
    2416:	cb 16       	cp	r12, r27
    2418:	bc e1       	ldi	r27, 0x1C	; 28
    241a:	db 06       	cpc	r13, r27
    241c:	09 f0       	breq	.+2      	; 0x2420 <calcChecksumFRAM+0x418>
    241e:	63 ce       	rjmp	.-826    	; 0x20e6 <calcChecksumFRAM+0xde>
    2420:	08 94       	sec
    2422:	41 08       	sbc	r4, r1
    2424:	51 08       	sbc	r5, r1

void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
    2426:	41 14       	cp	r4, r1
    2428:	51 04       	cpc	r5, r1
    242a:	09 f0       	breq	.+2      	; 0x242e <calcChecksumFRAM+0x426>
    242c:	4c ce       	rjmp	.-872    	; 0x20c6 <calcChecksumFRAM+0xbe>
			
		}	
		
	}
	
}
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	df 90       	pop	r13
    243c:	cf 90       	pop	r12
    243e:	bf 90       	pop	r11
    2440:	af 90       	pop	r10
    2442:	9f 90       	pop	r9
    2444:	8f 90       	pop	r8
    2446:	7f 90       	pop	r7
    2448:	6f 90       	pop	r6
    244a:	5f 90       	pop	r5
    244c:	4f 90       	pop	r4
    244e:	3f 90       	pop	r3
    2450:	2f 90       	pop	r2
    2452:	08 95       	ret

00002454 <FRAMTest1Channel>:

	ADCPower(FALSE);
	
}

void FRAMTest1Channel(void) {
    2454:	8f 92       	push	r8
    2456:	9f 92       	push	r9
    2458:	af 92       	push	r10
    245a:	bf 92       	push	r11
    245c:	cf 92       	push	r12
    245e:	df 92       	push	r13
    2460:	ef 92       	push	r14
    2462:	0f 93       	push	r16

	CO_collectSeismic1Channel(ADC_CH_8_gc, FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
    2464:	0f 92       	push	r0
    2466:	0f 92       	push	r0
    2468:	80 e1       	ldi	r24, 0x10	; 16
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	ed b7       	in	r30, 0x3d	; 61
    246e:	fe b7       	in	r31, 0x3e	; 62
    2470:	81 83       	std	Z+1, r24	; 0x01
    2472:	92 83       	std	Z+2, r25	; 0x02
    2474:	87 e0       	ldi	r24, 0x07	; 7
    2476:	68 ec       	ldi	r22, 0xC8	; 200
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	05 e1       	ldi	r16, 0x15	; 21
    247e:	ee 24       	eor	r14, r14
    2480:	e3 94       	inc	r14
    2482:	ad e0       	ldi	r26, 0x0D	; 13
    2484:	ca 2e       	mov	r12, r26
    2486:	d1 2c       	mov	r13, r1
    2488:	be e0       	ldi	r27, 0x0E	; 14
    248a:	ab 2e       	mov	r10, r27
    248c:	b1 2c       	mov	r11, r1
    248e:	3f e0       	ldi	r19, 0x0F	; 15
    2490:	83 2e       	mov	r8, r19
    2492:	91 2c       	mov	r9, r1
    2494:	0e 94 01 0c 	call	0x1802	; 0x1802 <CO_collectSeismic1Channel>
	GAIN_1_gc, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24a2:	8f ec       	ldi	r24, 0xCF	; 207
    24a4:	97 e0       	ldi	r25, 0x07	; 7
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <FRAMTest1Channel+0x52>
    24aa:	00 c0       	rjmp	.+0      	; 0x24ac <FRAMTest1Channel+0x58>
    24ac:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    24ae:	0e 94 04 10 	call	0x2008	; 0x2008 <calcChecksumFRAM>

	ADCPower(FALSE);
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>

}
    24b8:	0f 91       	pop	r16
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	cf 90       	pop	r12
    24c0:	bf 90       	pop	r11
    24c2:	af 90       	pop	r10
    24c4:	9f 90       	pop	r9
    24c6:	8f 90       	pop	r8
    24c8:	08 95       	ret

000024ca <FRAMTest3Channel>:
	SPICS(FALSE);
	SPIDisable();

}

void FRAMTest3Channel(void) {
    24ca:	8f 92       	push	r8
    24cc:	9f 92       	push	r9
    24ce:	af 92       	push	r10
    24d0:	bf 92       	push	r11
    24d2:	cf 92       	push	r12
    24d4:	df 92       	push	r13
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <FRAMTest3Channel+0x18>
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t gains[3] = { GAIN_1_gc, GAIN_1_gc, GAIN_1_gc };
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	1a 82       	std	Y+2, r1	; 0x02
    24ea:	1b 82       	std	Y+3, r1	; 0x03
			
	CO_collectSeismic3Channel(FILTER_CH_2AND6_bm | FILTER_CH_3AND7_bm |
    24ec:	8e ec       	ldi	r24, 0xCE	; 206
    24ee:	be 01       	movw	r22, r28
    24f0:	6f 5f       	subi	r22, 0xFF	; 255
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	25 e1       	ldi	r18, 0x15	; 21
    24f8:	01 e0       	ldi	r16, 0x01	; 1
    24fa:	5d e0       	ldi	r21, 0x0D	; 13
    24fc:	e5 2e       	mov	r14, r21
    24fe:	f1 2c       	mov	r15, r1
    2500:	ee e0       	ldi	r30, 0x0E	; 14
    2502:	ce 2e       	mov	r12, r30
    2504:	d1 2c       	mov	r13, r1
    2506:	ff e0       	ldi	r31, 0x0F	; 15
    2508:	af 2e       	mov	r10, r31
    250a:	b1 2c       	mov	r11, r1
    250c:	a0 e1       	ldi	r26, 0x10	; 16
    250e:	8a 2e       	mov	r8, r26
    2510:	91 2c       	mov	r9, r1
    2512:	0e 94 32 0b 	call	0x1664	; 0x1664 <CO_collectSeismic3Channel>
		FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
		gains, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
    251c:	8f ec       	ldi	r24, 0xCF	; 207
    251e:	97 e0       	ldi	r25, 0x07	; 7
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <FRAMTest3Channel+0x56>
    2524:	00 c0       	rjmp	.+0      	; 0x2526 <FRAMTest3Channel+0x5c>
    2526:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    2528:	0e 94 04 10 	call	0x2008	; 0x2008 <calcChecksumFRAM>

	ADCPower(FALSE);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	
}
    2532:	23 96       	adiw	r28, 0x03	; 3
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	cf 90       	pop	r12
    2546:	bf 90       	pop	r11
    2548:	af 90       	pop	r10
    254a:	9f 90       	pop	r9
    254c:	8f 90       	pop	r8
    254e:	08 95       	ret

00002550 <FRAMWriteKnowns>:

	ADCPower(FALSE);

}

void FRAMWriteKnowns() {
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
	FRAMAddress = FR_BASEADD;
    2558:	10 92 78 3d 	sts	0x3D78, r1
    255c:	10 92 79 3d 	sts	0x3D79, r1
	sampleCount = 0;
    2560:	10 92 8a 4d 	sts	0x4D8A, r1
    2564:	10 92 8b 4d 	sts	0x4D8B, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    2568:	10 92 05 21 	sts	0x2105, r1
    256c:	10 92 04 21 	sts	0x2104, r1
    2570:	10 92 03 21 	sts	0x2103, r1
	
	ADCPower(TRUE);
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
	SPIInit(SPI_MODE_1_gc);
    257a:	84 e0       	ldi	r24, 0x04	; 4
    257c:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2580:	80 ed       	ldi	r24, 0xD0	; 208
    2582:	80 93 c0 08 	sts	0x08C0, r24
	SPIBuffer[0] = 0x0D;
    2586:	8d e0       	ldi	r24, 0x0D	; 13
    2588:	80 93 7d 4d 	sts	0x4D7D, r24
	SPIBuffer[1] = 0xF3;
    258c:	83 ef       	ldi	r24, 0xF3	; 243
    258e:	80 93 7e 4d 	sts	0x4D7E, r24
	SPIBuffer[2] = 0x57;
    2592:	87 e5       	ldi	r24, 0x57	; 87
    2594:	80 93 7f 4d 	sts	0x4D7F, r24
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2598:	00 e4       	ldi	r16, 0x40	; 64
    259a:	16 e0       	ldi	r17, 0x06	; 6
    259c:	30 e1       	ldi	r19, 0x10	; 16
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    259e:	a0 e2       	ldi	r26, 0x20	; 32
    25a0:	b6 e0       	ldi	r27, 0x06	; 6
    25a2:	28 e0       	ldi	r18, 0x08	; 8
		nop();
		SPIC.DATA = FR_WREN;
    25a4:	60 ec       	ldi	r22, 0xC0	; 192
    25a6:	78 e0       	ldi	r23, 0x08	; 8
    25a8:	56 e0       	ldi	r21, 0x06	; 6
		while(!(SPIC.STATUS & SPI_IF_bm));
    25aa:	e0 ec       	ldi	r30, 0xC0	; 192
    25ac:	f8 e0       	ldi	r31, 0x08	; 8
		SPIBuffer[12] = SPIC.DATA;
		PORTB.OUTSET = PIN3_bm;  // latch opcode
		nop(); // time for CS_FRAM to accept high signal
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
		nop();
		SPIC.DATA = FR_WRITE;
    25ae:	42 e0       	ldi	r20, 0x02	; 2
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    25b0:	84 c0       	rjmp	.+264    	; 0x26ba <FRAMWriteKnowns+0x16a>
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    25b2:	e8 01       	movw	r28, r16
    25b4:	3e 83       	std	Y+6, r19	; 0x06
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    25b6:	16 96       	adiw	r26, 0x06	; 6
    25b8:	2c 93       	st	X, r18
    25ba:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    25bc:	00 00       	nop
		SPIC.DATA = FR_WREN;
    25be:	eb 01       	movw	r28, r22
    25c0:	5b 83       	std	Y+3, r21	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    25c2:	80 91 c2 08 	lds	r24, 0x08C2
    25c6:	87 ff       	sbrs	r24, 7
    25c8:	fc cf       	rjmp	.-8      	; 0x25c2 <FRAMWriteKnowns+0x72>
		SPIBuffer[12] = SPIC.DATA;
    25ca:	80 91 c3 08 	lds	r24, 0x08C3
    25ce:	80 93 89 4d 	sts	0x4D89, r24
		PORTB.OUTSET = PIN3_bm;  // latch opcode
    25d2:	15 96       	adiw	r26, 0x05	; 5
    25d4:	2c 93       	st	X, r18
    25d6:	15 97       	sbiw	r26, 0x05	; 5
		nop(); // time for CS_FRAM to accept high signal
    25d8:	00 00       	nop
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    25da:	16 96       	adiw	r26, 0x06	; 6
    25dc:	2c 93       	st	X, r18
    25de:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    25e0:	00 00       	nop
		SPIC.DATA = FR_WRITE;
    25e2:	43 83       	std	Z+3, r20	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    25e4:	80 91 c2 08 	lds	r24, 0x08C2
    25e8:	87 ff       	sbrs	r24, 7
    25ea:	fc cf       	rjmp	.-8      	; 0x25e4 <FRAMWriteKnowns+0x94>
		SPIBuffer[12] = SPIC.DATA;
    25ec:	80 91 c3 08 	lds	r24, 0x08C3
    25f0:	80 93 89 4d 	sts	0x4D89, r24
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    25f4:	80 91 79 3d 	lds	r24, 0x3D79
    25f8:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    25fa:	80 91 c2 08 	lds	r24, 0x08C2
    25fe:	87 ff       	sbrs	r24, 7
    2600:	fc cf       	rjmp	.-8      	; 0x25fa <FRAMWriteKnowns+0xaa>
		SPIBuffer[12] = SPIC.DATA;
    2602:	80 91 c3 08 	lds	r24, 0x08C3
    2606:	80 93 89 4d 	sts	0x4D89, r24
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
    260a:	80 91 78 3d 	lds	r24, 0x3D78
    260e:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2610:	80 91 c2 08 	lds	r24, 0x08C2
    2614:	87 ff       	sbrs	r24, 7
    2616:	fc cf       	rjmp	.-8      	; 0x2610 <FRAMWriteKnowns+0xc0>
		SPIBuffer[12] = SPIC.DATA;
    2618:	80 91 c3 08 	lds	r24, 0x08C3
    261c:	80 93 89 4d 	sts	0x4D89, r24
		SPIC.DATA = SPIBuffer[0];
    2620:	80 91 7d 4d 	lds	r24, 0x4D7D
    2624:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2626:	80 91 c2 08 	lds	r24, 0x08C2
    262a:	87 ff       	sbrs	r24, 7
    262c:	fc cf       	rjmp	.-8      	; 0x2626 <FRAMWriteKnowns+0xd6>
		SPIBuffer[12] = SPIC.DATA;
    262e:	80 91 c3 08 	lds	r24, 0x08C3
    2632:	80 93 89 4d 	sts	0x4D89, r24
		SPIC.DATA = SPIBuffer[1];
    2636:	80 91 7e 4d 	lds	r24, 0x4D7E
    263a:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    263c:	80 91 c2 08 	lds	r24, 0x08C2
    2640:	87 ff       	sbrs	r24, 7
    2642:	fc cf       	rjmp	.-8      	; 0x263c <FRAMWriteKnowns+0xec>
		SPIBuffer[12] = SPIC.DATA;
    2644:	80 91 c3 08 	lds	r24, 0x08C3
    2648:	80 93 89 4d 	sts	0x4D89, r24
		SPIC.DATA = SPIBuffer[2];
    264c:	80 91 7f 4d 	lds	r24, 0x4D7F
    2650:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2652:	80 91 c2 08 	lds	r24, 0x08C2
    2656:	87 ff       	sbrs	r24, 7
    2658:	fc cf       	rjmp	.-8      	; 0x2652 <FRAMWriteKnowns+0x102>
		SPIBuffer[12] = SPIC.DATA;
    265a:	80 91 c3 08 	lds	r24, 0x08C3
    265e:	80 93 89 4d 	sts	0x4D89, r24
			
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    2662:	15 96       	adiw	r26, 0x05	; 5
    2664:	2c 93       	st	X, r18
    2666:	15 97       	sbiw	r26, 0x05	; 5
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    2668:	e8 01       	movw	r28, r16
    266a:	3d 83       	std	Y+5, r19	; 0x05
		
		FRAMAddress +=3;
    266c:	80 91 78 3d 	lds	r24, 0x3D78
    2670:	90 91 79 3d 	lds	r25, 0x3D79
    2674:	03 96       	adiw	r24, 0x03	; 3
    2676:	80 93 78 3d 	sts	0x3D78, r24
    267a:	90 93 79 3d 	sts	0x3D79, r25
		checksumADC[0] += SPIBuffer[0];
    267e:	90 91 03 21 	lds	r25, 0x2103
    2682:	80 91 7d 4d 	lds	r24, 0x4D7D
    2686:	89 0f       	add	r24, r25
    2688:	80 93 03 21 	sts	0x2103, r24
		checksumADC[1] += SPIBuffer[1];
    268c:	90 91 04 21 	lds	r25, 0x2104
    2690:	80 91 7e 4d 	lds	r24, 0x4D7E
    2694:	89 0f       	add	r24, r25
    2696:	80 93 04 21 	sts	0x2104, r24
		checksumADC[2] += SPIBuffer[2];
    269a:	90 91 05 21 	lds	r25, 0x2105
    269e:	80 91 7f 4d 	lds	r24, 0x4D7F
    26a2:	89 0f       	add	r24, r25
    26a4:	80 93 05 21 	sts	0x2105, r24
		
		sampleCount++;
    26a8:	80 91 8a 4d 	lds	r24, 0x4D8A
    26ac:	90 91 8b 4d 	lds	r25, 0x4D8B
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	80 93 8a 4d 	sts	0x4D8A, r24
    26b6:	90 93 8b 4d 	sts	0x4D8B, r25
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    26ba:	80 91 8a 4d 	lds	r24, 0x4D8A
    26be:	90 91 8b 4d 	lds	r25, 0x4D8B
    26c2:	d5 e5       	ldi	r29, 0x55	; 85
    26c4:	83 35       	cpi	r24, 0x53	; 83
    26c6:	9d 07       	cpc	r25, r29
    26c8:	08 f4       	brcc	.+2      	; 0x26cc <FRAMWriteKnowns+0x17c>
    26ca:	73 cf       	rjmp	.-282    	; 0x25b2 <FRAMWriteKnowns+0x62>
		checksumADC[2] += SPIBuffer[2];
		
		sampleCount++;
	}
	
	SPIDisable();
    26cc:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
	ADCPower(FALSE);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
}
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	08 95       	ret

000026e0 <FRAMWriteKnownsCheck>:
	
}


void FRAMWriteKnownsCheck() {
	FRAMWriteKnowns();
    26e0:	0e 94 a8 12 	call	0x2550	; 0x2550 <FRAMWriteKnowns>
	ADCPower(TRUE);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>
    26ea:	8f ec       	ldi	r24, 0xCF	; 207
    26ec:	97 e0       	ldi	r25, 0x07	; 7
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <FRAMWriteKnownsCheck+0xe>
    26f2:	00 c0       	rjmp	.+0      	; 0x26f4 <FRAMWriteKnownsCheck+0x14>
    26f4:	00 00       	nop

	_delay_us(250);
	calcChecksumFRAM();
    26f6:	0e 94 04 10 	call	0x2008	; 0x2008 <calcChecksumFRAM>

	ADCPower(FALSE);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ADCPower>

}
    2700:	08 95       	ret

00002702 <SDHC_CS>:
void SDHC_write_block(uint8_t *buffer, uint16_t address, uint16_t numBlocks);
void SDHC_read_register(uint8_t *buffer, uint8_t cmd);

void SDHC_CS(uint8_t enable) {
		
}
    2702:	08 95       	ret

00002704 <SPI_write>:
#define SD_COMMAND_1 {0x41,0x00,0x00,0x00,0x00,0x00};
#define SD_COMMAND_WRITE_BYTES {0x58,
	*/

uint8_t SPI_write(uint8_t byteToSend){
	SPIC.DATA = byteToSend;
    2704:	e0 ec       	ldi	r30, 0xC0	; 192
    2706:	f8 e0       	ldi	r31, 0x08	; 8
    2708:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    270a:	80 91 c2 08 	lds	r24, 0x08C2
    270e:	87 ff       	sbrs	r24, 7
    2710:	fc cf       	rjmp	.-8      	; 0x270a <SPI_write+0x6>
	return SPIC.DATA; //read SPI data register to reset status flag
    2712:	80 91 c3 08 	lds	r24, 0x08C3
}
    2716:	08 95       	ret

00002718 <SD_command>:
void SD_command(uint8_t cmd, uint32_t arg, uint8_t crc, int read) {
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	25 97       	sbiw	r28, 0x05	; 5
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	de bf       	out	0x3e, r29	; 62
	
	SPI_write(0x40 | cmd);
    272e:	80 64       	ori	r24, 0x40	; 64
    2730:	2d 83       	std	Y+5, r18	; 0x05
    2732:	4c 83       	std	Y+4, r20	; 0x04
    2734:	5b 83       	std	Y+3, r21	; 0x03
    2736:	6a 83       	std	Y+2, r22	; 0x02
    2738:	79 83       	std	Y+1, r23	; 0x01
    273a:	0e 94 82 13 	call	0x2704	; 0x2704 <SPI_write>
	SPI_write(arg>>24 & 0xFF);
    273e:	79 81       	ldd	r23, Y+1	; 0x01
    2740:	87 2f       	mov	r24, r23
    2742:	0e 94 82 13 	call	0x2704	; 0x2704 <SPI_write>
	SPI_write(arg>>16 & 0xFF);
    2746:	6a 81       	ldd	r22, Y+2	; 0x02
    2748:	86 2f       	mov	r24, r22
    274a:	0e 94 82 13 	call	0x2704	; 0x2704 <SPI_write>
	SPI_write(arg>>8 & 0xFF);
    274e:	5b 81       	ldd	r21, Y+3	; 0x03
    2750:	85 2f       	mov	r24, r21
    2752:	0e 94 82 13 	call	0x2704	; 0x2704 <SPI_write>
	SPI_write(arg & 0xFF);
    2756:	4c 81       	ldd	r20, Y+4	; 0x04
    2758:	84 2f       	mov	r24, r20
    275a:	0e 94 82 13 	call	0x2704	; 0x2704 <SPI_write>
	SPI_write(crc);
    275e:	2d 81       	ldd	r18, Y+5	; 0x05
    2760:	82 2f       	mov	r24, r18
    2762:	0e 94 82 13 	call	0x2704	; 0x2704 <SPI_write>
	
	for(int i=0; i<read; i++){
    2766:	ee 24       	eor	r14, r14
    2768:	ff 24       	eor	r15, r15
    276a:	0a c0       	rjmp	.+20     	; 0x2780 <SD_command+0x68>
		Buffer[i] = SPI_write(0xFF);
    276c:	8f ef       	ldi	r24, 0xFF	; 255
    276e:	0e 94 82 13 	call	0x2704	; 0x2704 <SPI_write>
    2772:	f7 01       	movw	r30, r14
    2774:	e7 55       	subi	r30, 0x57	; 87
    2776:	f2 4b       	sbci	r31, 0xB2	; 178
    2778:	80 83       	st	Z, r24
	SPI_write(arg>>16 & 0xFF);
	SPI_write(arg>>8 & 0xFF);
	SPI_write(arg & 0xFF);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    277a:	08 94       	sec
    277c:	e1 1c       	adc	r14, r1
    277e:	f1 1c       	adc	r15, r1
    2780:	e0 16       	cp	r14, r16
    2782:	f1 06       	cpc	r15, r17
    2784:	9c f3       	brlt	.-26     	; 0x276c <SD_command+0x54>
		Buffer[i] = SPI_write(0xFF);
	}	
}
    2786:	25 96       	adiw	r28, 0x05	; 5
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	ff 90       	pop	r15
    2796:	ef 90       	pop	r14
    2798:	08 95       	ret

0000279a <SD_init>:
void SD_init(void){
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
//	ADCPower(TRUE);
	PORTC.DIRSET |= PIN0_bm;
    279e:	a0 e4       	ldi	r26, 0x40	; 64
    27a0:	b6 e0       	ldi	r27, 0x06	; 6
    27a2:	80 91 41 06 	lds	r24, 0x0641
    27a6:	81 60       	ori	r24, 0x01	; 1
    27a8:	11 96       	adiw	r26, 0x01	; 1
    27aa:	8c 93       	st	X, r24
    27ac:	11 97       	sbiw	r26, 0x01	; 1
	PORTF.DIRSET |= PIN6_bm;
    27ae:	e0 ea       	ldi	r30, 0xA0	; 160
    27b0:	f6 e0       	ldi	r31, 0x06	; 6
    27b2:	80 91 a1 06 	lds	r24, 0x06A1
    27b6:	80 64       	ori	r24, 0x40	; 64
    27b8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= PIN0_bm;	//turn on power for PortEx
    27ba:	80 91 45 06 	lds	r24, 0x0645
    27be:	81 60       	ori	r24, 0x01	; 1
    27c0:	15 96       	adiw	r26, 0x05	; 5
    27c2:	8c 93       	st	X, r24
	PORTF.OUTSET |= PIN6_bm;
    27c4:	80 91 a5 06 	lds	r24, 0x06A5
    27c8:	80 64       	ori	r24, 0x40	; 64
    27ca:	85 83       	std	Z+5, r24	; 0x05
	
	Ext1Power(TRUE);			//power up SD card
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>
	//uint8_t status = SD_get_status();
	SPIInit(SPI_MODE_0_gc);
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPICS(TRUE);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
		SPIC.DATA=0xFF;
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
	}
	*/
	SPIC.DATA = NULL;
    27de:	e0 ec       	ldi	r30, 0xC0	; 192
    27e0:	f8 e0       	ldi	r31, 0x08	; 8
    27e2:	13 82       	std	Z+3, r1	; 0x03
	SPICS(FALSE);
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	SPIDisable();
    27ea:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
	
	 
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS
    27ee:	88 e0       	ldi	r24, 0x08	; 8
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	0e 94 cc 04 	call	0x998	; 0x998 <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);
    27f6:	88 e0       	ldi	r24, 0x08	; 8
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <PortEx_OUTSET>
		SPIC.DATA=0xFF;
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
		SPIBuffer[12] = SPIC.DATA; //read SPI data register to reset status flag
	}
	*/
	SPIInit(SPI_MODE_0_gc);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	0e 94 16 03 	call	0x62c	; 0x62c <SPIInit>
	SPICS(TRUE);
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	SD_command(0x00,0x00000000,0x95,2);		//send command 0 and read 2 next bytes sent back
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	ba 01       	movw	r22, r20
    2812:	25 e9       	ldi	r18, 0x95	; 149
    2814:	02 e0       	ldi	r16, 0x02	; 2
    2816:	10 e0       	ldi	r17, 0x00	; 0
    2818:	0e 94 8c 13 	call	0x2718	; 0x2718 <SD_command>
	if (Buffer[2] != 0x01) {
    281c:	80 91 ab 4d 	lds	r24, 0x4DAB
		//there was no response to the first command
	}
	//send second initialization command until card returns a non-busy signal (0x00)
	while(Buffer[2] != 0x00){
    2820:	09 c0       	rjmp	.+18     	; 0x2834 <SD_init+0x9a>
		SD_command(0x01,0x00000000,0x00,2);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	ba 01       	movw	r22, r20
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	02 e0       	ldi	r16, 0x02	; 2
    282e:	10 e0       	ldi	r17, 0x00	; 0
    2830:	0e 94 8c 13 	call	0x2718	; 0x2718 <SD_command>
	SD_command(0x00,0x00000000,0x95,2);		//send command 0 and read 2 next bytes sent back
	if (Buffer[2] != 0x01) {
		//there was no response to the first command
	}
	//send second initialization command until card returns a non-busy signal (0x00)
	while(Buffer[2] != 0x00){
    2834:	80 91 ab 4d 	lds	r24, 0x4DAB
    2838:	88 23       	and	r24, r24
    283a:	99 f7       	brne	.-26     	; 0x2822 <SD_init+0x88>
			SPIBuffer[12] = SPIC.DATA; //read SPI data register to reset status flag
		}
		*/
	}
	//SD_command(8,0x000001AA,0xAA,2);		//check voltage range
	Buffer[2] = 0xAA;
    283c:	8a ea       	ldi	r24, 0xAA	; 170
    283e:	80 93 ab 4d 	sts	0x4DAB, r24
	while(Buffer[2]!= 0x00){
    2842:	11 c0       	rjmp	.+34     	; 0x2866 <SD_init+0xcc>
		SD_command(55,0x00000000,0x00,2);	//next command will be advanced
    2844:	87 e3       	ldi	r24, 0x37	; 55
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	ba 01       	movw	r22, r20
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	02 e0       	ldi	r16, 0x02	; 2
    2850:	10 e0       	ldi	r17, 0x00	; 0
    2852:	0e 94 8c 13 	call	0x2718	; 0x2718 <SD_command>
		SD_command(41,0x40000000,0x00,2);
    2856:	89 e2       	ldi	r24, 0x29	; 41
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	70 e4       	ldi	r23, 0x40	; 64
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	0e 94 8c 13 	call	0x2718	; 0x2718 <SD_command>
		}
		*/
	}
	//SD_command(8,0x000001AA,0xAA,2);		//check voltage range
	Buffer[2] = 0xAA;
	while(Buffer[2]!= 0x00){
    2866:	80 91 ab 4d 	lds	r24, 0x4DAB
    286a:	88 23       	and	r24, r24
    286c:	59 f7       	brne	.-42     	; 0x2844 <SD_init+0xaa>
		SD_command(55,0x00000000,0x00,2);	//next command will be advanced
		SD_command(41,0x40000000,0x00,2);
	}
	SD_command(58,0x00000000,0x00,6);
    286e:	8a e3       	ldi	r24, 0x3A	; 58
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	ba 01       	movw	r22, r20
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	06 e0       	ldi	r16, 0x06	; 6
    287a:	10 e0       	ldi	r17, 0x00	; 0
    287c:	0e 94 8c 13 	call	0x2718	; 0x2718 <SD_command>
	if((Buffer[3] & 0x40)>>6){				//if bit 30 of OCR register is set
    2880:	80 91 ac 4d 	lds	r24, 0x4DAC
    2884:	86 ff       	sbrs	r24, 6
    2886:	0a c0       	rjmp	.+20     	; 0x289c <SD_init+0x102>
		SD_command(16,0x00000200,0x00,2);	//set block size to 512 bytes
    2888:	80 e1       	ldi	r24, 0x10	; 16
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	52 e0       	ldi	r21, 0x02	; 2
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	02 e0       	ldi	r16, 0x02	; 2
    2896:	10 e0       	ldi	r17, 0x00	; 0
    2898:	0e 94 8c 13 	call	0x2718	; 0x2718 <SD_command>
	}
	SPICS(FALSE);
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	0e 94 27 03 	call	0x64e	; 0x64e <SPICS>
	SPIDisable();		
    28a2:	0e 94 33 03 	call	0x666	; 0x666 <SPIDisable>
}	
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	08 95       	ret

000028ac <__muldi3>:
    28ac:	a0 e3       	ldi	r26, 0x30	; 48
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ec e5       	ldi	r30, 0x5C	; 92
    28b2:	f4 e1       	ldi	r31, 0x14	; 20
    28b4:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__prologue_saves__+0x4>
    28b8:	29 8f       	std	Y+25, r18	; 0x19
    28ba:	3a 8f       	std	Y+26, r19	; 0x1a
    28bc:	4b 8f       	std	Y+27, r20	; 0x1b
    28be:	5c 8f       	std	Y+28, r21	; 0x1c
    28c0:	6d 8f       	std	Y+29, r22	; 0x1d
    28c2:	7e 8f       	std	Y+30, r23	; 0x1e
    28c4:	8f 8f       	std	Y+31, r24	; 0x1f
    28c6:	98 a3       	lds	r25, 0x58
    28c8:	a9 8a       	std	Y+17, r10	; 0x11
    28ca:	ba 8a       	std	Y+18, r11	; 0x12
    28cc:	cb 8a       	std	Y+19, r12	; 0x13
    28ce:	dc 8a       	std	Y+20, r13	; 0x14
    28d0:	ed 8a       	std	Y+21, r14	; 0x15
    28d2:	fe 8a       	std	Y+22, r15	; 0x16
    28d4:	0f 8b       	std	Y+23, r16	; 0x17
    28d6:	18 8f       	std	Y+24, r17	; 0x18
    28d8:	09 8d       	ldd	r16, Y+25	; 0x19
    28da:	1a 8d       	ldd	r17, Y+26	; 0x1a
    28dc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    28de:	3c 8d       	ldd	r19, Y+28	; 0x1c
    28e0:	09 a3       	lds	r16, 0x59
    28e2:	1a a3       	lds	r17, 0x5a
    28e4:	2b a3       	lds	r18, 0x5b
    28e6:	3c a3       	lds	r19, 0x5c
    28e8:	68 01       	movw	r12, r16
    28ea:	79 01       	movw	r14, r18
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	9f ef       	ldi	r25, 0xFF	; 255
    28f0:	a0 e0       	ldi	r26, 0x00	; 0
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	c8 22       	and	r12, r24
    28f6:	d9 22       	and	r13, r25
    28f8:	ea 22       	and	r14, r26
    28fa:	fb 22       	and	r15, r27
    28fc:	89 01       	movw	r16, r18
    28fe:	22 27       	eor	r18, r18
    2900:	33 27       	eor	r19, r19
    2902:	09 a7       	lds	r16, 0x79
    2904:	1a a7       	lds	r17, 0x7a
    2906:	2b a7       	lds	r18, 0x7b
    2908:	3c a7       	lds	r19, 0x7c
    290a:	09 89       	ldd	r16, Y+17	; 0x11
    290c:	1a 89       	ldd	r17, Y+18	; 0x12
    290e:	2b 89       	ldd	r18, Y+19	; 0x13
    2910:	3c 89       	ldd	r19, Y+20	; 0x14
    2912:	0d a3       	lds	r16, 0x5d
    2914:	1e a3       	lds	r17, 0x5e
    2916:	2f a3       	lds	r18, 0x5f
    2918:	38 a7       	lds	r19, 0x78
    291a:	48 01       	movw	r8, r16
    291c:	59 01       	movw	r10, r18
    291e:	88 22       	and	r8, r24
    2920:	99 22       	and	r9, r25
    2922:	aa 22       	and	r10, r26
    2924:	bb 22       	and	r11, r27
    2926:	29 01       	movw	r4, r18
    2928:	66 24       	eor	r6, r6
    292a:	77 24       	eor	r7, r7
    292c:	c5 01       	movw	r24, r10
    292e:	b4 01       	movw	r22, r8
    2930:	a7 01       	movw	r20, r14
    2932:	96 01       	movw	r18, r12
    2934:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    2938:	6d a7       	lds	r22, 0x7d
    293a:	7e a7       	lds	r23, 0x7e
    293c:	8f a7       	lds	r24, 0x7f
    293e:	98 ab       	sts	0x58, r25
    2940:	c3 01       	movw	r24, r6
    2942:	b2 01       	movw	r22, r4
    2944:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    2948:	6b 01       	movw	r12, r22
    294a:	7c 01       	movw	r14, r24
    294c:	c5 01       	movw	r24, r10
    294e:	b4 01       	movw	r22, r8
    2950:	29 a5       	lds	r18, 0x69
    2952:	3a a5       	lds	r19, 0x6a
    2954:	4b a5       	lds	r20, 0x6b
    2956:	5c a5       	lds	r21, 0x6c
    2958:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    295c:	4b 01       	movw	r8, r22
    295e:	5c 01       	movw	r10, r24
    2960:	c3 01       	movw	r24, r6
    2962:	b2 01       	movw	r22, r4
    2964:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    2968:	ab 01       	movw	r20, r22
    296a:	bc 01       	movw	r22, r24
    296c:	c8 0c       	add	r12, r8
    296e:	d9 1c       	adc	r13, r9
    2970:	ea 1c       	adc	r14, r10
    2972:	fb 1c       	adc	r15, r11
    2974:	0d a5       	lds	r16, 0x6d
    2976:	1e a5       	lds	r17, 0x6e
    2978:	2f a5       	lds	r18, 0x6f
    297a:	38 a9       	sts	0x48, r19
    297c:	c9 01       	movw	r24, r18
    297e:	aa 27       	eor	r26, r26
    2980:	bb 27       	eor	r27, r27
    2982:	c8 0e       	add	r12, r24
    2984:	d9 1e       	adc	r13, r25
    2986:	ea 1e       	adc	r14, r26
    2988:	fb 1e       	adc	r15, r27
    298a:	c8 14       	cp	r12, r8
    298c:	d9 04       	cpc	r13, r9
    298e:	ea 04       	cpc	r14, r10
    2990:	fb 04       	cpc	r15, r11
    2992:	20 f4       	brcc	.+8      	; 0x299c <__muldi3+0xf0>
    2994:	40 50       	subi	r20, 0x00	; 0
    2996:	50 40       	sbci	r21, 0x00	; 0
    2998:	6f 4f       	sbci	r22, 0xFF	; 255
    299a:	7f 4f       	sbci	r23, 0xFF	; 255
    299c:	c7 01       	movw	r24, r14
    299e:	aa 27       	eor	r26, r26
    29a0:	bb 27       	eor	r27, r27
    29a2:	84 0f       	add	r24, r20
    29a4:	95 1f       	adc	r25, r21
    29a6:	a6 1f       	adc	r26, r22
    29a8:	b7 1f       	adc	r27, r23
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	af 83       	std	Y+7, r26	; 0x07
    29b0:	b8 87       	std	Y+8, r27	; 0x08
    29b2:	76 01       	movw	r14, r12
    29b4:	dd 24       	eor	r13, r13
    29b6:	cc 24       	eor	r12, r12
    29b8:	4d a5       	lds	r20, 0x6d
    29ba:	5e a5       	lds	r21, 0x6e
    29bc:	6f a5       	lds	r22, 0x6f
    29be:	78 a9       	sts	0x48, r23
    29c0:	60 70       	andi	r22, 0x00	; 0
    29c2:	70 70       	andi	r23, 0x00	; 0
    29c4:	c4 0e       	add	r12, r20
    29c6:	d5 1e       	adc	r13, r21
    29c8:	e6 1e       	adc	r14, r22
    29ca:	f7 1e       	adc	r15, r23
    29cc:	c9 82       	std	Y+1, r12	; 0x01
    29ce:	da 82       	std	Y+2, r13	; 0x02
    29d0:	eb 82       	std	Y+3, r14	; 0x03
    29d2:	fc 82       	std	Y+4, r15	; 0x04
    29d4:	1c 2d       	mov	r17, r12
    29d6:	0a 81       	ldd	r16, Y+2	; 0x02
    29d8:	8b 80       	ldd	r8, Y+3	; 0x03
    29da:	4c 80       	ldd	r4, Y+4	; 0x04
    29dc:	8d 87       	std	Y+13, r24	; 0x0d
    29de:	8e 81       	ldd	r24, Y+6	; 0x06
    29e0:	8e 87       	std	Y+14, r24	; 0x0e
    29e2:	8f 81       	ldd	r24, Y+7	; 0x07
    29e4:	8f 87       	std	Y+15, r24	; 0x0f
    29e6:	88 85       	ldd	r24, Y+8	; 0x08
    29e8:	88 8b       	std	Y+16, r24	; 0x10
    29ea:	2d 89       	ldd	r18, Y+21	; 0x15
    29ec:	3e 89       	ldd	r19, Y+22	; 0x16
    29ee:	4f 89       	ldd	r20, Y+23	; 0x17
    29f0:	58 8d       	ldd	r21, Y+24	; 0x18
    29f2:	69 a1       	lds	r22, 0x49
    29f4:	7a a1       	lds	r23, 0x4a
    29f6:	8b a1       	lds	r24, 0x4b
    29f8:	9c a1       	lds	r25, 0x4c
    29fa:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    29fe:	6b 01       	movw	r12, r22
    2a00:	7c 01       	movw	r14, r24
    2a02:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2a04:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2a06:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2a08:	58 a1       	lds	r21, 0x48
    2a0a:	6d a1       	lds	r22, 0x4d
    2a0c:	7e a1       	lds	r23, 0x4e
    2a0e:	8f a1       	lds	r24, 0x4f
    2a10:	98 a5       	lds	r25, 0x68
    2a12:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	c8 0e       	add	r12, r24
    2a1c:	d9 1e       	adc	r13, r25
    2a1e:	ea 1e       	adc	r14, r26
    2a20:	fb 1e       	adc	r15, r27
    2a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a26:	af 85       	ldd	r26, Y+15	; 0x0f
    2a28:	b8 89       	ldd	r27, Y+16	; 0x10
    2a2a:	8c 0d       	add	r24, r12
    2a2c:	9d 1d       	adc	r25, r13
    2a2e:	ae 1d       	adc	r26, r14
    2a30:	bf 1d       	adc	r27, r15
    2a32:	8d 87       	std	Y+13, r24	; 0x0d
    2a34:	9e 87       	std	Y+14, r25	; 0x0e
    2a36:	af 87       	std	Y+15, r26	; 0x0f
    2a38:	b8 8b       	std	Y+16, r27	; 0x10
    2a3a:	68 2f       	mov	r22, r24
    2a3c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a3e:	21 2f       	mov	r18, r17
    2a40:	30 2f       	mov	r19, r16
    2a42:	48 2d       	mov	r20, r8
    2a44:	54 2d       	mov	r21, r4
    2a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a48:	98 89       	ldd	r25, Y+16	; 0x10
    2a4a:	e0 96       	adiw	r28, 0x30	; 48
    2a4c:	e0 e1       	ldi	r30, 0x10	; 16
    2a4e:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__epilogue_restores__+0x4>

00002a52 <__ashldi3>:
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	0f 93       	push	r16
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	60 97       	sbiw	r28, 0x10	; 16
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	00 23       	and	r16, r16
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <__ashldi3+0x1e>
    2a6e:	5a c0       	rjmp	.+180    	; 0x2b24 <__ashldi3+0xd2>
    2a70:	29 87       	std	Y+9, r18	; 0x09
    2a72:	3a 87       	std	Y+10, r19	; 0x0a
    2a74:	4b 87       	std	Y+11, r20	; 0x0b
    2a76:	5c 87       	std	Y+12, r21	; 0x0c
    2a78:	6d 87       	std	Y+13, r22	; 0x0d
    2a7a:	7e 87       	std	Y+14, r23	; 0x0e
    2a7c:	8f 87       	std	Y+15, r24	; 0x0f
    2a7e:	98 8b       	std	Y+16, r25	; 0x10
    2a80:	80 e2       	ldi	r24, 0x20	; 32
    2a82:	80 1b       	sub	r24, r16
    2a84:	49 85       	ldd	r20, Y+9	; 0x09
    2a86:	5a 85       	ldd	r21, Y+10	; 0x0a
    2a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8c:	18 16       	cp	r1, r24
    2a8e:	b4 f0       	brlt	.+44     	; 0x2abc <__ashldi3+0x6a>
    2a90:	19 82       	std	Y+1, r1	; 0x01
    2a92:	1a 82       	std	Y+2, r1	; 0x02
    2a94:	1b 82       	std	Y+3, r1	; 0x03
    2a96:	1c 82       	std	Y+4, r1	; 0x04
    2a98:	99 27       	eor	r25, r25
    2a9a:	87 fd       	sbrc	r24, 7
    2a9c:	90 95       	com	r25
    2a9e:	90 95       	com	r25
    2aa0:	81 95       	neg	r24
    2aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <__ashldi3+0x5c>
    2aa6:	44 0f       	add	r20, r20
    2aa8:	55 1f       	adc	r21, r21
    2aaa:	66 1f       	adc	r22, r22
    2aac:	77 1f       	adc	r23, r23
    2aae:	8a 95       	dec	r24
    2ab0:	d2 f7       	brpl	.-12     	; 0x2aa6 <__ashldi3+0x54>
    2ab2:	4d 83       	std	Y+5, r20	; 0x05
    2ab4:	5e 83       	std	Y+6, r21	; 0x06
    2ab6:	6f 83       	std	Y+7, r22	; 0x07
    2ab8:	78 87       	std	Y+8, r23	; 0x08
    2aba:	2c c0       	rjmp	.+88     	; 0x2b14 <__ashldi3+0xc2>
    2abc:	6a 01       	movw	r12, r20
    2abe:	7b 01       	movw	r14, r22
    2ac0:	00 2e       	mov	r0, r16
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <__ashldi3+0x7a>
    2ac4:	cc 0c       	add	r12, r12
    2ac6:	dd 1c       	adc	r13, r13
    2ac8:	ee 1c       	adc	r14, r14
    2aca:	ff 1c       	adc	r15, r15
    2acc:	0a 94       	dec	r0
    2ace:	d2 f7       	brpl	.-12     	; 0x2ac4 <__ashldi3+0x72>
    2ad0:	c9 82       	std	Y+1, r12	; 0x01
    2ad2:	da 82       	std	Y+2, r13	; 0x02
    2ad4:	eb 82       	std	Y+3, r14	; 0x03
    2ad6:	fc 82       	std	Y+4, r15	; 0x04
    2ad8:	6a 01       	movw	r12, r20
    2ada:	7b 01       	movw	r14, r22
    2adc:	04 c0       	rjmp	.+8      	; 0x2ae6 <__ashldi3+0x94>
    2ade:	f6 94       	lsr	r15
    2ae0:	e7 94       	ror	r14
    2ae2:	d7 94       	ror	r13
    2ae4:	c7 94       	ror	r12
    2ae6:	8a 95       	dec	r24
    2ae8:	d2 f7       	brpl	.-12     	; 0x2ade <__ashldi3+0x8c>
    2aea:	d7 01       	movw	r26, r14
    2aec:	c6 01       	movw	r24, r12
    2aee:	4d 85       	ldd	r20, Y+13	; 0x0d
    2af0:	5e 85       	ldd	r21, Y+14	; 0x0e
    2af2:	6f 85       	ldd	r22, Y+15	; 0x0f
    2af4:	78 89       	ldd	r23, Y+16	; 0x10
    2af6:	04 c0       	rjmp	.+8      	; 0x2b00 <__ashldi3+0xae>
    2af8:	44 0f       	add	r20, r20
    2afa:	55 1f       	adc	r21, r21
    2afc:	66 1f       	adc	r22, r22
    2afe:	77 1f       	adc	r23, r23
    2b00:	0a 95       	dec	r16
    2b02:	d2 f7       	brpl	.-12     	; 0x2af8 <__ashldi3+0xa6>
    2b04:	84 2b       	or	r24, r20
    2b06:	95 2b       	or	r25, r21
    2b08:	a6 2b       	or	r26, r22
    2b0a:	b7 2b       	or	r27, r23
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
    2b10:	af 83       	std	Y+7, r26	; 0x07
    2b12:	b8 87       	std	Y+8, r27	; 0x08
    2b14:	29 81       	ldd	r18, Y+1	; 0x01
    2b16:	3a 81       	ldd	r19, Y+2	; 0x02
    2b18:	4b 81       	ldd	r20, Y+3	; 0x03
    2b1a:	5c 81       	ldd	r21, Y+4	; 0x04
    2b1c:	6d 81       	ldd	r22, Y+5	; 0x05
    2b1e:	7e 81       	ldd	r23, Y+6	; 0x06
    2b20:	8f 81       	ldd	r24, Y+7	; 0x07
    2b22:	98 85       	ldd	r25, Y+8	; 0x08
    2b24:	60 96       	adiw	r28, 0x10	; 16
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	0f 91       	pop	r16
    2b30:	ff 90       	pop	r15
    2b32:	ef 90       	pop	r14
    2b34:	df 90       	pop	r13
    2b36:	cf 90       	pop	r12
    2b38:	08 95       	ret

00002b3a <__ashrdi3>:
    2b3a:	0f 93       	push	r16
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	60 97       	sbiw	r28, 0x10	; 16
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	00 23       	and	r16, r16
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <__ashrdi3+0x16>
    2b4e:	56 c0       	rjmp	.+172    	; 0x2bfc <__ashrdi3+0xc2>
    2b50:	29 87       	std	Y+9, r18	; 0x09
    2b52:	3a 87       	std	Y+10, r19	; 0x0a
    2b54:	4b 87       	std	Y+11, r20	; 0x0b
    2b56:	5c 87       	std	Y+12, r21	; 0x0c
    2b58:	6d 87       	std	Y+13, r22	; 0x0d
    2b5a:	7e 87       	std	Y+14, r23	; 0x0e
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
    2b5e:	98 8b       	std	Y+16, r25	; 0x10
    2b60:	20 e2       	ldi	r18, 0x20	; 32
    2b62:	20 1b       	sub	r18, r16
    2b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b68:	af 85       	ldd	r26, Y+15	; 0x0f
    2b6a:	b8 89       	ldd	r27, Y+16	; 0x10
    2b6c:	ac 01       	movw	r20, r24
    2b6e:	bd 01       	movw	r22, r26
    2b70:	12 16       	cp	r1, r18
    2b72:	b4 f0       	brlt	.+44     	; 0x2ba0 <__ashrdi3+0x66>
    2b74:	77 0f       	add	r23, r23
    2b76:	44 0b       	sbc	r20, r20
    2b78:	54 2f       	mov	r21, r20
    2b7a:	ba 01       	movw	r22, r20
    2b7c:	4d 83       	std	Y+5, r20	; 0x05
    2b7e:	5e 83       	std	Y+6, r21	; 0x06
    2b80:	6f 83       	std	Y+7, r22	; 0x07
    2b82:	78 87       	std	Y+8, r23	; 0x08
    2b84:	33 27       	eor	r19, r19
    2b86:	27 fd       	sbrc	r18, 7
    2b88:	30 95       	com	r19
    2b8a:	30 95       	com	r19
    2b8c:	21 95       	neg	r18
    2b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b90:	04 c0       	rjmp	.+8      	; 0x2b9a <__ashrdi3+0x60>
    2b92:	b5 95       	asr	r27
    2b94:	a7 95       	ror	r26
    2b96:	97 95       	ror	r25
    2b98:	87 95       	ror	r24
    2b9a:	2a 95       	dec	r18
    2b9c:	d2 f7       	brpl	.-12     	; 0x2b92 <__ashrdi3+0x58>
    2b9e:	22 c0       	rjmp	.+68     	; 0x2be4 <__ashrdi3+0xaa>
    2ba0:	00 2e       	mov	r0, r16
    2ba2:	04 c0       	rjmp	.+8      	; 0x2bac <__ashrdi3+0x72>
    2ba4:	75 95       	asr	r23
    2ba6:	67 95       	ror	r22
    2ba8:	57 95       	ror	r21
    2baa:	47 95       	ror	r20
    2bac:	0a 94       	dec	r0
    2bae:	d2 f7       	brpl	.-12     	; 0x2ba4 <__ashrdi3+0x6a>
    2bb0:	4d 83       	std	Y+5, r20	; 0x05
    2bb2:	5e 83       	std	Y+6, r21	; 0x06
    2bb4:	6f 83       	std	Y+7, r22	; 0x07
    2bb6:	78 87       	std	Y+8, r23	; 0x08
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <__ashrdi3+0x88>
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	aa 1f       	adc	r26, r26
    2bc0:	bb 1f       	adc	r27, r27
    2bc2:	2a 95       	dec	r18
    2bc4:	d2 f7       	brpl	.-12     	; 0x2bba <__ashrdi3+0x80>
    2bc6:	49 85       	ldd	r20, Y+9	; 0x09
    2bc8:	5a 85       	ldd	r21, Y+10	; 0x0a
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <__ashrdi3+0x9e>
    2bd0:	76 95       	lsr	r23
    2bd2:	67 95       	ror	r22
    2bd4:	57 95       	ror	r21
    2bd6:	47 95       	ror	r20
    2bd8:	0a 95       	dec	r16
    2bda:	d2 f7       	brpl	.-12     	; 0x2bd0 <__ashrdi3+0x96>
    2bdc:	84 2b       	or	r24, r20
    2bde:	95 2b       	or	r25, r21
    2be0:	a6 2b       	or	r26, r22
    2be2:	b7 2b       	or	r27, r23
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	ab 83       	std	Y+3, r26	; 0x03
    2bea:	bc 83       	std	Y+4, r27	; 0x04
    2bec:	29 81       	ldd	r18, Y+1	; 0x01
    2bee:	3a 81       	ldd	r19, Y+2	; 0x02
    2bf0:	4b 81       	ldd	r20, Y+3	; 0x03
    2bf2:	5c 81       	ldd	r21, Y+4	; 0x04
    2bf4:	6d 81       	ldd	r22, Y+5	; 0x05
    2bf6:	7e 81       	ldd	r23, Y+6	; 0x06
    2bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bfa:	98 85       	ldd	r25, Y+8	; 0x08
    2bfc:	60 96       	adiw	r28, 0x10	; 16
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	0f 91       	pop	r16
    2c08:	08 95       	ret

00002c0a <__divdi3>:
    2c0a:	a8 e4       	ldi	r26, 0x48	; 72
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	eb e0       	ldi	r30, 0x0B	; 11
    2c10:	f6 e1       	ldi	r31, 0x16	; 22
    2c12:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__prologue_saves__+0x2>
    2c16:	f5 01       	movw	r30, r10
    2c18:	29 a3       	lds	r18, 0x59
    2c1a:	3a a3       	lds	r19, 0x5a
    2c1c:	4b a3       	lds	r20, 0x5b
    2c1e:	5c a3       	lds	r21, 0x5c
    2c20:	6d a3       	lds	r22, 0x5d
    2c22:	7e a3       	lds	r23, 0x5e
    2c24:	8f a3       	lds	r24, 0x5f
    2c26:	98 a7       	lds	r25, 0x78
    2c28:	a9 8e       	std	Y+25, r10	; 0x19
    2c2a:	fa 8f       	std	Y+26, r31	; 0x1a
    2c2c:	cb 8e       	std	Y+27, r12	; 0x1b
    2c2e:	dc 8e       	std	Y+28, r13	; 0x1c
    2c30:	ed 8e       	std	Y+29, r14	; 0x1d
    2c32:	fe 8e       	std	Y+30, r15	; 0x1e
    2c34:	0f 8f       	std	Y+31, r16	; 0x1f
    2c36:	18 a3       	lds	r17, 0x58
    2c38:	8d a0       	lds	r24, 0x8d
    2c3a:	9e a0       	lds	r25, 0x8e
    2c3c:	af a0       	lds	r26, 0x8f
    2c3e:	b8 a4       	lds	r27, 0xa8
    2c40:	b7 fe       	sbrs	r11, 7
    2c42:	67 c0       	rjmp	.+206    	; 0x2d12 <__divdi3+0x108>
    2c44:	21 95       	neg	r18
    2c46:	b1 e0       	ldi	r27, 0x01	; 1
    2c48:	12 16       	cp	r1, r18
    2c4a:	08 f0       	brcs	.+2      	; 0x2c4e <__divdi3+0x44>
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	31 95       	neg	r19
    2c50:	a1 e0       	ldi	r26, 0x01	; 1
    2c52:	13 16       	cp	r1, r19
    2c54:	08 f0       	brcs	.+2      	; 0x2c58 <__divdi3+0x4e>
    2c56:	a0 e0       	ldi	r26, 0x00	; 0
    2c58:	b3 2e       	mov	r11, r19
    2c5a:	bb 1a       	sub	r11, r27
    2c5c:	bb 2d       	mov	r27, r11
    2c5e:	88 24       	eor	r8, r8
    2c60:	83 94       	inc	r8
    2c62:	3b 15       	cp	r19, r11
    2c64:	08 f0       	brcs	.+2      	; 0x2c68 <__divdi3+0x5e>
    2c66:	88 24       	eor	r8, r8
    2c68:	a8 29       	or	r26, r8
    2c6a:	41 95       	neg	r20
    2c6c:	31 e0       	ldi	r19, 0x01	; 1
    2c6e:	14 16       	cp	r1, r20
    2c70:	08 f0       	brcs	.+2      	; 0x2c74 <__divdi3+0x6a>
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	b4 2e       	mov	r11, r20
    2c76:	ba 1a       	sub	r11, r26
    2c78:	ab 2d       	mov	r26, r11
    2c7a:	88 24       	eor	r8, r8
    2c7c:	83 94       	inc	r8
    2c7e:	4b 15       	cp	r20, r11
    2c80:	08 f0       	brcs	.+2      	; 0x2c84 <__divdi3+0x7a>
    2c82:	88 24       	eor	r8, r8
    2c84:	38 29       	or	r19, r8
    2c86:	51 95       	neg	r21
    2c88:	41 e0       	ldi	r20, 0x01	; 1
    2c8a:	15 16       	cp	r1, r21
    2c8c:	08 f0       	brcs	.+2      	; 0x2c90 <__divdi3+0x86>
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	45 2e       	mov	r4, r21
    2c92:	43 1a       	sub	r4, r19
    2c94:	31 e0       	ldi	r19, 0x01	; 1
    2c96:	54 15       	cp	r21, r4
    2c98:	08 f0       	brcs	.+2      	; 0x2c9c <__divdi3+0x92>
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	43 2b       	or	r20, r19
    2c9e:	61 95       	neg	r22
    2ca0:	31 e0       	ldi	r19, 0x01	; 1
    2ca2:	16 16       	cp	r1, r22
    2ca4:	08 f0       	brcs	.+2      	; 0x2ca8 <__divdi3+0x9e>
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	86 2e       	mov	r8, r22
    2caa:	84 1a       	sub	r8, r20
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	68 15       	cp	r22, r8
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <__divdi3+0xaa>
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	34 2b       	or	r19, r20
    2cb6:	71 95       	neg	r23
    2cb8:	41 e0       	ldi	r20, 0x01	; 1
    2cba:	17 16       	cp	r1, r23
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <__divdi3+0xb6>
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	57 2f       	mov	r21, r23
    2cc2:	53 1b       	sub	r21, r19
    2cc4:	31 e0       	ldi	r19, 0x01	; 1
    2cc6:	75 17       	cp	r23, r21
    2cc8:	08 f0       	brcs	.+2      	; 0x2ccc <__divdi3+0xc2>
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	43 2b       	or	r20, r19
    2cce:	81 95       	neg	r24
    2cd0:	31 e0       	ldi	r19, 0x01	; 1
    2cd2:	18 16       	cp	r1, r24
    2cd4:	08 f0       	brcs	.+2      	; 0x2cd8 <__divdi3+0xce>
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	68 2f       	mov	r22, r24
    2cda:	64 1b       	sub	r22, r20
    2cdc:	46 2f       	mov	r20, r22
    2cde:	61 e0       	ldi	r22, 0x01	; 1
    2ce0:	84 17       	cp	r24, r20
    2ce2:	08 f0       	brcs	.+2      	; 0x2ce6 <__divdi3+0xdc>
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	36 2b       	or	r19, r22
    2ce8:	91 95       	neg	r25
    2cea:	93 1b       	sub	r25, r19
    2cec:	29 a3       	lds	r18, 0x59
    2cee:	ba a3       	lds	r27, 0x5a
    2cf0:	ab a3       	lds	r26, 0x5b
    2cf2:	4c a2       	lds	r20, 0x9c
    2cf4:	8d a2       	lds	r24, 0x9d
    2cf6:	5e a3       	lds	r21, 0x5e
    2cf8:	4f a3       	lds	r20, 0x5f
    2cfa:	98 a7       	lds	r25, 0x78
    2cfc:	8f ef       	ldi	r24, 0xFF	; 255
    2cfe:	9f ef       	ldi	r25, 0xFF	; 255
    2d00:	af ef       	ldi	r26, 0xFF	; 255
    2d02:	bf ef       	ldi	r27, 0xFF	; 255
    2d04:	25 96       	adiw	r28, 0x05	; 5
    2d06:	8c af       	sts	0x7c, r24
    2d08:	9d af       	sts	0x7d, r25
    2d0a:	ae af       	sts	0x7e, r26
    2d0c:	bf af       	sts	0x7f, r27
    2d0e:	25 97       	sbiw	r28, 0x05	; 5
    2d10:	06 c0       	rjmp	.+12     	; 0x2d1e <__divdi3+0x114>
    2d12:	25 96       	adiw	r28, 0x05	; 5
    2d14:	1c ae       	sts	0xbc, r17
    2d16:	1d ae       	sts	0xbd, r17
    2d18:	1e ae       	sts	0xbe, r17
    2d1a:	1f ae       	sts	0xbf, r17
    2d1c:	25 97       	sbiw	r28, 0x05	; 5
    2d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d22:	af 8d       	ldd	r26, Y+31	; 0x1f
    2d24:	b8 a1       	lds	r27, 0x48
    2d26:	b7 ff       	sbrs	r27, 7
    2d28:	68 c0       	rjmp	.+208    	; 0x2dfa <__divdi3+0x1f0>
    2d2a:	25 96       	adiw	r28, 0x05	; 5
    2d2c:	2c ad       	sts	0x6c, r18
    2d2e:	3d ad       	sts	0x6d, r19
    2d30:	4e ad       	sts	0x6e, r20
    2d32:	5f ad       	sts	0x6f, r21
    2d34:	25 97       	sbiw	r28, 0x05	; 5
    2d36:	20 95       	com	r18
    2d38:	30 95       	com	r19
    2d3a:	40 95       	com	r20
    2d3c:	50 95       	com	r21
    2d3e:	25 96       	adiw	r28, 0x05	; 5
    2d40:	2c af       	sts	0x7c, r18
    2d42:	3d af       	sts	0x7d, r19
    2d44:	4e af       	sts	0x7e, r20
    2d46:	5f af       	sts	0x7f, r21
    2d48:	25 97       	sbiw	r28, 0x05	; 5
    2d4a:	e1 95       	neg	r30
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	1e 16       	cp	r1, r30
    2d50:	08 f0       	brcs	.+2      	; 0x2d54 <__divdi3+0x14a>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	f1 95       	neg	r31
    2d56:	91 e0       	ldi	r25, 0x01	; 1
    2d58:	1f 16       	cp	r1, r31
    2d5a:	08 f0       	brcs	.+2      	; 0x2d5e <__divdi3+0x154>
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	4f 2f       	mov	r20, r31
    2d60:	48 1b       	sub	r20, r24
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	f4 17       	cp	r31, r20
    2d66:	08 f0       	brcs	.+2      	; 0x2d6a <__divdi3+0x160>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	98 2b       	or	r25, r24
    2d6c:	c1 94       	neg	r12
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	1c 14       	cp	r1, r12
    2d72:	08 f0       	brcs	.+2      	; 0x2d76 <__divdi3+0x16c>
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	6c 2d       	mov	r22, r12
    2d78:	69 1b       	sub	r22, r25
    2d7a:	91 e0       	ldi	r25, 0x01	; 1
    2d7c:	c6 16       	cp	r12, r22
    2d7e:	08 f0       	brcs	.+2      	; 0x2d82 <__divdi3+0x178>
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	89 2b       	or	r24, r25
    2d84:	d1 94       	neg	r13
    2d86:	91 e0       	ldi	r25, 0x01	; 1
    2d88:	1d 14       	cp	r1, r13
    2d8a:	08 f0       	brcs	.+2      	; 0x2d8e <__divdi3+0x184>
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	5d 2d       	mov	r21, r13
    2d90:	58 1b       	sub	r21, r24
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	d5 16       	cp	r13, r21
    2d96:	08 f0       	brcs	.+2      	; 0x2d9a <__divdi3+0x190>
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	98 2b       	or	r25, r24
    2d9c:	e1 94       	neg	r14
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	1e 14       	cp	r1, r14
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <__divdi3+0x19c>
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	3e 2d       	mov	r19, r14
    2da8:	39 1b       	sub	r19, r25
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	e3 16       	cp	r14, r19
    2dae:	08 f0       	brcs	.+2      	; 0x2db2 <__divdi3+0x1a8>
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	89 2b       	or	r24, r25
    2db4:	f1 94       	neg	r15
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	1f 14       	cp	r1, r15
    2dba:	08 f0       	brcs	.+2      	; 0x2dbe <__divdi3+0x1b4>
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	2f 2d       	mov	r18, r15
    2dc0:	28 1b       	sub	r18, r24
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	f2 16       	cp	r15, r18
    2dc6:	08 f0       	brcs	.+2      	; 0x2dca <__divdi3+0x1c0>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	98 2b       	or	r25, r24
    2dcc:	01 95       	neg	r16
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	10 16       	cp	r1, r16
    2dd2:	08 f0       	brcs	.+2      	; 0x2dd6 <__divdi3+0x1cc>
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	70 2f       	mov	r23, r16
    2dd8:	79 1b       	sub	r23, r25
    2dda:	97 2f       	mov	r25, r23
    2ddc:	71 e0       	ldi	r23, 0x01	; 1
    2dde:	09 17       	cp	r16, r25
    2de0:	08 f0       	brcs	.+2      	; 0x2de4 <__divdi3+0x1da>
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	87 2b       	or	r24, r23
    2de6:	11 95       	neg	r17
    2de8:	18 1b       	sub	r17, r24
    2dea:	e9 8f       	std	Y+25, r30	; 0x19
    2dec:	4a 8f       	std	Y+26, r20	; 0x1a
    2dee:	6b 8f       	std	Y+27, r22	; 0x1b
    2df0:	5c 8f       	std	Y+28, r21	; 0x1c
    2df2:	3d 8f       	std	Y+29, r19	; 0x1d
    2df4:	2e 8f       	std	Y+30, r18	; 0x1e
    2df6:	9f 8f       	std	Y+31, r25	; 0x1f
    2df8:	18 a3       	lds	r17, 0x58
    2dfa:	79 8d       	ldd	r23, Y+25	; 0x19
    2dfc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2dfe:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2e00:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2e02:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e04:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2e06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e08:	88 a1       	lds	r24, 0x48
    2e0a:	e9 a1       	lds	r30, 0x49
    2e0c:	e9 8b       	std	Y+17, r30	; 0x11
    2e0e:	ea a1       	lds	r30, 0x4a
    2e10:	ea 8b       	std	Y+18, r30	; 0x12
    2e12:	eb a1       	lds	r30, 0x4b
    2e14:	eb 8b       	std	Y+19, r30	; 0x13
    2e16:	ec a1       	lds	r30, 0x4c
    2e18:	ec 8b       	std	Y+20, r30	; 0x14
    2e1a:	ed a1       	lds	r30, 0x4d
    2e1c:	ed 8b       	std	Y+21, r30	; 0x15
    2e1e:	ee a1       	lds	r30, 0x4e
    2e20:	ee 8b       	std	Y+22, r30	; 0x16
    2e22:	ef a1       	lds	r30, 0x4f
    2e24:	ef 8b       	std	Y+23, r30	; 0x17
    2e26:	e8 a5       	lds	r30, 0x68
    2e28:	e8 8f       	std	Y+24, r30	; 0x18
    2e2a:	79 87       	std	Y+9, r23	; 0x09
    2e2c:	6a 87       	std	Y+10, r22	; 0x0a
    2e2e:	5b 87       	std	Y+11, r21	; 0x0b
    2e30:	4c 87       	std	Y+12, r20	; 0x0c
    2e32:	3d 87       	std	Y+13, r19	; 0x0d
    2e34:	2e 87       	std	Y+14, r18	; 0x0e
    2e36:	9f 87       	std	Y+15, r25	; 0x0f
    2e38:	88 8b       	std	Y+16, r24	; 0x10
    2e3a:	89 84       	ldd	r8, Y+9	; 0x09
    2e3c:	9a 84       	ldd	r9, Y+10	; 0x0a
    2e3e:	ab 84       	ldd	r10, Y+11	; 0x0b
    2e40:	bc 84       	ldd	r11, Y+12	; 0x0c
    2e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e46:	af 85       	ldd	r26, Y+15	; 0x0f
    2e48:	b8 89       	ldd	r27, Y+16	; 0x10
    2e4a:	e9 88       	ldd	r14, Y+17	; 0x11
    2e4c:	fa 88       	ldd	r15, Y+18	; 0x12
    2e4e:	0b 89       	ldd	r16, Y+19	; 0x13
    2e50:	1c 89       	ldd	r17, Y+20	; 0x14
    2e52:	ed aa       	sts	0x9d, r30
    2e54:	fe aa       	sts	0x9e, r31
    2e56:	0f ab       	sts	0x5f, r16
    2e58:	18 af       	sts	0x78, r17
    2e5a:	cd 88       	ldd	r12, Y+21	; 0x15
    2e5c:	de 88       	ldd	r13, Y+22	; 0x16
    2e5e:	ef 88       	ldd	r14, Y+23	; 0x17
    2e60:	f8 8c       	ldd	r15, Y+24	; 0x18
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	a1 05       	cpc	r26, r1
    2e66:	b1 05       	cpc	r27, r1
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <__divdi3+0x262>
    2e6a:	bd c3       	rjmp	.+1914   	; 0x35e6 <__divdi3+0x9dc>
    2e6c:	c8 14       	cp	r12, r8
    2e6e:	d9 04       	cpc	r13, r9
    2e70:	ea 04       	cpc	r14, r10
    2e72:	fb 04       	cpc	r15, r11
    2e74:	08 f0       	brcs	.+2      	; 0x2e78 <__divdi3+0x26e>
    2e76:	4d c1       	rjmp	.+666    	; 0x3112 <__divdi3+0x508>
    2e78:	00 e0       	ldi	r16, 0x00	; 0
    2e7a:	80 16       	cp	r8, r16
    2e7c:	00 e0       	ldi	r16, 0x00	; 0
    2e7e:	90 06       	cpc	r9, r16
    2e80:	01 e0       	ldi	r16, 0x01	; 1
    2e82:	a0 06       	cpc	r10, r16
    2e84:	00 e0       	ldi	r16, 0x00	; 0
    2e86:	b0 06       	cpc	r11, r16
    2e88:	58 f4       	brcc	.+22     	; 0x2ea0 <__divdi3+0x296>
    2e8a:	1f ef       	ldi	r17, 0xFF	; 255
    2e8c:	81 16       	cp	r8, r17
    2e8e:	91 04       	cpc	r9, r1
    2e90:	a1 04       	cpc	r10, r1
    2e92:	b1 04       	cpc	r11, r1
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <__divdi3+0x28e>
    2e96:	90 f4       	brcc	.+36     	; 0x2ebc <__divdi3+0x2b2>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	17 c0       	rjmp	.+46     	; 0x2ece <__divdi3+0x2c4>
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	82 16       	cp	r8, r18
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	92 06       	cpc	r9, r18
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	a2 06       	cpc	r10, r18
    2eac:	21 e0       	ldi	r18, 0x01	; 1
    2eae:	b2 06       	cpc	r11, r18
    2eb0:	50 f4       	brcc	.+20     	; 0x2ec6 <__divdi3+0x2bc>
    2eb2:	80 e1       	ldi	r24, 0x10	; 16
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	a0 e0       	ldi	r26, 0x00	; 0
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	09 c0       	rjmp	.+18     	; 0x2ece <__divdi3+0x2c4>
    2ebc:	88 e0       	ldi	r24, 0x08	; 8
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	a0 e0       	ldi	r26, 0x00	; 0
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	04 c0       	rjmp	.+8      	; 0x2ece <__divdi3+0x2c4>
    2ec6:	88 e1       	ldi	r24, 0x18	; 24
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a0 e0       	ldi	r26, 0x00	; 0
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	b5 01       	movw	r22, r10
    2ed0:	a4 01       	movw	r20, r8
    2ed2:	08 2e       	mov	r0, r24
    2ed4:	04 c0       	rjmp	.+8      	; 0x2ede <__divdi3+0x2d4>
    2ed6:	76 95       	lsr	r23
    2ed8:	67 95       	ror	r22
    2eda:	57 95       	ror	r21
    2edc:	47 95       	ror	r20
    2ede:	0a 94       	dec	r0
    2ee0:	d2 f7       	brpl	.-12     	; 0x2ed6 <__divdi3+0x2cc>
    2ee2:	fa 01       	movw	r30, r20
    2ee4:	e0 50       	subi	r30, 0x00	; 0
    2ee6:	f0 4e       	sbci	r31, 0xE0	; 224
    2ee8:	20 81       	ld	r18, Z
    2eea:	40 e2       	ldi	r20, 0x20	; 32
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	48 1b       	sub	r20, r24
    2ef4:	59 0b       	sbc	r21, r25
    2ef6:	6a 0b       	sbc	r22, r26
    2ef8:	7b 0b       	sbc	r23, r27
    2efa:	42 1b       	sub	r20, r18
    2efc:	51 09       	sbc	r21, r1
    2efe:	61 09       	sbc	r22, r1
    2f00:	71 09       	sbc	r23, r1
    2f02:	41 15       	cp	r20, r1
    2f04:	51 05       	cpc	r21, r1
    2f06:	61 05       	cpc	r22, r1
    2f08:	71 05       	cpc	r23, r1
    2f0a:	a1 f1       	breq	.+104    	; 0x2f74 <__divdi3+0x36a>
    2f0c:	04 2e       	mov	r0, r20
    2f0e:	04 c0       	rjmp	.+8      	; 0x2f18 <__divdi3+0x30e>
    2f10:	88 0c       	add	r8, r8
    2f12:	99 1c       	adc	r9, r9
    2f14:	aa 1c       	adc	r10, r10
    2f16:	bb 1c       	adc	r11, r11
    2f18:	0a 94       	dec	r0
    2f1a:	d2 f7       	brpl	.-12     	; 0x2f10 <__divdi3+0x306>
    2f1c:	97 01       	movw	r18, r14
    2f1e:	86 01       	movw	r16, r12
    2f20:	04 2e       	mov	r0, r20
    2f22:	04 c0       	rjmp	.+8      	; 0x2f2c <__divdi3+0x322>
    2f24:	00 0f       	add	r16, r16
    2f26:	11 1f       	adc	r17, r17
    2f28:	22 1f       	adc	r18, r18
    2f2a:	33 1f       	adc	r19, r19
    2f2c:	0a 94       	dec	r0
    2f2e:	d2 f7       	brpl	.-12     	; 0x2f24 <__divdi3+0x31a>
    2f30:	80 e2       	ldi	r24, 0x20	; 32
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	84 1b       	sub	r24, r20
    2f36:	95 0b       	sbc	r25, r21
    2f38:	cd a8       	sts	0x8d, r28
    2f3a:	de a8       	sts	0x8e, r29
    2f3c:	ef a8       	sts	0x8f, r30
    2f3e:	f8 ac       	sts	0xa8, r31
    2f40:	04 c0       	rjmp	.+8      	; 0x2f4a <__divdi3+0x340>
    2f42:	f6 94       	lsr	r15
    2f44:	e7 94       	ror	r14
    2f46:	d7 94       	ror	r13
    2f48:	c7 94       	ror	r12
    2f4a:	8a 95       	dec	r24
    2f4c:	d2 f7       	brpl	.-12     	; 0x2f42 <__divdi3+0x338>
    2f4e:	c0 2a       	or	r12, r16
    2f50:	d1 2a       	or	r13, r17
    2f52:	e2 2a       	or	r14, r18
    2f54:	f3 2a       	or	r15, r19
    2f56:	0d a9       	sts	0x4d, r16
    2f58:	1e a9       	sts	0x4e, r17
    2f5a:	2f a9       	sts	0x4f, r18
    2f5c:	38 ad       	sts	0x68, r19
    2f5e:	04 c0       	rjmp	.+8      	; 0x2f68 <__divdi3+0x35e>
    2f60:	00 0f       	add	r16, r16
    2f62:	11 1f       	adc	r17, r17
    2f64:	22 1f       	adc	r18, r18
    2f66:	33 1f       	adc	r19, r19
    2f68:	4a 95       	dec	r20
    2f6a:	d2 f7       	brpl	.-12     	; 0x2f60 <__divdi3+0x356>
    2f6c:	0d ab       	sts	0x5d, r16
    2f6e:	1e ab       	sts	0x5e, r17
    2f70:	2f ab       	sts	0x5f, r18
    2f72:	38 af       	sts	0x78, r19
    2f74:	25 01       	movw	r4, r10
    2f76:	66 24       	eor	r6, r6
    2f78:	77 24       	eor	r7, r7
    2f7a:	95 01       	movw	r18, r10
    2f7c:	84 01       	movw	r16, r8
    2f7e:	20 70       	andi	r18, 0x00	; 0
    2f80:	30 70       	andi	r19, 0x00	; 0
    2f82:	09 ab       	sts	0x59, r16
    2f84:	1a ab       	sts	0x5a, r17
    2f86:	2b ab       	sts	0x5b, r18
    2f88:	3c ab       	sts	0x5c, r19
    2f8a:	c7 01       	movw	r24, r14
    2f8c:	b6 01       	movw	r22, r12
    2f8e:	a3 01       	movw	r20, r6
    2f90:	92 01       	movw	r18, r4
    2f92:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    2f96:	2d a7       	lds	r18, 0x7d
    2f98:	3e a7       	lds	r19, 0x7e
    2f9a:	4f a7       	lds	r20, 0x7f
    2f9c:	58 ab       	sts	0x58, r21
    2f9e:	69 a7       	lds	r22, 0x79
    2fa0:	7a a7       	lds	r23, 0x7a
    2fa2:	8b a7       	lds	r24, 0x7b
    2fa4:	9c a7       	lds	r25, 0x7c
    2fa6:	c7 01       	movw	r24, r14
    2fa8:	b6 01       	movw	r22, r12
    2faa:	a3 01       	movw	r20, r6
    2fac:	92 01       	movw	r18, r4
    2fae:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    2fb2:	ca 01       	movw	r24, r20
    2fb4:	b9 01       	movw	r22, r18
    2fb6:	29 a9       	sts	0x49, r18
    2fb8:	3a a9       	sts	0x4a, r19
    2fba:	4b a9       	sts	0x4b, r20
    2fbc:	5c a9       	sts	0x4c, r21
    2fbe:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    2fc2:	ab 01       	movw	r20, r22
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	09 a5       	lds	r16, 0x69
    2fc8:	1a a5       	lds	r17, 0x6a
    2fca:	2b a5       	lds	r18, 0x6b
    2fcc:	3c a5       	lds	r19, 0x6c
    2fce:	78 01       	movw	r14, r16
    2fd0:	dd 24       	eor	r13, r13
    2fd2:	cc 24       	eor	r12, r12
    2fd4:	0d a9       	sts	0x4d, r16
    2fd6:	1e a9       	sts	0x4e, r17
    2fd8:	2f a9       	sts	0x4f, r18
    2fda:	38 ad       	sts	0x68, r19
    2fdc:	c9 01       	movw	r24, r18
    2fde:	aa 27       	eor	r26, r26
    2fe0:	bb 27       	eor	r27, r27
    2fe2:	c8 2a       	or	r12, r24
    2fe4:	d9 2a       	or	r13, r25
    2fe6:	ea 2a       	or	r14, r26
    2fe8:	fb 2a       	or	r15, r27
    2fea:	0d a5       	lds	r16, 0x6d
    2fec:	1e a5       	lds	r17, 0x6e
    2fee:	2f a5       	lds	r18, 0x6f
    2ff0:	38 a9       	sts	0x48, r19
    2ff2:	c4 16       	cp	r12, r20
    2ff4:	d5 06       	cpc	r13, r21
    2ff6:	e6 06       	cpc	r14, r22
    2ff8:	f7 06       	cpc	r15, r23
    2ffa:	38 f5       	brcc	.+78     	; 0x304a <__divdi3+0x440>
    2ffc:	01 50       	subi	r16, 0x01	; 1
    2ffe:	10 40       	sbci	r17, 0x00	; 0
    3000:	20 40       	sbci	r18, 0x00	; 0
    3002:	30 40       	sbci	r19, 0x00	; 0
    3004:	09 a7       	lds	r16, 0x79
    3006:	1a a7       	lds	r17, 0x7a
    3008:	2b a7       	lds	r18, 0x7b
    300a:	3c a7       	lds	r19, 0x7c
    300c:	c8 0c       	add	r12, r8
    300e:	d9 1c       	adc	r13, r9
    3010:	ea 1c       	adc	r14, r10
    3012:	fb 1c       	adc	r15, r11
    3014:	c8 14       	cp	r12, r8
    3016:	d9 04       	cpc	r13, r9
    3018:	ea 04       	cpc	r14, r10
    301a:	fb 04       	cpc	r15, r11
    301c:	d0 f0       	brcs	.+52     	; 0x3052 <__divdi3+0x448>
    301e:	c4 16       	cp	r12, r20
    3020:	d5 06       	cpc	r13, r21
    3022:	e6 06       	cpc	r14, r22
    3024:	f7 06       	cpc	r15, r23
    3026:	a8 f4       	brcc	.+42     	; 0x3052 <__divdi3+0x448>
    3028:	0d a5       	lds	r16, 0x6d
    302a:	1e a5       	lds	r17, 0x6e
    302c:	2f a5       	lds	r18, 0x6f
    302e:	38 a9       	sts	0x48, r19
    3030:	02 50       	subi	r16, 0x02	; 2
    3032:	10 40       	sbci	r17, 0x00	; 0
    3034:	20 40       	sbci	r18, 0x00	; 0
    3036:	30 40       	sbci	r19, 0x00	; 0
    3038:	09 a7       	lds	r16, 0x79
    303a:	1a a7       	lds	r17, 0x7a
    303c:	2b a7       	lds	r18, 0x7b
    303e:	3c a7       	lds	r19, 0x7c
    3040:	c8 0c       	add	r12, r8
    3042:	d9 1c       	adc	r13, r9
    3044:	ea 1c       	adc	r14, r10
    3046:	fb 1c       	adc	r15, r11
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <__divdi3+0x448>
    304a:	09 a7       	lds	r16, 0x79
    304c:	1a a7       	lds	r17, 0x7a
    304e:	2b a7       	lds	r18, 0x7b
    3050:	3c a7       	lds	r19, 0x7c
    3052:	c4 1a       	sub	r12, r20
    3054:	d5 0a       	sbc	r13, r21
    3056:	e6 0a       	sbc	r14, r22
    3058:	f7 0a       	sbc	r15, r23
    305a:	c7 01       	movw	r24, r14
    305c:	b6 01       	movw	r22, r12
    305e:	a3 01       	movw	r20, r6
    3060:	92 01       	movw	r18, r4
    3062:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    3066:	2d a7       	lds	r18, 0x7d
    3068:	3e a7       	lds	r19, 0x7e
    306a:	4f a7       	lds	r20, 0x7f
    306c:	58 ab       	sts	0x58, r21
    306e:	69 af       	sts	0x79, r22
    3070:	7a af       	sts	0x7a, r23
    3072:	8b af       	sts	0x7b, r24
    3074:	9c af       	sts	0x7c, r25
    3076:	c7 01       	movw	r24, r14
    3078:	b6 01       	movw	r22, r12
    307a:	a3 01       	movw	r20, r6
    307c:	92 01       	movw	r18, r4
    307e:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    3082:	ca 01       	movw	r24, r20
    3084:	b9 01       	movw	r22, r18
    3086:	29 a9       	sts	0x49, r18
    3088:	3a a9       	sts	0x4a, r19
    308a:	4b a9       	sts	0x4b, r20
    308c:	5c a9       	sts	0x4c, r21
    308e:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    3092:	6b 01       	movw	r12, r22
    3094:	7c 01       	movw	r14, r24
    3096:	49 ad       	sts	0x69, r20
    3098:	5a ad       	sts	0x6a, r21
    309a:	6b ad       	sts	0x6b, r22
    309c:	7c ad       	sts	0x6c, r23
    309e:	9a 01       	movw	r18, r20
    30a0:	11 27       	eor	r17, r17
    30a2:	00 27       	eor	r16, r16
    30a4:	4d a9       	sts	0x4d, r20
    30a6:	5e a9       	sts	0x4e, r21
    30a8:	6f a9       	sts	0x4f, r22
    30aa:	78 ad       	sts	0x68, r23
    30ac:	60 70       	andi	r22, 0x00	; 0
    30ae:	70 70       	andi	r23, 0x00	; 0
    30b0:	04 2b       	or	r16, r20
    30b2:	15 2b       	or	r17, r21
    30b4:	26 2b       	or	r18, r22
    30b6:	37 2b       	or	r19, r23
    30b8:	8d a5       	lds	r24, 0x6d
    30ba:	9e a5       	lds	r25, 0x6e
    30bc:	af a5       	lds	r26, 0x6f
    30be:	b8 a9       	sts	0x48, r27
    30c0:	0c 15       	cp	r16, r12
    30c2:	1d 05       	cpc	r17, r13
    30c4:	2e 05       	cpc	r18, r14
    30c6:	3f 05       	cpc	r19, r15
    30c8:	c0 f4       	brcc	.+48     	; 0x30fa <__divdi3+0x4f0>
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	a1 09       	sbc	r26, r1
    30ce:	b1 09       	sbc	r27, r1
    30d0:	08 0d       	add	r16, r8
    30d2:	19 1d       	adc	r17, r9
    30d4:	2a 1d       	adc	r18, r10
    30d6:	3b 1d       	adc	r19, r11
    30d8:	08 15       	cp	r16, r8
    30da:	19 05       	cpc	r17, r9
    30dc:	2a 05       	cpc	r18, r10
    30de:	3b 05       	cpc	r19, r11
    30e0:	60 f0       	brcs	.+24     	; 0x30fa <__divdi3+0x4f0>
    30e2:	0c 15       	cp	r16, r12
    30e4:	1d 05       	cpc	r17, r13
    30e6:	2e 05       	cpc	r18, r14
    30e8:	3f 05       	cpc	r19, r15
    30ea:	38 f4       	brcc	.+14     	; 0x30fa <__divdi3+0x4f0>
    30ec:	8d a5       	lds	r24, 0x6d
    30ee:	9e a5       	lds	r25, 0x6e
    30f0:	af a5       	lds	r26, 0x6f
    30f2:	b8 a9       	sts	0x48, r27
    30f4:	02 97       	sbiw	r24, 0x02	; 2
    30f6:	a1 09       	sbc	r26, r1
    30f8:	b1 09       	sbc	r27, r1
    30fa:	09 a5       	lds	r16, 0x69
    30fc:	1a a5       	lds	r17, 0x6a
    30fe:	2b a5       	lds	r18, 0x6b
    3100:	3c a5       	lds	r19, 0x6c
    3102:	78 01       	movw	r14, r16
    3104:	dd 24       	eor	r13, r13
    3106:	cc 24       	eor	r12, r12
    3108:	c8 2a       	or	r12, r24
    310a:	d9 2a       	or	r13, r25
    310c:	ea 2a       	or	r14, r26
    310e:	fb 2a       	or	r15, r27
    3110:	b7 c4       	rjmp	.+2414   	; 0x3a80 <__divdi3+0xe76>
    3112:	81 14       	cp	r8, r1
    3114:	91 04       	cpc	r9, r1
    3116:	a1 04       	cpc	r10, r1
    3118:	b1 04       	cpc	r11, r1
    311a:	51 f4       	brne	.+20     	; 0x3130 <__divdi3+0x526>
    311c:	61 e0       	ldi	r22, 0x01	; 1
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	a5 01       	movw	r20, r10
    3126:	94 01       	movw	r18, r8
    3128:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    312c:	49 01       	movw	r8, r18
    312e:	5a 01       	movw	r10, r20
    3130:	10 e0       	ldi	r17, 0x00	; 0
    3132:	81 16       	cp	r8, r17
    3134:	10 e0       	ldi	r17, 0x00	; 0
    3136:	91 06       	cpc	r9, r17
    3138:	11 e0       	ldi	r17, 0x01	; 1
    313a:	a1 06       	cpc	r10, r17
    313c:	10 e0       	ldi	r17, 0x00	; 0
    313e:	b1 06       	cpc	r11, r17
    3140:	58 f4       	brcc	.+22     	; 0x3158 <__divdi3+0x54e>
    3142:	2f ef       	ldi	r18, 0xFF	; 255
    3144:	82 16       	cp	r8, r18
    3146:	91 04       	cpc	r9, r1
    3148:	a1 04       	cpc	r10, r1
    314a:	b1 04       	cpc	r11, r1
    314c:	09 f0       	breq	.+2      	; 0x3150 <__divdi3+0x546>
    314e:	90 f4       	brcc	.+36     	; 0x3174 <__divdi3+0x56a>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	dc 01       	movw	r26, r24
    3156:	17 c0       	rjmp	.+46     	; 0x3186 <__divdi3+0x57c>
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	83 16       	cp	r8, r19
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	93 06       	cpc	r9, r19
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	a3 06       	cpc	r10, r19
    3164:	31 e0       	ldi	r19, 0x01	; 1
    3166:	b3 06       	cpc	r11, r19
    3168:	50 f4       	brcc	.+20     	; 0x317e <__divdi3+0x574>
    316a:	80 e1       	ldi	r24, 0x10	; 16
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	a0 e0       	ldi	r26, 0x00	; 0
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	09 c0       	rjmp	.+18     	; 0x3186 <__divdi3+0x57c>
    3174:	88 e0       	ldi	r24, 0x08	; 8
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	a0 e0       	ldi	r26, 0x00	; 0
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	04 c0       	rjmp	.+8      	; 0x3186 <__divdi3+0x57c>
    317e:	88 e1       	ldi	r24, 0x18	; 24
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	a0 e0       	ldi	r26, 0x00	; 0
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	b5 01       	movw	r22, r10
    3188:	a4 01       	movw	r20, r8
    318a:	08 2e       	mov	r0, r24
    318c:	04 c0       	rjmp	.+8      	; 0x3196 <__divdi3+0x58c>
    318e:	76 95       	lsr	r23
    3190:	67 95       	ror	r22
    3192:	57 95       	ror	r21
    3194:	47 95       	ror	r20
    3196:	0a 94       	dec	r0
    3198:	d2 f7       	brpl	.-12     	; 0x318e <__divdi3+0x584>
    319a:	fa 01       	movw	r30, r20
    319c:	e0 50       	subi	r30, 0x00	; 0
    319e:	f0 4e       	sbci	r31, 0xE0	; 224
    31a0:	20 81       	ld	r18, Z
    31a2:	ac 01       	movw	r20, r24
    31a4:	bd 01       	movw	r22, r26
    31a6:	42 0f       	add	r20, r18
    31a8:	51 1d       	adc	r21, r1
    31aa:	61 1d       	adc	r22, r1
    31ac:	71 1d       	adc	r23, r1
    31ae:	80 e2       	ldi	r24, 0x20	; 32
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	a0 e0       	ldi	r26, 0x00	; 0
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	84 1b       	sub	r24, r20
    31b8:	95 0b       	sbc	r25, r21
    31ba:	a6 0b       	sbc	r26, r22
    31bc:	b7 0b       	sbc	r27, r23
    31be:	51 f4       	brne	.+20     	; 0x31d4 <__divdi3+0x5ca>
    31c0:	c8 18       	sub	r12, r8
    31c2:	d9 08       	sbc	r13, r9
    31c4:	ea 08       	sbc	r14, r10
    31c6:	fb 08       	sbc	r15, r11
    31c8:	f1 e0       	ldi	r31, 0x01	; 1
    31ca:	4f 2e       	mov	r4, r31
    31cc:	51 2c       	mov	r5, r1
    31ce:	61 2c       	mov	r6, r1
    31d0:	71 2c       	mov	r7, r1
    31d2:	28 c1       	rjmp	.+592    	; 0x3424 <__divdi3+0x81a>
    31d4:	08 2e       	mov	r0, r24
    31d6:	04 c0       	rjmp	.+8      	; 0x31e0 <__divdi3+0x5d6>
    31d8:	88 0c       	add	r8, r8
    31da:	99 1c       	adc	r9, r9
    31dc:	aa 1c       	adc	r10, r10
    31de:	bb 1c       	adc	r11, r11
    31e0:	0a 94       	dec	r0
    31e2:	d2 f7       	brpl	.-12     	; 0x31d8 <__divdi3+0x5ce>
    31e4:	97 01       	movw	r18, r14
    31e6:	86 01       	movw	r16, r12
    31e8:	04 2e       	mov	r0, r20
    31ea:	04 c0       	rjmp	.+8      	; 0x31f4 <__divdi3+0x5ea>
    31ec:	36 95       	lsr	r19
    31ee:	27 95       	ror	r18
    31f0:	17 95       	ror	r17
    31f2:	07 95       	ror	r16
    31f4:	0a 94       	dec	r0
    31f6:	d2 f7       	brpl	.-12     	; 0x31ec <__divdi3+0x5e2>
    31f8:	09 ab       	sts	0x59, r16
    31fa:	1a ab       	sts	0x5a, r17
    31fc:	2b ab       	sts	0x5b, r18
    31fe:	3c ab       	sts	0x5c, r19
    3200:	97 01       	movw	r18, r14
    3202:	86 01       	movw	r16, r12
    3204:	08 2e       	mov	r0, r24
    3206:	04 c0       	rjmp	.+8      	; 0x3210 <__divdi3+0x606>
    3208:	00 0f       	add	r16, r16
    320a:	11 1f       	adc	r17, r17
    320c:	22 1f       	adc	r18, r18
    320e:	33 1f       	adc	r19, r19
    3210:	0a 94       	dec	r0
    3212:	d2 f7       	brpl	.-12     	; 0x3208 <__divdi3+0x5fe>
    3214:	0d a7       	lds	r16, 0x7d
    3216:	1e a7       	lds	r17, 0x7e
    3218:	2f a7       	lds	r18, 0x7f
    321a:	38 ab       	sts	0x58, r19
    321c:	ed a8       	sts	0x8d, r30
    321e:	fe a8       	sts	0x8e, r31
    3220:	0f a9       	sts	0x4f, r16
    3222:	18 ad       	sts	0x68, r17
    3224:	04 c0       	rjmp	.+8      	; 0x322e <__divdi3+0x624>
    3226:	16 95       	lsr	r17
    3228:	07 95       	ror	r16
    322a:	f7 94       	ror	r15
    322c:	e7 94       	ror	r14
    322e:	4a 95       	dec	r20
    3230:	d2 f7       	brpl	.-12     	; 0x3226 <__divdi3+0x61c>
    3232:	b8 01       	movw	r22, r16
    3234:	a7 01       	movw	r20, r14
    3236:	0d a5       	lds	r16, 0x6d
    3238:	1e a5       	lds	r17, 0x6e
    323a:	2f a5       	lds	r18, 0x6f
    323c:	38 a9       	sts	0x48, r19
    323e:	04 2b       	or	r16, r20
    3240:	15 2b       	or	r17, r21
    3242:	26 2b       	or	r18, r22
    3244:	37 2b       	or	r19, r23
    3246:	0d a7       	lds	r16, 0x7d
    3248:	1e a7       	lds	r17, 0x7e
    324a:	2f a7       	lds	r18, 0x7f
    324c:	38 ab       	sts	0x58, r19
    324e:	ed a8       	sts	0x8d, r30
    3250:	fe a8       	sts	0x8e, r31
    3252:	0f a9       	sts	0x4f, r16
    3254:	18 ad       	sts	0x68, r17
    3256:	04 c0       	rjmp	.+8      	; 0x3260 <__divdi3+0x656>
    3258:	ee 0c       	add	r14, r14
    325a:	ff 1c       	adc	r15, r15
    325c:	00 1f       	adc	r16, r16
    325e:	11 1f       	adc	r17, r17
    3260:	8a 95       	dec	r24
    3262:	d2 f7       	brpl	.-12     	; 0x3258 <__divdi3+0x64e>
    3264:	ed aa       	sts	0x9d, r30
    3266:	fe aa       	sts	0x9e, r31
    3268:	0f ab       	sts	0x5f, r16
    326a:	18 af       	sts	0x78, r17
    326c:	25 01       	movw	r4, r10
    326e:	66 24       	eor	r6, r6
    3270:	77 24       	eor	r7, r7
    3272:	95 01       	movw	r18, r10
    3274:	84 01       	movw	r16, r8
    3276:	20 70       	andi	r18, 0x00	; 0
    3278:	30 70       	andi	r19, 0x00	; 0
    327a:	09 af       	sts	0x79, r16
    327c:	1a af       	sts	0x7a, r17
    327e:	2b af       	sts	0x7b, r18
    3280:	3c af       	sts	0x7c, r19
    3282:	69 a9       	sts	0x49, r22
    3284:	7a a9       	sts	0x4a, r23
    3286:	8b a9       	sts	0x4b, r24
    3288:	9c a9       	sts	0x4c, r25
    328a:	a3 01       	movw	r20, r6
    328c:	92 01       	movw	r18, r4
    328e:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    3292:	29 a7       	lds	r18, 0x79
    3294:	3a a7       	lds	r19, 0x7a
    3296:	4b a7       	lds	r20, 0x7b
    3298:	5c a7       	lds	r21, 0x7c
    329a:	6b 01       	movw	r12, r22
    329c:	7c 01       	movw	r14, r24
    329e:	69 a9       	sts	0x49, r22
    32a0:	7a a9       	sts	0x4a, r23
    32a2:	8b a9       	sts	0x4b, r24
    32a4:	9c a9       	sts	0x4c, r25
    32a6:	a3 01       	movw	r20, r6
    32a8:	92 01       	movw	r18, r4
    32aa:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    32ae:	ca 01       	movw	r24, r20
    32b0:	b9 01       	movw	r22, r18
    32b2:	29 ad       	sts	0x69, r18
    32b4:	3a ad       	sts	0x6a, r19
    32b6:	4b ad       	sts	0x6b, r20
    32b8:	5c ad       	sts	0x6c, r21
    32ba:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    32be:	ab 01       	movw	r20, r22
    32c0:	bc 01       	movw	r22, r24
    32c2:	76 01       	movw	r14, r12
    32c4:	dd 24       	eor	r13, r13
    32c6:	cc 24       	eor	r12, r12
    32c8:	0d a5       	lds	r16, 0x6d
    32ca:	1e a5       	lds	r17, 0x6e
    32cc:	2f a5       	lds	r18, 0x6f
    32ce:	38 a9       	sts	0x48, r19
    32d0:	c9 01       	movw	r24, r18
    32d2:	aa 27       	eor	r26, r26
    32d4:	bb 27       	eor	r27, r27
    32d6:	c8 2a       	or	r12, r24
    32d8:	d9 2a       	or	r13, r25
    32da:	ea 2a       	or	r14, r26
    32dc:	fb 2a       	or	r15, r27
    32de:	09 a5       	lds	r16, 0x69
    32e0:	1a a5       	lds	r17, 0x6a
    32e2:	2b a5       	lds	r18, 0x6b
    32e4:	3c a5       	lds	r19, 0x6c
    32e6:	c4 16       	cp	r12, r20
    32e8:	d5 06       	cpc	r13, r21
    32ea:	e6 06       	cpc	r14, r22
    32ec:	f7 06       	cpc	r15, r23
    32ee:	38 f5       	brcc	.+78     	; 0x333e <__divdi3+0x734>
    32f0:	01 50       	subi	r16, 0x01	; 1
    32f2:	10 40       	sbci	r17, 0x00	; 0
    32f4:	20 40       	sbci	r18, 0x00	; 0
    32f6:	30 40       	sbci	r19, 0x00	; 0
    32f8:	09 ab       	sts	0x59, r16
    32fa:	1a ab       	sts	0x5a, r17
    32fc:	2b ab       	sts	0x5b, r18
    32fe:	3c ab       	sts	0x5c, r19
    3300:	c8 0c       	add	r12, r8
    3302:	d9 1c       	adc	r13, r9
    3304:	ea 1c       	adc	r14, r10
    3306:	fb 1c       	adc	r15, r11
    3308:	c8 14       	cp	r12, r8
    330a:	d9 04       	cpc	r13, r9
    330c:	ea 04       	cpc	r14, r10
    330e:	fb 04       	cpc	r15, r11
    3310:	d0 f0       	brcs	.+52     	; 0x3346 <__divdi3+0x73c>
    3312:	c4 16       	cp	r12, r20
    3314:	d5 06       	cpc	r13, r21
    3316:	e6 06       	cpc	r14, r22
    3318:	f7 06       	cpc	r15, r23
    331a:	a8 f4       	brcc	.+42     	; 0x3346 <__divdi3+0x73c>
    331c:	09 a5       	lds	r16, 0x69
    331e:	1a a5       	lds	r17, 0x6a
    3320:	2b a5       	lds	r18, 0x6b
    3322:	3c a5       	lds	r19, 0x6c
    3324:	02 50       	subi	r16, 0x02	; 2
    3326:	10 40       	sbci	r17, 0x00	; 0
    3328:	20 40       	sbci	r18, 0x00	; 0
    332a:	30 40       	sbci	r19, 0x00	; 0
    332c:	09 ab       	sts	0x59, r16
    332e:	1a ab       	sts	0x5a, r17
    3330:	2b ab       	sts	0x5b, r18
    3332:	3c ab       	sts	0x5c, r19
    3334:	c8 0c       	add	r12, r8
    3336:	d9 1c       	adc	r13, r9
    3338:	ea 1c       	adc	r14, r10
    333a:	fb 1c       	adc	r15, r11
    333c:	04 c0       	rjmp	.+8      	; 0x3346 <__divdi3+0x73c>
    333e:	09 ab       	sts	0x59, r16
    3340:	1a ab       	sts	0x5a, r17
    3342:	2b ab       	sts	0x5b, r18
    3344:	3c ab       	sts	0x5c, r19
    3346:	c4 1a       	sub	r12, r20
    3348:	d5 0a       	sbc	r13, r21
    334a:	e6 0a       	sbc	r14, r22
    334c:	f7 0a       	sbc	r15, r23
    334e:	c7 01       	movw	r24, r14
    3350:	b6 01       	movw	r22, r12
    3352:	a3 01       	movw	r20, r6
    3354:	92 01       	movw	r18, r4
    3356:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    335a:	29 a7       	lds	r18, 0x79
    335c:	3a a7       	lds	r19, 0x7a
    335e:	4b a7       	lds	r20, 0x7b
    3360:	5c a7       	lds	r21, 0x7c
    3362:	21 96       	adiw	r28, 0x01	; 1
    3364:	6c af       	sts	0x7c, r22
    3366:	7d af       	sts	0x7d, r23
    3368:	8e af       	sts	0x7e, r24
    336a:	9f af       	sts	0x7f, r25
    336c:	21 97       	sbiw	r28, 0x01	; 1
    336e:	c7 01       	movw	r24, r14
    3370:	b6 01       	movw	r22, r12
    3372:	a3 01       	movw	r20, r6
    3374:	92 01       	movw	r18, r4
    3376:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    337a:	ca 01       	movw	r24, r20
    337c:	b9 01       	movw	r22, r18
    337e:	29 ad       	sts	0x69, r18
    3380:	3a ad       	sts	0x6a, r19
    3382:	4b ad       	sts	0x6b, r20
    3384:	5c ad       	sts	0x6c, r21
    3386:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    338a:	8b 01       	movw	r16, r22
    338c:	9c 01       	movw	r18, r24
    338e:	21 96       	adiw	r28, 0x01	; 1
    3390:	4c ad       	sts	0x6c, r20
    3392:	5d ad       	sts	0x6d, r21
    3394:	6e ad       	sts	0x6e, r22
    3396:	7f ad       	sts	0x6f, r23
    3398:	21 97       	sbiw	r28, 0x01	; 1
    339a:	da 01       	movw	r26, r20
    339c:	99 27       	eor	r25, r25
    339e:	88 27       	eor	r24, r24
    33a0:	4d a5       	lds	r20, 0x6d
    33a2:	5e a5       	lds	r21, 0x6e
    33a4:	6f a5       	lds	r22, 0x6f
    33a6:	78 a9       	sts	0x48, r23
    33a8:	60 70       	andi	r22, 0x00	; 0
    33aa:	70 70       	andi	r23, 0x00	; 0
    33ac:	84 2b       	or	r24, r20
    33ae:	95 2b       	or	r25, r21
    33b0:	a6 2b       	or	r26, r22
    33b2:	b7 2b       	or	r27, r23
    33b4:	49 a5       	lds	r20, 0x69
    33b6:	5a a5       	lds	r21, 0x6a
    33b8:	6b a5       	lds	r22, 0x6b
    33ba:	7c a5       	lds	r23, 0x6c
    33bc:	80 17       	cp	r24, r16
    33be:	91 07       	cpc	r25, r17
    33c0:	a2 07       	cpc	r26, r18
    33c2:	b3 07       	cpc	r27, r19
    33c4:	f0 f4       	brcc	.+60     	; 0x3402 <__divdi3+0x7f8>
    33c6:	41 50       	subi	r20, 0x01	; 1
    33c8:	50 40       	sbci	r21, 0x00	; 0
    33ca:	60 40       	sbci	r22, 0x00	; 0
    33cc:	70 40       	sbci	r23, 0x00	; 0
    33ce:	88 0d       	add	r24, r8
    33d0:	99 1d       	adc	r25, r9
    33d2:	aa 1d       	adc	r26, r10
    33d4:	bb 1d       	adc	r27, r11
    33d6:	88 15       	cp	r24, r8
    33d8:	99 05       	cpc	r25, r9
    33da:	aa 05       	cpc	r26, r10
    33dc:	bb 05       	cpc	r27, r11
    33de:	88 f0       	brcs	.+34     	; 0x3402 <__divdi3+0x7f8>
    33e0:	80 17       	cp	r24, r16
    33e2:	91 07       	cpc	r25, r17
    33e4:	a2 07       	cpc	r26, r18
    33e6:	b3 07       	cpc	r27, r19
    33e8:	60 f4       	brcc	.+24     	; 0x3402 <__divdi3+0x7f8>
    33ea:	49 a5       	lds	r20, 0x69
    33ec:	5a a5       	lds	r21, 0x6a
    33ee:	6b a5       	lds	r22, 0x6b
    33f0:	7c a5       	lds	r23, 0x6c
    33f2:	42 50       	subi	r20, 0x02	; 2
    33f4:	50 40       	sbci	r21, 0x00	; 0
    33f6:	60 40       	sbci	r22, 0x00	; 0
    33f8:	70 40       	sbci	r23, 0x00	; 0
    33fa:	88 0d       	add	r24, r8
    33fc:	99 1d       	adc	r25, r9
    33fe:	aa 1d       	adc	r26, r10
    3400:	bb 1d       	adc	r27, r11
    3402:	6c 01       	movw	r12, r24
    3404:	7d 01       	movw	r14, r26
    3406:	c0 1a       	sub	r12, r16
    3408:	d1 0a       	sbc	r13, r17
    340a:	e2 0a       	sbc	r14, r18
    340c:	f3 0a       	sbc	r15, r19
    340e:	09 a9       	sts	0x49, r16
    3410:	1a a9       	sts	0x4a, r17
    3412:	2b a9       	sts	0x4b, r18
    3414:	3c a9       	sts	0x4c, r19
    3416:	38 01       	movw	r6, r16
    3418:	55 24       	eor	r5, r5
    341a:	44 24       	eor	r4, r4
    341c:	44 2a       	or	r4, r20
    341e:	55 2a       	or	r5, r21
    3420:	66 2a       	or	r6, r22
    3422:	77 2a       	or	r7, r23
    3424:	85 01       	movw	r16, r10
    3426:	22 27       	eor	r18, r18
    3428:	33 27       	eor	r19, r19
    342a:	0d a7       	lds	r16, 0x7d
    342c:	1e a7       	lds	r17, 0x7e
    342e:	2f a7       	lds	r18, 0x7f
    3430:	38 ab       	sts	0x58, r19
    3432:	95 01       	movw	r18, r10
    3434:	84 01       	movw	r16, r8
    3436:	20 70       	andi	r18, 0x00	; 0
    3438:	30 70       	andi	r19, 0x00	; 0
    343a:	09 af       	sts	0x79, r16
    343c:	1a af       	sts	0x7a, r17
    343e:	2b af       	sts	0x7b, r18
    3440:	3c af       	sts	0x7c, r19
    3442:	c7 01       	movw	r24, r14
    3444:	b6 01       	movw	r22, r12
    3446:	2d a5       	lds	r18, 0x6d
    3448:	3e a5       	lds	r19, 0x6e
    344a:	4f a5       	lds	r20, 0x6f
    344c:	58 a9       	sts	0x48, r21
    344e:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    3452:	29 a7       	lds	r18, 0x79
    3454:	3a a7       	lds	r19, 0x7a
    3456:	4b a7       	lds	r20, 0x7b
    3458:	5c a7       	lds	r21, 0x7c
    345a:	69 ab       	sts	0x59, r22
    345c:	7a ab       	sts	0x5a, r23
    345e:	8b ab       	sts	0x5b, r24
    3460:	9c ab       	sts	0x5c, r25
    3462:	c7 01       	movw	r24, r14
    3464:	b6 01       	movw	r22, r12
    3466:	2d a5       	lds	r18, 0x6d
    3468:	3e a5       	lds	r19, 0x6e
    346a:	4f a5       	lds	r20, 0x6f
    346c:	58 a9       	sts	0x48, r21
    346e:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    3472:	ca 01       	movw	r24, r20
    3474:	b9 01       	movw	r22, r18
    3476:	29 ad       	sts	0x69, r18
    3478:	3a ad       	sts	0x6a, r19
    347a:	4b ad       	sts	0x6b, r20
    347c:	5c ad       	sts	0x6c, r21
    347e:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    3482:	ab 01       	movw	r20, r22
    3484:	bc 01       	movw	r22, r24
    3486:	09 a9       	sts	0x49, r16
    3488:	1a a9       	sts	0x4a, r17
    348a:	2b a9       	sts	0x4b, r18
    348c:	3c a9       	sts	0x4c, r19
    348e:	78 01       	movw	r14, r16
    3490:	dd 24       	eor	r13, r13
    3492:	cc 24       	eor	r12, r12
    3494:	0d a9       	sts	0x4d, r16
    3496:	1e a9       	sts	0x4e, r17
    3498:	2f a9       	sts	0x4f, r18
    349a:	38 ad       	sts	0x68, r19
    349c:	c9 01       	movw	r24, r18
    349e:	aa 27       	eor	r26, r26
    34a0:	bb 27       	eor	r27, r27
    34a2:	c8 2a       	or	r12, r24
    34a4:	d9 2a       	or	r13, r25
    34a6:	ea 2a       	or	r14, r26
    34a8:	fb 2a       	or	r15, r27
    34aa:	09 a5       	lds	r16, 0x69
    34ac:	1a a5       	lds	r17, 0x6a
    34ae:	2b a5       	lds	r18, 0x6b
    34b0:	3c a5       	lds	r19, 0x6c
    34b2:	c4 16       	cp	r12, r20
    34b4:	d5 06       	cpc	r13, r21
    34b6:	e6 06       	cpc	r14, r22
    34b8:	f7 06       	cpc	r15, r23
    34ba:	38 f5       	brcc	.+78     	; 0x350a <__divdi3+0x900>
    34bc:	01 50       	subi	r16, 0x01	; 1
    34be:	10 40       	sbci	r17, 0x00	; 0
    34c0:	20 40       	sbci	r18, 0x00	; 0
    34c2:	30 40       	sbci	r19, 0x00	; 0
    34c4:	09 ab       	sts	0x59, r16
    34c6:	1a ab       	sts	0x5a, r17
    34c8:	2b ab       	sts	0x5b, r18
    34ca:	3c ab       	sts	0x5c, r19
    34cc:	c8 0c       	add	r12, r8
    34ce:	d9 1c       	adc	r13, r9
    34d0:	ea 1c       	adc	r14, r10
    34d2:	fb 1c       	adc	r15, r11
    34d4:	c8 14       	cp	r12, r8
    34d6:	d9 04       	cpc	r13, r9
    34d8:	ea 04       	cpc	r14, r10
    34da:	fb 04       	cpc	r15, r11
    34dc:	d0 f0       	brcs	.+52     	; 0x3512 <__divdi3+0x908>
    34de:	c4 16       	cp	r12, r20
    34e0:	d5 06       	cpc	r13, r21
    34e2:	e6 06       	cpc	r14, r22
    34e4:	f7 06       	cpc	r15, r23
    34e6:	a8 f4       	brcc	.+42     	; 0x3512 <__divdi3+0x908>
    34e8:	09 a5       	lds	r16, 0x69
    34ea:	1a a5       	lds	r17, 0x6a
    34ec:	2b a5       	lds	r18, 0x6b
    34ee:	3c a5       	lds	r19, 0x6c
    34f0:	02 50       	subi	r16, 0x02	; 2
    34f2:	10 40       	sbci	r17, 0x00	; 0
    34f4:	20 40       	sbci	r18, 0x00	; 0
    34f6:	30 40       	sbci	r19, 0x00	; 0
    34f8:	09 ab       	sts	0x59, r16
    34fa:	1a ab       	sts	0x5a, r17
    34fc:	2b ab       	sts	0x5b, r18
    34fe:	3c ab       	sts	0x5c, r19
    3500:	c8 0c       	add	r12, r8
    3502:	d9 1c       	adc	r13, r9
    3504:	ea 1c       	adc	r14, r10
    3506:	fb 1c       	adc	r15, r11
    3508:	04 c0       	rjmp	.+8      	; 0x3512 <__divdi3+0x908>
    350a:	09 ab       	sts	0x59, r16
    350c:	1a ab       	sts	0x5a, r17
    350e:	2b ab       	sts	0x5b, r18
    3510:	3c ab       	sts	0x5c, r19
    3512:	c4 1a       	sub	r12, r20
    3514:	d5 0a       	sbc	r13, r21
    3516:	e6 0a       	sbc	r14, r22
    3518:	f7 0a       	sbc	r15, r23
    351a:	c7 01       	movw	r24, r14
    351c:	b6 01       	movw	r22, r12
    351e:	2d a5       	lds	r18, 0x6d
    3520:	3e a5       	lds	r19, 0x6e
    3522:	4f a5       	lds	r20, 0x6f
    3524:	58 a9       	sts	0x48, r21
    3526:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    352a:	29 a7       	lds	r18, 0x79
    352c:	3a a7       	lds	r19, 0x7a
    352e:	4b a7       	lds	r20, 0x7b
    3530:	5c a7       	lds	r21, 0x7c
    3532:	21 96       	adiw	r28, 0x01	; 1
    3534:	6c af       	sts	0x7c, r22
    3536:	7d af       	sts	0x7d, r23
    3538:	8e af       	sts	0x7e, r24
    353a:	9f af       	sts	0x7f, r25
    353c:	21 97       	sbiw	r28, 0x01	; 1
    353e:	c7 01       	movw	r24, r14
    3540:	b6 01       	movw	r22, r12
    3542:	2d a5       	lds	r18, 0x6d
    3544:	3e a5       	lds	r19, 0x6e
    3546:	4f a5       	lds	r20, 0x6f
    3548:	58 a9       	sts	0x48, r21
    354a:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    354e:	ca 01       	movw	r24, r20
    3550:	b9 01       	movw	r22, r18
    3552:	29 ad       	sts	0x69, r18
    3554:	3a ad       	sts	0x6a, r19
    3556:	4b ad       	sts	0x6b, r20
    3558:	5c ad       	sts	0x6c, r21
    355a:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    355e:	8b 01       	movw	r16, r22
    3560:	9c 01       	movw	r18, r24
    3562:	21 96       	adiw	r28, 0x01	; 1
    3564:	4c ad       	sts	0x6c, r20
    3566:	5d ad       	sts	0x6d, r21
    3568:	6e ad       	sts	0x6e, r22
    356a:	7f ad       	sts	0x6f, r23
    356c:	21 97       	sbiw	r28, 0x01	; 1
    356e:	da 01       	movw	r26, r20
    3570:	99 27       	eor	r25, r25
    3572:	88 27       	eor	r24, r24
    3574:	4d a9       	sts	0x4d, r20
    3576:	5e a9       	sts	0x4e, r21
    3578:	6f a9       	sts	0x4f, r22
    357a:	78 ad       	sts	0x68, r23
    357c:	60 70       	andi	r22, 0x00	; 0
    357e:	70 70       	andi	r23, 0x00	; 0
    3580:	84 2b       	or	r24, r20
    3582:	95 2b       	or	r25, r21
    3584:	a6 2b       	or	r26, r22
    3586:	b7 2b       	or	r27, r23
    3588:	49 a5       	lds	r20, 0x69
    358a:	5a a5       	lds	r21, 0x6a
    358c:	6b a5       	lds	r22, 0x6b
    358e:	7c a5       	lds	r23, 0x6c
    3590:	80 17       	cp	r24, r16
    3592:	91 07       	cpc	r25, r17
    3594:	a2 07       	cpc	r26, r18
    3596:	b3 07       	cpc	r27, r19
    3598:	d0 f4       	brcc	.+52     	; 0x35ce <__divdi3+0x9c4>
    359a:	41 50       	subi	r20, 0x01	; 1
    359c:	50 40       	sbci	r21, 0x00	; 0
    359e:	60 40       	sbci	r22, 0x00	; 0
    35a0:	70 40       	sbci	r23, 0x00	; 0
    35a2:	88 0d       	add	r24, r8
    35a4:	99 1d       	adc	r25, r9
    35a6:	aa 1d       	adc	r26, r10
    35a8:	bb 1d       	adc	r27, r11
    35aa:	88 15       	cp	r24, r8
    35ac:	99 05       	cpc	r25, r9
    35ae:	aa 05       	cpc	r26, r10
    35b0:	bb 05       	cpc	r27, r11
    35b2:	68 f0       	brcs	.+26     	; 0x35ce <__divdi3+0x9c4>
    35b4:	80 17       	cp	r24, r16
    35b6:	91 07       	cpc	r25, r17
    35b8:	a2 07       	cpc	r26, r18
    35ba:	b3 07       	cpc	r27, r19
    35bc:	40 f4       	brcc	.+16     	; 0x35ce <__divdi3+0x9c4>
    35be:	49 a5       	lds	r20, 0x69
    35c0:	5a a5       	lds	r21, 0x6a
    35c2:	6b a5       	lds	r22, 0x6b
    35c4:	7c a5       	lds	r23, 0x6c
    35c6:	42 50       	subi	r20, 0x02	; 2
    35c8:	50 40       	sbci	r21, 0x00	; 0
    35ca:	60 40       	sbci	r22, 0x00	; 0
    35cc:	70 40       	sbci	r23, 0x00	; 0
    35ce:	09 a9       	sts	0x49, r16
    35d0:	1a a9       	sts	0x4a, r17
    35d2:	2b a9       	sts	0x4b, r18
    35d4:	3c a9       	sts	0x4c, r19
    35d6:	78 01       	movw	r14, r16
    35d8:	dd 24       	eor	r13, r13
    35da:	cc 24       	eor	r12, r12
    35dc:	c4 2a       	or	r12, r20
    35de:	d5 2a       	or	r13, r21
    35e0:	e6 2a       	or	r14, r22
    35e2:	f7 2a       	or	r15, r23
    35e4:	50 c2       	rjmp	.+1184   	; 0x3a86 <__divdi3+0xe7c>
    35e6:	c8 16       	cp	r12, r24
    35e8:	d9 06       	cpc	r13, r25
    35ea:	ea 06       	cpc	r14, r26
    35ec:	fb 06       	cpc	r15, r27
    35ee:	08 f4       	brcc	.+2      	; 0x35f2 <__divdi3+0x9e8>
    35f0:	37 c2       	rjmp	.+1134   	; 0x3a60 <__divdi3+0xe56>
    35f2:	80 30       	cpi	r24, 0x00	; 0
    35f4:	10 e0       	ldi	r17, 0x00	; 0
    35f6:	91 07       	cpc	r25, r17
    35f8:	11 e0       	ldi	r17, 0x01	; 1
    35fa:	a1 07       	cpc	r26, r17
    35fc:	10 e0       	ldi	r17, 0x00	; 0
    35fe:	b1 07       	cpc	r27, r17
    3600:	50 f4       	brcc	.+20     	; 0x3616 <__divdi3+0xa0c>
    3602:	8f 3f       	cpi	r24, 0xFF	; 255
    3604:	91 05       	cpc	r25, r1
    3606:	a1 05       	cpc	r26, r1
    3608:	b1 05       	cpc	r27, r1
    360a:	09 f0       	breq	.+2      	; 0x360e <__divdi3+0xa04>
    360c:	88 f4       	brcc	.+34     	; 0x3630 <__divdi3+0xa26>
    360e:	00 e0       	ldi	r16, 0x00	; 0
    3610:	10 e0       	ldi	r17, 0x00	; 0
    3612:	98 01       	movw	r18, r16
    3614:	16 c0       	rjmp	.+44     	; 0x3642 <__divdi3+0xa38>
    3616:	80 30       	cpi	r24, 0x00	; 0
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	92 07       	cpc	r25, r18
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	a2 07       	cpc	r26, r18
    3620:	21 e0       	ldi	r18, 0x01	; 1
    3622:	b2 07       	cpc	r27, r18
    3624:	50 f4       	brcc	.+20     	; 0x363a <__divdi3+0xa30>
    3626:	00 e1       	ldi	r16, 0x10	; 16
    3628:	10 e0       	ldi	r17, 0x00	; 0
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	09 c0       	rjmp	.+18     	; 0x3642 <__divdi3+0xa38>
    3630:	08 e0       	ldi	r16, 0x08	; 8
    3632:	10 e0       	ldi	r17, 0x00	; 0
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	04 c0       	rjmp	.+8      	; 0x3642 <__divdi3+0xa38>
    363a:	08 e1       	ldi	r16, 0x18	; 24
    363c:	10 e0       	ldi	r17, 0x00	; 0
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	ac 01       	movw	r20, r24
    3644:	bd 01       	movw	r22, r26
    3646:	00 2e       	mov	r0, r16
    3648:	04 c0       	rjmp	.+8      	; 0x3652 <__divdi3+0xa48>
    364a:	76 95       	lsr	r23
    364c:	67 95       	ror	r22
    364e:	57 95       	ror	r21
    3650:	47 95       	ror	r20
    3652:	0a 94       	dec	r0
    3654:	d2 f7       	brpl	.-12     	; 0x364a <__divdi3+0xa40>
    3656:	fa 01       	movw	r30, r20
    3658:	e0 50       	subi	r30, 0x00	; 0
    365a:	f0 4e       	sbci	r31, 0xE0	; 224
    365c:	40 81       	ld	r20, Z
    365e:	04 0f       	add	r16, r20
    3660:	11 1d       	adc	r17, r1
    3662:	21 1d       	adc	r18, r1
    3664:	31 1d       	adc	r19, r1
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	50 e0       	ldi	r21, 0x00	; 0
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	40 1b       	sub	r20, r16
    3670:	51 0b       	sbc	r21, r17
    3672:	62 0b       	sbc	r22, r18
    3674:	73 0b       	sbc	r23, r19
    3676:	a1 f4       	brne	.+40     	; 0x36a0 <__divdi3+0xa96>
    3678:	8c 15       	cp	r24, r12
    367a:	9d 05       	cpc	r25, r13
    367c:	ae 05       	cpc	r26, r14
    367e:	bf 05       	cpc	r27, r15
    3680:	08 f4       	brcc	.+2      	; 0x3684 <__divdi3+0xa7a>
    3682:	f5 c1       	rjmp	.+1002   	; 0x3a6e <__divdi3+0xe64>
    3684:	ed a8       	sts	0x8d, r30
    3686:	fe a8       	sts	0x8e, r31
    3688:	0f a9       	sts	0x4f, r16
    368a:	18 ad       	sts	0x68, r17
    368c:	44 24       	eor	r4, r4
    368e:	55 24       	eor	r5, r5
    3690:	32 01       	movw	r6, r4
    3692:	e8 14       	cp	r14, r8
    3694:	f9 04       	cpc	r15, r9
    3696:	0a 05       	cpc	r16, r10
    3698:	1b 05       	cpc	r17, r11
    369a:	08 f0       	brcs	.+2      	; 0x369e <__divdi3+0xa94>
    369c:	eb c1       	rjmp	.+982    	; 0x3a74 <__divdi3+0xe6a>
    369e:	e3 c1       	rjmp	.+966    	; 0x3a66 <__divdi3+0xe5c>
    36a0:	34 2e       	mov	r3, r20
    36a2:	2c 01       	movw	r4, r24
    36a4:	3d 01       	movw	r6, r26
    36a6:	04 c0       	rjmp	.+8      	; 0x36b0 <__divdi3+0xaa6>
    36a8:	44 0c       	add	r4, r4
    36aa:	55 1c       	adc	r5, r5
    36ac:	66 1c       	adc	r6, r6
    36ae:	77 1c       	adc	r7, r7
    36b0:	4a 95       	dec	r20
    36b2:	d2 f7       	brpl	.-12     	; 0x36a8 <__divdi3+0xa9e>
    36b4:	d5 01       	movw	r26, r10
    36b6:	c4 01       	movw	r24, r8
    36b8:	00 2e       	mov	r0, r16
    36ba:	04 c0       	rjmp	.+8      	; 0x36c4 <__divdi3+0xaba>
    36bc:	b6 95       	lsr	r27
    36be:	a7 95       	ror	r26
    36c0:	97 95       	ror	r25
    36c2:	87 95       	ror	r24
    36c4:	0a 94       	dec	r0
    36c6:	d2 f7       	brpl	.-12     	; 0x36bc <__divdi3+0xab2>
    36c8:	48 2a       	or	r4, r24
    36ca:	59 2a       	or	r5, r25
    36cc:	6a 2a       	or	r6, r26
    36ce:	7b 2a       	or	r7, r27
    36d0:	a5 01       	movw	r20, r10
    36d2:	94 01       	movw	r18, r8
    36d4:	03 2c       	mov	r0, r3
    36d6:	04 c0       	rjmp	.+8      	; 0x36e0 <__divdi3+0xad6>
    36d8:	22 0f       	add	r18, r18
    36da:	33 1f       	adc	r19, r19
    36dc:	44 1f       	adc	r20, r20
    36de:	55 1f       	adc	r21, r21
    36e0:	0a 94       	dec	r0
    36e2:	d2 f7       	brpl	.-12     	; 0x36d8 <__divdi3+0xace>
    36e4:	29 af       	sts	0x79, r18
    36e6:	3a af       	sts	0x7a, r19
    36e8:	4b af       	sts	0x7b, r20
    36ea:	5c af       	sts	0x7c, r21
    36ec:	b7 01       	movw	r22, r14
    36ee:	a6 01       	movw	r20, r12
    36f0:	00 2e       	mov	r0, r16
    36f2:	04 c0       	rjmp	.+8      	; 0x36fc <__divdi3+0xaf2>
    36f4:	76 95       	lsr	r23
    36f6:	67 95       	ror	r22
    36f8:	57 95       	ror	r21
    36fa:	47 95       	ror	r20
    36fc:	0a 94       	dec	r0
    36fe:	d2 f7       	brpl	.-12     	; 0x36f4 <__divdi3+0xaea>
    3700:	49 ab       	sts	0x59, r20
    3702:	5a ab       	sts	0x5a, r21
    3704:	6b ab       	sts	0x5b, r22
    3706:	7c ab       	sts	0x5c, r23
    3708:	c7 01       	movw	r24, r14
    370a:	b6 01       	movw	r22, r12
    370c:	03 2c       	mov	r0, r3
    370e:	04 c0       	rjmp	.+8      	; 0x3718 <__divdi3+0xb0e>
    3710:	66 0f       	add	r22, r22
    3712:	77 1f       	adc	r23, r23
    3714:	88 1f       	adc	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	0a 94       	dec	r0
    371a:	d2 f7       	brpl	.-12     	; 0x3710 <__divdi3+0xb06>
    371c:	6d a7       	lds	r22, 0x7d
    371e:	7e a7       	lds	r23, 0x7e
    3720:	8f a7       	lds	r24, 0x7f
    3722:	98 ab       	sts	0x58, r25
    3724:	8d a9       	sts	0x4d, r24
    3726:	9e a9       	sts	0x4e, r25
    3728:	af a9       	sts	0x4f, r26
    372a:	b8 ad       	sts	0x68, r27
    372c:	04 c0       	rjmp	.+8      	; 0x3736 <__divdi3+0xb2c>
    372e:	b6 95       	lsr	r27
    3730:	a7 95       	ror	r26
    3732:	97 95       	ror	r25
    3734:	87 95       	ror	r24
    3736:	0a 95       	dec	r16
    3738:	d2 f7       	brpl	.-12     	; 0x372e <__divdi3+0xb24>
    373a:	4d a5       	lds	r20, 0x6d
    373c:	5e a5       	lds	r21, 0x6e
    373e:	6f a5       	lds	r22, 0x6f
    3740:	78 a9       	sts	0x48, r23
    3742:	48 2b       	or	r20, r24
    3744:	59 2b       	or	r21, r25
    3746:	6a 2b       	or	r22, r26
    3748:	7b 2b       	or	r23, r27
    374a:	4d a7       	lds	r20, 0x7d
    374c:	5e a7       	lds	r21, 0x7e
    374e:	6f a7       	lds	r22, 0x7f
    3750:	78 ab       	sts	0x58, r23
    3752:	43 01       	movw	r8, r6
    3754:	aa 24       	eor	r10, r10
    3756:	bb 24       	eor	r11, r11
    3758:	93 01       	movw	r18, r6
    375a:	82 01       	movw	r16, r4
    375c:	20 70       	andi	r18, 0x00	; 0
    375e:	30 70       	andi	r19, 0x00	; 0
    3760:	21 96       	adiw	r28, 0x01	; 1
    3762:	0c af       	sts	0x7c, r16
    3764:	1d af       	sts	0x7d, r17
    3766:	2e af       	sts	0x7e, r18
    3768:	3f af       	sts	0x7f, r19
    376a:	21 97       	sbiw	r28, 0x01	; 1
    376c:	69 a9       	sts	0x49, r22
    376e:	7a a9       	sts	0x4a, r23
    3770:	8b a9       	sts	0x4b, r24
    3772:	9c a9       	sts	0x4c, r25
    3774:	a5 01       	movw	r20, r10
    3776:	94 01       	movw	r18, r8
    3778:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    377c:	29 a7       	lds	r18, 0x79
    377e:	3a a7       	lds	r19, 0x7a
    3780:	4b a7       	lds	r20, 0x7b
    3782:	5c a7       	lds	r21, 0x7c
    3784:	6b 01       	movw	r12, r22
    3786:	7c 01       	movw	r14, r24
    3788:	69 a9       	sts	0x49, r22
    378a:	7a a9       	sts	0x4a, r23
    378c:	8b a9       	sts	0x4b, r24
    378e:	9c a9       	sts	0x4c, r25
    3790:	a5 01       	movw	r20, r10
    3792:	94 01       	movw	r18, r8
    3794:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    3798:	ca 01       	movw	r24, r20
    379a:	b9 01       	movw	r22, r18
    379c:	21 96       	adiw	r28, 0x01	; 1
    379e:	2c ad       	sts	0x6c, r18
    37a0:	3d ad       	sts	0x6d, r19
    37a2:	4e ad       	sts	0x6e, r20
    37a4:	5f ad       	sts	0x6f, r21
    37a6:	21 97       	sbiw	r28, 0x01	; 1
    37a8:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	76 01       	movw	r14, r12
    37b2:	dd 24       	eor	r13, r13
    37b4:	cc 24       	eor	r12, r12
    37b6:	0d a5       	lds	r16, 0x6d
    37b8:	1e a5       	lds	r17, 0x6e
    37ba:	2f a5       	lds	r18, 0x6f
    37bc:	38 a9       	sts	0x48, r19
    37be:	a9 01       	movw	r20, r18
    37c0:	66 27       	eor	r22, r22
    37c2:	77 27       	eor	r23, r23
    37c4:	c4 2a       	or	r12, r20
    37c6:	d5 2a       	or	r13, r21
    37c8:	e6 2a       	or	r14, r22
    37ca:	f7 2a       	or	r15, r23
    37cc:	09 a5       	lds	r16, 0x69
    37ce:	1a a5       	lds	r17, 0x6a
    37d0:	2b a5       	lds	r18, 0x6b
    37d2:	3c a5       	lds	r19, 0x6c
    37d4:	c8 16       	cp	r12, r24
    37d6:	d9 06       	cpc	r13, r25
    37d8:	ea 06       	cpc	r14, r26
    37da:	fb 06       	cpc	r15, r27
    37dc:	38 f5       	brcc	.+78     	; 0x382c <__divdi3+0xc22>
    37de:	01 50       	subi	r16, 0x01	; 1
    37e0:	10 40       	sbci	r17, 0x00	; 0
    37e2:	20 40       	sbci	r18, 0x00	; 0
    37e4:	30 40       	sbci	r19, 0x00	; 0
    37e6:	09 ab       	sts	0x59, r16
    37e8:	1a ab       	sts	0x5a, r17
    37ea:	2b ab       	sts	0x5b, r18
    37ec:	3c ab       	sts	0x5c, r19
    37ee:	c4 0c       	add	r12, r4
    37f0:	d5 1c       	adc	r13, r5
    37f2:	e6 1c       	adc	r14, r6
    37f4:	f7 1c       	adc	r15, r7
    37f6:	c4 14       	cp	r12, r4
    37f8:	d5 04       	cpc	r13, r5
    37fa:	e6 04       	cpc	r14, r6
    37fc:	f7 04       	cpc	r15, r7
    37fe:	d0 f0       	brcs	.+52     	; 0x3834 <__divdi3+0xc2a>
    3800:	c8 16       	cp	r12, r24
    3802:	d9 06       	cpc	r13, r25
    3804:	ea 06       	cpc	r14, r26
    3806:	fb 06       	cpc	r15, r27
    3808:	a8 f4       	brcc	.+42     	; 0x3834 <__divdi3+0xc2a>
    380a:	09 a5       	lds	r16, 0x69
    380c:	1a a5       	lds	r17, 0x6a
    380e:	2b a5       	lds	r18, 0x6b
    3810:	3c a5       	lds	r19, 0x6c
    3812:	02 50       	subi	r16, 0x02	; 2
    3814:	10 40       	sbci	r17, 0x00	; 0
    3816:	20 40       	sbci	r18, 0x00	; 0
    3818:	30 40       	sbci	r19, 0x00	; 0
    381a:	09 ab       	sts	0x59, r16
    381c:	1a ab       	sts	0x5a, r17
    381e:	2b ab       	sts	0x5b, r18
    3820:	3c ab       	sts	0x5c, r19
    3822:	c4 0c       	add	r12, r4
    3824:	d5 1c       	adc	r13, r5
    3826:	e6 1c       	adc	r14, r6
    3828:	f7 1c       	adc	r15, r7
    382a:	04 c0       	rjmp	.+8      	; 0x3834 <__divdi3+0xc2a>
    382c:	09 ab       	sts	0x59, r16
    382e:	1a ab       	sts	0x5a, r17
    3830:	2b ab       	sts	0x5b, r18
    3832:	3c ab       	sts	0x5c, r19
    3834:	c8 1a       	sub	r12, r24
    3836:	d9 0a       	sbc	r13, r25
    3838:	ea 0a       	sbc	r14, r26
    383a:	fb 0a       	sbc	r15, r27
    383c:	c7 01       	movw	r24, r14
    383e:	b6 01       	movw	r22, r12
    3840:	a5 01       	movw	r20, r10
    3842:	94 01       	movw	r18, r8
    3844:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    3848:	29 a7       	lds	r18, 0x79
    384a:	3a a7       	lds	r19, 0x7a
    384c:	4b a7       	lds	r20, 0x7b
    384e:	5c a7       	lds	r21, 0x7c
    3850:	29 96       	adiw	r28, 0x09	; 9
    3852:	6c af       	sts	0x7c, r22
    3854:	7d af       	sts	0x7d, r23
    3856:	8e af       	sts	0x7e, r24
    3858:	9f af       	sts	0x7f, r25
    385a:	29 97       	sbiw	r28, 0x09	; 9
    385c:	c7 01       	movw	r24, r14
    385e:	b6 01       	movw	r22, r12
    3860:	a5 01       	movw	r20, r10
    3862:	94 01       	movw	r18, r8
    3864:	0e 94 22 20 	call	0x4044	; 0x4044 <__udivmodsi4>
    3868:	ca 01       	movw	r24, r20
    386a:	b9 01       	movw	r22, r18
    386c:	21 96       	adiw	r28, 0x01	; 1
    386e:	2c ad       	sts	0x6c, r18
    3870:	3d ad       	sts	0x6d, r19
    3872:	4e ad       	sts	0x6e, r20
    3874:	5f ad       	sts	0x6f, r21
    3876:	21 97       	sbiw	r28, 0x01	; 1
    3878:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    387c:	4b 01       	movw	r8, r22
    387e:	5c 01       	movw	r10, r24
    3880:	29 96       	adiw	r28, 0x09	; 9
    3882:	4c ad       	sts	0x6c, r20
    3884:	5d ad       	sts	0x6d, r21
    3886:	6e ad       	sts	0x6e, r22
    3888:	7f ad       	sts	0x6f, r23
    388a:	29 97       	sbiw	r28, 0x09	; 9
    388c:	9a 01       	movw	r18, r20
    388e:	11 27       	eor	r17, r17
    3890:	00 27       	eor	r16, r16
    3892:	8d a5       	lds	r24, 0x6d
    3894:	9e a5       	lds	r25, 0x6e
    3896:	af a5       	lds	r26, 0x6f
    3898:	b8 a9       	sts	0x48, r27
    389a:	a0 70       	andi	r26, 0x00	; 0
    389c:	b0 70       	andi	r27, 0x00	; 0
    389e:	08 2b       	or	r16, r24
    38a0:	19 2b       	or	r17, r25
    38a2:	2a 2b       	or	r18, r26
    38a4:	3b 2b       	or	r19, r27
    38a6:	89 a5       	lds	r24, 0x69
    38a8:	9a a5       	lds	r25, 0x6a
    38aa:	ab a5       	lds	r26, 0x6b
    38ac:	bc a5       	lds	r27, 0x6c
    38ae:	08 15       	cp	r16, r8
    38b0:	19 05       	cpc	r17, r9
    38b2:	2a 05       	cpc	r18, r10
    38b4:	3b 05       	cpc	r19, r11
    38b6:	e0 f4       	brcc	.+56     	; 0x38f0 <__divdi3+0xce6>
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	a1 09       	sbc	r26, r1
    38bc:	b1 09       	sbc	r27, r1
    38be:	04 0d       	add	r16, r4
    38c0:	15 1d       	adc	r17, r5
    38c2:	26 1d       	adc	r18, r6
    38c4:	37 1d       	adc	r19, r7
    38c6:	04 15       	cp	r16, r4
    38c8:	15 05       	cpc	r17, r5
    38ca:	26 05       	cpc	r18, r6
    38cc:	37 05       	cpc	r19, r7
    38ce:	80 f0       	brcs	.+32     	; 0x38f0 <__divdi3+0xce6>
    38d0:	08 15       	cp	r16, r8
    38d2:	19 05       	cpc	r17, r9
    38d4:	2a 05       	cpc	r18, r10
    38d6:	3b 05       	cpc	r19, r11
    38d8:	58 f4       	brcc	.+22     	; 0x38f0 <__divdi3+0xce6>
    38da:	89 a5       	lds	r24, 0x69
    38dc:	9a a5       	lds	r25, 0x6a
    38de:	ab a5       	lds	r26, 0x6b
    38e0:	bc a5       	lds	r27, 0x6c
    38e2:	02 97       	sbiw	r24, 0x02	; 2
    38e4:	a1 09       	sbc	r26, r1
    38e6:	b1 09       	sbc	r27, r1
    38e8:	04 0d       	add	r16, r4
    38ea:	15 1d       	adc	r17, r5
    38ec:	26 1d       	adc	r18, r6
    38ee:	37 1d       	adc	r19, r7
    38f0:	b9 01       	movw	r22, r18
    38f2:	a8 01       	movw	r20, r16
    38f4:	48 19       	sub	r20, r8
    38f6:	59 09       	sbc	r21, r9
    38f8:	6a 09       	sbc	r22, r10
    38fa:	7b 09       	sbc	r23, r11
    38fc:	4d a7       	lds	r20, 0x7d
    38fe:	5e a7       	lds	r21, 0x7e
    3900:	6f a7       	lds	r22, 0x7f
    3902:	78 ab       	sts	0x58, r23
    3904:	09 a9       	sts	0x49, r16
    3906:	1a a9       	sts	0x4a, r17
    3908:	2b a9       	sts	0x4b, r18
    390a:	3c a9       	sts	0x4c, r19
    390c:	78 01       	movw	r14, r16
    390e:	dd 24       	eor	r13, r13
    3910:	cc 24       	eor	r12, r12
    3912:	c8 2a       	or	r12, r24
    3914:	d9 2a       	or	r13, r25
    3916:	ea 2a       	or	r14, r26
    3918:	fb 2a       	or	r15, r27
    391a:	ff ef       	ldi	r31, 0xFF	; 255
    391c:	8f 2e       	mov	r8, r31
    391e:	ff ef       	ldi	r31, 0xFF	; 255
    3920:	9f 2e       	mov	r9, r31
    3922:	a1 2c       	mov	r10, r1
    3924:	b1 2c       	mov	r11, r1
    3926:	8c 20       	and	r8, r12
    3928:	9d 20       	and	r9, r13
    392a:	ae 20       	and	r10, r14
    392c:	bf 20       	and	r11, r15
    392e:	87 01       	movw	r16, r14
    3930:	22 27       	eor	r18, r18
    3932:	33 27       	eor	r19, r19
    3934:	09 a7       	lds	r16, 0x79
    3936:	1a a7       	lds	r17, 0x7a
    3938:	2b a7       	lds	r18, 0x7b
    393a:	3c a7       	lds	r19, 0x7c
    393c:	49 ac       	sts	0xa9, r20
    393e:	5a ac       	sts	0xaa, r21
    3940:	6b ac       	sts	0xab, r22
    3942:	7c ac       	sts	0xac, r23
    3944:	2f ef       	ldi	r18, 0xFF	; 255
    3946:	3f ef       	ldi	r19, 0xFF	; 255
    3948:	40 e0       	ldi	r20, 0x00	; 0
    394a:	50 e0       	ldi	r21, 0x00	; 0
    394c:	42 22       	and	r4, r18
    394e:	53 22       	and	r5, r19
    3950:	64 22       	and	r6, r20
    3952:	75 22       	and	r7, r21
    3954:	29 ad       	sts	0x69, r18
    3956:	3a ad       	sts	0x6a, r19
    3958:	4b ad       	sts	0x6b, r20
    395a:	5c ad       	sts	0x6c, r21
    395c:	8a 01       	movw	r16, r20
    395e:	22 27       	eor	r18, r18
    3960:	33 27       	eor	r19, r19
    3962:	09 ab       	sts	0x59, r16
    3964:	1a ab       	sts	0x5a, r17
    3966:	2b ab       	sts	0x5b, r18
    3968:	3c ab       	sts	0x5c, r19
    396a:	c5 01       	movw	r24, r10
    396c:	b4 01       	movw	r22, r8
    396e:	a3 01       	movw	r20, r6
    3970:	92 01       	movw	r18, r4
    3972:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    3976:	69 af       	sts	0x79, r22
    3978:	7a af       	sts	0x7a, r23
    397a:	8b af       	sts	0x7b, r24
    397c:	9c af       	sts	0x7c, r25
    397e:	c5 01       	movw	r24, r10
    3980:	b4 01       	movw	r22, r8
    3982:	29 a9       	sts	0x49, r18
    3984:	3a a9       	sts	0x4a, r19
    3986:	4b a9       	sts	0x4b, r20
    3988:	5c a9       	sts	0x4c, r21
    398a:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    398e:	4b 01       	movw	r8, r22
    3990:	5c 01       	movw	r10, r24
    3992:	69 a5       	lds	r22, 0x69
    3994:	7a a5       	lds	r23, 0x6a
    3996:	8b a5       	lds	r24, 0x6b
    3998:	9c a5       	lds	r25, 0x6c
    399a:	a3 01       	movw	r20, r6
    399c:	92 01       	movw	r18, r4
    399e:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    39a2:	2b 01       	movw	r4, r22
    39a4:	3c 01       	movw	r6, r24
    39a6:	69 a5       	lds	r22, 0x69
    39a8:	7a a5       	lds	r23, 0x6a
    39aa:	8b a5       	lds	r24, 0x6b
    39ac:	9c a5       	lds	r25, 0x6c
    39ae:	29 a9       	sts	0x49, r18
    39b0:	3a a9       	sts	0x4a, r19
    39b2:	4b a9       	sts	0x4b, r20
    39b4:	5c a9       	sts	0x4c, r21
    39b6:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__mulsi3>
    39ba:	ab 01       	movw	r20, r22
    39bc:	bc 01       	movw	r22, r24
    39be:	84 0c       	add	r8, r4
    39c0:	95 1c       	adc	r9, r5
    39c2:	a6 1c       	adc	r10, r6
    39c4:	b7 1c       	adc	r11, r7
    39c6:	09 ad       	sts	0x69, r16
    39c8:	1a ad       	sts	0x6a, r17
    39ca:	2b ad       	sts	0x6b, r18
    39cc:	3c ad       	sts	0x6c, r19
    39ce:	c9 01       	movw	r24, r18
    39d0:	aa 27       	eor	r26, r26
    39d2:	bb 27       	eor	r27, r27
    39d4:	88 0e       	add	r8, r24
    39d6:	99 1e       	adc	r9, r25
    39d8:	aa 1e       	adc	r10, r26
    39da:	bb 1e       	adc	r11, r27
    39dc:	84 14       	cp	r8, r4
    39de:	95 04       	cpc	r9, r5
    39e0:	a6 04       	cpc	r10, r6
    39e2:	b7 04       	cpc	r11, r7
    39e4:	20 f4       	brcc	.+8      	; 0x39ee <__divdi3+0xde4>
    39e6:	40 50       	subi	r20, 0x00	; 0
    39e8:	50 40       	sbci	r21, 0x00	; 0
    39ea:	6f 4f       	sbci	r22, 0xFF	; 255
    39ec:	7f 4f       	sbci	r23, 0xFF	; 255
    39ee:	c5 01       	movw	r24, r10
    39f0:	aa 27       	eor	r26, r26
    39f2:	bb 27       	eor	r27, r27
    39f4:	84 0f       	add	r24, r20
    39f6:	95 1f       	adc	r25, r21
    39f8:	a6 1f       	adc	r26, r22
    39fa:	b7 1f       	adc	r27, r23
    39fc:	0d a5       	lds	r16, 0x6d
    39fe:	1e a5       	lds	r17, 0x6e
    3a00:	2f a5       	lds	r18, 0x6f
    3a02:	38 a9       	sts	0x48, r19
    3a04:	08 17       	cp	r16, r24
    3a06:	19 07       	cpc	r17, r25
    3a08:	2a 07       	cpc	r18, r26
    3a0a:	3b 07       	cpc	r19, r27
    3a0c:	18 f1       	brcs	.+70     	; 0x3a54 <__divdi3+0xe4a>
    3a0e:	80 17       	cp	r24, r16
    3a10:	91 07       	cpc	r25, r17
    3a12:	a2 07       	cpc	r26, r18
    3a14:	b3 07       	cpc	r27, r19
    3a16:	a1 f5       	brne	.+104    	; 0x3a80 <__divdi3+0xe76>
    3a18:	54 01       	movw	r10, r8
    3a1a:	99 24       	eor	r9, r9
    3a1c:	88 24       	eor	r8, r8
    3a1e:	89 ad       	sts	0x69, r24
    3a20:	9a ad       	sts	0x6a, r25
    3a22:	ab ad       	sts	0x6b, r26
    3a24:	bc ad       	sts	0x6c, r27
    3a26:	a0 70       	andi	r26, 0x00	; 0
    3a28:	b0 70       	andi	r27, 0x00	; 0
    3a2a:	88 0e       	add	r8, r24
    3a2c:	99 1e       	adc	r9, r25
    3a2e:	aa 1e       	adc	r10, r26
    3a30:	bb 1e       	adc	r11, r27
    3a32:	4d a9       	sts	0x4d, r20
    3a34:	5e a9       	sts	0x4e, r21
    3a36:	6f a9       	sts	0x4f, r22
    3a38:	78 ad       	sts	0x68, r23
    3a3a:	03 2c       	mov	r0, r3
    3a3c:	04 c0       	rjmp	.+8      	; 0x3a46 <__divdi3+0xe3c>
    3a3e:	44 0f       	add	r20, r20
    3a40:	55 1f       	adc	r21, r21
    3a42:	66 1f       	adc	r22, r22
    3a44:	77 1f       	adc	r23, r23
    3a46:	0a 94       	dec	r0
    3a48:	d2 f7       	brpl	.-12     	; 0x3a3e <__divdi3+0xe34>
    3a4a:	48 15       	cp	r20, r8
    3a4c:	59 05       	cpc	r21, r9
    3a4e:	6a 05       	cpc	r22, r10
    3a50:	7b 05       	cpc	r23, r11
    3a52:	b0 f4       	brcc	.+44     	; 0x3a80 <__divdi3+0xe76>
    3a54:	08 94       	sec
    3a56:	c1 08       	sbc	r12, r1
    3a58:	d1 08       	sbc	r13, r1
    3a5a:	e1 08       	sbc	r14, r1
    3a5c:	f1 08       	sbc	r15, r1
    3a5e:	10 c0       	rjmp	.+32     	; 0x3a80 <__divdi3+0xe76>
    3a60:	44 24       	eor	r4, r4
    3a62:	55 24       	eor	r5, r5
    3a64:	32 01       	movw	r6, r4
    3a66:	cc 24       	eor	r12, r12
    3a68:	dd 24       	eor	r13, r13
    3a6a:	76 01       	movw	r14, r12
    3a6c:	0c c0       	rjmp	.+24     	; 0x3a86 <__divdi3+0xe7c>
    3a6e:	44 24       	eor	r4, r4
    3a70:	55 24       	eor	r5, r5
    3a72:	32 01       	movw	r6, r4
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	c8 2e       	mov	r12, r24
    3a78:	d1 2c       	mov	r13, r1
    3a7a:	e1 2c       	mov	r14, r1
    3a7c:	f1 2c       	mov	r15, r1
    3a7e:	03 c0       	rjmp	.+6      	; 0x3a86 <__divdi3+0xe7c>
    3a80:	44 24       	eor	r4, r4
    3a82:	55 24       	eor	r5, r5
    3a84:	32 01       	movw	r6, r4
    3a86:	fe 01       	movw	r30, r28
    3a88:	31 96       	adiw	r30, 0x01	; 1
    3a8a:	88 e0       	ldi	r24, 0x08	; 8
    3a8c:	df 01       	movw	r26, r30
    3a8e:	1d 92       	st	X+, r1
    3a90:	8a 95       	dec	r24
    3a92:	e9 f7       	brne	.-6      	; 0x3a8e <__divdi3+0xe84>
    3a94:	c9 82       	std	Y+1, r12	; 0x01
    3a96:	da 82       	std	Y+2, r13	; 0x02
    3a98:	eb 82       	std	Y+3, r14	; 0x03
    3a9a:	fc 82       	std	Y+4, r15	; 0x04
    3a9c:	4d 82       	std	Y+5, r4	; 0x05
    3a9e:	5e 82       	std	Y+6, r5	; 0x06
    3aa0:	6f 82       	std	Y+7, r6	; 0x07
    3aa2:	78 86       	std	Y+8, r7	; 0x08
    3aa4:	2c 2d       	mov	r18, r12
    3aa6:	3a 81       	ldd	r19, Y+2	; 0x02
    3aa8:	4b 81       	ldd	r20, Y+3	; 0x03
    3aaa:	5c 81       	ldd	r21, Y+4	; 0x04
    3aac:	64 2d       	mov	r22, r4
    3aae:	7e 81       	ldd	r23, Y+6	; 0x06
    3ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab2:	98 85       	ldd	r25, Y+8	; 0x08
    3ab4:	25 96       	adiw	r28, 0x05	; 5
    3ab6:	ec ac       	sts	0xac, r30
    3ab8:	fd ac       	sts	0xad, r31
    3aba:	0e ad       	sts	0x6e, r16
    3abc:	1f ad       	sts	0x6f, r17
    3abe:	25 97       	sbiw	r28, 0x05	; 5
    3ac0:	e1 14       	cp	r14, r1
    3ac2:	f1 04       	cpc	r15, r1
    3ac4:	01 05       	cpc	r16, r1
    3ac6:	11 05       	cpc	r17, r1
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <__divdi3+0xec2>
    3aca:	56 c0       	rjmp	.+172    	; 0x3b78 <__divdi3+0xf6e>
    3acc:	21 95       	neg	r18
    3ace:	e1 e0       	ldi	r30, 0x01	; 1
    3ad0:	12 16       	cp	r1, r18
    3ad2:	08 f0       	brcs	.+2      	; 0x3ad6 <__divdi3+0xecc>
    3ad4:	e0 e0       	ldi	r30, 0x00	; 0
    3ad6:	31 95       	neg	r19
    3ad8:	f1 e0       	ldi	r31, 0x01	; 1
    3ada:	13 16       	cp	r1, r19
    3adc:	08 f0       	brcs	.+2      	; 0x3ae0 <__divdi3+0xed6>
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	03 2f       	mov	r16, r19
    3ae2:	0e 1b       	sub	r16, r30
    3ae4:	e1 e0       	ldi	r30, 0x01	; 1
    3ae6:	30 17       	cp	r19, r16
    3ae8:	08 f0       	brcs	.+2      	; 0x3aec <__divdi3+0xee2>
    3aea:	e0 e0       	ldi	r30, 0x00	; 0
    3aec:	fe 2b       	or	r31, r30
    3aee:	41 95       	neg	r20
    3af0:	e1 e0       	ldi	r30, 0x01	; 1
    3af2:	14 16       	cp	r1, r20
    3af4:	08 f0       	brcs	.+2      	; 0x3af8 <__divdi3+0xeee>
    3af6:	e0 e0       	ldi	r30, 0x00	; 0
    3af8:	14 2f       	mov	r17, r20
    3afa:	1f 1b       	sub	r17, r31
    3afc:	31 e0       	ldi	r19, 0x01	; 1
    3afe:	41 17       	cp	r20, r17
    3b00:	08 f0       	brcs	.+2      	; 0x3b04 <__divdi3+0xefa>
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	e3 2b       	or	r30, r19
    3b06:	51 95       	neg	r21
    3b08:	f1 e0       	ldi	r31, 0x01	; 1
    3b0a:	15 16       	cp	r1, r21
    3b0c:	08 f0       	brcs	.+2      	; 0x3b10 <__divdi3+0xf06>
    3b0e:	f0 e0       	ldi	r31, 0x00	; 0
    3b10:	b5 2f       	mov	r27, r21
    3b12:	be 1b       	sub	r27, r30
    3b14:	31 e0       	ldi	r19, 0x01	; 1
    3b16:	5b 17       	cp	r21, r27
    3b18:	08 f0       	brcs	.+2      	; 0x3b1c <__divdi3+0xf12>
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	f3 2b       	or	r31, r19
    3b1e:	61 95       	neg	r22
    3b20:	e1 e0       	ldi	r30, 0x01	; 1
    3b22:	16 16       	cp	r1, r22
    3b24:	08 f0       	brcs	.+2      	; 0x3b28 <__divdi3+0xf1e>
    3b26:	e0 e0       	ldi	r30, 0x00	; 0
    3b28:	46 2e       	mov	r4, r22
    3b2a:	4f 1a       	sub	r4, r31
    3b2c:	31 e0       	ldi	r19, 0x01	; 1
    3b2e:	64 15       	cp	r22, r4
    3b30:	08 f0       	brcs	.+2      	; 0x3b34 <__divdi3+0xf2a>
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	e3 2b       	or	r30, r19
    3b36:	71 95       	neg	r23
    3b38:	f1 e0       	ldi	r31, 0x01	; 1
    3b3a:	17 16       	cp	r1, r23
    3b3c:	08 f0       	brcs	.+2      	; 0x3b40 <__divdi3+0xf36>
    3b3e:	f0 e0       	ldi	r31, 0x00	; 0
    3b40:	a7 2f       	mov	r26, r23
    3b42:	ae 1b       	sub	r26, r30
    3b44:	31 e0       	ldi	r19, 0x01	; 1
    3b46:	7a 17       	cp	r23, r26
    3b48:	08 f0       	brcs	.+2      	; 0x3b4c <__divdi3+0xf42>
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	f3 2b       	or	r31, r19
    3b4e:	81 95       	neg	r24
    3b50:	e1 e0       	ldi	r30, 0x01	; 1
    3b52:	18 16       	cp	r1, r24
    3b54:	08 f0       	brcs	.+2      	; 0x3b58 <__divdi3+0xf4e>
    3b56:	e0 e0       	ldi	r30, 0x00	; 0
    3b58:	f8 2e       	mov	r15, r24
    3b5a:	ff 1a       	sub	r15, r31
    3b5c:	ff 2d       	mov	r31, r15
    3b5e:	31 e0       	ldi	r19, 0x01	; 1
    3b60:	8f 15       	cp	r24, r15
    3b62:	08 f0       	brcs	.+2      	; 0x3b66 <__divdi3+0xf5c>
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	e3 2b       	or	r30, r19
    3b68:	91 95       	neg	r25
    3b6a:	30 2f       	mov	r19, r16
    3b6c:	41 2f       	mov	r20, r17
    3b6e:	5b 2f       	mov	r21, r27
    3b70:	64 2d       	mov	r22, r4
    3b72:	7a 2f       	mov	r23, r26
    3b74:	8f 2f       	mov	r24, r31
    3b76:	9e 1b       	sub	r25, r30
    3b78:	c8 5b       	subi	r28, 0xB8	; 184
    3b7a:	df 4f       	sbci	r29, 0xFF	; 255
    3b7c:	e1 e1       	ldi	r30, 0x11	; 17
    3b7e:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x2>

00003b82 <main>:

#include "E-000001-000009_firmware_rev_1_0.h"



int main(void) {
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	c2 56       	subi	r28, 0x62	; 98
    3b8c:	d1 40       	sbci	r29, 0x01	; 1
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	de bf       	out	0x3e, r29	; 62
	

	uint8_t filterSettings;
	
	// set system clock
	set_32MHz();  // for RC clock
    3b92:	0e 94 6d 02 	call	0x4da	; 0x4da <set_32MHz>
	//setXOSC_32MHz();  // for crystal when installed
	// breakpoint 1a - collect room temperature
	CO_collectTemp(&BP_1a_avg_mV, &BP_1a_min_mV, &BP_1a_max_mV);
    3b96:	ce 01       	movw	r24, r28
    3b98:	41 96       	adiw	r24, 0x11	; 17
    3b9a:	be 01       	movw	r22, r28
    3b9c:	61 5f       	subi	r22, 0xF1	; 241
    3b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba0:	ae 01       	movw	r20, r28
    3ba2:	43 5f       	subi	r20, 0xF3	; 243
    3ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba6:	0e 94 a1 05 	call	0xb42	; 0xb42 <CO_collectTemp>
	// avg 830mV +/- 25% with min/max +/- 1% of avg 
	SD_init();	//initialize SD Card
    3baa:	0e 94 cd 13 	call	0x279a	; 0x279a <SD_init>
	// breakpoint 1b - collect body temperature
	CO_collectTemp(&BP_1b_avg_mV, &BP_1b_min_mV, &BP_1b_max_mV);
    3bae:	ce 01       	movw	r24, r28
    3bb0:	0b 96       	adiw	r24, 0x0b	; 11
    3bb2:	be 01       	movw	r22, r28
    3bb4:	67 5f       	subi	r22, 0xF7	; 247
    3bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb8:	ae 01       	movw	r20, r28
    3bba:	49 5f       	subi	r20, 0xF9	; 249
    3bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3bbe:	0e 94 a1 05 	call	0xb42	; 0xb42 <CO_collectTemp>
	// avg should increase from breakpoint 1a
	// min/max +/- 1% of avg

	// breakpoint 2 - collect battery voltage
	CO_collectBatt(&BP_2_avg_mV, &BP_2_min_mV, &BP_2_max_mV);
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	05 96       	adiw	r24, 0x05	; 5
    3bc6:	be 01       	movw	r22, r28
    3bc8:	6d 5f       	subi	r22, 0xFD	; 253
    3bca:	7f 4f       	sbci	r23, 0xFF	; 255
    3bcc:	ae 01       	movw	r20, r28
    3bce:	4f 5f       	subi	r20, 0xFF	; 255
    3bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd2:	0e 94 a4 06 	call	0xd48	; 0xd48 <CO_collectBatt>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3bd6:	00 00       	nop
	
	//set filter for breakpoint 3	
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 3a - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3a_avg_uV, &BP_3a_min_uV, &BP_3a_max_uV,
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	61 ec       	ldi	r22, 0xC1	; 193
    3bdc:	ae 01       	movw	r20, r28
    3bde:	41 5a       	subi	r20, 0xA1	; 161
    3be0:	5e 4f       	sbci	r21, 0xFE	; 254
    3be2:	9e 01       	movw	r18, r28
    3be4:	25 5a       	subi	r18, 0xA5	; 165
    3be6:	3e 4f       	sbci	r19, 0xFE	; 254
    3be8:	8e 01       	movw	r16, r28
    3bea:	09 5a       	subi	r16, 0xA9	; 169
    3bec:	1e 4f       	sbci	r17, 0xFE	; 254
    3bee:	ee 24       	eor	r14, r14
    3bf0:	e3 94       	inc	r14
    3bf2:	ec e0       	ldi	r30, 0x0C	; 12
    3bf4:	ce 2e       	mov	r12, r30
    3bf6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg 600mV +/- 10% with min/max +/- 1% of avg 
	
	// breakpoint 3b - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 2
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3b_avg_uV, &BP_3b_min_uV, &BP_3b_max_uV,
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	61 ec       	ldi	r22, 0xC1	; 193
    3bfe:	ae 01       	movw	r20, r28
    3c00:	4d 5a       	subi	r20, 0xAD	; 173
    3c02:	5e 4f       	sbci	r21, 0xFE	; 254
    3c04:	9e 01       	movw	r18, r28
    3c06:	21 5b       	subi	r18, 0xB1	; 177
    3c08:	3e 4f       	sbci	r19, 0xFE	; 254
    3c0a:	8e 01       	movw	r16, r28
    3c0c:	05 5b       	subi	r16, 0xB5	; 181
    3c0e:	1e 4f       	sbci	r17, 0xFE	; 254
    3c10:	ee 24       	eor	r14, r14
    3c12:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 300mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3c1c:	00 00       	nop

	Ext1Power(TRUE);
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	// breakpoint 3c - collect sample from Channel 1 (ELEC1/ELEC2) gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3c_avg_uV, &BP_3c_min_uV, &BP_3c_max_uV,
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	61 ec       	ldi	r22, 0xC1	; 193
    3c28:	ae 01       	movw	r20, r28
    3c2a:	49 5b       	subi	r20, 0xB9	; 185
    3c2c:	5e 4f       	sbci	r21, 0xFE	; 254
    3c2e:	9e 01       	movw	r18, r28
    3c30:	2d 5b       	subi	r18, 0xBD	; 189
    3c32:	3e 4f       	sbci	r19, 0xFE	; 254
    3c34:	8e 01       	movw	r16, r28
    3c36:	01 5c       	subi	r16, 0xC1	; 193
    3c38:	1e 4f       	sbci	r17, 0xFE	; 254
    3c3a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 0mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3c44:	00 00       	nop

	Ext1Power(TRUE);
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	// breakpoint 3d - collect sample from Channel 1 (ELEC1/ELEC2) polarity reversed with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3d_avg_uV, &BP_3d_min_uV, &BP_3d_max_uV,
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	61 ec       	ldi	r22, 0xC1	; 193
    3c50:	ae 01       	movw	r20, r28
    3c52:	45 5c       	subi	r20, 0xC5	; 197
    3c54:	5e 4f       	sbci	r21, 0xFE	; 254
    3c56:	9e 01       	movw	r18, r28
    3c58:	29 5c       	subi	r18, 0xC9	; 201
    3c5a:	3e 4f       	sbci	r19, 0xFE	; 254
    3c5c:	8e 01       	movw	r16, r28
    3c5e:	0d 5c       	subi	r16, 0xCD	; 205
    3c60:	1e 4f       	sbci	r17, 0xFE	; 254
    3c62:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg -300mV +/- 10% with min/max +/- 1% of avg 

	// breakpoint 3e - collect sample from Channel 1 (ELEC1/ELEC2) polarity reversed with gain of 2
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3e_avg_uV, &BP_3e_min_uV, &BP_3e_max_uV,
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	61 ec       	ldi	r22, 0xC1	; 193
    3c6a:	ae 01       	movw	r20, r28
    3c6c:	41 5d       	subi	r20, 0xD1	; 209
    3c6e:	5e 4f       	sbci	r21, 0xFE	; 254
    3c70:	9e 01       	movw	r18, r28
    3c72:	25 5d       	subi	r18, 0xD5	; 213
    3c74:	3e 4f       	sbci	r19, 0xFE	; 254
    3c76:	8e 01       	movw	r16, r28
    3c78:	09 5d       	subi	r16, 0xD9	; 217
    3c7a:	1e 4f       	sbci	r17, 0xFE	; 254
    3c7c:	ee 24       	eor	r14, r14
    3c7e:	e3 94       	inc	r14
    3c80:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg -600mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3c8a:	00 00       	nop

	Ext1Power(TRUE);
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	// set filter for breakpoint 4
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 4a - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 2
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4a_avg_uV, &BP_4a_min_uV, &BP_4a_max_uV,
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	62 ec       	ldi	r22, 0xC2	; 194
    3c96:	ae 01       	movw	r20, r28
    3c98:	4d 5d       	subi	r20, 0xDD	; 221
    3c9a:	5e 4f       	sbci	r21, 0xFE	; 254
    3c9c:	9e 01       	movw	r18, r28
    3c9e:	21 5e       	subi	r18, 0xE1	; 225
    3ca0:	3e 4f       	sbci	r19, 0xFE	; 254
    3ca2:	8e 01       	movw	r16, r28
    3ca4:	05 5e       	subi	r16, 0xE5	; 229
    3ca6:	1e 4f       	sbci	r17, 0xFE	; 254
    3ca8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg 600mV +/- 10% with min/max +/- 1% of avg 

	// breakpoint 4b - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4b_avg_uV, &BP_4b_min_uV, &BP_4b_max_uV,
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	62 ec       	ldi	r22, 0xC2	; 194
    3cb0:	ae 01       	movw	r20, r28
    3cb2:	49 5e       	subi	r20, 0xE9	; 233
    3cb4:	5e 4f       	sbci	r21, 0xFE	; 254
    3cb6:	9e 01       	movw	r18, r28
    3cb8:	2d 5e       	subi	r18, 0xED	; 237
    3cba:	3e 4f       	sbci	r19, 0xFE	; 254
    3cbc:	8e 01       	movw	r16, r28
    3cbe:	01 5f       	subi	r16, 0xF1	; 241
    3cc0:	1e 4f       	sbci	r17, 0xFE	; 254
    3cc2:	ee 24       	eor	r14, r14
    3cc4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 300mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3cce:	00 00       	nop

	Ext1Power(TRUE);
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	// breakpoint 4c - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4c_avg_uV, &BP_4c_min_uV, &BP_4c_max_uV,
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	62 ec       	ldi	r22, 0xC2	; 194
    3cda:	ae 01       	movw	r20, r28
    3cdc:	45 5f       	subi	r20, 0xF5	; 245
    3cde:	5e 4f       	sbci	r21, 0xFE	; 254
    3ce0:	9e 01       	movw	r18, r28
    3ce2:	29 5f       	subi	r18, 0xF9	; 249
    3ce4:	3e 4f       	sbci	r19, 0xFE	; 254
    3ce6:	8e 01       	movw	r16, r28
    3ce8:	0d 5f       	subi	r16, 0xFD	; 253
    3cea:	1e 4f       	sbci	r17, 0xFE	; 254
    3cec:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 0mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3cf6:	00 00       	nop

	Ext1Power(TRUE);
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	// breakpoint 4d - collect sample from Channel 2 (ELEC3/ELEC4) polarity reversed with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4d_avg_uV, &BP_4d_min_uV, &BP_4d_max_uV,
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	62 ec       	ldi	r22, 0xC2	; 194
    3d02:	ae 01       	movw	r20, r28
    3d04:	41 50       	subi	r20, 0x01	; 1
    3d06:	5f 4f       	sbci	r21, 0xFF	; 255
    3d08:	9e 01       	movw	r18, r28
    3d0a:	25 50       	subi	r18, 0x05	; 5
    3d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d0e:	8e 01       	movw	r16, r28
    3d10:	09 50       	subi	r16, 0x09	; 9
    3d12:	1f 4f       	sbci	r17, 0xFF	; 255
    3d14:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg -300mV +/- 10% with min/max +/- 1% of avg


	// breakpoint 4e - collect sample from Channel 2 (ELEC3/ELEC4) polarity reversed with gain of 2
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4e_avg_uV, &BP_4e_min_uV, &BP_4e_max_uV,
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	62 ec       	ldi	r22, 0xC2	; 194
    3d1c:	ae 01       	movw	r20, r28
    3d1e:	4d 50       	subi	r20, 0x0D	; 13
    3d20:	5f 4f       	sbci	r21, 0xFF	; 255
    3d22:	9e 01       	movw	r18, r28
    3d24:	21 51       	subi	r18, 0x11	; 17
    3d26:	3f 4f       	sbci	r19, 0xFF	; 255
    3d28:	8e 01       	movw	r16, r28
    3d2a:	05 51       	subi	r16, 0x15	; 21
    3d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2e:	ee 24       	eor	r14, r14
    3d30:	e3 94       	inc	r14
    3d32:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg -600mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3d3c:	00 00       	nop

	Ext1Power(TRUE);
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>
	HVPower(TRUE);
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	0e 94 bb 02 	call	0x576	; 0x576 <HVPower>

	// set filter for breakpoint 5
	filterSettings = (uint8_t) (FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);
	
	// breakpoint 5a - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_4_gc, filterSettings, &BP_5a_avg_uV, &BP_5a_min_uV, &BP_5a_max_uV,
    3d4a:	83 e0       	ldi	r24, 0x03	; 3
    3d4c:	68 ec       	ldi	r22, 0xC8	; 200
    3d4e:	ae 01       	movw	r20, r28
    3d50:	49 51       	subi	r20, 0x19	; 25
    3d52:	5f 4f       	sbci	r21, 0xFF	; 255
    3d54:	9e 01       	movw	r18, r28
    3d56:	2d 51       	subi	r18, 0x1D	; 29
    3d58:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5a:	8e 01       	movw	r16, r28
    3d5c:	01 52       	subi	r16, 0x21	; 33
    3d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d60:	ee 24       	eor	r14, r14
    3d62:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 293mV +/- 10% with min/max +/- 1% of avg
	
	HVPower(FALSE);
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	0e 94 bb 02 	call	0x576	; 0x576 <HVPower>
	Ext1Power(FALSE);
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>
	
	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3d72:	00 00       	nop

	Ext1Power(TRUE);
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>
	HVPower(TRUE);
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	0e 94 bb 02 	call	0x576	; 0x576 <HVPower>
	
	// breakpoint 5b - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_4_gc, filterSettings, &BP_5b_avg_uV, &BP_5b_min_uV, &BP_5b_max_uV,
    3d80:	83 e0       	ldi	r24, 0x03	; 3
    3d82:	68 ec       	ldi	r22, 0xC8	; 200
    3d84:	ae 01       	movw	r20, r28
    3d86:	45 52       	subi	r20, 0x25	; 37
    3d88:	5f 4f       	sbci	r21, 0xFF	; 255
    3d8a:	9e 01       	movw	r18, r28
    3d8c:	29 52       	subi	r18, 0x29	; 41
    3d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d90:	8e 01       	movw	r16, r28
    3d92:	0d 52       	subi	r16, 0x2D	; 45
    3d94:	1f 4f       	sbci	r17, 0xFF	; 255
    3d96:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 571mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	0e 94 bb 02 	call	0x576	; 0x576 <HVPower>
	Ext1Power(FALSE);
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3da6:	00 00       	nop

	Ext1Power(TRUE);
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>
	HVPower(TRUE);
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	0e 94 bb 02 	call	0x576	; 0x576 <HVPower>
	
	// set filter for breakpoint 6
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 6a - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_6a_avg_uV, &BP_6a_min_uV, &BP_6a_max_uV,
    3db4:	84 e0       	ldi	r24, 0x04	; 4
    3db6:	61 ec       	ldi	r22, 0xC1	; 193
    3db8:	ae 01       	movw	r20, r28
    3dba:	41 53       	subi	r20, 0x31	; 49
    3dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3dbe:	9e 01       	movw	r18, r28
    3dc0:	25 53       	subi	r18, 0x35	; 53
    3dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc4:	8e 01       	movw	r16, r28
    3dc6:	09 53       	subi	r16, 0x39	; 57
    3dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dca:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	0e 94 bb 02 	call	0x576	; 0x576 <HVPower>
	Ext1Power(FALSE);
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3dda:	00 00       	nop

	Ext1Power(TRUE);
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>
	HVPower(TRUE);
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	0e 94 bb 02 	call	0x576	; 0x576 <HVPower>

	// breakpoint 6b - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_6b_avg_uV, &BP_6b_min_uV, &BP_6b_max_uV,
    3de8:	84 e0       	ldi	r24, 0x04	; 4
    3dea:	61 ec       	ldi	r22, 0xC1	; 193
    3dec:	ae 01       	movw	r20, r28
    3dee:	4d 53       	subi	r20, 0x3D	; 61
    3df0:	5f 4f       	sbci	r21, 0xFF	; 255
    3df2:	9e 01       	movw	r18, r28
    3df4:	21 54       	subi	r18, 0x41	; 65
    3df6:	3f 4f       	sbci	r19, 0xFF	; 255
    3df8:	8e 01       	movw	r16, r28
    3dfa:	05 54       	subi	r16, 0x45	; 69
    3dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfe:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	0e 94 bb 02 	call	0x576	; 0x576 <HVPower>
	Ext1Power(FALSE);
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3e0e:	00 00       	nop

	Ext1Power(TRUE);
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	// breakpoint 7a - write known values with checksums to FRAM
	// read known values back from FRAM and recalculate checksums
	FRAMWriteKnownsCheck();
    3e16:	0e 94 70 13 	call	0x26e0	; 0x26e0 <FRAMWriteKnownsCheck>
	// sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 18CC5ED67 = 6656748903


	// breakpoint 7b - collect sample from all three seismic channels with
	// checksums on FRAM writes and read back recalculating checksums
	FRAMTest3Channel();
    3e1a:	0e 94 65 12 	call	0x24ca	; 0x24ca <FRAMTest3Channel>
	// checksumADC and checkSumFRAM match

	// breakpoint 7c - collect sample from all three seismic channels with
	// checksums on FRAM writes and read back recalculating checksums
	FRAMTest1Channel();
    3e1e:	0e 94 2a 12 	call	0x2454	; 0x2454 <FRAMTest1Channel>
	// checksumADC and checkSumFRAM match 

	Ext1Power(TRUE);
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	nop();
    3e28:	00 00       	nop

	Ext1Power(TRUE);
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	// set filter for breakpoint 7
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 7a - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_7a_avg_uV, &BP_7a_min_uV, &BP_7a_max_uV,
    3e30:	84 e0       	ldi	r24, 0x04	; 4
    3e32:	61 ec       	ldi	r22, 0xC1	; 193
    3e34:	ae 01       	movw	r20, r28
    3e36:	49 54       	subi	r20, 0x49	; 73
    3e38:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3a:	9e 01       	movw	r18, r28
    3e3c:	2d 54       	subi	r18, 0x4D	; 77
    3e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e40:	8e 01       	movw	r16, r28
    3e42:	01 55       	subi	r16, 0x51	; 81
    3e44:	1f 4f       	sbci	r17, 0xFF	; 255
    3e46:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 7b - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_7b_avg_uV, &BP_7b_min_uV, &BP_7b_max_uV,
    3e4a:	84 e0       	ldi	r24, 0x04	; 4
    3e4c:	61 ec       	ldi	r22, 0xC1	; 193
    3e4e:	ae 01       	movw	r20, r28
    3e50:	45 55       	subi	r20, 0x55	; 85
    3e52:	5f 4f       	sbci	r21, 0xFF	; 255
    3e54:	9e 01       	movw	r18, r28
    3e56:	29 55       	subi	r18, 0x59	; 89
    3e58:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5a:	8e 01       	movw	r16, r28
    3e5c:	0d 55       	subi	r16, 0x5D	; 93
    3e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e60:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
    3e64:	80 e0       	ldi	r24, 0x00	; 0
    3e66:	0e 94 91 02 	call	0x522	; 0x522 <Ext1Power>

	//**********************************************************************
	//************ TEARDOWN EXTERNAL CIRCUIT BEFORE PROCEEDING *************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3e6a:	00 00       	nop
	// set filter for breakpoint 8
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 8a - collect sample from Channel 6 (ACC x-axis) with gain of 1
	// configure board resting on long edge with J1 facing up
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_8a_avg_uV, &BP_8a_min_uV, &BP_8a_max_uV,
    3e6c:	85 e0       	ldi	r24, 0x05	; 5
    3e6e:	62 ec       	ldi	r22, 0xC2	; 194
    3e70:	ae 01       	movw	r20, r28
    3e72:	41 56       	subi	r20, 0x61	; 97
    3e74:	5f 4f       	sbci	r21, 0xFF	; 255
    3e76:	9e 01       	movw	r18, r28
    3e78:	25 56       	subi	r18, 0x65	; 101
    3e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7c:	8e 01       	movw	r16, r28
    3e7e:	09 56       	subi	r16, 0x69	; 105
    3e80:	1f 4f       	sbci	r17, 0xFF	; 255
    3e82:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 8b - collect sample from Channel 6 (ACC x-axis) with gain of 1
	// configure board resting on long edge with J1 facing down
 	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_8b_avg_uV, &BP_8b_min_uV, &BP_8b_max_uV,
    3e86:	85 e0       	ldi	r24, 0x05	; 5
    3e88:	62 ec       	ldi	r22, 0xC2	; 194
    3e8a:	ae 01       	movw	r20, r28
    3e8c:	4d 56       	subi	r20, 0x6D	; 109
    3e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e90:	9e 01       	movw	r18, r28
    3e92:	21 57       	subi	r18, 0x71	; 113
    3e94:	3f 4f       	sbci	r19, 0xFF	; 255
    3e96:	8e 01       	movw	r16, r28
    3e98:	05 57       	subi	r16, 0x75	; 117
    3e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
	// set filter for breakpoint 9
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 9a - collect sample from Channel 7 (ACC y-axis) with gain of 1
	// configure board resting vertically short edge with J1 facing up
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_9a_avg_uV, &BP_9a_min_uV, &BP_9a_max_uV,
    3ea0:	86 e0       	ldi	r24, 0x06	; 6
    3ea2:	64 ec       	ldi	r22, 0xC4	; 196
    3ea4:	ae 01       	movw	r20, r28
    3ea6:	49 57       	subi	r20, 0x79	; 121
    3ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eaa:	9e 01       	movw	r18, r28
    3eac:	2d 57       	subi	r18, 0x7D	; 125
    3eae:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb0:	8e 01       	movw	r16, r28
    3eb2:	01 58       	subi	r16, 0x81	; 129
    3eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 9b - collect sample from Channel 7 (ACC y-axis) with gain of 1
	// configure board resting vertically short edge with J1 facing down
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_9b_avg_uV, &BP_9b_min_uV, &BP_9b_max_uV,
    3eba:	86 e0       	ldi	r24, 0x06	; 6
    3ebc:	64 ec       	ldi	r22, 0xC4	; 196
    3ebe:	ae 01       	movw	r20, r28
    3ec0:	45 58       	subi	r20, 0x85	; 133
    3ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec4:	9e 01       	movw	r18, r28
    3ec6:	29 58       	subi	r18, 0x89	; 137
    3ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eca:	8e 01       	movw	r16, r28
    3ecc:	0d 58       	subi	r16, 0x8D	; 141
    3ece:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
	// set filter for breakpoint 10
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 10a - collect sample from Channel 8 (ACC z-axis) with gain of 1
	// configure board resting lies flat with J1 facing up
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_10a_avg_uV, &BP_10a_min_uV, &BP_10a_max_uV,
    3ed4:	87 e0       	ldi	r24, 0x07	; 7
    3ed6:	64 ec       	ldi	r22, 0xC4	; 196
    3ed8:	ae 01       	movw	r20, r28
    3eda:	41 59       	subi	r20, 0x91	; 145
    3edc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ede:	9e 01       	movw	r18, r28
    3ee0:	25 59       	subi	r18, 0x95	; 149
    3ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee4:	8e 01       	movw	r16, r28
    3ee6:	09 59       	subi	r16, 0x99	; 153
    3ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eea:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 10b - collect sample from Channel 8 (ACC z-axis) with gain of 1
	// configure board resting lies flat with J1 facing down
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_10b_avg_uV, &BP_10b_min_uV, &BP_10b_max_uV,
    3eee:	87 e0       	ldi	r24, 0x07	; 7
    3ef0:	64 ec       	ldi	r22, 0xC4	; 196
    3ef2:	ae 01       	movw	r20, r28
    3ef4:	4d 59       	subi	r20, 0x9D	; 157
    3ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef8:	9e 01       	movw	r18, r28
    3efa:	21 5a       	subi	r18, 0xA1	; 161
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	8e 01       	movw	r16, r28
    3f00:	05 5a       	subi	r16, 0xA5	; 165
    3f02:	1f 4f       	sbci	r17, 0xFF	; 255
    3f04:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
	
	//**********************************************************************
	//************ SETUP SINE WAVE GENERATOR BEFORE PROCEEDING *************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    3f08:	00 00       	nop

	// set filter for breakpoint 11
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 11a - collect sample from Channel 6 (ACC x-axis) with gain of 16
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_11a_avg_uV, &BP_11a_min_uV, &BP_11a_max_uV,
    3f0a:	85 e0       	ldi	r24, 0x05	; 5
    3f0c:	62 ec       	ldi	r22, 0xC2	; 194
    3f0e:	ae 01       	movw	r20, r28
    3f10:	49 5a       	subi	r20, 0xA9	; 169
    3f12:	5f 4f       	sbci	r21, 0xFF	; 255
    3f14:	9e 01       	movw	r18, r28
    3f16:	2d 5a       	subi	r18, 0xAD	; 173
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	8e 01       	movw	r16, r28
    3f1c:	01 5b       	subi	r16, 0xB1	; 177
    3f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f20:	f4 e0       	ldi	r31, 0x04	; 4
    3f22:	ef 2e       	mov	r14, r31
    3f24:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_11a_delta_uV = BP_11a_max_uV - BP_11a_min_uV;
	BP_11a_diff1_uV = BP_11a_max_uV - BP_11a_avg_uV;
	BP_11a_diff2_uV = BP_11a_avg_uV - BP_11a_min_uV;
	nop();
    3f28:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 11b - collect sample from Channel 6 (ACC x-axis) with gain of 16
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_11b_avg_uV, &BP_11b_min_uV, &BP_11b_max_uV,
    3f2a:	85 e0       	ldi	r24, 0x05	; 5
    3f2c:	62 ec       	ldi	r22, 0xC2	; 194
    3f2e:	ae 01       	movw	r20, r28
    3f30:	45 5b       	subi	r20, 0xB5	; 181
    3f32:	5f 4f       	sbci	r21, 0xFF	; 255
    3f34:	9e 01       	movw	r18, r28
    3f36:	29 5b       	subi	r18, 0xB9	; 185
    3f38:	3f 4f       	sbci	r19, 0xFF	; 255
    3f3a:	8e 01       	movw	r16, r28
    3f3c:	0d 5b       	subi	r16, 0xBD	; 189
    3f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f40:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_11b_delta_uV = BP_11b_max_uV - BP_11b_min_uV;
	BP_11b_diff1_uV = BP_11b_max_uV - BP_11b_avg_uV;
	BP_11b_diff2_uV = BP_11b_avg_uV - BP_11b_min_uV;
	nop();
    3f44:	00 00       	nop

	// set filter for breakpoint 12
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 12a - collect sample from Channel 7 (ACC y-axis) with gain of 16
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_12a_avg_uV, &BP_12a_min_uV, &BP_12a_max_uV,
    3f46:	86 e0       	ldi	r24, 0x06	; 6
    3f48:	64 ec       	ldi	r22, 0xC4	; 196
    3f4a:	ae 01       	movw	r20, r28
    3f4c:	41 5c       	subi	r20, 0xC1	; 193
    3f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f50:	9e 01       	movw	r18, r28
    3f52:	25 5c       	subi	r18, 0xC5	; 197
    3f54:	3f 4f       	sbci	r19, 0xFF	; 255
    3f56:	8e 01       	movw	r16, r28
    3f58:	09 5c       	subi	r16, 0xC9	; 201
    3f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f5c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_12a_delta_uV = BP_12a_max_uV - BP_12a_min_uV;
	BP_12a_diff1_uV = BP_12a_max_uV - BP_12a_avg_uV;
	BP_12a_diff2_uV = BP_12a_avg_uV - BP_12a_min_uV;
	nop();
    3f60:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 12b - collect sample from Channel 7 (ACC y-axis) with gain of 16
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_12b_avg_uV, &BP_12b_min_uV, &BP_12b_max_uV,
    3f62:	86 e0       	ldi	r24, 0x06	; 6
    3f64:	64 ec       	ldi	r22, 0xC4	; 196
    3f66:	ae 01       	movw	r20, r28
    3f68:	4d 5c       	subi	r20, 0xCD	; 205
    3f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f6c:	9e 01       	movw	r18, r28
    3f6e:	21 5d       	subi	r18, 0xD1	; 209
    3f70:	3f 4f       	sbci	r19, 0xFF	; 255
    3f72:	8e 01       	movw	r16, r28
    3f74:	05 5d       	subi	r16, 0xD5	; 213
    3f76:	1f 4f       	sbci	r17, 0xFF	; 255
    3f78:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_12b_delta_uV = BP_12b_max_uV - BP_12b_min_uV;
	BP_12b_diff1_uV = BP_12b_max_uV - BP_12b_avg_uV;
	BP_12b_diff2_uV = BP_12b_avg_uV - BP_12b_min_uV;
	nop();
    3f7c:	00 00       	nop
	
	// set filter for breakpoint 13
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 13a - collect sample from Channel 8 (ACC z-axis) with gain of 16
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_13a_avg_uV, &BP_13a_min_uV, &BP_13a_max_uV,
    3f7e:	87 e0       	ldi	r24, 0x07	; 7
    3f80:	64 ec       	ldi	r22, 0xC4	; 196
    3f82:	ae 01       	movw	r20, r28
    3f84:	49 5d       	subi	r20, 0xD9	; 217
    3f86:	5f 4f       	sbci	r21, 0xFF	; 255
    3f88:	9e 01       	movw	r18, r28
    3f8a:	2d 5d       	subi	r18, 0xDD	; 221
    3f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f8e:	8e 01       	movw	r16, r28
    3f90:	01 5e       	subi	r16, 0xE1	; 225
    3f92:	1f 4f       	sbci	r17, 0xFF	; 255
    3f94:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_13a_delta_uV = BP_13a_max_uV - BP_13a_min_uV;
	BP_13a_diff1_uV = BP_13a_max_uV - BP_13a_avg_uV;
	BP_13a_diff2_uV = BP_13a_avg_uV - BP_13a_min_uV;
	nop();
    3f98:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 13b - collect sample from Channel 8 (ACC z-axis) with gain of 16
	// configure board resting lies flat with J1 facing down
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_13b_avg_uV, &BP_13b_min_uV, &BP_13b_max_uV,
    3f9a:	87 e0       	ldi	r24, 0x07	; 7
    3f9c:	64 ec       	ldi	r22, 0xC4	; 196
    3f9e:	ae 01       	movw	r20, r28
    3fa0:	45 5e       	subi	r20, 0xE5	; 229
    3fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa4:	9e 01       	movw	r18, r28
    3fa6:	29 5e       	subi	r18, 0xE9	; 233
    3fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    3faa:	8e 01       	movw	r16, r28
    3fac:	0d 5e       	subi	r16, 0xED	; 237
    3fae:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_13b_delta_uV = BP_13b_max_uV - BP_13b_min_uV;
	BP_13b_diff1_uV = BP_13b_max_uV - BP_13b_avg_uV;
	BP_13b_diff2_uV = BP_13b_avg_uV - BP_13b_min_uV;
	nop();
    3fb4:	00 00       	nop
    3fb6:	ff cf       	rjmp	.-2      	; 0x3fb6 <main+0x434>

00003fb8 <__mulsi3>:
    3fb8:	62 9f       	mul	r22, r18
    3fba:	d0 01       	movw	r26, r0
    3fbc:	73 9f       	mul	r23, r19
    3fbe:	f0 01       	movw	r30, r0
    3fc0:	82 9f       	mul	r24, r18
    3fc2:	e0 0d       	add	r30, r0
    3fc4:	f1 1d       	adc	r31, r1
    3fc6:	64 9f       	mul	r22, r20
    3fc8:	e0 0d       	add	r30, r0
    3fca:	f1 1d       	adc	r31, r1
    3fcc:	92 9f       	mul	r25, r18
    3fce:	f0 0d       	add	r31, r0
    3fd0:	83 9f       	mul	r24, r19
    3fd2:	f0 0d       	add	r31, r0
    3fd4:	74 9f       	mul	r23, r20
    3fd6:	f0 0d       	add	r31, r0
    3fd8:	65 9f       	mul	r22, r21
    3fda:	f0 0d       	add	r31, r0
    3fdc:	99 27       	eor	r25, r25
    3fde:	72 9f       	mul	r23, r18
    3fe0:	b0 0d       	add	r27, r0
    3fe2:	e1 1d       	adc	r30, r1
    3fe4:	f9 1f       	adc	r31, r25
    3fe6:	63 9f       	mul	r22, r19
    3fe8:	b0 0d       	add	r27, r0
    3fea:	e1 1d       	adc	r30, r1
    3fec:	f9 1f       	adc	r31, r25
    3fee:	bd 01       	movw	r22, r26
    3ff0:	cf 01       	movw	r24, r30
    3ff2:	11 24       	eor	r1, r1
    3ff4:	08 95       	ret

00003ff6 <__udivmodhi4>:
    3ff6:	aa 1b       	sub	r26, r26
    3ff8:	bb 1b       	sub	r27, r27
    3ffa:	51 e1       	ldi	r21, 0x11	; 17
    3ffc:	07 c0       	rjmp	.+14     	; 0x400c <__udivmodhi4_ep>

00003ffe <__udivmodhi4_loop>:
    3ffe:	aa 1f       	adc	r26, r26
    4000:	bb 1f       	adc	r27, r27
    4002:	a6 17       	cp	r26, r22
    4004:	b7 07       	cpc	r27, r23
    4006:	10 f0       	brcs	.+4      	; 0x400c <__udivmodhi4_ep>
    4008:	a6 1b       	sub	r26, r22
    400a:	b7 0b       	sbc	r27, r23

0000400c <__udivmodhi4_ep>:
    400c:	88 1f       	adc	r24, r24
    400e:	99 1f       	adc	r25, r25
    4010:	5a 95       	dec	r21
    4012:	a9 f7       	brne	.-22     	; 0x3ffe <__udivmodhi4_loop>
    4014:	80 95       	com	r24
    4016:	90 95       	com	r25
    4018:	bc 01       	movw	r22, r24
    401a:	cd 01       	movw	r24, r26
    401c:	08 95       	ret

0000401e <__divmodhi4>:
    401e:	97 fb       	bst	r25, 7
    4020:	09 2e       	mov	r0, r25
    4022:	07 26       	eor	r0, r23
    4024:	0a d0       	rcall	.+20     	; 0x403a <__divmodhi4_neg1>
    4026:	77 fd       	sbrc	r23, 7
    4028:	04 d0       	rcall	.+8      	; 0x4032 <__divmodhi4_neg2>
    402a:	e5 df       	rcall	.-54     	; 0x3ff6 <__udivmodhi4>
    402c:	06 d0       	rcall	.+12     	; 0x403a <__divmodhi4_neg1>
    402e:	00 20       	and	r0, r0
    4030:	1a f4       	brpl	.+6      	; 0x4038 <__divmodhi4_exit>

00004032 <__divmodhi4_neg2>:
    4032:	70 95       	com	r23
    4034:	61 95       	neg	r22
    4036:	7f 4f       	sbci	r23, 0xFF	; 255

00004038 <__divmodhi4_exit>:
    4038:	08 95       	ret

0000403a <__divmodhi4_neg1>:
    403a:	f6 f7       	brtc	.-4      	; 0x4038 <__divmodhi4_exit>
    403c:	90 95       	com	r25
    403e:	81 95       	neg	r24
    4040:	9f 4f       	sbci	r25, 0xFF	; 255
    4042:	08 95       	ret

00004044 <__udivmodsi4>:
    4044:	a1 e2       	ldi	r26, 0x21	; 33
    4046:	1a 2e       	mov	r1, r26
    4048:	aa 1b       	sub	r26, r26
    404a:	bb 1b       	sub	r27, r27
    404c:	fd 01       	movw	r30, r26
    404e:	0d c0       	rjmp	.+26     	; 0x406a <__udivmodsi4_ep>

00004050 <__udivmodsi4_loop>:
    4050:	aa 1f       	adc	r26, r26
    4052:	bb 1f       	adc	r27, r27
    4054:	ee 1f       	adc	r30, r30
    4056:	ff 1f       	adc	r31, r31
    4058:	a2 17       	cp	r26, r18
    405a:	b3 07       	cpc	r27, r19
    405c:	e4 07       	cpc	r30, r20
    405e:	f5 07       	cpc	r31, r21
    4060:	20 f0       	brcs	.+8      	; 0x406a <__udivmodsi4_ep>
    4062:	a2 1b       	sub	r26, r18
    4064:	b3 0b       	sbc	r27, r19
    4066:	e4 0b       	sbc	r30, r20
    4068:	f5 0b       	sbc	r31, r21

0000406a <__udivmodsi4_ep>:
    406a:	66 1f       	adc	r22, r22
    406c:	77 1f       	adc	r23, r23
    406e:	88 1f       	adc	r24, r24
    4070:	99 1f       	adc	r25, r25
    4072:	1a 94       	dec	r1
    4074:	69 f7       	brne	.-38     	; 0x4050 <__udivmodsi4_loop>
    4076:	60 95       	com	r22
    4078:	70 95       	com	r23
    407a:	80 95       	com	r24
    407c:	90 95       	com	r25
    407e:	9b 01       	movw	r18, r22
    4080:	ac 01       	movw	r20, r24
    4082:	bd 01       	movw	r22, r26
    4084:	cf 01       	movw	r24, r30
    4086:	08 95       	ret

00004088 <__divmodsi4>:
    4088:	97 fb       	bst	r25, 7
    408a:	09 2e       	mov	r0, r25
    408c:	05 26       	eor	r0, r21
    408e:	0e d0       	rcall	.+28     	; 0x40ac <__divmodsi4_neg1>
    4090:	57 fd       	sbrc	r21, 7
    4092:	04 d0       	rcall	.+8      	; 0x409c <__divmodsi4_neg2>
    4094:	d7 df       	rcall	.-82     	; 0x4044 <__udivmodsi4>
    4096:	0a d0       	rcall	.+20     	; 0x40ac <__divmodsi4_neg1>
    4098:	00 1c       	adc	r0, r0
    409a:	38 f4       	brcc	.+14     	; 0x40aa <__divmodsi4_exit>

0000409c <__divmodsi4_neg2>:
    409c:	50 95       	com	r21
    409e:	40 95       	com	r20
    40a0:	30 95       	com	r19
    40a2:	21 95       	neg	r18
    40a4:	3f 4f       	sbci	r19, 0xFF	; 255
    40a6:	4f 4f       	sbci	r20, 0xFF	; 255
    40a8:	5f 4f       	sbci	r21, 0xFF	; 255

000040aa <__divmodsi4_exit>:
    40aa:	08 95       	ret

000040ac <__divmodsi4_neg1>:
    40ac:	f6 f7       	brtc	.-4      	; 0x40aa <__divmodsi4_exit>
    40ae:	90 95       	com	r25
    40b0:	80 95       	com	r24
    40b2:	70 95       	com	r23
    40b4:	61 95       	neg	r22
    40b6:	7f 4f       	sbci	r23, 0xFF	; 255
    40b8:	8f 4f       	sbci	r24, 0xFF	; 255
    40ba:	9f 4f       	sbci	r25, 0xFF	; 255
    40bc:	08 95       	ret

000040be <__prologue_saves__>:
    40be:	2f 92       	push	r2
    40c0:	3f 92       	push	r3
    40c2:	4f 92       	push	r4
    40c4:	5f 92       	push	r5
    40c6:	6f 92       	push	r6
    40c8:	7f 92       	push	r7
    40ca:	8f 92       	push	r8
    40cc:	9f 92       	push	r9
    40ce:	af 92       	push	r10
    40d0:	bf 92       	push	r11
    40d2:	cf 92       	push	r12
    40d4:	df 92       	push	r13
    40d6:	ef 92       	push	r14
    40d8:	ff 92       	push	r15
    40da:	0f 93       	push	r16
    40dc:	1f 93       	push	r17
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	ca 1b       	sub	r28, r26
    40e8:	db 0b       	sbc	r29, r27
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	de bf       	out	0x3e, r29	; 62
    40ee:	19 94       	eijmp

000040f0 <__epilogue_restores__>:
    40f0:	2a 88       	ldd	r2, Y+18	; 0x12
    40f2:	39 88       	ldd	r3, Y+17	; 0x11
    40f4:	48 88       	ldd	r4, Y+16	; 0x10
    40f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    40f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    40fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    40fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    40fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4100:	aa 84       	ldd	r10, Y+10	; 0x0a
    4102:	b9 84       	ldd	r11, Y+9	; 0x09
    4104:	c8 84       	ldd	r12, Y+8	; 0x08
    4106:	df 80       	ldd	r13, Y+7	; 0x07
    4108:	ee 80       	ldd	r14, Y+6	; 0x06
    410a:	fd 80       	ldd	r15, Y+5	; 0x05
    410c:	0c 81       	ldd	r16, Y+4	; 0x04
    410e:	1b 81       	ldd	r17, Y+3	; 0x03
    4110:	aa 81       	ldd	r26, Y+2	; 0x02
    4112:	b9 81       	ldd	r27, Y+1	; 0x01
    4114:	ce 0f       	add	r28, r30
    4116:	d1 1d       	adc	r29, r1
    4118:	cd bf       	out	0x3d, r28	; 61
    411a:	de bf       	out	0x3e, r29	; 62
    411c:	ed 01       	movw	r28, r26
    411e:	08 95       	ret

00004120 <_exit>:
    4120:	f8 94       	cli

00004122 <__stop_program>:
    4122:	ff cf       	rjmp	.-2      	; 0x4122 <__stop_program>
