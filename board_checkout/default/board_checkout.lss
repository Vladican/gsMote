
board_checkout.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000657c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00802000  0000657c  00006610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f82  00802122  00802122  00006732  2**0
                  ALLOC
  3 .stab         00000e70  00000000  00000000  00006734  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002e1  00000000  00000000  000075a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000360  00000000  00000000  00007888  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000937c  00000000  00000000  00007be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dce  00000000  00000000  00010f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c4b  00000000  00000000  00012d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001794  00000000  00000000  00015980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004855  00000000  00000000  00017114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f9a  00000000  00000000  0001b969  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00022903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      38:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__vector_14>
      3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      40:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__vector_16>
      44:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_17>
      48:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_18>
      4c:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__vector_19>
      50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     100:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_64>
     104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     134:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__vector_77>
     138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     13c:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__vector_79>
     140:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__vector_80>
     144:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__vector_81>
     148:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__vector_82>
     14c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a0:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_104>
     1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001e8 <chb_err_init>:
     1e8:	52 41 44 49 4f 20 4e 4f 54 20 49 4e 49 54 49 41     RADIO NOT INITIA
     1f8:	4c 49 5a 45 44 20 50 52 4f 50 45 52 4c 59 0a 00     LIZED PROPERLY..

00000208 <chb_err_overflow>:
     208:	42 55 46 46 45 52 20 46 55 4c 4c 2e 20 54 4f 53     BUFFER FULL. TOS
     218:	53 49 4e 47 20 49 4e 43 4f 4d 49 4e 47 20 44 41     SING INCOMING DA
     228:	54 41 0a 00                                         TA..

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	df e5       	ldi	r29, 0x5F	; 95
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	ec e7       	ldi	r30, 0x7C	; 124
     244:	f5 e6       	ldi	r31, 0x65	; 101
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a2 32       	cpi	r26, 0x22	; 34
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	10 e5       	ldi	r17, 0x50	; 80
     258:	a2 e2       	ldi	r26, 0x22	; 34
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a4 3a       	cpi	r26, 0xA4	; 164
     262:	b1 07       	cpc	r27, r17
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <main>
     26a:	0c 94 bc 32 	jmp	0x6578	; 0x6578 <_exit>

0000026e <__bad_interrupt>:
     26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <chb_init>:

*/
/**************************************************************************/
void chb_init()
{
    memset(&pcb, 0, sizeof(pcb_t));
     272:	84 e1       	ldi	r24, 0x14	; 20
     274:	e2 e2       	ldi	r30, 0x22	; 34
     276:	f1 e2       	ldi	r31, 0x21	; 33
     278:	df 01       	movw	r26, r30
     27a:	1d 92       	st	X+, r1
     27c:	8a 95       	dec	r24
     27e:	e9 f7       	brne	.-6      	; 0x27a <chb_init+0x8>
    pcb.src_addr = chb_get_short_addr();
     280:	0e 94 3e 04 	call	0x87c	; 0x87c <chb_get_short_addr>
     284:	80 93 22 21 	sts	0x2122, r24
     288:	90 93 23 21 	sts	0x2123, r25
    chb_drvr_init();
     28c:	0e 94 ae 04 	call	0x95c	; 0x95c <chb_drvr_init>
}
     290:	08 95       	ret

00000292 <chb_get_pcb>:
*/
/**************************************************************************/
pcb_t *chb_get_pcb()
{
    return &pcb;
}
     292:	82 e2       	ldi	r24, 0x22	; 34
     294:	91 e2       	ldi	r25, 0x21	; 33
     296:	08 95       	ret

00000298 <chb_write>:
/*!

*/
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U8 len)
{
     298:	6f 92       	push	r6
     29a:	7f 92       	push	r7
     29c:	8f 92       	push	r8
     29e:	9f 92       	push	r9
     2a0:	bf 92       	push	r11
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	2a 97       	sbiw	r28, 0x0a	; 10
     2b8:	cd bf       	out	0x3d, r28	; 61
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	6c 01       	movw	r12, r24
     2be:	4b 01       	movw	r8, r22
     2c0:	14 2f       	mov	r17, r20
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    *hdr_ptr++ = CHB_FCF_BYTE_1;
     2c2:	38 e9       	ldi	r19, 0x98	; 152
     2c4:	b3 2e       	mov	r11, r19

    *hdr_ptr++ = pcb.seq++;

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
     2c6:	44 e3       	ldi	r20, 0x34	; 52
     2c8:	64 2e       	mov	r6, r20
     2ca:	42 e1       	ldi	r20, 0x12	; 18
     2cc:	74 2e       	mov	r7, r20
U8 chb_write(U16 addr, U8 *data, U8 len)
{
    U8 status, frm_len, hdr_len, hdr[CHB_HDR_SZ + 1];
    int rtry;
	
    while (len > 0)
     2ce:	68 c0       	rjmp	.+208    	; 0x3a0 <chb_write+0x108>
    {
        // calculate which frame len to use. if greater than max payload, split
        // up operation.
        frm_len = (len > CHB_MAX_PAYLOAD) ? CHB_MAX_PAYLOAD : len;
     2d0:	01 2f       	mov	r16, r17
     2d2:	15 36       	cpi	r17, 0x65	; 101
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <chb_write+0x40>
     2d6:	04 e6       	ldi	r16, 0x64	; 100
{
    U8 *hdr_ptr = hdr;

    // calc frame size and put in 0 position of array
    // frame size = hdr sz + payload len + fcs len
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;
     2d8:	80 2f       	mov	r24, r16
     2da:	85 5f       	subi	r24, 0xF5	; 245
     2dc:	89 83       	std	Y+1, r24	; 0x01

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
     2de:	8f ef       	ldi	r24, 0xFF	; 255
     2e0:	c8 16       	cp	r12, r24
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	d8 06       	cpc	r13, r24
     2e6:	11 f0       	breq	.+4      	; 0x2ec <chb_write+0x54>
     2e8:	81 e6       	ldi	r24, 0x61	; 97
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <chb_write+0x56>
     2ec:	81 e4       	ldi	r24, 0x41	; 65
     2ee:	8a 83       	std	Y+2, r24	; 0x02
    *hdr_ptr++ = CHB_FCF_BYTE_1;
     2f0:	bb 82       	std	Y+3, r11	; 0x03

    *hdr_ptr++ = pcb.seq++;
     2f2:	80 91 24 21 	lds	r24, 0x2124
     2f6:	8c 83       	std	Y+4, r24	; 0x04
     2f8:	8f 5f       	subi	r24, 0xFF	; 255
     2fa:	80 93 24 21 	sts	0x2124, r24

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
     2fe:	6d 82       	std	Y+5, r6	; 0x05
     300:	7e 82       	std	Y+6, r7	; 0x06
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = addr;
     302:	cf 82       	std	Y+7, r12	; 0x07
     304:	d8 86       	std	Y+8, r13	; 0x08
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = pcb.src_addr;
     306:	80 91 22 21 	lds	r24, 0x2122
     30a:	90 91 23 21 	lds	r25, 0x2123
     30e:	89 87       	std	Y+9, r24	; 0x09
     310:	9a 87       	std	Y+10, r25	; 0x0a
     312:	25 e1       	ldi	r18, 0x15	; 21
     314:	e2 2e       	mov	r14, r18
     316:	f1 2c       	mov	r15, r1
        hdr_len = chb_gen_hdr(hdr, addr, frm_len);

        // send data to chip
		rtry = 0;
		do{
        status = chb_tx(hdr, data, frm_len);			
     318:	ce 01       	movw	r24, r28
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	b4 01       	movw	r22, r8
     31e:	40 2f       	mov	r20, r16
     320:	0e 94 54 04 	call	0x8a8	; 0x8a8 <chb_tx>
            switch (status)
     324:	83 30       	cpi	r24, 0x03	; 3
     326:	f9 f0       	breq	.+62     	; 0x366 <chb_write+0xce>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	18 f4       	brcc	.+6      	; 0x332 <chb_write+0x9a>
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	29 f5       	brne	.+74     	; 0x37a <chb_write+0xe2>
     330:	04 c0       	rjmp	.+8      	; 0x33a <chb_write+0xa2>
     332:	85 30       	cpi	r24, 0x05	; 5
     334:	69 f0       	breq	.+26     	; 0x350 <chb_write+0xb8>
     336:	80 34       	cpi	r24, 0x40	; 64
     338:	01 f5       	brne	.+64     	; 0x37a <chb_write+0xe2>
            {
            case RADIO_SUCCESS:
                // fall through
            case CHB_SUCCESS_DATA_PENDING:
                pcb.txd_success++;
     33a:	20 91 29 21 	lds	r18, 0x2129
     33e:	30 91 2a 21 	lds	r19, 0x212A
     342:	2f 5f       	subi	r18, 0xFF	; 255
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	20 93 29 21 	sts	0x2129, r18
     34a:	30 93 2a 21 	sts	0x212A, r19
                break;
     34e:	15 c0       	rjmp	.+42     	; 0x37a <chb_write+0xe2>

            case CHB_NO_ACK:
                pcb.txd_noack++;
     350:	20 91 2b 21 	lds	r18, 0x212B
     354:	30 91 2c 21 	lds	r19, 0x212C
     358:	2f 5f       	subi	r18, 0xFF	; 255
     35a:	3f 4f       	sbci	r19, 0xFF	; 255
     35c:	20 93 2b 21 	sts	0x212B, r18
     360:	30 93 2c 21 	sts	0x212C, r19
                break;
     364:	0a c0       	rjmp	.+20     	; 0x37a <chb_write+0xe2>

            case CHB_CHANNEL_ACCESS_FAILURE:
                pcb.txd_channel_fail++;
     366:	20 91 2d 21 	lds	r18, 0x212D
     36a:	30 91 2e 21 	lds	r19, 0x212E
     36e:	2f 5f       	subi	r18, 0xFF	; 255
     370:	3f 4f       	sbci	r19, 0xFF	; 255
     372:	20 93 2d 21 	sts	0x212D, r18
     376:	30 93 2e 21 	sts	0x212E, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	e7 ea       	ldi	r30, 0xA7	; 167
     37c:	f1 e6       	ldi	r31, 0x61	; 97
     37e:	31 97       	sbiw	r30, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <chb_write+0xe6>
     382:	00 c0       	rjmp	.+0      	; 0x384 <chb_write+0xec>
     384:	00 00       	nop
     386:	08 94       	sec
     388:	e1 08       	sbc	r14, r1
     38a:	f1 08       	sbc	r15, r1

            default:
                break;
            }
			if(rtry>=0) _delay_ms(100);		//if not successfully sent the first time, wait some time and try again
			if(rtry==20) return status;;		//after 20 tries give up on sending the message
     38c:	e1 14       	cp	r14, r1
     38e:	f1 04       	cpc	r15, r1
     390:	59 f0       	breq	.+22     	; 0x3a8 <chb_write+0x110>
			rtry++;	
		} while(status != CHB_SUCCESS);			
     392:	88 23       	and	r24, r24
     394:	09 f6       	brne	.-126    	; 0x318 <chb_write+0x80>
        // adjust len and restart
        len = len - frm_len;
     396:	10 1b       	sub	r17, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     398:	f1 e2       	ldi	r31, 0x21	; 33
     39a:	fa 95       	dec	r31
     39c:	f1 f7       	brne	.-4      	; 0x39a <chb_write+0x102>
     39e:	00 00       	nop
U8 chb_write(U16 addr, U8 *data, U8 len)
{
    U8 status, frm_len, hdr_len, hdr[CHB_HDR_SZ + 1];
    int rtry;
	
    while (len > 0)
     3a0:	11 23       	and	r17, r17
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <chb_write+0x10e>
     3a4:	95 cf       	rjmp	.-214    	; 0x2d0 <chb_write+0x38>
		} while(status != CHB_SUCCESS);			
        // adjust len and restart
        len = len - frm_len;
		_delay_us(100);				//wait a little before sending next message
    }
    return CHB_SUCCESS;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
}
     3a8:	2a 96       	adiw	r28, 0x0a	; 10
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	cf 90       	pop	r12
     3be:	bf 90       	pop	r11
     3c0:	9f 90       	pop	r9
     3c2:	8f 90       	pop	r8
     3c4:	7f 90       	pop	r7
     3c6:	6f 90       	pop	r6
     3c8:	08 95       	ret

000003ca <chb_read>:
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
{
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	8c 01       	movw	r16, r24

    data_ptr = rx->data;

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
     3da:	0e 94 55 02 	call	0x4aa	; 0x4aa <chb_buf_read>
     3de:	d8 2e       	mov	r13, r24
     3e0:	87 fd       	sbrc	r24, 7
     3e2:	40 c0       	rjmp	.+128    	; 0x464 <chb_read+0x9a>
    {
        return 0;
    }
    *data_ptr++ = len;
     3e4:	f8 01       	movw	r30, r16
     3e6:	85 83       	std	Z+5, r24	; 0x05
     3e8:	e8 01       	movw	r28, r16
     3ea:	26 96       	adiw	r28, 0x06	; 6
     3ec:	7e 01       	movw	r14, r28

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
     3ee:	05 c0       	rjmp	.+10     	; 0x3fa <chb_read+0x30>
    {
        *data_ptr++ = chb_buf_read();
     3f0:	0e 94 55 02 	call	0x4aa	; 0x4aa <chb_buf_read>
     3f4:	f7 01       	movw	r30, r14
     3f6:	81 93       	st	Z+, r24
     3f8:	7f 01       	movw	r14, r30
        return 0;
    }
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
     3fa:	8e 2d       	mov	r24, r14
     3fc:	8c 1b       	sub	r24, r28
     3fe:	8d 15       	cp	r24, r13
     400:	b8 f3       	brcs	.-18     	; 0x3f0 <chb_read+0x26>
    // we'll use it as temp storage to parse the frame. then move the frame
    // down so that only the payload will be in the buffer.

    // extract the sequence number
    data_ptr = rx->data + 3;    // location of sequence number
    seq = *data_ptr;
     402:	f8 01       	movw	r30, r16
     404:	c0 85       	ldd	r28, Z+8	; 0x08

    // parse the buffer and extract the dest and src addresses
    data_ptr = rx->data + 6;                // location of dest addr
    rx->dest_addr = *(U16 *)data_ptr;
     406:	83 85       	ldd	r24, Z+11	; 0x0b
     408:	94 85       	ldd	r25, Z+12	; 0x0c
     40a:	83 83       	std	Z+3, r24	; 0x03
     40c:	94 83       	std	Z+4, r25	; 0x04
    data_ptr += sizeof(U16);
    rx->src_addr = *(U16 *)data_ptr;
     40e:	85 85       	ldd	r24, Z+13	; 0x0d
     410:	96 85       	ldd	r25, Z+14	; 0x0e
     412:	81 83       	std	Z+1, r24	; 0x01
     414:	92 83       	std	Z+2, r25	; 0x02
    data_ptr += sizeof(U16);

    // if the data in the rx buf is 0, then clear the rx_flag. otherwise, keep it raised
    if (!chb_buf_get_len())
     416:	0e 94 68 02 	call	0x4d0	; 0x4d0 <chb_buf_get_len>
     41a:	88 23       	and	r24, r24
     41c:	11 f4       	brne	.+4      	; 0x422 <chb_read+0x58>
    {
        pcb.data_rcv = false;
     41e:	10 92 25 21 	sts	0x2125, r1
#else
    // duplicate frame check (dupe check). we want to remove frames that have been already been received since they 
    // are just retries. 
    // note: this dupe check only removes duplicate frames from the previous transfer. if another frame from a different
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
     422:	20 91 00 20 	lds	r18, 0x2000
     426:	f8 01       	movw	r30, r16
     428:	81 81       	ldd	r24, Z+1	; 0x01
     42a:	92 81       	ldd	r25, Z+2	; 0x02
     42c:	c2 17       	cp	r28, r18
     42e:	39 f4       	brne	.+14     	; 0x43e <chb_read+0x74>
     430:	20 91 01 20 	lds	r18, 0x2001
     434:	30 91 02 20 	lds	r19, 0x2002
     438:	82 17       	cp	r24, r18
     43a:	93 07       	cpc	r25, r19
     43c:	99 f0       	breq	.+38     	; 0x464 <chb_read+0x9a>
        // it properly. discard.
        return 0;
    }
    else
    {
        prev_seq = seq;
     43e:	c0 93 00 20 	sts	0x2000, r28
        prev_src_addr = rx->src_addr;
     442:	80 93 01 20 	sts	0x2001, r24
     446:	90 93 02 20 	sts	0x2002, r25
    }

    // move the payload down to the beginning of the data buffer
    //memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	memmove(rx, data_ptr, len - CHB_HDR_SZ);
     44a:	b8 01       	movw	r22, r16
     44c:	61 5f       	subi	r22, 0xF1	; 241
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	4d 2d       	mov	r20, r13
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	49 50       	subi	r20, 0x09	; 9
     456:	50 40       	sbci	r21, 0x00	; 0
     458:	c8 01       	movw	r24, r16
     45a:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <memmove>
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
     45e:	8d 2d       	mov	r24, r13
     460:	8b 50       	subi	r24, 0x0B	; 11
     462:	01 c0       	rjmp	.+2      	; 0x466 <chb_read+0x9c>
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    {
        // this is a duplicate frame from a retry. the remote node thinks we didn't receive 
        // it properly. discard.
        return 0;
     464:	80 e0       	ldi	r24, 0x00	; 0
    //memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	memmove(rx, data_ptr, len - CHB_HDR_SZ);
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
#endif
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	08 95       	ret

00000476 <chb_buf_init>:

*/
/**************************************************************************/
void chb_buf_init()
{
    rd_ptr = 0;
     476:	10 92 36 21 	sts	0x2136, r1
    wr_ptr = 0;
     47a:	10 92 37 21 	sts	0x2137, r1
    len = 0;
     47e:	10 92 38 21 	sts	0x2138, r1
}
     482:	08 95       	ret

00000484 <chb_buf_write>:

*/
/**************************************************************************/
void chb_buf_write(U8 data)
{
    chb_buf[wr_ptr] = data;
     484:	20 91 37 21 	lds	r18, 0x2137
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	f9 01       	movw	r30, r18
     48c:	e7 5c       	subi	r30, 0xC7	; 199
     48e:	fe 4d       	sbci	r31, 0xDE	; 222
     490:	80 83       	st	Z, r24
    wr_ptr = (wr_ptr + 1) % CHB_BUF_SZ;
     492:	2f 5f       	subi	r18, 0xFF	; 255
     494:	3f 4f       	sbci	r19, 0xFF	; 255
     496:	2f 77       	andi	r18, 0x7F	; 127
     498:	30 70       	andi	r19, 0x00	; 0
     49a:	20 93 37 21 	sts	0x2137, r18
    len++;
     49e:	80 91 38 21 	lds	r24, 0x2138
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 38 21 	sts	0x2138, r24
}
     4a8:	08 95       	ret

000004aa <chb_buf_read>:
/**************************************************************************/
U8 chb_buf_read()
{
    U8 data;

    data = chb_buf[rd_ptr];
     4aa:	20 91 36 21 	lds	r18, 0x2136
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	f9 01       	movw	r30, r18
     4b2:	e7 5c       	subi	r30, 0xC7	; 199
     4b4:	fe 4d       	sbci	r31, 0xDE	; 222
     4b6:	80 81       	ld	r24, Z
    rd_ptr = (rd_ptr + 1) % CHB_BUF_SZ;
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	2f 77       	andi	r18, 0x7F	; 127
     4be:	30 70       	andi	r19, 0x00	; 0
     4c0:	20 93 36 21 	sts	0x2136, r18
    len--;
     4c4:	90 91 38 21 	lds	r25, 0x2138
     4c8:	91 50       	subi	r25, 0x01	; 1
     4ca:	90 93 38 21 	sts	0x2138, r25
    return data;
}
     4ce:	08 95       	ret

000004d0 <chb_buf_get_len>:
*/
/**************************************************************************/
U8 chb_buf_get_len()
{
    return len;
}
     4d0:	80 91 38 21 	lds	r24, 0x2138
     4d4:	08 95       	ret

000004d6 <chb_reg_read>:
/*!

*/
/**************************************************************************/
U8 chb_reg_read(U8 addr)
{
     4d6:	cf 93       	push	r28
     4d8:	c8 2f       	mov	r28, r24
    U8 val = 0;

    /* Add the register read command to the register address. */
    addr |= 0x80;

    CHB_ENTER_CRIT();
     4da:	8f b7       	in	r24, 0x3f	; 63
     4dc:	80 93 bf 21 	sts	0x21BF, r24
     4e0:	f8 94       	cli
    RadioCS(TRUE);
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>

    /*Send Register address and read register content.*/
    val = SPID_write(addr);
     4e8:	8c 2f       	mov	r24, r28
     4ea:	80 68       	ori	r24, 0x80	; 128
     4ec:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
    val = SPID_write(val);
     4f0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
     4f4:	c8 2f       	mov	r28, r24

    RadioCS(FALSE);
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>
    CHB_LEAVE_CRIT();
     4fc:	80 91 bf 21 	lds	r24, 0x21BF
     500:	8f bf       	out	0x3f, r24	; 63
     502:	78 94       	sei

    return val;
}
     504:	8c 2f       	mov	r24, r28
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <chb_get_state>:

*/
/**************************************************************************/
static U8 chb_get_state()
{
    return chb_reg_read(TRX_STATUS) & 0x1f;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
}
     510:	8f 71       	andi	r24, 0x1F	; 31
     512:	08 95       	ret

00000514 <chb_reset>:

*/
/**************************************************************************/
void chb_reset()
{
    CHB_RST_DISABLE();
     514:	80 91 64 06 	lds	r24, 0x0664
     518:	81 60       	ori	r24, 0x01	; 1
     51a:	80 93 64 06 	sts	0x0664, r24
    CHB_SLPTR_DISABLE();
     51e:	80 91 64 06 	lds	r24, 0x0664
     522:	8d 7f       	andi	r24, 0xFD	; 253
     524:	80 93 64 06 	sts	0x0664, r24
     528:	8e e7       	ldi	r24, 0x7E	; 126
     52a:	8a 95       	dec	r24
     52c:	f1 f7       	brne	.-4      	; 0x52a <chb_reset+0x16>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <chb_reset+0x1c>

    // wait a bit while transceiver wakes up
    _delay_us(TIME_P_ON_TO_CLKM_AVAIL);

    // reset the device
    CHB_RST_ENABLE();
     530:	80 91 64 06 	lds	r24, 0x0664
     534:	8e 7f       	andi	r24, 0xFE	; 254
     536:	80 93 64 06 	sts	0x0664, r24
     53a:	00 00       	nop
    _delay_us(TIME_RST_PULSE_WIDTH);
    CHB_RST_DISABLE();
     53c:	80 91 64 06 	lds	r24, 0x0664
     540:	81 60       	ori	r24, 0x01	; 1
     542:	80 93 64 06 	sts	0x0664, r24
    while (1)
    {
        // if you're stuck in this loop, that means that you're not reading
        // the version and part number register correctly. possible that version number
        // changes. if so, update version num in header file
        if ((chb_reg_read(VERSION_NUM) == CHB_AT86RF212_VER_NUM) && (chb_reg_read(PART_NUM) == CHB_AT86RF212_PART_NUM)) 
     546:	8d e1       	ldi	r24, 0x1D	; 29
     548:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	d9 f7       	brne	.-10     	; 0x546 <chb_reset+0x32>
     550:	8c e1       	ldi	r24, 0x1C	; 28
     552:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
     556:	87 30       	cpi	r24, 0x07	; 7
     558:	b1 f7       	brne	.-20     	; 0x546 <chb_reset+0x32>
            break;
        }
    }
	

}
     55a:	08 95       	ret

0000055c <chb_reg_read16>:
/*! 
 
*/
/**************************************************************************/
U16 chb_reg_read16(U8 addr)
{
     55c:	cf 93       	push	r28
     55e:	c8 2f       	mov	r28, r24
    U8 i;
    U16 val = 0;

    for (i=0; i<2; i++)
    {
        addr |= chb_reg_read(addr + i) << (8 * i);
     560:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
     564:	8c 2b       	or	r24, r28
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
    }
    return val;
}
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <chb_reg_write>:
/*!

*/
/**************************************************************************/
void chb_reg_write(U8 addr, U8 val)
{
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	0f 92       	push	r0
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	18 2f       	mov	r17, r24
    U8 dummy; 

    /* Add the Register Write command to the address. */
    addr |= 0xC0;

    CHB_ENTER_CRIT();
     582:	8f b7       	in	r24, 0x3f	; 63
     584:	80 93 bf 21 	sts	0x21BF, r24
     588:	f8 94       	cli
    RadioCS(TRUE);
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	69 83       	std	Y+1, r22	; 0x01
     58e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>

    /*Send Register address and write register content.*/
    dummy = SPID_write(addr);
     592:	81 2f       	mov	r24, r17
     594:	80 6c       	ori	r24, 0xC0	; 192
     596:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
    dummy = SPID_write(val);
     59a:	69 81       	ldd	r22, Y+1	; 0x01
     59c:	86 2f       	mov	r24, r22
     59e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>

    RadioCS(FALSE);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>
    CHB_LEAVE_CRIT();
     5a8:	80 91 bf 21 	lds	r24, 0x21BF
     5ac:	8f bf       	out	0x3f, r24	; 63
     5ae:	78 94       	sei
}
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	08 95       	ret

000005ba <chb_reg_write16>:
/*!

*/
/**************************************************************************/
void chb_reg_write16(U8 addr, U16 val)
{
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	0f 92       	push	r0
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	18 2f       	mov	r17, r24
    U8 i;

    for (i=0; i<2; i++)
    {
        chb_reg_write(addr + i, val >> (8 * i));
     5c8:	79 83       	std	Y+1, r23	; 0x01
     5ca:	0e 94 ba 02 	call	0x574	; 0x574 <chb_reg_write>
     5ce:	81 2f       	mov	r24, r17
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	79 81       	ldd	r23, Y+1	; 0x01
     5d4:	67 2f       	mov	r22, r23
     5d6:	0e 94 ba 02 	call	0x574	; 0x574 <chb_reg_write>
    }
}
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	08 95       	ret

000005e4 <chb_reg_write64>:
/*!

*/
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	18 2f       	mov	r17, r24
    U8 i;

    for (i=0; i<8; i++)
     5ee:	eb 01       	movw	r28, r22
     5f0:	00 e0       	ldi	r16, 0x00	; 0
    {
        chb_reg_write(addr + i, *(val + i));
     5f2:	69 91       	ld	r22, Y+
     5f4:	80 2f       	mov	r24, r16
     5f6:	81 0f       	add	r24, r17
     5f8:	0e 94 ba 02 	call	0x574	; 0x574 <chb_reg_write>
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    U8 i;

    for (i=0; i<8; i++)
     5fc:	0f 5f       	subi	r16, 0xFF	; 255
     5fe:	08 30       	cpi	r16, 0x08	; 8
     600:	c1 f7       	brne	.-16     	; 0x5f2 <chb_reg_write64+0xe>
    {
        chb_reg_write(addr + i, *(val + i));
    }
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	08 95       	ret

0000060c <chb_reg_read_mod_write>:
/*!

*/
/**************************************************************************/
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	0f 92       	push	r0
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	18 2f       	mov	r17, r24
     61c:	06 2f       	mov	r16, r22
    U8 tmp;

    tmp = chb_reg_read(addr);
     61e:	49 83       	std	Y+1, r20	; 0x01
     620:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
    val &= mask;                // mask off stray bits from val
    tmp &= ~mask;               // mask off bits in reg val
     624:	49 81       	ldd	r20, Y+1	; 0x01
     626:	64 2f       	mov	r22, r20
     628:	60 95       	com	r22
     62a:	68 23       	and	r22, r24
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    U8 tmp;

    tmp = chb_reg_read(addr);
    val &= mask;                // mask off stray bits from val
     62c:	40 23       	and	r20, r16
    tmp &= ~mask;               // mask off bits in reg val
    tmp |= val;                 // copy val into reg val
     62e:	64 2b       	or	r22, r20
    chb_reg_write(addr, tmp);   // write back to reg
     630:	81 2f       	mov	r24, r17
     632:	0e 94 ba 02 	call	0x574	; 0x574 <chb_reg_write>
}
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	08 95       	ret

00000642 <chb_frame_write>:
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
{
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	0f 92       	push	r0
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	18 2f       	mov	r17, r24
     65c:	06 2f       	mov	r16, r22
     65e:	f4 2e       	mov	r15, r20
     660:	e5 2e       	mov	r14, r21
     662:	d2 2e       	mov	r13, r18
    U8 i, dummy;

    // dont allow transmission longer than max frame size
    if ((hdr_len + data_len) > 127)
     664:	e2 2f       	mov	r30, r18
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	e6 0f       	add	r30, r22
     66a:	f1 1d       	adc	r31, r1
     66c:	e0 38       	cpi	r30, 0x80	; 128
     66e:	f1 05       	cpc	r31, r1
     670:	5c f5       	brge	.+86     	; 0x6c8 <chb_frame_write+0x86>
    {
        return;
    }

    // initiate spi transaction
    CHB_ENTER_CRIT();
     672:	8f b7       	in	r24, 0x3f	; 63
     674:	80 93 bf 21 	sts	0x21BF, r24
     678:	f8 94       	cli
    RadioCS(TRUE); 
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	99 83       	std	Y+1, r25	; 0x01
     67e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>

    // send fifo write command
    dummy = SPID_write(CHB_SPI_CMD_FW);
     682:	80 e6       	ldi	r24, 0x60	; 96
     684:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
     688:	a1 2e       	mov	r10, r17
     68a:	99 81       	ldd	r25, Y+1	; 0x01
     68c:	b9 2e       	mov	r11, r25
     68e:	05 c0       	rjmp	.+10     	; 0x69a <chb_frame_write+0x58>
    {
        dummy = SPID_write(*hdr++);
     690:	f5 01       	movw	r30, r10
     692:	81 91       	ld	r24, Z+
     694:	5f 01       	movw	r10, r30
     696:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>

    // send fifo write command
    dummy = SPID_write(CHB_SPI_CMD_FW);

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
     69a:	8a 2d       	mov	r24, r10
     69c:	81 1b       	sub	r24, r17
     69e:	80 17       	cp	r24, r16
     6a0:	b8 f3       	brcs	.-18     	; 0x690 <chb_frame_write+0x4e>
     6a2:	0f 2d       	mov	r16, r15
     6a4:	1e 2d       	mov	r17, r14
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <chb_frame_write+0x70>
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    {
        dummy = SPID_write(*data++);
     6a8:	f8 01       	movw	r30, r16
     6aa:	81 91       	ld	r24, Z+
     6ac:	8f 01       	movw	r16, r30
     6ae:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
    {
        dummy = SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
     6b2:	80 2f       	mov	r24, r16
     6b4:	8f 19       	sub	r24, r15
     6b6:	8d 15       	cp	r24, r13
     6b8:	b8 f3       	brcs	.-18     	; 0x6a8 <chb_frame_write+0x66>
    {
        dummy = SPID_write(*data++);
    }

    // terminate spi transaction
    RadioCS(FALSE); 
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>
    CHB_LEAVE_CRIT();
     6c0:	80 91 bf 21 	lds	r24, 0x21BF
     6c4:	8f bf       	out	0x3f, r24	; 63
     6c6:	78 94       	sei
}
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	bf 90       	pop	r11
     6da:	af 90       	pop	r10
     6dc:	08 95       	ret

000006de <chb_set_mode>:
    Set the channel mode, BPSK, OQPSK, etc...
*/
/**************************************************************************/
void chb_set_mode(U8 mode)
{
    switch (mode)
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	51 f0       	breq	.+20     	; 0x6f6 <chb_set_mode+0x18>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	28 f0       	brcs	.+10     	; 0x6f0 <chb_set_mode+0x12>
     6e6:	82 30       	cpi	r24, 0x02	; 2
     6e8:	49 f0       	breq	.+18     	; 0x6fc <chb_set_mode+0x1e>
     6ea:	83 30       	cpi	r24, 0x03	; 3
     6ec:	e1 f4       	brne	.+56     	; 0x726 <chb_set_mode+0x48>
     6ee:	11 c0       	rjmp	.+34     	; 0x712 <chb_set_mode+0x34>
    {
    case OQPSK_868MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x08, 0x3f);                 // 802.15.4-2006, channel page 2, channel 0 (868 MHz, Europe)
     6f0:	8c e0       	ldi	r24, 0x0C	; 12
     6f2:	68 e0       	ldi	r22, 0x08	; 8
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <chb_set_mode+0x22>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
        break;
    case OQPSK_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);                 // 802.15.4-2006, channel page 2, channels 1-10 (915 MHz, US)
     6f6:	8c e0       	ldi	r24, 0x0C	; 12
     6f8:	6c e0       	ldi	r22, 0x0C	; 12
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <chb_set_mode+0x22>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
        break;
    case OQPSK_780MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x1c, 0x3f);                 // 802.15.4-2006, channel page 5, channel 0-3 (780 MHz, China)
     6fc:	8c e0       	ldi	r24, 0x0C	; 12
     6fe:	6c e1       	ldi	r22, 0x1C	; 28
     700:	4f e3       	ldi	r20, 0x3F	; 63
     702:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
     706:	86 e1       	ldi	r24, 0x16	; 22
     708:	62 e0       	ldi	r22, 0x02	; 2
     70a:	43 e0       	ldi	r20, 0x03	; 3
     70c:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>
        break;
     710:	08 95       	ret
    case BPSK40_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x00, 0x3f);                 // 802.15.4-2006, BPSK, 40 kbps
     712:	8c e0       	ldi	r24, 0x0C	; 12
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	4f e3       	ldi	r20, 0x3F	; 63
     718:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_BPSK_TX_OFFSET, 0x3);     // this is according to table 7-16 in at86rf212 datasheet
     71c:	86 e1       	ldi	r24, 0x16	; 22
     71e:	63 e0       	ldi	r22, 0x03	; 3
     720:	43 e0       	ldi	r20, 0x03	; 3
     722:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>
     726:	08 95       	ret

00000728 <chb_set_channel>:
/*!

*/
/**************************************************************************/
U8 chb_set_channel(U8 channel)
{
     728:	cf 93       	push	r28
     72a:	c8 2f       	mov	r28, r24
    //    {
    //        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);
    //    }
    //}
        
    chb_reg_read_mod_write(PHY_CC_CCA, channel, 0x1f); 
     72c:	88 e0       	ldi	r24, 0x08	; 8
     72e:	6c 2f       	mov	r22, r28
     730:	4f e1       	ldi	r20, 0x1F	; 31
     732:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>
#endif

    // add a delay to allow the PLL to lock if in active mode.
    state = chb_get_state();
     736:	0e 94 85 02 	call	0x50a	; 0x50a <chb_get_state>
    if ((state == CHB_RX_ON) || (state == CHB_PLL_ON))
     73a:	86 30       	cpi	r24, 0x06	; 6
     73c:	11 f0       	breq	.+4      	; 0x742 <chb_set_channel+0x1a>
     73e:	89 30       	cpi	r24, 0x09	; 9
     740:	21 f4       	brne	.+8      	; 0x74a <chb_set_channel+0x22>
     742:	84 e2       	ldi	r24, 0x24	; 36
     744:	8a 95       	dec	r24
     746:	f1 f7       	brne	.-4      	; 0x744 <chb_set_channel+0x1c>
     748:	00 c0       	rjmp	.+0      	; 0x74a <chb_set_channel+0x22>
    {
        _delay_us(TIME_PLL_LOCK_TIME);
    }

    return ((chb_reg_read(PHY_CC_CCA) & 0x1f) == channel) ? RADIO_SUCCESS : RADIO_TIMED_OUT;
     74a:	88 e0       	ldi	r24, 0x08	; 8
     74c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
     750:	28 2f       	mov	r18, r24
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	2f 71       	andi	r18, 0x1F	; 31
     756:	30 70       	andi	r19, 0x00	; 0
     758:	8c 2f       	mov	r24, r28
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	28 17       	cp	r18, r24
     75e:	39 07       	cpc	r19, r25
     760:	11 f4       	brne	.+4      	; 0x766 <chb_set_channel+0x3e>
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	01 c0       	rjmp	.+2      	; 0x768 <chb_set_channel+0x40>
     766:	83 e4       	ldi	r24, 0x43	; 67
}
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <chb_set_pwr>:
/*!
    Set the power level
*/
/**************************************************************************/
void chb_set_pwr(U8 val)
{
     76c:	68 2f       	mov	r22, r24
    chb_reg_write(PHY_TX_PWR, val);
     76e:	85 e0       	ldi	r24, 0x05	; 5
     770:	0e 94 ba 02 	call	0x574	; 0x574 <chb_reg_write>
}
     774:	08 95       	ret

00000776 <chb_set_state>:
    for certain operations. Check the datasheet for more details on the state 
    machine and manipulations.
*/
/**************************************************************************/
U8 chb_set_state(U8 state)
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	c8 2f       	mov	r28, r24
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
     77c:	80 91 64 06 	lds	r24, 0x0664
     780:	81 fd       	sbrc	r24, 1
     782:	38 c0       	rjmp	.+112    	; 0x7f4 <chb_set_state+0x7e>
    {
        return RADIO_WRONG_STATE;
    }

    // if we're in a transition state, wait for the state to become stable
    curr_state = chb_get_state();
     784:	0e 94 85 02 	call	0x50a	; 0x50a <chb_get_state>
     788:	d8 2f       	mov	r29, r24
    if ((curr_state == CHB_BUSY_TX_ARET) || (curr_state == CHB_BUSY_RX_AACK) || (curr_state == CHB_BUSY_RX) || (curr_state == CHB_BUSY_TX))
     78a:	81 51       	subi	r24, 0x11	; 17
     78c:	82 30       	cpi	r24, 0x02	; 2
     78e:	20 f0       	brcs	.+8      	; 0x798 <chb_set_state+0x22>
     790:	d1 30       	cpi	r29, 0x01	; 1
     792:	11 f0       	breq	.+4      	; 0x798 <chb_set_state+0x22>
     794:	d2 30       	cpi	r29, 0x02	; 2
     796:	21 f4       	brne	.+8      	; 0x7a0 <chb_set_state+0x2a>
    {
        while (chb_get_state() == curr_state);
     798:	0e 94 85 02 	call	0x50a	; 0x50a <chb_get_state>
     79c:	8d 17       	cp	r24, r29
     79e:	e1 f3       	breq	.-8      	; 0x798 <chb_set_state+0x22>
    }

    // At this point it is clear that the requested new_state is:
    // TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
    // we need to handle some special cases before we transition to the new state
    switch (state)
     7a0:	c6 31       	cpi	r28, 0x16	; 22
     7a2:	79 f0       	breq	.+30     	; 0x7c2 <chb_set_state+0x4c>
     7a4:	c9 31       	cpi	r28, 0x19	; 25
     7a6:	51 f0       	breq	.+20     	; 0x7bc <chb_set_state+0x46>
     7a8:	c8 30       	cpi	r28, 0x08	; 8
     7aa:	99 f4       	brne	.+38     	; 0x7d2 <chb_set_state+0x5c>
    {
    case CHB_TRX_OFF:
        /* Go to TRX_OFF from any state. */
        CHB_SLPTR_DISABLE();
     7ac:	80 91 64 06 	lds	r24, 0x0664
     7b0:	8d 7f       	andi	r24, 0xFD	; 253
     7b2:	80 93 64 06 	sts	0x0664, r24
        chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1f);
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	63 e0       	ldi	r22, 0x03	; 3
     7ba:	07 c0       	rjmp	.+14     	; 0x7ca <chb_set_state+0x54>
        _delay_us(TIME_ALL_STATES_TRX_OFF);
        break;

    case CHB_TX_ARET_ON:
        if (curr_state == CHB_RX_AACK_ON)
     7bc:	d6 31       	cpi	r29, 0x16	; 22
     7be:	49 f4       	brne	.+18     	; 0x7d2 <chb_set_state+0x5c>
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <chb_set_state+0x50>
            _delay_us(TIME_RX_ON_PLL_ON);
        }
        break;

    case CHB_RX_AACK_ON:
        if (curr_state == CHB_TX_ARET_ON)
     7c2:	d9 31       	cpi	r29, 0x19	; 25
     7c4:	31 f4       	brne	.+12     	; 0x7d2 <chb_set_state+0x5c>
        {
            /* First do intermediate state transition to RX_ON, then to RX_AACK_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	69 e0       	ldi	r22, 0x09	; 9
     7ca:	4f e1       	ldi	r20, 0x1F	; 31
     7cc:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>
     7d0:	00 00       	nop
        }
        break;
    }

    /* Now we're okay to transition to any new state. */
    chb_reg_read_mod_write(TRX_STATE, state, 0x1f);
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	6c 2f       	mov	r22, r28
     7d6:	4f e1       	ldi	r20, 0x1F	; 31
     7d8:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>
     7dc:	84 e2       	ldi	r24, 0x24	; 36
     7de:	8a 95       	dec	r24
     7e0:	f1 f7       	brne	.-4      	; 0x7de <chb_set_state+0x68>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <chb_set_state+0x6e>

    /* When the PLL is active most states can be reached in 1us. However, from */
    /* TRX_OFF the PLL needs time to activate. */
    _delay_us(TIME_TRX_OFF_PLL_ON);

    if (chb_get_state() == state)
     7e4:	0e 94 85 02 	call	0x50a	; 0x50a <chb_get_state>
     7e8:	8c 17       	cp	r24, r28
     7ea:	11 f4       	brne	.+4      	; 0x7f0 <chb_set_state+0x7a>
    {
        return RADIO_SUCCESS;
     7ec:	80 e4       	ldi	r24, 0x40	; 64
     7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <chb_set_state+0x80>
    }
    return RADIO_TIMED_OUT;
     7f0:	83 e4       	ldi	r24, 0x43	; 67
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <chb_set_state+0x80>
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    {
        return RADIO_WRONG_STATE;
     7f4:	84 e4       	ldi	r24, 0x44	; 68
    if (chb_get_state() == state)
    {
        return RADIO_SUCCESS;
    }
    return RADIO_TIMED_OUT;
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <chb_set_ieee_addr>:
/*! 
 
*/
/**************************************************************************/
void chb_set_ieee_addr(U8 *addr)
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
    chb_eeprom_write(CHB_EEPROM_IEEE_ADDR, addr, 8); 
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	be 01       	movw	r22, r28
     808:	48 e0       	ldi	r20, 0x08	; 8
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	0e 94 89 06 	call	0xd12	; 0xd12 <chb_eeprom_write>
    chb_reg_write64(IEEE_ADDR_0, addr); 
     810:	84 e2       	ldi	r24, 0x24	; 36
     812:	be 01       	movw	r22, r28
     814:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <chb_reg_write64>
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <chb_get_ieee_addr>:
/*!

*/
/**************************************************************************/
void chb_get_ieee_addr(U8 *addr)
{
     81e:	bc 01       	movw	r22, r24
    chb_eeprom_read(CHB_EEPROM_IEEE_ADDR, addr, 8);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	48 e0       	ldi	r20, 0x08	; 8
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <chb_eeprom_read>
}
     82c:	08 95       	ret

0000082e <chb_set_short_addr>:
/*!

*/
/**************************************************************************/
void chb_set_short_addr(U16 addr)
{
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	0f 92       	push	r0
     838:	0f 92       	push	r0
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	89 83       	std	Y+1, r24	; 0x01
     840:	9a 83       	std	Y+2, r25	; 0x02
    U8 *addr_ptr = (U8 *)&addr;
    pcb_t *pcb = chb_get_pcb();
     842:	0e 94 49 01 	call	0x292	; 0x292 <chb_get_pcb>
     846:	8c 01       	movw	r16, r24

    chb_eeprom_write(CHB_EEPROM_SHORT_ADDR, addr_ptr, 2);
     848:	89 e0       	ldi	r24, 0x09	; 9
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	be 01       	movw	r22, r28
     84e:	6f 5f       	subi	r22, 0xFF	; 255
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	42 e0       	ldi	r20, 0x02	; 2
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	0e 94 89 06 	call	0xd12	; 0xd12 <chb_eeprom_write>
    chb_reg_write16(SHORT_ADDR_0, addr);
     85a:	69 81       	ldd	r22, Y+1	; 0x01
     85c:	7a 81       	ldd	r23, Y+2	; 0x02
     85e:	80 e2       	ldi	r24, 0x20	; 32
     860:	0e 94 dd 02 	call	0x5ba	; 0x5ba <chb_reg_write16>
    pcb->src_addr = addr;
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	f8 01       	movw	r30, r16
     86a:	80 83       	st	Z, r24
     86c:	91 83       	std	Z+1, r25	; 0x01
}
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <chb_get_short_addr>:
/*!

*/
/**************************************************************************/
U16 chb_get_short_addr()
{
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	0f 92       	push	r0
     882:	0f 92       	push	r0
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
    U8 addr[2];

    chb_eeprom_read(CHB_EEPROM_SHORT_ADDR, addr, 2);
     888:	89 e0       	ldi	r24, 0x09	; 9
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	be 01       	movw	r22, r28
     88e:	6f 5f       	subi	r22, 0xFF	; 255
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	42 e0       	ldi	r20, 0x02	; 2
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <chb_eeprom_read>
    return *(U16 *)addr;
}
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	9a 81       	ldd	r25, Y+2	; 0x02
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <chb_tx>:
    Load the data into the fifo, initiate a transmission attempt,
    and return the status of the transmission attempt.
*/
/**************************************************************************/
U8 chb_tx(U8 *hdr, U8 *data, U8 len)
{
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	0f 92       	push	r0
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	6c 01       	movw	r12, r24
     8c2:	8b 01       	movw	r16, r22
     8c4:	f4 2e       	mov	r15, r20
    U8 state = chb_get_state();
     8c6:	0e 94 85 02 	call	0x50a	; 0x50a <chb_get_state>
    pcb_t *pcb = chb_get_pcb();
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	0e 94 49 01 	call	0x292	; 0x292 <chb_get_pcb>
     8d0:	5c 01       	movw	r10, r24

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
     8d2:	29 81       	ldd	r18, Y+1	; 0x01
     8d4:	22 30       	cpi	r18, 0x02	; 2
     8d6:	f9 f0       	breq	.+62     	; 0x916 <chb_tx+0x6e>
     8d8:	22 31       	cpi	r18, 0x12	; 18
     8da:	e9 f0       	breq	.+58     	; 0x916 <chb_tx+0x6e>
    {
        return RADIO_WRONG_STATE;
    }

    // TODO: check why we need to transition to the off state before we go to tx_aret_on
    chb_set_state(CHB_TRX_OFF);
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	0e 94 bb 03 	call	0x776	; 0x776 <chb_set_state>
    chb_set_state(CHB_TX_ARET_ON);
     8e2:	89 e1       	ldi	r24, 0x19	; 25
     8e4:	0e 94 bb 03 	call	0x776	; 0x776 <chb_set_state>

    // TODO: try and start the frame transmission by writing TX_START command instead of toggling
    // sleep pin...i just feel like it's kind of weird...

    // write frame to buffer. first write header into buffer (add 1 for len byte), then data. 
    chb_frame_write(hdr, CHB_HDR_SZ + 1, data, len);
     8e8:	c6 01       	movw	r24, r12
     8ea:	6a e0       	ldi	r22, 0x0A	; 10
     8ec:	a8 01       	movw	r20, r16
     8ee:	2f 2d       	mov	r18, r15
     8f0:	0e 94 21 03 	call	0x642	; 0x642 <chb_frame_write>

    //Do frame transmission. 
    chb_reg_read_mod_write(TRX_STATE, CMD_TX_START, 0x1F);
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	62 e0       	ldi	r22, 0x02	; 2
     8f8:	4f e1       	ldi	r20, 0x1F	; 31
     8fa:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>

    // wait for the transmission to end, signalled by the TRX END flag
    while (!pcb->tx_end);
     8fe:	f5 01       	movw	r30, r10
     900:	84 81       	ldd	r24, Z+4	; 0x04
     902:	88 23       	and	r24, r24
     904:	e1 f3       	breq	.-8      	; 0x8fe <chb_tx+0x56>
    pcb->tx_end = false;
     906:	14 82       	std	Z+4, r1	; 0x04

*/
/**************************************************************************/
static U8 chb_get_status()
{
    return chb_reg_read(TRX_STATE) >> CHB_TRAC_STATUS_POS;
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
     90e:	82 95       	swap	r24
     910:	86 95       	lsr	r24
     912:	87 70       	andi	r24, 0x07	; 7
    // wait for the transmission to end, signalled by the TRX END flag
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
     914:	01 c0       	rjmp	.+2      	; 0x918 <chb_tx+0x70>
    U8 state = chb_get_state();
    pcb_t *pcb = chb_get_pcb();

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    {
        return RADIO_WRONG_STATE;
     916:	84 e4       	ldi	r24, 0x44	; 68
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
}
     918:	0f 90       	pop	r0
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	08 95       	ret

0000092e <chb_sleep>:
    Enable or disable the radio's sleep mode.
*/
/**************************************************************************/
void chb_sleep(U8 enb)
{
    if (enb)
     92e:	88 23       	and	r24, r24
     930:	49 f0       	breq	.+18     	; 0x944 <chb_sleep+0x16>
    {
        // first we need to go to TRX OFF state
        chb_set_state(CHB_TRX_OFF);
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	0e 94 bb 03 	call	0x776	; 0x776 <chb_set_state>

        // set the SLPTR pin
        CHB_SLPTR_PORT |= _BV(CHB_SLPTR_PIN);
     938:	80 91 64 06 	lds	r24, 0x0664
     93c:	82 60       	ori	r24, 0x02	; 2
     93e:	80 93 64 06 	sts	0x0664, r24
     942:	08 95       	ret
    }
    else
    {
        // make sure the SLPTR pin is low first
        CHB_SLPTR_PORT &= ~(_BV(CHB_SLPTR_PIN));
     944:	80 91 64 06 	lds	r24, 0x0664
     948:	8d 7f       	andi	r24, 0xFD	; 253
     94a:	80 93 64 06 	sts	0x0664, r24
     94e:	80 e5       	ldi	r24, 0x50	; 80
     950:	8a 95       	dec	r24
     952:	f1 f7       	brne	.-4      	; 0x950 <chb_sleep+0x22>

        // we need to allow some time for the PLL to lock
        _delay_us(TIME_SLEEP_TO_TRX_OFF);

        // Turn the transceiver back on
        chb_set_state(RX_STATE);
     954:	86 e1       	ldi	r24, 0x16	; 22
     956:	0e 94 bb 03 	call	0x776	; 0x776 <chb_set_state>
     95a:	08 95       	ret

0000095c <chb_drvr_init>:
/*!

*/
/**************************************************************************/
void chb_drvr_init()
{
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	ea 97       	sbiw	r28, 0x3a	; 58
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	de bf       	out	0x3e, r29	; 62
    // config SPI for at86rf230 access
    chb_spi_init();
     96e:	0e 94 23 07 	call	0xe46	; 0xe46 <chb_spi_init>
	//SPIDInit(SPI_MODE0_bm);
	//RadioCS(FALSE);
    // configure IOs
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
     972:	80 91 60 06 	lds	r24, 0x0660
     976:	82 60       	ori	r24, 0x02	; 2
     978:	80 93 60 06 	sts	0x0660, r24
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));
     97c:	80 91 60 06 	lds	r24, 0x0660
     980:	81 60       	ori	r24, 0x01	; 1
     982:	80 93 60 06 	sts	0x0660, r24
static void chb_radio_init()
{
    U8 ieee_addr[8];

    // reset chip
    chb_reset();
     986:	0e 94 8a 02 	call	0x514	; 0x514 <chb_reset>

    // disable intps while we config the radio
    chb_reg_write(IRQ_MASK, 0);
     98a:	8e e0       	ldi	r24, 0x0E	; 14
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	0e 94 ba 02 	call	0x574	; 0x574 <chb_reg_write>

    // force transceiver off while we configure the intps
    chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1F);
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	63 e0       	ldi	r22, 0x03	; 3
     996:	4f e1       	ldi	r20, 0x1F	; 31
     998:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>

    // make sure the transceiver is in the off state before proceeding
    while ((chb_reg_read(TRX_STATUS) & 0x1f) != CHB_TRX_OFF);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
     9a2:	8f 71       	andi	r24, 0x1F	; 31
     9a4:	88 30       	cpi	r24, 0x08	; 8
     9a6:	d1 f7       	brne	.-12     	; 0x99c <chb_drvr_init+0x40>
    //chb_ret_write(CSMA_SEED0, CHB_CSMA_SEED0);     
    //chb_reg_read_mod_write(PHY_CC_CCA, CHB_CCA_MODE << CHB_CCA_MODE_POS,0x3 << CHB_CCA_MODE_POS);
    //chb_reg_write(CCA_THRES, CHB_CCA_ED_THRES);

    // set frame version that we'll accept
    chb_reg_read_mod_write(CSMA_SEED_1, CHB_FRM_VER << CHB_FVN_POS, 3 << CHB_FVN_POS);
     9a8:	8e e2       	ldi	r24, 0x2E	; 46
     9aa:	60 e4       	ldi	r22, 0x40	; 64
     9ac:	40 ec       	ldi	r20, 0xC0	; 192
     9ae:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>

    // set interrupt mask
    // re-enable intps while we config the radio
    chb_reg_write(IRQ_MASK, (1<<IRQ_RX_START) | (1<<IRQ_TRX_END));
     9b2:	8e e0       	ldi	r24, 0x0E	; 14
     9b4:	6c e0       	ldi	r22, 0x0C	; 12
     9b6:	0e 94 ba 02 	call	0x574	; 0x574 <chb_reg_write>

    #if (CHB_PROMISCUOUS == 0)
    // set autocrc mode
    chb_reg_read_mod_write(TRX_CTRL_1, 1 << CHB_AUTO_CRC_POS, 1 << CHB_AUTO_CRC_POS);
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	60 e2       	ldi	r22, 0x20	; 32
     9be:	40 e2       	ldi	r20, 0x20	; 32
     9c0:	0e 94 06 03 	call	0x60c	; 0x60c <chb_reg_read_mod_write>
    #endif

    // set up default phy modulation and data rate - OQPSK, 250 kbps, 915 MHz
    chb_set_mode(CHB_INIT_MODE);
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	0e 94 6f 03 	call	0x6de	; 0x6de <chb_set_mode>

    chb_set_channel(CHB_CHANNEL);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	0e 94 94 03 	call	0x728	; 0x728 <chb_set_channel>

    // set fsm state
    // put trx in rx auto ack mode
    chb_set_state(RX_STATE);
     9d0:	86 e1       	ldi	r24, 0x16	; 22
     9d2:	0e 94 bb 03 	call	0x776	; 0x776 <chb_set_state>

    // set pan ID
    chb_reg_write16(PAN_ID_0, CHB_PAN_ID);
     9d6:	82 e2       	ldi	r24, 0x22	; 34
     9d8:	64 e3       	ldi	r22, 0x34	; 52
     9da:	72 e1       	ldi	r23, 0x12	; 18
     9dc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <chb_reg_write16>

    // set short addr
    // NOTE: Possibly get this from EEPROM
    chb_reg_write16(SHORT_ADDR_0, chb_get_short_addr());
     9e0:	0e 94 3e 04 	call	0x87c	; 0x87c <chb_get_short_addr>
     9e4:	bc 01       	movw	r22, r24
     9e6:	80 e2       	ldi	r24, 0x20	; 32
     9e8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <chb_reg_write16>

    // set long addr
    // NOTE: Possibly get this from EEPROM
    chb_get_ieee_addr(ieee_addr);
     9ec:	ce 01       	movw	r24, r28
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	0e 94 0f 04 	call	0x81e	; 0x81e <chb_get_ieee_addr>
    chb_reg_write64(IEEE_ADDR_0, ieee_addr);
     9f4:	84 e2       	ldi	r24, 0x24	; 36
     9f6:	be 01       	movw	r22, r28
     9f8:	6f 5f       	subi	r22, 0xFF	; 255
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <chb_reg_write64>
    // set power to 0 dBm if CC1190 is being used. 
    chb_set_pwr(0x24);   
#endif

    // enable mcu intp pin
    CFG_CHB_INTP_RISE_EDGE();
     a00:	80 91 72 06 	lds	r24, 0x0672
     a04:	81 60       	ori	r24, 0x01	; 1
     a06:	80 93 72 06 	sts	0x0672, r24
     a0a:	80 91 69 06 	lds	r24, 0x0669
     a0e:	82 60       	ori	r24, 0x02	; 2
     a10:	80 93 69 06 	sts	0x0669, r24
     a14:	80 91 6a 06 	lds	r24, 0x066A
     a18:	84 60       	ori	r24, 0x04	; 4
     a1a:	80 93 6a 06 	sts	0x066A, r24
	PMIC.CTRL = 0x07;	//enable interrupts on MCU
     a1e:	87 e0       	ldi	r24, 0x07	; 7
     a20:	e0 ea       	ldi	r30, 0xA0	; 160
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	82 83       	std	Z+2, r24	; 0x02

    if (chb_get_state() != RX_STATE)
     a26:	0e 94 85 02 	call	0x50a	; 0x50a <chb_get_state>
     a2a:	86 31       	cpi	r24, 0x16	; 22
     a2c:	91 f0       	breq	.+36     	; 0xa52 <chb_drvr_init+0xf6>
    {
        // ERROR occurred initializing the radio. Print out error message.
        char buf[50];

        // grab the error message from flash & print it out
        strcpy_P(buf, chb_err_init);
     a2e:	8e 01       	movw	r16, r28
     a30:	07 5f       	subi	r16, 0xF7	; 247
     a32:	1f 4f       	sbci	r17, 0xFF	; 255
     a34:	c8 01       	movw	r24, r16
     a36:	68 ee       	ldi	r22, 0xE8	; 232
     a38:	71 e0       	ldi	r23, 0x01	; 1
     a3a:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <strcpy_P>
        printf(buf);
     a3e:	0f 92       	push	r0
     a40:	0f 92       	push	r0
     a42:	ed b7       	in	r30, 0x3d	; 61
     a44:	fe b7       	in	r31, 0x3e	; 62
     a46:	01 83       	std	Z+1, r16	; 0x01
     a48:	12 83       	std	Z+2, r17	; 0x02
     a4a:	0e 94 00 30 	call	0x6000	; 0x6000 <printf>
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
    }
	StartOfFreeSpace = 0; //set location in FRAM Buffer at which to start storing radio messages to the start of the buffer
     a52:	10 92 54 40 	sts	0x4054, r1
     a56:	10 92 55 40 	sts	0x4055, r1
     a5a:	10 92 56 40 	sts	0x4056, r1
     a5e:	10 92 57 40 	sts	0x4057, r1
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));

    // config radio
    chb_radio_init();
}
     a62:	ea 96       	adiw	r28, 0x3a	; 58
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	08 95       	ret

00000a72 <__vector_64>:
/*!

*/
/**************************************************************************/
ISR(CHB_RADIO_IRQ)
{
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	0b b6       	in	r0, 0x3b	; 59
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	2f 92       	push	r2
     a82:	3f 92       	push	r3
     a84:	4f 92       	push	r4
     a86:	5f 92       	push	r5
     a88:	6f 92       	push	r6
     a8a:	7f 92       	push	r7
     a8c:	8f 92       	push	r8
     a8e:	9f 92       	push	r9
     a90:	af 92       	push	r10
     a92:	bf 92       	push	r11
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	2f 93       	push	r18
     aa2:	3f 93       	push	r19
     aa4:	4f 93       	push	r20
     aa6:	5f 93       	push	r21
     aa8:	6f 93       	push	r22
     aaa:	7f 93       	push	r23
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
     ab0:	af 93       	push	r26
     ab2:	bf 93       	push	r27
     ab4:	ef 93       	push	r30
     ab6:	ff 93       	push	r31
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	e2 97       	sbiw	r28, 0x32	; 50
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	de bf       	out	0x3e, r29	; 62
    U8 dummy, state, intp_src = 0;
    pcb_t *pcb = chb_get_pcb();
     ac6:	0e 94 49 01 	call	0x292	; 0x292 <chb_get_pcb>
     aca:	7c 01       	movw	r14, r24

    CHB_ENTER_CRIT();
     acc:	8f b7       	in	r24, 0x3f	; 63
     ace:	80 93 bf 21 	sts	0x21BF, r24
     ad2:	f8 94       	cli

    /*Read Interrupt source.*/
    RadioCS(TRUE);   
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>

    /*Send Register address and read register content.*/
    dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
     ada:	8f e8       	ldi	r24, 0x8F	; 143
     adc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
    intp_src = SPID_write(0);
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
     ae6:	18 2f       	mov	r17, r24

    RadioCS(FALSE);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>
                    // get the data
                    chb_frame_read();
                    pcb->rcvd_xfers++;
                    pcb->data_rcv = true;
					StartOfFreeSpace += chb_read(FRAMReadBuffer+StartOfFreeSpace);	//read the data into the FRAM buffer right away --vlad
					StartOfFreeSpace %= FR_READ_BUFFER_SIZE;	//wrap around to the start of the buffer (making circular buffer). This should be avoided as data in the buffer will be overwritten (i.e. lost).			
     aee:	81 e7       	ldi	r24, 0x71	; 113
     af0:	28 2e       	mov	r2, r24
     af2:	8c e1       	ldi	r24, 0x1C	; 28
     af4:	38 2e       	mov	r3, r24
     af6:	41 2c       	mov	r4, r1
     af8:	51 2c       	mov	r5, r1

            // Increment the overflow stat
            pcb->overflow++;

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
     afa:	3e 01       	movw	r6, r28
     afc:	08 94       	sec
     afe:	61 1c       	adc	r6, r1
     b00:	71 1c       	adc	r7, r1
    dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    intp_src = SPID_write(0);

    RadioCS(FALSE);

    while (intp_src)
     b02:	d5 c0       	rjmp	.+426    	; 0xcae <__vector_64+0x23c>
    {
        /*Handle the incomming interrupt. Prioritized.*/
        if ((intp_src & CHB_IRQ_RX_START_MASK))
     b04:	12 ff       	sbrs	r17, 2
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <__vector_64+0x9a>
        {
            intp_src &= ~CHB_IRQ_RX_START_MASK;
     b08:	1b 7f       	andi	r17, 0xFB	; 251
     b0a:	d1 c0       	rjmp	.+418    	; 0xcae <__vector_64+0x23c>
        }
        else if (intp_src & CHB_IRQ_TRX_END_MASK)
     b0c:	13 ff       	sbrs	r17, 3
     b0e:	b6 c0       	rjmp	.+364    	; 0xc7c <__vector_64+0x20a>
        {
            state = chb_get_state();
     b10:	0e 94 85 02 	call	0x50a	; 0x50a <chb_get_state>

            if ((state == CHB_RX_ON) || (state == CHB_RX_AACK_ON) || (state == CHB_BUSY_RX_AACK)){
     b14:	86 30       	cpi	r24, 0x06	; 6
     b16:	29 f0       	breq	.+10     	; 0xb22 <__vector_64+0xb0>
     b18:	86 31       	cpi	r24, 0x16	; 22
     b1a:	19 f0       	breq	.+6      	; 0xb22 <__vector_64+0xb0>
     b1c:	81 31       	cpi	r24, 0x11	; 17
     b1e:	09 f0       	breq	.+2      	; 0xb22 <__vector_64+0xb0>
     b20:	a3 c0       	rjmp	.+326    	; 0xc68 <__vector_64+0x1f6>
				//go to TRX_OFF state to avoid data corruption due to reception of another message
				chb_set_state(CHB_TRX_OFF);
     b22:	88 e0       	ldi	r24, 0x08	; 8
     b24:	0e 94 bb 03 	call	0x776	; 0x776 <chb_set_state>
                // get the ed measurement
                pcb->ed = chb_reg_read(PHY_ED_LEVEL);
     b28:	87 e0       	ldi	r24, 0x07	; 7
     b2a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
     b2e:	f7 01       	movw	r30, r14
     b30:	82 8b       	std	Z+18, r24	; 0x12

                // get the crc
                pcb->crc = (chb_reg_read(PHY_RSSI) & (1<<7)) ? 1 : 0;
     b32:	86 e0       	ldi	r24, 0x06	; 6
     b34:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
     b38:	88 1f       	adc	r24, r24
     b3a:	88 27       	eor	r24, r24
     b3c:	88 1f       	adc	r24, r24
     b3e:	f7 01       	movw	r30, r14
     b40:	83 8b       	std	Z+19, r24	; 0x13

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc){
     b42:	88 23       	and	r24, r24
     b44:	09 f4       	brne	.+2      	; 0xb48 <__vector_64+0xd6>
     b46:	93 c0       	rjmp	.+294    	; 0xc6e <__vector_64+0x1fc>
/**************************************************************************/
static void chb_frame_read()
{
    U8 i, len, data;

    CHB_ENTER_CRIT();
     b48:	8f b7       	in	r24, 0x3f	; 63
     b4a:	80 93 bf 21 	sts	0x21BF, r24
     b4e:	f8 94       	cli
    RadioCS(TRUE);
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>

    /*Send frame read command and read the length.*/
    SPID_write(CHB_SPI_CMD_FR);
     b56:	80 e2       	ldi	r24, 0x20	; 32
     b58:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
    len = SPID_write(0);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
     b62:	08 2f       	mov	r16, r24

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
     b64:	83 50       	subi	r24, 0x03	; 3
     b66:	8d 37       	cpi	r24, 0x7D	; 125
     b68:	b8 f5       	brcc	.+110    	; 0xbd8 <__vector_64+0x166>
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
     b6a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <chb_buf_get_len>
     b6e:	20 2f       	mov	r18, r16
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e8       	ldi	r20, 0x80	; 128
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	48 1b       	sub	r20, r24
     b78:	51 09       	sbc	r21, r1
     b7a:	24 17       	cp	r18, r20
     b7c:	35 07       	cpc	r19, r21
     b7e:	6c f4       	brge	.+26     	; 0xb9a <__vector_64+0x128>
        {
            chb_buf_write(len);
     b80:	80 2f       	mov	r24, r16
     b82:	0e 94 42 02 	call	0x484	; 0x484 <chb_buf_write>
            
            for (i=0; i<len; i++)
     b86:	cc 24       	eor	r12, r12
            {
                data = SPID_write(0);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
                chb_buf_write(data);
     b8e:	0e 94 42 02 	call	0x484	; 0x484 <chb_buf_write>
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
        {
            chb_buf_write(len);
            
            for (i=0; i<len; i++)
     b92:	c3 94       	inc	r12
     b94:	c0 16       	cp	r12, r16
     b96:	c1 f7       	brne	.-16     	; 0xb88 <__vector_64+0x116>
     b98:	1f c0       	rjmp	.+62     	; 0xbd8 <__vector_64+0x166>
            }
        }
        else
        {
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
     b9a:	0e 94 49 01 	call	0x292	; 0x292 <chb_get_pcb>
     b9e:	6c 01       	movw	r12, r24
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
     ba0:	88 24       	eor	r8, r8
            {
                data = SPID_write(0);
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SPID_write>
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
     ba8:	83 94       	inc	r8
     baa:	80 16       	cp	r8, r16
     bac:	d1 f7       	brne	.-12     	; 0xba2 <__vector_64+0x130>
            {
                data = SPID_write(0);
            }

            // Increment the overflow stat
            pcb->overflow++;
     bae:	f6 01       	movw	r30, r12
     bb0:	85 85       	ldd	r24, Z+13	; 0x0d
     bb2:	96 85       	ldd	r25, Z+14	; 0x0e
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	85 87       	std	Z+13, r24	; 0x0d
     bb8:	96 87       	std	Z+14, r25	; 0x0e

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
     bba:	c3 01       	movw	r24, r6
     bbc:	68 e0       	ldi	r22, 0x08	; 8
     bbe:	72 e0       	ldi	r23, 0x02	; 2
     bc0:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <strcpy_P>
            printf(buf);
     bc4:	0f 92       	push	r0
     bc6:	0f 92       	push	r0
     bc8:	ed b7       	in	r30, 0x3d	; 61
     bca:	fe b7       	in	r31, 0x3e	; 62
     bcc:	61 82       	std	Z+1, r6	; 0x01
     bce:	72 82       	std	Z+2, r7	; 0x02
     bd0:	0e 94 00 30 	call	0x6000	; 0x6000 <printf>
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
        }
    }

    RadioCS(FALSE);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <RadioCS>
    CHB_LEAVE_CRIT();
     bde:	80 91 bf 21 	lds	r24, 0x21BF
     be2:	8f bf       	out	0x3f, r24	; 63
     be4:	78 94       	sei

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc){
                    // get the data
                    chb_frame_read();
                    pcb->rcvd_xfers++;
     be6:	f7 01       	movw	r30, r14
     be8:	85 81       	ldd	r24, Z+5	; 0x05
     bea:	96 81       	ldd	r25, Z+6	; 0x06
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	85 83       	std	Z+5, r24	; 0x05
     bf0:	96 83       	std	Z+6, r25	; 0x06
                    pcb->data_rcv = true;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	83 83       	std	Z+3, r24	; 0x03
					StartOfFreeSpace += chb_read(FRAMReadBuffer+StartOfFreeSpace);	//read the data into the FRAM buffer right away --vlad
     bf6:	80 90 54 40 	lds	r8, 0x4054
     bfa:	90 90 55 40 	lds	r9, 0x4055
     bfe:	a0 90 56 40 	lds	r10, 0x4056
     c02:	b0 90 57 40 	lds	r11, 0x4057
     c06:	80 91 54 40 	lds	r24, 0x4054
     c0a:	90 91 55 40 	lds	r25, 0x4055
     c0e:	a0 91 56 40 	lds	r26, 0x4056
     c12:	b0 91 57 40 	lds	r27, 0x4057
     c16:	88 53       	subi	r24, 0x38	; 56
     c18:	9c 4d       	sbci	r25, 0xDC	; 220
     c1a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <chb_read>
     c1e:	a5 01       	movw	r20, r10
     c20:	94 01       	movw	r18, r8
     c22:	28 0f       	add	r18, r24
     c24:	31 1d       	adc	r19, r1
     c26:	41 1d       	adc	r20, r1
     c28:	51 1d       	adc	r21, r1
     c2a:	20 93 54 40 	sts	0x4054, r18
     c2e:	30 93 55 40 	sts	0x4055, r19
     c32:	40 93 56 40 	sts	0x4056, r20
     c36:	50 93 57 40 	sts	0x4057, r21
					StartOfFreeSpace %= FR_READ_BUFFER_SIZE;	//wrap around to the start of the buffer (making circular buffer). This should be avoided as data in the buffer will be overwritten (i.e. lost).			
     c3a:	60 91 54 40 	lds	r22, 0x4054
     c3e:	70 91 55 40 	lds	r23, 0x4055
     c42:	80 91 56 40 	lds	r24, 0x4056
     c46:	90 91 57 40 	lds	r25, 0x4057
     c4a:	a2 01       	movw	r20, r4
     c4c:	91 01       	movw	r18, r2
     c4e:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	80 93 54 40 	sts	0x4054, r24
     c5a:	90 93 55 40 	sts	0x4055, r25
     c5e:	a0 93 56 40 	sts	0x4056, r26
     c62:	b0 93 57 40 	sts	0x4057, r27
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <__vector_64+0x1fc>
                }
            }
            else{
                pcb->tx_end = true;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	f7 01       	movw	r30, r14
     c6c:	84 83       	std	Z+4, r24	; 0x04
            }
            intp_src &= ~CHB_IRQ_TRX_END_MASK;
     c6e:	17 7f       	andi	r17, 0xF7	; 247
			//go to receive state
            while (chb_set_state(RX_STATE) != RADIO_SUCCESS);
     c70:	86 e1       	ldi	r24, 0x16	; 22
     c72:	0e 94 bb 03 	call	0x776	; 0x776 <chb_set_state>
     c76:	80 34       	cpi	r24, 0x40	; 64
     c78:	d9 f7       	brne	.-10     	; 0xc70 <__vector_64+0x1fe>
     c7a:	19 c0       	rjmp	.+50     	; 0xcae <__vector_64+0x23c>
        }
        else if (intp_src & CHB_IRQ_TRX_UR_MASK)
     c7c:	16 ff       	sbrs	r17, 6
     c7e:	08 c0       	rjmp	.+16     	; 0xc90 <__vector_64+0x21e>
        {
            intp_src &= ~CHB_IRQ_TRX_UR_MASK;
     c80:	1f 7b       	andi	r17, 0xBF	; 191
            pcb->underrun++;
     c82:	f7 01       	movw	r30, r14
     c84:	87 85       	ldd	r24, Z+15	; 0x0f
     c86:	90 89       	ldd	r25, Z+16	; 0x10
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	87 87       	std	Z+15, r24	; 0x0f
     c8c:	90 8b       	std	Z+16, r25	; 0x10
     c8e:	0f c0       	rjmp	.+30     	; 0xcae <__vector_64+0x23c>
        }
        else if (intp_src & CHB_IRQ_PLL_UNLOCK_MASK)
     c90:	11 ff       	sbrs	r17, 1
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__vector_64+0x226>
        {
            intp_src &= ~CHB_IRQ_PLL_UNLOCK_MASK;
     c94:	1d 7f       	andi	r17, 0xFD	; 253
     c96:	0b c0       	rjmp	.+22     	; 0xcae <__vector_64+0x23c>
        }
        else if (intp_src & CHB_IRQ_PLL_LOCK_MASK)
     c98:	10 ff       	sbrs	r17, 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <__vector_64+0x22e>
        {
            intp_src &= ~CHB_IRQ_PLL_LOCK_MASK;
     c9c:	1e 7f       	andi	r17, 0xFE	; 254
     c9e:	07 c0       	rjmp	.+14     	; 0xcae <__vector_64+0x23c>
        }
        else if (intp_src & CHB_IRQ_BAT_LOW_MASK)
     ca0:	17 ff       	sbrs	r17, 7
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <__vector_64+0x23c>
        {
            intp_src &= ~CHB_IRQ_BAT_LOW_MASK;
     ca4:	1f 77       	andi	r17, 0x7F	; 127
            pcb->battlow++;
     ca6:	f7 01       	movw	r30, r14
     ca8:	81 89       	ldd	r24, Z+17	; 0x11
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	81 8b       	std	Z+17, r24	; 0x11
    dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    intp_src = SPID_write(0);

    RadioCS(FALSE);

    while (intp_src)
     cae:	11 23       	and	r17, r17
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__vector_64+0x242>
     cb2:	28 cf       	rjmp	.-432    	; 0xb04 <__vector_64+0x92>
        }
        else
        {
        }
    }
    CHB_LEAVE_CRIT();
     cb4:	80 91 bf 21 	lds	r24, 0x21BF
     cb8:	8f bf       	out	0x3f, r24	; 63
     cba:	78 94       	sei
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
     cbc:	8f e0       	ldi	r24, 0x0F	; 15
     cbe:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <chb_reg_read>
}
     cc2:	e2 96       	adiw	r28, 0x32	; 50
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	bf 90       	pop	r11
     cf2:	af 90       	pop	r10
     cf4:	9f 90       	pop	r9
     cf6:	8f 90       	pop	r8
     cf8:	7f 90       	pop	r7
     cfa:	6f 90       	pop	r6
     cfc:	5f 90       	pop	r5
     cfe:	4f 90       	pop	r4
     d00:	3f 90       	pop	r3
     d02:	2f 90       	pop	r2
     d04:	0f 90       	pop	r0
     d06:	0b be       	out	0x3b, r0	; 59
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <chb_eeprom_write>:
/*!

*/
/**************************************************************************/
void chb_eeprom_write(U16 addr, U8 *buf, U16 size)
{
     d12:	cf 92       	push	r12
     d14:	df 92       	push	r13
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
     d24:	80 91 cc 01 	lds	r24, 0x01CC
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	e0 ec       	ldi	r30, 0xC0	; 192
     d2c:	f1 e0       	ldi	r31, 0x01	; 1
     d2e:	84 87       	std	Z+12, r24	; 0x0c

    // Write bytes
    for(U8 i=0; i<size; i++)
     d30:	20 e0       	ldi	r18, 0x00	; 0
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     d32:	80 ec       	ldi	r24, 0xC0	; 192
     d34:	e8 2e       	mov	r14, r24
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	f8 2e       	mov	r15, r24

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     d3a:	36 e3       	ldi	r19, 0x36	; 54
     d3c:	d3 2e       	mov	r13, r19
        NVM_EXEC();
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
     d3e:	a3 e3       	ldi	r26, 0x33	; 51
     d40:	ca 2e       	mov	r12, r26

    // load the data to write
    NVM.DATA0 = value;

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     d42:	35 e3       	ldi	r19, 0x35	; 53
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
     d44:	39 c0       	rjmp	.+114    	; 0xdb8 <chb_eeprom_write+0xa6>
    {
        chb_eep_write_byte(addr+i, buf[i]);
     d46:	8c 01       	movw	r16, r24
     d48:	0c 0f       	add	r16, r28
     d4a:	1d 1f       	adc	r17, r29
     d4c:	86 0f       	add	r24, r22
     d4e:	97 1f       	adc	r25, r23
     d50:	dc 01       	movw	r26, r24
     d52:	8c 91       	ld	r24, X
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     d54:	90 91 cf 01 	lds	r25, 0x01CF
     d58:	97 fd       	sbrc	r25, 7
     d5a:	fc cf       	rjmp	.-8      	; 0xd54 <chb_eeprom_write+0x42>

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     d5c:	90 91 cf 01 	lds	r25, 0x01CF
     d60:	91 ff       	sbrs	r25, 1
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <chb_eeprom_write+0x76>
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     d64:	d7 01       	movw	r26, r14
     d66:	1a 96       	adiw	r26, 0x0a	; 10
     d68:	dc 92       	st	X, r13
     d6a:	1a 97       	sbiw	r26, 0x0a	; 10
        NVM_EXEC();
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	0f 93       	push	r16
     d72:	2f 93       	push	r18
     d74:	eb ec       	ldi	r30, 0xCB	; 203
     d76:	f1 e0       	ldi	r31, 0x01	; 1
     d78:	08 ed       	ldi	r16, 0xD8	; 216
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	04 bf       	out	0x34, r16	; 52
     d7e:	20 83       	st	Z, r18
     d80:	2f 91       	pop	r18
     d82:	0f 91       	pop	r16
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
     d88:	c2 86       	std	Z+10, r12	; 0x0a

    // load the address
    NVM.ADDR0 = addr & 0xFF;
     d8a:	00 93 c0 01 	sts	0x01C0, r16
    NVM.ADDR1 = (addr >> 8) & 0x1F;
     d8e:	91 2f       	mov	r25, r17
     d90:	9f 71       	andi	r25, 0x1F	; 31
     d92:	91 83       	std	Z+1, r25	; 0x01
    NVM.ADDR2 = 0x00;
     d94:	12 82       	std	Z+2, r1	; 0x02

    // load the data to write
    NVM.DATA0 = value;
     d96:	84 83       	std	Z+4, r24	; 0x04

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     d98:	32 87       	std	Z+10, r19	; 0x0a
    NVM_EXEC();
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
     d9e:	0f 93       	push	r16
     da0:	2f 93       	push	r18
     da2:	eb ec       	ldi	r30, 0xCB	; 203
     da4:	f1 e0       	ldi	r31, 0x01	; 1
     da6:	08 ed       	ldi	r16, 0xD8	; 216
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	04 bf       	out	0x34, r16	; 52
     dac:	20 83       	st	Z, r18
     dae:	2f 91       	pop	r18
     db0:	0f 91       	pop	r16
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	82 2f       	mov	r24, r18
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	84 17       	cp	r24, r20
     dbe:	95 07       	cpc	r25, r21
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <chb_eeprom_write+0xb2>
     dc2:	c1 cf       	rjmp	.-126    	; 0xd46 <chb_eeprom_write+0x34>
    {
        chb_eep_write_byte(addr+i, buf[i]);
    }
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	08 95       	ret

00000dd6 <chb_eeprom_read>:
/*!

*/
/**************************************************************************/
void chb_eeprom_read(U16 addr, U8 *buf, U16 size)
{
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	9c 01       	movw	r18, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
     dde:	80 91 cc 01 	lds	r24, 0x01CC
     de2:	87 7f       	andi	r24, 0xF7	; 247
     de4:	e0 ec       	ldi	r30, 0xC0	; 192
     de6:	f1 e0       	ldi	r31, 0x01	; 1
     de8:	84 87       	std	Z+12, r24	; 0x0c

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
     dea:	c0 e0       	ldi	r28, 0x00	; 0
    NVM.ADDR0 = addr & 0xFF;
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    NVM.ADDR2 = 0x00;

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
     dec:	d6 e0       	ldi	r29, 0x06	; 6
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
     dee:	22 c0       	rjmp	.+68     	; 0xe34 <chb_eeprom_read+0x5e>
    {
        buf[i] = chb_eep_read_byte(addr+i);
     df0:	db 01       	movw	r26, r22
     df2:	a8 0f       	add	r26, r24
     df4:	b9 1f       	adc	r27, r25
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
*/
/**************************************************************************/
static U8 chb_eep_read_byte(U16 addr)
{
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     dfa:	10 91 cf 01 	lds	r17, 0x01CF
     dfe:	17 fd       	sbrc	r17, 7
     e00:	fc cf       	rjmp	.-8      	; 0xdfa <chb_eeprom_read+0x24>

    /* Set address to read from. */
    NVM.ADDR0 = addr & 0xFF;
     e02:	80 93 c0 01 	sts	0x01C0, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
     e06:	89 2f       	mov	r24, r25
     e08:	8f 71       	andi	r24, 0x1F	; 31
     e0a:	81 83       	std	Z+1, r24	; 0x01
    NVM.ADDR2 = 0x00;
     e0c:	12 82       	std	Z+2, r1	; 0x02

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
     e0e:	d2 87       	std	Z+10, r29	; 0x0a
    NVM_EXEC();
     e10:	ef 93       	push	r30
     e12:	ff 93       	push	r31
     e14:	0f 93       	push	r16
     e16:	2f 93       	push	r18
     e18:	eb ec       	ldi	r30, 0xCB	; 203
     e1a:	f1 e0       	ldi	r31, 0x01	; 1
     e1c:	08 ed       	ldi	r16, 0xD8	; 216
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	04 bf       	out	0x34, r16	; 52
     e22:	20 83       	st	Z, r18
     e24:	2f 91       	pop	r18
     e26:	0f 91       	pop	r16
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30

    return NVM.DATA0;
     e2c:	80 91 c4 01 	lds	r24, 0x01C4
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
     e30:	8c 93       	st	X, r24
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
     e32:	cf 5f       	subi	r28, 0xFF	; 255
     e34:	8c 2f       	mov	r24, r28
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	84 17       	cp	r24, r20
     e3a:	95 07       	cpc	r25, r21
     e3c:	c8 f2       	brcs	.-78     	; 0xdf0 <chb_eeprom_read+0x1a>
    {
        buf[i] = chb_eep_read_byte(addr+i);
    }
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	08 95       	ret

00000e46 <chb_spi_init>:

void chb_spi_init()
{
    // configure the SPI slave_select, spi clk, and mosi pins as output. the miso pin
    // is cleared since its an input.
    CHB_SPI_DDIR |= (1<<CHB_SSPIN) | (1<<CHB_MOSI) | (1<<CHB_SCK);
     e46:	e0 e6       	ldi	r30, 0x60	; 96
     e48:	f6 e0       	ldi	r31, 0x06	; 6
     e4a:	80 81       	ld	r24, Z
     e4c:	80 6b       	ori	r24, 0xB0	; 176
     e4e:	80 83       	st	Z, r24
    CHB_SPI_PORT |= (1<<CHB_SSPIN);
     e50:	e4 e6       	ldi	r30, 0x64	; 100
     e52:	f6 e0       	ldi	r31, 0x06	; 6
     e54:	80 81       	ld	r24, Z
     e56:	80 61       	ori	r24, 0x10	; 16
     e58:	80 83       	st	Z, r24

    // set to master mode
    // set the clock freq to fck/16
    CHB_CTRL |= (1<<SPI_MASTER_bp) | (1<<SPI_ENABLE_bp) | (1<<SPI_PRESCALER_gp);
     e5a:	a0 ec       	ldi	r26, 0xC0	; 192
     e5c:	b9 e0       	ldi	r27, 0x09	; 9
     e5e:	8c 91       	ld	r24, X
     e60:	81 65       	ori	r24, 0x51	; 81
     e62:	8c 93       	st	X, r24

    // set the slave select to idle
    CHB_SPI_DISABLE();
     e64:	80 81       	ld	r24, Z
     e66:	80 61       	ori	r24, 0x10	; 16
     e68:	80 83       	st	Z, r24
}
     e6a:	08 95       	ret

00000e6c <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
     e6c:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
     e72:	84 81       	ldd	r24, Z+4	; 0x04
     e74:	95 81       	ldd	r25, Z+5	; 0x05
     e76:	86 1b       	sub	r24, r22
     e78:	91 09       	sbc	r25, r1

	return answer;
}
     e7a:	08 95       	ret

00000e7c <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
     e7c:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     e82:	84 81       	ldd	r24, Z+4	; 0x04
     e84:	95 81       	ldd	r25, Z+5	; 0x05
     e86:	77 27       	eor	r23, r23
     e88:	67 fd       	sbrc	r22, 7
     e8a:	70 95       	com	r23
     e8c:	86 1b       	sub	r24, r22
     e8e:	97 0b       	sbc	r25, r23

	return answer;
}
     e90:	08 95       	ret

00000e92 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
     e92:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
     e98:	84 81       	ldd	r24, Z+4	; 0x04
     e9a:	95 81       	ldd	r25, Z+5	; 0x05
}
     e9c:	08 95       	ret

00000e9e <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
     e9e:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
}
     ea6:	08 95       	ret

00000ea8 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
     ea8:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
     eae:	85 81       	ldd	r24, Z+5	; 0x05
}
     eb0:	08 95       	ret

00000eb2 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
     eb2:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
     eb4:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
     eb6:	14 82       	std	Z+4, r1	; 0x04
     eb8:	9a e2       	ldi	r25, 0x2A	; 42
     eba:	9a 95       	dec	r25
     ebc:	f1 f7       	brne	.-4      	; 0xeba <ADC_Wait_8MHz+0x8>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <ADC_Wait_8MHz+0xe>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
     ec0:	84 83       	std	Z+4, r24	; 0x04
}
     ec2:	08 95       	ret

00000ec4 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
     ec4:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
     ec6:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	94 83       	std	Z+4, r25	; 0x04
     ecc:	95 e5       	ldi	r25, 0x55	; 85
     ece:	9a 95       	dec	r25
     ed0:	f1 f7       	brne	.-4      	; 0xece <ADC_Wait_32MHz+0xa>
     ed2:	00 00       	nop

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
     ed4:	84 83       	std	Z+4, r24	; 0x04
}
     ed6:	08 95       	ret

00000ed8 <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     ed8:	fb 01       	movw	r30, r22
    if (oversampling)
     eda:	44 23       	and	r20, r20
     edc:	c9 f0       	breq	.+50     	; 0xf10 <ADC_Offset_Get_Unsigned+0x38>
     ede:	24 e0       	ldi	r18, 0x04	; 4
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	50 e0       	ldi	r21, 0x00	; 0
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     ee6:	61 e0       	ldi	r22, 0x01	; 1
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     ee8:	80 81       	ld	r24, Z
     eea:	80 68       	ori	r24, 0x80	; 128
     eec:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
     eee:	83 81       	ldd	r24, Z+3	; 0x03
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	fd cf       	rjmp	.-6      	; 0xeee <ADC_Offset_Get_Unsigned+0x16>
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     ef4:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
     ef6:	84 81       	ldd	r24, Z+4	; 0x04
     ef8:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
     efa:	48 0f       	add	r20, r24
     efc:	59 1f       	adc	r21, r25
     efe:	21 50       	subi	r18, 0x01	; 1
     f00:	30 40       	sbci	r19, 0x00	; 0
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
     f02:	91 f7       	brne	.-28     	; 0xee8 <ADC_Offset_Get_Unsigned+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
     f04:	ca 01       	movw	r24, r20
     f06:	96 95       	lsr	r25
     f08:	87 95       	ror	r24
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	08 95       	ret
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
     f10:	80 81       	ld	r24, Z
     f12:	80 68       	ori	r24, 0x80	; 128
     f14:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
     f16:	83 81       	ldd	r24, Z+3	; 0x03
     f18:	80 ff       	sbrs	r24, 0
     f1a:	fd cf       	rjmp	.-6      	; 0xf16 <ADC_Offset_Get_Unsigned+0x3e>
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
     f20:	84 81       	ldd	r24, Z+4	; 0x04
     f22:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
      
      return offset;
    }
}
     f24:	08 95       	ret

00000f26 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     f26:	fb 01       	movw	r30, r22
    if (oversampling)
     f28:	44 23       	and	r20, r20
     f2a:	d1 f0       	breq	.+52     	; 0xf60 <ADC_Offset_Get_Signed+0x3a>
     f2c:	44 e0       	ldi	r20, 0x04	; 4
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     f34:	61 e0       	ldi	r22, 0x01	; 1
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     f36:	80 81       	ld	r24, Z
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
     f3c:	83 81       	ldd	r24, Z+3	; 0x03
     f3e:	80 ff       	sbrs	r24, 0
     f40:	fd cf       	rjmp	.-6      	; 0xf3c <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     f42:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     f44:	84 81       	ldd	r24, Z+4	; 0x04
     f46:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
     f48:	28 0f       	add	r18, r24
     f4a:	39 1f       	adc	r19, r25
     f4c:	41 50       	subi	r20, 0x01	; 1
     f4e:	50 40       	sbci	r21, 0x00	; 0
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
     f50:	91 f7       	brne	.-28     	; 0xf36 <ADC_Offset_Get_Signed+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
     f52:	c9 01       	movw	r24, r18
     f54:	64 e0       	ldi	r22, 0x04	; 4
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
     f5c:	86 2f       	mov	r24, r22
     f5e:	08 95       	ret
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
     f60:	80 81       	ld	r24, Z
     f62:	80 68       	ori	r24, 0x80	; 128
     f64:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
     f66:	83 81       	ldd	r24, Z+3	; 0x03
     f68:	80 ff       	sbrs	r24, 0
     f6a:	fd cf       	rjmp	.-6      	; 0xf66 <ADC_Offset_Get_Signed+0x40>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
      
      return offset;
    }
}
     f74:	08 95       	ret

00000f76 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     f76:	aa ec       	ldi	r26, 0xCA	; 202
     f78:	b1 e0       	ldi	r27, 0x01	; 1
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
     f7e:	e8 2f       	mov	r30, r24
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     f84:	1c 92       	st	X, r1

	return result;
}
     f86:	08 95       	ret

00000f88 <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	c0 30       	cpi	r28, 0x00	; 0
     f92:	d8 07       	cpc	r29, r24
     f94:	31 f4       	brne	.+12     	; 0xfa2 <ADC_CalibrationValues_Load+0x1a>
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
     f96:	80 e2       	ldi	r24, 0x20	; 32
     f98:	0e 94 bb 07 	call	0xf76	; 0xf76 <SP_ReadCalibrationByte>
     f9c:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
     f9e:	81 e2       	ldi	r24, 0x21	; 33
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <ADC_CalibrationValues_Load+0x24>
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
     fa2:	84 e2       	ldi	r24, 0x24	; 36
     fa4:	0e 94 bb 07 	call	0xf76	; 0xf76 <SP_ReadCalibrationByte>
     fa8:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
     faa:	85 e2       	ldi	r24, 0x25	; 37
     fac:	0e 94 bb 07 	call	0xf76	; 0xf76 <SP_ReadCalibrationByte>
     fb0:	8d 87       	std	Y+13, r24	; 0x0d
	}
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     fb8:	0f 93       	push	r16
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     fc4:	2f b7       	in	r18, 0x3f	; 63
     fc6:	29 83       	std	Y+1, r18	; 0x01
     fc8:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     fca:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     fcc:	fc 01       	movw	r30, r24
     fce:	08 ed       	ldi	r16, 0xD8	; 216
     fd0:	04 bf       	out	0x34, r16	; 52
     fd2:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	8f bf       	out	0x3f, r24	; 63
#endif
}
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     fe2:	66 23       	and	r22, r22
     fe4:	11 f0       	breq	.+4      	; 0xfea <CLKSYS_XOSC_Config+0x8>
     fe6:	90 e2       	ldi	r25, 0x20	; 32
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <CLKSYS_XOSC_Config+0xa>
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	84 2b       	or	r24, r20
     fee:	89 2b       	or	r24, r25
     ff0:	e0 e5       	ldi	r30, 0x50	; 80
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     ff6:	08 95       	ret

00000ff8 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     ff8:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     ffa:	68 2b       	or	r22, r24
     ffc:	e0 e5       	ldi	r30, 0x50	; 80
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	65 83       	std	Z+5, r22	; 0x05
}
    1002:	08 95       	ret

00001004 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    1004:	e0 e5       	ldi	r30, 0x50	; 80
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	20 81       	ld	r18, Z
    100a:	98 2f       	mov	r25, r24
    100c:	90 95       	com	r25
    100e:	92 23       	and	r25, r18
    1010:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    1012:	90 81       	ld	r25, Z
	return clkEnabled;
}
    1014:	89 23       	and	r24, r25
    1016:	08 95       	ret

00001018 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    1018:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
    101a:	81 e4       	ldi	r24, 0x41	; 65
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <CCPWrite>
}
    1022:	08 95       	ret

00001024 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    102c:	c0 e4       	ldi	r28, 0x40	; 64
    102e:	d0 e0       	ldi	r29, 0x00	; 0
    1030:	68 81       	ld	r22, Y
    1032:	68 7f       	andi	r22, 0xF8	; 248
    1034:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    1036:	80 e4       	ldi	r24, 0x40	; 64
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    103e:	88 81       	ld	r24, Y
	return clkCtrl;
}
    1040:	81 23       	and	r24, r17
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	08 95       	ret

0000104a <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    104a:	e0 e4       	ldi	r30, 0x40	; 64
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	91 7f       	andi	r25, 0xF1	; 241
    1052:	91 60       	ori	r25, 0x01	; 1
    1054:	98 2b       	or	r25, r24
    1056:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    1058:	08 95       	ret

0000105a <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    105a:	30 91 56 00 	lds	r19, 0x0056
    105e:	28 2f       	mov	r18, r24
    1060:	98 2f       	mov	r25, r24
    1062:	90 95       	com	r25
    1064:	93 23       	and	r25, r19
    1066:	66 23       	and	r22, r22
    1068:	09 f4       	brne	.+2      	; 0x106c <CLKSYS_AutoCalibration_Enable+0x12>
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	92 2b       	or	r25, r18
    106e:	e0 e5       	ldi	r30, 0x50	; 80
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	31 f4       	brne	.+12     	; 0x1084 <CLKSYS_AutoCalibration_Enable+0x2a>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    1078:	80 91 68 00 	lds	r24, 0x0068
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	80 93 68 00 	sts	0x0068, r24
    1082:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	29 f4       	brne	.+10     	; 0x1092 <CLKSYS_AutoCalibration_Enable+0x38>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1088:	80 91 60 00 	lds	r24, 0x0060
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	80 93 60 00 	sts	0x0060, r24
    1092:	08 95       	ret

00001094 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
    1094:	83 e5       	ldi	r24, 0x53	; 83
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	63 e0       	ldi	r22, 0x03	; 3
    109a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <CCPWrite>
}
    109e:	08 95       	ret

000010a0 <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
    10a0:	82 e4       	ldi	r24, 0x42	; 66
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <CCPWrite>
}
    10aa:	08 95       	ret

000010ac <setXOSC_32MHz>:
//  - LS900-SI-02 does not contain the crystal
//  - SFLX02-A03 does contain the crystal
// The high frequency crystal is required to clock the ADC without jitter
void setXOSC_32MHz() {
	// configure the crystal to match the chip 
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc,
    10ac:	80 ec       	ldi	r24, 0xC0	; 192
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	4b e0       	ldi	r20, 0x0B	; 11
    10b2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLKSYS_XOSC_Config>
		                    false,
		                    OSC_XOSCSEL_XTAL_16KCLK_gc );
	CLKSYS_Enable(OSC_XOSCEN_bm);
    10b6:	80 91 50 00 	lds	r24, 0x0050
    10ba:	88 60       	ori	r24, 0x08	; 8
    10bc:	80 93 50 00 	sts	0x0050, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    10c0:	80 91 51 00 	lds	r24, 0x0051
    10c4:	83 ff       	sbrs	r24, 3
    10c6:	fc cf       	rjmp	.-8      	; 0x10c0 <setXOSC_32MHz+0x14>
	// configure PLL to use the crystal and turn on
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
    10c8:	80 ec       	ldi	r24, 0xC0	; 192
    10ca:	62 e0       	ldi	r22, 0x02	; 2
    10cc:	0e 94 fc 07 	call	0xff8	; 0xff8 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    10d0:	80 91 50 00 	lds	r24, 0x0050
    10d4:	80 61       	ori	r24, 0x10	; 16
    10d6:	80 93 50 00 	sts	0x0050, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    10da:	80 91 51 00 	lds	r24, 0x0051
    10de:	84 ff       	sbrs	r24, 4
    10e0:	fc cf       	rjmp	.-8      	; 0x10da <setXOSC_32MHz+0x2e>
	// set as system clock and disable unused RC oscillator
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	0e 94 12 08 	call	0x1024	; 0x1024 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	0e 94 02 08 	call	0x1004	; 0x1004 <CLKSYS_Disable>
}
    10ee:	08 95       	ret

000010f0 <set_16MHz>:

// produces consistent but inaccurate clock period.
void set_16MHz() {
	// select 32MHz Oscillator and prescale by 1/2
	CLKSYS_Enable(OSC_RC32MEN_bm);
    10f0:	80 91 50 00 	lds	r24, 0x0050
    10f4:	82 60       	ori	r24, 0x02	; 2
    10f6:	80 93 50 00 	sts	0x0050, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	0e 94 0c 08 	call	0x1018	; 0x1018 <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
    1102:	80 91 51 00 	lds	r24, 0x0051
    1106:	81 ff       	sbrs	r24, 1
    1108:	fc cf       	rjmp	.-8      	; 0x1102 <set_16MHz+0x12>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	0e 94 12 08 	call	0x1024	; 0x1024 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	0e 94 02 08 	call	0x1004	; 0x1004 <CLKSYS_Disable>
	
}
    1116:	08 95       	ret

00001118 <set_32MHz>:


// produces consistent but inaccurate clock period.
void set_32MHz() {
	// select 32MHz Oscillator and prescale by 1
	CLKSYS_Enable(OSC_RC32MEN_bm);
    1118:	80 91 50 00 	lds	r24, 0x0050
    111c:	82 60       	ori	r24, 0x02	; 2
    111e:	80 93 50 00 	sts	0x0050, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	0e 94 0c 08 	call	0x1018	; 0x1018 <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
    112a:	80 91 51 00 	lds	r24, 0x0051
    112e:	81 ff       	sbrs	r24, 1
    1130:	fc cf       	rjmp	.-8      	; 0x112a <set_32MHz+0x12>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	0e 94 12 08 	call	0x1024	; 0x1024 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	0e 94 02 08 	call	0x1004	; 0x1004 <CLKSYS_Disable>
	
}
    113e:	08 95       	ret

00001140 <portExCS>:
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
    1140:	88 23       	and	r24, r24
    1142:	29 f0       	breq	.+10     	; 0x114e <portExCS+0xe>
    1144:	88 e0       	ldi	r24, 0x08	; 8
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f6 e0       	ldi	r31, 0x06	; 6
    114a:	86 83       	std	Z+6, r24	; 0x06
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <portExCS+0x16>
	else {
		PORTA.OUTSET = PIN3_bm;
    114e:	88 e0       	ldi	r24, 0x08	; 8
    1150:	e0 e0       	ldi	r30, 0x00	; 0
    1152:	f6 e0       	ldi	r31, 0x06	; 6
    1154:	85 83       	std	Z+5, r24	; 0x05
    1156:	8a e6       	ldi	r24, 0x6A	; 106
    1158:	8a 95       	dec	r24
    115a:	f1 f7       	brne	.-4      	; 0x1158 <portExCS+0x18>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <portExCS+0x1e>
	}
	_delay_us(10);
}
    115e:	08 95       	ret

00001160 <Ext1Power>:
	}
}

void Ext1Power(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN5_bm;
    1160:	e0 ea       	ldi	r30, 0xA0	; 160
    1162:	f6 e0       	ldi	r31, 0x06	; 6
		
	}
}

void Ext1Power(uint8_t on) {
	if (on) {
    1164:	88 23       	and	r24, r24
    1166:	69 f0       	breq	.+26     	; 0x1182 <Ext1Power+0x22>
		PORTF.DIRSET = PIN5_bm;
    1168:	80 e2       	ldi	r24, 0x20	; 32
    116a:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN5_bm;
    116c:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	93 ec       	ldi	r25, 0xC3	; 195
    1172:	a9 e0       	ldi	r26, 0x09	; 9
    1174:	81 50       	subi	r24, 0x01	; 1
    1176:	90 40       	sbci	r25, 0x00	; 0
    1178:	a0 40       	sbci	r26, 0x00	; 0
    117a:	e1 f7       	brne	.-8      	; 0x1174 <Ext1Power+0x14>
    117c:	00 c0       	rjmp	.+0      	; 0x117e <Ext1Power+0x1e>
    117e:	00 00       	nop
    1180:	08 95       	ret
		//PortEx_DIRSET(PIN3_bm, PS_BANKB);
		//PortEx_OUTSET(PIN3_bm, PS_BANKB);  //write protect SDHC
		_delay_ms(100);
		
	} else {
		PORTF.OUTCLR = PIN5_bm;
    1182:	80 e2       	ldi	r24, 0x20	; 32
    1184:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN5_bm;
    1186:	82 83       	std	Z+2, r24	; 0x02
    1188:	08 95       	ret

0000118a <Ext2Power>:
	}
}

void Ext2Power(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN6_bm;
    118a:	e0 ea       	ldi	r30, 0xA0	; 160
    118c:	f6 e0       	ldi	r31, 0x06	; 6
		//PortEx_OUTCLR(PIN3_bm, PS_BANKB);  //no need to write protect SDHC
	}
}

void Ext2Power(uint8_t on) {
	if (on) {
    118e:	88 23       	and	r24, r24
    1190:	69 f0       	breq	.+26     	; 0x11ac <Ext2Power+0x22>
		PORTF.DIRSET = PIN6_bm;
    1192:	80 e4       	ldi	r24, 0x40	; 64
    1194:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN6_bm;
    1196:	85 83       	std	Z+5, r24	; 0x05
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	93 ec       	ldi	r25, 0xC3	; 195
    119c:	a9 e0       	ldi	r26, 0x09	; 9
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	90 40       	sbci	r25, 0x00	; 0
    11a2:	a0 40       	sbci	r26, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <Ext2Power+0x14>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <Ext2Power+0x1e>
    11a8:	00 00       	nop
    11aa:	08 95       	ret
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN6_bm;
    11ac:	80 e4       	ldi	r24, 0x40	; 64
    11ae:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN6_bm;
    11b0:	82 83       	std	Z+2, r24	; 0x02
    11b2:	08 95       	ret

000011b4 <HVPower>:
	}
}

void HVPower(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN7_bm;
    11b4:	e0 ea       	ldi	r30, 0xA0	; 160
    11b6:	f6 e0       	ldi	r31, 0x06	; 6
		PORTF.DIRCLR = PIN6_bm;
	}
}

void HVPower(uint8_t on) {
	if (on) {
    11b8:	88 23       	and	r24, r24
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <HVPower+0x22>
		PORTF.DIRSET = PIN7_bm;
    11bc:	80 e8       	ldi	r24, 0x80	; 128
    11be:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN7_bm;
    11c0:	85 83       	std	Z+5, r24	; 0x05
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	93 ec       	ldi	r25, 0xC3	; 195
    11c6:	a9 e0       	ldi	r26, 0x09	; 9
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	90 40       	sbci	r25, 0x00	; 0
    11cc:	a0 40       	sbci	r26, 0x00	; 0
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <HVPower+0x14>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <HVPower+0x1e>
    11d2:	00 00       	nop
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <HVPower+0x28>
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN7_bm;
    11d6:	80 e8       	ldi	r24, 0x80	; 128
    11d8:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN7_bm;
    11da:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11dc:	af e3       	ldi	r26, 0x3F	; 63
    11de:	bf e1       	ldi	r27, 0x1F	; 31
    11e0:	11 97       	sbiw	r26, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <HVPower+0x2c>
    11e4:	00 c0       	rjmp	.+0      	; 0x11e6 <HVPower+0x32>
    11e6:	00 00       	nop
	}
	_delay_us(1000);
}
    11e8:	08 95       	ret

000011ea <enableADCMUX>:
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
    11ea:	e0 e0       	ldi	r30, 0x00	; 0
    11ec:	f6 e0       	ldi	r31, 0x06	; 6
	if (upperCS) upperMuxCS(FALSE);
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
    11ee:	88 23       	and	r24, r24
    11f0:	21 f0       	breq	.+8      	; 0x11fa <enableADCMUX+0x10>
		PORTA.DIRSET = PIN5_bm;
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
    11f6:	85 83       	std	Z+5, r24	; 0x05
    11f8:	08 95       	ret
	} else {
		PORTA.OUTCLR = PIN5_bm;
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
    11fe:	82 83       	std	Z+2, r24	; 0x02
    1200:	08 95       	ret

00001202 <lowerMuxCS>:
	}
}

void lowerMuxCS(uint8_t write) {
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
    1202:	88 23       	and	r24, r24
    1204:	29 f0       	breq	.+10     	; 0x1210 <lowerMuxCS+0xe>
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	e0 e8       	ldi	r30, 0x80	; 128
    120a:	f6 e0       	ldi	r31, 0x06	; 6
    120c:	86 83       	std	Z+6, r24	; 0x06
    120e:	08 95       	ret
	else PORTE.OUTSET = PIN4_bm;
    1210:	80 e1       	ldi	r24, 0x10	; 16
    1212:	e0 e8       	ldi	r30, 0x80	; 128
    1214:	f6 e0       	ldi	r31, 0x06	; 6
    1216:	85 83       	std	Z+5, r24	; 0x05
    1218:	08 95       	ret

0000121a <upperMuxCS>:
}
void upperMuxCS(uint8_t write) {
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
    121a:	88 23       	and	r24, r24
    121c:	29 f0       	breq	.+10     	; 0x1228 <upperMuxCS+0xe>
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	e0 e4       	ldi	r30, 0x40	; 64
    1222:	f6 e0       	ldi	r31, 0x06	; 6
    1224:	86 83       	std	Z+6, r24	; 0x06
    1226:	08 95       	ret
	else PORTC.OUTSET = PIN1_bm;
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	e0 e4       	ldi	r30, 0x40	; 64
    122c:	f6 e0       	ldi	r31, 0x06	; 6
    122e:	85 83       	std	Z+5, r24	; 0x05
    1230:	08 95       	ret

00001232 <setADCInput>:

/*! \brief Sets input channel to AD7767 via the A0, A1, A2 control lines of ADG758
 */
void setADCInput(uint8_t channel) {
	// set bit A0 to LSB
	if(channel & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    1232:	20 e4       	ldi	r18, 0x40	; 64
    1234:	e0 e0       	ldi	r30, 0x00	; 0
    1236:	f6 e0       	ldi	r31, 0x06	; 6
    1238:	80 ff       	sbrs	r24, 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <setADCInput+0xe>
    123c:	25 83       	std	Z+5, r18	; 0x05
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <setADCInput+0x10>
	else {PORTA.OUTCLR = PIN6_bm;}
    1240:	26 83       	std	Z+6, r18	; 0x06
	// set bit A1 to second bit
	if(channel & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    1242:	22 e0       	ldi	r18, 0x02	; 2
    1244:	e0 e2       	ldi	r30, 0x20	; 32
    1246:	f6 e0       	ldi	r31, 0x06	; 6
    1248:	81 ff       	sbrs	r24, 1
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <setADCInput+0x1e>
    124c:	25 83       	std	Z+5, r18	; 0x05
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <setADCInput+0x20>
	else {PORTB.OUTCLR = PIN1_bm;}
    1250:	26 83       	std	Z+6, r18	; 0x06
	// set bit A3 to third bit
	if(channel & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    1252:	82 ff       	sbrs	r24, 2
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <setADCInput+0x2e>
    1256:	84 e0       	ldi	r24, 0x04	; 4
    1258:	e0 e2       	ldi	r30, 0x20	; 32
    125a:	f6 e0       	ldi	r31, 0x06	; 6
    125c:	85 83       	std	Z+5, r24	; 0x05
    125e:	08 95       	ret
	else {PORTB.OUTCLR = PIN2_bm;}
    1260:	84 e0       	ldi	r24, 0x04	; 4
    1262:	e0 e2       	ldi	r30, 0x20	; 32
    1264:	f6 e0       	ldi	r31, 0x06	; 6
    1266:	86 83       	std	Z+6, r24	; 0x06
    1268:	08 95       	ret

0000126a <SPIInit>:
}


void SPIInit(uint8_t mode) {
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
    126a:	e0 e4       	ldi	r30, 0x40	; 64
    126c:	f6 e0       	ldi	r31, 0x06	; 6
    126e:	90 e1       	ldi	r25, 0x10	; 16
    1270:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
    1272:	28 e3       	ldi	r18, 0x38	; 56
    1274:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
    1276:	95 83       	std	Z+5, r25	; 0x05

	// init SPI
	SPIC.CTRL =	SPI_PRESCALER |  // set clock speed
    1278:	81 65       	ori	r24, 0x51	; 81
    127a:	a0 ec       	ldi	r26, 0xC0	; 192
    127c:	b8 e0       	ldi	r27, 0x08	; 8
    127e:	8c 93       	st	X, r24
	            0x00 |  // set data order msb first
	            SPI_MASTER_bm | // set SPI master
	            mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	1c 92       	st	X, r1
    1284:	11 97       	sbiw	r26, 0x01	; 1

 	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
    1286:	80 ea       	ldi	r24, 0xA0	; 160
    1288:	81 83       	std	Z+1, r24	; 0x01

	
}
    128a:	08 95       	ret

0000128c <SPIInit2>:
//use this if using a prescalar
void SPIInit2(uint8_t mode, uint8_t prescalar) {
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
    128c:	e0 e4       	ldi	r30, 0x40	; 64
    128e:	f6 e0       	ldi	r31, 0x06	; 6
    1290:	90 e1       	ldi	r25, 0x10	; 16
    1292:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
    1294:	28 e3       	ldi	r18, 0x38	; 56
    1296:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
    1298:	95 83       	std	Z+5, r25	; 0x05
	

	// init SPI
	SPIC.CTRL =	prescalar |  // set clock speed
    129a:	80 65       	ori	r24, 0x50	; 80
    129c:	86 2b       	or	r24, r22
    129e:	a0 ec       	ldi	r26, 0xC0	; 192
    12a0:	b8 e0       	ldi	r27, 0x08	; 8
    12a2:	8c 93       	st	X, r24
	0x00 |  // set data order msb first
	SPI_MASTER_bm | // set SPI master
	mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	1c 92       	st	X, r1
    12a8:	11 97       	sbiw	r26, 0x01	; 1

	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
    12aa:	80 ea       	ldi	r24, 0xA0	; 160
    12ac:	81 83       	std	Z+1, r24	; 0x01
}
    12ae:	08 95       	ret

000012b0 <SPICS>:

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
    12b0:	88 23       	and	r24, r24
    12b2:	29 f0       	breq	.+10     	; 0x12be <SPICS+0xe>
    12b4:	80 e1       	ldi	r24, 0x10	; 16
    12b6:	e0 e4       	ldi	r30, 0x40	; 64
    12b8:	f6 e0       	ldi	r31, 0x06	; 6
    12ba:	86 83       	std	Z+6, r24	; 0x06
    12bc:	08 95       	ret
	else {
		PORTC.OUTSET = PIN4_bm;
    12be:	80 e1       	ldi	r24, 0x10	; 16
    12c0:	e0 e4       	ldi	r30, 0x40	; 64
    12c2:	f6 e0       	ldi	r31, 0x06	; 6
    12c4:	85 83       	std	Z+5, r24	; 0x05
    12c6:	08 95       	ret

000012c8 <SPIDisable>:
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
    12c8:	e0 e4       	ldi	r30, 0x40	; 64
    12ca:	f6 e0       	ldi	r31, 0x06	; 6
    12cc:	80 e1       	ldi	r24, 0x10	; 16
    12ce:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
    12d0:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
    12d4:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
    12d6:	80 eb       	ldi	r24, 0xB0	; 176
    12d8:	82 83       	std	Z+2, r24	; 0x02

}
    12da:	08 95       	ret

000012dc <set_filter>:
 *	filterConfig[2]	Channel 3 and 7 mask
 *	filterConfig[3]	Channel 4 and 8 mask
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
*/
void set_filter(uint8_t filterConfig) {
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
	// hack to get ADC to work
	//filterConfig |= 0x0F;

	// boolean flags for upper/lower channels CS
	uint8_t lowerCS = filterConfig & 0x03; 
    12e0:	d8 2f       	mov	r29, r24
    12e2:	d3 70       	andi	r29, 0x03	; 3
	uint8_t upperCS = filterConfig & 0x0C;
    12e4:	c8 2f       	mov	r28, r24
    12e6:	cc 70       	andi	r28, 0x0C	; 12

	// update left and right channel status
	if (filterConfig & (BIT0_bm | BIT2_bm)) channelStatus = 
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	45 70       	andi	r20, 0x05	; 5
    12f0:	50 70       	andi	r21, 0x00	; 0
    12f2:	41 15       	cp	r20, r1
    12f4:	51 05       	cpc	r21, r1
    12f6:	49 f0       	breq	.+18     	; 0x130a <set_filter+0x2e>
    12f8:	40 91 73 50 	lds	r20, 0x5073
    12fc:	98 2f       	mov	r25, r24
    12fe:	92 95       	swap	r25
    1300:	9f 70       	andi	r25, 0x0F	; 15
    1302:	40 7f       	andi	r20, 0xF0	; 240
    1304:	94 2b       	or	r25, r20
    1306:	90 93 73 50 	sts	0x5073, r25
		(0xF0 & channelStatus) | (filterConfig >> 4);  //right
	if (filterConfig & (BIT1_bm | BIT3_bm)) channelStatus =
    130a:	2a 70       	andi	r18, 0x0A	; 10
    130c:	30 70       	andi	r19, 0x00	; 0
    130e:	21 15       	cp	r18, r1
    1310:	31 05       	cpc	r19, r1
    1312:	39 f0       	breq	.+14     	; 0x1322 <set_filter+0x46>
    1314:	90 91 73 50 	lds	r25, 0x5073
    1318:	80 7f       	andi	r24, 0xF0	; 240
    131a:	9f 70       	andi	r25, 0x0F	; 15
    131c:	89 2b       	or	r24, r25
    131e:	80 93 73 50 	sts	0x5073, r24
		(0xF0 & filterConfig) | (0x0F & channelStatus); //left
		
	SPIInit(SPI_MODE_1_gc);
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>

	
	SPIBuffer[0] = channelStatus;
    1328:	80 91 73 50 	lds	r24, 0x5073
    132c:	80 93 63 50 	sts	0x5063, r24
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
    1330:	dd 23       	and	r29, r29
    1332:	19 f0       	breq	.+6      	; 0x133a <set_filter+0x5e>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 01 09 	call	0x1202	; 0x1202 <lowerMuxCS>
	if (upperCS) upperMuxCS(TRUE);
    133a:	cc 23       	and	r28, r28
    133c:	19 f0       	breq	.+6      	; 0x1344 <set_filter+0x68>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	0e 94 0d 09 	call	0x121a	; 0x121a <upperMuxCS>

	SPICS(TRUE);
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>

	// Send all logic high to ensure that the SDO line on the chip is
	// left in high Z state after SPI transaction.
	// The t-1 SDI transaction is output on the SDO and the pin left in the configuration.
	// of the last bit
	SPIC.DATA = 0xFF;
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	e0 ec       	ldi	r30, 0xC0	; 192
    134e:	f8 e0       	ldi	r31, 0x08	; 8
    1350:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1352:	80 91 c2 08 	lds	r24, 0x08C2
    1356:	87 ff       	sbrs	r24, 7
    1358:	fc cf       	rjmp	.-8      	; 0x1352 <set_filter+0x76>
	SPIBuffer[12] = SPIC.DATA;
    135a:	80 91 c3 08 	lds	r24, 0x08C3
    135e:	80 93 6f 50 	sts	0x506F, r24

	nop();
    1362:	00 00       	nop

	SPIC.DATA = SPIBuffer[0];
    1364:	80 91 63 50 	lds	r24, 0x5063
    1368:	e0 ec       	ldi	r30, 0xC0	; 192
    136a:	f8 e0       	ldi	r31, 0x08	; 8
    136c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    136e:	80 91 c2 08 	lds	r24, 0x08C2
    1372:	87 ff       	sbrs	r24, 7
    1374:	fc cf       	rjmp	.-8      	; 0x136e <set_filter+0x92>
	SPIBuffer[12] = SPIC.DATA;
    1376:	80 91 c3 08 	lds	r24, 0x08C3
    137a:	80 93 6f 50 	sts	0x506F, r24
	SPICS(FALSE);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>

	if (lowerCS) lowerMuxCS(FALSE);
    1384:	dd 23       	and	r29, r29
    1386:	19 f0       	breq	.+6      	; 0x138e <set_filter+0xb2>
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 01 09 	call	0x1202	; 0x1202 <lowerMuxCS>
	if (upperCS) upperMuxCS(FALSE);
    138e:	cc 23       	and	r28, r28
    1390:	19 f0       	breq	.+6      	; 0x1398 <set_filter+0xbc>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	0e 94 0d 09 	call	0x121a	; 0x121a <upperMuxCS>
	SPIDisable();
    1398:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
}
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <PortEx_OUTCLR>:
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	69 83       	std	Y+1, r22	; 0x01
    13b4:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	portExCS(TRUE);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 a0 08 	call	0x1140	; 0x1140 <portExCS>
    13c4:	91 2f       	mov	r25, r17
    13c6:	90 95       	com	r25
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
    13c8:	69 81       	ldd	r22, Y+1	; 0x01
    13ca:	66 23       	and	r22, r22
    13cc:	31 f0       	breq	.+12     	; 0x13da <PortEx_OUTCLR+0x38>
    13ce:	80 91 5d 40 	lds	r24, 0x405D
    13d2:	89 23       	and	r24, r25
    13d4:	80 93 5d 40 	sts	0x405D, r24
    13d8:	05 c0       	rjmp	.+10     	; 0x13e4 <PortEx_OUTCLR+0x42>
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
    13da:	80 91 74 50 	lds	r24, 0x5074
    13de:	89 23       	and	r24, r25
    13e0:	80 93 74 50 	sts	0x5074, r24
	
	SPIBuffer[0] = PS_WRITE;
    13e4:	80 e4       	ldi	r24, 0x40	; 64
    13e6:	80 93 63 50 	sts	0x5063, r24
	if(bank) {
    13ea:	66 23       	and	r22, r22
    13ec:	31 f0       	breq	.+12     	; 0x13fa <PortEx_OUTCLR+0x58>
		SPIBuffer[1]=PS_OLATA;
    13ee:	84 e1       	ldi	r24, 0x14	; 20
    13f0:	80 93 64 50 	sts	0x5064, r24
		SPIBuffer[2] = bankA_OUT;
    13f4:	80 91 5d 40 	lds	r24, 0x405D
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <PortEx_OUTCLR+0x62>
	} else {
		SPIBuffer[1]=PS_OLATB;
    13fa:	85 e1       	ldi	r24, 0x15	; 21
    13fc:	80 93 64 50 	sts	0x5064, r24
		SPIBuffer[2] = bankB_OUT; 
    1400:	80 91 74 50 	lds	r24, 0x5074
    1404:	80 93 65 50 	sts	0x5065, r24
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    140c:	e0 ec       	ldi	r30, 0xC0	; 192
    140e:	f8 e0       	ldi	r31, 0x08	; 8
    1410:	dc 01       	movw	r26, r24
    1412:	ad 59       	subi	r26, 0x9D	; 157
    1414:	bf 4a       	sbci	r27, 0xAF	; 175
    1416:	2c 91       	ld	r18, X
    1418:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    141a:	20 91 c2 08 	lds	r18, 0x08C2
    141e:	27 ff       	sbrs	r18, 7
    1420:	fc cf       	rjmp	.-8      	; 0x141a <PortEx_OUTCLR+0x78>
		SPIBuffer[12] = SPIC.DATA;
    1422:	20 91 c3 08 	lds	r18, 0x08C3
    1426:	20 93 6f 50 	sts	0x506F, r18
    142a:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	79 f7       	brne	.-34     	; 0x1410 <PortEx_OUTCLR+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	portExCS(FALSE);
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 a0 08 	call	0x1140	; 0x1140 <portExCS>
	SPIDisable();
    143e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
}
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	08 95       	ret

0000144c <PortEx_OUTSET>:
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	69 83       	std	Y+1, r22	; 0x01
    145e:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	portExCS(TRUE);
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	0e 94 a0 08 	call	0x1140	; 0x1140 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
    146e:	69 81       	ldd	r22, Y+1	; 0x01
    1470:	66 23       	and	r22, r22
    1472:	31 f0       	breq	.+12     	; 0x1480 <PortEx_OUTSET+0x34>
    1474:	80 91 5d 40 	lds	r24, 0x405D
    1478:	81 2b       	or	r24, r17
    147a:	80 93 5d 40 	sts	0x405D, r24
    147e:	05 c0       	rjmp	.+10     	; 0x148a <PortEx_OUTSET+0x3e>
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
    1480:	80 91 74 50 	lds	r24, 0x5074
    1484:	81 2b       	or	r24, r17
    1486:	80 93 74 50 	sts	0x5074, r24
	
	SPIBuffer[0] = PS_WRITE;
    148a:	80 e4       	ldi	r24, 0x40	; 64
    148c:	80 93 63 50 	sts	0x5063, r24
	if(bank) {
    1490:	66 23       	and	r22, r22
    1492:	31 f0       	breq	.+12     	; 0x14a0 <PortEx_OUTSET+0x54>
		SPIBuffer[1]=PS_OLATA;
    1494:	84 e1       	ldi	r24, 0x14	; 20
    1496:	80 93 64 50 	sts	0x5064, r24
		SPIBuffer[2] = bankA_OUT;
    149a:	80 91 5d 40 	lds	r24, 0x405D
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <PortEx_OUTSET+0x5e>
	} else {
		SPIBuffer[1]=PS_OLATB;
    14a0:	85 e1       	ldi	r24, 0x15	; 21
    14a2:	80 93 64 50 	sts	0x5064, r24
		SPIBuffer[2] = bankB_OUT; 
    14a6:	80 91 74 50 	lds	r24, 0x5074
    14aa:	80 93 65 50 	sts	0x5065, r24
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    14b2:	e0 ec       	ldi	r30, 0xC0	; 192
    14b4:	f8 e0       	ldi	r31, 0x08	; 8
    14b6:	dc 01       	movw	r26, r24
    14b8:	ad 59       	subi	r26, 0x9D	; 157
    14ba:	bf 4a       	sbci	r27, 0xAF	; 175
    14bc:	2c 91       	ld	r18, X
    14be:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    14c0:	20 91 c2 08 	lds	r18, 0x08C2
    14c4:	27 ff       	sbrs	r18, 7
    14c6:	fc cf       	rjmp	.-8      	; 0x14c0 <PortEx_OUTSET+0x74>
		SPIBuffer[12] = SPIC.DATA;
    14c8:	20 91 c3 08 	lds	r18, 0x08C3
    14cc:	20 93 6f 50 	sts	0x506F, r18
    14d0:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	79 f7       	brne	.-34     	; 0x14b6 <PortEx_OUTSET+0x6a>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	portExCS(FALSE);
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	0e 94 a0 08 	call	0x1140	; 0x1140 <portExCS>
	SPIDisable();
    14e4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
}
    14e8:	0f 90       	pop	r0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	08 95       	ret

000014f2 <set_ampGain>:
 *	All selected op-amps will be set to the same gain value.
 *
 *	\param channel	channel for gain to be set
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 */
void set_ampGain(uint8_t channel, uint8_t gainExponent) {
    14f2:	cf 93       	push	r28
    14f4:	c6 2f       	mov	r28, r22
	// set chip select.  note: AD8231 CS is select on low
	PortEx_OUTCLR((1 << channel), PS_BANKA);
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <set_ampGain+0xe>
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <set_ampGain+0xa>
    1504:	82 2f       	mov	r24, r18
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <PortEx_OUTCLR>
	//setPortEx(~(1 << channel), PS_BANKA);
	// set gain
	// set bit A0
	if(gainExponent & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    150c:	80 e4       	ldi	r24, 0x40	; 64
    150e:	e0 e0       	ldi	r30, 0x00	; 0
    1510:	f6 e0       	ldi	r31, 0x06	; 6
    1512:	c0 ff       	sbrs	r28, 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <set_ampGain+0x28>
    1516:	85 83       	std	Z+5, r24	; 0x05
    1518:	01 c0       	rjmp	.+2      	; 0x151c <set_ampGain+0x2a>
	else {PORTA.OUTCLR = PIN6_bm;}
    151a:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1
	if(gainExponent & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	e0 e2       	ldi	r30, 0x20	; 32
    1520:	f6 e0       	ldi	r31, 0x06	; 6
    1522:	c1 ff       	sbrs	r28, 1
    1524:	02 c0       	rjmp	.+4      	; 0x152a <set_ampGain+0x38>
    1526:	85 83       	std	Z+5, r24	; 0x05
    1528:	01 c0       	rjmp	.+2      	; 0x152c <set_ampGain+0x3a>
	else {PORTB.OUTCLR = PIN1_bm;}
    152a:	86 83       	std	Z+6, r24	; 0x06
	// set bit A2
	if(gainExponent & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	e0 e2       	ldi	r30, 0x20	; 32
    1530:	f6 e0       	ldi	r31, 0x06	; 6
    1532:	c2 ff       	sbrs	r28, 2
    1534:	02 c0       	rjmp	.+4      	; 0x153a <set_ampGain+0x48>
    1536:	85 83       	std	Z+5, r24	; 0x05
    1538:	01 c0       	rjmp	.+2      	; 0x153c <set_ampGain+0x4a>
	else {PORTB.OUTCLR = PIN2_bm;}
    153a:	86 83       	std	Z+6, r24	; 0x06
    153c:	8a e0       	ldi	r24, 0x0A	; 10
    153e:	8a 95       	dec	r24
    1540:	f1 f7       	brne	.-4      	; 0x153e <set_ampGain+0x4c>
    1542:	00 c0       	rjmp	.+0      	; 0x1544 <set_ampGain+0x52>

	_delay_us(1);

	PortEx_OUTSET(0xFF, PS_BANKA);	// write protect all AD8231 amps
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	0e 94 26 0a 	call	0x144c	; 0x144c <PortEx_OUTSET>
	//setPortEx(0xFF, PS_BANKA);

}
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <PortEx_DIRCLR>:
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	69 83       	std	Y+1, r22	; 0x01
    1562:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	portExCS(TRUE);
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 a0 08 	call	0x1140	; 0x1140 <portExCS>
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
    1572:	69 81       	ldd	r22, Y+1	; 0x01
    1574:	66 23       	and	r22, r22
    1576:	39 f0       	breq	.+14     	; 0x1586 <PortEx_DIRCLR+0x36>
    1578:	80 91 72 50 	lds	r24, 0x5072
    157c:	80 95       	com	r24
    157e:	81 23       	and	r24, r17
    1580:	80 93 72 50 	sts	0x5072, r24
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <PortEx_DIRCLR+0x42>
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
    1586:	80 91 9d 50 	lds	r24, 0x509D
    158a:	80 95       	com	r24
    158c:	81 23       	and	r24, r17
    158e:	80 93 9d 50 	sts	0x509D, r24
	
	SPIBuffer[0] = PS_WRITE;
    1592:	80 e4       	ldi	r24, 0x40	; 64
    1594:	80 93 63 50 	sts	0x5063, r24
	if(bank) {
    1598:	66 23       	and	r22, r22
    159a:	29 f0       	breq	.+10     	; 0x15a6 <PortEx_DIRCLR+0x56>
		SPIBuffer[1]=PS_IODIRA;
    159c:	10 92 64 50 	sts	0x5064, r1
		SPIBuffer[2] = ~bankA_DIR; 
    15a0:	80 91 72 50 	lds	r24, 0x5072
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <PortEx_DIRCLR+0x60>
	} else {
		SPIBuffer[1]=PS_IODIRB;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	80 93 64 50 	sts	0x5064, r24
		SPIBuffer[2] = ~bankB_DIR;
    15ac:	80 91 9d 50 	lds	r24, 0x509D
    15b0:	80 95       	com	r24
    15b2:	80 93 65 50 	sts	0x5065, r24
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    15ba:	e0 ec       	ldi	r30, 0xC0	; 192
    15bc:	f8 e0       	ldi	r31, 0x08	; 8
    15be:	dc 01       	movw	r26, r24
    15c0:	ad 59       	subi	r26, 0x9D	; 157
    15c2:	bf 4a       	sbci	r27, 0xAF	; 175
    15c4:	2c 91       	ld	r18, X
    15c6:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    15c8:	20 91 c2 08 	lds	r18, 0x08C2
    15cc:	27 ff       	sbrs	r18, 7
    15ce:	fc cf       	rjmp	.-8      	; 0x15c8 <PortEx_DIRCLR+0x78>
		SPIBuffer[12] = SPIC.DATA;
    15d0:	20 91 c3 08 	lds	r18, 0x08C3
    15d4:	20 93 6f 50 	sts	0x506F, r18
    15d8:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	79 f7       	brne	.-34     	; 0x15be <PortEx_DIRCLR+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	portExCS(FALSE);
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	0e 94 a0 08 	call	0x1140	; 0x1140 <portExCS>
	SPIDisable();
    15ec:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
}
    15f0:	0f 90       	pop	r0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	08 95       	ret

000015fa <PortEx_DIRSET>:
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	69 83       	std	Y+1, r22	; 0x01
    160c:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	portExCS(TRUE);
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	0e 94 a0 08 	call	0x1140	; 0x1140 <portExCS>

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
    161c:	69 81       	ldd	r22, Y+1	; 0x01
    161e:	66 23       	and	r22, r22
    1620:	31 f0       	breq	.+12     	; 0x162e <PortEx_DIRSET+0x34>
    1622:	80 91 72 50 	lds	r24, 0x5072
    1626:	81 2b       	or	r24, r17
    1628:	80 93 72 50 	sts	0x5072, r24
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <PortEx_DIRSET+0x3e>
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
    162e:	80 91 9d 50 	lds	r24, 0x509D
    1632:	81 2b       	or	r24, r17
    1634:	80 93 9d 50 	sts	0x509D, r24
	
	SPIBuffer[0] = PS_WRITE;
    1638:	80 e4       	ldi	r24, 0x40	; 64
    163a:	80 93 63 50 	sts	0x5063, r24
	if(bank) {
    163e:	66 23       	and	r22, r22
    1640:	29 f0       	breq	.+10     	; 0x164c <PortEx_DIRSET+0x52>
		SPIBuffer[1]=PS_IODIRA;
    1642:	10 92 64 50 	sts	0x5064, r1
		SPIBuffer[2] = ~bankA_DIR; 
    1646:	80 91 72 50 	lds	r24, 0x5072
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <PortEx_DIRSET+0x5c>
	} else {
		SPIBuffer[1]=PS_IODIRB;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 93 64 50 	sts	0x5064, r24
		SPIBuffer[2] = ~bankB_DIR;
    1652:	80 91 9d 50 	lds	r24, 0x509D
    1656:	80 95       	com	r24
    1658:	80 93 65 50 	sts	0x5065, r24
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    1660:	e0 ec       	ldi	r30, 0xC0	; 192
    1662:	f8 e0       	ldi	r31, 0x08	; 8
    1664:	dc 01       	movw	r26, r24
    1666:	ad 59       	subi	r26, 0x9D	; 157
    1668:	bf 4a       	sbci	r27, 0xAF	; 175
    166a:	2c 91       	ld	r18, X
    166c:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
    166e:	20 91 c2 08 	lds	r18, 0x08C2
    1672:	27 ff       	sbrs	r18, 7
    1674:	fc cf       	rjmp	.-8      	; 0x166e <PortEx_DIRSET+0x74>
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
    1676:	20 91 c3 08 	lds	r18, 0x08C3
    167a:	20 93 6f 50 	sts	0x506F, r18
    167e:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	79 f7       	brne	.-34     	; 0x1664 <PortEx_DIRSET+0x6a>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
	}

	portExCS(FALSE);
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	0e 94 a0 08 	call	0x1140	; 0x1140 <portExCS>
	SPICS(FALSE);
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    1692:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>


}
    1696:	0f 90       	pop	r0
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	08 95       	ret

000016a0 <ADCPower>:
	portExCS(FALSE);	
	SPIDisable();
}
*/

void ADCPower(uint8_t on) {
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
	if (on) {
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
    16a8:	00 e0       	ldi	r16, 0x00	; 0
    16aa:	16 e0       	ldi	r17, 0x06	; 6
	SPIDisable();
}
*/

void ADCPower(uint8_t on) {
	if (on) {
    16ac:	88 23       	and	r24, r24
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <ADCPower+0x12>
    16b0:	44 c0       	rjmp	.+136    	; 0x173a <ADCPower+0x9a>
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
    16b2:	8e ed       	ldi	r24, 0xDE	; 222
    16b4:	d8 01       	movw	r26, r16
    16b6:	11 96       	adiw	r26, 0x01	; 1
    16b8:	8c 93       	st	X, r24
		PORTB.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
    16ba:	c0 e2       	ldi	r28, 0x20	; 32
    16bc:	d6 e0       	ldi	r29, 0x06	; 6
    16be:	4e e0       	ldi	r20, 0x0E	; 14
    16c0:	49 83       	std	Y+1, r20	; 0x01
		PORTC.DIRSET = PIN0_bm | PIN1_bm;// VDCA and VDC-2 and MUX-SYNC1
    16c2:	e0 e4       	ldi	r30, 0x40	; 64
    16c4:	f6 e0       	ldi	r31, 0x06	; 6
    16c6:	63 e0       	ldi	r22, 0x03	; 3
    16c8:	61 83       	std	Z+1, r22	; 0x01
		PORTE.DIRSET = PIN4_bm; // MUX-SYNC2
    16ca:	80 e8       	ldi	r24, 0x80	; 128
    16cc:	96 e0       	ldi	r25, 0x06	; 6
    16ce:	50 e1       	ldi	r21, 0x10	; 16
    16d0:	dc 01       	movw	r26, r24
    16d2:	11 96       	adiw	r26, 0x01	; 1
    16d4:	5c 93       	st	X, r21
		PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; // DAC LDAC and CS
    16d6:	20 ea       	ldi	r18, 0xA0	; 160
    16d8:	36 e0       	ldi	r19, 0x06	; 6
    16da:	d9 01       	movw	r26, r18
    16dc:	11 96       	adiw	r26, 0x01	; 1
    16de:	4c 93       	st	X, r20

		// high signal to write protect
		PORTA.OUTSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm;; // portEx-CS
    16e0:	7e e9       	ldi	r23, 0x9E	; 158
    16e2:	d8 01       	movw	r26, r16
    16e4:	15 96       	adiw	r26, 0x05	; 5
    16e6:	7c 93       	st	X, r23
		PORTB.OUTSET = PIN3_bm; // FRAM-CS
    16e8:	78 e0       	ldi	r23, 0x08	; 8
    16ea:	7d 83       	std	Y+5, r23	; 0x05
		PORTC.OUTSET = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
    16ec:	65 83       	std	Z+5, r22	; 0x05
		PORTE.OUTSET = PIN4_bm; // MUX-SYNC2
    16ee:	ec 01       	movw	r28, r24
    16f0:	5d 83       	std	Y+5, r21	; 0x05
		PORTF.OUTSET = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
    16f2:	d9 01       	movw	r26, r18
    16f4:	15 96       	adiw	r26, 0x05	; 5
    16f6:	4c 93       	st	X, r20
		channelStatus = 0x00; // POR to zeros
    16f8:	10 92 73 50 	sts	0x5073, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16fc:	8f ef       	ldi	r24, 0xFF	; 255
    16fe:	93 ec       	ldi	r25, 0xC3	; 195
    1700:	a9 e0       	ldi	r26, 0x09	; 9
    1702:	81 50       	subi	r24, 0x01	; 1
    1704:	90 40       	sbci	r25, 0x00	; 0
    1706:	a0 40       	sbci	r26, 0x00	; 0
    1708:	e1 f7       	brne	.-8      	; 0x1702 <ADCPower+0x62>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <ADCPower+0x6c>
    170c:	00 00       	nop
		_delay_ms(100);

		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
    170e:	80 e4       	ldi	r24, 0x40	; 64
    1710:	82 83       	std	Z+2, r24	; 0x02
				
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
    1712:	10 92 74 50 	sts	0x5074, r1
    1716:	10 92 9d 50 	sts	0x509D, r1
    171a:	10 92 5d 40 	sts	0x405D, r1
    171e:	10 92 72 50 	sts	0x5072, r1
		PortEx_DIRSET(0xFF, PS_BANKA);
    1722:	8f ef       	ldi	r24, 0xFF	; 255
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <PortEx_DIRSET>
		PortEx_OUTSET(0xFF, PS_BANKA);  //write protect IN-AMP 1 thru 8
    172a:	8f ef       	ldi	r24, 0xFF	; 255
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	0e 94 26 0a 	call	0x144c	; 0x144c <PortEx_OUTSET>
		//setPortEx(0xFF, PS_BANKA);
		set_filter(0xFF);  // set filters initially to ensure data out pulled high
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	0e 94 6e 09 	call	0x12dc	; 0x12dc <set_filter>
    1738:	30 c0       	rjmp	.+96     	; 0x179a <ADCPower+0xfa>

	} else {
		// low signal for low power
		PORTA.OUTCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and A0
    173a:	7e ed       	ldi	r23, 0xDE	; 222
    173c:	d8 01       	movw	r26, r16
    173e:	16 96       	adiw	r26, 0x06	; 6
    1740:	7c 93       	st	X, r23
		PORTB.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
    1742:	a0 e2       	ldi	r26, 0x20	; 32
    1744:	b6 e0       	ldi	r27, 0x06	; 6
    1746:	4e e0       	ldi	r20, 0x0E	; 14
    1748:	16 96       	adiw	r26, 0x06	; 6
    174a:	4c 93       	st	X, r20
    174c:	16 97       	sbiw	r26, 0x06	; 6
		PORTC.OUTCLR = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
    174e:	20 e4       	ldi	r18, 0x40	; 64
    1750:	36 e0       	ldi	r19, 0x06	; 6
    1752:	63 e0       	ldi	r22, 0x03	; 3
    1754:	e9 01       	movw	r28, r18
    1756:	6e 83       	std	Y+6, r22	; 0x06
		PORTE.OUTCLR = PIN4_bm; // MUX-SYNC2
    1758:	c0 e8       	ldi	r28, 0x80	; 128
    175a:	d6 e0       	ldi	r29, 0x06	; 6
    175c:	50 e1       	ldi	r21, 0x10	; 16
    175e:	5e 83       	std	Y+6, r21	; 0x06
		PORTF.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
    1760:	80 ea       	ldi	r24, 0xA0	; 160
    1762:	96 e0       	ldi	r25, 0x06	; 6
    1764:	fc 01       	movw	r30, r24
    1766:	46 83       	std	Z+6, r20	; 0x06


		PORTA.DIRCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm | PIN6_bm;
    1768:	f8 01       	movw	r30, r16
    176a:	72 83       	std	Z+2, r23	; 0x02
		PORTB.DIRCLR = PIN1_bm | PIN2_bm| PIN3_bm;
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	4c 93       	st	X, r20
		PORTC.DIRCLR = PIN0_bm | PIN1_bm;
    1770:	d9 01       	movw	r26, r18
    1772:	12 96       	adiw	r26, 0x02	; 2
    1774:	6c 93       	st	X, r22
    1776:	12 97       	sbiw	r26, 0x02	; 2
		PORTE.DIRCLR = PIN4_bm;
    1778:	5a 83       	std	Y+2, r21	; 0x02
		PORTF.DIRCLR = PIN1_bm | PIN2_bm | PIN3_bm;
    177a:	ec 01       	movw	r28, r24
    177c:	4a 83       	std	Y+2, r20	; 0x02
		
		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
    177e:	80 e4       	ldi	r24, 0x40	; 64
    1780:	12 96       	adiw	r26, 0x02	; 2
    1782:	8c 93       	st	X, r24
    1784:	12 97       	sbiw	r26, 0x02	; 2
		
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
    1786:	10 92 74 50 	sts	0x5074, r1
    178a:	10 92 9d 50 	sts	0x509D, r1
    178e:	10 92 5d 40 	sts	0x405D, r1
    1792:	10 92 72 50 	sts	0x5072, r1
		channelStatus = 0x00;
    1796:	10 92 73 50 	sts	0x5073, r1
		
	}
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <CO_collectTemp>:
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    17a4:	2f 92       	push	r2
    17a6:	3f 92       	push	r3
    17a8:	4f 92       	push	r4
    17aa:	5f 92       	push	r5
    17ac:	6f 92       	push	r6
    17ae:	7f 92       	push	r7
    17b0:	8f 92       	push	r8
    17b2:	9f 92       	push	r9
    17b4:	af 92       	push	r10
    17b6:	bf 92       	push	r11
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	25 97       	sbiw	r28, 0x05	; 5
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	1c 01       	movw	r2, r24
    17d4:	6a 83       	std	Y+2, r22	; 0x02
    17d6:	7b 83       	std	Y+3, r23	; 0x03
    17d8:	4c 83       	std	Y+4, r20	; 0x04
    17da:	5d 83       	std	Y+5, r21	; 0x05
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>

	/* Move stored calibration values to ADCA. */
	ADC_CalibrationValues_Load(&ADCA);
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	92 e0       	ldi	r25, 0x02	; 2
    17e6:	0e 94 c4 07 	call	0xf88	; 0xf88 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    17ea:	00 e0       	ldi	r16, 0x00	; 0
    17ec:	12 e0       	ldi	r17, 0x02	; 2
    17ee:	80 91 01 02 	lds	r24, 0x0201
    17f2:	89 7e       	andi	r24, 0xE9	; 233
    17f4:	f8 01       	movw	r30, r16
    17f6:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV32_gc);
    17f8:	80 91 04 02 	lds	r24, 0x0204
    17fc:	88 7f       	andi	r24, 0xF8	; 248
    17fe:	83 60       	ori	r24, 0x03	; 3
    1800:	84 83       	std	Z+4, r24	; 0x04

	/* Set reference voltage on ADCA to be 1.0 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_INT1V_gc); 
    1802:	80 91 02 02 	lds	r24, 0x0202
    1806:	8f 7c       	andi	r24, 0xCF	; 207
    1808:	82 83       	std	Z+2, r24	; 0x02

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
    180a:	a0 e2       	ldi	r26, 0x20	; 32
    180c:	ca 2e       	mov	r12, r26
    180e:	a2 e0       	ldi	r26, 0x02	; 2
    1810:	da 2e       	mov	r13, r26
    1812:	80 91 20 02 	lds	r24, 0x0220
    1816:	80 7e       	andi	r24, 0xE0	; 224
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	80 93 20 02 	sts	0x0220, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	/* Get offset value for ADCA. */
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    181e:	89 e0       	ldi	r24, 0x09	; 9
    1820:	f6 01       	movw	r30, r12
    1822:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
    1824:	80 91 00 02 	lds	r24, 0x0200
    1828:	81 60       	ori	r24, 0x01	; 1
    182a:	80 93 00 02 	sts	0x0200, r24
	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	92 e0       	ldi	r25, 0x02	; 2
    1832:	0e 94 62 07 	call	0xec4	; 0xec4 <ADC_Wait_32MHz>
 	offset = ADC_Offset_Get_Unsigned(&ADCA, &ADCA.CH0, false);
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	92 e0       	ldi	r25, 0x02	; 2
    183a:	60 e2       	ldi	r22, 0x20	; 32
    183c:	72 e0       	ldi	r23, 0x02	; 2
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 6c 07 	call	0xed8	; 0xed8 <ADC_Offset_Get_Unsigned>
    1844:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCA);
    1846:	80 91 00 02 	lds	r24, 0x0200
    184a:	8e 7f       	andi	r24, 0xFE	; 254
    184c:	80 93 00 02 	sts	0x0200, r24
    
	/* Set input to the channels in ADCA */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    1850:	f6 01       	movw	r30, r12
    1852:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
    1854:	80 91 03 02 	lds	r24, 0x0203
    1858:	8f 73       	andi	r24, 0x3F	; 63
    185a:	f8 01       	movw	r30, r16
    185c:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC .*/
	ADC_Enable(&ADCA);
    185e:	80 91 00 02 	lds	r24, 0x0200
    1862:	81 60       	ori	r24, 0x01	; 1
    1864:	80 93 00 02 	sts	0x0200, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	92 e0       	ldi	r25, 0x02	; 2
    186c:	0e 94 62 07 	call	0xec4	; 0xec4 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
    1870:	80 91 01 02 	lds	r24, 0x0201
    1874:	88 60       	ori	r24, 0x08	; 8
    1876:	f8 01       	movw	r30, r16
    1878:	81 83       	std	Z+1, r24	; 0x01
    187a:	00 e0       	ldi	r16, 0x00	; 0
    187c:	14 e0       	ldi	r17, 0x04	; 4
void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    187e:	88 24       	eor	r8, r8
    1880:	99 24       	eor	r9, r9
    1882:	54 01       	movw	r10, r8

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
    1884:	41 2c       	mov	r4, r1
    1886:	b0 e1       	ldi	r27, 0x10	; 16
    1888:	5b 2e       	mov	r5, r27
    188a:	61 2c       	mov	r6, r1
    188c:	71 2c       	mov	r7, r1
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
    188e:	cc 24       	eor	r12, r12
    1890:	dd 24       	eor	r13, r13
    1892:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
    1894:	80 91 23 02 	lds	r24, 0x0223
    1898:	80 ff       	sbrs	r24, 0
    189a:	fc cf       	rjmp	.-8      	; 0x1894 <CO_collectTemp+0xf0>
		tempResult = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
    189c:	69 81       	ldd	r22, Y+1	; 0x01
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <ADC_ResultCh_GetWord_Signed>
		sum+=tempResult;
    18a6:	a0 e0       	ldi	r26, 0x00	; 0
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	c8 0e       	add	r12, r24
    18ac:	d9 1e       	adc	r13, r25
    18ae:	ea 1e       	adc	r14, r26
    18b0:	fb 1e       	adc	r15, r27
    18b2:	88 16       	cp	r8, r24
    18b4:	99 06       	cpc	r9, r25
    18b6:	aa 06       	cpc	r10, r26
    18b8:	bb 06       	cpc	r11, r27
    18ba:	10 f4       	brcc	.+4      	; 0x18c0 <CO_collectTemp+0x11c>
    18bc:	4c 01       	movw	r8, r24
    18be:	5d 01       	movw	r10, r26
    18c0:	84 15       	cp	r24, r4
    18c2:	95 05       	cpc	r25, r5
    18c4:	a6 05       	cpc	r26, r6
    18c6:	b7 05       	cpc	r27, r7
    18c8:	10 f4       	brcc	.+4      	; 0x18ce <CO_collectTemp+0x12a>
    18ca:	2c 01       	movw	r4, r24
    18cc:	3d 01       	movw	r6, r26
    18ce:	01 50       	subi	r16, 0x01	; 1
    18d0:	10 40       	sbci	r17, 0x00	; 0

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);

	/* Sample onboard ADC.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    18d2:	01 f7       	brne	.-64     	; 0x1894 <CO_collectTemp+0xf0>
		if (min > tempResult) { min = tempResult;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCA);
    18d4:	80 91 01 02 	lds	r24, 0x0201
    18d8:	87 7f       	andi	r24, 0xF7	; 247
    18da:	e0 e0       	ldi	r30, 0x00	; 0
    18dc:	f2 e0       	ldi	r31, 0x02	; 2
    18de:	81 83       	std	Z+1, r24	; 0x01
	ADC_Pipeline_Flush(&ADCA);
    18e0:	80 91 00 02 	lds	r24, 0x0200
    18e4:	82 60       	ori	r24, 0x02	; 2
    18e6:	80 93 00 02 	sts	0x0200, r24
	ADC_Disable(&ADCA);
    18ea:	80 91 00 02 	lds	r24, 0x0200
    18ee:	8e 7f       	andi	r24, 0xFE	; 254
    18f0:	80 93 00 02 	sts	0x0200, r24

	ADCPower(FALSE);
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>

	average = sum / NUM_SAMPLES;
    18fa:	c7 01       	movw	r24, r14
    18fc:	b6 01       	movw	r22, r12
    18fe:	2a e0       	ldi	r18, 0x0A	; 10
    1900:	96 95       	lsr	r25
    1902:	87 95       	ror	r24
    1904:	77 95       	ror	r23
    1906:	67 95       	ror	r22
    1908:	2a 95       	dec	r18
    190a:	d1 f7       	brne	.-12     	; 0x1900 <CO_collectTemp+0x15c>

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    190c:	28 ee       	ldi	r18, 0xE8	; 232
    190e:	33 e0       	ldi	r19, 0x03	; 3
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    1918:	ef ef       	ldi	r30, 0xFF	; 255
    191a:	ce 2e       	mov	r12, r30
    191c:	ef e0       	ldi	r30, 0x0F	; 15
    191e:	de 2e       	mov	r13, r30
    1920:	e1 2c       	mov	r14, r1
    1922:	f1 2c       	mov	r15, r1
    1924:	a7 01       	movw	r20, r14
    1926:	96 01       	movw	r18, r12
    1928:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    192c:	c9 01       	movw	r24, r18
    192e:	c2 97       	sbiw	r24, 0x32	; 50
    1930:	f1 01       	movw	r30, r2
    1932:	80 83       	st	Z, r24
    1934:	91 83       	std	Z+1, r25	; 0x01
	*maxV = (max * 1000 / 4095) - 50;
    1936:	c5 01       	movw	r24, r10
    1938:	b4 01       	movw	r22, r8
    193a:	28 ee       	ldi	r18, 0xE8	; 232
    193c:	33 e0       	ldi	r19, 0x03	; 3
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    1946:	a7 01       	movw	r20, r14
    1948:	96 01       	movw	r18, r12
    194a:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    194e:	22 53       	subi	r18, 0x32	; 50
    1950:	30 40       	sbci	r19, 0x00	; 0
    1952:	ec 81       	ldd	r30, Y+4	; 0x04
    1954:	fd 81       	ldd	r31, Y+5	; 0x05
    1956:	20 83       	st	Z, r18
    1958:	31 83       	std	Z+1, r19	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    195a:	c3 01       	movw	r24, r6
    195c:	b2 01       	movw	r22, r4
    195e:	28 ee       	ldi	r18, 0xE8	; 232
    1960:	33 e0       	ldi	r19, 0x03	; 3
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    196a:	a7 01       	movw	r20, r14
    196c:	96 01       	movw	r18, r12
    196e:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    1972:	22 53       	subi	r18, 0x32	; 50
    1974:	30 40       	sbci	r19, 0x00	; 0
    1976:	ea 81       	ldd	r30, Y+2	; 0x02
    1978:	fb 81       	ldd	r31, Y+3	; 0x03
    197a:	20 83       	st	Z, r18
    197c:	31 83       	std	Z+1, r19	; 0x01
}
    197e:	25 96       	adiw	r28, 0x05	; 5
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	cf 90       	pop	r12
    1994:	bf 90       	pop	r11
    1996:	af 90       	pop	r10
    1998:	9f 90       	pop	r9
    199a:	8f 90       	pop	r8
    199c:	7f 90       	pop	r7
    199e:	6f 90       	pop	r6
    19a0:	5f 90       	pop	r5
    19a2:	4f 90       	pop	r4
    19a4:	3f 90       	pop	r3
    19a6:	2f 90       	pop	r2
    19a8:	08 95       	ret

000019aa <CO_collectBatt>:


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    19aa:	2f 92       	push	r2
    19ac:	3f 92       	push	r3
    19ae:	4f 92       	push	r4
    19b0:	5f 92       	push	r5
    19b2:	6f 92       	push	r6
    19b4:	7f 92       	push	r7
    19b6:	8f 92       	push	r8
    19b8:	9f 92       	push	r9
    19ba:	af 92       	push	r10
    19bc:	bf 92       	push	r11
    19be:	cf 92       	push	r12
    19c0:	df 92       	push	r13
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	25 97       	sbiw	r28, 0x05	; 5
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	1c 01       	movw	r2, r24
    19da:	6a 83       	std	Y+2, r22	; 0x02
    19dc:	7b 83       	std	Y+3, r23	; 0x03
    19de:	4c 83       	std	Y+4, r20	; 0x04
    19e0:	5d 83       	std	Y+5, r21	; 0x05
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	PortEx_DIRSET(BIT2_bm, PS_BANKB);
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <PortEx_DIRSET>
	PortEx_OUTSET(BIT2_bm, PS_BANKB); // activate PIO24 (VBATT)
    19f0:	84 e0       	ldi	r24, 0x04	; 4
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	0e 94 26 0a 	call	0x144c	; 0x144c <PortEx_OUTSET>
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	93 ec       	ldi	r25, 0xC3	; 195
    19fc:	a9 e0       	ldi	r26, 0x09	; 9
    19fe:	81 50       	subi	r24, 0x01	; 1
    1a00:	90 40       	sbci	r25, 0x00	; 0
    1a02:	a0 40       	sbci	r26, 0x00	; 0
    1a04:	e1 f7       	brne	.-8      	; 0x19fe <CO_collectBatt+0x54>
    1a06:	00 c0       	rjmp	.+0      	; 0x1a08 <CO_collectBatt+0x5e>
    1a08:	00 00       	nop
	_delay_ms(100);
	//setPortEx(BIT2_bm, PS_BANKB);
		
	/* Move stored calibration values to ADCB. */
	ADC_CalibrationValues_Load(&ADCB);
    1a0a:	80 e4       	ldi	r24, 0x40	; 64
    1a0c:	92 e0       	ldi	r25, 0x02	; 2
    1a0e:	0e 94 c4 07 	call	0xf88	; 0xf88 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    1a12:	00 e4       	ldi	r16, 0x40	; 64
    1a14:	12 e0       	ldi	r17, 0x02	; 2
    1a16:	80 91 41 02 	lds	r24, 0x0241
    1a1a:	89 7e       	andi	r24, 0xE9	; 233
    1a1c:	d8 01       	movw	r26, r16
    1a1e:	11 96       	adiw	r26, 0x01	; 1
    1a20:	8c 93       	st	X, r24
    1a22:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV32_gc);
    1a24:	80 91 44 02 	lds	r24, 0x0244
    1a28:	88 7f       	andi	r24, 0xF8	; 248
    1a2a:	83 60       	ori	r24, 0x03	; 3
    1a2c:	14 96       	adiw	r26, 0x04	; 4
    1a2e:	8c 93       	st	X, r24
    1a30:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCB to be 1.0 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_INT1V_gc); 
    1a32:	80 91 42 02 	lds	r24, 0x0242
    1a36:	8f 7c       	andi	r24, 0xCF	; 207
    1a38:	12 96       	adiw	r26, 0x02	; 2
    1a3a:	8c 93       	st	X, r24

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
    1a3c:	80 e6       	ldi	r24, 0x60	; 96
    1a3e:	c8 2e       	mov	r12, r24
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	d8 2e       	mov	r13, r24
    1a44:	80 91 60 02 	lds	r24, 0x0260
    1a48:	80 7e       	andi	r24, 0xE0	; 224
    1a4a:	81 60       	ori	r24, 0x01	; 1
    1a4c:	80 93 60 02 	sts	0x0260, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	// Get offset value for ADCB.
   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    1a50:	89 e0       	ldi	r24, 0x09	; 9
    1a52:	f6 01       	movw	r30, r12
    1a54:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
    1a56:	80 91 40 02 	lds	r24, 0x0240
    1a5a:	81 60       	ori	r24, 0x01	; 1
    1a5c:	80 93 40 02 	sts	0x0240, r24
	// Wait until common mode voltage is stable. Default clk is 16MHz
	ADC_Wait_32MHz(&ADCB);
    1a60:	80 e4       	ldi	r24, 0x40	; 64
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	0e 94 62 07 	call	0xec4	; 0xec4 <ADC_Wait_32MHz>
	offset = ADC_Offset_Get_Unsigned(&ADCB, &ADCB.CH0, false);
    1a68:	80 e4       	ldi	r24, 0x40	; 64
    1a6a:	92 e0       	ldi	r25, 0x02	; 2
    1a6c:	60 e6       	ldi	r22, 0x60	; 96
    1a6e:	72 e0       	ldi	r23, 0x02	; 2
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	0e 94 6c 07 	call	0xed8	; 0xed8 <ADC_Offset_Get_Unsigned>
    1a76:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCB);
    1a78:	80 91 40 02 	lds	r24, 0x0240
    1a7c:	8e 7f       	andi	r24, 0xFE	; 254
    1a7e:	80 93 40 02 	sts	0x0240, r24
    
	/* Set input to the channels in ADC B */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    1a82:	d6 01       	movw	r26, r12
    1a84:	11 96       	adiw	r26, 0x01	; 1
    1a86:	1c 92       	st	X, r1
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0_gc);
    1a88:	80 91 43 02 	lds	r24, 0x0243
    1a8c:	8f 73       	andi	r24, 0x3F	; 63
    1a8e:	f8 01       	movw	r30, r16
    1a90:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC .*/
	ADC_Enable(&ADCB);
    1a92:	80 91 40 02 	lds	r24, 0x0240
    1a96:	81 60       	ori	r24, 0x01	; 1
    1a98:	80 93 40 02 	sts	0x0240, r24

	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
    1a9c:	80 e4       	ldi	r24, 0x40	; 64
    1a9e:	92 e0       	ldi	r25, 0x02	; 2
    1aa0:	0e 94 62 07 	call	0xec4	; 0xec4 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);
    1aa4:	80 91 41 02 	lds	r24, 0x0241
    1aa8:	88 60       	ori	r24, 0x08	; 8
    1aaa:	d8 01       	movw	r26, r16
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	8c 93       	st	X, r24
    1ab0:	11 97       	sbiw	r26, 0x01	; 1
    1ab2:	00 e0       	ldi	r16, 0x00	; 0
    1ab4:	14 e0       	ldi	r17, 0x04	; 4
void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    1ab6:	88 24       	eor	r8, r8
    1ab8:	99 24       	eor	r9, r9
    1aba:	54 01       	movw	r10, r8

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
    1abc:	41 2c       	mov	r4, r1
    1abe:	20 e1       	ldi	r18, 0x10	; 16
    1ac0:	52 2e       	mov	r5, r18
    1ac2:	61 2c       	mov	r6, r1
    1ac4:	71 2c       	mov	r7, r1
	*minV = (min * 1000  / 4095) - 50;
}


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
    1ac6:	cc 24       	eor	r12, r12
    1ac8:	dd 24       	eor	r13, r13
    1aca:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCB channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCB.CH0));
    1acc:	80 91 63 02 	lds	r24, 0x0263
    1ad0:	80 ff       	sbrs	r24, 0
    1ad2:	fc cf       	rjmp	.-8      	; 0x1acc <CO_collectBatt+0x122>
		tempResultB = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, offset);
    1ad4:	69 81       	ldd	r22, Y+1	; 0x01
    1ad6:	80 e6       	ldi	r24, 0x60	; 96
    1ad8:	92 e0       	ldi	r25, 0x02	; 2
    1ada:	0e 94 3e 07 	call	0xe7c	; 0xe7c <ADC_ResultCh_GetWord_Signed>
		sum+=tempResultB;
    1ade:	a0 e0       	ldi	r26, 0x00	; 0
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	c8 0e       	add	r12, r24
    1ae4:	d9 1e       	adc	r13, r25
    1ae6:	ea 1e       	adc	r14, r26
    1ae8:	fb 1e       	adc	r15, r27
    1aea:	88 16       	cp	r8, r24
    1aec:	99 06       	cpc	r9, r25
    1aee:	aa 06       	cpc	r10, r26
    1af0:	bb 06       	cpc	r11, r27
    1af2:	10 f4       	brcc	.+4      	; 0x1af8 <CO_collectBatt+0x14e>
    1af4:	4c 01       	movw	r8, r24
    1af6:	5d 01       	movw	r10, r26
    1af8:	84 15       	cp	r24, r4
    1afa:	95 05       	cpc	r25, r5
    1afc:	a6 05       	cpc	r26, r6
    1afe:	b7 05       	cpc	r27, r7
    1b00:	10 f4       	brcc	.+4      	; 0x1b06 <CO_collectBatt+0x15c>
    1b02:	2c 01       	movw	r4, r24
    1b04:	3d 01       	movw	r6, r26
    1b06:	01 50       	subi	r16, 0x01	; 1
    1b08:	10 40       	sbci	r17, 0x00	; 0

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);

	/* Store samples.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    1b0a:	01 f7       	brne	.-64     	; 0x1acc <CO_collectBatt+0x122>
		if (min > tempResultB) { min = tempResultB;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
    1b0c:	80 91 41 02 	lds	r24, 0x0241
    1b10:	87 7f       	andi	r24, 0xF7	; 247
    1b12:	e0 e4       	ldi	r30, 0x40	; 64
    1b14:	f2 e0       	ldi	r31, 0x02	; 2
    1b16:	81 83       	std	Z+1, r24	; 0x01
	ADC_Disable(&ADCB);
    1b18:	80 91 40 02 	lds	r24, 0x0240
    1b1c:	8e 7f       	andi	r24, 0xFE	; 254
    1b1e:	80 93 40 02 	sts	0x0240, r24

	average = sum / NUM_SAMPLES;
	
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	0e 94 a8 0a 	call	0x1550	; 0x1550 <PortEx_DIRCLR>
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
	ADC_Disable(&ADCB);

	average = sum / NUM_SAMPLES;
    1b30:	c7 01       	movw	r24, r14
    1b32:	b6 01       	movw	r22, r12
    1b34:	1a e0       	ldi	r17, 0x0A	; 10
    1b36:	96 95       	lsr	r25
    1b38:	87 95       	ror	r24
    1b3a:	77 95       	ror	r23
    1b3c:	67 95       	ror	r22
    1b3e:	1a 95       	dec	r17
    1b40:	d1 f7       	brne	.-12     	; 0x1b36 <CO_collectBatt+0x18c>
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    1b42:	28 ee       	ldi	r18, 0xE8	; 232
    1b44:	33 e0       	ldi	r19, 0x03	; 3
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    1b4e:	0f ef       	ldi	r16, 0xFF	; 255
    1b50:	c0 2e       	mov	r12, r16
    1b52:	0f e0       	ldi	r16, 0x0F	; 15
    1b54:	d0 2e       	mov	r13, r16
    1b56:	e1 2c       	mov	r14, r1
    1b58:	f1 2c       	mov	r15, r1
    1b5a:	a7 01       	movw	r20, r14
    1b5c:	96 01       	movw	r18, r12
    1b5e:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    1b62:	c9 01       	movw	r24, r18
    1b64:	c2 97       	sbiw	r24, 0x32	; 50
    1b66:	f1 01       	movw	r30, r2
    1b68:	80 83       	st	Z, r24
    1b6a:	91 83       	std	Z+1, r25	; 0x01
	*maxV = (max * 1000 / 4095) - 50;
    1b6c:	c5 01       	movw	r24, r10
    1b6e:	b4 01       	movw	r22, r8
    1b70:	28 ee       	ldi	r18, 0xE8	; 232
    1b72:	33 e0       	ldi	r19, 0x03	; 3
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    1b7c:	a7 01       	movw	r20, r14
    1b7e:	96 01       	movw	r18, r12
    1b80:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    1b84:	22 53       	subi	r18, 0x32	; 50
    1b86:	30 40       	sbci	r19, 0x00	; 0
    1b88:	ac 81       	ldd	r26, Y+4	; 0x04
    1b8a:	bd 81       	ldd	r27, Y+5	; 0x05
    1b8c:	2d 93       	st	X+, r18
    1b8e:	3c 93       	st	X, r19
    1b90:	11 97       	sbiw	r26, 0x01	; 1
	*minV = (min * 1000  / 4095) - 50;
    1b92:	c3 01       	movw	r24, r6
    1b94:	b2 01       	movw	r22, r4
    1b96:	28 ee       	ldi	r18, 0xE8	; 232
    1b98:	33 e0       	ldi	r19, 0x03	; 3
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    1ba2:	a7 01       	movw	r20, r14
    1ba4:	96 01       	movw	r18, r12
    1ba6:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    1baa:	22 53       	subi	r18, 0x32	; 50
    1bac:	30 40       	sbci	r19, 0x00	; 0
    1bae:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb2:	20 83       	st	Z, r18
    1bb4:	31 83       	std	Z+1, r19	; 0x01
}
    1bb6:	25 96       	adiw	r28, 0x05	; 5
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	df 90       	pop	r13
    1bca:	cf 90       	pop	r12
    1bcc:	bf 90       	pop	r11
    1bce:	af 90       	pop	r10
    1bd0:	9f 90       	pop	r9
    1bd2:	8f 90       	pop	r8
    1bd4:	7f 90       	pop	r7
    1bd6:	6f 90       	pop	r6
    1bd8:	5f 90       	pop	r5
    1bda:	4f 90       	pop	r4
    1bdc:	3f 90       	pop	r3
    1bde:	2f 90       	pop	r2
    1be0:	08 95       	ret

00001be2 <__vector_104>:
	*maxV = (int32_t) -(max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
	*minV = (int32_t) -(min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);

}

ISR(PORTF_INT0_vect) {
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	0b b6       	in	r0, 0x3b	; 59
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
	// skip first samples because cannot perform recommended reset
	if (discardCount < ADC_DISCARD) {
    1c08:	80 91 60 40 	lds	r24, 0x4060
    1c0c:	87 fd       	sbrc	r24, 7
    1c0e:	06 c0       	rjmp	.+12     	; 0x1c1c <__vector_104+0x3a>
		discardCount++;
    1c10:	80 91 60 40 	lds	r24, 0x4060
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	80 93 60 40 	sts	0x4060, r24
    1c1a:	64 c0       	rjmp	.+200    	; 0x1ce4 <__vector_104+0x102>
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	e0 ea       	ldi	r30, 0xA0	; 160
    1c26:	f6 e0       	ldi	r31, 0x06	; 6
    1c28:	86 83       	std	Z+6, r24	; 0x06
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1c2e:	e0 ec       	ldi	r30, 0xC0	; 192
    1c30:	f8 e0       	ldi	r31, 0x08	; 8
    1c32:	2a ea       	ldi	r18, 0xAA	; 170
    1c34:	23 83       	std	Z+3, r18	; 0x03
			while(!(SPIC.STATUS & SPI_IF_bm));
    1c36:	30 91 c2 08 	lds	r19, 0x08C2
    1c3a:	37 ff       	sbrs	r19, 7
    1c3c:	fc cf       	rjmp	.-8      	; 0x1c36 <__vector_104+0x54>
			SPIBuffer[bufIndex] = SPIC.DATA;
    1c3e:	30 91 c3 08 	lds	r19, 0x08C3
    1c42:	dc 01       	movw	r26, r24
    1c44:	ad 59       	subi	r26, 0x9D	; 157
    1c46:	bf 4a       	sbci	r27, 0xAF	; 175
    1c48:	3c 93       	st	X, r19
    1c4a:	01 96       	adiw	r24, 0x01	; 1
		discardCount++;
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	91 05       	cpc	r25, r1
    1c50:	89 f7       	brne	.-30     	; 0x1c34 <__vector_104+0x52>
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	e0 ea       	ldi	r30, 0xA0	; 160
    1c56:	f6 e0       	ldi	r31, 0x06	; 6
    1c58:	85 83       	std	Z+5, r24	; 0x05
		SPICS(FALSE);
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>

		// create 32 bits from SPIBuffer[0:2] with sign extension of SPIBuffer[0][7]
		if(SPIBuffer[0] & BIT7_bm) *(((uint8_t*)&data24Bit[sampleCount]) + 3) = 0xFF; // sign extension if negative
    1c60:	80 91 63 50 	lds	r24, 0x5063
    1c64:	e0 91 70 50 	lds	r30, 0x5070
    1c68:	f0 91 71 50 	lds	r31, 0x5071
    1c6c:	ee 0f       	add	r30, r30
    1c6e:	ff 1f       	adc	r31, r31
    1c70:	ee 0f       	add	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	ec 59       	subi	r30, 0x9C	; 156
    1c76:	ff 4b       	sbci	r31, 0xBF	; 191
    1c78:	87 ff       	sbrs	r24, 7
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <__vector_104+0xa0>
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	80 83       	st	Z, r24
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <__vector_104+0xa2>
		else *(((uint8_t*)&data24Bit[sampleCount]) + 3) = 0x00;
    1c82:	10 82       	st	Z, r1
	
		*(((uint8_t*)&data24Bit[sampleCount]) + 2) = SPIBuffer[0];
    1c84:	e0 91 70 50 	lds	r30, 0x5070
    1c88:	f0 91 71 50 	lds	r31, 0x5071
    1c8c:	80 91 63 50 	lds	r24, 0x5063
    1c90:	ee 0f       	add	r30, r30
    1c92:	ff 1f       	adc	r31, r31
    1c94:	ee 0f       	add	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	ed 59       	subi	r30, 0x9D	; 157
    1c9a:	ff 4b       	sbci	r31, 0xBF	; 191
    1c9c:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 1) = SPIBuffer[1];
    1c9e:	e0 91 70 50 	lds	r30, 0x5070
    1ca2:	f0 91 71 50 	lds	r31, 0x5071
    1ca6:	80 91 64 50 	lds	r24, 0x5064
    1caa:	ee 0f       	add	r30, r30
    1cac:	ff 1f       	adc	r31, r31
    1cae:	ee 0f       	add	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	ee 59       	subi	r30, 0x9E	; 158
    1cb4:	ff 4b       	sbci	r31, 0xBF	; 191
    1cb6:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 0) = SPIBuffer[2];
    1cb8:	e0 91 70 50 	lds	r30, 0x5070
    1cbc:	f0 91 71 50 	lds	r31, 0x5071
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	ef 59       	subi	r30, 0x9F	; 159
    1cca:	ff 4b       	sbci	r31, 0xBF	; 191
    1ccc:	80 91 65 50 	lds	r24, 0x5065
    1cd0:	80 83       	st	Z, r24

		sampleCount++;
    1cd2:	80 91 70 50 	lds	r24, 0x5070
    1cd6:	90 91 71 50 	lds	r25, 0x5071
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	80 93 70 50 	sts	0x5070, r24
    1ce0:	90 93 71 50 	sts	0x5071, r25
	}
}
    1ce4:	ff 91       	pop	r31
    1ce6:	ef 91       	pop	r30
    1ce8:	bf 91       	pop	r27
    1cea:	af 91       	pop	r26
    1cec:	9f 91       	pop	r25
    1cee:	8f 91       	pop	r24
    1cf0:	7f 91       	pop	r23
    1cf2:	6f 91       	pop	r22
    1cf4:	5f 91       	pop	r21
    1cf6:	4f 91       	pop	r20
    1cf8:	3f 91       	pop	r19
    1cfa:	2f 91       	pop	r18
    1cfc:	0f 90       	pop	r0
    1cfe:	0b be       	out	0x3b, r0	; 59
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	0f 90       	pop	r0
    1d06:	1f 90       	pop	r1
    1d08:	18 95       	reti

00001d0a <ACC_DCPassEnable>:

// Enable DC Pass for acc
// Pull PIO27 high to enable
void ACC_DCPassEnable(uint8_t enable) {
	if (enable) {
    1d0a:	88 23       	and	r24, r24
    1d0c:	49 f0       	breq	.+18     	; 0x1d20 <ACC_DCPassEnable+0x16>
		PortEx_DIRSET(BIT5_bm, PS_BANKB);
    1d0e:	80 e2       	ldi	r24, 0x20	; 32
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <PortEx_DIRSET>
		PortEx_OUTSET(BIT5_bm, PS_BANKB);
    1d16:	80 e2       	ldi	r24, 0x20	; 32
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	0e 94 26 0a 	call	0x144c	; 0x144c <PortEx_OUTSET>
    1d1e:	08 95       	ret
		//setPortEx(BIT5_bm, PS_BANKB);
	} else {
		PortEx_DIRCLR(BIT5_bm, PS_BANKB);
    1d20:	80 e2       	ldi	r24, 0x20	; 32
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	0e 94 a8 0a 	call	0x1550	; 0x1550 <PortEx_DIRCLR>
    1d28:	08 95       	ret

00001d2a <CO_collectADC>:
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {
    1d2a:	2f 92       	push	r2
    1d2c:	3f 92       	push	r3
    1d2e:	4f 92       	push	r4
    1d30:	5f 92       	push	r5
    1d32:	6f 92       	push	r6
    1d34:	7f 92       	push	r7
    1d36:	8f 92       	push	r8
    1d38:	9f 92       	push	r9
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	61 97       	sbiw	r28, 0x11	; 17
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	f8 2e       	mov	r15, r24
    1d5a:	d6 2e       	mov	r13, r22
    1d5c:	4a 87       	std	Y+10, r20	; 0x0a
    1d5e:	5b 87       	std	Y+11, r21	; 0x0b
    1d60:	2c 87       	std	Y+12, r18	; 0x0c
    1d62:	3d 87       	std	Y+13, r19	; 0x0d
    1d64:	0e 87       	std	Y+14, r16	; 0x0e
    1d66:	1f 87       	std	Y+15, r17	; 0x0f
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
	uint16_t period;
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gainExponent);
    1d6e:	8f 2d       	mov	r24, r15
    1d70:	6e 2d       	mov	r22, r14
    1d72:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_ampGain>
	set_filter(filterConfig);
    1d76:	8d 2d       	mov	r24, r13
    1d78:	0e 94 6e 09 	call	0x12dc	; 0x12dc <set_filter>

	// if acc channel then enable DC Pass 
	// it is assumed that if not using high frequency acc specific function then 
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
    1d7c:	8f 2d       	mov	r24, r15
    1d7e:	85 50       	subi	r24, 0x05	; 5
    1d80:	83 30       	cpi	r24, 0x03	; 3
    1d82:	18 f4       	brcc	.+6      	; 0x1d8a <CO_collectADC+0x60>
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <ACC_DCPassEnable>

	enableADCMUX(TRUE);
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <enableADCMUX>
	setADCInput(channel);
    1d90:	8f 2d       	mov	r24, r15
    1d92:	0e 94 19 09 	call	0x1232	; 0x1232 <setADCInput>
	SPIInit(SPI_MODE_1_gc);
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    1d9c:	84 e5       	ldi	r24, 0x54	; 84
    1d9e:	80 93 c0 08 	sts	0x08C0, r24
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.DIRCLR = PIN0_bm;
    1da2:	e0 ea       	ldi	r30, 0xA0	; 160
    1da4:	f6 e0       	ldi	r31, 0x06	; 6
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	82 83       	std	Z+2, r24	; 0x02
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    1daa:	92 e0       	ldi	r25, 0x02	; 2
    1dac:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.INT0MASK = PIN0_bm;
    1dae:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_LO_gc;
    1db0:	81 87       	std	Z+9, r24	; 0x09

	// Configure clock for AD7767 MCLK for desired sample frequency
	// f_samples = f_MCLK / 16
	// f_MCLK = f_peripheral(2^25Hz) / (f_period + 1Hz)
	// Set IO14 (PE5) to output
	PORTE.DIRSET = PIN5_bm;
    1db2:	80 e2       	ldi	r24, 0x20	; 32
    1db4:	e0 e8       	ldi	r30, 0x80	; 128
    1db6:	f6 e0       	ldi	r31, 0x06	; 6
    1db8:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    1dba:	e0 e4       	ldi	r30, 0x40	; 64
    1dbc:	fa e0       	ldi	r31, 0x0A	; 10
    1dbe:	83 e2       	ldi	r24, 0x23	; 35
    1dc0:	81 83       	std	Z+1, r24	; 0x01
	// set period
	period = (1 << (21 - spsExponent)) - 1;
    1dc2:	25 e1       	ldi	r18, 0x15	; 21
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	2c 19       	sub	r18, r12
    1dc8:	31 09       	sbc	r19, r1
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <CO_collectADC+0xaa>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	2a 95       	dec	r18
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <CO_collectADC+0xa6>
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
	TCE1.PER = period;
    1dda:	86 a3       	lds	r24, 0x56
    1ddc:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = period / 2;
    1dde:	96 95       	lsr	r25
    1de0:	87 95       	ror	r24
    1de2:	82 af       	sts	0x72, r24
    1de4:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1de6:	80 91 40 0a 	lds	r24, 0x0A40
    1dea:	80 7f       	andi	r24, 0xF0	; 240
    1dec:	81 60       	ori	r24, 0x01	; 1
    1dee:	80 93 40 0a 	sts	0x0A40, r24
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1df2:	80 91 a2 00 	lds	r24, 0x00A2
    1df6:	81 60       	ori	r24, 0x01	; 1
    1df8:	e0 ea       	ldi	r30, 0xA0	; 160
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	82 83       	std	Z+2, r24	; 0x02
	sei();
    1dfe:	78 94       	sei

	sampleCount = 0;
    1e00:	10 92 70 50 	sts	0x5070, r1
    1e04:	10 92 71 50 	sts	0x5071, r1
	discardCount = 0;
    1e08:	10 92 60 40 	sts	0x4060, r1
	
	// wait for ADC to collect samples
	while(sampleCount < NUM_SAMPLES);
    1e0c:	80 91 70 50 	lds	r24, 0x5070
    1e10:	90 91 71 50 	lds	r25, 0x5071
    1e14:	24 e0       	ldi	r18, 0x04	; 4
    1e16:	80 30       	cpi	r24, 0x00	; 0
    1e18:	92 07       	cpc	r25, r18
    1e1a:	c0 f3       	brcs	.-16     	; 0x1e0c <CO_collectADC+0xe2>

	// turn off timer and interupts
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1e1c:	80 91 40 0a 	lds	r24, 0x0A40
    1e20:	80 7f       	andi	r24, 0xF0	; 240
    1e22:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~PMIC_LOLVLEN_bm;	
    1e26:	80 91 a2 00 	lds	r24, 0x00A2
    1e2a:	8e 7f       	andi	r24, 0xFE	; 254
    1e2c:	e0 ea       	ldi	r30, 0xA0	; 160
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	82 83       	std	Z+2, r24	; 0x02
	cli();
    1e32:	f8 94       	cli

	SPIDisable();	
    1e34:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
	enableADCMUX(FALSE);
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <enableADCMUX>
	ADCPower(FALSE);
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    1e44:	10 92 70 50 	sts	0x5070, r1
    1e48:	10 92 71 50 	sts	0x5071, r1
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
    1e4c:	31 e0       	ldi	r19, 0x01	; 1
    1e4e:	38 87       	std	Y+8, r19	; 0x08
    1e50:	1d 82       	std	Y+5, r1	; 0x05
    1e52:	50 e8       	ldi	r21, 0x80	; 128
    1e54:	5e 83       	std	Y+6, r21	; 0x06
    1e56:	6f ef       	ldi	r22, 0xFF	; 255
    1e58:	69 87       	std	Y+9, r22	; 0x09
    1e5a:	44 24       	eor	r4, r4
    1e5c:	4a 94       	dec	r4
    1e5e:	33 24       	eor	r3, r3
    1e60:	3a 94       	dec	r3
    1e62:	22 24       	eor	r2, r2
    1e64:	2a 94       	dec	r2
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	88 8b       	std	Y+16, r24	; 0x10
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
    1e6a:	9f ef       	ldi	r25, 0xFF	; 255
    1e6c:	9f 83       	std	Y+7, r25	; 0x07
    1e6e:	af ef       	ldi	r26, 0xFF	; 255
    1e70:	a9 83       	std	Y+1, r26	; 0x01
    1e72:	bf e7       	ldi	r27, 0x7F	; 127
    1e74:	ba 83       	std	Y+2, r27	; 0x02
    1e76:	1b 82       	std	Y+3, r1	; 0x03
    1e78:	1c 82       	std	Y+4, r1	; 0x04
    1e7a:	66 24       	eor	r6, r6
    1e7c:	55 24       	eor	r5, r5
    1e7e:	77 24       	eor	r7, r7
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	a0 e0       	ldi	r26, 0x00	; 0
    1e84:	10 e0       	ldi	r17, 0x00	; 0
    1e86:	00 e0       	ldi	r16, 0x00	; 0
    1e88:	cc 24       	eor	r12, r12
    1e8a:	88 24       	eor	r8, r8
    1e8c:	ff 24       	eor	r15, r15
    1e8e:	e0 e0       	ldi	r30, 0x00	; 0
    1e90:	ef 2e       	mov	r14, r31
    1e92:	a9 8b       	std	Y+17, r26	; 0x11
    1e94:	2e 2f       	mov	r18, r30
    1e96:	99 24       	eor	r9, r9
    1e98:	9a 94       	dec	r9
	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    1e9a:	18 c1       	rjmp	.+560    	; 0x20cc <CO_collectADC+0x3a2>
		sum += data24Bit[sampleCount];
    1e9c:	e0 91 70 50 	lds	r30, 0x5070
    1ea0:	f0 91 71 50 	lds	r31, 0x5071
    1ea4:	ee 0f       	add	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
    1ea8:	ee 0f       	add	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	ef 59       	subi	r30, 0x9F	; 159
    1eae:	ff 4b       	sbci	r31, 0xBF	; 191
    1eb0:	40 81       	ld	r20, Z
    1eb2:	51 81       	ldd	r21, Z+1	; 0x01
    1eb4:	62 81       	ldd	r22, Z+2	; 0x02
    1eb6:	73 81       	ldd	r23, Z+3	; 0x03
    1eb8:	35 2f       	mov	r19, r21
    1eba:	fb 01       	movw	r30, r22
    1ebc:	db 01       	movw	r26, r22
    1ebe:	ca 01       	movw	r24, r20
    1ec0:	bb 0f       	add	r27, r27
    1ec2:	88 0b       	sbc	r24, r24
    1ec4:	98 2f       	mov	r25, r24
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	d8 2e       	mov	r13, r24
    1eca:	b8 2e       	mov	r11, r24
    1ecc:	a8 2e       	mov	r10, r24
    1ece:	4e 0d       	add	r20, r14
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	4e 15       	cp	r20, r14
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <CO_collectADC+0x1ae>
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	59 89       	ldd	r21, Y+17	; 0x11
    1eda:	35 0f       	add	r19, r21
    1edc:	51 e0       	ldi	r21, 0x01	; 1
    1ede:	69 89       	ldd	r22, Y+17	; 0x11
    1ee0:	36 17       	cp	r19, r22
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <CO_collectADC+0x1bc>
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	69 2f       	mov	r22, r25
    1ee8:	63 0f       	add	r22, r19
    1eea:	91 e0       	ldi	r25, 0x01	; 1
    1eec:	63 17       	cp	r22, r19
    1eee:	08 f0       	brcs	.+2      	; 0x1ef2 <CO_collectADC+0x1c8>
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	59 2b       	or	r21, r25
    1ef4:	e1 0f       	add	r30, r17
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	e1 17       	cp	r30, r17
    1efa:	08 f0       	brcs	.+2      	; 0x1efe <CO_collectADC+0x1d4>
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	15 2f       	mov	r17, r21
    1f00:	1e 0f       	add	r17, r30
    1f02:	31 e0       	ldi	r19, 0x01	; 1
    1f04:	1e 17       	cp	r17, r30
    1f06:	08 f0       	brcs	.+2      	; 0x1f0a <CO_collectADC+0x1e0>
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	93 2b       	or	r25, r19
    1f0c:	f0 0f       	add	r31, r16
    1f0e:	31 e0       	ldi	r19, 0x01	; 1
    1f10:	f0 17       	cp	r31, r16
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <CO_collectADC+0x1ec>
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	09 2f       	mov	r16, r25
    1f18:	0f 0f       	add	r16, r31
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	0f 17       	cp	r16, r31
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <CO_collectADC+0x1f8>
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	39 2b       	or	r19, r25
    1f24:	dc 0c       	add	r13, r12
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	dc 14       	cp	r13, r12
    1f2a:	08 f0       	brcs	.+2      	; 0x1f2e <CO_collectADC+0x204>
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	c3 2e       	mov	r12, r19
    1f30:	cd 0c       	add	r12, r13
    1f32:	31 e0       	ldi	r19, 0x01	; 1
    1f34:	cd 14       	cp	r12, r13
    1f36:	08 f0       	brcs	.+2      	; 0x1f3a <CO_collectADC+0x210>
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	93 2b       	or	r25, r19
    1f3c:	b8 0c       	add	r11, r8
    1f3e:	51 e0       	ldi	r21, 0x01	; 1
    1f40:	b8 14       	cp	r11, r8
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <CO_collectADC+0x21c>
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	89 2e       	mov	r8, r25
    1f48:	8b 0c       	add	r8, r11
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	8b 14       	cp	r8, r11
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <CO_collectADC+0x228>
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	59 2b       	or	r21, r25
    1f54:	af 0c       	add	r10, r15
    1f56:	31 e0       	ldi	r19, 0x01	; 1
    1f58:	af 14       	cp	r10, r15
    1f5a:	08 f0       	brcs	.+2      	; 0x1f5e <CO_collectADC+0x234>
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	f5 2e       	mov	r15, r21
    1f60:	fa 0c       	add	r15, r10
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	fa 14       	cp	r15, r10
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <CO_collectADC+0x240>
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	39 2b       	or	r19, r25
    1f6c:	28 0f       	add	r18, r24
    1f6e:	e4 2e       	mov	r14, r20
    1f70:	69 8b       	std	Y+17, r22	; 0x11
    1f72:	23 0f       	add	r18, r19
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
    1f74:	e0 91 70 50 	lds	r30, 0x5070
    1f78:	f0 91 71 50 	lds	r31, 0x5071
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	ef 59       	subi	r30, 0x9F	; 159
    1f86:	ff 4b       	sbci	r31, 0xBF	; 191
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	a2 81       	ldd	r26, Z+2	; 0x02
    1f8e:	b3 81       	ldd	r27, Z+3	; 0x03
    1f90:	68 2f       	mov	r22, r24
    1f92:	39 2f       	mov	r19, r25
    1f94:	ad 01       	movw	r20, r26
    1f96:	bb 0f       	add	r27, r27
    1f98:	88 0b       	sbc	r24, r24
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	98 89       	ldd	r25, Y+16	; 0x10
    1fa0:	98 17       	cp	r25, r24
    1fa2:	fc f0       	brlt	.+62     	; 0x1fe2 <CO_collectADC+0x2b8>
    1fa4:	89 17       	cp	r24, r25
    1fa6:	b9 f5       	brne	.+110    	; 0x2016 <CO_collectADC+0x2ec>
    1fa8:	29 16       	cp	r2, r25
    1faa:	d8 f0       	brcs	.+54     	; 0x1fe2 <CO_collectADC+0x2b8>
    1fac:	92 15       	cp	r25, r2
    1fae:	99 f5       	brne	.+102    	; 0x2016 <CO_collectADC+0x2ec>
    1fb0:	39 16       	cp	r3, r25
    1fb2:	b8 f0       	brcs	.+46     	; 0x1fe2 <CO_collectADC+0x2b8>
    1fb4:	93 15       	cp	r25, r3
    1fb6:	79 f5       	brne	.+94     	; 0x2016 <CO_collectADC+0x2ec>
    1fb8:	49 16       	cp	r4, r25
    1fba:	98 f0       	brcs	.+38     	; 0x1fe2 <CO_collectADC+0x2b8>
    1fbc:	94 15       	cp	r25, r4
    1fbe:	59 f5       	brne	.+86     	; 0x2016 <CO_collectADC+0x2ec>
    1fc0:	95 16       	cp	r9, r21
    1fc2:	78 f0       	brcs	.+30     	; 0x1fe2 <CO_collectADC+0x2b8>
    1fc4:	59 15       	cp	r21, r9
    1fc6:	39 f5       	brne	.+78     	; 0x2016 <CO_collectADC+0x2ec>
    1fc8:	ae 81       	ldd	r26, Y+6	; 0x06
    1fca:	a4 17       	cp	r26, r20
    1fcc:	50 f0       	brcs	.+20     	; 0x1fe2 <CO_collectADC+0x2b8>
    1fce:	4a 17       	cp	r20, r26
    1fd0:	11 f5       	brne	.+68     	; 0x2016 <CO_collectADC+0x2ec>
    1fd2:	bd 81       	ldd	r27, Y+5	; 0x05
    1fd4:	b3 17       	cp	r27, r19
    1fd6:	28 f0       	brcs	.+10     	; 0x1fe2 <CO_collectADC+0x2b8>
    1fd8:	3b 17       	cp	r19, r27
    1fda:	e9 f4       	brne	.+58     	; 0x2016 <CO_collectADC+0x2ec>
    1fdc:	e8 85       	ldd	r30, Y+8	; 0x08
    1fde:	e6 17       	cp	r30, r22
    1fe0:	d0 f4       	brcc	.+52     	; 0x2016 <CO_collectADC+0x2ec>
    1fe2:	e0 91 70 50 	lds	r30, 0x5070
    1fe6:	f0 91 71 50 	lds	r31, 0x5071
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	ef 59       	subi	r30, 0x9F	; 159
    1ff4:	ff 4b       	sbci	r31, 0xBF	; 191
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	a2 81       	ldd	r26, Z+2	; 0x02
    1ffc:	b3 81       	ldd	r27, Z+3	; 0x03
    1ffe:	88 87       	std	Y+8, r24	; 0x08
    2000:	9d 83       	std	Y+5, r25	; 0x05
    2002:	ae 83       	std	Y+6, r26	; 0x06
    2004:	9b 2e       	mov	r9, r27
    2006:	bb 0f       	add	r27, r27
    2008:	88 0b       	sbc	r24, r24
    200a:	98 2f       	mov	r25, r24
    200c:	dc 01       	movw	r26, r24
    200e:	48 2e       	mov	r4, r24
    2010:	38 2e       	mov	r3, r24
    2012:	28 2e       	mov	r2, r24
    2014:	88 8b       	std	Y+16, r24	; 0x10
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
    2016:	e0 91 70 50 	lds	r30, 0x5070
    201a:	f0 91 71 50 	lds	r31, 0x5071
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	ef 59       	subi	r30, 0x9F	; 159
    2028:	ff 4b       	sbci	r31, 0xBF	; 191
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	a2 81       	ldd	r26, Z+2	; 0x02
    2030:	b3 81       	ldd	r27, Z+3	; 0x03
    2032:	68 2f       	mov	r22, r24
    2034:	39 2f       	mov	r19, r25
    2036:	ad 01       	movw	r20, r26
    2038:	bb 0f       	add	r27, r27
    203a:	88 0b       	sbc	r24, r24
    203c:	98 2f       	mov	r25, r24
    203e:	dc 01       	movw	r26, r24
    2040:	87 15       	cp	r24, r7
    2042:	0c f1       	brlt	.+66     	; 0x2086 <CO_collectADC+0x35c>
    2044:	78 16       	cp	r7, r24
    2046:	c9 f5       	brne	.+114    	; 0x20ba <CO_collectADC+0x390>
    2048:	75 14       	cp	r7, r5
    204a:	e8 f0       	brcs	.+58     	; 0x2086 <CO_collectADC+0x35c>
    204c:	57 14       	cp	r5, r7
    204e:	a9 f5       	brne	.+106    	; 0x20ba <CO_collectADC+0x390>
    2050:	56 14       	cp	r5, r6
    2052:	c8 f0       	brcs	.+50     	; 0x2086 <CO_collectADC+0x35c>
    2054:	65 14       	cp	r6, r5
    2056:	89 f5       	brne	.+98     	; 0x20ba <CO_collectADC+0x390>
    2058:	fc 81       	ldd	r31, Y+4	; 0x04
    205a:	6f 16       	cp	r6, r31
    205c:	a0 f0       	brcs	.+40     	; 0x2086 <CO_collectADC+0x35c>
    205e:	f6 15       	cp	r31, r6
    2060:	61 f5       	brne	.+88     	; 0x20ba <CO_collectADC+0x390>
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	58 17       	cp	r21, r24
    2066:	78 f0       	brcs	.+30     	; 0x2086 <CO_collectADC+0x35c>
    2068:	85 17       	cp	r24, r21
    206a:	39 f5       	brne	.+78     	; 0x20ba <CO_collectADC+0x390>
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	49 17       	cp	r20, r25
    2070:	50 f0       	brcs	.+20     	; 0x2086 <CO_collectADC+0x35c>
    2072:	94 17       	cp	r25, r20
    2074:	11 f5       	brne	.+68     	; 0x20ba <CO_collectADC+0x390>
    2076:	a9 81       	ldd	r26, Y+1	; 0x01
    2078:	3a 17       	cp	r19, r26
    207a:	28 f0       	brcs	.+10     	; 0x2086 <CO_collectADC+0x35c>
    207c:	a3 17       	cp	r26, r19
    207e:	e9 f4       	brne	.+58     	; 0x20ba <CO_collectADC+0x390>
    2080:	bf 81       	ldd	r27, Y+7	; 0x07
    2082:	6b 17       	cp	r22, r27
    2084:	d0 f4       	brcc	.+52     	; 0x20ba <CO_collectADC+0x390>
    2086:	e0 91 70 50 	lds	r30, 0x5070
    208a:	f0 91 71 50 	lds	r31, 0x5071
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	ef 59       	subi	r30, 0x9F	; 159
    2098:	ff 4b       	sbci	r31, 0xBF	; 191
    209a:	80 81       	ld	r24, Z
    209c:	91 81       	ldd	r25, Z+1	; 0x01
    209e:	a2 81       	ldd	r26, Z+2	; 0x02
    20a0:	b3 81       	ldd	r27, Z+3	; 0x03
    20a2:	8f 83       	std	Y+7, r24	; 0x07
    20a4:	99 83       	std	Y+1, r25	; 0x01
    20a6:	aa 83       	std	Y+2, r26	; 0x02
    20a8:	bb 83       	std	Y+3, r27	; 0x03
    20aa:	bb 0f       	add	r27, r27
    20ac:	88 0b       	sbc	r24, r24
    20ae:	98 2f       	mov	r25, r24
    20b0:	dc 01       	movw	r26, r24
    20b2:	8c 83       	std	Y+4, r24	; 0x04
    20b4:	68 2e       	mov	r6, r24
    20b6:	58 2e       	mov	r5, r24
    20b8:	78 2e       	mov	r7, r24
	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    20ba:	80 91 70 50 	lds	r24, 0x5070
    20be:	90 91 71 50 	lds	r25, 0x5071
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	80 93 70 50 	sts	0x5070, r24
    20c8:	90 93 71 50 	sts	0x5071, r25
    20cc:	80 91 70 50 	lds	r24, 0x5070
    20d0:	90 91 71 50 	lds	r25, 0x5071
    20d4:	e4 e0       	ldi	r30, 0x04	; 4
    20d6:	80 30       	cpi	r24, 0x00	; 0
    20d8:	9e 07       	cpc	r25, r30
    20da:	08 f4       	brcc	.+2      	; 0x20de <CO_collectADC+0x3b4>
    20dc:	df ce       	rjmp	.-578    	; 0x1e9c <CO_collectADC+0x172>
    20de:	a9 89       	ldd	r26, Y+17	; 0x11
    20e0:	e2 2f       	mov	r30, r18
    20e2:	99 86       	std	Y+9, r9	; 0x09
		sum += data24Bit[sampleCount];
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
	}
	average = sum / NUM_SAMPLES;
    20e4:	2e 2d       	mov	r18, r14
    20e6:	3a 2f       	mov	r19, r26
    20e8:	41 2f       	mov	r20, r17
    20ea:	50 2f       	mov	r21, r16
    20ec:	6c 2d       	mov	r22, r12
    20ee:	78 2d       	mov	r23, r8
    20f0:	8f 2d       	mov	r24, r15
    20f2:	9e 2f       	mov	r25, r30
    20f4:	e7 ff       	sbrs	r30, 7
    20f6:	2b c0       	rjmp	.+86     	; 0x214e <CO_collectADC+0x424>
    20f8:	21 50       	subi	r18, 0x01	; 1
    20fa:	31 e0       	ldi	r19, 0x01	; 1
    20fc:	2e 15       	cp	r18, r14
    20fe:	08 f0       	brcs	.+2      	; 0x2102 <CO_collectADC+0x3d8>
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	8a 2f       	mov	r24, r26
    2104:	8d 5f       	subi	r24, 0xFD	; 253
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	8a 17       	cp	r24, r26
    210a:	08 f0       	brcs	.+2      	; 0x210e <CO_collectADC+0x3e4>
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	38 0f       	add	r19, r24
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	38 17       	cp	r19, r24
    2114:	08 f0       	brcs	.+2      	; 0x2118 <CO_collectADC+0x3ee>
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	49 2b       	or	r20, r25
    211a:	41 0f       	add	r20, r17
    211c:	51 e0       	ldi	r21, 0x01	; 1
    211e:	41 17       	cp	r20, r17
    2120:	08 f0       	brcs	.+2      	; 0x2124 <CO_collectADC+0x3fa>
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	50 0f       	add	r21, r16
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	50 17       	cp	r21, r16
    212a:	08 f0       	brcs	.+2      	; 0x212e <CO_collectADC+0x404>
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	6c 0d       	add	r22, r12
    2130:	71 e0       	ldi	r23, 0x01	; 1
    2132:	6c 15       	cp	r22, r12
    2134:	08 f0       	brcs	.+2      	; 0x2138 <CO_collectADC+0x40e>
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	78 0d       	add	r23, r8
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	78 15       	cp	r23, r8
    213e:	08 f0       	brcs	.+2      	; 0x2142 <CO_collectADC+0x418>
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	8f 0d       	add	r24, r15
    2144:	91 e0       	ldi	r25, 0x01	; 1
    2146:	8f 15       	cp	r24, r15
    2148:	08 f0       	brcs	.+2      	; 0x214c <CO_collectADC+0x422>
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9e 0f       	add	r25, r30
    214e:	0a e0       	ldi	r16, 0x0A	; 10
    2150:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <__ashrdi3>

	//convert to uV
	*avgV = (int32_t) -(average * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    2154:	e0 ea       	ldi	r30, 0xA0	; 160
    2156:	ae 2e       	mov	r10, r30
    2158:	f5 e2       	ldi	r31, 0x25	; 37
    215a:	bf 2e       	mov	r11, r31
    215c:	a6 e2       	ldi	r26, 0x26	; 38
    215e:	ca 2e       	mov	r12, r26
    2160:	dd 24       	eor	r13, r13
    2162:	ee 24       	eor	r14, r14
    2164:	ff 24       	eor	r15, r15
    2166:	00 e0       	ldi	r16, 0x00	; 0
    2168:	10 e0       	ldi	r17, 0x00	; 0
    216a:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__muldi3>
    216e:	aa 24       	eor	r10, r10
    2170:	aa 94       	dec	r10
    2172:	bb 24       	eor	r11, r11
    2174:	ba 94       	dec	r11
    2176:	bf e7       	ldi	r27, 0x7F	; 127
    2178:	cb 2e       	mov	r12, r27
    217a:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__divdi3>
    217e:	01 e0       	ldi	r16, 0x01	; 1
    2180:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <__ashldi3>
    2184:	03 e0       	ldi	r16, 0x03	; 3
    2186:	a0 2e       	mov	r10, r16
    2188:	bb 24       	eor	r11, r11
    218a:	cc 24       	eor	r12, r12
    218c:	00 e0       	ldi	r16, 0x00	; 0
    218e:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__divdi3>
    2192:	49 01       	movw	r8, r18
    2194:	5a 01       	movw	r10, r20
    2196:	b0 94       	com	r11
    2198:	a0 94       	com	r10
    219a:	90 94       	com	r9
    219c:	80 94       	com	r8
    219e:	81 1c       	adc	r8, r1
    21a0:	91 1c       	adc	r9, r1
    21a2:	a1 1c       	adc	r10, r1
    21a4:	b1 1c       	adc	r11, r1
    21a6:	aa 85       	ldd	r26, Y+10	; 0x0a
    21a8:	bb 85       	ldd	r27, Y+11	; 0x0b
    21aa:	8d 92       	st	X+, r8
    21ac:	9d 92       	st	X+, r9
    21ae:	ad 92       	st	X+, r10
    21b0:	bc 92       	st	X, r11
    21b2:	13 97       	sbiw	r26, 0x03	; 3
	*maxV = (int32_t) -(max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    21b4:	28 85       	ldd	r18, Y+8	; 0x08
    21b6:	3d 81       	ldd	r19, Y+5	; 0x05
    21b8:	4e 81       	ldd	r20, Y+6	; 0x06
    21ba:	59 85       	ldd	r21, Y+9	; 0x09
    21bc:	64 2d       	mov	r22, r4
    21be:	73 2d       	mov	r23, r3
    21c0:	82 2d       	mov	r24, r2
    21c2:	98 89       	ldd	r25, Y+16	; 0x10
    21c4:	e0 ea       	ldi	r30, 0xA0	; 160
    21c6:	ae 2e       	mov	r10, r30
    21c8:	f5 e2       	ldi	r31, 0x25	; 37
    21ca:	bf 2e       	mov	r11, r31
    21cc:	e6 e2       	ldi	r30, 0x26	; 38
    21ce:	ce 2e       	mov	r12, r30
    21d0:	dd 24       	eor	r13, r13
    21d2:	ee 24       	eor	r14, r14
    21d4:	ff 24       	eor	r15, r15
    21d6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__muldi3>
    21da:	aa 24       	eor	r10, r10
    21dc:	aa 94       	dec	r10
    21de:	bb 24       	eor	r11, r11
    21e0:	ba 94       	dec	r11
    21e2:	ff e7       	ldi	r31, 0x7F	; 127
    21e4:	cf 2e       	mov	r12, r31
    21e6:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__divdi3>
    21ea:	01 e0       	ldi	r16, 0x01	; 1
    21ec:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <__ashldi3>
    21f0:	03 e0       	ldi	r16, 0x03	; 3
    21f2:	a0 2e       	mov	r10, r16
    21f4:	bb 24       	eor	r11, r11
    21f6:	cc 24       	eor	r12, r12
    21f8:	00 e0       	ldi	r16, 0x00	; 0
    21fa:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__divdi3>
    21fe:	49 01       	movw	r8, r18
    2200:	5a 01       	movw	r10, r20
    2202:	b0 94       	com	r11
    2204:	a0 94       	com	r10
    2206:	90 94       	com	r9
    2208:	80 94       	com	r8
    220a:	81 1c       	adc	r8, r1
    220c:	91 1c       	adc	r9, r1
    220e:	a1 1c       	adc	r10, r1
    2210:	b1 1c       	adc	r11, r1
    2212:	ee 85       	ldd	r30, Y+14	; 0x0e
    2214:	ff 85       	ldd	r31, Y+15	; 0x0f
    2216:	80 82       	st	Z, r8
    2218:	91 82       	std	Z+1, r9	; 0x01
    221a:	a2 82       	std	Z+2, r10	; 0x02
    221c:	b3 82       	std	Z+3, r11	; 0x03
	*minV = (int32_t) -(min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    221e:	2f 81       	ldd	r18, Y+7	; 0x07
    2220:	39 81       	ldd	r19, Y+1	; 0x01
    2222:	4a 81       	ldd	r20, Y+2	; 0x02
    2224:	5b 81       	ldd	r21, Y+3	; 0x03
    2226:	6c 81       	ldd	r22, Y+4	; 0x04
    2228:	76 2d       	mov	r23, r6
    222a:	85 2d       	mov	r24, r5
    222c:	97 2d       	mov	r25, r7
    222e:	0f 2e       	mov	r0, r31
    2230:	f0 ea       	ldi	r31, 0xA0	; 160
    2232:	af 2e       	mov	r10, r31
    2234:	f0 2d       	mov	r31, r0
    2236:	0f 2e       	mov	r0, r31
    2238:	f5 e2       	ldi	r31, 0x25	; 37
    223a:	bf 2e       	mov	r11, r31
    223c:	f0 2d       	mov	r31, r0
    223e:	0f 2e       	mov	r0, r31
    2240:	f6 e2       	ldi	r31, 0x26	; 38
    2242:	cf 2e       	mov	r12, r31
    2244:	f0 2d       	mov	r31, r0
    2246:	dd 24       	eor	r13, r13
    2248:	ee 24       	eor	r14, r14
    224a:	ff 24       	eor	r15, r15
    224c:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__muldi3>
    2250:	aa 24       	eor	r10, r10
    2252:	aa 94       	dec	r10
    2254:	bb 24       	eor	r11, r11
    2256:	ba 94       	dec	r11
    2258:	0f 2e       	mov	r0, r31
    225a:	ff e7       	ldi	r31, 0x7F	; 127
    225c:	cf 2e       	mov	r12, r31
    225e:	f0 2d       	mov	r31, r0
    2260:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__divdi3>
    2264:	01 e0       	ldi	r16, 0x01	; 1
    2266:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <__ashldi3>
    226a:	03 e0       	ldi	r16, 0x03	; 3
    226c:	a0 2e       	mov	r10, r16
    226e:	bb 24       	eor	r11, r11
    2270:	cc 24       	eor	r12, r12
    2272:	00 e0       	ldi	r16, 0x00	; 0
    2274:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__divdi3>
    2278:	49 01       	movw	r8, r18
    227a:	5a 01       	movw	r10, r20
    227c:	b0 94       	com	r11
    227e:	a0 94       	com	r10
    2280:	90 94       	com	r9
    2282:	80 94       	com	r8
    2284:	81 1c       	adc	r8, r1
    2286:	91 1c       	adc	r9, r1
    2288:	a1 1c       	adc	r10, r1
    228a:	b1 1c       	adc	r11, r1
    228c:	ac 85       	ldd	r26, Y+12	; 0x0c
    228e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2290:	8d 92       	st	X+, r8
    2292:	9d 92       	st	X+, r9
    2294:	ad 92       	st	X+, r10
    2296:	bc 92       	st	X, r11
    2298:	13 97       	sbiw	r26, 0x03	; 3

}
    229a:	61 96       	adiw	r28, 0x11	; 17
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	bf 90       	pop	r11
    22b2:	af 90       	pop	r10
    22b4:	9f 90       	pop	r9
    22b6:	8f 90       	pop	r8
    22b8:	7f 90       	pop	r7
    22ba:	6f 90       	pop	r6
    22bc:	5f 90       	pop	r5
    22be:	4f 90       	pop	r4
    22c0:	3f 90       	pop	r3
    22c2:	2f 90       	pop	r2
    22c4:	08 95       	ret

000022c6 <CO_collectSeismic3Channel>:
	}
}

void CO_collectSeismic3Channel(uint8_t filterConfig, uint8_t gain[], uint8_t subsamplesPerSecond,
	uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
	uint16_t averagingPtC, uint16_t averagingPtD) {
    22c6:	6f 92       	push	r6
    22c8:	7f 92       	push	r7
    22ca:	8f 92       	push	r8
    22cc:	9f 92       	push	r9
    22ce:	af 92       	push	r10
    22d0:	bf 92       	push	r11
    22d2:	cf 92       	push	r12
    22d4:	df 92       	push	r13
    22d6:	ef 92       	push	r14
    22d8:	ff 92       	push	r15
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	0f 92       	push	r0
    22e4:	0f 92       	push	r0
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	18 2f       	mov	r17, r24
    22ec:	3b 01       	movw	r6, r22
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	29 83       	std	Y+1, r18	; 0x01
    22f2:	4a 83       	std	Y+2, r20	; 0x02
    22f4:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	
	// Set gains, filters, and input channel	
	set_ampGain(ADC_CH_6_gc, gain[0]);
    22f8:	85 e0       	ldi	r24, 0x05	; 5
    22fa:	f3 01       	movw	r30, r6
    22fc:	60 81       	ld	r22, Z
    22fe:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_ampGain>
	set_ampGain(ADC_CH_7_gc, gain[1]);
    2302:	86 e0       	ldi	r24, 0x06	; 6
    2304:	f3 01       	movw	r30, r6
    2306:	61 81       	ldd	r22, Z+1	; 0x01
    2308:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_ampGain>
	set_ampGain(ADC_CH_8_gc, gain[2]);
    230c:	87 e0       	ldi	r24, 0x07	; 7
    230e:	f3 01       	movw	r30, r6
    2310:	62 81       	ldd	r22, Z+2	; 0x02
    2312:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_ampGain>
	set_filter(filterConfig);
    2316:	81 2f       	mov	r24, r17
    2318:	0e 94 6e 09 	call	0x12dc	; 0x12dc <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    231c:	80 2f       	mov	r24, r16
    231e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    2322:	84 e0       	ldi	r24, 0x04	; 4
    2324:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2328:	84 e5       	ldi	r24, 0x54	; 84
    232a:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	0e 94 f5 08 	call	0x11ea	; 0x11ea <enableADCMUX>
	setADCInput(ADC_CH_6_gc);
    2334:	85 e0       	ldi	r24, 0x05	; 5
    2336:	0e 94 19 09 	call	0x1232	; 0x1232 <setADCInput>
	

	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    233a:	e0 ea       	ldi	r30, 0xA0	; 160
    233c:	f6 e0       	ldi	r31, 0x06	; 6
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	92 83       	std	Z+2, r25	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    2346:	98 e7       	ldi	r25, 0x78	; 120
    2348:	90 93 80 01 	sts	0x0180, r25

	// Configure counter for IO13(PF0) events
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    234c:	e0 e0       	ldi	r30, 0x00	; 0
    234e:	f8 e0       	ldi	r31, 0x08	; 8
    2350:	90 ef       	ldi	r25, 0xF0	; 240
    2352:	91 83       	std	Z+1, r25	; 0x01
	TCC0.CCA = averagingPtA;
    2354:	e0 a6       	lds	r30, 0xb0
    2356:	f1 a6       	lds	r31, 0xb1
	TCC0.CCB = averagingPtB;
    2358:	c2 a6       	lds	r28, 0xb2
    235a:	d3 a6       	lds	r29, 0xb3
	TCC0.CCC = averagingPtC;
    235c:	a4 a6       	lds	r26, 0xb4
    235e:	b5 a6       	lds	r27, 0xb5
	TCC0.CCD = averagingPtD;
    2360:	86 a6       	lds	r24, 0xb6
    2362:	97 a6       	lds	r25, 0xb7
	TCC0.PER = subsamplesPerChannel - 1;
    2364:	29 81       	ldd	r18, Y+1	; 0x01
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	21 50       	subi	r18, 0x01	; 1
    236a:	30 40       	sbci	r19, 0x00	; 0
    236c:	26 a3       	lds	r18, 0x56
    236e:	37 a3       	lds	r19, 0x57
	TCC0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    2370:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    2376:	80 91 00 08 	lds	r24, 0x0800
    237a:	80 7f       	andi	r24, 0xF0	; 240
    237c:	88 60       	ori	r24, 0x08	; 8
    237e:	80 93 00 08 	sts	0x0800, r24

	FRAMAddress = FR_BASEADD;
    2382:	10 92 5e 40 	sts	0x405E, r1
    2386:	10 92 5f 40 	sts	0x405F, r1
	sampleCount = 0;
    238a:	10 92 70 50 	sts	0x5070, r1
    238e:	10 92 71 50 	sts	0x5071, r1
	SPICount = 0;
    2392:	10 92 9c 50 	sts	0x509C, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    2396:	10 92 be 21 	sts	0x21BE, r1
    239a:	10 92 bd 21 	sts	0x21BD, r1
    239e:	10 92 bc 21 	sts	0x21BC, r1

	// Enable interrupts.
	PMIC.CTRL |= (PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);
    23a2:	80 91 a2 00 	lds	r24, 0x00A2
    23a6:	86 60       	ori	r24, 0x06	; 6
    23a8:	e0 ea       	ldi	r30, 0xA0	; 160
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	82 83       	std	Z+2, r24	; 0x02
	sei();
    23ae:	78 94       	sei

	SPICS(TRUE);
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    23b6:	80 e2       	ldi	r24, 0x20	; 32
    23b8:	e0 e8       	ldi	r30, 0x80	; 128
    23ba:	f6 e0       	ldi	r31, 0x06	; 6
    23bc:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    23be:	e0 e4       	ldi	r30, 0x40	; 64
    23c0:	fa e0       	ldi	r31, 0x0A	; 10
    23c2:	83 e2       	ldi	r24, 0x23	; 35
    23c4:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    23c6:	80 e2       	ldi	r24, 0x20	; 32
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	4a 81       	ldd	r20, Y+2	; 0x02
    23cc:	04 2e       	mov	r0, r20
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <CO_collectSeismic3Channel+0x10e>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <CO_collectSeismic3Channel+0x10a>
    23d8:	86 a3       	lds	r24, 0x56
    23da:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    23dc:	80 e1       	ldi	r24, 0x10	; 16
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <CO_collectSeismic3Channel+0x120>
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	4a 95       	dec	r20
    23e8:	e2 f7       	brpl	.-8      	; 0x23e2 <CO_collectSeismic3Channel+0x11c>
    23ea:	82 af       	sts	0x72, r24
    23ec:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    23ee:	80 91 40 0a 	lds	r24, 0x0A40
    23f2:	80 7f       	andi	r24, 0xF0	; 240
    23f4:	81 60       	ori	r24, 0x01	; 1
    23f6:	80 93 40 0a 	sts	0x0A40, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    23fa:	80 91 70 50 	lds	r24, 0x5070
    23fe:	90 91 71 50 	lds	r25, 0x5071
    2402:	f5 e5       	ldi	r31, 0x55	; 85
    2404:	83 35       	cpi	r24, 0x53	; 83
    2406:	9f 07       	cpc	r25, r31
    2408:	c0 f3       	brcs	.-16     	; 0x23fa <CO_collectSeismic3Channel+0x134>

	// turn off timer and interrupts
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    240a:	80 91 00 08 	lds	r24, 0x0800
    240e:	80 7f       	andi	r24, 0xF0	; 240
    2410:	80 93 00 08 	sts	0x0800, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    2414:	80 91 40 0a 	lds	r24, 0x0A40
    2418:	80 7f       	andi	r24, 0xF0	; 240
    241a:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    241e:	80 91 a2 00 	lds	r24, 0x00A2
    2422:	89 7f       	andi	r24, 0xF9	; 249
    2424:	e0 ea       	ldi	r30, 0xA0	; 160
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	82 83       	std	Z+2, r24	; 0x02
	cli();
    242a:	f8 94       	cli

	SPICS(FALSE);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    2432:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
	enableADCMUX(FALSE);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	0e 94 f5 08 	call	0x11ea	; 0x11ea <enableADCMUX>
	ADCPower(FALSE);
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	
}
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	9f 90       	pop	r9
    245c:	8f 90       	pop	r8
    245e:	7f 90       	pop	r7
    2460:	6f 90       	pop	r6
    2462:	08 95       	ret

00002464 <CO_collectSeismic1Channel>:
}

void CO_collectSeismic1Channel(uint8_t channel, uint8_t filterConfig, uint8_t gain,
	uint8_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable,
	uint16_t averagingPtA, uint16_t averagingPtB, uint16_t averagingPtC,
	uint16_t averagingPtD) {
    2464:	8f 92       	push	r8
    2466:	9f 92       	push	r9
    2468:	af 92       	push	r10
    246a:	bf 92       	push	r11
    246c:	cf 92       	push	r12
    246e:	df 92       	push	r13
    2470:	ef 92       	push	r14
    2472:	ff 92       	push	r15
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	0f 92       	push	r0
    247e:	0f 92       	push	r0
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	18 2f       	mov	r17, r24
    2486:	f6 2e       	mov	r15, r22
				
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	2a 83       	std	Y+2, r18	; 0x02
    248c:	49 83       	std	Y+1, r20	; 0x01
    248e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	
	// Set gains, filters, and input channel	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gain);
    2492:	81 2f       	mov	r24, r17
    2494:	49 81       	ldd	r20, Y+1	; 0x01
    2496:	64 2f       	mov	r22, r20
    2498:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_ampGain>
	set_filter(filterConfig);
    249c:	8f 2d       	mov	r24, r15
    249e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    24a2:	8e 2d       	mov	r24, r14
    24a4:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    24a8:	84 e0       	ldi	r24, 0x04	; 4
    24aa:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    24ae:	84 e5       	ldi	r24, 0x54	; 84
    24b0:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <enableADCMUX>
	setADCInput(channel);
    24ba:	81 2f       	mov	r24, r17
    24bc:	0e 94 19 09 	call	0x1232	; 0x1232 <setADCInput>
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    24c0:	e0 ea       	ldi	r30, 0xA0	; 160
    24c2:	f6 e0       	ldi	r31, 0x06	; 6
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	92 83       	std	Z+2, r25	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    24cc:	98 e7       	ldi	r25, 0x78	; 120
    24ce:	90 93 80 01 	sts	0x0180, r25

	// Configure counter for IO13(PF0) events
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    24d2:	e0 e0       	ldi	r30, 0x00	; 0
    24d4:	f9 e0       	ldi	r31, 0x09	; 9
    24d6:	90 ef       	ldi	r25, 0xF0	; 240
    24d8:	91 83       	std	Z+1, r25	; 0x01
	TCD0.CCA = averagingPtA;
    24da:	c0 a6       	lds	r28, 0xb0
    24dc:	d1 a6       	lds	r29, 0xb1
	TCD0.CCB = averagingPtB;
    24de:	a2 a6       	lds	r26, 0xb2
    24e0:	b3 a6       	lds	r27, 0xb3
	TCD0.CCC = averagingPtC;
    24e2:	84 a6       	lds	r24, 0xb4
    24e4:	95 a6       	lds	r25, 0xb5
	TCD0.CCD = averagingPtD;
    24e6:	4a 89       	ldd	r20, Y+18	; 0x12
    24e8:	5b 89       	ldd	r21, Y+19	; 0x13
    24ea:	46 a7       	lds	r20, 0x76
    24ec:	57 a7       	lds	r21, 0x77
	TCD0.PER = subsamplesPerSample - 1;
    24ee:	10 e0       	ldi	r17, 0x00	; 0
    24f0:	01 50       	subi	r16, 0x01	; 1
    24f2:	10 40       	sbci	r17, 0x00	; 0
    24f4:	06 a3       	lds	r16, 0x56
    24f6:	17 a3       	lds	r17, 0x57
	TCD0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    24f8:	86 83       	std	Z+6, r24	; 0x06
	TCD0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
    24fc:	87 83       	std	Z+7, r24	; 0x07
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    24fe:	80 91 00 09 	lds	r24, 0x0900
    2502:	80 7f       	andi	r24, 0xF0	; 240
    2504:	88 60       	ori	r24, 0x08	; 8
    2506:	80 93 00 09 	sts	0x0900, r24

	FRAMAddress = FR_BASEADD;
    250a:	10 92 5e 40 	sts	0x405E, r1
    250e:	10 92 5f 40 	sts	0x405F, r1
	sampleCount = 0;
    2512:	10 92 70 50 	sts	0x5070, r1
    2516:	10 92 71 50 	sts	0x5071, r1
	SPICount = 0;
    251a:	10 92 9c 50 	sts	0x509C, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;	
    251e:	10 92 be 21 	sts	0x21BE, r1
    2522:	10 92 bd 21 	sts	0x21BD, r1
    2526:	10 92 bc 21 	sts	0x21BC, r1
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm;
    252a:	80 91 a2 00 	lds	r24, 0x00A2
    252e:	86 60       	ori	r24, 0x06	; 6
    2530:	e0 ea       	ldi	r30, 0xA0	; 160
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2536:	78 94       	sei

	SPICS(TRUE);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    253e:	80 e2       	ldi	r24, 0x20	; 32
    2540:	e0 e8       	ldi	r30, 0x80	; 128
    2542:	f6 e0       	ldi	r31, 0x06	; 6
    2544:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    2546:	e0 e4       	ldi	r30, 0x40	; 64
    2548:	fa e0       	ldi	r31, 0x0A	; 10
    254a:	83 e2       	ldi	r24, 0x23	; 35
    254c:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    254e:	80 e2       	ldi	r24, 0x20	; 32
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	2a 81       	ldd	r18, Y+2	; 0x02
    2554:	02 2e       	mov	r0, r18
    2556:	02 c0       	rjmp	.+4      	; 0x255c <CO_collectSeismic1Channel+0xf8>
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	0a 94       	dec	r0
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <CO_collectSeismic1Channel+0xf4>
    2560:	86 a3       	lds	r24, 0x56
    2562:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    2564:	80 e1       	ldi	r24, 0x10	; 16
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 c0       	rjmp	.+4      	; 0x256e <CO_collectSeismic1Channel+0x10a>
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	2a 95       	dec	r18
    2570:	e2 f7       	brpl	.-8      	; 0x256a <CO_collectSeismic1Channel+0x106>
    2572:	82 af       	sts	0x72, r24
    2574:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2576:	80 91 40 0a 	lds	r24, 0x0A40
    257a:	80 7f       	andi	r24, 0xF0	; 240
    257c:	81 60       	ori	r24, 0x01	; 1
    257e:	80 93 40 0a 	sts	0x0A40, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    2582:	80 91 70 50 	lds	r24, 0x5070
    2586:	90 91 71 50 	lds	r25, 0x5071
    258a:	25 e5       	ldi	r18, 0x55	; 85
    258c:	83 35       	cpi	r24, 0x53	; 83
    258e:	92 07       	cpc	r25, r18
    2590:	c0 f3       	brcs	.-16     	; 0x2582 <CO_collectSeismic1Channel+0x11e>

	// turn off timer and interrupts
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    2592:	80 91 00 09 	lds	r24, 0x0900
    2596:	80 7f       	andi	r24, 0xF0	; 240
    2598:	80 93 00 09 	sts	0x0900, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    259c:	80 91 40 0a 	lds	r24, 0x0A40
    25a0:	80 7f       	andi	r24, 0xF0	; 240
    25a2:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    25a6:	80 91 a2 00 	lds	r24, 0x00A2
    25aa:	89 7f       	andi	r24, 0xF9	; 249
    25ac:	e0 ea       	ldi	r30, 0xA0	; 160
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	82 83       	std	Z+2, r24	; 0x02
	cli();
    25b2:	f8 94       	cli

	SPICS(FALSE);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    25ba:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
	enableADCMUX(FALSE);
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <enableADCMUX>
	ADCPower(FALSE);
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	bf 90       	pop	r11
    25e0:	af 90       	pop	r10
    25e2:	9f 90       	pop	r9
    25e4:	8f 90       	pop	r8
    25e6:	08 95       	ret

000025e8 <sampleCurrentChannel>:
ISR(TCD0_OVF_vect) {
	writeSE2FRAM();
}

void sampleCurrentChannel() {
	PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    25e8:	82 e0       	ldi	r24, 0x02	; 2
    25ea:	e0 ea       	ldi	r30, 0xA0	; 160
    25ec:	f6 e0       	ldi	r31, 0x06	; 6
    25ee:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    25f0:	8a ea       	ldi	r24, 0xAA	; 170
    25f2:	e0 ec       	ldi	r30, 0xC0	; 192
    25f4:	f8 e0       	ldi	r31, 0x08	; 8
    25f6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    25f8:	80 91 c2 08 	lds	r24, 0x08C2
    25fc:	87 ff       	sbrs	r24, 7
    25fe:	fc cf       	rjmp	.-8      	; 0x25f8 <sampleCurrentChannel+0x10>
	SPIBuffer[SPICount] = SPIC.DATA;
    2600:	e0 91 9c 50 	lds	r30, 0x509C
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 91 c3 08 	lds	r24, 0x08C3
    260a:	ed 59       	subi	r30, 0x9D	; 157
    260c:	ff 4a       	sbci	r31, 0xAF	; 175
    260e:	80 83       	st	Z, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    2610:	8a ea       	ldi	r24, 0xAA	; 170
    2612:	e0 ec       	ldi	r30, 0xC0	; 192
    2614:	f8 e0       	ldi	r31, 0x08	; 8
    2616:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2618:	80 91 c2 08 	lds	r24, 0x08C2
    261c:	87 ff       	sbrs	r24, 7
    261e:	fc cf       	rjmp	.-8      	; 0x2618 <sampleCurrentChannel+0x30>
	SPIBuffer[SPICount+1] = SPIC.DATA;
    2620:	e0 91 9c 50 	lds	r30, 0x509C
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 91 c3 08 	lds	r24, 0x08C3
    262a:	ec 59       	subi	r30, 0x9C	; 156
    262c:	ff 4a       	sbci	r31, 0xAF	; 175
    262e:	80 83       	st	Z, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    2630:	8a ea       	ldi	r24, 0xAA	; 170
    2632:	e0 ec       	ldi	r30, 0xC0	; 192
    2634:	f8 e0       	ldi	r31, 0x08	; 8
    2636:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2638:	80 91 c2 08 	lds	r24, 0x08C2
    263c:	87 ff       	sbrs	r24, 7
    263e:	fc cf       	rjmp	.-8      	; 0x2638 <sampleCurrentChannel+0x50>
	SPIBuffer[SPICount+2] = SPIC.DATA;
    2640:	e0 91 9c 50 	lds	r30, 0x509C
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 91 c3 08 	lds	r24, 0x08C3
    264a:	eb 59       	subi	r30, 0x9B	; 155
    264c:	ff 4a       	sbci	r31, 0xAF	; 175
    264e:	80 83       	st	Z, r24
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	e0 ea       	ldi	r30, 0xA0	; 160
    2654:	f6 e0       	ldi	r31, 0x06	; 6
    2656:	85 83       	std	Z+5, r24	; 0x05
	SPICount +=3;
    2658:	80 91 9c 50 	lds	r24, 0x509C
    265c:	8d 5f       	subi	r24, 0xFD	; 253
    265e:	80 93 9c 50 	sts	0x509C, r24
}
    2662:	08 95       	ret

00002664 <__vector_82>:

ISR(TCD0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCD_vect) {
    2664:	1f 92       	push	r1
    2666:	0f 92       	push	r0
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	0f 92       	push	r0
    266c:	0b b6       	in	r0, 0x3b	; 59
    266e:	0f 92       	push	r0
    2670:	11 24       	eor	r1, r1
    2672:	2f 93       	push	r18
    2674:	3f 93       	push	r19
    2676:	4f 93       	push	r20
    2678:	5f 93       	push	r21
    267a:	6f 93       	push	r22
    267c:	7f 93       	push	r23
    267e:	8f 93       	push	r24
    2680:	9f 93       	push	r25
    2682:	af 93       	push	r26
    2684:	bf 93       	push	r27
    2686:	ef 93       	push	r30
    2688:	ff 93       	push	r31
	sampleCurrentChannel();
    268a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <sampleCurrentChannel>
	SPICount = 0;		
    268e:	10 92 9c 50 	sts	0x509C, r1
}
    2692:	ff 91       	pop	r31
    2694:	ef 91       	pop	r30
    2696:	bf 91       	pop	r27
    2698:	af 91       	pop	r26
    269a:	9f 91       	pop	r25
    269c:	8f 91       	pop	r24
    269e:	7f 91       	pop	r23
    26a0:	6f 91       	pop	r22
    26a2:	5f 91       	pop	r21
    26a4:	4f 91       	pop	r20
    26a6:	3f 91       	pop	r19
    26a8:	2f 91       	pop	r18
    26aa:	0f 90       	pop	r0
    26ac:	0b be       	out	0x3b, r0	; 59
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	0f 90       	pop	r0
    26b4:	1f 90       	pop	r1
    26b6:	18 95       	reti

000026b8 <__vector_81>:

ISR(TCD0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCC_vect) {
    26b8:	1f 92       	push	r1
    26ba:	0f 92       	push	r0
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	0f 92       	push	r0
    26c0:	0b b6       	in	r0, 0x3b	; 59
    26c2:	0f 92       	push	r0
    26c4:	11 24       	eor	r1, r1
    26c6:	2f 93       	push	r18
    26c8:	3f 93       	push	r19
    26ca:	4f 93       	push	r20
    26cc:	5f 93       	push	r21
    26ce:	6f 93       	push	r22
    26d0:	7f 93       	push	r23
    26d2:	8f 93       	push	r24
    26d4:	9f 93       	push	r25
    26d6:	af 93       	push	r26
    26d8:	bf 93       	push	r27
    26da:	ef 93       	push	r30
    26dc:	ff 93       	push	r31
	sampleCurrentChannel();
    26de:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <sampleCurrentChannel>
}
    26e2:	ff 91       	pop	r31
    26e4:	ef 91       	pop	r30
    26e6:	bf 91       	pop	r27
    26e8:	af 91       	pop	r26
    26ea:	9f 91       	pop	r25
    26ec:	8f 91       	pop	r24
    26ee:	7f 91       	pop	r23
    26f0:	6f 91       	pop	r22
    26f2:	5f 91       	pop	r21
    26f4:	4f 91       	pop	r20
    26f6:	3f 91       	pop	r19
    26f8:	2f 91       	pop	r18
    26fa:	0f 90       	pop	r0
    26fc:	0b be       	out	0x3b, r0	; 59
    26fe:	0f 90       	pop	r0
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	0f 90       	pop	r0
    2704:	1f 90       	pop	r1
    2706:	18 95       	reti

00002708 <__vector_80>:

ISR(TCD0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCB_vect) {
    2708:	1f 92       	push	r1
    270a:	0f 92       	push	r0
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	0f 92       	push	r0
    2710:	0b b6       	in	r0, 0x3b	; 59
    2712:	0f 92       	push	r0
    2714:	11 24       	eor	r1, r1
    2716:	2f 93       	push	r18
    2718:	3f 93       	push	r19
    271a:	4f 93       	push	r20
    271c:	5f 93       	push	r21
    271e:	6f 93       	push	r22
    2720:	7f 93       	push	r23
    2722:	8f 93       	push	r24
    2724:	9f 93       	push	r25
    2726:	af 93       	push	r26
    2728:	bf 93       	push	r27
    272a:	ef 93       	push	r30
    272c:	ff 93       	push	r31
	sampleCurrentChannel();
    272e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <sampleCurrentChannel>
}
    2732:	ff 91       	pop	r31
    2734:	ef 91       	pop	r30
    2736:	bf 91       	pop	r27
    2738:	af 91       	pop	r26
    273a:	9f 91       	pop	r25
    273c:	8f 91       	pop	r24
    273e:	7f 91       	pop	r23
    2740:	6f 91       	pop	r22
    2742:	5f 91       	pop	r21
    2744:	4f 91       	pop	r20
    2746:	3f 91       	pop	r19
    2748:	2f 91       	pop	r18
    274a:	0f 90       	pop	r0
    274c:	0b be       	out	0x3b, r0	; 59
    274e:	0f 90       	pop	r0
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	0f 90       	pop	r0
    2754:	1f 90       	pop	r1
    2756:	18 95       	reti

00002758 <__vector_79>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCD0_CCA_vect) {
    2758:	1f 92       	push	r1
    275a:	0f 92       	push	r0
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	0f 92       	push	r0
    2760:	0b b6       	in	r0, 0x3b	; 59
    2762:	0f 92       	push	r0
    2764:	11 24       	eor	r1, r1
    2766:	2f 93       	push	r18
    2768:	3f 93       	push	r19
    276a:	4f 93       	push	r20
    276c:	5f 93       	push	r21
    276e:	6f 93       	push	r22
    2770:	7f 93       	push	r23
    2772:	8f 93       	push	r24
    2774:	9f 93       	push	r25
    2776:	af 93       	push	r26
    2778:	bf 93       	push	r27
    277a:	ef 93       	push	r30
    277c:	ff 93       	push	r31
	sampleCurrentChannel();
    277e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <sampleCurrentChannel>
}
    2782:	ff 91       	pop	r31
    2784:	ef 91       	pop	r30
    2786:	bf 91       	pop	r27
    2788:	af 91       	pop	r26
    278a:	9f 91       	pop	r25
    278c:	8f 91       	pop	r24
    278e:	7f 91       	pop	r23
    2790:	6f 91       	pop	r22
    2792:	5f 91       	pop	r21
    2794:	4f 91       	pop	r20
    2796:	3f 91       	pop	r19
    2798:	2f 91       	pop	r18
    279a:	0f 90       	pop	r0
    279c:	0b be       	out	0x3b, r0	; 59
    279e:	0f 90       	pop	r0
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	0f 90       	pop	r0
    27a4:	1f 90       	pop	r1
    27a6:	18 95       	reti

000027a8 <__vector_19>:

ISR(TCC0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCD_vect) {
    27a8:	1f 92       	push	r1
    27aa:	0f 92       	push	r0
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	0f 92       	push	r0
    27b0:	0b b6       	in	r0, 0x3b	; 59
    27b2:	0f 92       	push	r0
    27b4:	11 24       	eor	r1, r1
    27b6:	2f 93       	push	r18
    27b8:	3f 93       	push	r19
    27ba:	4f 93       	push	r20
    27bc:	5f 93       	push	r21
    27be:	6f 93       	push	r22
    27c0:	7f 93       	push	r23
    27c2:	8f 93       	push	r24
    27c4:	9f 93       	push	r25
    27c6:	af 93       	push	r26
    27c8:	bf 93       	push	r27
    27ca:	ef 93       	push	r30
    27cc:	ff 93       	push	r31
	sampleCurrentChannel();
    27ce:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <sampleCurrentChannel>
	SPICount = 0;
    27d2:	10 92 9c 50 	sts	0x509C, r1
	if(PORTB.OUT & PIN1_bm) {
    27d6:	e0 e2       	ldi	r30, 0x20	; 32
    27d8:	f6 e0       	ldi	r31, 0x06	; 6
    27da:	80 91 24 06 	lds	r24, 0x0624
    27de:	81 ff       	sbrs	r24, 1
    27e0:	0b c0       	rjmp	.+22     	; 0x27f8 <__vector_19+0x50>
		if (PORTA.OUT & PIN6_bm) PORTB.OUTTGL = PIN1_bm;
    27e2:	80 91 04 06 	lds	r24, 0x0604
    27e6:	86 ff       	sbrs	r24, 6
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <__vector_19+0x46>
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	03 c0       	rjmp	.+6      	; 0x27f4 <__vector_19+0x4c>
		else PORTA.OUTTGL = PIN6_bm;
    27ee:	80 e4       	ldi	r24, 0x40	; 64
    27f0:	e0 e0       	ldi	r30, 0x00	; 0
    27f2:	f6 e0       	ldi	r31, 0x06	; 6
    27f4:	87 83       	std	Z+7, r24	; 0x07
    27f6:	07 c0       	rjmp	.+14     	; 0x2806 <__vector_19+0x5e>
	} else {
		PORTA.OUTCLR = PIN6_bm;
    27f8:	80 e4       	ldi	r24, 0x40	; 64
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	b6 e0       	ldi	r27, 0x06	; 6
    27fe:	16 96       	adiw	r26, 0x06	; 6
    2800:	8c 93       	st	X, r24
		PORTB.OUTSET = PIN1_bm;
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	85 83       	std	Z+5, r24	; 0x05
	}
	
}
    2806:	ff 91       	pop	r31
    2808:	ef 91       	pop	r30
    280a:	bf 91       	pop	r27
    280c:	af 91       	pop	r26
    280e:	9f 91       	pop	r25
    2810:	8f 91       	pop	r24
    2812:	7f 91       	pop	r23
    2814:	6f 91       	pop	r22
    2816:	5f 91       	pop	r21
    2818:	4f 91       	pop	r20
    281a:	3f 91       	pop	r19
    281c:	2f 91       	pop	r18
    281e:	0f 90       	pop	r0
    2820:	0b be       	out	0x3b, r0	; 59
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	0f 90       	pop	r0
    2828:	1f 90       	pop	r1
    282a:	18 95       	reti

0000282c <__vector_18>:

ISR(TCC0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCC_vect) {
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	0b b6       	in	r0, 0x3b	; 59
    2836:	0f 92       	push	r0
    2838:	11 24       	eor	r1, r1
    283a:	2f 93       	push	r18
    283c:	3f 93       	push	r19
    283e:	4f 93       	push	r20
    2840:	5f 93       	push	r21
    2842:	6f 93       	push	r22
    2844:	7f 93       	push	r23
    2846:	8f 93       	push	r24
    2848:	9f 93       	push	r25
    284a:	af 93       	push	r26
    284c:	bf 93       	push	r27
    284e:	ef 93       	push	r30
    2850:	ff 93       	push	r31
	sampleCurrentChannel();
    2852:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <sampleCurrentChannel>
}
    2856:	ff 91       	pop	r31
    2858:	ef 91       	pop	r30
    285a:	bf 91       	pop	r27
    285c:	af 91       	pop	r26
    285e:	9f 91       	pop	r25
    2860:	8f 91       	pop	r24
    2862:	7f 91       	pop	r23
    2864:	6f 91       	pop	r22
    2866:	5f 91       	pop	r21
    2868:	4f 91       	pop	r20
    286a:	3f 91       	pop	r19
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0b be       	out	0x3b, r0	; 59
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <__vector_17>:

ISR(TCC0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCB_vect) {
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	0b b6       	in	r0, 0x3b	; 59
    2886:	0f 92       	push	r0
    2888:	11 24       	eor	r1, r1
    288a:	2f 93       	push	r18
    288c:	3f 93       	push	r19
    288e:	4f 93       	push	r20
    2890:	5f 93       	push	r21
    2892:	6f 93       	push	r22
    2894:	7f 93       	push	r23
    2896:	8f 93       	push	r24
    2898:	9f 93       	push	r25
    289a:	af 93       	push	r26
    289c:	bf 93       	push	r27
    289e:	ef 93       	push	r30
    28a0:	ff 93       	push	r31
	sampleCurrentChannel();
    28a2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <sampleCurrentChannel>
}
    28a6:	ff 91       	pop	r31
    28a8:	ef 91       	pop	r30
    28aa:	bf 91       	pop	r27
    28ac:	af 91       	pop	r26
    28ae:	9f 91       	pop	r25
    28b0:	8f 91       	pop	r24
    28b2:	7f 91       	pop	r23
    28b4:	6f 91       	pop	r22
    28b6:	5f 91       	pop	r21
    28b8:	4f 91       	pop	r20
    28ba:	3f 91       	pop	r19
    28bc:	2f 91       	pop	r18
    28be:	0f 90       	pop	r0
    28c0:	0b be       	out	0x3b, r0	; 59
    28c2:	0f 90       	pop	r0
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	0f 90       	pop	r0
    28c8:	1f 90       	pop	r1
    28ca:	18 95       	reti

000028cc <__vector_16>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCC0_CCA_vect) {
    28cc:	1f 92       	push	r1
    28ce:	0f 92       	push	r0
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	0f 92       	push	r0
    28d4:	0b b6       	in	r0, 0x3b	; 59
    28d6:	0f 92       	push	r0
    28d8:	11 24       	eor	r1, r1
    28da:	2f 93       	push	r18
    28dc:	3f 93       	push	r19
    28de:	4f 93       	push	r20
    28e0:	5f 93       	push	r21
    28e2:	6f 93       	push	r22
    28e4:	7f 93       	push	r23
    28e6:	8f 93       	push	r24
    28e8:	9f 93       	push	r25
    28ea:	af 93       	push	r26
    28ec:	bf 93       	push	r27
    28ee:	ef 93       	push	r30
    28f0:	ff 93       	push	r31
	sampleCurrentChannel();
    28f2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <sampleCurrentChannel>
}
    28f6:	ff 91       	pop	r31
    28f8:	ef 91       	pop	r30
    28fa:	bf 91       	pop	r27
    28fc:	af 91       	pop	r26
    28fe:	9f 91       	pop	r25
    2900:	8f 91       	pop	r24
    2902:	7f 91       	pop	r23
    2904:	6f 91       	pop	r22
    2906:	5f 91       	pop	r21
    2908:	4f 91       	pop	r20
    290a:	3f 91       	pop	r19
    290c:	2f 91       	pop	r18
    290e:	0f 90       	pop	r0
    2910:	0b be       	out	0x3b, r0	; 59
    2912:	0f 90       	pop	r0
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	0f 90       	pop	r0
    2918:	1f 90       	pop	r1
    291a:	18 95       	reti

0000291c <writeSE2FRAM>:
	SPIBuffer[SPICount+2] = SPIC.DATA;
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

void writeSE2FRAM() {
    291c:	ef 92       	push	r14
    291e:	ff 92       	push	r15
    2920:	1f 93       	push	r17
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	28 97       	sbiw	r28, 0x08	; 8
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	de bf       	out	0x3e, r29	; 62
	volatile int32_t sum = 0;
    2930:	1d 82       	std	Y+5, r1	; 0x05
    2932:	1e 82       	std	Y+6, r1	; 0x06
    2934:	1f 82       	std	Y+7, r1	; 0x07
    2936:	18 86       	std	Y+8, r1	; 0x08
	volatile int32_t currentSample;
	sampleCount++;
    2938:	80 91 70 50 	lds	r24, 0x5070
    293c:	90 91 71 50 	lds	r25, 0x5071
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	80 93 70 50 	sts	0x5070, r24
    2946:	90 93 71 50 	sts	0x5071, r25
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    294a:	80 ed       	ldi	r24, 0xD0	; 208
    294c:	80 93 c0 08 	sts	0x08C0, r24
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    2954:	1f ef       	ldi	r17, 0xFF	; 255
    2956:	f9 01       	movw	r30, r18
    2958:	ed 59       	subi	r30, 0x9D	; 157
    295a:	ff 4a       	sbci	r31, 0xAF	; 175
    295c:	80 81       	ld	r24, Z
    295e:	87 ff       	sbrs	r24, 7
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <writeSE2FRAM+0x4a>
    2962:	1c 83       	std	Y+4, r17	; 0x04
    2964:	01 c0       	rjmp	.+2      	; 0x2968 <writeSE2FRAM+0x4c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    2966:	1c 82       	std	Y+4, r1	; 0x04
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    2968:	43 e6       	ldi	r20, 0x63	; 99
    296a:	e4 2e       	mov	r14, r20
    296c:	40 e5       	ldi	r20, 0x50	; 80
    296e:	f4 2e       	mov	r15, r20
    2970:	80 81       	ld	r24, Z
    2972:	8b 83       	std	Y+3, r24	; 0x03
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    2974:	f9 01       	movw	r30, r18
    2976:	ec 59       	subi	r30, 0x9C	; 156
    2978:	ff 4a       	sbci	r31, 0xAF	; 175
    297a:	80 81       	ld	r24, Z
    297c:	8a 83       	std	Y+2, r24	; 0x02
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    297e:	f9 01       	movw	r30, r18
    2980:	eb 59       	subi	r30, 0x9B	; 155
    2982:	ff 4a       	sbci	r31, 0xAF	; 175
    2984:	80 81       	ld	r24, Z
    2986:	89 83       	std	Y+1, r24	; 0x01
		sum += currentSample;
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	af 81       	ldd	r26, Y+7	; 0x07
    298e:	b8 85       	ldd	r27, Y+8	; 0x08
    2990:	49 81       	ldd	r20, Y+1	; 0x01
    2992:	5a 81       	ldd	r21, Y+2	; 0x02
    2994:	6b 81       	ldd	r22, Y+3	; 0x03
    2996:	7c 81       	ldd	r23, Y+4	; 0x04
    2998:	84 0f       	add	r24, r20
    299a:	95 1f       	adc	r25, r21
    299c:	a6 1f       	adc	r26, r22
    299e:	b7 1f       	adc	r27, r23
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	af 83       	std	Y+7, r26	; 0x07
    29a6:	b8 87       	std	Y+8, r27	; 0x08
    29a8:	2d 5f       	subi	r18, 0xFD	; 253
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile int32_t currentSample;
	sampleCount++;
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    29ac:	2c 30       	cpi	r18, 0x0C	; 12
    29ae:	31 05       	cpc	r19, r1
    29b0:	91 f6       	brne	.-92     	; 0x2956 <writeSE2FRAM+0x3a>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
	
	sum = sum / 4;
    29b2:	6d 81       	ldd	r22, Y+5	; 0x05
    29b4:	7e 81       	ldd	r23, Y+6	; 0x06
    29b6:	8f 81       	ldd	r24, Y+7	; 0x07
    29b8:	98 85       	ldd	r25, Y+8	; 0x08
    29ba:	24 e0       	ldi	r18, 0x04	; 4
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e0       	ldi	r20, 0x00	; 0
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__divmodsi4>
    29c6:	2d 83       	std	Y+5, r18	; 0x05
    29c8:	3e 83       	std	Y+6, r19	; 0x06
    29ca:	4f 83       	std	Y+7, r20	; 0x07
    29cc:	58 87       	std	Y+8, r21	; 0x08
	SPIBuffer[2] = *(((uint8_t*)&sum)+0);
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	f7 01       	movw	r30, r14
    29d2:	82 83       	std	Z+2, r24	; 0x02
	SPIBuffer[1] = *(((uint8_t*)&sum)+1);
    29d4:	8e 81       	ldd	r24, Y+6	; 0x06
    29d6:	81 83       	std	Z+1, r24	; 0x01
	SPIBuffer[0] = *(((uint8_t*)&sum)+2);	
    29d8:	8f 81       	ldd	r24, Y+7	; 0x07
    29da:	80 93 63 50 	sts	0x5063, r24


	
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    29de:	80 e1       	ldi	r24, 0x10	; 16
    29e0:	e0 e4       	ldi	r30, 0x40	; 64
    29e2:	f6 e0       	ldi	r31, 0x06	; 6
    29e4:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    29e6:	88 e0       	ldi	r24, 0x08	; 8
    29e8:	e0 e2       	ldi	r30, 0x20	; 32
    29ea:	f6 e0       	ldi	r31, 0x06	; 6
    29ec:	86 83       	std	Z+6, r24	; 0x06
	nop();
    29ee:	00 00       	nop
	SPIC.DATA = FR_WREN;
    29f0:	86 e0       	ldi	r24, 0x06	; 6
    29f2:	e0 ec       	ldi	r30, 0xC0	; 192
    29f4:	f8 e0       	ldi	r31, 0x08	; 8
    29f6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    29f8:	80 91 c2 08 	lds	r24, 0x08C2
    29fc:	87 ff       	sbrs	r24, 7
    29fe:	fc cf       	rjmp	.-8      	; 0x29f8 <writeSE2FRAM+0xdc>
	SPIBuffer[12] = SPIC.DATA;
    2a00:	80 91 c3 08 	lds	r24, 0x08C3
    2a04:	80 93 6f 50 	sts	0x506F, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
    2a08:	e0 e2       	ldi	r30, 0x20	; 32
    2a0a:	f6 e0       	ldi	r31, 0x06	; 6
    2a0c:	88 e0       	ldi	r24, 0x08	; 8
    2a0e:	85 83       	std	Z+5, r24	; 0x05
	nop(); // time for CS_FRAM to accept high signal
    2a10:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2a12:	86 83       	std	Z+6, r24	; 0x06
	nop();
    2a14:	00 00       	nop
	SPIC.DATA = FR_WRITE;
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	e0 ec       	ldi	r30, 0xC0	; 192
    2a1a:	f8 e0       	ldi	r31, 0x08	; 8
    2a1c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2a1e:	80 91 c2 08 	lds	r24, 0x08C2
    2a22:	87 ff       	sbrs	r24, 7
    2a24:	fc cf       	rjmp	.-8      	; 0x2a1e <writeSE2FRAM+0x102>
	SPIBuffer[12] = SPIC.DATA;
    2a26:	80 91 c3 08 	lds	r24, 0x08C3
    2a2a:	80 93 6f 50 	sts	0x506F, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    2a2e:	80 91 5f 40 	lds	r24, 0x405F
    2a32:	e0 ec       	ldi	r30, 0xC0	; 192
    2a34:	f8 e0       	ldi	r31, 0x08	; 8
    2a36:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2a38:	80 91 c2 08 	lds	r24, 0x08C2
    2a3c:	87 ff       	sbrs	r24, 7
    2a3e:	fc cf       	rjmp	.-8      	; 0x2a38 <writeSE2FRAM+0x11c>
	SPIBuffer[12] = SPIC.DATA;
    2a40:	80 91 c3 08 	lds	r24, 0x08C3
    2a44:	80 93 6f 50 	sts	0x506F, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
    2a48:	80 91 5e 40 	lds	r24, 0x405E
    2a4c:	e0 ec       	ldi	r30, 0xC0	; 192
    2a4e:	f8 e0       	ldi	r31, 0x08	; 8
    2a50:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2a52:	80 91 c2 08 	lds	r24, 0x08C2
    2a56:	87 ff       	sbrs	r24, 7
    2a58:	fc cf       	rjmp	.-8      	; 0x2a52 <writeSE2FRAM+0x136>
	SPIBuffer[12] = SPIC.DATA;
    2a5a:	80 91 c3 08 	lds	r24, 0x08C3
    2a5e:	80 93 6f 50 	sts	0x506F, r24
	SPIC.DATA = SPIBuffer[0];
    2a62:	80 91 63 50 	lds	r24, 0x5063
    2a66:	e0 ec       	ldi	r30, 0xC0	; 192
    2a68:	f8 e0       	ldi	r31, 0x08	; 8
    2a6a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2a6c:	80 91 c2 08 	lds	r24, 0x08C2
    2a70:	87 ff       	sbrs	r24, 7
    2a72:	fc cf       	rjmp	.-8      	; 0x2a6c <writeSE2FRAM+0x150>
	SPIBuffer[12] = SPIC.DATA;
    2a74:	80 91 c3 08 	lds	r24, 0x08C3
    2a78:	80 93 6f 50 	sts	0x506F, r24
	SPIC.DATA = SPIBuffer[1];
    2a7c:	80 91 64 50 	lds	r24, 0x5064
    2a80:	e0 ec       	ldi	r30, 0xC0	; 192
    2a82:	f8 e0       	ldi	r31, 0x08	; 8
    2a84:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2a86:	80 91 c2 08 	lds	r24, 0x08C2
    2a8a:	87 ff       	sbrs	r24, 7
    2a8c:	fc cf       	rjmp	.-8      	; 0x2a86 <writeSE2FRAM+0x16a>
	SPIBuffer[12] = SPIC.DATA;
    2a8e:	80 91 c3 08 	lds	r24, 0x08C3
    2a92:	80 93 6f 50 	sts	0x506F, r24
	SPIC.DATA = SPIBuffer[2];
    2a96:	80 91 65 50 	lds	r24, 0x5065
    2a9a:	e0 ec       	ldi	r30, 0xC0	; 192
    2a9c:	f8 e0       	ldi	r31, 0x08	; 8
    2a9e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2aa0:	80 91 c2 08 	lds	r24, 0x08C2
    2aa4:	87 ff       	sbrs	r24, 7
    2aa6:	fc cf       	rjmp	.-8      	; 0x2aa0 <writeSE2FRAM+0x184>
	SPIBuffer[12] = SPIC.DATA;
    2aa8:	80 91 c3 08 	lds	r24, 0x08C3
    2aac:	80 93 6f 50 	sts	0x506F, r24
		
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    2ab0:	88 e0       	ldi	r24, 0x08	; 8
    2ab2:	e0 e2       	ldi	r30, 0x20	; 32
    2ab4:	f6 e0       	ldi	r31, 0x06	; 6
    2ab6:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    2ab8:	e0 e4       	ldi	r30, 0x40	; 64
    2aba:	f6 e0       	ldi	r31, 0x06	; 6
    2abc:	80 e1       	ldi	r24, 0x10	; 16
    2abe:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2ac0:	94 e5       	ldi	r25, 0x54	; 84
    2ac2:	90 93 c0 08 	sts	0x08C0, r25
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2ac6:	86 83       	std	Z+6, r24	; 0x06
	
	FRAMAddress +=3;
    2ac8:	80 91 5e 40 	lds	r24, 0x405E
    2acc:	90 91 5f 40 	lds	r25, 0x405F
    2ad0:	03 96       	adiw	r24, 0x03	; 3
    2ad2:	80 93 5e 40 	sts	0x405E, r24
    2ad6:	90 93 5f 40 	sts	0x405F, r25
	checksumADC[0] += SPIBuffer[0];
    2ada:	90 91 bc 21 	lds	r25, 0x21BC
    2ade:	80 91 63 50 	lds	r24, 0x5063
    2ae2:	89 0f       	add	r24, r25
    2ae4:	80 93 bc 21 	sts	0x21BC, r24
	checksumADC[1] += SPIBuffer[1];
    2ae8:	90 91 bd 21 	lds	r25, 0x21BD
    2aec:	80 91 64 50 	lds	r24, 0x5064
    2af0:	89 0f       	add	r24, r25
    2af2:	80 93 bd 21 	sts	0x21BD, r24
	checksumADC[2] += SPIBuffer[2];	
    2af6:	90 91 be 21 	lds	r25, 0x21BE
    2afa:	80 91 65 50 	lds	r24, 0x5065
    2afe:	89 0f       	add	r24, r25
    2b00:	80 93 be 21 	sts	0x21BE, r24
}
    2b04:	28 96       	adiw	r28, 0x08	; 8
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	ff 90       	pop	r15
    2b12:	ef 90       	pop	r14
    2b14:	08 95       	ret

00002b16 <__vector_77>:
ISR(TCD0_CCD_vect) {
	sampleCurrentChannel();
	SPICount = 0;		
}

ISR(TCD0_OVF_vect) {
    2b16:	1f 92       	push	r1
    2b18:	0f 92       	push	r0
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	0f 92       	push	r0
    2b1e:	0b b6       	in	r0, 0x3b	; 59
    2b20:	0f 92       	push	r0
    2b22:	11 24       	eor	r1, r1
    2b24:	2f 93       	push	r18
    2b26:	3f 93       	push	r19
    2b28:	4f 93       	push	r20
    2b2a:	5f 93       	push	r21
    2b2c:	6f 93       	push	r22
    2b2e:	7f 93       	push	r23
    2b30:	8f 93       	push	r24
    2b32:	9f 93       	push	r25
    2b34:	af 93       	push	r26
    2b36:	bf 93       	push	r27
    2b38:	ef 93       	push	r30
    2b3a:	ff 93       	push	r31
	writeSE2FRAM();
    2b3c:	0e 94 8e 14 	call	0x291c	; 0x291c <writeSE2FRAM>
}
    2b40:	ff 91       	pop	r31
    2b42:	ef 91       	pop	r30
    2b44:	bf 91       	pop	r27
    2b46:	af 91       	pop	r26
    2b48:	9f 91       	pop	r25
    2b4a:	8f 91       	pop	r24
    2b4c:	7f 91       	pop	r23
    2b4e:	6f 91       	pop	r22
    2b50:	5f 91       	pop	r21
    2b52:	4f 91       	pop	r20
    2b54:	3f 91       	pop	r19
    2b56:	2f 91       	pop	r18
    2b58:	0f 90       	pop	r0
    2b5a:	0b be       	out	0x3b, r0	; 59
    2b5c:	0f 90       	pop	r0
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	0f 90       	pop	r0
    2b62:	1f 90       	pop	r1
    2b64:	18 95       	reti

00002b66 <__vector_14>:
		PORTB.OUTSET = PIN1_bm;
	}
	
}

ISR(TCC0_OVF_vect) {
    2b66:	1f 92       	push	r1
    2b68:	0f 92       	push	r0
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	0f 92       	push	r0
    2b6e:	0b b6       	in	r0, 0x3b	; 59
    2b70:	0f 92       	push	r0
    2b72:	11 24       	eor	r1, r1
    2b74:	2f 93       	push	r18
    2b76:	3f 93       	push	r19
    2b78:	4f 93       	push	r20
    2b7a:	5f 93       	push	r21
    2b7c:	6f 93       	push	r22
    2b7e:	7f 93       	push	r23
    2b80:	8f 93       	push	r24
    2b82:	9f 93       	push	r25
    2b84:	af 93       	push	r26
    2b86:	bf 93       	push	r27
    2b88:	ef 93       	push	r30
    2b8a:	ff 93       	push	r31
	writeSE2FRAM();
    2b8c:	0e 94 8e 14 	call	0x291c	; 0x291c <writeSE2FRAM>
}
    2b90:	ff 91       	pop	r31
    2b92:	ef 91       	pop	r30
    2b94:	bf 91       	pop	r27
    2b96:	af 91       	pop	r26
    2b98:	9f 91       	pop	r25
    2b9a:	8f 91       	pop	r24
    2b9c:	7f 91       	pop	r23
    2b9e:	6f 91       	pop	r22
    2ba0:	5f 91       	pop	r21
    2ba2:	4f 91       	pop	r20
    2ba4:	3f 91       	pop	r19
    2ba6:	2f 91       	pop	r18
    2ba8:	0f 90       	pop	r0
    2baa:	0b be       	out	0x3b, r0	; 59
    2bac:	0f 90       	pop	r0
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	0f 90       	pop	r0
    2bb2:	1f 90       	pop	r1
    2bb4:	18 95       	reti

00002bb6 <readFRAM>:
	checksumADC[2] += SPIBuffer[2];	
}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes) {
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	ec 01       	movw	r28, r24
	SPIInit(SPI_MODE_0_gc);
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2bc2:	80 ed       	ldi	r24, 0xD0	; 208
    2bc4:	80 93 c0 08 	sts	0x08C0, r24
	SPICS(TRUE);
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2bce:	88 e0       	ldi	r24, 0x08	; 8
    2bd0:	e0 e2       	ldi	r30, 0x20	; 32
    2bd2:	f6 e0       	ldi	r31, 0x06	; 6
    2bd4:	86 83       	std	Z+6, r24	; 0x06
	nop();
    2bd6:	00 00       	nop
								
	SPIC.DATA = FR_READ;
    2bd8:	83 e0       	ldi	r24, 0x03	; 3
    2bda:	e0 ec       	ldi	r30, 0xC0	; 192
    2bdc:	f8 e0       	ldi	r31, 0x08	; 8
    2bde:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2be0:	80 91 c2 08 	lds	r24, 0x08C2
    2be4:	87 ff       	sbrs	r24, 7
    2be6:	fc cf       	rjmp	.-8      	; 0x2be0 <readFRAM+0x2a>
	SPIBuffer[12] = SPIC.DATA;
    2be8:	80 91 c3 08 	lds	r24, 0x08C3
    2bec:	80 93 6f 50 	sts	0x506F, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 1);;
    2bf0:	80 91 5f 40 	lds	r24, 0x405F
    2bf4:	e0 ec       	ldi	r30, 0xC0	; 192
    2bf6:	f8 e0       	ldi	r31, 0x08	; 8
    2bf8:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2bfa:	80 91 c2 08 	lds	r24, 0x08C2
    2bfe:	87 ff       	sbrs	r24, 7
    2c00:	fc cf       	rjmp	.-8      	; 0x2bfa <readFRAM+0x44>
	SPIBuffer[12] = SPIC.DATA;
    2c02:	80 91 c3 08 	lds	r24, 0x08C3
    2c06:	80 93 6f 50 	sts	0x506F, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
    2c0a:	80 91 5e 40 	lds	r24, 0x405E
    2c0e:	e0 ec       	ldi	r30, 0xC0	; 192
    2c10:	f8 e0       	ldi	r31, 0x08	; 8
    2c12:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2c14:	80 91 c2 08 	lds	r24, 0x08C2
    2c18:	87 ff       	sbrs	r24, 7
    2c1a:	fc cf       	rjmp	.-8      	; 0x2c14 <readFRAM+0x5e>
	SPIBuffer[12] = SPIC.DATA;
    2c1c:	80 91 c3 08 	lds	r24, 0x08C3
    2c20:	80 93 6f 50 	sts	0x506F, r24
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
		SPIC.DATA = 0xAA;
    2c28:	a0 ec       	ldi	r26, 0xC0	; 192
    2c2a:	b8 e0       	ldi	r27, 0x08	; 8
    2c2c:	2a ea       	ldi	r18, 0xAA	; 170
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    2c2e:	0e c0       	rjmp	.+28     	; 0x2c4c <readFRAM+0x96>
		SPIC.DATA = 0xAA;
    2c30:	13 96       	adiw	r26, 0x03	; 3
    2c32:	2c 93       	st	X, r18
    2c34:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    2c36:	30 91 c2 08 	lds	r19, 0x08C2
    2c3a:	37 ff       	sbrs	r19, 7
    2c3c:	fc cf       	rjmp	.-8      	; 0x2c36 <readFRAM+0x80>
		FRAMReadBuffer[i] = SPIC.DATA;
    2c3e:	30 91 c3 08 	lds	r19, 0x08C3
    2c42:	fc 01       	movw	r30, r24
    2c44:	e8 53       	subi	r30, 0x38	; 56
    2c46:	fc 4d       	sbci	r31, 0xDC	; 220
    2c48:	30 83       	st	Z, r19
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	8c 17       	cp	r24, r28
    2c4e:	9d 07       	cpc	r25, r29
    2c50:	79 f7       	brne	.-34     	; 0x2c30 <readFRAM+0x7a>
		SPIC.DATA = 0xAA;
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
	}

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
    2c52:	88 e0       	ldi	r24, 0x08	; 8
    2c54:	e0 e2       	ldi	r30, 0x20	; 32
    2c56:	f6 e0       	ldi	r31, 0x06	; 6
    2c58:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    2c60:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>

}
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	08 95       	ret

00002c6a <calcChecksumFRAM>:

	ADCPower(FALSE);

}

void calcChecksumFRAM() {
    2c6a:	2f 92       	push	r2
    2c6c:	3f 92       	push	r3
    2c6e:	4f 92       	push	r4
    2c70:	5f 92       	push	r5
    2c72:	6f 92       	push	r6
    2c74:	7f 92       	push	r7
    2c76:	8f 92       	push	r8
    2c78:	9f 92       	push	r9
    2c7a:	af 92       	push	r10
    2c7c:	bf 92       	push	r11
    2c7e:	cf 92       	push	r12
    2c80:	df 92       	push	r13
    2c82:	ef 92       	push	r14
    2c84:	ff 92       	push	r15
    2c86:	0f 93       	push	r16
    2c88:	1f 93       	push	r17
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
    2c8e:	10 92 87 50 	sts	0x5087, r1
    2c92:	10 92 88 50 	sts	0x5088, r1
    2c96:	10 92 89 50 	sts	0x5089, r1
    2c9a:	10 92 8a 50 	sts	0x508A, r1
    2c9e:	10 92 8b 50 	sts	0x508B, r1
    2ca2:	10 92 8c 50 	sts	0x508C, r1
    2ca6:	10 92 8d 50 	sts	0x508D, r1
    2caa:	10 92 8e 50 	sts	0x508E, r1
    2cae:	ef e7       	ldi	r30, 0x7F	; 127
    2cb0:	f0 e5       	ldi	r31, 0x50	; 80
    2cb2:	10 92 7f 50 	sts	0x507F, r1
    2cb6:	11 82       	std	Z+1, r1	; 0x01
    2cb8:	12 82       	std	Z+2, r1	; 0x02
    2cba:	13 82       	std	Z+3, r1	; 0x03
    2cbc:	14 82       	std	Z+4, r1	; 0x04
    2cbe:	15 82       	std	Z+5, r1	; 0x05
    2cc0:	16 82       	std	Z+6, r1	; 0x06
    2cc2:	17 82       	std	Z+7, r1	; 0x07
    2cc4:	df 01       	movw	r26, r30
    2cc6:	18 97       	sbiw	r26, 0x08	; 8
    2cc8:	10 92 77 50 	sts	0x5077, r1
    2ccc:	11 96       	adiw	r26, 0x01	; 1
    2cce:	1c 92       	st	X, r1
    2cd0:	11 97       	sbiw	r26, 0x01	; 1
    2cd2:	12 96       	adiw	r26, 0x02	; 2
    2cd4:	1c 92       	st	X, r1
    2cd6:	12 97       	sbiw	r26, 0x02	; 2
    2cd8:	13 96       	adiw	r26, 0x03	; 3
    2cda:	1c 92       	st	X, r1
    2cdc:	13 97       	sbiw	r26, 0x03	; 3
    2cde:	14 96       	adiw	r26, 0x04	; 4
    2ce0:	1c 92       	st	X, r1
    2ce2:	14 97       	sbiw	r26, 0x04	; 4
    2ce4:	15 96       	adiw	r26, 0x05	; 5
    2ce6:	1c 92       	st	X, r1
    2ce8:	15 97       	sbiw	r26, 0x05	; 5
    2cea:	16 96       	adiw	r26, 0x06	; 6
    2cec:	1c 92       	st	X, r1
    2cee:	16 97       	sbiw	r26, 0x06	; 6
    2cf0:	17 96       	adiw	r26, 0x07	; 7
    2cf2:	1c 92       	st	X, r1
    2cf4:	17 97       	sbiw	r26, 0x07	; 7
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
    2cf6:	10 92 bb 21 	sts	0x21BB, r1
    2cfa:	10 92 ba 21 	sts	0x21BA, r1
    2cfe:	10 92 b9 21 	sts	0x21B9, r1
	FRAMAddress = FR_BASEADD;
    2d02:	10 92 5e 40 	sts	0x405E, r1
    2d06:	10 92 5f 40 	sts	0x405F, r1
    2d0a:	59 e0       	ldi	r21, 0x09	; 9
    2d0c:	45 2e       	mov	r4, r21
    2d0e:	51 2c       	mov	r5, r1
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    2d10:	63 e0       	ldi	r22, 0x03	; 3
    2d12:	26 2e       	mov	r2, r22
    2d14:	31 2c       	mov	r3, r1
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    2d16:	ee 24       	eor	r14, r14
    2d18:	ea 94       	dec	r14
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
			if(k%9 == 8) sumFRAM[2] += *temp64;
    2d1a:	70 e1       	ldi	r23, 0x10	; 16
    2d1c:	67 2e       	mov	r6, r23
    2d1e:	71 2c       	mov	r7, r1
    2d20:	6a 0e       	add	r6, r26
    2d22:	7b 1e       	adc	r7, r27
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
    2d24:	4f 01       	movw	r8, r30
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    2d26:	5d 01       	movw	r10, r26
void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
    2d28:	81 e7       	ldi	r24, 0x71	; 113
    2d2a:	9c e1       	ldi	r25, 0x1C	; 28
    2d2c:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <readFRAM>
		FRAMAddress += FR_READ_BUFFER_SIZE;
    2d30:	80 91 5e 40 	lds	r24, 0x405E
    2d34:	90 91 5f 40 	lds	r25, 0x405F
    2d38:	8f 58       	subi	r24, 0x8F	; 143
    2d3a:	93 4e       	sbci	r25, 0xE3	; 227
    2d3c:	80 93 5e 40 	sts	0x405E, r24
    2d40:	90 93 5f 40 	sts	0x405F, r25
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    2d44:	cc 24       	eor	r12, r12
    2d46:	dd 24       	eor	r13, r13
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    2d48:	c6 01       	movw	r24, r12
    2d4a:	b1 01       	movw	r22, r2
    2d4c:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__udivmodhi4>
    2d50:	fc 01       	movw	r30, r24
    2d52:	e7 54       	subi	r30, 0x47	; 71
    2d54:	fe 4d       	sbci	r31, 0xDE	; 222
    2d56:	20 81       	ld	r18, Z
    2d58:	d6 01       	movw	r26, r12
    2d5a:	a8 53       	subi	r26, 0x38	; 56
    2d5c:	bc 4d       	sbci	r27, 0xDC	; 220
    2d5e:	3c 91       	ld	r19, X
    2d60:	23 0f       	add	r18, r19
    2d62:	20 83       	st	Z, r18
    2d64:	e0 91 61 50 	lds	r30, 0x5061
    2d68:	f0 91 62 50 	lds	r31, 0x5062
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	c1 f4       	brne	.+48     	; 0x2da0 <calcChecksumFRAM+0x136>
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    2d70:	8c 91       	ld	r24, X
    2d72:	10 82       	st	Z, r1
    2d74:	11 82       	std	Z+1, r1	; 0x01
    2d76:	12 82       	std	Z+2, r1	; 0x02
    2d78:	87 ff       	sbrs	r24, 7
    2d7a:	06 c0       	rjmp	.+12     	; 0x2d88 <calcChecksumFRAM+0x11e>
    2d7c:	e3 82       	std	Z+3, r14	; 0x03
    2d7e:	e4 82       	std	Z+4, r14	; 0x04
    2d80:	e5 82       	std	Z+5, r14	; 0x05
    2d82:	e6 82       	std	Z+6, r14	; 0x06
    2d84:	e7 82       	std	Z+7, r14	; 0x07
    2d86:	05 c0       	rjmp	.+10     	; 0x2d92 <calcChecksumFRAM+0x128>
				else *temp64 = 0x0000000000000000;
    2d88:	13 82       	std	Z+3, r1	; 0x03
    2d8a:	14 82       	std	Z+4, r1	; 0x04
    2d8c:	15 82       	std	Z+5, r1	; 0x05
    2d8e:	16 82       	std	Z+6, r1	; 0x06
    2d90:	17 82       	std	Z+7, r1	; 0x07
				*(((uint8_t*)temp64) + 2) = FRAMReadBuffer[k];
    2d92:	8c 91       	ld	r24, X
    2d94:	e0 91 61 50 	lds	r30, 0x5061
    2d98:	f0 91 62 50 	lds	r31, 0x5062
    2d9c:	82 83       	std	Z+2, r24	; 0x02
    2d9e:	08 c0       	rjmp	.+16     	; 0x2db0 <calcChecksumFRAM+0x146>
			} else if(k%3 == 1) {
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	91 05       	cpc	r25, r1
    2da4:	19 f4       	brne	.+6      	; 0x2dac <calcChecksumFRAM+0x142>
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
    2da6:	8c 91       	ld	r24, X
    2da8:	81 83       	std	Z+1, r24	; 0x01
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <calcChecksumFRAM+0x146>
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
    2dac:	8c 91       	ld	r24, X
    2dae:	80 83       	st	Z, r24
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    2db0:	c6 01       	movw	r24, r12
    2db2:	69 e0       	ldi	r22, 0x09	; 9
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__udivmodhi4>
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	91 05       	cpc	r25, r1
    2dbe:	09 f0       	breq	.+2      	; 0x2dc2 <calcChecksumFRAM+0x158>
    2dc0:	69 c0       	rjmp	.+210    	; 0x2e94 <calcChecksumFRAM+0x22a>
    2dc2:	70 91 77 50 	lds	r23, 0x5077
    2dc6:	60 91 78 50 	lds	r22, 0x5078
    2dca:	50 91 79 50 	lds	r21, 0x5079
    2dce:	40 91 7a 50 	lds	r20, 0x507A
    2dd2:	30 91 7b 50 	lds	r19, 0x507B
    2dd6:	20 91 7c 50 	lds	r18, 0x507C
    2dda:	90 91 7d 50 	lds	r25, 0x507D
    2dde:	f0 90 7e 50 	lds	r15, 0x507E
    2de2:	e0 91 61 50 	lds	r30, 0x5061
    2de6:	f0 91 62 50 	lds	r31, 0x5062
    2dea:	80 81       	ld	r24, Z
    2dec:	11 81       	ldd	r17, Z+1	; 0x01
    2dee:	d2 81       	ldd	r29, Z+2	; 0x02
    2df0:	c3 81       	ldd	r28, Z+3	; 0x03
    2df2:	b4 81       	ldd	r27, Z+4	; 0x04
    2df4:	a5 81       	ldd	r26, Z+5	; 0x05
    2df6:	06 81       	ldd	r16, Z+6	; 0x06
    2df8:	e7 81       	ldd	r30, Z+7	; 0x07
    2dfa:	87 0f       	add	r24, r23
    2dfc:	f1 e0       	ldi	r31, 0x01	; 1
    2dfe:	87 17       	cp	r24, r23
    2e00:	08 f0       	brcs	.+2      	; 0x2e04 <calcChecksumFRAM+0x19a>
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	16 0f       	add	r17, r22
    2e06:	71 e0       	ldi	r23, 0x01	; 1
    2e08:	16 17       	cp	r17, r22
    2e0a:	08 f0       	brcs	.+2      	; 0x2e0e <calcChecksumFRAM+0x1a4>
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	f1 0f       	add	r31, r17
    2e10:	61 e0       	ldi	r22, 0x01	; 1
    2e12:	f1 17       	cp	r31, r17
    2e14:	08 f0       	brcs	.+2      	; 0x2e18 <calcChecksumFRAM+0x1ae>
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	76 2b       	or	r23, r22
    2e1a:	d5 0f       	add	r29, r21
    2e1c:	61 e0       	ldi	r22, 0x01	; 1
    2e1e:	d5 17       	cp	r29, r21
    2e20:	08 f0       	brcs	.+2      	; 0x2e24 <calcChecksumFRAM+0x1ba>
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	7d 0f       	add	r23, r29
    2e26:	51 e0       	ldi	r21, 0x01	; 1
    2e28:	7d 17       	cp	r23, r29
    2e2a:	08 f0       	brcs	.+2      	; 0x2e2e <calcChecksumFRAM+0x1c4>
    2e2c:	50 e0       	ldi	r21, 0x00	; 0
    2e2e:	65 2b       	or	r22, r21
    2e30:	c4 0f       	add	r28, r20
    2e32:	51 e0       	ldi	r21, 0x01	; 1
    2e34:	c4 17       	cp	r28, r20
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <calcChecksumFRAM+0x1d0>
    2e38:	50 e0       	ldi	r21, 0x00	; 0
    2e3a:	6c 0f       	add	r22, r28
    2e3c:	41 e0       	ldi	r20, 0x01	; 1
    2e3e:	6c 17       	cp	r22, r28
    2e40:	08 f0       	brcs	.+2      	; 0x2e44 <calcChecksumFRAM+0x1da>
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	54 2b       	or	r21, r20
    2e46:	b3 0f       	add	r27, r19
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	b3 17       	cp	r27, r19
    2e4c:	08 f0       	brcs	.+2      	; 0x2e50 <calcChecksumFRAM+0x1e6>
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	5b 0f       	add	r21, r27
    2e52:	31 e0       	ldi	r19, 0x01	; 1
    2e54:	5b 17       	cp	r21, r27
    2e56:	08 f0       	brcs	.+2      	; 0x2e5a <calcChecksumFRAM+0x1f0>
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	43 2b       	or	r20, r19
    2e5c:	a2 0f       	add	r26, r18
    2e5e:	31 e0       	ldi	r19, 0x01	; 1
    2e60:	a2 17       	cp	r26, r18
    2e62:	08 f0       	brcs	.+2      	; 0x2e66 <calcChecksumFRAM+0x1fc>
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4a 0f       	add	r20, r26
    2e68:	21 e0       	ldi	r18, 0x01	; 1
    2e6a:	4a 17       	cp	r20, r26
    2e6c:	08 f0       	brcs	.+2      	; 0x2e70 <calcChecksumFRAM+0x206>
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	32 2b       	or	r19, r18
    2e72:	09 0f       	add	r16, r25
    2e74:	21 e0       	ldi	r18, 0x01	; 1
    2e76:	09 17       	cp	r16, r25
    2e78:	08 f0       	brcs	.+2      	; 0x2e7c <calcChecksumFRAM+0x212>
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 0f       	add	r19, r16
    2e7e:	91 e0       	ldi	r25, 0x01	; 1
    2e80:	30 17       	cp	r19, r16
    2e82:	08 f0       	brcs	.+2      	; 0x2e86 <calcChecksumFRAM+0x21c>
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	92 2b       	or	r25, r18
    2e88:	fe 0e       	add	r15, r30
    2e8a:	9f 0d       	add	r25, r15
    2e8c:	80 93 77 50 	sts	0x5077, r24
    2e90:	d5 01       	movw	r26, r10
    2e92:	d9 c0       	rjmp	.+434    	; 0x3046 <calcChecksumFRAM+0x3dc>
			if(k%9 == 5) sumFRAM[1] += *temp64;
    2e94:	85 30       	cpi	r24, 0x05	; 5
    2e96:	91 05       	cpc	r25, r1
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <calcChecksumFRAM+0x232>
    2e9a:	69 c0       	rjmp	.+210    	; 0x2f6e <calcChecksumFRAM+0x304>
    2e9c:	70 91 7f 50 	lds	r23, 0x507F
    2ea0:	60 91 80 50 	lds	r22, 0x5080
    2ea4:	50 91 81 50 	lds	r21, 0x5081
    2ea8:	40 91 82 50 	lds	r20, 0x5082
    2eac:	30 91 83 50 	lds	r19, 0x5083
    2eb0:	20 91 84 50 	lds	r18, 0x5084
    2eb4:	90 91 85 50 	lds	r25, 0x5085
    2eb8:	f0 90 86 50 	lds	r15, 0x5086
    2ebc:	e0 91 61 50 	lds	r30, 0x5061
    2ec0:	f0 91 62 50 	lds	r31, 0x5062
    2ec4:	80 81       	ld	r24, Z
    2ec6:	11 81       	ldd	r17, Z+1	; 0x01
    2ec8:	d2 81       	ldd	r29, Z+2	; 0x02
    2eca:	c3 81       	ldd	r28, Z+3	; 0x03
    2ecc:	b4 81       	ldd	r27, Z+4	; 0x04
    2ece:	a5 81       	ldd	r26, Z+5	; 0x05
    2ed0:	06 81       	ldd	r16, Z+6	; 0x06
    2ed2:	e7 81       	ldd	r30, Z+7	; 0x07
    2ed4:	87 0f       	add	r24, r23
    2ed6:	f1 e0       	ldi	r31, 0x01	; 1
    2ed8:	87 17       	cp	r24, r23
    2eda:	08 f0       	brcs	.+2      	; 0x2ede <calcChecksumFRAM+0x274>
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	16 0f       	add	r17, r22
    2ee0:	71 e0       	ldi	r23, 0x01	; 1
    2ee2:	16 17       	cp	r17, r22
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <calcChecksumFRAM+0x27e>
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	f1 0f       	add	r31, r17
    2eea:	61 e0       	ldi	r22, 0x01	; 1
    2eec:	f1 17       	cp	r31, r17
    2eee:	08 f0       	brcs	.+2      	; 0x2ef2 <calcChecksumFRAM+0x288>
    2ef0:	60 e0       	ldi	r22, 0x00	; 0
    2ef2:	76 2b       	or	r23, r22
    2ef4:	d5 0f       	add	r29, r21
    2ef6:	61 e0       	ldi	r22, 0x01	; 1
    2ef8:	d5 17       	cp	r29, r21
    2efa:	08 f0       	brcs	.+2      	; 0x2efe <calcChecksumFRAM+0x294>
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	7d 0f       	add	r23, r29
    2f00:	51 e0       	ldi	r21, 0x01	; 1
    2f02:	7d 17       	cp	r23, r29
    2f04:	08 f0       	brcs	.+2      	; 0x2f08 <calcChecksumFRAM+0x29e>
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	65 2b       	or	r22, r21
    2f0a:	c4 0f       	add	r28, r20
    2f0c:	51 e0       	ldi	r21, 0x01	; 1
    2f0e:	c4 17       	cp	r28, r20
    2f10:	08 f0       	brcs	.+2      	; 0x2f14 <calcChecksumFRAM+0x2aa>
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	6c 0f       	add	r22, r28
    2f16:	41 e0       	ldi	r20, 0x01	; 1
    2f18:	6c 17       	cp	r22, r28
    2f1a:	08 f0       	brcs	.+2      	; 0x2f1e <calcChecksumFRAM+0x2b4>
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	54 2b       	or	r21, r20
    2f20:	b3 0f       	add	r27, r19
    2f22:	41 e0       	ldi	r20, 0x01	; 1
    2f24:	b3 17       	cp	r27, r19
    2f26:	08 f0       	brcs	.+2      	; 0x2f2a <calcChecksumFRAM+0x2c0>
    2f28:	40 e0       	ldi	r20, 0x00	; 0
    2f2a:	5b 0f       	add	r21, r27
    2f2c:	31 e0       	ldi	r19, 0x01	; 1
    2f2e:	5b 17       	cp	r21, r27
    2f30:	08 f0       	brcs	.+2      	; 0x2f34 <calcChecksumFRAM+0x2ca>
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	43 2b       	or	r20, r19
    2f36:	a2 0f       	add	r26, r18
    2f38:	31 e0       	ldi	r19, 0x01	; 1
    2f3a:	a2 17       	cp	r26, r18
    2f3c:	08 f0       	brcs	.+2      	; 0x2f40 <calcChecksumFRAM+0x2d6>
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a 0f       	add	r20, r26
    2f42:	21 e0       	ldi	r18, 0x01	; 1
    2f44:	4a 17       	cp	r20, r26
    2f46:	08 f0       	brcs	.+2      	; 0x2f4a <calcChecksumFRAM+0x2e0>
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	32 2b       	or	r19, r18
    2f4c:	09 0f       	add	r16, r25
    2f4e:	21 e0       	ldi	r18, 0x01	; 1
    2f50:	09 17       	cp	r16, r25
    2f52:	08 f0       	brcs	.+2      	; 0x2f56 <calcChecksumFRAM+0x2ec>
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 0f       	add	r19, r16
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	30 17       	cp	r19, r16
    2f5c:	08 f0       	brcs	.+2      	; 0x2f60 <calcChecksumFRAM+0x2f6>
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	92 2b       	or	r25, r18
    2f62:	fe 0e       	add	r15, r30
    2f64:	9f 0d       	add	r25, r15
    2f66:	80 93 7f 50 	sts	0x507F, r24
    2f6a:	d4 01       	movw	r26, r8
    2f6c:	6c c0       	rjmp	.+216    	; 0x3046 <calcChecksumFRAM+0x3dc>
			if(k%9 == 8) sumFRAM[2] += *temp64;
    2f6e:	88 30       	cpi	r24, 0x08	; 8
    2f70:	91 05       	cpc	r25, r1
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <calcChecksumFRAM+0x30c>
    2f74:	7d c0       	rjmp	.+250    	; 0x3070 <calcChecksumFRAM+0x406>
    2f76:	70 91 87 50 	lds	r23, 0x5087
    2f7a:	60 91 88 50 	lds	r22, 0x5088
    2f7e:	50 91 89 50 	lds	r21, 0x5089
    2f82:	40 91 8a 50 	lds	r20, 0x508A
    2f86:	30 91 8b 50 	lds	r19, 0x508B
    2f8a:	20 91 8c 50 	lds	r18, 0x508C
    2f8e:	90 91 8d 50 	lds	r25, 0x508D
    2f92:	f0 90 8e 50 	lds	r15, 0x508E
    2f96:	e0 91 61 50 	lds	r30, 0x5061
    2f9a:	f0 91 62 50 	lds	r31, 0x5062
    2f9e:	80 81       	ld	r24, Z
    2fa0:	11 81       	ldd	r17, Z+1	; 0x01
    2fa2:	d2 81       	ldd	r29, Z+2	; 0x02
    2fa4:	c3 81       	ldd	r28, Z+3	; 0x03
    2fa6:	b4 81       	ldd	r27, Z+4	; 0x04
    2fa8:	a5 81       	ldd	r26, Z+5	; 0x05
    2faa:	06 81       	ldd	r16, Z+6	; 0x06
    2fac:	e7 81       	ldd	r30, Z+7	; 0x07
    2fae:	87 0f       	add	r24, r23
    2fb0:	f1 e0       	ldi	r31, 0x01	; 1
    2fb2:	87 17       	cp	r24, r23
    2fb4:	08 f0       	brcs	.+2      	; 0x2fb8 <calcChecksumFRAM+0x34e>
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	16 0f       	add	r17, r22
    2fba:	71 e0       	ldi	r23, 0x01	; 1
    2fbc:	16 17       	cp	r17, r22
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <calcChecksumFRAM+0x358>
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	f1 0f       	add	r31, r17
    2fc4:	61 e0       	ldi	r22, 0x01	; 1
    2fc6:	f1 17       	cp	r31, r17
    2fc8:	08 f0       	brcs	.+2      	; 0x2fcc <calcChecksumFRAM+0x362>
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	76 2b       	or	r23, r22
    2fce:	d5 0f       	add	r29, r21
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	d5 17       	cp	r29, r21
    2fd4:	08 f0       	brcs	.+2      	; 0x2fd8 <calcChecksumFRAM+0x36e>
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	7d 0f       	add	r23, r29
    2fda:	51 e0       	ldi	r21, 0x01	; 1
    2fdc:	7d 17       	cp	r23, r29
    2fde:	08 f0       	brcs	.+2      	; 0x2fe2 <calcChecksumFRAM+0x378>
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	65 2b       	or	r22, r21
    2fe4:	c4 0f       	add	r28, r20
    2fe6:	51 e0       	ldi	r21, 0x01	; 1
    2fe8:	c4 17       	cp	r28, r20
    2fea:	08 f0       	brcs	.+2      	; 0x2fee <calcChecksumFRAM+0x384>
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	6c 0f       	add	r22, r28
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	6c 17       	cp	r22, r28
    2ff4:	08 f0       	brcs	.+2      	; 0x2ff8 <calcChecksumFRAM+0x38e>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	54 2b       	or	r21, r20
    2ffa:	b3 0f       	add	r27, r19
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	b3 17       	cp	r27, r19
    3000:	08 f0       	brcs	.+2      	; 0x3004 <calcChecksumFRAM+0x39a>
    3002:	40 e0       	ldi	r20, 0x00	; 0
    3004:	5b 0f       	add	r21, r27
    3006:	31 e0       	ldi	r19, 0x01	; 1
    3008:	5b 17       	cp	r21, r27
    300a:	08 f0       	brcs	.+2      	; 0x300e <calcChecksumFRAM+0x3a4>
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	43 2b       	or	r20, r19
    3010:	a2 0f       	add	r26, r18
    3012:	31 e0       	ldi	r19, 0x01	; 1
    3014:	a2 17       	cp	r26, r18
    3016:	08 f0       	brcs	.+2      	; 0x301a <calcChecksumFRAM+0x3b0>
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	4a 0f       	add	r20, r26
    301c:	21 e0       	ldi	r18, 0x01	; 1
    301e:	4a 17       	cp	r20, r26
    3020:	08 f0       	brcs	.+2      	; 0x3024 <calcChecksumFRAM+0x3ba>
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	32 2b       	or	r19, r18
    3026:	09 0f       	add	r16, r25
    3028:	21 e0       	ldi	r18, 0x01	; 1
    302a:	09 17       	cp	r16, r25
    302c:	08 f0       	brcs	.+2      	; 0x3030 <calcChecksumFRAM+0x3c6>
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 0f       	add	r19, r16
    3032:	91 e0       	ldi	r25, 0x01	; 1
    3034:	30 17       	cp	r19, r16
    3036:	08 f0       	brcs	.+2      	; 0x303a <calcChecksumFRAM+0x3d0>
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	92 2b       	or	r25, r18
    303c:	fe 0e       	add	r15, r30
    303e:	9f 0d       	add	r25, r15
    3040:	80 93 87 50 	sts	0x5087, r24
    3044:	d3 01       	movw	r26, r6
    3046:	11 96       	adiw	r26, 0x01	; 1
    3048:	fc 93       	st	X, r31
    304a:	11 97       	sbiw	r26, 0x01	; 1
    304c:	12 96       	adiw	r26, 0x02	; 2
    304e:	7c 93       	st	X, r23
    3050:	12 97       	sbiw	r26, 0x02	; 2
    3052:	13 96       	adiw	r26, 0x03	; 3
    3054:	6c 93       	st	X, r22
    3056:	13 97       	sbiw	r26, 0x03	; 3
    3058:	14 96       	adiw	r26, 0x04	; 4
    305a:	5c 93       	st	X, r21
    305c:	14 97       	sbiw	r26, 0x04	; 4
    305e:	15 96       	adiw	r26, 0x05	; 5
    3060:	4c 93       	st	X, r20
    3062:	15 97       	sbiw	r26, 0x05	; 5
    3064:	16 96       	adiw	r26, 0x06	; 6
    3066:	3c 93       	st	X, r19
    3068:	16 97       	sbiw	r26, 0x06	; 6
    306a:	17 96       	adiw	r26, 0x07	; 7
    306c:	9c 93       	st	X, r25
    306e:	17 97       	sbiw	r26, 0x07	; 7
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    3070:	08 94       	sec
    3072:	c1 1c       	adc	r12, r1
    3074:	d1 1c       	adc	r13, r1
    3076:	b1 e7       	ldi	r27, 0x71	; 113
    3078:	cb 16       	cp	r12, r27
    307a:	bc e1       	ldi	r27, 0x1C	; 28
    307c:	db 06       	cpc	r13, r27
    307e:	09 f0       	breq	.+2      	; 0x3082 <calcChecksumFRAM+0x418>
    3080:	63 ce       	rjmp	.-826    	; 0x2d48 <calcChecksumFRAM+0xde>
    3082:	08 94       	sec
    3084:	41 08       	sbc	r4, r1
    3086:	51 08       	sbc	r5, r1

void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
    3088:	41 14       	cp	r4, r1
    308a:	51 04       	cpc	r5, r1
    308c:	09 f0       	breq	.+2      	; 0x3090 <calcChecksumFRAM+0x426>
    308e:	4c ce       	rjmp	.-872    	; 0x2d28 <calcChecksumFRAM+0xbe>
			
		}	
		
	}
	
}
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	1f 91       	pop	r17
    3096:	0f 91       	pop	r16
    3098:	ff 90       	pop	r15
    309a:	ef 90       	pop	r14
    309c:	df 90       	pop	r13
    309e:	cf 90       	pop	r12
    30a0:	bf 90       	pop	r11
    30a2:	af 90       	pop	r10
    30a4:	9f 90       	pop	r9
    30a6:	8f 90       	pop	r8
    30a8:	7f 90       	pop	r7
    30aa:	6f 90       	pop	r6
    30ac:	5f 90       	pop	r5
    30ae:	4f 90       	pop	r4
    30b0:	3f 90       	pop	r3
    30b2:	2f 90       	pop	r2
    30b4:	08 95       	ret

000030b6 <FRAMTest1Channel>:

	ADCPower(FALSE);
	
}

void FRAMTest1Channel(void) {
    30b6:	8f 92       	push	r8
    30b8:	9f 92       	push	r9
    30ba:	af 92       	push	r10
    30bc:	bf 92       	push	r11
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	0f 93       	push	r16

	CO_collectSeismic1Channel(ADC_CH_8_gc, FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
    30c6:	0f 92       	push	r0
    30c8:	0f 92       	push	r0
    30ca:	80 e1       	ldi	r24, 0x10	; 16
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	ed b7       	in	r30, 0x3d	; 61
    30d0:	fe b7       	in	r31, 0x3e	; 62
    30d2:	81 83       	std	Z+1, r24	; 0x01
    30d4:	92 83       	std	Z+2, r25	; 0x02
    30d6:	87 e0       	ldi	r24, 0x07	; 7
    30d8:	68 ec       	ldi	r22, 0xC8	; 200
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	05 e1       	ldi	r16, 0x15	; 21
    30e0:	ee 24       	eor	r14, r14
    30e2:	e3 94       	inc	r14
    30e4:	ad e0       	ldi	r26, 0x0D	; 13
    30e6:	ca 2e       	mov	r12, r26
    30e8:	d1 2c       	mov	r13, r1
    30ea:	be e0       	ldi	r27, 0x0E	; 14
    30ec:	ab 2e       	mov	r10, r27
    30ee:	b1 2c       	mov	r11, r1
    30f0:	3f e0       	ldi	r19, 0x0F	; 15
    30f2:	83 2e       	mov	r8, r19
    30f4:	91 2c       	mov	r9, r1
    30f6:	0e 94 32 12 	call	0x2464	; 0x2464 <CO_collectSeismic1Channel>
	GAIN_1_gc, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3104:	8f ec       	ldi	r24, 0xCF	; 207
    3106:	97 e0       	ldi	r25, 0x07	; 7
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <FRAMTest1Channel+0x52>
    310c:	00 c0       	rjmp	.+0      	; 0x310e <FRAMTest1Channel+0x58>
    310e:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    3110:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <calcChecksumFRAM>

	ADCPower(FALSE);
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>

}
    311a:	0f 91       	pop	r16
    311c:	ef 90       	pop	r14
    311e:	df 90       	pop	r13
    3120:	cf 90       	pop	r12
    3122:	bf 90       	pop	r11
    3124:	af 90       	pop	r10
    3126:	9f 90       	pop	r9
    3128:	8f 90       	pop	r8
    312a:	08 95       	ret

0000312c <FRAMTest3Channel>:
	SPICS(FALSE);
	SPIDisable();

}

void FRAMTest3Channel(void) {
    312c:	8f 92       	push	r8
    312e:	9f 92       	push	r9
    3130:	af 92       	push	r10
    3132:	bf 92       	push	r11
    3134:	cf 92       	push	r12
    3136:	df 92       	push	r13
    3138:	ef 92       	push	r14
    313a:	ff 92       	push	r15
    313c:	0f 93       	push	r16
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	00 d0       	rcall	.+0      	; 0x3144 <FRAMTest3Channel+0x18>
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
	uint8_t gains[3] = { GAIN_1_gc, GAIN_1_gc, GAIN_1_gc };
    3148:	19 82       	std	Y+1, r1	; 0x01
    314a:	1a 82       	std	Y+2, r1	; 0x02
    314c:	1b 82       	std	Y+3, r1	; 0x03
			
	CO_collectSeismic3Channel(FILTER_CH_2AND6_bm | FILTER_CH_3AND7_bm |
    314e:	8e ec       	ldi	r24, 0xCE	; 206
    3150:	be 01       	movw	r22, r28
    3152:	6f 5f       	subi	r22, 0xFF	; 255
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	40 e0       	ldi	r20, 0x00	; 0
    3158:	25 e1       	ldi	r18, 0x15	; 21
    315a:	01 e0       	ldi	r16, 0x01	; 1
    315c:	5d e0       	ldi	r21, 0x0D	; 13
    315e:	e5 2e       	mov	r14, r21
    3160:	f1 2c       	mov	r15, r1
    3162:	ee e0       	ldi	r30, 0x0E	; 14
    3164:	ce 2e       	mov	r12, r30
    3166:	d1 2c       	mov	r13, r1
    3168:	ff e0       	ldi	r31, 0x0F	; 15
    316a:	af 2e       	mov	r10, r31
    316c:	b1 2c       	mov	r11, r1
    316e:	a0 e1       	ldi	r26, 0x10	; 16
    3170:	8a 2e       	mov	r8, r26
    3172:	91 2c       	mov	r9, r1
    3174:	0e 94 63 11 	call	0x22c6	; 0x22c6 <CO_collectSeismic3Channel>
		FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
		gains, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
    317e:	8f ec       	ldi	r24, 0xCF	; 207
    3180:	97 e0       	ldi	r25, 0x07	; 7
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <FRAMTest3Channel+0x56>
    3186:	00 c0       	rjmp	.+0      	; 0x3188 <FRAMTest3Channel+0x5c>
    3188:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    318a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <calcChecksumFRAM>

	ADCPower(FALSE);
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	
}
    3194:	23 96       	adiw	r28, 0x03	; 3
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	df 90       	pop	r13
    31a6:	cf 90       	pop	r12
    31a8:	bf 90       	pop	r11
    31aa:	af 90       	pop	r10
    31ac:	9f 90       	pop	r9
    31ae:	8f 90       	pop	r8
    31b0:	08 95       	ret

000031b2 <FRAMWriteKnowns>:

	ADCPower(FALSE);

}

void FRAMWriteKnowns() {
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
	FRAMAddress = FR_BASEADD;
    31ba:	10 92 5e 40 	sts	0x405E, r1
    31be:	10 92 5f 40 	sts	0x405F, r1
	sampleCount = 0;
    31c2:	10 92 70 50 	sts	0x5070, r1
    31c6:	10 92 71 50 	sts	0x5071, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    31ca:	10 92 be 21 	sts	0x21BE, r1
    31ce:	10 92 bd 21 	sts	0x21BD, r1
    31d2:	10 92 bc 21 	sts	0x21BC, r1
	
	ADCPower(TRUE);
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	SPIInit(SPI_MODE_1_gc);
    31dc:	84 e0       	ldi	r24, 0x04	; 4
    31de:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    31e2:	80 ed       	ldi	r24, 0xD0	; 208
    31e4:	80 93 c0 08 	sts	0x08C0, r24
	SPIBuffer[0] = 0x0D;
    31e8:	8d e0       	ldi	r24, 0x0D	; 13
    31ea:	80 93 63 50 	sts	0x5063, r24
	SPIBuffer[1] = 0xF3;
    31ee:	83 ef       	ldi	r24, 0xF3	; 243
    31f0:	80 93 64 50 	sts	0x5064, r24
	SPIBuffer[2] = 0x57;
    31f4:	87 e5       	ldi	r24, 0x57	; 87
    31f6:	80 93 65 50 	sts	0x5065, r24
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    31fa:	00 e4       	ldi	r16, 0x40	; 64
    31fc:	16 e0       	ldi	r17, 0x06	; 6
    31fe:	30 e1       	ldi	r19, 0x10	; 16
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    3200:	a0 e2       	ldi	r26, 0x20	; 32
    3202:	b6 e0       	ldi	r27, 0x06	; 6
    3204:	28 e0       	ldi	r18, 0x08	; 8
		nop();
		SPIC.DATA = FR_WREN;
    3206:	60 ec       	ldi	r22, 0xC0	; 192
    3208:	78 e0       	ldi	r23, 0x08	; 8
    320a:	56 e0       	ldi	r21, 0x06	; 6
		while(!(SPIC.STATUS & SPI_IF_bm));
    320c:	e0 ec       	ldi	r30, 0xC0	; 192
    320e:	f8 e0       	ldi	r31, 0x08	; 8
		SPIBuffer[12] = SPIC.DATA;
		PORTB.OUTSET = PIN3_bm;  // latch opcode
		nop(); // time for CS_FRAM to accept high signal
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
		nop();
		SPIC.DATA = FR_WRITE;
    3210:	42 e0       	ldi	r20, 0x02	; 2
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    3212:	84 c0       	rjmp	.+264    	; 0x331c <FRAMWriteKnowns+0x16a>
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    3214:	e8 01       	movw	r28, r16
    3216:	3e 83       	std	Y+6, r19	; 0x06
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    3218:	16 96       	adiw	r26, 0x06	; 6
    321a:	2c 93       	st	X, r18
    321c:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    321e:	00 00       	nop
		SPIC.DATA = FR_WREN;
    3220:	eb 01       	movw	r28, r22
    3222:	5b 83       	std	Y+3, r21	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    3224:	80 91 c2 08 	lds	r24, 0x08C2
    3228:	87 ff       	sbrs	r24, 7
    322a:	fc cf       	rjmp	.-8      	; 0x3224 <FRAMWriteKnowns+0x72>
		SPIBuffer[12] = SPIC.DATA;
    322c:	80 91 c3 08 	lds	r24, 0x08C3
    3230:	80 93 6f 50 	sts	0x506F, r24
		PORTB.OUTSET = PIN3_bm;  // latch opcode
    3234:	15 96       	adiw	r26, 0x05	; 5
    3236:	2c 93       	st	X, r18
    3238:	15 97       	sbiw	r26, 0x05	; 5
		nop(); // time for CS_FRAM to accept high signal
    323a:	00 00       	nop
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    323c:	16 96       	adiw	r26, 0x06	; 6
    323e:	2c 93       	st	X, r18
    3240:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    3242:	00 00       	nop
		SPIC.DATA = FR_WRITE;
    3244:	43 83       	std	Z+3, r20	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    3246:	80 91 c2 08 	lds	r24, 0x08C2
    324a:	87 ff       	sbrs	r24, 7
    324c:	fc cf       	rjmp	.-8      	; 0x3246 <FRAMWriteKnowns+0x94>
		SPIBuffer[12] = SPIC.DATA;
    324e:	80 91 c3 08 	lds	r24, 0x08C3
    3252:	80 93 6f 50 	sts	0x506F, r24
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    3256:	80 91 5f 40 	lds	r24, 0x405F
    325a:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    325c:	80 91 c2 08 	lds	r24, 0x08C2
    3260:	87 ff       	sbrs	r24, 7
    3262:	fc cf       	rjmp	.-8      	; 0x325c <FRAMWriteKnowns+0xaa>
		SPIBuffer[12] = SPIC.DATA;
    3264:	80 91 c3 08 	lds	r24, 0x08C3
    3268:	80 93 6f 50 	sts	0x506F, r24
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
    326c:	80 91 5e 40 	lds	r24, 0x405E
    3270:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    3272:	80 91 c2 08 	lds	r24, 0x08C2
    3276:	87 ff       	sbrs	r24, 7
    3278:	fc cf       	rjmp	.-8      	; 0x3272 <FRAMWriteKnowns+0xc0>
		SPIBuffer[12] = SPIC.DATA;
    327a:	80 91 c3 08 	lds	r24, 0x08C3
    327e:	80 93 6f 50 	sts	0x506F, r24
		SPIC.DATA = SPIBuffer[0];
    3282:	80 91 63 50 	lds	r24, 0x5063
    3286:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    3288:	80 91 c2 08 	lds	r24, 0x08C2
    328c:	87 ff       	sbrs	r24, 7
    328e:	fc cf       	rjmp	.-8      	; 0x3288 <FRAMWriteKnowns+0xd6>
		SPIBuffer[12] = SPIC.DATA;
    3290:	80 91 c3 08 	lds	r24, 0x08C3
    3294:	80 93 6f 50 	sts	0x506F, r24
		SPIC.DATA = SPIBuffer[1];
    3298:	80 91 64 50 	lds	r24, 0x5064
    329c:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    329e:	80 91 c2 08 	lds	r24, 0x08C2
    32a2:	87 ff       	sbrs	r24, 7
    32a4:	fc cf       	rjmp	.-8      	; 0x329e <FRAMWriteKnowns+0xec>
		SPIBuffer[12] = SPIC.DATA;
    32a6:	80 91 c3 08 	lds	r24, 0x08C3
    32aa:	80 93 6f 50 	sts	0x506F, r24
		SPIC.DATA = SPIBuffer[2];
    32ae:	80 91 65 50 	lds	r24, 0x5065
    32b2:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    32b4:	80 91 c2 08 	lds	r24, 0x08C2
    32b8:	87 ff       	sbrs	r24, 7
    32ba:	fc cf       	rjmp	.-8      	; 0x32b4 <FRAMWriteKnowns+0x102>
		SPIBuffer[12] = SPIC.DATA;
    32bc:	80 91 c3 08 	lds	r24, 0x08C3
    32c0:	80 93 6f 50 	sts	0x506F, r24
			
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    32c4:	15 96       	adiw	r26, 0x05	; 5
    32c6:	2c 93       	st	X, r18
    32c8:	15 97       	sbiw	r26, 0x05	; 5
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    32ca:	e8 01       	movw	r28, r16
    32cc:	3d 83       	std	Y+5, r19	; 0x05
		
		FRAMAddress +=3;
    32ce:	80 91 5e 40 	lds	r24, 0x405E
    32d2:	90 91 5f 40 	lds	r25, 0x405F
    32d6:	03 96       	adiw	r24, 0x03	; 3
    32d8:	80 93 5e 40 	sts	0x405E, r24
    32dc:	90 93 5f 40 	sts	0x405F, r25
		checksumADC[0] += SPIBuffer[0];
    32e0:	90 91 bc 21 	lds	r25, 0x21BC
    32e4:	80 91 63 50 	lds	r24, 0x5063
    32e8:	89 0f       	add	r24, r25
    32ea:	80 93 bc 21 	sts	0x21BC, r24
		checksumADC[1] += SPIBuffer[1];
    32ee:	90 91 bd 21 	lds	r25, 0x21BD
    32f2:	80 91 64 50 	lds	r24, 0x5064
    32f6:	89 0f       	add	r24, r25
    32f8:	80 93 bd 21 	sts	0x21BD, r24
		checksumADC[2] += SPIBuffer[2];
    32fc:	90 91 be 21 	lds	r25, 0x21BE
    3300:	80 91 65 50 	lds	r24, 0x5065
    3304:	89 0f       	add	r24, r25
    3306:	80 93 be 21 	sts	0x21BE, r24
		
		sampleCount++;
    330a:	80 91 70 50 	lds	r24, 0x5070
    330e:	90 91 71 50 	lds	r25, 0x5071
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	80 93 70 50 	sts	0x5070, r24
    3318:	90 93 71 50 	sts	0x5071, r25
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    331c:	80 91 70 50 	lds	r24, 0x5070
    3320:	90 91 71 50 	lds	r25, 0x5071
    3324:	d5 e5       	ldi	r29, 0x55	; 85
    3326:	83 35       	cpi	r24, 0x53	; 83
    3328:	9d 07       	cpc	r25, r29
    332a:	08 f4       	brcc	.+2      	; 0x332e <FRAMWriteKnowns+0x17c>
    332c:	73 cf       	rjmp	.-282    	; 0x3214 <FRAMWriteKnowns+0x62>
		checksumADC[2] += SPIBuffer[2];
		
		sampleCount++;
	}
	
	SPIDisable();
    332e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
	ADCPower(FALSE);
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
}
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	1f 91       	pop	r17
    333e:	0f 91       	pop	r16
    3340:	08 95       	ret

00003342 <FRAMWriteKnownsCheck>:
	
}


void FRAMWriteKnownsCheck() {
	FRAMWriteKnowns();
    3342:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <FRAMWriteKnowns>
	ADCPower(TRUE);
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
    334c:	8f ec       	ldi	r24, 0xCF	; 207
    334e:	97 e0       	ldi	r25, 0x07	; 7
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <FRAMWriteKnownsCheck+0xe>
    3354:	00 c0       	rjmp	.+0      	; 0x3356 <FRAMWriteKnownsCheck+0x14>
    3356:	00 00       	nop

	_delay_us(250);
	calcChecksumFRAM();
    3358:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <calcChecksumFRAM>

	ADCPower(FALSE);
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>

}
    3362:	08 95       	ret

00003364 <SDHC_CS>:
void SDHC_write_block(uint8_t *buffer, uint16_t address, uint16_t numBlocks);
void SDHC_read_register(uint8_t *buffer, uint8_t cmd);

void SDHC_CS(uint8_t enable) {
		
}
    3364:	08 95       	ret

00003366 <SPI_write>:


//the following command writes/reads a byte via spi
uint8_t SPI_write(uint8_t byteToSend){
	uint8_t data;
	SPIC.DATA = byteToSend;
    3366:	e0 ec       	ldi	r30, 0xC0	; 192
    3368:	f8 e0       	ldi	r31, 0x08	; 8
    336a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    336c:	80 91 c2 08 	lds	r24, 0x08C2
    3370:	87 ff       	sbrs	r24, 7
    3372:	fc cf       	rjmp	.-8      	; 0x336c <SPI_write+0x6>
	data = SPIC.DATA; //read SPI data register to reset status flag
    3374:	80 91 c3 08 	lds	r24, 0x08C3
	return data;
}
    3378:	08 95       	ret

0000337a <SD_command>:
//the following command writes a command to the sd card and returns a response (if any) or 0xFF if no response
uint8_t SD_command(uint8_t cmd, uint32_t arg, uint8_t crc, int read) {
    337a:	af 92       	push	r10
    337c:	bf 92       	push	r11
    337e:	cf 92       	push	r12
    3380:	df 92       	push	r13
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	25 97       	sbiw	r28, 0x05	; 5
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	78 01       	movw	r14, r16
	
	SPI_write(SDHC_COMMAND_START | cmd);
    339a:	80 64       	ori	r24, 0x40	; 64
    339c:	2d 83       	std	Y+5, r18	; 0x05
    339e:	4c 83       	std	Y+4, r20	; 0x04
    33a0:	5b 83       	std	Y+3, r21	; 0x03
    33a2:	6a 83       	std	Y+2, r22	; 0x02
    33a4:	79 83       	std	Y+1, r23	; 0x01
    33a6:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
	SPI_write(arg>>24 & LSBYTE_MASK);
    33aa:	79 81       	ldd	r23, Y+1	; 0x01
    33ac:	87 2f       	mov	r24, r23
    33ae:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
	SPI_write(arg>>16 & LSBYTE_MASK);
    33b2:	6a 81       	ldd	r22, Y+2	; 0x02
    33b4:	86 2f       	mov	r24, r22
    33b6:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
	SPI_write(arg>>8 & LSBYTE_MASK);
    33ba:	5b 81       	ldd	r21, Y+3	; 0x03
    33bc:	85 2f       	mov	r24, r21
    33be:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
	SPI_write(arg & LSBYTE_MASK);
    33c2:	4c 81       	ldd	r20, Y+4	; 0x04
    33c4:	84 2f       	mov	r24, r20
    33c6:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
	SPI_write(crc);
    33ca:	2d 81       	ldd	r18, Y+5	; 0x05
    33cc:	82 2f       	mov	r24, r18
    33ce:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
	
	for(int i=0; i<read; i++){
    33d2:	00 e0       	ldi	r16, 0x00	; 0
    33d4:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(SDHC_DUMMY_BYTE);
    33d6:	bd e0       	ldi	r27, 0x0D	; 13
    33d8:	cb 2e       	mov	r12, r27
    33da:	d1 2c       	mov	r13, r1
	SPI_write(arg>>16 & LSBYTE_MASK);
	SPI_write(arg>>8 & LSBYTE_MASK);
	SPI_write(arg & LSBYTE_MASK);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    33dc:	18 c0       	rjmp	.+48     	; 0x340e <SD_command+0x94>
		Buffer[i%13] = SPI_write(SDHC_DUMMY_BYTE);
    33de:	c8 01       	movw	r24, r16
    33e0:	b6 01       	movw	r22, r12
    33e2:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
    33e6:	5c 01       	movw	r10, r24
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    33ee:	f5 01       	movw	r30, r10
    33f0:	e1 57       	subi	r30, 0x71	; 113
    33f2:	ff 4a       	sbci	r31, 0xAF	; 175
    33f4:	80 83       	st	Z, r24
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
    33f6:	80 81       	ld	r24, Z
    33f8:	8f 3f       	cpi	r24, 0xFF	; 255
    33fa:	39 f0       	breq	.+14     	; 0x340a <SD_command+0x90>
			 Buffer[1] = Buffer[i%13];
    33fc:	80 81       	ld	r24, Z
    33fe:	ef e8       	ldi	r30, 0x8F	; 143
    3400:	f0 e5       	ldi	r31, 0x50	; 80
    3402:	81 83       	std	Z+1, r24	; 0x01
			 return Buffer[1];
    3404:	80 91 90 50 	lds	r24, 0x5090
    3408:	06 c0       	rjmp	.+12     	; 0x3416 <SD_command+0x9c>
	SPI_write(arg>>16 & LSBYTE_MASK);
	SPI_write(arg>>8 & LSBYTE_MASK);
	SPI_write(arg & LSBYTE_MASK);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    340a:	0f 5f       	subi	r16, 0xFF	; 255
    340c:	1f 4f       	sbci	r17, 0xFF	; 255
    340e:	0e 15       	cp	r16, r14
    3410:	1f 05       	cpc	r17, r15
    3412:	2c f3       	brlt	.-54     	; 0x33de <SD_command+0x64>
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
			 Buffer[1] = Buffer[i%13];
			 return Buffer[1];
		}			
	}
	return SDHC_DUMMY_BYTE;	
    3414:	8f ef       	ldi	r24, 0xFF	; 255
}
    3416:	25 96       	adiw	r28, 0x05	; 5
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	1f 91       	pop	r17
    3422:	0f 91       	pop	r16
    3424:	ff 90       	pop	r15
    3426:	ef 90       	pop	r14
    3428:	df 90       	pop	r13
    342a:	cf 90       	pop	r12
    342c:	bf 90       	pop	r11
    342e:	af 90       	pop	r10
    3430:	08 95       	ret

00003432 <SD_write_block>:
//the following command writes one sector to the sdhc card
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
    3432:	6f 92       	push	r6
    3434:	7f 92       	push	r7
    3436:	8f 92       	push	r8
    3438:	9f 92       	push	r9
    343a:	af 92       	push	r10
    343c:	bf 92       	push	r11
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	6b 01       	movw	r12, r22
    3450:	7c 01       	movw	r14, r24
    3452:	94 2e       	mov	r9, r20
    3454:	85 2e       	mov	r8, r21
    3456:	39 01       	movw	r6, r18
	SPIInit(SPI_MODE_0_gc);
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
    3464:	a1 2c       	mov	r10, r1
    3466:	12 e0       	ldi	r17, 0x02	; 2
    3468:	b1 2e       	mov	r11, r17
    346a:	a6 18       	sub	r10, r6
    346c:	b7 08       	sbc	r11, r7
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	a8 16       	cp	r10, r24
    3472:	82 e0       	ldi	r24, 0x02	; 2
    3474:	b8 06       	cpc	r11, r24
    3476:	11 f4       	brne	.+4      	; 0x347c <SD_write_block+0x4a>
    3478:	aa 24       	eor	r10, r10
    347a:	bb 24       	eor	r11, r11
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    347c:	cb e0       	ldi	r28, 0x0B	; 11
    347e:	d0 e0       	ldi	r29, 0x00	; 0
    3480:	03 c0       	rjmp	.+6      	; 0x3488 <SD_write_block+0x56>
    3482:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    3484:	09 f4       	brne	.+2      	; 0x3488 <SD_write_block+0x56>
    3486:	ff cf       	rjmp	.-2      	; 0x3486 <SD_write_block+0x54>
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    3488:	88 e1       	ldi	r24, 0x18	; 24
    348a:	b7 01       	movw	r22, r14
    348c:	a6 01       	movw	r20, r12
    348e:	2f ef       	ldi	r18, 0xFF	; 255
    3490:	08 e0       	ldi	r16, 0x08	; 8
    3492:	10 e0       	ldi	r17, 0x00	; 0
    3494:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
    3498:	88 23       	and	r24, r24
    349a:	99 f7       	brne	.-26     	; 0x3482 <SD_write_block+0x50>
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    34a2:	80 93 8f 50 	sts	0x508F, r24
	SPI_write(SDHC_DATA_TOKEN);	//send data token
    34a6:	8e ef       	ldi	r24, 0xFE	; 254
    34a8:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    34ac:	c9 2c       	mov	r12, r9
    34ae:	d8 2c       	mov	r13, r8
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    34b0:	00 e0       	ldi	r16, 0x00	; 0
    34b2:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(data[i]);
    34b4:	dd e0       	ldi	r29, 0x0D	; 13
    34b6:	8d 2e       	mov	r8, r29
    34b8:	91 2c       	mov	r9, r1
			while(1);
		}
	}
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
	SPI_write(SDHC_DATA_TOKEN);	//send data token
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    34ba:	10 c0       	rjmp	.+32     	; 0x34dc <SD_write_block+0xaa>
		Buffer[i%13] = SPI_write(data[i]);
    34bc:	c8 01       	movw	r24, r16
    34be:	b4 01       	movw	r22, r8
    34c0:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
    34c4:	ec 01       	movw	r28, r24
    34c6:	f6 01       	movw	r30, r12
    34c8:	81 91       	ld	r24, Z+
    34ca:	6f 01       	movw	r12, r30
    34cc:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    34d0:	fe 01       	movw	r30, r28
    34d2:	e1 57       	subi	r30, 0x71	; 113
    34d4:	ff 4a       	sbci	r31, 0xAF	; 175
    34d6:	80 83       	st	Z, r24
			while(1);
		}
	}
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
	SPI_write(SDHC_DATA_TOKEN);	//send data token
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    34d8:	0f 5f       	subi	r16, 0xFF	; 255
    34da:	1f 4f       	sbci	r17, 0xFF	; 255
    34dc:	06 15       	cp	r16, r6
    34de:	17 05       	cpc	r17, r7
    34e0:	6c f3       	brlt	.-38     	; 0x34bc <SD_write_block+0x8a>
    34e2:	00 e0       	ldi	r16, 0x00	; 0
    34e4:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
	Buffer[i%13] = SPI_write(FILLER_BYTE);
    34e6:	cd e0       	ldi	r28, 0x0D	; 13
    34e8:	cc 2e       	mov	r12, r28
    34ea:	d1 2c       	mov	r13, r1
    34ec:	0d c0       	rjmp	.+26     	; 0x3508 <SD_write_block+0xd6>
    34ee:	c8 01       	movw	r24, r16
    34f0:	b6 01       	movw	r22, r12
    34f2:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
    34f6:	ec 01       	movw	r28, r24
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    34fe:	c1 57       	subi	r28, 0x71	; 113
    3500:	df 4a       	sbci	r29, 0xAF	; 175
    3502:	88 83       	st	Y, r24
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
	SPI_write(SDHC_DATA_TOKEN);	//send data token
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
		Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    3504:	0f 5f       	subi	r16, 0xFF	; 255
    3506:	1f 4f       	sbci	r17, 0xFF	; 255
    3508:	0a 15       	cp	r16, r10
    350a:	1b 05       	cpc	r17, r11
    350c:	84 f3       	brlt	.-32     	; 0x34ee <SD_write_block+0xbc>
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
    350e:	8f ef       	ldi	r24, 0xFF	; 255
    3510:	80 93 8f 50 	sts	0x508F, r24
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    3514:	c0 e0       	ldi	r28, 0x00	; 0
    3516:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
    3518:	8f ef       	ldi	r24, 0xFF	; 255
    351a:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    351e:	80 93 8f 50 	sts	0x508F, r24
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    3522:	21 96       	adiw	r28, 0x01	; 1
    3524:	c1 30       	cpi	r28, 0x01	; 1
    3526:	d1 05       	cpc	r29, r1
    3528:	b9 f3       	breq	.-18     	; 0x3518 <SD_write_block+0xe6>
    352a:	80 91 8f 50 	lds	r24, 0x508F
    352e:	8f 3f       	cpi	r24, 0xFF	; 255
    3530:	99 f3       	breq	.-26     	; 0x3518 <SD_write_block+0xe6>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
	}
	if ((Buffer[0] & SDHC_RESPONSE_STATUS_MASK) == 0x02){
    3532:	80 91 8f 50 	lds	r24, 0x508F
		//data was written successfully
	}
	while(Buffer[0] != SDHC_DUMMY_BYTE) Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to finish internal processes
    3536:	05 c0       	rjmp	.+10     	; 0x3542 <SD_write_block+0x110>
    3538:	8f ef       	ldi	r24, 0xFF	; 255
    353a:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    353e:	80 93 8f 50 	sts	0x508F, r24
    3542:	80 91 8f 50 	lds	r24, 0x508F
    3546:	8f 3f       	cpi	r24, 0xFF	; 255
    3548:	b9 f7       	brne	.-18     	; 0x3538 <SD_write_block+0x106>
	SPICS(FALSE);
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();	
    3550:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
}
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	ff 90       	pop	r15
    355e:	ef 90       	pop	r14
    3560:	df 90       	pop	r13
    3562:	cf 90       	pop	r12
    3564:	bf 90       	pop	r11
    3566:	af 90       	pop	r10
    3568:	9f 90       	pop	r9
    356a:	8f 90       	pop	r8
    356c:	7f 90       	pop	r7
    356e:	6f 90       	pop	r6
    3570:	08 95       	ret

00003572 <SD_read_block>:

//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
    3572:	af 92       	push	r10
    3574:	bf 92       	push	r11
    3576:	cf 92       	push	r12
    3578:	df 92       	push	r13
    357a:	ef 92       	push	r14
    357c:	ff 92       	push	r15
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	6b 01       	movw	r12, r22
    3588:	7c 01       	movw	r14, r24
    358a:	b4 2e       	mov	r11, r20
    358c:	a5 2e       	mov	r10, r21
	SPIInit(SPI_MODE_0_gc);
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    359a:	cb e0       	ldi	r28, 0x0B	; 11
    359c:	d0 e0       	ldi	r29, 0x00	; 0
    359e:	03 c0       	rjmp	.+6      	; 0x35a6 <SD_read_block+0x34>
    35a0:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <SD_read_block+0x34>
    35a4:	ff cf       	rjmp	.-2      	; 0x35a4 <SD_read_block+0x32>
//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++) {	//send command to read data
    35a6:	81 e1       	ldi	r24, 0x11	; 17
    35a8:	b7 01       	movw	r22, r14
    35aa:	a6 01       	movw	r20, r12
    35ac:	2f ef       	ldi	r18, 0xFF	; 255
    35ae:	08 e0       	ldi	r16, 0x08	; 8
    35b0:	10 e0       	ldi	r17, 0x00	; 0
    35b2:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
    35b6:	88 23       	and	r24, r24
    35b8:	99 f7       	brne	.-26     	; 0x35a0 <SD_read_block+0x2e>
    35ba:	05 c0       	rjmp	.+10     	; 0x35c6 <SD_read_block+0x54>
			//there was no response to the command
			while(1);
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
    35bc:	8f ef       	ldi	r24, 0xFF	; 255
    35be:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    35c2:	80 93 8f 50 	sts	0x508F, r24
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
    35c6:	80 91 8f 50 	lds	r24, 0x508F
    35ca:	8e 3f       	cpi	r24, 0xFE	; 254
    35cc:	b9 f7       	brne	.-18     	; 0x35bc <SD_read_block+0x4a>
    35ce:	0b 2d       	mov	r16, r11
    35d0:	1a 2d       	mov	r17, r10
    35d2:	c0 e0       	ldi	r28, 0x00	; 0
    35d4:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    35d6:	8f ef       	ldi	r24, 0xFF	; 255
    35d8:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    35dc:	f8 01       	movw	r30, r16
    35de:	81 93       	st	Z+, r24
    35e0:	8f 01       	movw	r16, r30
		}
	}		
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    35e2:	21 96       	adiw	r28, 0x01	; 1
    35e4:	f2 e0       	ldi	r31, 0x02	; 2
    35e6:	c0 30       	cpi	r28, 0x00	; 0
    35e8:	df 07       	cpc	r29, r31
    35ea:	a9 f7       	brne	.-22     	; 0x35d6 <SD_read_block+0x64>
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
    35ec:	10 92 9b 50 	sts	0x509B, r1
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    35f0:	05 c0       	rjmp	.+10     	; 0x35fc <SD_read_block+0x8a>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
    35f2:	8f ef       	ldi	r24, 0xFF	; 255
    35f4:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    35f8:	80 93 9b 50 	sts	0x509B, r24
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    35fc:	80 91 9b 50 	lds	r24, 0x509B
    3600:	8f 3f       	cpi	r24, 0xFF	; 255
    3602:	b9 f7       	brne	.-18     	; 0x35f2 <SD_read_block+0x80>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
	}

	SPICS(FALSE);
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    360a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
}
    360e:	df 91       	pop	r29
    3610:	cf 91       	pop	r28
    3612:	1f 91       	pop	r17
    3614:	0f 91       	pop	r16
    3616:	ff 90       	pop	r15
    3618:	ef 90       	pop	r14
    361a:	df 90       	pop	r13
    361c:	cf 90       	pop	r12
    361e:	bf 90       	pop	r11
    3620:	af 90       	pop	r10
    3622:	08 95       	ret

00003624 <checkMote>:
	
void checkMote(){
	ADCPower(TRUE);
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	Ext1Power(TRUE);
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	0e 94 b0 08 	call	0x1160	; 0x1160 <Ext1Power>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3630:	8f ef       	ldi	r24, 0xFF	; 255
    3632:	93 ec       	ldi	r25, 0xC3	; 195
    3634:	a9 e0       	ldi	r26, 0x09	; 9
    3636:	81 50       	subi	r24, 0x01	; 1
    3638:	90 40       	sbci	r25, 0x00	; 0
    363a:	a0 40       	sbci	r26, 0x00	; 0
    363c:	e1 f7       	brne	.-8      	; 0x3636 <checkMote+0x12>
    363e:	00 c0       	rjmp	.+0      	; 0x3640 <checkMote+0x1c>
    3640:	00 00       	nop
	_delay_ms(100);
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS	
    3642:	88 e0       	ldi	r24, 0x08	; 8
    3644:	60 e0       	ldi	r22, 0x00	; 0
    3646:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <PortEx_DIRSET>
	while(1){
		PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    364a:	88 e0       	ldi	r24, 0x08	; 8
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	0e 94 26 0a 	call	0x144c	; 0x144c <PortEx_OUTSET>
    3652:	8a ea       	ldi	r24, 0xAA	; 170
    3654:	96 ee       	ldi	r25, 0xE6	; 230
    3656:	a6 e9       	ldi	r26, 0x96	; 150
    3658:	b1 e0       	ldi	r27, 0x01	; 1
    365a:	81 50       	subi	r24, 0x01	; 1
    365c:	90 40       	sbci	r25, 0x00	; 0
    365e:	a0 40       	sbci	r26, 0x00	; 0
    3660:	b0 40       	sbci	r27, 0x00	; 0
    3662:	d9 f7       	brne	.-10     	; 0x365a <checkMote+0x36>
    3664:	00 00       	nop
		_delay_ms(5000);
		PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    3666:	88 e0       	ldi	r24, 0x08	; 8
    3668:	60 e0       	ldi	r22, 0x00	; 0
    366a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <PortEx_OUTCLR>
    366e:	8a ea       	ldi	r24, 0xAA	; 170
    3670:	96 ee       	ldi	r25, 0xE6	; 230
    3672:	a6 e9       	ldi	r26, 0x96	; 150
    3674:	b1 e0       	ldi	r27, 0x01	; 1
    3676:	81 50       	subi	r24, 0x01	; 1
    3678:	90 40       	sbci	r25, 0x00	; 0
    367a:	a0 40       	sbci	r26, 0x00	; 0
    367c:	b0 40       	sbci	r27, 0x00	; 0
    367e:	d9 f7       	brne	.-10     	; 0x3676 <checkMote+0x52>
    3680:	00 00       	nop
    3682:	e3 cf       	rjmp	.-58     	; 0x364a <checkMote+0x26>

00003684 <SD_init>:
	}
}

//the following function turns on power to the sd card and port expander and initializes the sdhc card in spi mode
//returns 0 if successful or 1 if not
uint8_t SD_init(void){
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
	ADCPower(TRUE);				//power up portEX
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	Ext1Power(TRUE);			//power up SD card
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	0e 94 b0 08 	call	0x1160	; 0x1160 <Ext1Power>
    369a:	8f ef       	ldi	r24, 0xFF	; 255
    369c:	93 ec       	ldi	r25, 0xC3	; 195
    369e:	a9 e0       	ldi	r26, 0x09	; 9
    36a0:	81 50       	subi	r24, 0x01	; 1
    36a2:	90 40       	sbci	r25, 0x00	; 0
    36a4:	a0 40       	sbci	r26, 0x00	; 0
    36a6:	e1 f7       	brne	.-8      	; 0x36a0 <SD_init+0x1c>
    36a8:	00 c0       	rjmp	.+0      	; 0x36aa <SD_init+0x26>
    36aa:	00 00       	nop
	_delay_ms(100);				//wait for bootup
	uint8_t errorCode = 0;

	
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS	
    36ac:	88 e0       	ldi	r24, 0x08	; 8
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    36b4:	88 e0       	ldi	r24, 0x08	; 8
    36b6:	60 e0       	ldi	r22, 0x00	; 0
    36b8:	0e 94 26 0a 	call	0x144c	; 0x144c <PortEx_OUTSET>

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	63 e0       	ldi	r22, 0x03	; 3
    36c0:	0e 94 46 09 	call	0x128c	; 0x128c <SPIInit2>
	SPICS(TRUE);
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
    36ca:	8a e0       	ldi	r24, 0x0A	; 10
    36cc:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i=0; i<10; i++){ // idle for 10 bytes / 80 clocks
		SPIC.DATA=SDHC_DUMMY_BYTE;
    36ce:	e0 ec       	ldi	r30, 0xC0	; 192
    36d0:	f8 e0       	ldi	r31, 0x08	; 8
    36d2:	2f ef       	ldi	r18, 0xFF	; 255
    36d4:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    36d6:	30 91 c2 08 	lds	r19, 0x08C2
    36da:	37 ff       	sbrs	r19, 7
    36dc:	fc cf       	rjmp	.-8      	; 0x36d6 <SD_init+0x52>
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
    36de:	30 91 c3 08 	lds	r19, 0x08C3
    36e2:	30 93 9b 50 	sts	0x509B, r19
    36e6:	01 97       	sbiw	r24, 0x01	; 1
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	for(int i=0; i<10; i++){ // idle for 10 bytes / 80 clocks
    36e8:	a9 f7       	brne	.-22     	; 0x36d4 <SD_init+0x50>
		SPIC.DATA=SDHC_DUMMY_BYTE;
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
	}
	
	SPICS(FALSE);
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    36f0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
	

	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    36f4:	88 e0       	ldi	r24, 0x08	; 8
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <PortEx_OUTCLR>
	
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	63 e0       	ldi	r22, 0x03	; 3
    3700:	0e 94 46 09 	call	0x128c	; 0x128c <SPIInit2>
	SPICS(TRUE);
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
    370a:	cb e0       	ldi	r28, 0x0B	; 11
    370c:	d0 e0       	ldi	r29, 0x00	; 0
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <SD_init+0x90>
    3710:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {												//try command 10 times before timing out
    3712:	69 f0       	breq	.+26     	; 0x372e <SD_init+0xaa>

	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	40 e0       	ldi	r20, 0x00	; 0
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	ba 01       	movw	r22, r20
    371c:	25 e9       	ldi	r18, 0x95	; 149
    371e:	08 e0       	ldi	r16, 0x08	; 8
    3720:	10 e0       	ldi	r17, 0x00	; 0
    3722:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
    3726:	81 30       	cpi	r24, 0x01	; 1
    3728:	99 f7       	brne	.-26     	; 0x3710 <SD_init+0x8c>
//returns 0 if successful or 1 if not
uint8_t SD_init(void){
	ADCPower(TRUE);				//power up portEX
	Ext1Power(TRUE);			//power up SD card
	_delay_ms(100);				//wait for bootup
	uint8_t errorCode = 0;
    372a:	ff 24       	eor	r15, r15
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <SD_init+0xae>
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
		if (i >= 10) {												//try command 10 times before timing out
			//there was no response to the first command
			errorCode = 1;
    372e:	ff 24       	eor	r15, r15
    3730:	f3 94       	inc	r15
    3732:	8f ef       	ldi	r24, 0xFF	; 255
    3734:	93 ec       	ldi	r25, 0xC3	; 195
    3736:	a9 e0       	ldi	r26, 0x09	; 9
    3738:	81 50       	subi	r24, 0x01	; 1
    373a:	90 40       	sbci	r25, 0x00	; 0
    373c:	a0 40       	sbci	r26, 0x00	; 0
    373e:	e1 f7       	brne	.-8      	; 0x3738 <SD_init+0xb4>
    3740:	00 c0       	rjmp	.+0      	; 0x3742 <SD_init+0xbe>
    3742:	00 00       	nop
			break;
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    3744:	cb e0       	ldi	r28, 0x0B	; 11
    3746:	d0 e0       	ldi	r29, 0x00	; 0
    3748:	02 c0       	rjmp	.+4      	; 0x374e <SD_init+0xca>
    374a:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    374c:	69 f0       	breq	.+26     	; 0x3768 <SD_init+0xe4>
			break;
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    374e:	88 e0       	ldi	r24, 0x08	; 8
    3750:	4a ea       	ldi	r20, 0xAA	; 170
    3752:	51 e0       	ldi	r21, 0x01	; 1
    3754:	60 e0       	ldi	r22, 0x00	; 0
    3756:	70 e0       	ldi	r23, 0x00	; 0
    3758:	27 e8       	ldi	r18, 0x87	; 135
    375a:	08 e0       	ldi	r16, 0x08	; 8
    375c:	10 e0       	ldi	r17, 0x00	; 0
    375e:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
    3762:	81 30       	cpi	r24, 0x01	; 1
    3764:	91 f7       	brne	.-28     	; 0x374a <SD_init+0xc6>
    3766:	02 c0       	rjmp	.+4      	; 0x376c <SD_init+0xe8>
		if (i >= 10) {
			//there was no response to the command
			errorCode = 1;
    3768:	ff 24       	eor	r15, r15
    376a:	f3 94       	inc	r15
    376c:	c2 e0       	ldi	r28, 0x02	; 2
    376e:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}			
	}		
	for(int i=0;i<4;i++){
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
    3770:	8f ef       	ldi	r24, 0xFF	; 255
    3772:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3776:	fe 01       	movw	r30, r28
    3778:	e1 57       	subi	r30, 0x71	; 113
    377a:	ff 4a       	sbci	r31, 0xAF	; 175
    377c:	80 83       	st	Z, r24
    377e:	21 96       	adiw	r28, 0x01	; 1
			//there was no response to the command
			errorCode = 1;
			break;
		}			
	}		
	for(int i=0;i<4;i++){
    3780:	c6 30       	cpi	r28, 0x06	; 6
    3782:	d1 05       	cpc	r29, r1
    3784:	a9 f7       	brne	.-22     	; 0x3770 <SD_init+0xec>
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if((Buffer[4] != 0x01) || (Buffer[5] != 0xAA)){			//check that the response is the same as the argument sent in
    3786:	80 91 93 50 	lds	r24, 0x5093
    378a:	81 30       	cpi	r24, 0x01	; 1
    378c:	21 f4       	brne	.+8      	; 0x3796 <SD_init+0x112>
    378e:	80 91 94 50 	lds	r24, 0x5094
    3792:	8a 3a       	cpi	r24, 0xAA	; 170
    3794:	11 f0       	breq	.+4      	; 0x379a <SD_init+0x116>
		//broken card or voltage out of operating range bounds
		errorCode = 1;
    3796:	ff 24       	eor	r15, r15
    3798:	f3 94       	inc	r15
		
	}
	*/
	//send second initialization command
	do{
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
    379a:	87 e3       	ldi	r24, 0x37	; 55
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	ba 01       	movw	r22, r20
    37a2:	2f ef       	ldi	r18, 0xFF	; 255
    37a4:	08 e0       	ldi	r16, 0x08	; 8
    37a6:	10 e0       	ldi	r17, 0x00	; 0
    37a8:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	40 e0       	ldi	r20, 0x00	; 0
    37b0:	50 e0       	ldi	r21, 0x00	; 0
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	70 e4       	ldi	r23, 0x40	; 64
    37b6:	2f ef       	ldi	r18, 0xFF	; 255
    37b8:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
	} while(Buffer[1]!= 0x00);
    37bc:	80 91 90 50 	lds	r24, 0x5090
    37c0:	88 23       	and	r24, r24
    37c2:	59 f7       	brne	.-42     	; 0x379a <SD_init+0x116>
    37c4:	cb e0       	ldi	r28, 0x0B	; 11
    37c6:	d0 e0       	ldi	r29, 0x00	; 0
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <SD_init+0x14a>
    37ca:	21 97       	sbiw	r28, 0x01	; 1
	
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//check OCR register
		if (i >= 10) {
    37cc:	61 f0       	breq	.+24     	; 0x37e6 <SD_init+0x162>
	do{
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
	} while(Buffer[1]!= 0x00);
	
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//check OCR register
    37ce:	8a e3       	ldi	r24, 0x3A	; 58
    37d0:	40 e0       	ldi	r20, 0x00	; 0
    37d2:	50 e0       	ldi	r21, 0x00	; 0
    37d4:	ba 01       	movw	r22, r20
    37d6:	2f ef       	ldi	r18, 0xFF	; 255
    37d8:	08 e0       	ldi	r16, 0x08	; 8
    37da:	10 e0       	ldi	r17, 0x00	; 0
    37dc:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
    37e0:	88 23       	and	r24, r24
    37e2:	99 f7       	brne	.-26     	; 0x37ca <SD_init+0x146>
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <SD_init+0x166>
		if (i >= 10) {
			//there was no response to the command
			errorCode = 1;
    37e6:	ff 24       	eor	r15, r15
    37e8:	f3 94       	inc	r15
			break;
		}
	}		
	for (int i=0;i<4;i++){
    37ea:	c0 e0       	ldi	r28, 0x00	; 0
    37ec:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
    37ee:	8f ef       	ldi	r24, 0xFF	; 255
    37f0:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    37f4:	fe 01       	movw	r30, r28
    37f6:	e1 57       	subi	r30, 0x71	; 113
    37f8:	ff 4a       	sbci	r31, 0xAF	; 175
    37fa:	80 83       	st	Z, r24
			//there was no response to the command
			errorCode = 1;
			break;
		}
	}		
	for (int i=0;i<4;i++){
    37fc:	21 96       	adiw	r28, 0x01	; 1
    37fe:	c4 30       	cpi	r28, 0x04	; 4
    3800:	d1 05       	cpc	r29, r1
    3802:	a9 f7       	brne	.-22     	; 0x37ee <SD_init+0x16a>
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if (Buffer[0] & 0x40){
    3804:	80 91 8f 50 	lds	r24, 0x508F
		//the card is addressed in 512 byte sectors
	}
	SPICS(FALSE);
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    380e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
	return errorCode;	
}	
    3812:	8f 2d       	mov	r24, r15
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	1f 91       	pop	r17
    381a:	0f 91       	pop	r16
    381c:	ff 90       	pop	r15
    381e:	08 95       	ret

00003820 <SD_write_multiple_blocks>:
//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    3820:	2f 92       	push	r2
    3822:	3f 92       	push	r3
    3824:	4f 92       	push	r4
    3826:	5f 92       	push	r5
    3828:	6f 92       	push	r6
    382a:	7f 92       	push	r7
    382c:	8f 92       	push	r8
    382e:	9f 92       	push	r9
    3830:	af 92       	push	r10
    3832:	bf 92       	push	r11
    3834:	cf 92       	push	r12
    3836:	df 92       	push	r13
    3838:	ef 92       	push	r14
    383a:	ff 92       	push	r15
    383c:	0f 93       	push	r16
    383e:	1f 93       	push	r17
    3840:	cf 93       	push	r28
    3842:	df 93       	push	r29
    3844:	00 d0       	rcall	.+0      	; 0x3846 <SD_write_multiple_blocks+0x26>
    3846:	0f 92       	push	r0
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    384c:	6b 01       	movw	r12, r22
    384e:	7c 01       	movw	r14, r24
    3850:	5a 01       	movw	r10, r20
    3852:	89 01       	movw	r16, r18
	SPIInit(SPI_MODE_0_gc);
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	32 e0       	ldi	r19, 0x02	; 2
    3864:	c8 01       	movw	r24, r16
    3866:	b9 01       	movw	r22, r18
    3868:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
    386c:	3b 01       	movw	r6, r22
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
    386e:	49 01       	movw	r8, r18
    3870:	88 1a       	sub	r8, r24
    3872:	99 0a       	sbc	r9, r25
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	88 16       	cp	r8, r24
    3878:	82 e0       	ldi	r24, 0x02	; 2
    387a:	98 06       	cpc	r9, r24
    387c:	21 f0       	breq	.+8      	; 0x3886 <SD_write_multiple_blocks+0x66>
	else numSectors++;
    387e:	08 94       	sec
    3880:	61 1c       	adc	r6, r1
    3882:	71 1c       	adc	r7, r1
    3884:	02 c0       	rjmp	.+4      	; 0x388a <SD_write_multiple_blocks+0x6a>
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    3886:	88 24       	eor	r8, r8
    3888:	99 24       	eor	r9, r9
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
    388a:	89 e1       	ldi	r24, 0x19	; 25
    388c:	b7 01       	movw	r22, r14
    388e:	a6 01       	movw	r20, r12
    3890:	2f ef       	ldi	r18, 0xFF	; 255
    3892:	08 e0       	ldi	r16, 0x08	; 8
    3894:	10 e0       	ldi	r17, 0x00	; 0
    3896:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
    389a:	88 23       	and	r24, r24
    389c:	b1 f7       	brne	.-20     	; 0x388a <SD_write_multiple_blocks+0x6a>
    389e:	65 01       	movw	r12, r10
    38a0:	aa 24       	eor	r10, r10
    38a2:	bb 24       	eor	r11, r11
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    38a4:	f3 01       	movw	r30, r6
    38a6:	31 97       	sbiw	r30, 0x01	; 1
    38a8:	e9 83       	std	Y+1, r30	; 0x01
    38aa:	fa 83       	std	Y+2, r31	; 0x02
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    38ac:	41 2c       	mov	r4, r1
    38ae:	02 e0       	ldi	r16, 0x02	; 2
    38b0:	50 2e       	mov	r5, r16
    38b2:	48 18       	sub	r4, r8
    38b4:	59 08       	sbc	r5, r9
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    38b6:	8c e0       	ldi	r24, 0x0C	; 12
    38b8:	28 2e       	mov	r2, r24
    38ba:	31 2c       	mov	r3, r1
    38bc:	76 c0       	rjmp	.+236    	; 0x39aa <SD_write_multiple_blocks+0x18a>
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    38be:	8f ef       	ldi	r24, 0xFF	; 255
    38c0:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    38c4:	80 93 90 50 	sts	0x5090, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
    38c8:	8c ef       	ldi	r24, 0xFC	; 252
    38ca:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    38ce:	80 93 90 50 	sts	0x5090, r24
		if(j == (numSectors-1)){
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	a8 16       	cp	r10, r24
    38d8:	b9 06       	cpc	r11, r25
    38da:	c1 f0       	breq	.+48     	; 0x390c <SD_write_multiple_blocks+0xec>
    38dc:	ee 24       	eor	r14, r14
    38de:	ff 24       	eor	r15, r15
    38e0:	30 c0       	rjmp	.+96     	; 0x3942 <SD_write_multiple_blocks+0x122>
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    38e2:	c8 01       	movw	r24, r16
    38e4:	b1 01       	movw	r22, r2
    38e6:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
    38ea:	9c 01       	movw	r18, r24
    38ec:	f7 01       	movw	r30, r14
    38ee:	81 91       	ld	r24, Z+
    38f0:	7f 01       	movw	r14, r30
    38f2:	2b 83       	std	Y+3, r18	; 0x03
    38f4:	3c 83       	std	Y+4, r19	; 0x04
    38f6:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    38fa:	2b 81       	ldd	r18, Y+3	; 0x03
    38fc:	3c 81       	ldd	r19, Y+4	; 0x04
    38fe:	f9 01       	movw	r30, r18
    3900:	e1 57       	subi	r30, 0x71	; 113
    3902:	ff 4a       	sbci	r31, 0xAF	; 175
    3904:	80 83       	st	Z, r24
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    3906:	0f 5f       	subi	r16, 0xFF	; 255
    3908:	1f 4f       	sbci	r17, 0xFF	; 255
    390a:	03 c0       	rjmp	.+6      	; 0x3912 <SD_write_multiple_blocks+0xf2>
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    390c:	76 01       	movw	r14, r12
    390e:	00 e0       	ldi	r16, 0x00	; 0
    3910:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    3912:	04 15       	cp	r16, r4
    3914:	15 05       	cpc	r17, r5
    3916:	2c f3       	brlt	.-54     	; 0x38e2 <SD_write_multiple_blocks+0xc2>
    3918:	00 e0       	ldi	r16, 0x00	; 0
    391a:	10 e0       	ldi	r17, 0x00	; 0
    391c:	0e c0       	rjmp	.+28     	; 0x393a <SD_write_multiple_blocks+0x11a>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
				Buffer[i%12] = SPI_write(FILLER_BYTE);
    391e:	c8 01       	movw	r24, r16
    3920:	b1 01       	movw	r22, r2
    3922:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
    3926:	7c 01       	movw	r14, r24
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    392e:	f7 01       	movw	r30, r14
    3930:	e1 57       	subi	r30, 0x71	; 113
    3932:	ff 4a       	sbci	r31, 0xAF	; 175
    3934:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    3936:	0f 5f       	subi	r16, 0xFF	; 255
    3938:	1f 4f       	sbci	r17, 0xFF	; 255
    393a:	08 15       	cp	r16, r8
    393c:	19 05       	cpc	r17, r9
    393e:	7c f3       	brlt	.-34     	; 0x391e <SD_write_multiple_blocks+0xfe>
    3940:	17 c0       	rjmp	.+46     	; 0x3970 <SD_write_multiple_blocks+0x150>
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    3942:	c7 01       	movw	r24, r14
    3944:	b1 01       	movw	r22, r2
    3946:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
    394a:	8c 01       	movw	r16, r24
	SPICS(FALSE);
	SPIDisable();
	return errorCode;	
}	
//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    394c:	f6 01       	movw	r30, r12
    394e:	ee 0d       	add	r30, r14
    3950:	ff 1d       	adc	r31, r15
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    3952:	80 81       	ld	r24, Z
    3954:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3958:	f8 01       	movw	r30, r16
    395a:	e1 57       	subi	r30, 0x71	; 113
    395c:	ff 4a       	sbci	r31, 0xAF	; 175
    395e:	80 83       	st	Z, r24
			for (int i=0;i<fillerBytes;i++){
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    3960:	08 94       	sec
    3962:	e1 1c       	adc	r14, r1
    3964:	f1 1c       	adc	r15, r1
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	ef 16       	cp	r14, r31
    396a:	f2 e0       	ldi	r31, 0x02	; 2
    396c:	ff 06       	cpc	r15, r31
    396e:	49 f7       	brne	.-46     	; 0x3942 <SD_write_multiple_blocks+0x122>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
    3970:	8f ef       	ldi	r24, 0xFF	; 255
    3972:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3976:	80 93 90 50 	sts	0x5090, r24
    397a:	8f ef       	ldi	r24, 0xFF	; 255
    397c:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3980:	80 93 90 50 	sts	0x5090, r24
		Buffer[1] = FILLER_BYTE;
    3984:	10 92 90 50 	sts	0x5090, r1
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
    3988:	05 c0       	rjmp	.+10     	; 0x3994 <SD_write_multiple_blocks+0x174>
    398a:	8f ef       	ldi	r24, 0xFF	; 255
    398c:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3990:	80 93 90 50 	sts	0x5090, r24
    3994:	80 91 90 50 	lds	r24, 0x5090
    3998:	8f 3f       	cpi	r24, 0xFF	; 255
    399a:	b9 f7       	brne	.-18     	; 0x398a <SD_write_multiple_blocks+0x16a>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	while(SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
    399c:	08 94       	sec
    399e:	a1 1c       	adc	r10, r1
    39a0:	b1 1c       	adc	r11, r1
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	92 e0       	ldi	r25, 0x02	; 2
    39a6:	c8 0e       	add	r12, r24
    39a8:	d9 1e       	adc	r13, r25
    39aa:	a6 14       	cp	r10, r6
    39ac:	b7 04       	cpc	r11, r7
    39ae:	0c f4       	brge	.+2      	; 0x39b2 <SD_write_multiple_blocks+0x192>
    39b0:	86 cf       	rjmp	.-244    	; 0x38be <SD_write_multiple_blocks+0x9e>
    39b2:	04 e0       	ldi	r16, 0x04	; 4
    39b4:	10 e0       	ldi	r17, 0x00	; 0
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    39b6:	8f ef       	ldi	r24, 0xFF	; 255
    39b8:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    39bc:	80 93 90 50 	sts	0x5090, r24
    39c0:	01 50       	subi	r16, 0x01	; 1
    39c2:	10 40       	sbci	r17, 0x00	; 0
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
	}
	for(int i=0;i<4;i++){
    39c4:	c1 f7       	brne	.-16     	; 0x39b6 <SD_write_multiple_blocks+0x196>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}		
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
    39c6:	8d ef       	ldi	r24, 0xFD	; 253
    39c8:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    39cc:	80 93 90 50 	sts	0x5090, r24
    39d0:	04 e0       	ldi	r16, 0x04	; 4
    39d2:	10 e0       	ldi	r17, 0x00	; 0
	for(int i=0;i<4;i++){
	Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    39d4:	8f ef       	ldi	r24, 0xFF	; 255
    39d6:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    39da:	80 93 90 50 	sts	0x5090, r24
    39de:	01 50       	subi	r16, 0x01	; 1
    39e0:	10 40       	sbci	r17, 0x00	; 0
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}		
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
	for(int i=0;i<4;i++){
    39e2:	c1 f7       	brne	.-16     	; 0x39d4 <SD_write_multiple_blocks+0x1b4>
	Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}	
	Buffer[1] = FILLER_BYTE;
    39e4:	10 92 90 50 	sts	0x5090, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    39e8:	05 c0       	rjmp	.+10     	; 0x39f4 <SD_write_multiple_blocks+0x1d4>
    39ea:	8f ef       	ldi	r24, 0xFF	; 255
    39ec:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    39f0:	80 93 90 50 	sts	0x5090, r24
    39f4:	80 91 90 50 	lds	r24, 0x5090
    39f8:	8f 3f       	cpi	r24, 0xFF	; 255
    39fa:	b9 f7       	brne	.-18     	; 0x39ea <SD_write_multiple_blocks+0x1ca>
	SPICS(FALSE);
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();		
    3a02:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
}
    3a06:	24 96       	adiw	r28, 0x04	; 4
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	de bf       	out	0x3e, r29	; 62
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	1f 91       	pop	r17
    3a12:	0f 91       	pop	r16
    3a14:	ff 90       	pop	r15
    3a16:	ef 90       	pop	r14
    3a18:	df 90       	pop	r13
    3a1a:	cf 90       	pop	r12
    3a1c:	bf 90       	pop	r11
    3a1e:	af 90       	pop	r10
    3a20:	9f 90       	pop	r9
    3a22:	8f 90       	pop	r8
    3a24:	7f 90       	pop	r7
    3a26:	6f 90       	pop	r6
    3a28:	5f 90       	pop	r5
    3a2a:	4f 90       	pop	r4
    3a2c:	3f 90       	pop	r3
    3a2e:	2f 90       	pop	r2
    3a30:	08 95       	ret

00003a32 <SD_read_multiple_blocks>:
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
    3a32:	af 92       	push	r10
    3a34:	bf 92       	push	r11
    3a36:	cf 92       	push	r12
    3a38:	df 92       	push	r13
    3a3a:	ef 92       	push	r14
    3a3c:	ff 92       	push	r15
    3a3e:	0f 93       	push	r16
    3a40:	1f 93       	push	r17
    3a42:	cf 93       	push	r28
    3a44:	df 93       	push	r29
    3a46:	6b 01       	movw	r12, r22
    3a48:	7c 01       	movw	r14, r24
    3a4a:	ea 01       	movw	r28, r20
    3a4c:	59 01       	movw	r10, r18
	SPIInit(SPI_MODE_0_gc);
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
    3a5a:	82 e1       	ldi	r24, 0x12	; 18
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	a6 01       	movw	r20, r12
    3a60:	2f ef       	ldi	r18, 0xFF	; 255
    3a62:	08 e0       	ldi	r16, 0x08	; 8
    3a64:	10 e0       	ldi	r17, 0x00	; 0
    3a66:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
    3a6a:	88 23       	and	r24, r24
    3a6c:	b1 f7       	brne	.-20     	; 0x3a5a <SD_read_multiple_blocks+0x28>
    3a6e:	8e 01       	movw	r16, r28
    3a70:	ee 24       	eor	r14, r14
    3a72:	ff 24       	eor	r15, r15
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
    3a74:	cc 24       	eor	r12, r12
    3a76:	ca 94       	dec	r12
    3a78:	29 c0       	rjmp	.+82     	; 0x3acc <SD_read_multiple_blocks+0x9a>
    3a7a:	c0 92 90 50 	sts	0x5090, r12
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
    3a7e:	05 c0       	rjmp	.+10     	; 0x3a8a <SD_read_multiple_blocks+0x58>
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
    3a80:	8f ef       	ldi	r24, 0xFF	; 255
    3a82:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3a86:	80 93 90 50 	sts	0x5090, r24
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
    3a8a:	80 91 90 50 	lds	r24, 0x5090
    3a8e:	8e 3f       	cpi	r24, 0xFE	; 254
    3a90:	b9 f7       	brne	.-18     	; 0x3a80 <SD_read_multiple_blocks+0x4e>
    3a92:	c0 e0       	ldi	r28, 0x00	; 0
    3a94:	d0 e0       	ldi	r29, 0x00	; 0
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}			
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    3a96:	8f ef       	ldi	r24, 0xFF	; 255
    3a98:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
	SPICS(FALSE);
	SPIDisable();		
}
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	ec 0f       	add	r30, r28
    3aa0:	fd 1f       	adc	r31, r29
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}			
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    3aa2:	80 83       	st	Z, r24
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}			
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    3aa4:	21 96       	adiw	r28, 0x01	; 1
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	c0 30       	cpi	r28, 0x00	; 0
    3aaa:	d8 07       	cpc	r29, r24
    3aac:	a1 f7       	brne	.-24     	; 0x3a96 <SD_read_multiple_blocks+0x64>
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
	
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    3aae:	8f ef       	ldi	r24, 0xFF	; 255
    3ab0:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3ab4:	80 93 8f 50 	sts	0x508F, r24
    3ab8:	8f ef       	ldi	r24, 0xFF	; 255
    3aba:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3abe:	80 93 90 50 	sts	0x5090, r24
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	while(SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS);	//send command to read data
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
    3ac2:	08 94       	sec
    3ac4:	e1 1c       	adc	r14, r1
    3ac6:	f1 1c       	adc	r15, r1
    3ac8:	00 50       	subi	r16, 0x00	; 0
    3aca:	1e 4f       	sbci	r17, 0xFE	; 254
    3acc:	ea 14       	cp	r14, r10
    3ace:	fb 04       	cpc	r15, r11
    3ad0:	a4 f2       	brlt	.-88     	; 0x3a7a <SD_read_multiple_blocks+0x48>
	
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
		}
	}	
	SD_command(SDHC_CMD_STOP_TRANSMISSION,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//send command to stop reading data
    3ad2:	8c e0       	ldi	r24, 0x0C	; 12
    3ad4:	40 e0       	ldi	r20, 0x00	; 0
    3ad6:	50 e0       	ldi	r21, 0x00	; 0
    3ad8:	ba 01       	movw	r22, r20
    3ada:	2f ef       	ldi	r18, 0xFF	; 255
    3adc:	08 e0       	ldi	r16, 0x08	; 8
    3ade:	10 e0       	ldi	r17, 0x00	; 0
    3ae0:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_command>
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//read the stuff byte
    3ae4:	8f ef       	ldi	r24, 0xFF	; 255
    3ae6:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3aea:	80 93 8f 50 	sts	0x508F, r24
	Buffer[1] = FILLER_BYTE;
    3aee:	10 92 90 50 	sts	0x5090, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    3af2:	05 c0       	rjmp	.+10     	; 0x3afe <SD_read_multiple_blocks+0xcc>
    3af4:	8f ef       	ldi	r24, 0xFF	; 255
    3af6:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
    3afa:	80 93 90 50 	sts	0x5090, r24
    3afe:	80 91 90 50 	lds	r24, 0x5090
    3b02:	8f 3f       	cpi	r24, 0xFF	; 255
    3b04:	b9 f7       	brne	.-18     	; 0x3af4 <SD_read_multiple_blocks+0xc2>
	SPICS(FALSE);
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    3b0c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
}
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	ff 90       	pop	r15
    3b1a:	ef 90       	pop	r14
    3b1c:	df 90       	pop	r13
    3b1e:	cf 90       	pop	r12
    3b20:	bf 90       	pop	r11
    3b22:	af 90       	pop	r10
    3b24:	08 95       	ret

00003b26 <SD_disable>:
//this function deselects the sd card and turns off power to the port expander and the sd card
void SD_disable(){
	PortEx_DIRCLR(BIT3_bm, PS_BANKB);  //pull SD card CS high
    3b26:	88 e0       	ldi	r24, 0x08	; 8
    3b28:	60 e0       	ldi	r22, 0x00	; 0
    3b2a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <PortEx_DIRCLR>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);
    3b2e:	88 e0       	ldi	r24, 0x08	; 8
    3b30:	60 e0       	ldi	r22, 0x00	; 0
    3b32:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	0e 94 35 09 	call	0x126a	; 0x126a <SPIInit>
	SPICS(TRUE);
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPI_write(SDHC_DUMMY_BYTE);	//must write a byte to spi when cd card cs is high to have sd card release MISO line
    3b42:	8f ef       	ldi	r24, 0xFF	; 255
    3b44:	0e 94 b3 19 	call	0x3366	; 0x3366 <SPI_write>
	SPICS(FALSE);	//stop spi
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SPICS>
	SPIDisable();
    3b4e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SPIDisable>
	
	ADCPower(FALSE);		//turn off portEX power
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ADCPower>
	Ext1Power(FALSE);			//power down SD card
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	0e 94 b0 08 	call	0x1160	; 0x1160 <Ext1Power>
}
    3b5e:	08 95       	ret

00003b60 <SD_write_and_read_knowns>:
//command to check reading and writing to sd card
void SD_write_and_read_knowns(){
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	fc 01       	movw	r30, r24
    3b66:	e8 53       	subi	r30, 0x38	; 56
    3b68:	fc 4d       	sbci	r31, 0xDC	; 220
    3b6a:	80 83       	st	Z, r24
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	88 31       	cpi	r24, 0x18	; 24
    3b70:	91 05       	cpc	r25, r1
    3b72:	c1 f7       	brne	.-16     	; 0x3b64 <SD_write_and_read_knowns+0x4>
	SD_write_block(20,FRAMReadBuffer,24);	//write those values to the card
    3b74:	64 e1       	ldi	r22, 0x14	; 20
    3b76:	70 e0       	ldi	r23, 0x00	; 0
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	48 ec       	ldi	r20, 0xC8	; 200
    3b7e:	53 e2       	ldi	r21, 0x23	; 35
    3b80:	28 e1       	ldi	r18, 0x18	; 24
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	0e 94 19 1a 	call	0x3432	; 0x3432 <SD_write_block>
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	e8 53       	subi	r30, 0x38	; 56
    3b90:	fc 4d       	sbci	r31, 0xDC	; 220
    3b92:	10 82       	st	Z, r1
    3b94:	01 96       	adiw	r24, 0x01	; 1
    3b96:	88 31       	cpi	r24, 0x18	; 24
    3b98:	91 05       	cpc	r25, r1
    3b9a:	c1 f7       	brne	.-16     	; 0x3b8c <SD_write_and_read_knowns+0x2c>
	SD_read_block(20,FRAMReadBuffer);	//read into the FRAM buffer from the SD card
    3b9c:	64 e1       	ldi	r22, 0x14	; 20
    3b9e:	70 e0       	ldi	r23, 0x00	; 0
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	48 ec       	ldi	r20, 0xC8	; 200
    3ba6:	53 e2       	ldi	r21, 0x23	; 35
    3ba8:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = i%100;	//write 1250 values to the FRAM buffer	
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	e4 e6       	ldi	r30, 0x64	; 100
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	c9 01       	movw	r24, r18
    3bb6:	bf 01       	movw	r22, r30
    3bb8:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <__divmodhi4>
    3bbc:	d9 01       	movw	r26, r18
    3bbe:	a8 53       	subi	r26, 0x38	; 56
    3bc0:	bc 4d       	sbci	r27, 0xDC	; 220
    3bc2:	8c 93       	st	X, r24
    3bc4:	2f 5f       	subi	r18, 0xFF	; 255
    3bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc8:	84 e0       	ldi	r24, 0x04	; 4
    3bca:	22 3e       	cpi	r18, 0xE2	; 226
    3bcc:	38 07       	cpc	r19, r24
    3bce:	91 f7       	brne	.-28     	; 0x3bb4 <SD_write_and_read_knowns+0x54>
	SD_write_multiple_blocks(80,FRAMReadBuffer,1250);	//write those values to sd card
    3bd0:	60 e5       	ldi	r22, 0x50	; 80
    3bd2:	70 e0       	ldi	r23, 0x00	; 0
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	48 ec       	ldi	r20, 0xC8	; 200
    3bda:	53 e2       	ldi	r21, 0x23	; 35
    3bdc:	22 ee       	ldi	r18, 0xE2	; 226
    3bde:	34 e0       	ldi	r19, 0x04	; 4
    3be0:	0e 94 10 1c 	call	0x3820	; 0x3820 <SD_write_multiple_blocks>
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = 0;	//clear FRAM buffer
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	fc 01       	movw	r30, r24
    3bea:	e8 53       	subi	r30, 0x38	; 56
    3bec:	fc 4d       	sbci	r31, 0xDC	; 220
    3bee:	10 82       	st	Z, r1
    3bf0:	01 96       	adiw	r24, 0x01	; 1
    3bf2:	24 e0       	ldi	r18, 0x04	; 4
    3bf4:	82 3e       	cpi	r24, 0xE2	; 226
    3bf6:	92 07       	cpc	r25, r18
    3bf8:	b9 f7       	brne	.-18     	; 0x3be8 <SD_write_and_read_knowns+0x88>
	SD_read_multiple_blocks(80,FRAMReadBuffer,3);	//read in 3 blocks of data from the memory card
    3bfa:	60 e5       	ldi	r22, 0x50	; 80
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	48 ec       	ldi	r20, 0xC8	; 200
    3c04:	53 e2       	ldi	r21, 0x23	; 35
    3c06:	23 e0       	ldi	r18, 0x03	; 3
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <SD_read_multiple_blocks>
}
    3c0e:	08 95       	ret

00003c10 <SD_write_and_read_knowns_FAT>:
//check writing and reading to file on sd card
void SD_write_and_read_knowns_FAT(){
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	fc 01       	movw	r30, r24
    3c16:	e8 53       	subi	r30, 0x38	; 56
    3c18:	fc 4d       	sbci	r31, 0xDC	; 220
    3c1a:	80 83       	st	Z, r24
    3c1c:	01 96       	adiw	r24, 0x01	; 1
    3c1e:	88 31       	cpi	r24, 0x18	; 24
    3c20:	91 05       	cpc	r25, r1
    3c22:	c1 f7       	brne	.-16     	; 0x3c14 <SD_write_and_read_knowns_FAT+0x4>
	error = writeFile(newFile);
    3c24:	82 e1       	ldi	r24, 0x12	; 18
    3c26:	90 e2       	ldi	r25, 0x20	; 32
    3c28:	0e 94 8a 23 	call	0x4714	; 0x4714 <writeFile>
    3c2c:	80 93 53 40 	sts	0x4053, r24
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	fc 01       	movw	r30, r24
    3c36:	e8 53       	subi	r30, 0x38	; 56
    3c38:	fc 4d       	sbci	r31, 0xDC	; 220
    3c3a:	10 82       	st	Z, r1
    3c3c:	01 96       	adiw	r24, 0x01	; 1
    3c3e:	88 31       	cpi	r24, 0x18	; 24
    3c40:	91 05       	cpc	r25, r1
    3c42:	c1 f7       	brne	.-16     	; 0x3c34 <SD_write_and_read_knowns_FAT+0x24>
	error = readFile(READ,newFileR);		//read the data into the buffer from file
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	63 e0       	ldi	r22, 0x03	; 3
    3c48:	70 e2       	ldi	r23, 0x20	; 32
    3c4a:	0e 94 1c 23 	call	0x4638	; 0x4638 <readFile>
    3c4e:	80 93 53 40 	sts	0x4053, r24
}
    3c52:	08 95       	ret

00003c54 <RadioCS>:
	PORTD.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
}
*/
//select radio SPI on port D with cs
void RadioCS(uint8_t status){
	if (status) PORTD.OUTCLR = PIN4_bm;
    3c54:	88 23       	and	r24, r24
    3c56:	29 f0       	breq	.+10     	; 0x3c62 <RadioCS+0xe>
    3c58:	80 e1       	ldi	r24, 0x10	; 16
    3c5a:	e0 e6       	ldi	r30, 0x60	; 96
    3c5c:	f6 e0       	ldi	r31, 0x06	; 6
    3c5e:	86 83       	std	Z+6, r24	; 0x06
    3c60:	08 95       	ret
	else {
		PORTD.OUTSET = PIN4_bm;
    3c62:	80 e1       	ldi	r24, 0x10	; 16
    3c64:	e0 e6       	ldi	r30, 0x60	; 96
    3c66:	f6 e0       	ldi	r31, 0x06	; 6
    3c68:	85 83       	std	Z+5, r24	; 0x05
    3c6a:	08 95       	ret

00003c6c <SPID_write>:
}
*/
//write a byte of data over SPI port D and read a byte of data simultaneously
uint8_t SPID_write(uint8_t byteToSend){
	uint8_t data;
	SPID.DATA = byteToSend;
    3c6c:	e0 ec       	ldi	r30, 0xC0	; 192
    3c6e:	f9 e0       	ldi	r31, 0x09	; 9
    3c70:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPID.STATUS & SPI_IF_bm)); //wait for byte to be sent
    3c72:	80 91 c2 09 	lds	r24, 0x09C2
    3c76:	87 ff       	sbrs	r24, 7
    3c78:	fc cf       	rjmp	.-8      	; 0x3c72 <SPID_write+0x6>
	data = SPID.DATA; //read SPI data register to reset status flag
    3c7a:	80 91 c3 09 	lds	r24, 0x09C3
	return data;
}
    3c7e:	08 95       	ret

00003c80 <chibi_test_radio>:
	
}
*/
void chibi_test_radio(){
		
	chb_init();
    3c80:	0e 94 39 01 	call	0x272	; 0x272 <chb_init>
	chb_set_short_addr(0x0002);
    3c84:	82 e0       	ldi	r24, 0x02	; 2
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 17 04 	call	0x82e	; 0x82e <chb_set_short_addr>
	//chb_set_pwr(10);
	while(1) nop();								//comment this line if testing transmission
    3c8c:	00 00       	nop
    3c8e:	fe cf       	rjmp	.-4      	; 0x3c8c <chibi_test_radio+0xc>

00003c90 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    3c90:	cf 92       	push	r12
    3c92:	df 92       	push	r13
    3c94:	ef 92       	push	r14
    3c96:	ff 92       	push	r15
    3c98:	0f 93       	push	r16
    3c9a:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    3c9c:	20 91 47 40 	lds	r18, 0x4047
    3ca0:	30 91 48 40 	lds	r19, 0x4048
    3ca4:	c0 90 c4 23 	lds	r12, 0x23C4
    3ca8:	d0 90 c5 23 	lds	r13, 0x23C5
    3cac:	e0 90 c6 23 	lds	r14, 0x23C6
    3cb0:	f0 90 c7 23 	lds	r15, 0x23C7
    3cb4:	62 50       	subi	r22, 0x02	; 2
    3cb6:	70 40       	sbci	r23, 0x00	; 0
    3cb8:	80 40       	sbci	r24, 0x00	; 0
    3cba:	90 40       	sbci	r25, 0x00	; 0
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    3cc4:	8b 01       	movw	r16, r22
    3cc6:	9c 01       	movw	r18, r24
    3cc8:	0c 0d       	add	r16, r12
    3cca:	1d 1d       	adc	r17, r13
    3ccc:	2e 1d       	adc	r18, r14
    3cce:	3f 1d       	adc	r19, r15
}
    3cd0:	b8 01       	movw	r22, r16
    3cd2:	c9 01       	movw	r24, r18
    3cd4:	1f 91       	pop	r17
    3cd6:	0f 91       	pop	r16
    3cd8:	ff 90       	pop	r15
    3cda:	ef 90       	pop	r14
    3cdc:	df 90       	pop	r13
    3cde:	cf 90       	pop	r12
    3ce0:	08 95       	ret

00003ce2 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    3ce2:	3f 92       	push	r3
    3ce4:	4f 92       	push	r4
    3ce6:	5f 92       	push	r5
    3ce8:	6f 92       	push	r6
    3cea:	7f 92       	push	r7
    3cec:	8f 92       	push	r8
    3cee:	9f 92       	push	r9
    3cf0:	af 92       	push	r10
    3cf2:	bf 92       	push	r11
    3cf4:	cf 92       	push	r12
    3cf6:	df 92       	push	r13
    3cf8:	ef 92       	push	r14
    3cfa:	ff 92       	push	r15
    3cfc:	0f 93       	push	r16
    3cfe:	1f 93       	push	r17
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	4b 01       	movw	r8, r22
    3d06:	5c 01       	movw	r10, r24
    3d08:	34 2e       	mov	r3, r20
    3d0a:	28 01       	movw	r4, r16
    3d0c:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    3d0e:	c0 90 4d 40 	lds	r12, 0x404D
    3d12:	d0 90 4e 40 	lds	r13, 0x404E
    3d16:	42 e0       	ldi	r20, 0x02	; 2
    3d18:	88 0c       	add	r8, r8
    3d1a:	99 1c       	adc	r9, r9
    3d1c:	aa 1c       	adc	r10, r10
    3d1e:	bb 1c       	adc	r11, r11
    3d20:	4a 95       	dec	r20
    3d22:	d1 f7       	brne	.-12     	; 0x3d18 <getSetNextCluster+0x36>
    3d24:	20 91 3d 40 	lds	r18, 0x403D
    3d28:	30 91 3e 40 	lds	r19, 0x403E
    3d2c:	ee 24       	eor	r14, r14
    3d2e:	ff 24       	eor	r15, r15
    3d30:	80 91 49 40 	lds	r24, 0x4049
    3d34:	90 91 4a 40 	lds	r25, 0x404A
    3d38:	a0 91 4b 40 	lds	r26, 0x404B
    3d3c:	b0 91 4c 40 	lds	r27, 0x404C
    3d40:	c8 0e       	add	r12, r24
    3d42:	d9 1e       	adc	r13, r25
    3d44:	ea 1e       	adc	r14, r26
    3d46:	fb 1e       	adc	r15, r27
    3d48:	40 e0       	ldi	r20, 0x00	; 0
    3d4a:	50 e0       	ldi	r21, 0x00	; 0
    3d4c:	c5 01       	movw	r24, r10
    3d4e:	b4 01       	movw	r22, r8
    3d50:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    3d54:	c2 0e       	add	r12, r18
    3d56:	d3 1e       	adc	r13, r19
    3d58:	e4 1e       	adc	r14, r20
    3d5a:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    3d5c:	20 91 3d 40 	lds	r18, 0x403D
    3d60:	30 91 3e 40 	lds	r19, 0x403E
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	50 e0       	ldi	r21, 0x00	; 0
    3d68:	c5 01       	movw	r24, r10
    3d6a:	b4 01       	movw	r22, r8
    3d6c:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	ec 01       	movw	r28, r24

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);
    3d76:	c7 01       	movw	r24, r14
    3d78:	b6 01       	movw	r22, r12
    3d7a:	40 ec       	ldi	r20, 0xC0	; 192
    3d7c:	51 e2       	ldi	r21, 0x21	; 33
    3d7e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &SDBuffer[FATEntryOffset];
    3d82:	c0 54       	subi	r28, 0x40	; 64
    3d84:	de 4d       	sbci	r29, 0xDE	; 222

if(get_set == GET)
    3d86:	33 20       	and	r3, r3
    3d88:	31 f4       	brne	.+12     	; 0x3d96 <getSetNextCluster+0xb4>
  return ((*FATEntryValue) & 0x0fffffff);
    3d8a:	08 81       	ld	r16, Y
    3d8c:	19 81       	ldd	r17, Y+1	; 0x01
    3d8e:	2a 81       	ldd	r18, Y+2	; 0x02
    3d90:	3b 81       	ldd	r19, Y+3	; 0x03
    3d92:	3f 70       	andi	r19, 0x0F	; 15
    3d94:	0f c0       	rjmp	.+30     	; 0x3db4 <getSetNextCluster+0xd2>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    3d96:	48 82       	st	Y, r4
    3d98:	59 82       	std	Y+1, r5	; 0x01
    3d9a:	6a 82       	std	Y+2, r6	; 0x02
    3d9c:	7b 82       	std	Y+3, r7	; 0x03

SD_write_block(FATEntrySector,SDBuffer,512);
    3d9e:	c7 01       	movw	r24, r14
    3da0:	b6 01       	movw	r22, r12
    3da2:	40 ec       	ldi	r20, 0xC0	; 192
    3da4:	51 e2       	ldi	r21, 0x21	; 33
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	32 e0       	ldi	r19, 0x02	; 2
    3daa:	0e 94 19 1a 	call	0x3432	; 0x3432 <SD_write_block>

return (0);
    3dae:	00 e0       	ldi	r16, 0x00	; 0
    3db0:	10 e0       	ldi	r17, 0x00	; 0
    3db2:	98 01       	movw	r18, r16
}
    3db4:	b8 01       	movw	r22, r16
    3db6:	c9 01       	movw	r24, r18
    3db8:	df 91       	pop	r29
    3dba:	cf 91       	pop	r28
    3dbc:	1f 91       	pop	r17
    3dbe:	0f 91       	pop	r16
    3dc0:	ff 90       	pop	r15
    3dc2:	ef 90       	pop	r14
    3dc4:	df 90       	pop	r13
    3dc6:	cf 90       	pop	r12
    3dc8:	bf 90       	pop	r11
    3dca:	af 90       	pop	r10
    3dcc:	9f 90       	pop	r9
    3dce:	8f 90       	pop	r8
    3dd0:	7f 90       	pop	r7
    3dd2:	6f 90       	pop	r6
    3dd4:	5f 90       	pop	r5
    3dd6:	4f 90       	pop	r4
    3dd8:	3f 90       	pop	r3
    3dda:	08 95       	ret

00003ddc <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    3ddc:	cf 92       	push	r12
    3dde:	df 92       	push	r13
    3de0:	ef 92       	push	r14
    3de2:	ff 92       	push	r15
    3de4:	0f 93       	push	r16
    3de6:	1f 93       	push	r17
    3de8:	cf 93       	push	r28
    3dea:	08 2f       	mov	r16, r24
    3dec:	c6 2f       	mov	r28, r22
    3dee:	69 01       	movw	r12, r18
    3df0:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;
//unsigned char error;

SD_read_block(unusedSectors + 1,SDBuffer);
    3df2:	80 91 49 40 	lds	r24, 0x4049
    3df6:	90 91 4a 40 	lds	r25, 0x404A
    3dfa:	a0 91 4b 40 	lds	r26, 0x404B
    3dfe:	b0 91 4c 40 	lds	r27, 0x404C
    3e02:	01 96       	adiw	r24, 0x01	; 1
    3e04:	a1 1d       	adc	r26, r1
    3e06:	b1 1d       	adc	r27, r1
    3e08:	bc 01       	movw	r22, r24
    3e0a:	cd 01       	movw	r24, r26
    3e0c:	40 ec       	ldi	r20, 0xC0	; 192
    3e0e:	51 e2       	ldi	r21, 0x21	; 33
    3e10:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    3e14:	80 91 c0 21 	lds	r24, 0x21C0
    3e18:	90 91 c1 21 	lds	r25, 0x21C1
    3e1c:	a0 91 c2 21 	lds	r26, 0x21C2
    3e20:	b0 91 c3 21 	lds	r27, 0x21C3
    3e24:	82 35       	cpi	r24, 0x52	; 82
    3e26:	22 e5       	ldi	r18, 0x52	; 82
    3e28:	92 07       	cpc	r25, r18
    3e2a:	21 e6       	ldi	r18, 0x61	; 97
    3e2c:	a2 07       	cpc	r26, r18
    3e2e:	21 e4       	ldi	r18, 0x41	; 65
    3e30:	b2 07       	cpc	r27, r18
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <getSetFreeCluster+0x5a>
    3e34:	5d c0       	rjmp	.+186    	; 0x3ef0 <getSetFreeCluster+0x114>
    3e36:	80 91 a4 23 	lds	r24, 0x23A4
    3e3a:	90 91 a5 23 	lds	r25, 0x23A5
    3e3e:	a0 91 a6 23 	lds	r26, 0x23A6
    3e42:	b0 91 a7 23 	lds	r27, 0x23A7
    3e46:	82 37       	cpi	r24, 0x72	; 114
    3e48:	22 e7       	ldi	r18, 0x72	; 114
    3e4a:	92 07       	cpc	r25, r18
    3e4c:	21 e4       	ldi	r18, 0x41	; 65
    3e4e:	a2 07       	cpc	r26, r18
    3e50:	21 e6       	ldi	r18, 0x61	; 97
    3e52:	b2 07       	cpc	r27, r18
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <getSetFreeCluster+0x7c>
    3e56:	4c c0       	rjmp	.+152    	; 0x3ef0 <getSetFreeCluster+0x114>
    3e58:	80 91 bc 23 	lds	r24, 0x23BC
    3e5c:	90 91 bd 23 	lds	r25, 0x23BD
    3e60:	a0 91 be 23 	lds	r26, 0x23BE
    3e64:	b0 91 bf 23 	lds	r27, 0x23BF
    3e68:	80 30       	cpi	r24, 0x00	; 0
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	92 07       	cpc	r25, r18
    3e6e:	25 e5       	ldi	r18, 0x55	; 85
    3e70:	a2 07       	cpc	r26, r18
    3e72:	2a ea       	ldi	r18, 0xAA	; 170
    3e74:	b2 07       	cpc	r27, r18
    3e76:	e1 f5       	brne	.+120    	; 0x3ef0 <getSetFreeCluster+0x114>
  return 0xffffffff;

 if(get_set == GET)
    3e78:	cc 23       	and	r28, r28
    3e7a:	a1 f4       	brne	.+40     	; 0x3ea4 <getSetFreeCluster+0xc8>
 {
   if(totOrNext == TOTAL_FREE)
    3e7c:	01 30       	cpi	r16, 0x01	; 1
    3e7e:	49 f4       	brne	.+18     	; 0x3e92 <getSetFreeCluster+0xb6>
      return(FS->freeClusterCount);
    3e80:	00 91 a8 23 	lds	r16, 0x23A8
    3e84:	10 91 a9 23 	lds	r17, 0x23A9
    3e88:	20 91 aa 23 	lds	r18, 0x23AA
    3e8c:	30 91 ab 23 	lds	r19, 0x23AB
    3e90:	32 c0       	rjmp	.+100    	; 0x3ef6 <getSetFreeCluster+0x11a>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    3e92:	00 91 ac 23 	lds	r16, 0x23AC
    3e96:	10 91 ad 23 	lds	r17, 0x23AD
    3e9a:	20 91 ae 23 	lds	r18, 0x23AE
    3e9e:	30 91 af 23 	lds	r19, 0x23AF
    3ea2:	29 c0       	rjmp	.+82     	; 0x3ef6 <getSetFreeCluster+0x11a>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    3ea4:	01 30       	cpi	r16, 0x01	; 1
    3ea6:	49 f4       	brne	.+18     	; 0x3eba <getSetFreeCluster+0xde>
      FS->freeClusterCount = FSEntry;
    3ea8:	c0 92 a8 23 	sts	0x23A8, r12
    3eac:	d0 92 a9 23 	sts	0x23A9, r13
    3eb0:	e0 92 aa 23 	sts	0x23AA, r14
    3eb4:	f0 92 ab 23 	sts	0x23AB, r15
    3eb8:	08 c0       	rjmp	.+16     	; 0x3eca <getSetFreeCluster+0xee>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    3eba:	c0 92 ac 23 	sts	0x23AC, r12
    3ebe:	d0 92 ad 23 	sts	0x23AD, r13
    3ec2:	e0 92 ae 23 	sts	0x23AE, r14
    3ec6:	f0 92 af 23 	sts	0x23AF, r15
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
    3eca:	80 91 49 40 	lds	r24, 0x4049
    3ece:	90 91 4a 40 	lds	r25, 0x404A
    3ed2:	a0 91 4b 40 	lds	r26, 0x404B
    3ed6:	b0 91 4c 40 	lds	r27, 0x404C
    3eda:	01 96       	adiw	r24, 0x01	; 1
    3edc:	a1 1d       	adc	r26, r1
    3ede:	b1 1d       	adc	r27, r1
    3ee0:	bc 01       	movw	r22, r24
    3ee2:	cd 01       	movw	r24, r26
    3ee4:	40 ec       	ldi	r20, 0xC0	; 192
    3ee6:	51 e2       	ldi	r21, 0x21	; 33
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	32 e0       	ldi	r19, 0x02	; 2
    3eec:	0e 94 19 1a 	call	0x3432	; 0x3432 <SD_write_block>
//unsigned char error;

SD_read_block(unusedSectors + 1,SDBuffer);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
    3ef0:	0f ef       	ldi	r16, 0xFF	; 255
    3ef2:	1f ef       	ldi	r17, 0xFF	; 255
    3ef4:	98 01       	movw	r18, r16
	  FS->nextFreeCluster = FSEntry;
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
 }
 return 0xffffffff;
}
    3ef6:	b8 01       	movw	r22, r16
    3ef8:	c9 01       	movw	r24, r18
    3efa:	cf 91       	pop	r28
    3efc:	1f 91       	pop	r17
    3efe:	0f 91       	pop	r16
    3f00:	ff 90       	pop	r15
    3f02:	ef 90       	pop	r14
    3f04:	df 90       	pop	r13
    3f06:	cf 90       	pop	r12
    3f08:	08 95       	ret

00003f0a <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    3f0a:	ef 92       	push	r14
    3f0c:	ff 92       	push	r15
    3f0e:	0f 93       	push	r16
    3f10:	1f 93       	push	r17
    3f12:	cf 93       	push	r28
    3f14:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    3f16:	10 92 49 40 	sts	0x4049, r1
    3f1a:	10 92 4a 40 	sts	0x404A, r1
    3f1e:	10 92 4b 40 	sts	0x404B, r1
    3f22:	10 92 4c 40 	sts	0x404C, r1

SD_read_block(0,SDBuffer);
    3f26:	60 e0       	ldi	r22, 0x00	; 0
    3f28:	70 e0       	ldi	r23, 0x00	; 0
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	40 ec       	ldi	r20, 0xC0	; 192
    3f2e:	51 e2       	ldi	r21, 0x21	; 33
    3f30:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
bpb = (struct BS_Structure *)SDBuffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    3f34:	80 91 c0 21 	lds	r24, 0x21C0
    3f38:	89 3e       	cpi	r24, 0xE9	; 233
    3f3a:	31 f1       	breq	.+76     	; 0x3f88 <getBootSectorData+0x7e>
    3f3c:	8b 3e       	cpi	r24, 0xEB	; 235
    3f3e:	21 f1       	breq	.+72     	; 0x3f88 <getBootSectorData+0x7e>
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    3f40:	80 91 be 23 	lds	r24, 0x23BE
    3f44:	90 91 bf 23 	lds	r25, 0x23BF
    3f48:	2a ea       	ldi	r18, 0xAA	; 170
    3f4a:	85 35       	cpi	r24, 0x55	; 85
    3f4c:	92 07       	cpc	r25, r18
    3f4e:	09 f0       	breq	.+2      	; 0x3f52 <getBootSectorData+0x48>
    3f50:	b6 c0       	rjmp	.+364    	; 0x40be <getBootSectorData+0x1b4>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    3f52:	60 91 86 23 	lds	r22, 0x2386
    3f56:	70 91 87 23 	lds	r23, 0x2387
    3f5a:	80 91 88 23 	lds	r24, 0x2388
    3f5e:	90 91 89 23 	lds	r25, 0x2389
    3f62:	60 93 49 40 	sts	0x4049, r22
    3f66:	70 93 4a 40 	sts	0x404A, r23
    3f6a:	80 93 4b 40 	sts	0x404B, r24
    3f6e:	90 93 4c 40 	sts	0x404C, r25
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
    3f72:	40 ec       	ldi	r20, 0xC0	; 192
    3f74:	51 e2       	ldi	r21, 0x21	; 33
    3f76:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    3f7a:	80 91 c0 21 	lds	r24, 0x21C0
    3f7e:	89 3e       	cpi	r24, 0xE9	; 233
    3f80:	19 f0       	breq	.+6      	; 0x3f88 <getBootSectorData+0x7e>
    3f82:	8b 3e       	cpi	r24, 0xEB	; 235
    3f84:	09 f0       	breq	.+2      	; 0x3f88 <getBootSectorData+0x7e>
    3f86:	9b c0       	rjmp	.+310    	; 0x40be <getBootSectorData+0x1b4>
}

bytesPerSector = bpb->bytesPerSector;
    3f88:	80 91 cb 21 	lds	r24, 0x21CB
    3f8c:	90 91 cc 21 	lds	r25, 0x21CC
    3f90:	80 93 3d 40 	sts	0x403D, r24
    3f94:	90 93 3e 40 	sts	0x403E, r25
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
    3f98:	80 91 cd 21 	lds	r24, 0x21CD
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	80 93 47 40 	sts	0x4047, r24
    3fa2:	90 93 48 40 	sts	0x4048, r25
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
    3fa6:	e0 90 ce 21 	lds	r14, 0x21CE
    3faa:	f0 90 cf 21 	lds	r15, 0x21CF
    3fae:	e0 92 4d 40 	sts	0x404D, r14
    3fb2:	f0 92 4e 40 	sts	0x404E, r15
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    3fb6:	80 91 ec 21 	lds	r24, 0x21EC
    3fba:	90 91 ed 21 	lds	r25, 0x21ED
    3fbe:	a0 91 ee 21 	lds	r26, 0x21EE
    3fc2:	b0 91 ef 21 	lds	r27, 0x21EF
    3fc6:	80 93 43 40 	sts	0x4043, r24
    3fca:	90 93 44 40 	sts	0x4044, r25
    3fce:	a0 93 45 40 	sts	0x4045, r26
    3fd2:	b0 93 46 40 	sts	0x4046, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    3fd6:	c0 91 4d 40 	lds	r28, 0x404D
    3fda:	d0 91 4e 40 	lds	r29, 0x404E
    3fde:	60 91 d0 21 	lds	r22, 0x21D0
    3fe2:	70 e0       	ldi	r23, 0x00	; 0
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	20 91 e4 21 	lds	r18, 0x21E4
    3fec:	30 91 e5 21 	lds	r19, 0x21E5
    3ff0:	40 91 e6 21 	lds	r20, 0x21E6
    3ff4:	50 91 e7 21 	lds	r21, 0x21E7
    3ff8:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    3ffc:	8b 01       	movw	r16, r22
    3ffe:	9c 01       	movw	r18, r24
    4000:	ce 01       	movw	r24, r28
    4002:	a0 e0       	ldi	r26, 0x00	; 0
    4004:	b0 e0       	ldi	r27, 0x00	; 0
    4006:	40 91 dc 21 	lds	r20, 0x21DC
    400a:	50 91 dd 21 	lds	r21, 0x21DD
    400e:	60 91 de 21 	lds	r22, 0x21DE
    4012:	70 91 df 21 	lds	r23, 0x21DF
    4016:	84 0f       	add	r24, r20
    4018:	95 1f       	adc	r25, r21
    401a:	a6 1f       	adc	r26, r22
    401c:	b7 1f       	adc	r27, r23
    401e:	80 0f       	add	r24, r16
    4020:	91 1f       	adc	r25, r17
    4022:	a2 1f       	adc	r26, r18
    4024:	b3 1f       	adc	r27, r19
    4026:	80 93 c4 23 	sts	0x23C4, r24
    402a:	90 93 c5 23 	sts	0x23C5, r25
    402e:	a0 93 c6 23 	sts	0x23C6, r26
    4032:	b0 93 c7 23 	sts	0x23C7, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    4036:	e0 91 47 40 	lds	r30, 0x4047
    403a:	f0 91 48 40 	lds	r31, 0x4048
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
    403e:	a7 01       	movw	r20, r14
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	70 e0       	ldi	r23, 0x00	; 0
    4044:	80 91 e0 21 	lds	r24, 0x21E0
    4048:	90 91 e1 21 	lds	r25, 0x21E1
    404c:	a0 91 e2 21 	lds	r26, 0x21E2
    4050:	b0 91 e3 21 	lds	r27, 0x21E3
    4054:	84 1b       	sub	r24, r20
    4056:	95 0b       	sbc	r25, r21
    4058:	a6 0b       	sbc	r26, r22
    405a:	b7 0b       	sbc	r27, r23
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
    405c:	80 1b       	sub	r24, r16
    405e:	91 0b       	sbc	r25, r17
    4060:	a2 0b       	sbc	r26, r18
    4062:	b3 0b       	sbc	r27, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    4064:	9f 01       	movw	r18, r30
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	bc 01       	movw	r22, r24
    406c:	cd 01       	movw	r24, r26
    406e:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    4072:	20 93 3f 40 	sts	0x403F, r18
    4076:	30 93 40 40 	sts	0x4040, r19
    407a:	40 93 41 40 	sts	0x4041, r20
    407e:	50 93 42 40 	sts	0x4042, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	a9 01       	movw	r20, r18
    408c:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <getSetFreeCluster>
    4090:	ab 01       	movw	r20, r22
    4092:	bc 01       	movw	r22, r24
    4094:	80 91 3f 40 	lds	r24, 0x403F
    4098:	90 91 40 40 	lds	r25, 0x4040
    409c:	a0 91 41 40 	lds	r26, 0x4041
    40a0:	b0 91 42 40 	lds	r27, 0x4042
    40a4:	84 17       	cp	r24, r20
    40a6:	95 07       	cpc	r25, r21
    40a8:	a6 07       	cpc	r26, r22
    40aa:	b7 07       	cpc	r27, r23
    40ac:	18 f4       	brcc	.+6      	; 0x40b4 <getBootSectorData+0x1aa>
     freeClusterCountUpdated = 0;
    40ae:	10 92 58 40 	sts	0x4058, r1
    40b2:	03 c0       	rjmp	.+6      	; 0x40ba <getBootSectorData+0x1b0>
else
	 freeClusterCountUpdated = 1;
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	80 93 58 40 	sts	0x4058, r24
return 0;
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	01 c0       	rjmp	.+2      	; 0x40c0 <getBootSectorData+0x1b6>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    40be:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
    40c0:	df 91       	pop	r29
    40c2:	cf 91       	pop	r28
    40c4:	1f 91       	pop	r17
    40c6:	0f 91       	pop	r16
    40c8:	ff 90       	pop	r15
    40ca:	ef 90       	pop	r14
    40cc:	08 95       	ret

000040ce <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    40ce:	cf 93       	push	r28
    40d0:	df 93       	push	r29
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
    40d6:	2b 97       	sbiw	r28, 0x0b	; 11
    40d8:	cd bf       	out	0x3d, r28	; 61
    40da:	de bf       	out	0x3e, r29	; 62

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}
    40dc:	bc 01       	movw	r22, r24
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    40de:	fc 01       	movw	r30, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    40e0:	50 e0       	ldi	r21, 0x00	; 0
if(fileName[j] == '.') break;
    40e2:	21 91       	ld	r18, Z+
    40e4:	2e 32       	cpi	r18, 0x2E	; 46
    40e6:	21 f0       	breq	.+8      	; 0x40f0 <convertFileName+0x22>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    40e8:	5f 5f       	subi	r21, 0xFF	; 255
    40ea:	5c 30       	cpi	r21, 0x0C	; 12
    40ec:	d1 f7       	brne	.-12     	; 0x40e2 <convertFileName+0x14>
    40ee:	51 c0       	rjmp	.+162    	; 0x4192 <convertFileName+0xc4>
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
    40f0:	59 30       	cpi	r21, 0x09	; 9
    40f2:	08 f0       	brcs	.+2      	; 0x40f6 <convertFileName+0x28>
    40f4:	4e c0       	rjmp	.+156    	; 0x4192 <convertFileName+0xc4>
    40f6:	9e 01       	movw	r18, r28
    40f8:	2f 5f       	subi	r18, 0xFF	; 255
    40fa:	3f 4f       	sbci	r19, 0xFF	; 255
    40fc:	d9 01       	movw	r26, r18
    40fe:	fc 01       	movw	r30, r24
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <convertFileName+0x38>
	return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
    4102:	41 91       	ld	r20, Z+
    4104:	4d 93       	st	X+, r20
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}

for(k=0; k<j; k++) //setting file name
    4106:	4e 2f       	mov	r20, r30
    4108:	48 1b       	sub	r20, r24
    410a:	45 17       	cp	r20, r21
    410c:	d0 f3       	brcs	.-12     	; 0x4102 <convertFileName+0x34>
    410e:	45 2f       	mov	r20, r21
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    4110:	a0 e2       	ldi	r26, 0x20	; 32
    4112:	08 c0       	rjmp	.+16     	; 0x4124 <convertFileName+0x56>
    4114:	e1 e0       	ldi	r30, 0x01	; 1
    4116:	f0 e0       	ldi	r31, 0x00	; 0
    4118:	ec 0f       	add	r30, r28
    411a:	fd 1f       	adc	r31, r29
    411c:	e4 0f       	add	r30, r20
    411e:	f1 1d       	adc	r31, r1
    4120:	a0 83       	st	Z, r26
	return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    4122:	4f 5f       	subi	r20, 0xFF	; 255
    4124:	48 30       	cpi	r20, 0x08	; 8
    4126:	b1 f7       	brne	.-20     	; 0x4114 <convertFileName+0x46>
  fileNameFAT[k] = ' ';

j++;
    4128:	5f 5f       	subi	r21, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    412a:	b0 e2       	ldi	r27, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    412c:	fc 01       	movw	r30, r24
    412e:	e5 0f       	add	r30, r21
    4130:	f1 1d       	adc	r31, r1
    4132:	a0 81       	ld	r26, Z
    4134:	aa 23       	and	r26, r26
    4136:	49 f0       	breq	.+18     	; 0x414a <convertFileName+0x7c>
    fileNameFAT[k] = fileName[j++];
    4138:	e1 e0       	ldi	r30, 0x01	; 1
    413a:	f0 e0       	ldi	r31, 0x00	; 0
    413c:	ec 0f       	add	r30, r28
    413e:	fd 1f       	adc	r31, r29
    4140:	e4 0f       	add	r30, r20
    4142:	f1 1d       	adc	r31, r1
    4144:	a0 83       	st	Z, r26
    4146:	5f 5f       	subi	r21, 0xFF	; 255
    4148:	0a c0       	rjmp	.+20     	; 0x415e <convertFileName+0x90>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    414a:	e1 e0       	ldi	r30, 0x01	; 1
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	ec 0f       	add	r30, r28
    4150:	fd 1f       	adc	r31, r29
    4152:	e4 0f       	add	r30, r20
    4154:	f1 1d       	adc	r31, r1
    4156:	b0 83       	st	Z, r27
    4158:	4f 5f       	subi	r20, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    415a:	4b 30       	cpi	r20, 0x0B	; 11
    415c:	b0 f3       	brcs	.-20     	; 0x414a <convertFileName+0x7c>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
    415e:	4f 5f       	subi	r20, 0xFF	; 255
    4160:	4b 30       	cpi	r20, 0x0B	; 11
    4162:	20 f3       	brcs	.-56     	; 0x412c <convertFileName+0x5e>
    4164:	f9 01       	movw	r30, r18
    4166:	8b e0       	ldi	r24, 0x0B	; 11
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    4168:	90 81       	ld	r25, Z
    416a:	49 2f       	mov	r20, r25
    416c:	41 56       	subi	r20, 0x61	; 97
    416e:	4a 31       	cpi	r20, 0x1A	; 26
    4170:	10 f4       	brcc	.+4      	; 0x4176 <convertFileName+0xa8>
    fileNameFAT[j] -= 0x20;
    4172:	90 52       	subi	r25, 0x20	; 32
    4174:	90 83       	st	Z, r25
    4176:	81 50       	subi	r24, 0x01	; 1
    4178:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    417a:	88 23       	and	r24, r24
    417c:	a9 f7       	brne	.-22     	; 0x4168 <convertFileName+0x9a>
    417e:	8b e0       	ldi	r24, 0x0B	; 11
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
    4180:	f9 01       	movw	r30, r18
    4182:	91 91       	ld	r25, Z+
    4184:	9f 01       	movw	r18, r30
    4186:	fb 01       	movw	r30, r22
    4188:	91 93       	st	Z+, r25
    418a:	bf 01       	movw	r22, r30
    418c:	81 50       	subi	r24, 0x01	; 1

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    418e:	c1 f7       	brne	.-16     	; 0x4180 <convertFileName+0xb2>
    4190:	01 c0       	rjmp	.+2      	; 0x4194 <convertFileName+0xc6>

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}
    4192:	81 e0       	ldi	r24, 0x01	; 1

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];

return 0;
}
    4194:	2b 96       	adiw	r28, 0x0b	; 11
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	de bf       	out	0x3e, r29	; 62
    419a:	df 91       	pop	r29
    419c:	cf 91       	pop	r28
    419e:	08 95       	ret

000041a0 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    41a0:	4f 92       	push	r4
    41a2:	5f 92       	push	r5
    41a4:	6f 92       	push	r6
    41a6:	7f 92       	push	r7
    41a8:	8f 92       	push	r8
    41aa:	9f 92       	push	r9
    41ac:	af 92       	push	r10
    41ae:	bf 92       	push	r11
    41b0:	cf 92       	push	r12
    41b2:	df 92       	push	r13
    41b4:	ef 92       	push	r14
    41b6:	ff 92       	push	r15
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	00 d0       	rcall	.+0      	; 0x41be <searchNextFreeCluster+0x1e>
    41be:	0f 92       	push	r0
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
    41c4:	4b 01       	movw	r8, r22
    41c6:	5c 01       	movw	r10, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    41c8:	80 e8       	ldi	r24, 0x80	; 128
    41ca:	9f ef       	ldi	r25, 0xFF	; 255
    41cc:	af ef       	ldi	r26, 0xFF	; 255
    41ce:	bf ef       	ldi	r27, 0xFF	; 255
    41d0:	88 22       	and	r8, r24
    41d2:	99 22       	and	r9, r25
    41d4:	aa 22       	and	r10, r26
    41d6:	bb 22       	and	r11, r27
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    41d8:	44 24       	eor	r4, r4
    41da:	55 24       	eor	r5, r5
    41dc:	32 01       	movw	r6, r4
//Function: to search for the next free cluster in the root directory
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
    41de:	d5 01       	movw	r26, r10
    41e0:	c4 01       	movw	r24, r8
    41e2:	e2 e0       	ldi	r30, 0x02	; 2
    41e4:	88 0f       	add	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	aa 1f       	adc	r26, r26
    41ea:	bb 1f       	adc	r27, r27
    41ec:	ea 95       	dec	r30
    41ee:	d1 f7       	brne	.-12     	; 0x41e4 <searchNextFreeCluster+0x44>
    41f0:	89 83       	std	Y+1, r24	; 0x01
    41f2:	9a 83       	std	Y+2, r25	; 0x02
    41f4:	ab 83       	std	Y+3, r26	; 0x03
    41f6:	bc 83       	std	Y+4, r27	; 0x04
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    41f8:	56 c0       	rjmp	.+172    	; 0x42a6 <searchNextFreeCluster+0x106>
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    41fa:	c0 90 4d 40 	lds	r12, 0x404D
    41fe:	d0 90 4e 40 	lds	r13, 0x404E
    4202:	20 91 3d 40 	lds	r18, 0x403D
    4206:	30 91 3e 40 	lds	r19, 0x403E
    420a:	ee 24       	eor	r14, r14
    420c:	ff 24       	eor	r15, r15
    420e:	80 91 49 40 	lds	r24, 0x4049
    4212:	90 91 4a 40 	lds	r25, 0x404A
    4216:	a0 91 4b 40 	lds	r26, 0x404B
    421a:	b0 91 4c 40 	lds	r27, 0x404C
    421e:	c8 0e       	add	r12, r24
    4220:	d9 1e       	adc	r13, r25
    4222:	ea 1e       	adc	r14, r26
    4224:	fb 1e       	adc	r15, r27
//Function: to search for the next free cluster in the root directory
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
    4226:	69 81       	ldd	r22, Y+1	; 0x01
    4228:	7a 81       	ldd	r23, Y+2	; 0x02
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	9c 81       	ldd	r25, Y+4	; 0x04
    422e:	64 0d       	add	r22, r4
    4230:	75 1d       	adc	r23, r5
    4232:	86 1d       	adc	r24, r6
    4234:	97 1d       	adc	r25, r7
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    4236:	40 e0       	ldi	r20, 0x00	; 0
    4238:	50 e0       	ldi	r21, 0x00	; 0
    423a:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    423e:	c2 0e       	add	r12, r18
    4240:	d3 1e       	adc	r13, r19
    4242:	e4 1e       	adc	r14, r20
    4244:	f5 1e       	adc	r15, r21
      SD_read_block(sector,SDBuffer);
    4246:	c7 01       	movw	r24, r14
    4248:	b6 01       	movw	r22, r12
    424a:	40 ec       	ldi	r20, 0xC0	; 192
    424c:	51 e2       	ldi	r21, 0x21	; 33
    424e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
      for(i=0; i<128; i++)
    4252:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
    4254:	e2 2f       	mov	r30, r18
    4256:	f0 e0       	ldi	r31, 0x00	; 0
    4258:	ee 0f       	add	r30, r30
    425a:	ff 1f       	adc	r31, r31
    425c:	ee 0f       	add	r30, r30
    425e:	ff 1f       	adc	r31, r31
    4260:	e0 54       	subi	r30, 0x40	; 64
    4262:	fe 4d       	sbci	r31, 0xDE	; 222
         if(((*value) & 0x0fffffff) == 0)
    4264:	80 81       	ld	r24, Z
    4266:	91 81       	ldd	r25, Z+1	; 0x01
    4268:	a2 81       	ldd	r26, Z+2	; 0x02
    426a:	b3 81       	ldd	r27, Z+3	; 0x03
    426c:	bf 70       	andi	r27, 0x0F	; 15
    426e:	00 97       	sbiw	r24, 0x00	; 0
    4270:	a1 05       	cpc	r26, r1
    4272:	b1 05       	cpc	r27, r1
    4274:	29 f4       	brne	.+10     	; 0x4280 <searchNextFreeCluster+0xe0>
            return(cluster+i);
    4276:	82 0e       	add	r8, r18
    4278:	91 1c       	adc	r9, r1
    427a:	a1 1c       	adc	r10, r1
    427c:	b1 1c       	adc	r11, r1
    427e:	24 c0       	rjmp	.+72     	; 0x42c8 <searchNextFreeCluster+0x128>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    4280:	2f 5f       	subi	r18, 0xFF	; 255
    4282:	20 38       	cpi	r18, 0x80	; 128
    4284:	39 f7       	brne	.-50     	; 0x4254 <searchNextFreeCluster+0xb4>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    4286:	80 e8       	ldi	r24, 0x80	; 128
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	a0 e0       	ldi	r26, 0x00	; 0
    428c:	b0 e0       	ldi	r27, 0x00	; 0
    428e:	88 0e       	add	r8, r24
    4290:	99 1e       	adc	r9, r25
    4292:	aa 1e       	adc	r10, r26
    4294:	bb 1e       	adc	r11, r27
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	92 e0       	ldi	r25, 0x02	; 2
    429a:	a0 e0       	ldi	r26, 0x00	; 0
    429c:	b0 e0       	ldi	r27, 0x00	; 0
    429e:	48 0e       	add	r4, r24
    42a0:	59 1e       	adc	r5, r25
    42a2:	6a 1e       	adc	r6, r26
    42a4:	7b 1e       	adc	r7, r27
    42a6:	80 91 3f 40 	lds	r24, 0x403F
    42aa:	90 91 40 40 	lds	r25, 0x4040
    42ae:	a0 91 41 40 	lds	r26, 0x4041
    42b2:	b0 91 42 40 	lds	r27, 0x4042
    42b6:	88 16       	cp	r8, r24
    42b8:	99 06       	cpc	r9, r25
    42ba:	aa 06       	cpc	r10, r26
    42bc:	bb 06       	cpc	r11, r27
    42be:	08 f4       	brcc	.+2      	; 0x42c2 <searchNextFreeCluster+0x122>
    42c0:	9c cf       	rjmp	.-200    	; 0x41fa <searchNextFreeCluster+0x5a>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
    42c2:	88 24       	eor	r8, r8
    42c4:	99 24       	eor	r9, r9
    42c6:	54 01       	movw	r10, r8
}
    42c8:	b4 01       	movw	r22, r8
    42ca:	c5 01       	movw	r24, r10
    42cc:	24 96       	adiw	r28, 0x04	; 4
    42ce:	cd bf       	out	0x3d, r28	; 61
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	df 91       	pop	r29
    42d4:	cf 91       	pop	r28
    42d6:	ff 90       	pop	r15
    42d8:	ef 90       	pop	r14
    42da:	df 90       	pop	r13
    42dc:	cf 90       	pop	r12
    42de:	bf 90       	pop	r11
    42e0:	af 90       	pop	r10
    42e2:	9f 90       	pop	r9
    42e4:	8f 90       	pop	r8
    42e6:	7f 90       	pop	r7
    42e8:	6f 90       	pop	r6
    42ea:	5f 90       	pop	r5
    42ec:	4f 90       	pop	r4
    42ee:	08 95       	ret

000042f0 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    42f0:	cf 92       	push	r12
    42f2:	df 92       	push	r13
    42f4:	ef 92       	push	r14
    42f6:	ff 92       	push	r15
    42f8:	cf 93       	push	r28
    42fa:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    42fc:	db 01       	movw	r26, r22
    42fe:	ca 01       	movw	r24, r20
    4300:	91 70       	andi	r25, 0x01	; 1
    4302:	a0 70       	andi	r26, 0x00	; 0
    4304:	b0 70       	andi	r27, 0x00	; 0
    4306:	29 e0       	ldi	r18, 0x09	; 9
    4308:	76 95       	lsr	r23
    430a:	67 95       	ror	r22
    430c:	57 95       	ror	r21
    430e:	47 95       	ror	r20
    4310:	2a 95       	dec	r18
    4312:	d1 f7       	brne	.-12     	; 0x4308 <freeMemoryUpdate+0x18>
    4314:	00 97       	sbiw	r24, 0x00	; 0
    4316:	a1 05       	cpc	r26, r1
    4318:	b1 05       	cpc	r27, r1
    431a:	21 f0       	breq	.+8      	; 0x4324 <freeMemoryUpdate+0x34>
  else size = (size / 512) +1;
    431c:	4f 5f       	subi	r20, 0xFF	; 255
    431e:	5f 4f       	sbci	r21, 0xFF	; 255
    4320:	6f 4f       	sbci	r22, 0xFF	; 255
    4322:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
    4324:	db 01       	movw	r26, r22
    4326:	ca 01       	movw	r24, r20
    4328:	87 70       	andi	r24, 0x07	; 7
    432a:	90 70       	andi	r25, 0x00	; 0
    432c:	a0 70       	andi	r26, 0x00	; 0
    432e:	b0 70       	andi	r27, 0x00	; 0
    4330:	6a 01       	movw	r12, r20
    4332:	7b 01       	movw	r14, r22
    4334:	f3 e0       	ldi	r31, 0x03	; 3
    4336:	f6 94       	lsr	r15
    4338:	e7 94       	ror	r14
    433a:	d7 94       	ror	r13
    433c:	c7 94       	ror	r12
    433e:	fa 95       	dec	r31
    4340:	d1 f7       	brne	.-12     	; 0x4336 <freeMemoryUpdate+0x46>
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	a1 05       	cpc	r26, r1
    4346:	b1 05       	cpc	r27, r1
    4348:	29 f0       	breq	.+10     	; 0x4354 <freeMemoryUpdate+0x64>
  else size = (size / 8) +1;
    434a:	08 94       	sec
    434c:	c1 1c       	adc	r12, r1
    434e:	d1 1c       	adc	r13, r1
    4350:	e1 1c       	adc	r14, r1
    4352:	f1 1c       	adc	r15, r1

  if(freeClusterCountUpdated)
    4354:	80 91 58 40 	lds	r24, 0x4058
    4358:	88 23       	and	r24, r24
    435a:	f1 f0       	breq	.+60     	; 0x4398 <freeMemoryUpdate+0xa8>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	60 e0       	ldi	r22, 0x00	; 0
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	a9 01       	movw	r20, r18
    4366:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <getSetFreeCluster>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
	if(flag == ADD)
    436e:	cc 23       	and	r28, r28
    4370:	29 f4       	brne	.+10     	; 0x437c <freeMemoryUpdate+0x8c>
  	   freeClusters = freeClusters + size;
    4372:	c8 0e       	add	r12, r24
    4374:	d9 1e       	adc	r13, r25
    4376:	ea 1e       	adc	r14, r26
    4378:	fb 1e       	adc	r15, r27
    437a:	08 c0       	rjmp	.+16     	; 0x438c <freeMemoryUpdate+0x9c>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    437c:	9c 01       	movw	r18, r24
    437e:	ad 01       	movw	r20, r26
    4380:	2c 19       	sub	r18, r12
    4382:	3d 09       	sbc	r19, r13
    4384:	4e 09       	sbc	r20, r14
    4386:	5f 09       	sbc	r21, r15
    4388:	69 01       	movw	r12, r18
    438a:	7a 01       	movw	r14, r20
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	61 e0       	ldi	r22, 0x01	; 1
    4390:	a7 01       	movw	r20, r14
    4392:	96 01       	movw	r18, r12
    4394:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <getSetFreeCluster>
  }
}
    4398:	cf 91       	pop	r28
    439a:	ff 90       	pop	r15
    439c:	ef 90       	pop	r14
    439e:	df 90       	pop	r13
    43a0:	cf 90       	pop	r12
    43a2:	08 95       	ret

000043a4 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    43a4:	2f 92       	push	r2
    43a6:	3f 92       	push	r3
    43a8:	4f 92       	push	r4
    43aa:	5f 92       	push	r5
    43ac:	6f 92       	push	r6
    43ae:	7f 92       	push	r7
    43b0:	8f 92       	push	r8
    43b2:	9f 92       	push	r9
    43b4:	af 92       	push	r10
    43b6:	bf 92       	push	r11
    43b8:	cf 92       	push	r12
    43ba:	df 92       	push	r13
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	00 d0       	rcall	.+0      	; 0x43ca <findFiles+0x26>
    43ca:	00 d0       	rcall	.+0      	; 0x43cc <findFiles+0x28>
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
    43d0:	38 2e       	mov	r3, r24
    43d2:	26 2e       	mov	r2, r22
    43d4:	7d 83       	std	Y+5, r23	; 0x05
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    43d6:	c0 90 43 40 	lds	r12, 0x4043
    43da:	d0 90 44 40 	lds	r13, 0x4044
    43de:	e0 90 45 40 	lds	r14, 0x4045
    43e2:	f0 90 46 40 	lds	r15, 0x4046
		      //transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    43e6:	81 50       	subi	r24, 0x01	; 1
    43e8:	8e 83       	std	Y+6, r24	; 0x06

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    43ea:	c7 01       	movw	r24, r14
    43ec:	b6 01       	movw	r22, r12
    43ee:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <getFirstSector>
    43f2:	69 83       	std	Y+1, r22	; 0x01
    43f4:	7a 83       	std	Y+2, r23	; 0x02
    43f6:	8b 83       	std	Y+3, r24	; 0x03
    43f8:	9c 83       	std	Y+4, r25	; 0x04

   for(sector = 0; sector < sectorPerCluster; sector++)
    43fa:	88 24       	eor	r8, r8
    43fc:	99 24       	eor	r9, r9
    43fe:	54 01       	movw	r10, r8
    4400:	cf c0       	rjmp	.+414    	; 0x45a0 <findFiles+0x1fc>
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4402:	49 80       	ldd	r4, Y+1	; 0x01
    4404:	5a 80       	ldd	r5, Y+2	; 0x02
    4406:	6b 80       	ldd	r6, Y+3	; 0x03
    4408:	7c 80       	ldd	r7, Y+4	; 0x04
    440a:	48 0c       	add	r4, r8
    440c:	59 1c       	adc	r5, r9
    440e:	6a 1c       	adc	r6, r10
    4410:	7b 1c       	adc	r7, r11
    4412:	c3 01       	movw	r24, r6
    4414:	b2 01       	movw	r22, r4
    4416:	40 ec       	ldi	r20, 0xC0	; 192
    4418:	51 e2       	ldi	r21, 0x21	; 33
    441a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	b1 c0       	rjmp	.+354    	; 0x4586 <findFiles+0x1e2>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    4424:	b9 01       	movw	r22, r18
    4426:	60 54       	subi	r22, 0x40	; 64
    4428:	7e 4d       	sbci	r23, 0xDE	; 222

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    442a:	fb 01       	movw	r30, r22
    442c:	80 81       	ld	r24, Z
    442e:	88 23       	and	r24, r24
    4430:	09 f4       	brne	.+2      	; 0x4434 <findFiles+0x90>
    4432:	db c0       	rjmp	.+438    	; 0x45ea <findFiles+0x246>
		{
		  //if(flag == DELETE)
		      //transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    4434:	85 3e       	cpi	r24, 0xE5	; 229
    4436:	09 f4       	brne	.+2      	; 0x443a <findFiles+0x96>
    4438:	a4 c0       	rjmp	.+328    	; 0x4582 <findFiles+0x1de>
    443a:	83 85       	ldd	r24, Z+11	; 0x0b
    443c:	8f 30       	cpi	r24, 0x0F	; 15
    443e:	09 f4       	brne	.+2      	; 0x4442 <findFiles+0x9e>
    4440:	a0 c0       	rjmp	.+320    	; 0x4582 <findFiles+0x1de>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    4442:	fe 81       	ldd	r31, Y+6	; 0x06
    4444:	f2 30       	cpi	r31, 0x02	; 2
    4446:	08 f0       	brcs	.+2      	; 0x444a <findFiles+0xa6>
    4448:	9c c0       	rjmp	.+312    	; 0x4582 <findFiles+0x1de>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    444a:	a2 2d       	mov	r26, r2
    444c:	bd 81       	ldd	r27, Y+5	; 0x05
    444e:	8b e0       	ldi	r24, 0x0B	; 11
    4450:	a9 01       	movw	r20, r18
    4452:	fb 01       	movw	r30, r22
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    4454:	21 91       	ld	r18, Z+
    4456:	9d 91       	ld	r25, X+
    4458:	29 17       	cp	r18, r25
    445a:	09 f0       	breq	.+2      	; 0x445e <findFiles+0xba>
    445c:	91 c0       	rjmp	.+290    	; 0x4580 <findFiles+0x1dc>
    445e:	81 50       	subi	r24, 0x01	; 1
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    4460:	c9 f7       	brne	.-14     	; 0x4454 <findFiles+0xb0>
    4462:	9a 01       	movw	r18, r20
    4464:	8b 01       	movw	r16, r22
    4466:	fb 01       	movw	r30, r22
    4468:	84 88       	ldd	r8, Z+20	; 0x14
    446a:	95 88       	ldd	r9, Z+21	; 0x15
    446c:	42 8d       	ldd	r20, Z+26	; 0x1a
    446e:	53 8d       	ldd	r21, Z+27	; 0x1b
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
			{
			  if(flag == GET_FILE)
    4470:	f1 e0       	ldi	r31, 0x01	; 1
    4472:	3f 16       	cp	r3, r31
    4474:	a1 f5       	brne	.+104    	; 0x44de <findFiles+0x13a>
              {
			    appendFileSector = firstSector + sector;
    4476:	40 92 59 40 	sts	0x4059, r4
    447a:	50 92 5a 40 	sts	0x405A, r5
    447e:	60 92 5b 40 	sts	0x405B, r6
    4482:	70 92 5c 40 	sts	0x405C, r7
				appendFileLocation = i;
    4486:	c9 01       	movw	r24, r18
    4488:	a0 e0       	ldi	r26, 0x00	; 0
    448a:	b0 e0       	ldi	r27, 0x00	; 0
    448c:	80 93 c0 23 	sts	0x23C0, r24
    4490:	90 93 c1 23 	sts	0x23C1, r25
    4494:	a0 93 c2 23 	sts	0x23C2, r26
    4498:	b0 93 c3 23 	sts	0x23C3, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    449c:	aa 24       	eor	r10, r10
    449e:	bb 24       	eor	r11, r11
    44a0:	54 01       	movw	r10, r8
    44a2:	99 24       	eor	r9, r9
    44a4:	88 24       	eor	r8, r8
    44a6:	60 e0       	ldi	r22, 0x00	; 0
    44a8:	70 e0       	ldi	r23, 0x00	; 0
    44aa:	84 2a       	or	r8, r20
    44ac:	95 2a       	or	r9, r21
    44ae:	a6 2a       	or	r10, r22
    44b0:	b7 2a       	or	r11, r23
    44b2:	80 92 4f 40 	sts	0x404F, r8
    44b6:	90 92 50 40 	sts	0x4050, r9
    44ba:	a0 92 51 40 	sts	0x4051, r10
    44be:	b0 92 52 40 	sts	0x4052, r11
				fileSize = dir->fileSize;
    44c2:	f8 01       	movw	r30, r16
    44c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    44c6:	95 8d       	ldd	r25, Z+29	; 0x1d
    44c8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    44ca:	b7 8d       	ldd	r27, Z+31	; 0x1f
    44cc:	80 93 39 40 	sts	0x4039, r24
    44d0:	90 93 3a 40 	sts	0x403A, r25
    44d4:	a0 93 3b 40 	sts	0x403B, r26
    44d8:	b0 93 3c 40 	sts	0x403C, r27
			    return (dir);
    44dc:	88 c0       	rjmp	.+272    	; 0x45ee <findFiles+0x24a>
			     TX_NEWLINE;
				 transmitString_F(PSTR("Deleting.."));
				 TX_NEWLINE;
				 TX_NEWLINE;
				 */
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    44de:	aa 24       	eor	r10, r10
    44e0:	bb 24       	eor	r11, r11
    44e2:	54 01       	movw	r10, r8
    44e4:	99 24       	eor	r9, r9
    44e6:	88 24       	eor	r8, r8
    44e8:	ca 01       	movw	r24, r20
    44ea:	a0 e0       	ldi	r26, 0x00	; 0
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	88 2a       	or	r8, r24
    44f0:	99 2a       	or	r9, r25
    44f2:	aa 2a       	or	r10, r26
    44f4:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    44f6:	85 ee       	ldi	r24, 0xE5	; 229
    44f8:	fb 01       	movw	r30, r22
    44fa:	80 83       	st	Z, r24
				 SD_write_block (firstSector+sector,SDBuffer,512);
    44fc:	c3 01       	movw	r24, r6
    44fe:	b2 01       	movw	r22, r4
    4500:	40 ec       	ldi	r20, 0xC0	; 192
    4502:	51 e2       	ldi	r21, 0x21	; 33
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	32 e0       	ldi	r19, 0x02	; 2
    4508:	0e 94 19 1a 	call	0x3432	; 0x3432 <SD_write_block>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    450c:	f8 01       	movw	r30, r16
    450e:	44 8d       	ldd	r20, Z+28	; 0x1c
    4510:	55 8d       	ldd	r21, Z+29	; 0x1d
    4512:	66 8d       	ldd	r22, Z+30	; 0x1e
    4514:	77 8d       	ldd	r23, Z+31	; 0x1f
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	0e 94 78 21 	call	0x42f0	; 0x42f0 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    451c:	82 e0       	ldi	r24, 0x02	; 2
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	a9 01       	movw	r20, r18
    4526:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <getSetFreeCluster>
    452a:	dc 01       	movw	r26, r24
    452c:	cb 01       	movw	r24, r22
				 if(firstCluster < cluster)
    452e:	88 16       	cp	r8, r24
    4530:	99 06       	cpc	r9, r25
    4532:	aa 06       	cpc	r10, r26
    4534:	bb 06       	cpc	r11, r27
    4536:	30 f4       	brcc	.+12     	; 0x4544 <findFiles+0x1a0>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    4538:	82 e0       	ldi	r24, 0x02	; 2
    453a:	61 e0       	ldi	r22, 0x01	; 1
    453c:	a5 01       	movw	r20, r10
    453e:	94 01       	movw	r18, r8
    4540:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    4544:	c5 01       	movw	r24, r10
    4546:	b4 01       	movw	r22, r8
    4548:	40 e0       	ldi	r20, 0x00	; 0
    454a:	00 e0       	ldi	r16, 0x00	; 0
    454c:	10 e0       	ldi	r17, 0x00	; 0
    454e:	98 01       	movw	r18, r16
    4550:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
    4554:	6b 01       	movw	r12, r22
    4556:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    4558:	c5 01       	movw	r24, r10
    455a:	b4 01       	movw	r22, r8
    455c:	41 e0       	ldi	r20, 0x01	; 1
    455e:	00 e0       	ldi	r16, 0x00	; 0
    4560:	10 e0       	ldi	r17, 0x00	; 0
    4562:	98 01       	movw	r18, r16
    4564:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    4568:	f7 ef       	ldi	r31, 0xF7	; 247
    456a:	cf 16       	cp	r12, r31
    456c:	ff ef       	ldi	r31, 0xFF	; 255
    456e:	df 06       	cpc	r13, r31
    4570:	ff ef       	ldi	r31, 0xFF	; 255
    4572:	ef 06       	cpc	r14, r31
    4574:	ff e0       	ldi	r31, 0x0F	; 15
    4576:	ff 06       	cpc	r15, r31
    4578:	c0 f5       	brcc	.+112    	; 0x45ea <findFiles+0x246>
					   {//transmitString_F(PSTR("File deleted!"));
						   return 0;}
					firstCluster = nextCluster;
    457a:	46 01       	movw	r8, r12
    457c:	57 01       	movw	r10, r14
    457e:	e2 cf       	rjmp	.-60     	; 0x4544 <findFiles+0x1a0>
    4580:	9a 01       	movw	r18, r20
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    4582:	20 5e       	subi	r18, 0xE0	; 224
    4584:	3f 4f       	sbci	r19, 0xFF	; 255
    4586:	80 91 3d 40 	lds	r24, 0x403D
    458a:	90 91 3e 40 	lds	r25, 0x403E
    458e:	28 17       	cp	r18, r24
    4590:	39 07       	cpc	r19, r25
    4592:	08 f4       	brcc	.+2      	; 0x4596 <findFiles+0x1f2>
    4594:	47 cf       	rjmp	.-370    	; 0x4424 <findFiles+0x80>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    4596:	08 94       	sec
    4598:	81 1c       	adc	r8, r1
    459a:	91 1c       	adc	r9, r1
    459c:	a1 1c       	adc	r10, r1
    459e:	b1 1c       	adc	r11, r1
    45a0:	80 91 47 40 	lds	r24, 0x4047
    45a4:	90 91 48 40 	lds	r25, 0x4048
    45a8:	a0 e0       	ldi	r26, 0x00	; 0
    45aa:	b0 e0       	ldi	r27, 0x00	; 0
    45ac:	88 16       	cp	r8, r24
    45ae:	99 06       	cpc	r9, r25
    45b0:	aa 06       	cpc	r10, r26
    45b2:	bb 06       	cpc	r11, r27
    45b4:	08 f4       	brcc	.+2      	; 0x45b8 <findFiles+0x214>
    45b6:	25 cf       	rjmp	.-438    	; 0x4402 <findFiles+0x5e>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    45b8:	c7 01       	movw	r24, r14
    45ba:	b6 01       	movw	r22, r12
    45bc:	40 e0       	ldi	r20, 0x00	; 0
    45be:	00 e0       	ldi	r16, 0x00	; 0
    45c0:	10 e0       	ldi	r17, 0x00	; 0
    45c2:	98 01       	movw	r18, r16
    45c4:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
    45c8:	6b 01       	movw	r12, r22
    45ca:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    45cc:	87 ef       	ldi	r24, 0xF7	; 247
    45ce:	c8 16       	cp	r12, r24
    45d0:	8f ef       	ldi	r24, 0xFF	; 255
    45d2:	d8 06       	cpc	r13, r24
    45d4:	8f ef       	ldi	r24, 0xFF	; 255
    45d6:	e8 06       	cpc	r14, r24
    45d8:	8f e0       	ldi	r24, 0x0F	; 15
    45da:	f8 06       	cpc	r15, r24
    45dc:	30 f4       	brcc	.+12     	; 0x45ea <findFiles+0x246>
   	 return 0;
   if(cluster == 0) 
    45de:	c1 14       	cp	r12, r1
    45e0:	d1 04       	cpc	r13, r1
    45e2:	e1 04       	cpc	r14, r1
    45e4:	f1 04       	cpc	r15, r1
    45e6:	09 f0       	breq	.+2      	; 0x45ea <findFiles+0x246>
    45e8:	00 cf       	rjmp	.-512    	; 0x43ea <findFiles+0x46>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    45ea:	00 e0       	ldi	r16, 0x00	; 0
    45ec:	10 e0       	ldi	r17, 0x00	; 0
   if(cluster == 0) 
   {//transmitString_F(PSTR("Error in getting cluster"));  
	   return 0;}
 }
return 0;
}
    45ee:	c8 01       	movw	r24, r16
    45f0:	26 96       	adiw	r28, 0x06	; 6
    45f2:	cd bf       	out	0x3d, r28	; 61
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	df 91       	pop	r29
    45f8:	cf 91       	pop	r28
    45fa:	1f 91       	pop	r17
    45fc:	0f 91       	pop	r16
    45fe:	ff 90       	pop	r15
    4600:	ef 90       	pop	r14
    4602:	df 90       	pop	r13
    4604:	cf 90       	pop	r12
    4606:	bf 90       	pop	r11
    4608:	af 90       	pop	r10
    460a:	9f 90       	pop	r9
    460c:	8f 90       	pop	r8
    460e:	7f 90       	pop	r7
    4610:	6f 90       	pop	r6
    4612:	5f 90       	pop	r5
    4614:	4f 90       	pop	r4
    4616:	3f 90       	pop	r3
    4618:	2f 90       	pop	r2
    461a:	08 95       	ret

0000461c <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    461c:	cf 93       	push	r28
    461e:	df 93       	push	r29
    4620:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    4622:	0e 94 67 20 	call	0x40ce	; 0x40ce <convertFileName>
  if(error) return;
    4626:	88 23       	and	r24, r24
    4628:	21 f4       	brne	.+8      	; 0x4632 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    462a:	82 e0       	ldi	r24, 0x02	; 2
    462c:	be 01       	movw	r22, r28
    462e:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <findFiles>
}
    4632:	df 91       	pop	r29
    4634:	cf 91       	pop	r28
    4636:	08 95       	ret

00004638 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    4638:	8f 92       	push	r8
    463a:	9f 92       	push	r9
    463c:	af 92       	push	r10
    463e:	bf 92       	push	r11
    4640:	cf 92       	push	r12
    4642:	df 92       	push	r13
    4644:	ef 92       	push	r14
    4646:	ff 92       	push	r15
    4648:	0f 93       	push	r16
    464a:	1f 93       	push	r17
    464c:	cf 93       	push	r28
    464e:	df 93       	push	r29
    4650:	18 2f       	mov	r17, r24
    4652:	eb 01       	movw	r28, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    4654:	cb 01       	movw	r24, r22
    4656:	0e 94 67 20 	call	0x40ce	; 0x40ce <convertFileName>
if(error) return 2;
    465a:	88 23       	and	r24, r24
    465c:	09 f0       	breq	.+2      	; 0x4660 <readFile+0x28>
    465e:	4a c0       	rjmp	.+148    	; 0x46f4 <readFile+0xbc>

dir = findFiles (GET_FILE, fileName); //get the file location
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	be 01       	movw	r22, r28
    4664:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <findFiles>
    4668:	fc 01       	movw	r30, r24
if(dir == 0) 
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	29 f4       	brne	.+10     	; 0x4678 <readFile+0x40>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	11 23       	and	r17, r17
    4672:	09 f4       	brne	.+2      	; 0x4676 <readFile+0x3e>
    4674:	42 c0       	rjmp	.+132    	; 0x46fa <readFile+0xc2>
    4676:	3c c0       	rjmp	.+120    	; 0x46f0 <readFile+0xb8>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    4678:	11 30       	cpi	r17, 0x01	; 1
    467a:	f1 f1       	breq	.+124    	; 0x46f8 <readFile+0xc0>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    467c:	c4 88       	ldd	r12, Z+20	; 0x14
    467e:	d5 88       	ldd	r13, Z+21	; 0x15
    4680:	ee 24       	eor	r14, r14
    4682:	ff 24       	eor	r15, r15
    4684:	76 01       	movw	r14, r12
    4686:	dd 24       	eor	r13, r13
    4688:	cc 24       	eor	r12, r12
    468a:	82 8d       	ldd	r24, Z+26	; 0x1a
    468c:	93 8d       	ldd	r25, Z+27	; 0x1b
    468e:	a0 e0       	ldi	r26, 0x00	; 0
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	c8 2a       	or	r12, r24
    4694:	d9 2a       	or	r13, r25
    4696:	ea 2a       	or	r14, r26
    4698:	fb 2a       	or	r15, r27
TX_NEWLINE;
TX_NEWLINE;
*/
while(1)
{
  firstSector = getFirstSector (cluster);
    469a:	c7 01       	movw	r24, r14
    469c:	b6 01       	movw	r22, r12
    469e:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <getFirstSector>
    46a2:	4b 01       	movw	r8, r22
    46a4:	5c 01       	movw	r10, r24

  for(j=0; j<sectorPerCluster; j++)
    46a6:	c0 e0       	ldi	r28, 0x00	; 0
    46a8:	0b c0       	rjmp	.+22     	; 0x46c0 <readFile+0x88>
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    46aa:	c5 01       	movw	r24, r10
    46ac:	b4 01       	movw	r22, r8
    46ae:	6c 0f       	add	r22, r28
    46b0:	71 1d       	adc	r23, r1
    46b2:	81 1d       	adc	r24, r1
    46b4:	91 1d       	adc	r25, r1
    46b6:	48 ec       	ldi	r20, 0xC8	; 200
    46b8:	53 e2       	ldi	r21, 0x23	; 35
    46ba:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
*/
while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    46be:	cf 5f       	subi	r28, 0xFF	; 255
    46c0:	80 91 47 40 	lds	r24, 0x4047
    46c4:	90 91 48 40 	lds	r25, 0x4048
    46c8:	2c 2f       	mov	r18, r28
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	28 17       	cp	r18, r24
    46ce:	39 07       	cpc	r19, r25
    46d0:	60 f3       	brcs	.-40     	; 0x46aa <readFile+0x72>
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
	*/
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    46d2:	c7 01       	movw	r24, r14
    46d4:	b6 01       	movw	r22, r12
    46d6:	40 e0       	ldi	r20, 0x00	; 0
    46d8:	00 e0       	ldi	r16, 0x00	; 0
    46da:	10 e0       	ldi	r17, 0x00	; 0
    46dc:	98 01       	movw	r18, r16
    46de:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
    46e2:	6b 01       	movw	r12, r22
    46e4:	7c 01       	movw	r14, r24
  if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
    46e6:	61 15       	cp	r22, r1
    46e8:	71 05       	cpc	r23, r1
    46ea:	81 05       	cpc	r24, r1
    46ec:	91 05       	cpc	r25, r1
    46ee:	a9 f6       	brne	.-86     	; 0x469a <readFile+0x62>
	  return 0;}
    46f0:	80 e0       	ldi	r24, 0x00	; 0
    46f2:	03 c0       	rjmp	.+6      	; 0x46fa <readFile+0xc2>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    46f4:	82 e0       	ldi	r24, 0x02	; 2
    46f6:	01 c0       	rjmp	.+2      	; 0x46fa <readFile+0xc2>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    46f8:	81 e0       	ldi	r24, 0x01	; 1
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
	  return 0;}
}
return 0;
}
    46fa:	df 91       	pop	r29
    46fc:	cf 91       	pop	r28
    46fe:	1f 91       	pop	r17
    4700:	0f 91       	pop	r16
    4702:	ff 90       	pop	r15
    4704:	ef 90       	pop	r14
    4706:	df 90       	pop	r13
    4708:	cf 90       	pop	r12
    470a:	bf 90       	pop	r11
    470c:	af 90       	pop	r10
    470e:	9f 90       	pop	r9
    4710:	8f 90       	pop	r8
    4712:	08 95       	ret

00004714 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
    4714:	2f 92       	push	r2
    4716:	3f 92       	push	r3
    4718:	4f 92       	push	r4
    471a:	5f 92       	push	r5
    471c:	6f 92       	push	r6
    471e:	7f 92       	push	r7
    4720:	8f 92       	push	r8
    4722:	9f 92       	push	r9
    4724:	af 92       	push	r10
    4726:	bf 92       	push	r11
    4728:	cf 92       	push	r12
    472a:	df 92       	push	r13
    472c:	ef 92       	push	r14
    472e:	ff 92       	push	r15
    4730:	0f 93       	push	r16
    4732:	1f 93       	push	r17
    4734:	cf 93       	push	r28
    4736:	df 93       	push	r29
    4738:	cd b7       	in	r28, 0x3d	; 61
    473a:	de b7       	in	r29, 0x3e	; 62
    473c:	27 97       	sbiw	r28, 0x07	; 7
    473e:	cd bf       	out	0x3d, r28	; 61
    4740:	de bf       	out	0x3e, r29	; 62
    4742:	8d 83       	std	Y+5, r24	; 0x05
    4744:	9e 83       	std	Y+6, r25	; 0x06
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	6d 81       	ldd	r22, Y+5	; 0x05
    474a:	7e 81       	ldd	r23, Y+6	; 0x06
    474c:	0e 94 1c 23 	call	0x4638	; 0x4638 <readFile>

if(j == 1) 
    4750:	81 30       	cpi	r24, 0x01	; 1
    4752:	09 f0       	breq	.+2      	; 0x4756 <writeFile+0x42>
    4754:	6b c0       	rjmp	.+214    	; 0x482c <writeFile+0x118>
{
  //transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
  cluster = appendStartCluster;
    4756:	c0 90 4f 40 	lds	r12, 0x404F
    475a:	d0 90 50 40 	lds	r13, 0x4050
    475e:	e0 90 51 40 	lds	r14, 0x4051
    4762:	f0 90 52 40 	lds	r15, 0x4052
  clusterCount=0;
    4766:	88 24       	eor	r8, r8
    4768:	99 24       	eor	r9, r9
    476a:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    476c:	c7 01       	movw	r24, r14
    476e:	b6 01       	movw	r22, r12
    4770:	40 e0       	ldi	r20, 0x00	; 0
    4772:	00 e0       	ldi	r16, 0x00	; 0
    4774:	10 e0       	ldi	r17, 0x00	; 0
    4776:	98 01       	movw	r18, r16
    4778:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    if(nextCluster == EOF) break;
    4780:	8f 3f       	cpi	r24, 0xFF	; 255
    4782:	2f ef       	ldi	r18, 0xFF	; 255
    4784:	92 07       	cpc	r25, r18
    4786:	2f ef       	ldi	r18, 0xFF	; 255
    4788:	a2 07       	cpc	r26, r18
    478a:	2f e0       	ldi	r18, 0x0F	; 15
    478c:	b2 07       	cpc	r27, r18
    478e:	41 f0       	breq	.+16     	; 0x47a0 <writeFile+0x8c>
	cluster = nextCluster;
	clusterCount++;
    4790:	08 94       	sec
    4792:	81 1c       	adc	r8, r1
    4794:	91 1c       	adc	r9, r1
    4796:	a1 1c       	adc	r10, r1
    4798:	b1 1c       	adc	r11, r1
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    479a:	6c 01       	movw	r12, r24
    479c:	7d 01       	movw	r14, r26
	clusterCount++;
  }
    479e:	e6 cf       	rjmp	.-52     	; 0x476c <writeFile+0x58>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    47a0:	20 91 47 40 	lds	r18, 0x4047
    47a4:	30 91 48 40 	lds	r19, 0x4048
    47a8:	60 91 3d 40 	lds	r22, 0x403D
    47ac:	70 91 3e 40 	lds	r23, 0x403E
    47b0:	00 91 3d 40 	lds	r16, 0x403D
    47b4:	10 91 3e 40 	lds	r17, 0x403E
    47b8:	80 e0       	ldi	r24, 0x00	; 0
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	40 e0       	ldi	r20, 0x00	; 0
    47be:	50 e0       	ldi	r21, 0x00	; 0
    47c0:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    47c4:	a5 01       	movw	r20, r10
    47c6:	94 01       	movw	r18, r8
    47c8:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    47cc:	ab 01       	movw	r20, r22
    47ce:	bc 01       	movw	r22, r24
    47d0:	80 91 39 40 	lds	r24, 0x4039
    47d4:	90 91 3a 40 	lds	r25, 0x403A
    47d8:	a0 91 3b 40 	lds	r26, 0x403B
    47dc:	b0 91 3c 40 	lds	r27, 0x403C
    47e0:	84 1b       	sub	r24, r20
    47e2:	95 0b       	sbc	r25, r21
    47e4:	a6 0b       	sbc	r26, r22
    47e6:	b7 0b       	sbc	r27, r23
    47e8:	98 01       	movw	r18, r16
    47ea:	40 e0       	ldi	r20, 0x00	; 0
    47ec:	50 e0       	ldi	r21, 0x00	; 0
    47ee:	bc 01       	movw	r22, r24
    47f0:	cd 01       	movw	r24, r26
    47f2:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    47f6:	82 2e       	mov	r8, r18
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    47f8:	b6 01       	movw	r22, r12
    47fa:	c7 01       	movw	r24, r14
    47fc:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <getFirstSector>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	99 24       	eor	r9, r9
    4806:	88 0e       	add	r8, r24
    4808:	99 1e       	adc	r9, r25
	  SD_read_block (startBlock,SDBuffer);
    480a:	b4 01       	movw	r22, r8
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	40 ec       	ldi	r20, 0xC0	; 192
    4812:	51 e2       	ldi	r21, 0x21	; 33
    4814:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
	  i = fileSize % bytesPerSector;
    4818:	80 91 3d 40 	lds	r24, 0x403D
    481c:	90 91 3e 40 	lds	r25, 0x403E
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
    4820:	1b 82       	std	Y+3, r1	; 0x03
    4822:	1c 82       	std	Y+4, r1	; 0x04
    4824:	19 82       	std	Y+1, r1	; 0x01
    4826:	1a 82       	std	Y+2, r1	; 0x02
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    4828:	11 e0       	ldi	r17, 0x01	; 1
    482a:	42 c0       	rjmp	.+132    	; 0x48b0 <writeFile+0x19c>
}
else if(j == 2) 
    482c:	82 30       	cpi	r24, 0x02	; 2
    482e:	09 f4       	brne	.+2      	; 0x4832 <writeFile+0x11e>
    4830:	7d c1       	rjmp	.+762    	; 0x4b2c <writeFile+0x418>
else
{
 // TX_NEWLINE;
 // transmitString_F(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    4832:	82 e0       	ldi	r24, 0x02	; 2
    4834:	60 e0       	ldi	r22, 0x00	; 0
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	a9 01       	movw	r20, r18
    483c:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <getSetFreeCluster>
  if(cluster > totalClusters)
    4840:	00 91 3f 40 	lds	r16, 0x403F
    4844:	10 91 40 40 	lds	r17, 0x4040
    4848:	20 91 41 40 	lds	r18, 0x4041
    484c:	30 91 42 40 	lds	r19, 0x4042
    4850:	06 17       	cp	r16, r22
    4852:	17 07       	cpc	r17, r23
    4854:	28 07       	cpc	r18, r24
    4856:	39 07       	cpc	r19, r25
    4858:	40 f4       	brcc	.+16     	; 0x486a <writeFile+0x156>
     cluster = rootCluster;
    485a:	60 91 43 40 	lds	r22, 0x4043
    485e:	70 91 44 40 	lds	r23, 0x4044
    4862:	80 91 45 40 	lds	r24, 0x4045
    4866:	90 91 46 40 	lds	r25, 0x4046

  cluster = searchNextFreeCluster(cluster);
    486a:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <searchNextFreeCluster>
    486e:	6b 01       	movw	r12, r22
    4870:	7c 01       	movw	r14, r24
   if(cluster == 0)
    4872:	61 15       	cp	r22, r1
    4874:	71 05       	cpc	r23, r1
    4876:	81 05       	cpc	r24, r1
    4878:	91 05       	cpc	r25, r1
    487a:	09 f4       	brne	.+2      	; 0x487e <writeFile+0x16a>
    487c:	59 c1       	rjmp	.+690    	; 0x4b30 <writeFile+0x41c>
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  */
	  return 2;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    487e:	41 e0       	ldi	r20, 0x01	; 1
    4880:	0f ef       	ldi	r16, 0xFF	; 255
    4882:	1f ef       	ldi	r17, 0xFF	; 255
    4884:	2f ef       	ldi	r18, 0xFF	; 255
    4886:	3f e0       	ldi	r19, 0x0F	; 15
    4888:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    488c:	e9 82       	std	Y+1, r14	; 0x01
    488e:	fa 82       	std	Y+2, r15	; 0x02
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    4890:	cb 82       	std	Y+3, r12	; 0x03
    4892:	dc 82       	std	Y+4, r13	; 0x04
  fileSize = 0;
    4894:	10 92 39 40 	sts	0x4039, r1
    4898:	10 92 3a 40 	sts	0x403A, r1
    489c:	10 92 3b 40 	sts	0x403B, r1
    48a0:	10 92 3c 40 	sts	0x403C, r1
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    48a4:	c7 01       	movw	r24, r14
    48a6:	b6 01       	movw	r22, r12
    48a8:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <getFirstSector>
    48ac:	4b 01       	movw	r8, r22
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    48ae:	10 e0       	ldi	r17, 0x00	; 0
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid
	 */ 
	// {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	  // i=0;
	  fileSize += 512;
    48b0:	80 91 39 40 	lds	r24, 0x4039
    48b4:	90 91 3a 40 	lds	r25, 0x403A
    48b8:	a0 91 3b 40 	lds	r26, 0x403B
    48bc:	b0 91 3c 40 	lds	r27, 0x403C
    48c0:	80 50       	subi	r24, 0x00	; 0
    48c2:	9e 4f       	sbci	r25, 0xFE	; 254
    48c4:	af 4f       	sbci	r26, 0xFF	; 255
    48c6:	bf 4f       	sbci	r27, 0xFF	; 255
    48c8:	80 93 39 40 	sts	0x4039, r24
    48cc:	90 93 3a 40 	sts	0x403A, r25
    48d0:	a0 93 3b 40 	sts	0x403B, r26
    48d4:	b0 93 3c 40 	sts	0x403C, r27
	   SD_write_block (startBlock,FRAMReadBuffer,512);
    48d8:	b4 01       	movw	r22, r8
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	48 ec       	ldi	r20, 0xC8	; 200
    48e0:	53 e2       	ldi	r21, 0x23	; 35
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	32 e0       	ldi	r19, 0x02	; 2
    48e6:	0e 94 19 1a 	call	0x3432	; 0x3432 <SD_write_block>
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
    48ea:	80 91 47 40 	lds	r24, 0x4047
    48ee:	90 91 48 40 	lds	r25, 0x4048

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    48f2:	82 e0       	ldi	r24, 0x02	; 2
    48f4:	61 e0       	ldi	r22, 0x01	; 1
    48f6:	a7 01       	movw	r20, r14
    48f8:	96 01       	movw	r18, r12
    48fa:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <getSetFreeCluster>

//error = getDateTime_FAT();    //get current date & time from the RTC
//if(error) { dateFAT = 0; timeFAT = 0;}

if(appendFile)  //executes this loop if file is to be appended
    48fe:	11 23       	and	r17, r17
    4900:	f1 f1       	breq	.+124    	; 0x497e <writeFile+0x26a>
{
  SD_read_block (appendFileSector,SDBuffer);    
    4902:	60 91 59 40 	lds	r22, 0x4059
    4906:	70 91 5a 40 	lds	r23, 0x405A
    490a:	80 91 5b 40 	lds	r24, 0x405B
    490e:	90 91 5c 40 	lds	r25, 0x405C
    4912:	40 ec       	ldi	r20, 0xC0	; 192
    4914:	51 e2       	ldi	r21, 0x21	; 33
    4916:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
  dir = (struct dir_Structure *) &SDBuffer[appendFileLocation]; 
    491a:	e0 91 c0 23 	lds	r30, 0x23C0
    491e:	f0 91 c1 23 	lds	r31, 0x23C1
    4922:	e0 54       	subi	r30, 0x40	; 64
    4924:	fe 4d       	sbci	r31, 0xDE	; 222

  dir->lastAccessDate = 0;   //date of last access ignored
    4926:	12 8a       	std	Z+18, r1	; 0x12
    4928:	13 8a       	std	Z+19, r1	; 0x13
  //dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
  //dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
  extraMemory = fileSize - dir->fileSize;
    492a:	80 91 39 40 	lds	r24, 0x4039
    492e:	90 91 3a 40 	lds	r25, 0x403A
    4932:	a0 91 3b 40 	lds	r26, 0x403B
    4936:	b0 91 3c 40 	lds	r27, 0x403C
    493a:	44 8d       	ldd	r20, Z+28	; 0x1c
    493c:	55 8d       	ldd	r21, Z+29	; 0x1d
    493e:	66 8d       	ldd	r22, Z+30	; 0x1e
    4940:	77 8d       	ldd	r23, Z+31	; 0x1f
    4942:	6c 01       	movw	r12, r24
    4944:	7d 01       	movw	r14, r26
    4946:	c4 1a       	sub	r12, r20
    4948:	d5 0a       	sbc	r13, r21
    494a:	e6 0a       	sbc	r14, r22
    494c:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    494e:	84 8f       	std	Z+28, r24	; 0x1c
    4950:	95 8f       	std	Z+29, r25	; 0x1d
    4952:	a6 8f       	std	Z+30, r26	; 0x1e
    4954:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_write_block (appendFileSector,SDBuffer,512);
    4956:	60 91 59 40 	lds	r22, 0x4059
    495a:	70 91 5a 40 	lds	r23, 0x405A
    495e:	80 91 5b 40 	lds	r24, 0x405B
    4962:	90 91 5c 40 	lds	r25, 0x405C
    4966:	40 ec       	ldi	r20, 0xC0	; 192
    4968:	51 e2       	ldi	r21, 0x21	; 33
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	32 e0       	ldi	r19, 0x02	; 2
    496e:	0e 94 19 1a 	call	0x3432	; 0x3432 <SD_write_block>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	b7 01       	movw	r22, r14
    4976:	a6 01       	movw	r20, r12
    4978:	0e 94 78 21 	call	0x42f0	; 0x42f0 <freeMemoryUpdate>
    497c:	db c0       	rjmp	.+438    	; 0x4b34 <writeFile+0x420>
  return 0;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    497e:	80 90 43 40 	lds	r8, 0x4043
    4982:	90 90 44 40 	lds	r9, 0x4044
    4986:	a0 90 45 40 	lds	r10, 0x4045
    498a:	b0 90 46 40 	lds	r11, 0x4046
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    498e:	80 e0       	ldi	r24, 0x00	; 0

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    4990:	e0 e2       	ldi	r30, 0x20	; 32
    4992:	3e 2e       	mov	r3, r30
    4994:	28 2e       	mov	r2, r24
    4996:	02 c0       	rjmp	.+4      	; 0x499c <writeFile+0x288>
      }
   }
   if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
	   return 4;}
   
   prevCluster = cluster;
    4998:	46 01       	movw	r8, r12
    499a:	57 01       	movw	r10, r14

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    499c:	c5 01       	movw	r24, r10
    499e:	b4 01       	movw	r22, r8
    49a0:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <getFirstSector>
    49a4:	2b 01       	movw	r4, r22
    49a6:	3c 01       	movw	r6, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
    49a8:	80 e0       	ldi	r24, 0x00	; 0
    49aa:	2f 82       	std	Y+7, r2	; 0x07
    49ac:	28 2e       	mov	r2, r24
    49ae:	7b c0       	rjmp	.+246    	; 0x4aa6 <writeFile+0x392>
   {
     SD_read_block (firstSector + sector,SDBuffer);
    49b0:	73 01       	movw	r14, r6
    49b2:	62 01       	movw	r12, r4
    49b4:	c2 0c       	add	r12, r2
    49b6:	d1 1c       	adc	r13, r1
    49b8:	e1 1c       	adc	r14, r1
    49ba:	f1 1c       	adc	r15, r1
    49bc:	c7 01       	movw	r24, r14
    49be:	b6 01       	movw	r22, r12
    49c0:	40 ec       	ldi	r20, 0xC0	; 192
    49c2:	51 e2       	ldi	r21, 0x21	; 33
    49c4:	0e 94 b9 1a 	call	0x3572	; 0x3572 <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    49c8:	00 e2       	ldi	r16, 0x20	; 32
    49ca:	10 e0       	ldi	r17, 0x00	; 0
    49cc:	4f 81       	ldd	r20, Y+7	; 0x07
    49ce:	5f c0       	rjmp	.+190    	; 0x4a8e <writeFile+0x37a>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    49d0:	44 23       	and	r20, r20
    49d2:	09 f0       	breq	.+2      	; 0x49d6 <writeFile+0x2c2>
    49d4:	af c0       	rjmp	.+350    	; 0x4b34 <writeFile+0x420>
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    49d6:	b8 01       	movw	r22, r16
    49d8:	60 56       	subi	r22, 0x60	; 96
    49da:	7e 4d       	sbci	r23, 0xDE	; 222
    49dc:	c8 01       	movw	r24, r16
    49de:	80 54       	subi	r24, 0x40	; 64
    49e0:	9e 4d       	sbci	r25, 0xDE	; 222
    49e2:	fc 01       	movw	r30, r24
    49e4:	b0 97       	sbiw	r30, 0x20	; 32
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    49e6:	20 81       	ld	r18, Z
    49e8:	22 23       	and	r18, r18
    49ea:	21 f0       	breq	.+8      	; 0x49f4 <writeFile+0x2e0>
    49ec:	25 3e       	cpi	r18, 0xE5	; 229
    49ee:	09 f0       	breq	.+2      	; 0x49f2 <writeFile+0x2de>
    49f0:	4c c0       	rjmp	.+152    	; 0x4a8a <writeFile+0x376>
    49f2:	01 c0       	rjmp	.+2      	; 0x49f6 <writeFile+0x2e2>
    49f4:	40 e0       	ldi	r20, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    49f6:	a4 2f       	mov	r26, r20
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	2d 81       	ldd	r18, Y+5	; 0x05
    49fc:	3e 81       	ldd	r19, Y+6	; 0x06
    49fe:	2a 0f       	add	r18, r26
    4a00:	3b 1f       	adc	r19, r27
    4a02:	f9 01       	movw	r30, r18
    4a04:	20 81       	ld	r18, Z
    4a06:	fb 01       	movw	r30, r22
    4a08:	ea 0f       	add	r30, r26
    4a0a:	fb 1f       	adc	r31, r27
    4a0c:	20 83       	st	Z, r18
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    4a0e:	4f 5f       	subi	r20, 0xFF	; 255
    4a10:	4b 30       	cpi	r20, 0x0B	; 11
    4a12:	89 f7       	brne	.-30     	; 0x49f6 <writeFile+0x2e2>
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4a14:	fc 01       	movw	r30, r24
    4a16:	75 97       	sbiw	r30, 0x15	; 21

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    4a18:	30 82       	st	Z, r3
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	74 97       	sbiw	r30, 0x14	; 20
        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
    4a1e:	10 82       	st	Z, r1
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4a20:	fc 01       	movw	r30, r24
    4a22:	73 97       	sbiw	r30, 0x13	; 19
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
    4a24:	10 82       	st	Z, r1
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4a26:	fc 01       	movw	r30, r24
    4a28:	3e 97       	sbiw	r30, 0x0e	; 14
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
		  //dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
    4a2a:	10 82       	st	Z, r1
    4a2c:	11 82       	std	Z+1, r1	; 0x01
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4a2e:	fc 01       	movw	r30, r24
    4a30:	3c 97       	sbiw	r30, 0x0c	; 12
		  //dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
    4a32:	29 81       	ldd	r18, Y+1	; 0x01
    4a34:	3a 81       	ldd	r19, Y+2	; 0x02
    4a36:	20 83       	st	Z, r18
    4a38:	31 83       	std	Z+1, r19	; 0x01
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4a3a:	fc 01       	movw	r30, r24
    4a3c:	36 97       	sbiw	r30, 0x06	; 6
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
    4a3e:	ab 81       	ldd	r26, Y+3	; 0x03
    4a40:	bc 81       	ldd	r27, Y+4	; 0x04
    4a42:	a0 83       	st	Z, r26
    4a44:	b1 83       	std	Z+1, r27	; 0x01
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4a46:	fc 01       	movw	r30, r24
    4a48:	34 97       	sbiw	r30, 0x04	; 4
		  dir->lastAccessDate = 0;   	//date of last access ignored
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;
    4a4a:	80 91 39 40 	lds	r24, 0x4039
    4a4e:	90 91 3a 40 	lds	r25, 0x403A
    4a52:	a0 91 3b 40 	lds	r26, 0x403B
    4a56:	b0 91 3c 40 	lds	r27, 0x403C
    4a5a:	80 83       	st	Z, r24
    4a5c:	91 83       	std	Z+1, r25	; 0x01
    4a5e:	a2 83       	std	Z+2, r26	; 0x02
    4a60:	b3 83       	std	Z+3, r27	; 0x03

		  SD_write_block (firstSector + sector,SDBuffer,512);
    4a62:	c7 01       	movw	r24, r14
    4a64:	b6 01       	movw	r22, r12
    4a66:	40 ec       	ldi	r20, 0xC0	; 192
    4a68:	51 e2       	ldi	r21, 0x21	; 33
    4a6a:	20 e0       	ldi	r18, 0x00	; 0
    4a6c:	32 e0       	ldi	r19, 0x02	; 2
    4a6e:	0e 94 19 1a 	call	0x3432	; 0x3432 <SD_write_block>

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    4a72:	40 91 39 40 	lds	r20, 0x4039
    4a76:	50 91 3a 40 	lds	r21, 0x403A
    4a7a:	60 91 3b 40 	lds	r22, 0x403B
    4a7e:	70 91 3c 40 	lds	r23, 0x403C
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	0e 94 78 21 	call	0x42f0	; 0x42f0 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_write_block (firstSector + sector,SDBuffer,512);
		  fileCreatedFlag = 1;
    4a88:	41 e0       	ldi	r20, 0x01	; 1

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    4a8a:	00 5e       	subi	r16, 0xE0	; 224
    4a8c:	1f 4f       	sbci	r17, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    4a8e:	20 91 3d 40 	lds	r18, 0x403D
    4a92:	30 91 3e 40 	lds	r19, 0x403E
    4a96:	c8 01       	movw	r24, r16
    4a98:	80 97       	sbiw	r24, 0x20	; 32
    4a9a:	82 17       	cp	r24, r18
    4a9c:	93 07       	cpc	r25, r19
    4a9e:	08 f4       	brcc	.+2      	; 0x4aa2 <writeFile+0x38e>
    4aa0:	97 cf       	rjmp	.-210    	; 0x49d0 <writeFile+0x2bc>
    4aa2:	4f 83       	std	Y+7, r20	; 0x07

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    4aa4:	23 94       	inc	r2
    4aa6:	20 91 47 40 	lds	r18, 0x4047
    4aaa:	30 91 48 40 	lds	r19, 0x4048
    4aae:	82 2d       	mov	r24, r2
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	82 17       	cp	r24, r18
    4ab4:	93 07       	cpc	r25, r19
    4ab6:	08 f4       	brcc	.+2      	; 0x4aba <writeFile+0x3a6>
    4ab8:	7b cf       	rjmp	.-266    	; 0x49b0 <writeFile+0x29c>
    4aba:	2f 80       	ldd	r2, Y+7	; 0x07
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    4abc:	c5 01       	movw	r24, r10
    4abe:	b4 01       	movw	r22, r8
    4ac0:	40 e0       	ldi	r20, 0x00	; 0
    4ac2:	00 e0       	ldi	r16, 0x00	; 0
    4ac4:	10 e0       	ldi	r17, 0x00	; 0
    4ac6:	98 01       	movw	r18, r16
    4ac8:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
    4acc:	6b 01       	movw	r12, r22
    4ace:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    4ad0:	67 3f       	cpi	r22, 0xF7	; 247
    4ad2:	bf ef       	ldi	r27, 0xFF	; 255
    4ad4:	7b 07       	cpc	r23, r27
    4ad6:	bf ef       	ldi	r27, 0xFF	; 255
    4ad8:	8b 07       	cpc	r24, r27
    4ada:	bf e0       	ldi	r27, 0x0F	; 15
    4adc:	9b 07       	cpc	r25, r27
    4ade:	f0 f0       	brcs	.+60     	; 0x4b1c <writeFile+0x408>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    4ae0:	6f 3f       	cpi	r22, 0xFF	; 255
    4ae2:	ef ef       	ldi	r30, 0xFF	; 255
    4ae4:	7e 07       	cpc	r23, r30
    4ae6:	ef ef       	ldi	r30, 0xFF	; 255
    4ae8:	8e 07       	cpc	r24, r30
    4aea:	ef e0       	ldi	r30, 0x0F	; 15
    4aec:	9e 07       	cpc	r25, r30
    4aee:	21 f5       	brne	.+72     	; 0x4b38 <writeFile+0x424>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    4af0:	c5 01       	movw	r24, r10
    4af2:	b4 01       	movw	r22, r8
    4af4:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <searchNextFreeCluster>
    4af8:	6b 01       	movw	r12, r22
    4afa:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    4afc:	c5 01       	movw	r24, r10
    4afe:	b4 01       	movw	r22, r8
    4b00:	41 e0       	ldi	r20, 0x01	; 1
    4b02:	97 01       	movw	r18, r14
    4b04:	86 01       	movw	r16, r12
    4b06:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    4b0a:	c7 01       	movw	r24, r14
    4b0c:	b6 01       	movw	r22, r12
    4b0e:	41 e0       	ldi	r20, 0x01	; 1
    4b10:	0f ef       	ldi	r16, 0xFF	; 255
    4b12:	1f ef       	ldi	r17, 0xFF	; 255
    4b14:	2f ef       	ldi	r18, 0xFF	; 255
    4b16:	3f e0       	ldi	r19, 0x0F	; 15
    4b18:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <getSetNextCluster>
      {	
	    //transmitString_F(PSTR("End of Cluster Chain")); 
	    return 3;
      }
   }
   if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
    4b1c:	c1 14       	cp	r12, r1
    4b1e:	d1 04       	cpc	r13, r1
    4b20:	e1 04       	cpc	r14, r1
    4b22:	f1 04       	cpc	r15, r1
    4b24:	09 f0       	breq	.+2      	; 0x4b28 <writeFile+0x414>
    4b26:	38 cf       	rjmp	.-400    	; 0x4998 <writeFile+0x284>
	   return 4;}
    4b28:	84 e0       	ldi	r24, 0x04	; 4
    4b2a:	07 c0       	rjmp	.+14     	; 0x4b3a <writeFile+0x426>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
   return 1; //invalid file name
    4b2c:	81 e0       	ldi	r24, 0x01	; 1
    4b2e:	05 c0       	rjmp	.+10     	; 0x4b3a <writeFile+0x426>
   {
	   /*
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  */
	  return 2;
    4b30:	82 e0       	ldi	r24, 0x02	; 2
    4b32:	03 c0       	rjmp	.+6      	; 0x4b3a <writeFile+0x426>

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	01 c0       	rjmp	.+2      	; 0x4b3a <writeFile+0x426>
      } 

      else
      {	
	    //transmitString_F(PSTR("End of Cluster Chain")); 
	    return 3;
    4b38:	83 e0       	ldi	r24, 0x03	; 3
   
   prevCluster = cluster;
 }
 
 return 0;
}
    4b3a:	27 96       	adiw	r28, 0x07	; 7
    4b3c:	cd bf       	out	0x3d, r28	; 61
    4b3e:	de bf       	out	0x3e, r29	; 62
    4b40:	df 91       	pop	r29
    4b42:	cf 91       	pop	r28
    4b44:	1f 91       	pop	r17
    4b46:	0f 91       	pop	r16
    4b48:	ff 90       	pop	r15
    4b4a:	ef 90       	pop	r14
    4b4c:	df 90       	pop	r13
    4b4e:	cf 90       	pop	r12
    4b50:	bf 90       	pop	r11
    4b52:	af 90       	pop	r10
    4b54:	9f 90       	pop	r9
    4b56:	8f 90       	pop	r8
    4b58:	7f 90       	pop	r7
    4b5a:	6f 90       	pop	r6
    4b5c:	5f 90       	pop	r5
    4b5e:	4f 90       	pop	r4
    4b60:	3f 90       	pop	r3
    4b62:	2f 90       	pop	r2
    4b64:	08 95       	ret

00004b66 <__muldi3>:
    4b66:	a0 e3       	ldi	r26, 0x30	; 48
    4b68:	b0 e0       	ldi	r27, 0x00	; 0
    4b6a:	e9 eb       	ldi	r30, 0xB9	; 185
    4b6c:	f5 e2       	ldi	r31, 0x25	; 37
    4b6e:	0c 94 b8 2f 	jmp	0x5f70	; 0x5f70 <__prologue_saves__+0x4>
    4b72:	29 8f       	std	Y+25, r18	; 0x19
    4b74:	3a 8f       	std	Y+26, r19	; 0x1a
    4b76:	4b 8f       	std	Y+27, r20	; 0x1b
    4b78:	5c 8f       	std	Y+28, r21	; 0x1c
    4b7a:	6d 8f       	std	Y+29, r22	; 0x1d
    4b7c:	7e 8f       	std	Y+30, r23	; 0x1e
    4b7e:	8f 8f       	std	Y+31, r24	; 0x1f
    4b80:	98 a3       	lds	r25, 0x58
    4b82:	a9 8a       	std	Y+17, r10	; 0x11
    4b84:	ba 8a       	std	Y+18, r11	; 0x12
    4b86:	cb 8a       	std	Y+19, r12	; 0x13
    4b88:	dc 8a       	std	Y+20, r13	; 0x14
    4b8a:	ed 8a       	std	Y+21, r14	; 0x15
    4b8c:	fe 8a       	std	Y+22, r15	; 0x16
    4b8e:	0f 8b       	std	Y+23, r16	; 0x17
    4b90:	18 8f       	std	Y+24, r17	; 0x18
    4b92:	09 8d       	ldd	r16, Y+25	; 0x19
    4b94:	1a 8d       	ldd	r17, Y+26	; 0x1a
    4b96:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4b98:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4b9a:	09 a3       	lds	r16, 0x59
    4b9c:	1a a3       	lds	r17, 0x5a
    4b9e:	2b a3       	lds	r18, 0x5b
    4ba0:	3c a3       	lds	r19, 0x5c
    4ba2:	68 01       	movw	r12, r16
    4ba4:	79 01       	movw	r14, r18
    4ba6:	8f ef       	ldi	r24, 0xFF	; 255
    4ba8:	9f ef       	ldi	r25, 0xFF	; 255
    4baa:	a0 e0       	ldi	r26, 0x00	; 0
    4bac:	b0 e0       	ldi	r27, 0x00	; 0
    4bae:	c8 22       	and	r12, r24
    4bb0:	d9 22       	and	r13, r25
    4bb2:	ea 22       	and	r14, r26
    4bb4:	fb 22       	and	r15, r27
    4bb6:	89 01       	movw	r16, r18
    4bb8:	22 27       	eor	r18, r18
    4bba:	33 27       	eor	r19, r19
    4bbc:	09 a7       	lds	r16, 0x79
    4bbe:	1a a7       	lds	r17, 0x7a
    4bc0:	2b a7       	lds	r18, 0x7b
    4bc2:	3c a7       	lds	r19, 0x7c
    4bc4:	09 89       	ldd	r16, Y+17	; 0x11
    4bc6:	1a 89       	ldd	r17, Y+18	; 0x12
    4bc8:	2b 89       	ldd	r18, Y+19	; 0x13
    4bca:	3c 89       	ldd	r19, Y+20	; 0x14
    4bcc:	0d a3       	lds	r16, 0x5d
    4bce:	1e a3       	lds	r17, 0x5e
    4bd0:	2f a3       	lds	r18, 0x5f
    4bd2:	38 a7       	lds	r19, 0x78
    4bd4:	48 01       	movw	r8, r16
    4bd6:	59 01       	movw	r10, r18
    4bd8:	88 22       	and	r8, r24
    4bda:	99 22       	and	r9, r25
    4bdc:	aa 22       	and	r10, r26
    4bde:	bb 22       	and	r11, r27
    4be0:	29 01       	movw	r4, r18
    4be2:	66 24       	eor	r6, r6
    4be4:	77 24       	eor	r7, r7
    4be6:	c5 01       	movw	r24, r10
    4be8:	b4 01       	movw	r22, r8
    4bea:	a7 01       	movw	r20, r14
    4bec:	96 01       	movw	r18, r12
    4bee:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    4bf2:	6d a7       	lds	r22, 0x7d
    4bf4:	7e a7       	lds	r23, 0x7e
    4bf6:	8f a7       	lds	r24, 0x7f
    4bf8:	98 ab       	sts	0x58, r25
    4bfa:	c3 01       	movw	r24, r6
    4bfc:	b2 01       	movw	r22, r4
    4bfe:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    4c02:	6b 01       	movw	r12, r22
    4c04:	7c 01       	movw	r14, r24
    4c06:	c5 01       	movw	r24, r10
    4c08:	b4 01       	movw	r22, r8
    4c0a:	29 a5       	lds	r18, 0x69
    4c0c:	3a a5       	lds	r19, 0x6a
    4c0e:	4b a5       	lds	r20, 0x6b
    4c10:	5c a5       	lds	r21, 0x6c
    4c12:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    4c16:	4b 01       	movw	r8, r22
    4c18:	5c 01       	movw	r10, r24
    4c1a:	c3 01       	movw	r24, r6
    4c1c:	b2 01       	movw	r22, r4
    4c1e:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    4c22:	ab 01       	movw	r20, r22
    4c24:	bc 01       	movw	r22, r24
    4c26:	c8 0c       	add	r12, r8
    4c28:	d9 1c       	adc	r13, r9
    4c2a:	ea 1c       	adc	r14, r10
    4c2c:	fb 1c       	adc	r15, r11
    4c2e:	0d a5       	lds	r16, 0x6d
    4c30:	1e a5       	lds	r17, 0x6e
    4c32:	2f a5       	lds	r18, 0x6f
    4c34:	38 a9       	sts	0x48, r19
    4c36:	c9 01       	movw	r24, r18
    4c38:	aa 27       	eor	r26, r26
    4c3a:	bb 27       	eor	r27, r27
    4c3c:	c8 0e       	add	r12, r24
    4c3e:	d9 1e       	adc	r13, r25
    4c40:	ea 1e       	adc	r14, r26
    4c42:	fb 1e       	adc	r15, r27
    4c44:	c8 14       	cp	r12, r8
    4c46:	d9 04       	cpc	r13, r9
    4c48:	ea 04       	cpc	r14, r10
    4c4a:	fb 04       	cpc	r15, r11
    4c4c:	20 f4       	brcc	.+8      	; 0x4c56 <__muldi3+0xf0>
    4c4e:	40 50       	subi	r20, 0x00	; 0
    4c50:	50 40       	sbci	r21, 0x00	; 0
    4c52:	6f 4f       	sbci	r22, 0xFF	; 255
    4c54:	7f 4f       	sbci	r23, 0xFF	; 255
    4c56:	c7 01       	movw	r24, r14
    4c58:	aa 27       	eor	r26, r26
    4c5a:	bb 27       	eor	r27, r27
    4c5c:	84 0f       	add	r24, r20
    4c5e:	95 1f       	adc	r25, r21
    4c60:	a6 1f       	adc	r26, r22
    4c62:	b7 1f       	adc	r27, r23
    4c64:	8d 83       	std	Y+5, r24	; 0x05
    4c66:	9e 83       	std	Y+6, r25	; 0x06
    4c68:	af 83       	std	Y+7, r26	; 0x07
    4c6a:	b8 87       	std	Y+8, r27	; 0x08
    4c6c:	76 01       	movw	r14, r12
    4c6e:	dd 24       	eor	r13, r13
    4c70:	cc 24       	eor	r12, r12
    4c72:	4d a5       	lds	r20, 0x6d
    4c74:	5e a5       	lds	r21, 0x6e
    4c76:	6f a5       	lds	r22, 0x6f
    4c78:	78 a9       	sts	0x48, r23
    4c7a:	60 70       	andi	r22, 0x00	; 0
    4c7c:	70 70       	andi	r23, 0x00	; 0
    4c7e:	c4 0e       	add	r12, r20
    4c80:	d5 1e       	adc	r13, r21
    4c82:	e6 1e       	adc	r14, r22
    4c84:	f7 1e       	adc	r15, r23
    4c86:	c9 82       	std	Y+1, r12	; 0x01
    4c88:	da 82       	std	Y+2, r13	; 0x02
    4c8a:	eb 82       	std	Y+3, r14	; 0x03
    4c8c:	fc 82       	std	Y+4, r15	; 0x04
    4c8e:	1c 2d       	mov	r17, r12
    4c90:	0a 81       	ldd	r16, Y+2	; 0x02
    4c92:	8b 80       	ldd	r8, Y+3	; 0x03
    4c94:	4c 80       	ldd	r4, Y+4	; 0x04
    4c96:	8d 87       	std	Y+13, r24	; 0x0d
    4c98:	8e 81       	ldd	r24, Y+6	; 0x06
    4c9a:	8e 87       	std	Y+14, r24	; 0x0e
    4c9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c9e:	8f 87       	std	Y+15, r24	; 0x0f
    4ca0:	88 85       	ldd	r24, Y+8	; 0x08
    4ca2:	88 8b       	std	Y+16, r24	; 0x10
    4ca4:	2d 89       	ldd	r18, Y+21	; 0x15
    4ca6:	3e 89       	ldd	r19, Y+22	; 0x16
    4ca8:	4f 89       	ldd	r20, Y+23	; 0x17
    4caa:	58 8d       	ldd	r21, Y+24	; 0x18
    4cac:	69 a1       	lds	r22, 0x49
    4cae:	7a a1       	lds	r23, 0x4a
    4cb0:	8b a1       	lds	r24, 0x4b
    4cb2:	9c a1       	lds	r25, 0x4c
    4cb4:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    4cb8:	6b 01       	movw	r12, r22
    4cba:	7c 01       	movw	r14, r24
    4cbc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4cbe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4cc0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4cc2:	58 a1       	lds	r21, 0x48
    4cc4:	6d a1       	lds	r22, 0x4d
    4cc6:	7e a1       	lds	r23, 0x4e
    4cc8:	8f a1       	lds	r24, 0x4f
    4cca:	98 a5       	lds	r25, 0x68
    4ccc:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	c8 0e       	add	r12, r24
    4cd6:	d9 1e       	adc	r13, r25
    4cd8:	ea 1e       	adc	r14, r26
    4cda:	fb 1e       	adc	r15, r27
    4cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ce0:	af 85       	ldd	r26, Y+15	; 0x0f
    4ce2:	b8 89       	ldd	r27, Y+16	; 0x10
    4ce4:	8c 0d       	add	r24, r12
    4ce6:	9d 1d       	adc	r25, r13
    4ce8:	ae 1d       	adc	r26, r14
    4cea:	bf 1d       	adc	r27, r15
    4cec:	8d 87       	std	Y+13, r24	; 0x0d
    4cee:	9e 87       	std	Y+14, r25	; 0x0e
    4cf0:	af 87       	std	Y+15, r26	; 0x0f
    4cf2:	b8 8b       	std	Y+16, r27	; 0x10
    4cf4:	68 2f       	mov	r22, r24
    4cf6:	7e 85       	ldd	r23, Y+14	; 0x0e
    4cf8:	21 2f       	mov	r18, r17
    4cfa:	30 2f       	mov	r19, r16
    4cfc:	48 2d       	mov	r20, r8
    4cfe:	54 2d       	mov	r21, r4
    4d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d02:	98 89       	ldd	r25, Y+16	; 0x10
    4d04:	e0 96       	adiw	r28, 0x30	; 48
    4d06:	e0 e1       	ldi	r30, 0x10	; 16
    4d08:	0c 94 d1 2f 	jmp	0x5fa2	; 0x5fa2 <__epilogue_restores__+0x4>

00004d0c <__ashldi3>:
    4d0c:	cf 92       	push	r12
    4d0e:	df 92       	push	r13
    4d10:	ef 92       	push	r14
    4d12:	ff 92       	push	r15
    4d14:	0f 93       	push	r16
    4d16:	cf 93       	push	r28
    4d18:	df 93       	push	r29
    4d1a:	cd b7       	in	r28, 0x3d	; 61
    4d1c:	de b7       	in	r29, 0x3e	; 62
    4d1e:	60 97       	sbiw	r28, 0x10	; 16
    4d20:	cd bf       	out	0x3d, r28	; 61
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	00 23       	and	r16, r16
    4d26:	09 f4       	brne	.+2      	; 0x4d2a <__ashldi3+0x1e>
    4d28:	5a c0       	rjmp	.+180    	; 0x4dde <__ashldi3+0xd2>
    4d2a:	29 87       	std	Y+9, r18	; 0x09
    4d2c:	3a 87       	std	Y+10, r19	; 0x0a
    4d2e:	4b 87       	std	Y+11, r20	; 0x0b
    4d30:	5c 87       	std	Y+12, r21	; 0x0c
    4d32:	6d 87       	std	Y+13, r22	; 0x0d
    4d34:	7e 87       	std	Y+14, r23	; 0x0e
    4d36:	8f 87       	std	Y+15, r24	; 0x0f
    4d38:	98 8b       	std	Y+16, r25	; 0x10
    4d3a:	80 e2       	ldi	r24, 0x20	; 32
    4d3c:	80 1b       	sub	r24, r16
    4d3e:	49 85       	ldd	r20, Y+9	; 0x09
    4d40:	5a 85       	ldd	r21, Y+10	; 0x0a
    4d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d46:	18 16       	cp	r1, r24
    4d48:	b4 f0       	brlt	.+44     	; 0x4d76 <__ashldi3+0x6a>
    4d4a:	19 82       	std	Y+1, r1	; 0x01
    4d4c:	1a 82       	std	Y+2, r1	; 0x02
    4d4e:	1b 82       	std	Y+3, r1	; 0x03
    4d50:	1c 82       	std	Y+4, r1	; 0x04
    4d52:	99 27       	eor	r25, r25
    4d54:	87 fd       	sbrc	r24, 7
    4d56:	90 95       	com	r25
    4d58:	90 95       	com	r25
    4d5a:	81 95       	neg	r24
    4d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d5e:	04 c0       	rjmp	.+8      	; 0x4d68 <__ashldi3+0x5c>
    4d60:	44 0f       	add	r20, r20
    4d62:	55 1f       	adc	r21, r21
    4d64:	66 1f       	adc	r22, r22
    4d66:	77 1f       	adc	r23, r23
    4d68:	8a 95       	dec	r24
    4d6a:	d2 f7       	brpl	.-12     	; 0x4d60 <__ashldi3+0x54>
    4d6c:	4d 83       	std	Y+5, r20	; 0x05
    4d6e:	5e 83       	std	Y+6, r21	; 0x06
    4d70:	6f 83       	std	Y+7, r22	; 0x07
    4d72:	78 87       	std	Y+8, r23	; 0x08
    4d74:	2c c0       	rjmp	.+88     	; 0x4dce <__ashldi3+0xc2>
    4d76:	6a 01       	movw	r12, r20
    4d78:	7b 01       	movw	r14, r22
    4d7a:	00 2e       	mov	r0, r16
    4d7c:	04 c0       	rjmp	.+8      	; 0x4d86 <__ashldi3+0x7a>
    4d7e:	cc 0c       	add	r12, r12
    4d80:	dd 1c       	adc	r13, r13
    4d82:	ee 1c       	adc	r14, r14
    4d84:	ff 1c       	adc	r15, r15
    4d86:	0a 94       	dec	r0
    4d88:	d2 f7       	brpl	.-12     	; 0x4d7e <__ashldi3+0x72>
    4d8a:	c9 82       	std	Y+1, r12	; 0x01
    4d8c:	da 82       	std	Y+2, r13	; 0x02
    4d8e:	eb 82       	std	Y+3, r14	; 0x03
    4d90:	fc 82       	std	Y+4, r15	; 0x04
    4d92:	6a 01       	movw	r12, r20
    4d94:	7b 01       	movw	r14, r22
    4d96:	04 c0       	rjmp	.+8      	; 0x4da0 <__ashldi3+0x94>
    4d98:	f6 94       	lsr	r15
    4d9a:	e7 94       	ror	r14
    4d9c:	d7 94       	ror	r13
    4d9e:	c7 94       	ror	r12
    4da0:	8a 95       	dec	r24
    4da2:	d2 f7       	brpl	.-12     	; 0x4d98 <__ashldi3+0x8c>
    4da4:	d7 01       	movw	r26, r14
    4da6:	c6 01       	movw	r24, r12
    4da8:	4d 85       	ldd	r20, Y+13	; 0x0d
    4daa:	5e 85       	ldd	r21, Y+14	; 0x0e
    4dac:	6f 85       	ldd	r22, Y+15	; 0x0f
    4dae:	78 89       	ldd	r23, Y+16	; 0x10
    4db0:	04 c0       	rjmp	.+8      	; 0x4dba <__ashldi3+0xae>
    4db2:	44 0f       	add	r20, r20
    4db4:	55 1f       	adc	r21, r21
    4db6:	66 1f       	adc	r22, r22
    4db8:	77 1f       	adc	r23, r23
    4dba:	0a 95       	dec	r16
    4dbc:	d2 f7       	brpl	.-12     	; 0x4db2 <__ashldi3+0xa6>
    4dbe:	84 2b       	or	r24, r20
    4dc0:	95 2b       	or	r25, r21
    4dc2:	a6 2b       	or	r26, r22
    4dc4:	b7 2b       	or	r27, r23
    4dc6:	8d 83       	std	Y+5, r24	; 0x05
    4dc8:	9e 83       	std	Y+6, r25	; 0x06
    4dca:	af 83       	std	Y+7, r26	; 0x07
    4dcc:	b8 87       	std	Y+8, r27	; 0x08
    4dce:	29 81       	ldd	r18, Y+1	; 0x01
    4dd0:	3a 81       	ldd	r19, Y+2	; 0x02
    4dd2:	4b 81       	ldd	r20, Y+3	; 0x03
    4dd4:	5c 81       	ldd	r21, Y+4	; 0x04
    4dd6:	6d 81       	ldd	r22, Y+5	; 0x05
    4dd8:	7e 81       	ldd	r23, Y+6	; 0x06
    4dda:	8f 81       	ldd	r24, Y+7	; 0x07
    4ddc:	98 85       	ldd	r25, Y+8	; 0x08
    4dde:	60 96       	adiw	r28, 0x10	; 16
    4de0:	cd bf       	out	0x3d, r28	; 61
    4de2:	de bf       	out	0x3e, r29	; 62
    4de4:	df 91       	pop	r29
    4de6:	cf 91       	pop	r28
    4de8:	0f 91       	pop	r16
    4dea:	ff 90       	pop	r15
    4dec:	ef 90       	pop	r14
    4dee:	df 90       	pop	r13
    4df0:	cf 90       	pop	r12
    4df2:	08 95       	ret

00004df4 <__ashrdi3>:
    4df4:	0f 93       	push	r16
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	cd b7       	in	r28, 0x3d	; 61
    4dfc:	de b7       	in	r29, 0x3e	; 62
    4dfe:	60 97       	sbiw	r28, 0x10	; 16
    4e00:	cd bf       	out	0x3d, r28	; 61
    4e02:	de bf       	out	0x3e, r29	; 62
    4e04:	00 23       	and	r16, r16
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <__ashrdi3+0x16>
    4e08:	56 c0       	rjmp	.+172    	; 0x4eb6 <__ashrdi3+0xc2>
    4e0a:	29 87       	std	Y+9, r18	; 0x09
    4e0c:	3a 87       	std	Y+10, r19	; 0x0a
    4e0e:	4b 87       	std	Y+11, r20	; 0x0b
    4e10:	5c 87       	std	Y+12, r21	; 0x0c
    4e12:	6d 87       	std	Y+13, r22	; 0x0d
    4e14:	7e 87       	std	Y+14, r23	; 0x0e
    4e16:	8f 87       	std	Y+15, r24	; 0x0f
    4e18:	98 8b       	std	Y+16, r25	; 0x10
    4e1a:	20 e2       	ldi	r18, 0x20	; 32
    4e1c:	20 1b       	sub	r18, r16
    4e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e22:	af 85       	ldd	r26, Y+15	; 0x0f
    4e24:	b8 89       	ldd	r27, Y+16	; 0x10
    4e26:	ac 01       	movw	r20, r24
    4e28:	bd 01       	movw	r22, r26
    4e2a:	12 16       	cp	r1, r18
    4e2c:	b4 f0       	brlt	.+44     	; 0x4e5a <__ashrdi3+0x66>
    4e2e:	77 0f       	add	r23, r23
    4e30:	44 0b       	sbc	r20, r20
    4e32:	54 2f       	mov	r21, r20
    4e34:	ba 01       	movw	r22, r20
    4e36:	4d 83       	std	Y+5, r20	; 0x05
    4e38:	5e 83       	std	Y+6, r21	; 0x06
    4e3a:	6f 83       	std	Y+7, r22	; 0x07
    4e3c:	78 87       	std	Y+8, r23	; 0x08
    4e3e:	33 27       	eor	r19, r19
    4e40:	27 fd       	sbrc	r18, 7
    4e42:	30 95       	com	r19
    4e44:	30 95       	com	r19
    4e46:	21 95       	neg	r18
    4e48:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4a:	04 c0       	rjmp	.+8      	; 0x4e54 <__ashrdi3+0x60>
    4e4c:	b5 95       	asr	r27
    4e4e:	a7 95       	ror	r26
    4e50:	97 95       	ror	r25
    4e52:	87 95       	ror	r24
    4e54:	2a 95       	dec	r18
    4e56:	d2 f7       	brpl	.-12     	; 0x4e4c <__ashrdi3+0x58>
    4e58:	22 c0       	rjmp	.+68     	; 0x4e9e <__ashrdi3+0xaa>
    4e5a:	00 2e       	mov	r0, r16
    4e5c:	04 c0       	rjmp	.+8      	; 0x4e66 <__ashrdi3+0x72>
    4e5e:	75 95       	asr	r23
    4e60:	67 95       	ror	r22
    4e62:	57 95       	ror	r21
    4e64:	47 95       	ror	r20
    4e66:	0a 94       	dec	r0
    4e68:	d2 f7       	brpl	.-12     	; 0x4e5e <__ashrdi3+0x6a>
    4e6a:	4d 83       	std	Y+5, r20	; 0x05
    4e6c:	5e 83       	std	Y+6, r21	; 0x06
    4e6e:	6f 83       	std	Y+7, r22	; 0x07
    4e70:	78 87       	std	Y+8, r23	; 0x08
    4e72:	04 c0       	rjmp	.+8      	; 0x4e7c <__ashrdi3+0x88>
    4e74:	88 0f       	add	r24, r24
    4e76:	99 1f       	adc	r25, r25
    4e78:	aa 1f       	adc	r26, r26
    4e7a:	bb 1f       	adc	r27, r27
    4e7c:	2a 95       	dec	r18
    4e7e:	d2 f7       	brpl	.-12     	; 0x4e74 <__ashrdi3+0x80>
    4e80:	49 85       	ldd	r20, Y+9	; 0x09
    4e82:	5a 85       	ldd	r21, Y+10	; 0x0a
    4e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e88:	04 c0       	rjmp	.+8      	; 0x4e92 <__ashrdi3+0x9e>
    4e8a:	76 95       	lsr	r23
    4e8c:	67 95       	ror	r22
    4e8e:	57 95       	ror	r21
    4e90:	47 95       	ror	r20
    4e92:	0a 95       	dec	r16
    4e94:	d2 f7       	brpl	.-12     	; 0x4e8a <__ashrdi3+0x96>
    4e96:	84 2b       	or	r24, r20
    4e98:	95 2b       	or	r25, r21
    4e9a:	a6 2b       	or	r26, r22
    4e9c:	b7 2b       	or	r27, r23
    4e9e:	89 83       	std	Y+1, r24	; 0x01
    4ea0:	9a 83       	std	Y+2, r25	; 0x02
    4ea2:	ab 83       	std	Y+3, r26	; 0x03
    4ea4:	bc 83       	std	Y+4, r27	; 0x04
    4ea6:	29 81       	ldd	r18, Y+1	; 0x01
    4ea8:	3a 81       	ldd	r19, Y+2	; 0x02
    4eaa:	4b 81       	ldd	r20, Y+3	; 0x03
    4eac:	5c 81       	ldd	r21, Y+4	; 0x04
    4eae:	6d 81       	ldd	r22, Y+5	; 0x05
    4eb0:	7e 81       	ldd	r23, Y+6	; 0x06
    4eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    4eb4:	98 85       	ldd	r25, Y+8	; 0x08
    4eb6:	60 96       	adiw	r28, 0x10	; 16
    4eb8:	cd bf       	out	0x3d, r28	; 61
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	0f 91       	pop	r16
    4ec2:	08 95       	ret

00004ec4 <__divdi3>:
    4ec4:	a8 e4       	ldi	r26, 0x48	; 72
    4ec6:	b0 e0       	ldi	r27, 0x00	; 0
    4ec8:	e8 e6       	ldi	r30, 0x68	; 104
    4eca:	f7 e2       	ldi	r31, 0x27	; 39
    4ecc:	0c 94 b7 2f 	jmp	0x5f6e	; 0x5f6e <__prologue_saves__+0x2>
    4ed0:	f5 01       	movw	r30, r10
    4ed2:	29 a3       	lds	r18, 0x59
    4ed4:	3a a3       	lds	r19, 0x5a
    4ed6:	4b a3       	lds	r20, 0x5b
    4ed8:	5c a3       	lds	r21, 0x5c
    4eda:	6d a3       	lds	r22, 0x5d
    4edc:	7e a3       	lds	r23, 0x5e
    4ede:	8f a3       	lds	r24, 0x5f
    4ee0:	98 a7       	lds	r25, 0x78
    4ee2:	a9 8e       	std	Y+25, r10	; 0x19
    4ee4:	fa 8f       	std	Y+26, r31	; 0x1a
    4ee6:	cb 8e       	std	Y+27, r12	; 0x1b
    4ee8:	dc 8e       	std	Y+28, r13	; 0x1c
    4eea:	ed 8e       	std	Y+29, r14	; 0x1d
    4eec:	fe 8e       	std	Y+30, r15	; 0x1e
    4eee:	0f 8f       	std	Y+31, r16	; 0x1f
    4ef0:	18 a3       	lds	r17, 0x58
    4ef2:	8d a0       	lds	r24, 0x8d
    4ef4:	9e a0       	lds	r25, 0x8e
    4ef6:	af a0       	lds	r26, 0x8f
    4ef8:	b8 a4       	lds	r27, 0xa8
    4efa:	b7 fe       	sbrs	r11, 7
    4efc:	67 c0       	rjmp	.+206    	; 0x4fcc <__divdi3+0x108>
    4efe:	21 95       	neg	r18
    4f00:	b1 e0       	ldi	r27, 0x01	; 1
    4f02:	12 16       	cp	r1, r18
    4f04:	08 f0       	brcs	.+2      	; 0x4f08 <__divdi3+0x44>
    4f06:	b0 e0       	ldi	r27, 0x00	; 0
    4f08:	31 95       	neg	r19
    4f0a:	a1 e0       	ldi	r26, 0x01	; 1
    4f0c:	13 16       	cp	r1, r19
    4f0e:	08 f0       	brcs	.+2      	; 0x4f12 <__divdi3+0x4e>
    4f10:	a0 e0       	ldi	r26, 0x00	; 0
    4f12:	b3 2e       	mov	r11, r19
    4f14:	bb 1a       	sub	r11, r27
    4f16:	bb 2d       	mov	r27, r11
    4f18:	88 24       	eor	r8, r8
    4f1a:	83 94       	inc	r8
    4f1c:	3b 15       	cp	r19, r11
    4f1e:	08 f0       	brcs	.+2      	; 0x4f22 <__divdi3+0x5e>
    4f20:	88 24       	eor	r8, r8
    4f22:	a8 29       	or	r26, r8
    4f24:	41 95       	neg	r20
    4f26:	31 e0       	ldi	r19, 0x01	; 1
    4f28:	14 16       	cp	r1, r20
    4f2a:	08 f0       	brcs	.+2      	; 0x4f2e <__divdi3+0x6a>
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	b4 2e       	mov	r11, r20
    4f30:	ba 1a       	sub	r11, r26
    4f32:	ab 2d       	mov	r26, r11
    4f34:	88 24       	eor	r8, r8
    4f36:	83 94       	inc	r8
    4f38:	4b 15       	cp	r20, r11
    4f3a:	08 f0       	brcs	.+2      	; 0x4f3e <__divdi3+0x7a>
    4f3c:	88 24       	eor	r8, r8
    4f3e:	38 29       	or	r19, r8
    4f40:	51 95       	neg	r21
    4f42:	41 e0       	ldi	r20, 0x01	; 1
    4f44:	15 16       	cp	r1, r21
    4f46:	08 f0       	brcs	.+2      	; 0x4f4a <__divdi3+0x86>
    4f48:	40 e0       	ldi	r20, 0x00	; 0
    4f4a:	45 2e       	mov	r4, r21
    4f4c:	43 1a       	sub	r4, r19
    4f4e:	31 e0       	ldi	r19, 0x01	; 1
    4f50:	54 15       	cp	r21, r4
    4f52:	08 f0       	brcs	.+2      	; 0x4f56 <__divdi3+0x92>
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	43 2b       	or	r20, r19
    4f58:	61 95       	neg	r22
    4f5a:	31 e0       	ldi	r19, 0x01	; 1
    4f5c:	16 16       	cp	r1, r22
    4f5e:	08 f0       	brcs	.+2      	; 0x4f62 <__divdi3+0x9e>
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	86 2e       	mov	r8, r22
    4f64:	84 1a       	sub	r8, r20
    4f66:	41 e0       	ldi	r20, 0x01	; 1
    4f68:	68 15       	cp	r22, r8
    4f6a:	08 f0       	brcs	.+2      	; 0x4f6e <__divdi3+0xaa>
    4f6c:	40 e0       	ldi	r20, 0x00	; 0
    4f6e:	34 2b       	or	r19, r20
    4f70:	71 95       	neg	r23
    4f72:	41 e0       	ldi	r20, 0x01	; 1
    4f74:	17 16       	cp	r1, r23
    4f76:	08 f0       	brcs	.+2      	; 0x4f7a <__divdi3+0xb6>
    4f78:	40 e0       	ldi	r20, 0x00	; 0
    4f7a:	57 2f       	mov	r21, r23
    4f7c:	53 1b       	sub	r21, r19
    4f7e:	31 e0       	ldi	r19, 0x01	; 1
    4f80:	75 17       	cp	r23, r21
    4f82:	08 f0       	brcs	.+2      	; 0x4f86 <__divdi3+0xc2>
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	43 2b       	or	r20, r19
    4f88:	81 95       	neg	r24
    4f8a:	31 e0       	ldi	r19, 0x01	; 1
    4f8c:	18 16       	cp	r1, r24
    4f8e:	08 f0       	brcs	.+2      	; 0x4f92 <__divdi3+0xce>
    4f90:	30 e0       	ldi	r19, 0x00	; 0
    4f92:	68 2f       	mov	r22, r24
    4f94:	64 1b       	sub	r22, r20
    4f96:	46 2f       	mov	r20, r22
    4f98:	61 e0       	ldi	r22, 0x01	; 1
    4f9a:	84 17       	cp	r24, r20
    4f9c:	08 f0       	brcs	.+2      	; 0x4fa0 <__divdi3+0xdc>
    4f9e:	60 e0       	ldi	r22, 0x00	; 0
    4fa0:	36 2b       	or	r19, r22
    4fa2:	91 95       	neg	r25
    4fa4:	93 1b       	sub	r25, r19
    4fa6:	29 a3       	lds	r18, 0x59
    4fa8:	ba a3       	lds	r27, 0x5a
    4faa:	ab a3       	lds	r26, 0x5b
    4fac:	4c a2       	lds	r20, 0x9c
    4fae:	8d a2       	lds	r24, 0x9d
    4fb0:	5e a3       	lds	r21, 0x5e
    4fb2:	4f a3       	lds	r20, 0x5f
    4fb4:	98 a7       	lds	r25, 0x78
    4fb6:	8f ef       	ldi	r24, 0xFF	; 255
    4fb8:	9f ef       	ldi	r25, 0xFF	; 255
    4fba:	af ef       	ldi	r26, 0xFF	; 255
    4fbc:	bf ef       	ldi	r27, 0xFF	; 255
    4fbe:	25 96       	adiw	r28, 0x05	; 5
    4fc0:	8c af       	sts	0x7c, r24
    4fc2:	9d af       	sts	0x7d, r25
    4fc4:	ae af       	sts	0x7e, r26
    4fc6:	bf af       	sts	0x7f, r27
    4fc8:	25 97       	sbiw	r28, 0x05	; 5
    4fca:	06 c0       	rjmp	.+12     	; 0x4fd8 <__divdi3+0x114>
    4fcc:	25 96       	adiw	r28, 0x05	; 5
    4fce:	1c ae       	sts	0xbc, r17
    4fd0:	1d ae       	sts	0xbd, r17
    4fd2:	1e ae       	sts	0xbe, r17
    4fd4:	1f ae       	sts	0xbf, r17
    4fd6:	25 97       	sbiw	r28, 0x05	; 5
    4fd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fdc:	af 8d       	ldd	r26, Y+31	; 0x1f
    4fde:	b8 a1       	lds	r27, 0x48
    4fe0:	b7 ff       	sbrs	r27, 7
    4fe2:	68 c0       	rjmp	.+208    	; 0x50b4 <__divdi3+0x1f0>
    4fe4:	25 96       	adiw	r28, 0x05	; 5
    4fe6:	2c ad       	sts	0x6c, r18
    4fe8:	3d ad       	sts	0x6d, r19
    4fea:	4e ad       	sts	0x6e, r20
    4fec:	5f ad       	sts	0x6f, r21
    4fee:	25 97       	sbiw	r28, 0x05	; 5
    4ff0:	20 95       	com	r18
    4ff2:	30 95       	com	r19
    4ff4:	40 95       	com	r20
    4ff6:	50 95       	com	r21
    4ff8:	25 96       	adiw	r28, 0x05	; 5
    4ffa:	2c af       	sts	0x7c, r18
    4ffc:	3d af       	sts	0x7d, r19
    4ffe:	4e af       	sts	0x7e, r20
    5000:	5f af       	sts	0x7f, r21
    5002:	25 97       	sbiw	r28, 0x05	; 5
    5004:	e1 95       	neg	r30
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	1e 16       	cp	r1, r30
    500a:	08 f0       	brcs	.+2      	; 0x500e <__divdi3+0x14a>
    500c:	80 e0       	ldi	r24, 0x00	; 0
    500e:	f1 95       	neg	r31
    5010:	91 e0       	ldi	r25, 0x01	; 1
    5012:	1f 16       	cp	r1, r31
    5014:	08 f0       	brcs	.+2      	; 0x5018 <__divdi3+0x154>
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	4f 2f       	mov	r20, r31
    501a:	48 1b       	sub	r20, r24
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	f4 17       	cp	r31, r20
    5020:	08 f0       	brcs	.+2      	; 0x5024 <__divdi3+0x160>
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	98 2b       	or	r25, r24
    5026:	c1 94       	neg	r12
    5028:	81 e0       	ldi	r24, 0x01	; 1
    502a:	1c 14       	cp	r1, r12
    502c:	08 f0       	brcs	.+2      	; 0x5030 <__divdi3+0x16c>
    502e:	80 e0       	ldi	r24, 0x00	; 0
    5030:	6c 2d       	mov	r22, r12
    5032:	69 1b       	sub	r22, r25
    5034:	91 e0       	ldi	r25, 0x01	; 1
    5036:	c6 16       	cp	r12, r22
    5038:	08 f0       	brcs	.+2      	; 0x503c <__divdi3+0x178>
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	89 2b       	or	r24, r25
    503e:	d1 94       	neg	r13
    5040:	91 e0       	ldi	r25, 0x01	; 1
    5042:	1d 14       	cp	r1, r13
    5044:	08 f0       	brcs	.+2      	; 0x5048 <__divdi3+0x184>
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	5d 2d       	mov	r21, r13
    504a:	58 1b       	sub	r21, r24
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	d5 16       	cp	r13, r21
    5050:	08 f0       	brcs	.+2      	; 0x5054 <__divdi3+0x190>
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	98 2b       	or	r25, r24
    5056:	e1 94       	neg	r14
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	1e 14       	cp	r1, r14
    505c:	08 f0       	brcs	.+2      	; 0x5060 <__divdi3+0x19c>
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	3e 2d       	mov	r19, r14
    5062:	39 1b       	sub	r19, r25
    5064:	91 e0       	ldi	r25, 0x01	; 1
    5066:	e3 16       	cp	r14, r19
    5068:	08 f0       	brcs	.+2      	; 0x506c <__divdi3+0x1a8>
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	89 2b       	or	r24, r25
    506e:	f1 94       	neg	r15
    5070:	91 e0       	ldi	r25, 0x01	; 1
    5072:	1f 14       	cp	r1, r15
    5074:	08 f0       	brcs	.+2      	; 0x5078 <__divdi3+0x1b4>
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	2f 2d       	mov	r18, r15
    507a:	28 1b       	sub	r18, r24
    507c:	81 e0       	ldi	r24, 0x01	; 1
    507e:	f2 16       	cp	r15, r18
    5080:	08 f0       	brcs	.+2      	; 0x5084 <__divdi3+0x1c0>
    5082:	80 e0       	ldi	r24, 0x00	; 0
    5084:	98 2b       	or	r25, r24
    5086:	01 95       	neg	r16
    5088:	81 e0       	ldi	r24, 0x01	; 1
    508a:	10 16       	cp	r1, r16
    508c:	08 f0       	brcs	.+2      	; 0x5090 <__divdi3+0x1cc>
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	70 2f       	mov	r23, r16
    5092:	79 1b       	sub	r23, r25
    5094:	97 2f       	mov	r25, r23
    5096:	71 e0       	ldi	r23, 0x01	; 1
    5098:	09 17       	cp	r16, r25
    509a:	08 f0       	brcs	.+2      	; 0x509e <__divdi3+0x1da>
    509c:	70 e0       	ldi	r23, 0x00	; 0
    509e:	87 2b       	or	r24, r23
    50a0:	11 95       	neg	r17
    50a2:	18 1b       	sub	r17, r24
    50a4:	e9 8f       	std	Y+25, r30	; 0x19
    50a6:	4a 8f       	std	Y+26, r20	; 0x1a
    50a8:	6b 8f       	std	Y+27, r22	; 0x1b
    50aa:	5c 8f       	std	Y+28, r21	; 0x1c
    50ac:	3d 8f       	std	Y+29, r19	; 0x1d
    50ae:	2e 8f       	std	Y+30, r18	; 0x1e
    50b0:	9f 8f       	std	Y+31, r25	; 0x1f
    50b2:	18 a3       	lds	r17, 0x58
    50b4:	79 8d       	ldd	r23, Y+25	; 0x19
    50b6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    50b8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    50ba:	4c 8d       	ldd	r20, Y+28	; 0x1c
    50bc:	3d 8d       	ldd	r19, Y+29	; 0x1d
    50be:	2e 8d       	ldd	r18, Y+30	; 0x1e
    50c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    50c2:	88 a1       	lds	r24, 0x48
    50c4:	e9 a1       	lds	r30, 0x49
    50c6:	e9 8b       	std	Y+17, r30	; 0x11
    50c8:	ea a1       	lds	r30, 0x4a
    50ca:	ea 8b       	std	Y+18, r30	; 0x12
    50cc:	eb a1       	lds	r30, 0x4b
    50ce:	eb 8b       	std	Y+19, r30	; 0x13
    50d0:	ec a1       	lds	r30, 0x4c
    50d2:	ec 8b       	std	Y+20, r30	; 0x14
    50d4:	ed a1       	lds	r30, 0x4d
    50d6:	ed 8b       	std	Y+21, r30	; 0x15
    50d8:	ee a1       	lds	r30, 0x4e
    50da:	ee 8b       	std	Y+22, r30	; 0x16
    50dc:	ef a1       	lds	r30, 0x4f
    50de:	ef 8b       	std	Y+23, r30	; 0x17
    50e0:	e8 a5       	lds	r30, 0x68
    50e2:	e8 8f       	std	Y+24, r30	; 0x18
    50e4:	79 87       	std	Y+9, r23	; 0x09
    50e6:	6a 87       	std	Y+10, r22	; 0x0a
    50e8:	5b 87       	std	Y+11, r21	; 0x0b
    50ea:	4c 87       	std	Y+12, r20	; 0x0c
    50ec:	3d 87       	std	Y+13, r19	; 0x0d
    50ee:	2e 87       	std	Y+14, r18	; 0x0e
    50f0:	9f 87       	std	Y+15, r25	; 0x0f
    50f2:	88 8b       	std	Y+16, r24	; 0x10
    50f4:	89 84       	ldd	r8, Y+9	; 0x09
    50f6:	9a 84       	ldd	r9, Y+10	; 0x0a
    50f8:	ab 84       	ldd	r10, Y+11	; 0x0b
    50fa:	bc 84       	ldd	r11, Y+12	; 0x0c
    50fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    50fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5100:	af 85       	ldd	r26, Y+15	; 0x0f
    5102:	b8 89       	ldd	r27, Y+16	; 0x10
    5104:	e9 88       	ldd	r14, Y+17	; 0x11
    5106:	fa 88       	ldd	r15, Y+18	; 0x12
    5108:	0b 89       	ldd	r16, Y+19	; 0x13
    510a:	1c 89       	ldd	r17, Y+20	; 0x14
    510c:	ed aa       	sts	0x9d, r30
    510e:	fe aa       	sts	0x9e, r31
    5110:	0f ab       	sts	0x5f, r16
    5112:	18 af       	sts	0x78, r17
    5114:	cd 88       	ldd	r12, Y+21	; 0x15
    5116:	de 88       	ldd	r13, Y+22	; 0x16
    5118:	ef 88       	ldd	r14, Y+23	; 0x17
    511a:	f8 8c       	ldd	r15, Y+24	; 0x18
    511c:	00 97       	sbiw	r24, 0x00	; 0
    511e:	a1 05       	cpc	r26, r1
    5120:	b1 05       	cpc	r27, r1
    5122:	09 f0       	breq	.+2      	; 0x5126 <__divdi3+0x262>
    5124:	bd c3       	rjmp	.+1914   	; 0x58a0 <__divdi3+0x9dc>
    5126:	c8 14       	cp	r12, r8
    5128:	d9 04       	cpc	r13, r9
    512a:	ea 04       	cpc	r14, r10
    512c:	fb 04       	cpc	r15, r11
    512e:	08 f0       	brcs	.+2      	; 0x5132 <__divdi3+0x26e>
    5130:	4d c1       	rjmp	.+666    	; 0x53cc <__divdi3+0x508>
    5132:	00 e0       	ldi	r16, 0x00	; 0
    5134:	80 16       	cp	r8, r16
    5136:	00 e0       	ldi	r16, 0x00	; 0
    5138:	90 06       	cpc	r9, r16
    513a:	01 e0       	ldi	r16, 0x01	; 1
    513c:	a0 06       	cpc	r10, r16
    513e:	00 e0       	ldi	r16, 0x00	; 0
    5140:	b0 06       	cpc	r11, r16
    5142:	58 f4       	brcc	.+22     	; 0x515a <__divdi3+0x296>
    5144:	1f ef       	ldi	r17, 0xFF	; 255
    5146:	81 16       	cp	r8, r17
    5148:	91 04       	cpc	r9, r1
    514a:	a1 04       	cpc	r10, r1
    514c:	b1 04       	cpc	r11, r1
    514e:	09 f0       	breq	.+2      	; 0x5152 <__divdi3+0x28e>
    5150:	90 f4       	brcc	.+36     	; 0x5176 <__divdi3+0x2b2>
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	dc 01       	movw	r26, r24
    5158:	17 c0       	rjmp	.+46     	; 0x5188 <__divdi3+0x2c4>
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	82 16       	cp	r8, r18
    515e:	20 e0       	ldi	r18, 0x00	; 0
    5160:	92 06       	cpc	r9, r18
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	a2 06       	cpc	r10, r18
    5166:	21 e0       	ldi	r18, 0x01	; 1
    5168:	b2 06       	cpc	r11, r18
    516a:	50 f4       	brcc	.+20     	; 0x5180 <__divdi3+0x2bc>
    516c:	80 e1       	ldi	r24, 0x10	; 16
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	a0 e0       	ldi	r26, 0x00	; 0
    5172:	b0 e0       	ldi	r27, 0x00	; 0
    5174:	09 c0       	rjmp	.+18     	; 0x5188 <__divdi3+0x2c4>
    5176:	88 e0       	ldi	r24, 0x08	; 8
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	a0 e0       	ldi	r26, 0x00	; 0
    517c:	b0 e0       	ldi	r27, 0x00	; 0
    517e:	04 c0       	rjmp	.+8      	; 0x5188 <__divdi3+0x2c4>
    5180:	88 e1       	ldi	r24, 0x18	; 24
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	a0 e0       	ldi	r26, 0x00	; 0
    5186:	b0 e0       	ldi	r27, 0x00	; 0
    5188:	b5 01       	movw	r22, r10
    518a:	a4 01       	movw	r20, r8
    518c:	08 2e       	mov	r0, r24
    518e:	04 c0       	rjmp	.+8      	; 0x5198 <__divdi3+0x2d4>
    5190:	76 95       	lsr	r23
    5192:	67 95       	ror	r22
    5194:	57 95       	ror	r21
    5196:	47 95       	ror	r20
    5198:	0a 94       	dec	r0
    519a:	d2 f7       	brpl	.-12     	; 0x5190 <__divdi3+0x2cc>
    519c:	fa 01       	movw	r30, r20
    519e:	ef 5d       	subi	r30, 0xDF	; 223
    51a0:	ff 4d       	sbci	r31, 0xDF	; 223
    51a2:	20 81       	ld	r18, Z
    51a4:	40 e2       	ldi	r20, 0x20	; 32
    51a6:	50 e0       	ldi	r21, 0x00	; 0
    51a8:	60 e0       	ldi	r22, 0x00	; 0
    51aa:	70 e0       	ldi	r23, 0x00	; 0
    51ac:	48 1b       	sub	r20, r24
    51ae:	59 0b       	sbc	r21, r25
    51b0:	6a 0b       	sbc	r22, r26
    51b2:	7b 0b       	sbc	r23, r27
    51b4:	42 1b       	sub	r20, r18
    51b6:	51 09       	sbc	r21, r1
    51b8:	61 09       	sbc	r22, r1
    51ba:	71 09       	sbc	r23, r1
    51bc:	41 15       	cp	r20, r1
    51be:	51 05       	cpc	r21, r1
    51c0:	61 05       	cpc	r22, r1
    51c2:	71 05       	cpc	r23, r1
    51c4:	a1 f1       	breq	.+104    	; 0x522e <__divdi3+0x36a>
    51c6:	04 2e       	mov	r0, r20
    51c8:	04 c0       	rjmp	.+8      	; 0x51d2 <__divdi3+0x30e>
    51ca:	88 0c       	add	r8, r8
    51cc:	99 1c       	adc	r9, r9
    51ce:	aa 1c       	adc	r10, r10
    51d0:	bb 1c       	adc	r11, r11
    51d2:	0a 94       	dec	r0
    51d4:	d2 f7       	brpl	.-12     	; 0x51ca <__divdi3+0x306>
    51d6:	97 01       	movw	r18, r14
    51d8:	86 01       	movw	r16, r12
    51da:	04 2e       	mov	r0, r20
    51dc:	04 c0       	rjmp	.+8      	; 0x51e6 <__divdi3+0x322>
    51de:	00 0f       	add	r16, r16
    51e0:	11 1f       	adc	r17, r17
    51e2:	22 1f       	adc	r18, r18
    51e4:	33 1f       	adc	r19, r19
    51e6:	0a 94       	dec	r0
    51e8:	d2 f7       	brpl	.-12     	; 0x51de <__divdi3+0x31a>
    51ea:	80 e2       	ldi	r24, 0x20	; 32
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	84 1b       	sub	r24, r20
    51f0:	95 0b       	sbc	r25, r21
    51f2:	cd a8       	sts	0x8d, r28
    51f4:	de a8       	sts	0x8e, r29
    51f6:	ef a8       	sts	0x8f, r30
    51f8:	f8 ac       	sts	0xa8, r31
    51fa:	04 c0       	rjmp	.+8      	; 0x5204 <__divdi3+0x340>
    51fc:	f6 94       	lsr	r15
    51fe:	e7 94       	ror	r14
    5200:	d7 94       	ror	r13
    5202:	c7 94       	ror	r12
    5204:	8a 95       	dec	r24
    5206:	d2 f7       	brpl	.-12     	; 0x51fc <__divdi3+0x338>
    5208:	c0 2a       	or	r12, r16
    520a:	d1 2a       	or	r13, r17
    520c:	e2 2a       	or	r14, r18
    520e:	f3 2a       	or	r15, r19
    5210:	0d a9       	sts	0x4d, r16
    5212:	1e a9       	sts	0x4e, r17
    5214:	2f a9       	sts	0x4f, r18
    5216:	38 ad       	sts	0x68, r19
    5218:	04 c0       	rjmp	.+8      	; 0x5222 <__divdi3+0x35e>
    521a:	00 0f       	add	r16, r16
    521c:	11 1f       	adc	r17, r17
    521e:	22 1f       	adc	r18, r18
    5220:	33 1f       	adc	r19, r19
    5222:	4a 95       	dec	r20
    5224:	d2 f7       	brpl	.-12     	; 0x521a <__divdi3+0x356>
    5226:	0d ab       	sts	0x5d, r16
    5228:	1e ab       	sts	0x5e, r17
    522a:	2f ab       	sts	0x5f, r18
    522c:	38 af       	sts	0x78, r19
    522e:	25 01       	movw	r4, r10
    5230:	66 24       	eor	r6, r6
    5232:	77 24       	eor	r7, r7
    5234:	95 01       	movw	r18, r10
    5236:	84 01       	movw	r16, r8
    5238:	20 70       	andi	r18, 0x00	; 0
    523a:	30 70       	andi	r19, 0x00	; 0
    523c:	09 ab       	sts	0x59, r16
    523e:	1a ab       	sts	0x5a, r17
    5240:	2b ab       	sts	0x5b, r18
    5242:	3c ab       	sts	0x5c, r19
    5244:	c7 01       	movw	r24, r14
    5246:	b6 01       	movw	r22, r12
    5248:	a3 01       	movw	r20, r6
    524a:	92 01       	movw	r18, r4
    524c:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5250:	2d a7       	lds	r18, 0x7d
    5252:	3e a7       	lds	r19, 0x7e
    5254:	4f a7       	lds	r20, 0x7f
    5256:	58 ab       	sts	0x58, r21
    5258:	69 a7       	lds	r22, 0x79
    525a:	7a a7       	lds	r23, 0x7a
    525c:	8b a7       	lds	r24, 0x7b
    525e:	9c a7       	lds	r25, 0x7c
    5260:	c7 01       	movw	r24, r14
    5262:	b6 01       	movw	r22, r12
    5264:	a3 01       	movw	r20, r6
    5266:	92 01       	movw	r18, r4
    5268:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    526c:	ca 01       	movw	r24, r20
    526e:	b9 01       	movw	r22, r18
    5270:	29 a9       	sts	0x49, r18
    5272:	3a a9       	sts	0x4a, r19
    5274:	4b a9       	sts	0x4b, r20
    5276:	5c a9       	sts	0x4c, r21
    5278:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    527c:	ab 01       	movw	r20, r22
    527e:	bc 01       	movw	r22, r24
    5280:	09 a5       	lds	r16, 0x69
    5282:	1a a5       	lds	r17, 0x6a
    5284:	2b a5       	lds	r18, 0x6b
    5286:	3c a5       	lds	r19, 0x6c
    5288:	78 01       	movw	r14, r16
    528a:	dd 24       	eor	r13, r13
    528c:	cc 24       	eor	r12, r12
    528e:	0d a9       	sts	0x4d, r16
    5290:	1e a9       	sts	0x4e, r17
    5292:	2f a9       	sts	0x4f, r18
    5294:	38 ad       	sts	0x68, r19
    5296:	c9 01       	movw	r24, r18
    5298:	aa 27       	eor	r26, r26
    529a:	bb 27       	eor	r27, r27
    529c:	c8 2a       	or	r12, r24
    529e:	d9 2a       	or	r13, r25
    52a0:	ea 2a       	or	r14, r26
    52a2:	fb 2a       	or	r15, r27
    52a4:	0d a5       	lds	r16, 0x6d
    52a6:	1e a5       	lds	r17, 0x6e
    52a8:	2f a5       	lds	r18, 0x6f
    52aa:	38 a9       	sts	0x48, r19
    52ac:	c4 16       	cp	r12, r20
    52ae:	d5 06       	cpc	r13, r21
    52b0:	e6 06       	cpc	r14, r22
    52b2:	f7 06       	cpc	r15, r23
    52b4:	38 f5       	brcc	.+78     	; 0x5304 <__divdi3+0x440>
    52b6:	01 50       	subi	r16, 0x01	; 1
    52b8:	10 40       	sbci	r17, 0x00	; 0
    52ba:	20 40       	sbci	r18, 0x00	; 0
    52bc:	30 40       	sbci	r19, 0x00	; 0
    52be:	09 a7       	lds	r16, 0x79
    52c0:	1a a7       	lds	r17, 0x7a
    52c2:	2b a7       	lds	r18, 0x7b
    52c4:	3c a7       	lds	r19, 0x7c
    52c6:	c8 0c       	add	r12, r8
    52c8:	d9 1c       	adc	r13, r9
    52ca:	ea 1c       	adc	r14, r10
    52cc:	fb 1c       	adc	r15, r11
    52ce:	c8 14       	cp	r12, r8
    52d0:	d9 04       	cpc	r13, r9
    52d2:	ea 04       	cpc	r14, r10
    52d4:	fb 04       	cpc	r15, r11
    52d6:	d0 f0       	brcs	.+52     	; 0x530c <__divdi3+0x448>
    52d8:	c4 16       	cp	r12, r20
    52da:	d5 06       	cpc	r13, r21
    52dc:	e6 06       	cpc	r14, r22
    52de:	f7 06       	cpc	r15, r23
    52e0:	a8 f4       	brcc	.+42     	; 0x530c <__divdi3+0x448>
    52e2:	0d a5       	lds	r16, 0x6d
    52e4:	1e a5       	lds	r17, 0x6e
    52e6:	2f a5       	lds	r18, 0x6f
    52e8:	38 a9       	sts	0x48, r19
    52ea:	02 50       	subi	r16, 0x02	; 2
    52ec:	10 40       	sbci	r17, 0x00	; 0
    52ee:	20 40       	sbci	r18, 0x00	; 0
    52f0:	30 40       	sbci	r19, 0x00	; 0
    52f2:	09 a7       	lds	r16, 0x79
    52f4:	1a a7       	lds	r17, 0x7a
    52f6:	2b a7       	lds	r18, 0x7b
    52f8:	3c a7       	lds	r19, 0x7c
    52fa:	c8 0c       	add	r12, r8
    52fc:	d9 1c       	adc	r13, r9
    52fe:	ea 1c       	adc	r14, r10
    5300:	fb 1c       	adc	r15, r11
    5302:	04 c0       	rjmp	.+8      	; 0x530c <__divdi3+0x448>
    5304:	09 a7       	lds	r16, 0x79
    5306:	1a a7       	lds	r17, 0x7a
    5308:	2b a7       	lds	r18, 0x7b
    530a:	3c a7       	lds	r19, 0x7c
    530c:	c4 1a       	sub	r12, r20
    530e:	d5 0a       	sbc	r13, r21
    5310:	e6 0a       	sbc	r14, r22
    5312:	f7 0a       	sbc	r15, r23
    5314:	c7 01       	movw	r24, r14
    5316:	b6 01       	movw	r22, r12
    5318:	a3 01       	movw	r20, r6
    531a:	92 01       	movw	r18, r4
    531c:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5320:	2d a7       	lds	r18, 0x7d
    5322:	3e a7       	lds	r19, 0x7e
    5324:	4f a7       	lds	r20, 0x7f
    5326:	58 ab       	sts	0x58, r21
    5328:	69 af       	sts	0x79, r22
    532a:	7a af       	sts	0x7a, r23
    532c:	8b af       	sts	0x7b, r24
    532e:	9c af       	sts	0x7c, r25
    5330:	c7 01       	movw	r24, r14
    5332:	b6 01       	movw	r22, r12
    5334:	a3 01       	movw	r20, r6
    5336:	92 01       	movw	r18, r4
    5338:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    533c:	ca 01       	movw	r24, r20
    533e:	b9 01       	movw	r22, r18
    5340:	29 a9       	sts	0x49, r18
    5342:	3a a9       	sts	0x4a, r19
    5344:	4b a9       	sts	0x4b, r20
    5346:	5c a9       	sts	0x4c, r21
    5348:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    534c:	6b 01       	movw	r12, r22
    534e:	7c 01       	movw	r14, r24
    5350:	49 ad       	sts	0x69, r20
    5352:	5a ad       	sts	0x6a, r21
    5354:	6b ad       	sts	0x6b, r22
    5356:	7c ad       	sts	0x6c, r23
    5358:	9a 01       	movw	r18, r20
    535a:	11 27       	eor	r17, r17
    535c:	00 27       	eor	r16, r16
    535e:	4d a9       	sts	0x4d, r20
    5360:	5e a9       	sts	0x4e, r21
    5362:	6f a9       	sts	0x4f, r22
    5364:	78 ad       	sts	0x68, r23
    5366:	60 70       	andi	r22, 0x00	; 0
    5368:	70 70       	andi	r23, 0x00	; 0
    536a:	04 2b       	or	r16, r20
    536c:	15 2b       	or	r17, r21
    536e:	26 2b       	or	r18, r22
    5370:	37 2b       	or	r19, r23
    5372:	8d a5       	lds	r24, 0x6d
    5374:	9e a5       	lds	r25, 0x6e
    5376:	af a5       	lds	r26, 0x6f
    5378:	b8 a9       	sts	0x48, r27
    537a:	0c 15       	cp	r16, r12
    537c:	1d 05       	cpc	r17, r13
    537e:	2e 05       	cpc	r18, r14
    5380:	3f 05       	cpc	r19, r15
    5382:	c0 f4       	brcc	.+48     	; 0x53b4 <__divdi3+0x4f0>
    5384:	01 97       	sbiw	r24, 0x01	; 1
    5386:	a1 09       	sbc	r26, r1
    5388:	b1 09       	sbc	r27, r1
    538a:	08 0d       	add	r16, r8
    538c:	19 1d       	adc	r17, r9
    538e:	2a 1d       	adc	r18, r10
    5390:	3b 1d       	adc	r19, r11
    5392:	08 15       	cp	r16, r8
    5394:	19 05       	cpc	r17, r9
    5396:	2a 05       	cpc	r18, r10
    5398:	3b 05       	cpc	r19, r11
    539a:	60 f0       	brcs	.+24     	; 0x53b4 <__divdi3+0x4f0>
    539c:	0c 15       	cp	r16, r12
    539e:	1d 05       	cpc	r17, r13
    53a0:	2e 05       	cpc	r18, r14
    53a2:	3f 05       	cpc	r19, r15
    53a4:	38 f4       	brcc	.+14     	; 0x53b4 <__divdi3+0x4f0>
    53a6:	8d a5       	lds	r24, 0x6d
    53a8:	9e a5       	lds	r25, 0x6e
    53aa:	af a5       	lds	r26, 0x6f
    53ac:	b8 a9       	sts	0x48, r27
    53ae:	02 97       	sbiw	r24, 0x02	; 2
    53b0:	a1 09       	sbc	r26, r1
    53b2:	b1 09       	sbc	r27, r1
    53b4:	09 a5       	lds	r16, 0x69
    53b6:	1a a5       	lds	r17, 0x6a
    53b8:	2b a5       	lds	r18, 0x6b
    53ba:	3c a5       	lds	r19, 0x6c
    53bc:	78 01       	movw	r14, r16
    53be:	dd 24       	eor	r13, r13
    53c0:	cc 24       	eor	r12, r12
    53c2:	c8 2a       	or	r12, r24
    53c4:	d9 2a       	or	r13, r25
    53c6:	ea 2a       	or	r14, r26
    53c8:	fb 2a       	or	r15, r27
    53ca:	b7 c4       	rjmp	.+2414   	; 0x5d3a <__divdi3+0xe76>
    53cc:	81 14       	cp	r8, r1
    53ce:	91 04       	cpc	r9, r1
    53d0:	a1 04       	cpc	r10, r1
    53d2:	b1 04       	cpc	r11, r1
    53d4:	51 f4       	brne	.+20     	; 0x53ea <__divdi3+0x526>
    53d6:	61 e0       	ldi	r22, 0x01	; 1
    53d8:	70 e0       	ldi	r23, 0x00	; 0
    53da:	80 e0       	ldi	r24, 0x00	; 0
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	a5 01       	movw	r20, r10
    53e0:	94 01       	movw	r18, r8
    53e2:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    53e6:	49 01       	movw	r8, r18
    53e8:	5a 01       	movw	r10, r20
    53ea:	10 e0       	ldi	r17, 0x00	; 0
    53ec:	81 16       	cp	r8, r17
    53ee:	10 e0       	ldi	r17, 0x00	; 0
    53f0:	91 06       	cpc	r9, r17
    53f2:	11 e0       	ldi	r17, 0x01	; 1
    53f4:	a1 06       	cpc	r10, r17
    53f6:	10 e0       	ldi	r17, 0x00	; 0
    53f8:	b1 06       	cpc	r11, r17
    53fa:	58 f4       	brcc	.+22     	; 0x5412 <__divdi3+0x54e>
    53fc:	2f ef       	ldi	r18, 0xFF	; 255
    53fe:	82 16       	cp	r8, r18
    5400:	91 04       	cpc	r9, r1
    5402:	a1 04       	cpc	r10, r1
    5404:	b1 04       	cpc	r11, r1
    5406:	09 f0       	breq	.+2      	; 0x540a <__divdi3+0x546>
    5408:	90 f4       	brcc	.+36     	; 0x542e <__divdi3+0x56a>
    540a:	80 e0       	ldi	r24, 0x00	; 0
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	dc 01       	movw	r26, r24
    5410:	17 c0       	rjmp	.+46     	; 0x5440 <__divdi3+0x57c>
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	83 16       	cp	r8, r19
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	93 06       	cpc	r9, r19
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	a3 06       	cpc	r10, r19
    541e:	31 e0       	ldi	r19, 0x01	; 1
    5420:	b3 06       	cpc	r11, r19
    5422:	50 f4       	brcc	.+20     	; 0x5438 <__divdi3+0x574>
    5424:	80 e1       	ldi	r24, 0x10	; 16
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	a0 e0       	ldi	r26, 0x00	; 0
    542a:	b0 e0       	ldi	r27, 0x00	; 0
    542c:	09 c0       	rjmp	.+18     	; 0x5440 <__divdi3+0x57c>
    542e:	88 e0       	ldi	r24, 0x08	; 8
    5430:	90 e0       	ldi	r25, 0x00	; 0
    5432:	a0 e0       	ldi	r26, 0x00	; 0
    5434:	b0 e0       	ldi	r27, 0x00	; 0
    5436:	04 c0       	rjmp	.+8      	; 0x5440 <__divdi3+0x57c>
    5438:	88 e1       	ldi	r24, 0x18	; 24
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	a0 e0       	ldi	r26, 0x00	; 0
    543e:	b0 e0       	ldi	r27, 0x00	; 0
    5440:	b5 01       	movw	r22, r10
    5442:	a4 01       	movw	r20, r8
    5444:	08 2e       	mov	r0, r24
    5446:	04 c0       	rjmp	.+8      	; 0x5450 <__divdi3+0x58c>
    5448:	76 95       	lsr	r23
    544a:	67 95       	ror	r22
    544c:	57 95       	ror	r21
    544e:	47 95       	ror	r20
    5450:	0a 94       	dec	r0
    5452:	d2 f7       	brpl	.-12     	; 0x5448 <__divdi3+0x584>
    5454:	fa 01       	movw	r30, r20
    5456:	ef 5d       	subi	r30, 0xDF	; 223
    5458:	ff 4d       	sbci	r31, 0xDF	; 223
    545a:	20 81       	ld	r18, Z
    545c:	ac 01       	movw	r20, r24
    545e:	bd 01       	movw	r22, r26
    5460:	42 0f       	add	r20, r18
    5462:	51 1d       	adc	r21, r1
    5464:	61 1d       	adc	r22, r1
    5466:	71 1d       	adc	r23, r1
    5468:	80 e2       	ldi	r24, 0x20	; 32
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	a0 e0       	ldi	r26, 0x00	; 0
    546e:	b0 e0       	ldi	r27, 0x00	; 0
    5470:	84 1b       	sub	r24, r20
    5472:	95 0b       	sbc	r25, r21
    5474:	a6 0b       	sbc	r26, r22
    5476:	b7 0b       	sbc	r27, r23
    5478:	51 f4       	brne	.+20     	; 0x548e <__divdi3+0x5ca>
    547a:	c8 18       	sub	r12, r8
    547c:	d9 08       	sbc	r13, r9
    547e:	ea 08       	sbc	r14, r10
    5480:	fb 08       	sbc	r15, r11
    5482:	f1 e0       	ldi	r31, 0x01	; 1
    5484:	4f 2e       	mov	r4, r31
    5486:	51 2c       	mov	r5, r1
    5488:	61 2c       	mov	r6, r1
    548a:	71 2c       	mov	r7, r1
    548c:	28 c1       	rjmp	.+592    	; 0x56de <__divdi3+0x81a>
    548e:	08 2e       	mov	r0, r24
    5490:	04 c0       	rjmp	.+8      	; 0x549a <__divdi3+0x5d6>
    5492:	88 0c       	add	r8, r8
    5494:	99 1c       	adc	r9, r9
    5496:	aa 1c       	adc	r10, r10
    5498:	bb 1c       	adc	r11, r11
    549a:	0a 94       	dec	r0
    549c:	d2 f7       	brpl	.-12     	; 0x5492 <__divdi3+0x5ce>
    549e:	97 01       	movw	r18, r14
    54a0:	86 01       	movw	r16, r12
    54a2:	04 2e       	mov	r0, r20
    54a4:	04 c0       	rjmp	.+8      	; 0x54ae <__divdi3+0x5ea>
    54a6:	36 95       	lsr	r19
    54a8:	27 95       	ror	r18
    54aa:	17 95       	ror	r17
    54ac:	07 95       	ror	r16
    54ae:	0a 94       	dec	r0
    54b0:	d2 f7       	brpl	.-12     	; 0x54a6 <__divdi3+0x5e2>
    54b2:	09 ab       	sts	0x59, r16
    54b4:	1a ab       	sts	0x5a, r17
    54b6:	2b ab       	sts	0x5b, r18
    54b8:	3c ab       	sts	0x5c, r19
    54ba:	97 01       	movw	r18, r14
    54bc:	86 01       	movw	r16, r12
    54be:	08 2e       	mov	r0, r24
    54c0:	04 c0       	rjmp	.+8      	; 0x54ca <__divdi3+0x606>
    54c2:	00 0f       	add	r16, r16
    54c4:	11 1f       	adc	r17, r17
    54c6:	22 1f       	adc	r18, r18
    54c8:	33 1f       	adc	r19, r19
    54ca:	0a 94       	dec	r0
    54cc:	d2 f7       	brpl	.-12     	; 0x54c2 <__divdi3+0x5fe>
    54ce:	0d a7       	lds	r16, 0x7d
    54d0:	1e a7       	lds	r17, 0x7e
    54d2:	2f a7       	lds	r18, 0x7f
    54d4:	38 ab       	sts	0x58, r19
    54d6:	ed a8       	sts	0x8d, r30
    54d8:	fe a8       	sts	0x8e, r31
    54da:	0f a9       	sts	0x4f, r16
    54dc:	18 ad       	sts	0x68, r17
    54de:	04 c0       	rjmp	.+8      	; 0x54e8 <__divdi3+0x624>
    54e0:	16 95       	lsr	r17
    54e2:	07 95       	ror	r16
    54e4:	f7 94       	ror	r15
    54e6:	e7 94       	ror	r14
    54e8:	4a 95       	dec	r20
    54ea:	d2 f7       	brpl	.-12     	; 0x54e0 <__divdi3+0x61c>
    54ec:	b8 01       	movw	r22, r16
    54ee:	a7 01       	movw	r20, r14
    54f0:	0d a5       	lds	r16, 0x6d
    54f2:	1e a5       	lds	r17, 0x6e
    54f4:	2f a5       	lds	r18, 0x6f
    54f6:	38 a9       	sts	0x48, r19
    54f8:	04 2b       	or	r16, r20
    54fa:	15 2b       	or	r17, r21
    54fc:	26 2b       	or	r18, r22
    54fe:	37 2b       	or	r19, r23
    5500:	0d a7       	lds	r16, 0x7d
    5502:	1e a7       	lds	r17, 0x7e
    5504:	2f a7       	lds	r18, 0x7f
    5506:	38 ab       	sts	0x58, r19
    5508:	ed a8       	sts	0x8d, r30
    550a:	fe a8       	sts	0x8e, r31
    550c:	0f a9       	sts	0x4f, r16
    550e:	18 ad       	sts	0x68, r17
    5510:	04 c0       	rjmp	.+8      	; 0x551a <__divdi3+0x656>
    5512:	ee 0c       	add	r14, r14
    5514:	ff 1c       	adc	r15, r15
    5516:	00 1f       	adc	r16, r16
    5518:	11 1f       	adc	r17, r17
    551a:	8a 95       	dec	r24
    551c:	d2 f7       	brpl	.-12     	; 0x5512 <__divdi3+0x64e>
    551e:	ed aa       	sts	0x9d, r30
    5520:	fe aa       	sts	0x9e, r31
    5522:	0f ab       	sts	0x5f, r16
    5524:	18 af       	sts	0x78, r17
    5526:	25 01       	movw	r4, r10
    5528:	66 24       	eor	r6, r6
    552a:	77 24       	eor	r7, r7
    552c:	95 01       	movw	r18, r10
    552e:	84 01       	movw	r16, r8
    5530:	20 70       	andi	r18, 0x00	; 0
    5532:	30 70       	andi	r19, 0x00	; 0
    5534:	09 af       	sts	0x79, r16
    5536:	1a af       	sts	0x7a, r17
    5538:	2b af       	sts	0x7b, r18
    553a:	3c af       	sts	0x7c, r19
    553c:	69 a9       	sts	0x49, r22
    553e:	7a a9       	sts	0x4a, r23
    5540:	8b a9       	sts	0x4b, r24
    5542:	9c a9       	sts	0x4c, r25
    5544:	a3 01       	movw	r20, r6
    5546:	92 01       	movw	r18, r4
    5548:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    554c:	29 a7       	lds	r18, 0x79
    554e:	3a a7       	lds	r19, 0x7a
    5550:	4b a7       	lds	r20, 0x7b
    5552:	5c a7       	lds	r21, 0x7c
    5554:	6b 01       	movw	r12, r22
    5556:	7c 01       	movw	r14, r24
    5558:	69 a9       	sts	0x49, r22
    555a:	7a a9       	sts	0x4a, r23
    555c:	8b a9       	sts	0x4b, r24
    555e:	9c a9       	sts	0x4c, r25
    5560:	a3 01       	movw	r20, r6
    5562:	92 01       	movw	r18, r4
    5564:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5568:	ca 01       	movw	r24, r20
    556a:	b9 01       	movw	r22, r18
    556c:	29 ad       	sts	0x69, r18
    556e:	3a ad       	sts	0x6a, r19
    5570:	4b ad       	sts	0x6b, r20
    5572:	5c ad       	sts	0x6c, r21
    5574:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5578:	ab 01       	movw	r20, r22
    557a:	bc 01       	movw	r22, r24
    557c:	76 01       	movw	r14, r12
    557e:	dd 24       	eor	r13, r13
    5580:	cc 24       	eor	r12, r12
    5582:	0d a5       	lds	r16, 0x6d
    5584:	1e a5       	lds	r17, 0x6e
    5586:	2f a5       	lds	r18, 0x6f
    5588:	38 a9       	sts	0x48, r19
    558a:	c9 01       	movw	r24, r18
    558c:	aa 27       	eor	r26, r26
    558e:	bb 27       	eor	r27, r27
    5590:	c8 2a       	or	r12, r24
    5592:	d9 2a       	or	r13, r25
    5594:	ea 2a       	or	r14, r26
    5596:	fb 2a       	or	r15, r27
    5598:	09 a5       	lds	r16, 0x69
    559a:	1a a5       	lds	r17, 0x6a
    559c:	2b a5       	lds	r18, 0x6b
    559e:	3c a5       	lds	r19, 0x6c
    55a0:	c4 16       	cp	r12, r20
    55a2:	d5 06       	cpc	r13, r21
    55a4:	e6 06       	cpc	r14, r22
    55a6:	f7 06       	cpc	r15, r23
    55a8:	38 f5       	brcc	.+78     	; 0x55f8 <__divdi3+0x734>
    55aa:	01 50       	subi	r16, 0x01	; 1
    55ac:	10 40       	sbci	r17, 0x00	; 0
    55ae:	20 40       	sbci	r18, 0x00	; 0
    55b0:	30 40       	sbci	r19, 0x00	; 0
    55b2:	09 ab       	sts	0x59, r16
    55b4:	1a ab       	sts	0x5a, r17
    55b6:	2b ab       	sts	0x5b, r18
    55b8:	3c ab       	sts	0x5c, r19
    55ba:	c8 0c       	add	r12, r8
    55bc:	d9 1c       	adc	r13, r9
    55be:	ea 1c       	adc	r14, r10
    55c0:	fb 1c       	adc	r15, r11
    55c2:	c8 14       	cp	r12, r8
    55c4:	d9 04       	cpc	r13, r9
    55c6:	ea 04       	cpc	r14, r10
    55c8:	fb 04       	cpc	r15, r11
    55ca:	d0 f0       	brcs	.+52     	; 0x5600 <__divdi3+0x73c>
    55cc:	c4 16       	cp	r12, r20
    55ce:	d5 06       	cpc	r13, r21
    55d0:	e6 06       	cpc	r14, r22
    55d2:	f7 06       	cpc	r15, r23
    55d4:	a8 f4       	brcc	.+42     	; 0x5600 <__divdi3+0x73c>
    55d6:	09 a5       	lds	r16, 0x69
    55d8:	1a a5       	lds	r17, 0x6a
    55da:	2b a5       	lds	r18, 0x6b
    55dc:	3c a5       	lds	r19, 0x6c
    55de:	02 50       	subi	r16, 0x02	; 2
    55e0:	10 40       	sbci	r17, 0x00	; 0
    55e2:	20 40       	sbci	r18, 0x00	; 0
    55e4:	30 40       	sbci	r19, 0x00	; 0
    55e6:	09 ab       	sts	0x59, r16
    55e8:	1a ab       	sts	0x5a, r17
    55ea:	2b ab       	sts	0x5b, r18
    55ec:	3c ab       	sts	0x5c, r19
    55ee:	c8 0c       	add	r12, r8
    55f0:	d9 1c       	adc	r13, r9
    55f2:	ea 1c       	adc	r14, r10
    55f4:	fb 1c       	adc	r15, r11
    55f6:	04 c0       	rjmp	.+8      	; 0x5600 <__divdi3+0x73c>
    55f8:	09 ab       	sts	0x59, r16
    55fa:	1a ab       	sts	0x5a, r17
    55fc:	2b ab       	sts	0x5b, r18
    55fe:	3c ab       	sts	0x5c, r19
    5600:	c4 1a       	sub	r12, r20
    5602:	d5 0a       	sbc	r13, r21
    5604:	e6 0a       	sbc	r14, r22
    5606:	f7 0a       	sbc	r15, r23
    5608:	c7 01       	movw	r24, r14
    560a:	b6 01       	movw	r22, r12
    560c:	a3 01       	movw	r20, r6
    560e:	92 01       	movw	r18, r4
    5610:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5614:	29 a7       	lds	r18, 0x79
    5616:	3a a7       	lds	r19, 0x7a
    5618:	4b a7       	lds	r20, 0x7b
    561a:	5c a7       	lds	r21, 0x7c
    561c:	21 96       	adiw	r28, 0x01	; 1
    561e:	6c af       	sts	0x7c, r22
    5620:	7d af       	sts	0x7d, r23
    5622:	8e af       	sts	0x7e, r24
    5624:	9f af       	sts	0x7f, r25
    5626:	21 97       	sbiw	r28, 0x01	; 1
    5628:	c7 01       	movw	r24, r14
    562a:	b6 01       	movw	r22, r12
    562c:	a3 01       	movw	r20, r6
    562e:	92 01       	movw	r18, r4
    5630:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5634:	ca 01       	movw	r24, r20
    5636:	b9 01       	movw	r22, r18
    5638:	29 ad       	sts	0x69, r18
    563a:	3a ad       	sts	0x6a, r19
    563c:	4b ad       	sts	0x6b, r20
    563e:	5c ad       	sts	0x6c, r21
    5640:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5644:	8b 01       	movw	r16, r22
    5646:	9c 01       	movw	r18, r24
    5648:	21 96       	adiw	r28, 0x01	; 1
    564a:	4c ad       	sts	0x6c, r20
    564c:	5d ad       	sts	0x6d, r21
    564e:	6e ad       	sts	0x6e, r22
    5650:	7f ad       	sts	0x6f, r23
    5652:	21 97       	sbiw	r28, 0x01	; 1
    5654:	da 01       	movw	r26, r20
    5656:	99 27       	eor	r25, r25
    5658:	88 27       	eor	r24, r24
    565a:	4d a5       	lds	r20, 0x6d
    565c:	5e a5       	lds	r21, 0x6e
    565e:	6f a5       	lds	r22, 0x6f
    5660:	78 a9       	sts	0x48, r23
    5662:	60 70       	andi	r22, 0x00	; 0
    5664:	70 70       	andi	r23, 0x00	; 0
    5666:	84 2b       	or	r24, r20
    5668:	95 2b       	or	r25, r21
    566a:	a6 2b       	or	r26, r22
    566c:	b7 2b       	or	r27, r23
    566e:	49 a5       	lds	r20, 0x69
    5670:	5a a5       	lds	r21, 0x6a
    5672:	6b a5       	lds	r22, 0x6b
    5674:	7c a5       	lds	r23, 0x6c
    5676:	80 17       	cp	r24, r16
    5678:	91 07       	cpc	r25, r17
    567a:	a2 07       	cpc	r26, r18
    567c:	b3 07       	cpc	r27, r19
    567e:	f0 f4       	brcc	.+60     	; 0x56bc <__divdi3+0x7f8>
    5680:	41 50       	subi	r20, 0x01	; 1
    5682:	50 40       	sbci	r21, 0x00	; 0
    5684:	60 40       	sbci	r22, 0x00	; 0
    5686:	70 40       	sbci	r23, 0x00	; 0
    5688:	88 0d       	add	r24, r8
    568a:	99 1d       	adc	r25, r9
    568c:	aa 1d       	adc	r26, r10
    568e:	bb 1d       	adc	r27, r11
    5690:	88 15       	cp	r24, r8
    5692:	99 05       	cpc	r25, r9
    5694:	aa 05       	cpc	r26, r10
    5696:	bb 05       	cpc	r27, r11
    5698:	88 f0       	brcs	.+34     	; 0x56bc <__divdi3+0x7f8>
    569a:	80 17       	cp	r24, r16
    569c:	91 07       	cpc	r25, r17
    569e:	a2 07       	cpc	r26, r18
    56a0:	b3 07       	cpc	r27, r19
    56a2:	60 f4       	brcc	.+24     	; 0x56bc <__divdi3+0x7f8>
    56a4:	49 a5       	lds	r20, 0x69
    56a6:	5a a5       	lds	r21, 0x6a
    56a8:	6b a5       	lds	r22, 0x6b
    56aa:	7c a5       	lds	r23, 0x6c
    56ac:	42 50       	subi	r20, 0x02	; 2
    56ae:	50 40       	sbci	r21, 0x00	; 0
    56b0:	60 40       	sbci	r22, 0x00	; 0
    56b2:	70 40       	sbci	r23, 0x00	; 0
    56b4:	88 0d       	add	r24, r8
    56b6:	99 1d       	adc	r25, r9
    56b8:	aa 1d       	adc	r26, r10
    56ba:	bb 1d       	adc	r27, r11
    56bc:	6c 01       	movw	r12, r24
    56be:	7d 01       	movw	r14, r26
    56c0:	c0 1a       	sub	r12, r16
    56c2:	d1 0a       	sbc	r13, r17
    56c4:	e2 0a       	sbc	r14, r18
    56c6:	f3 0a       	sbc	r15, r19
    56c8:	09 a9       	sts	0x49, r16
    56ca:	1a a9       	sts	0x4a, r17
    56cc:	2b a9       	sts	0x4b, r18
    56ce:	3c a9       	sts	0x4c, r19
    56d0:	38 01       	movw	r6, r16
    56d2:	55 24       	eor	r5, r5
    56d4:	44 24       	eor	r4, r4
    56d6:	44 2a       	or	r4, r20
    56d8:	55 2a       	or	r5, r21
    56da:	66 2a       	or	r6, r22
    56dc:	77 2a       	or	r7, r23
    56de:	85 01       	movw	r16, r10
    56e0:	22 27       	eor	r18, r18
    56e2:	33 27       	eor	r19, r19
    56e4:	0d a7       	lds	r16, 0x7d
    56e6:	1e a7       	lds	r17, 0x7e
    56e8:	2f a7       	lds	r18, 0x7f
    56ea:	38 ab       	sts	0x58, r19
    56ec:	95 01       	movw	r18, r10
    56ee:	84 01       	movw	r16, r8
    56f0:	20 70       	andi	r18, 0x00	; 0
    56f2:	30 70       	andi	r19, 0x00	; 0
    56f4:	09 af       	sts	0x79, r16
    56f6:	1a af       	sts	0x7a, r17
    56f8:	2b af       	sts	0x7b, r18
    56fa:	3c af       	sts	0x7c, r19
    56fc:	c7 01       	movw	r24, r14
    56fe:	b6 01       	movw	r22, r12
    5700:	2d a5       	lds	r18, 0x6d
    5702:	3e a5       	lds	r19, 0x6e
    5704:	4f a5       	lds	r20, 0x6f
    5706:	58 a9       	sts	0x48, r21
    5708:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    570c:	29 a7       	lds	r18, 0x79
    570e:	3a a7       	lds	r19, 0x7a
    5710:	4b a7       	lds	r20, 0x7b
    5712:	5c a7       	lds	r21, 0x7c
    5714:	69 ab       	sts	0x59, r22
    5716:	7a ab       	sts	0x5a, r23
    5718:	8b ab       	sts	0x5b, r24
    571a:	9c ab       	sts	0x5c, r25
    571c:	c7 01       	movw	r24, r14
    571e:	b6 01       	movw	r22, r12
    5720:	2d a5       	lds	r18, 0x6d
    5722:	3e a5       	lds	r19, 0x6e
    5724:	4f a5       	lds	r20, 0x6f
    5726:	58 a9       	sts	0x48, r21
    5728:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    572c:	ca 01       	movw	r24, r20
    572e:	b9 01       	movw	r22, r18
    5730:	29 ad       	sts	0x69, r18
    5732:	3a ad       	sts	0x6a, r19
    5734:	4b ad       	sts	0x6b, r20
    5736:	5c ad       	sts	0x6c, r21
    5738:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    573c:	ab 01       	movw	r20, r22
    573e:	bc 01       	movw	r22, r24
    5740:	09 a9       	sts	0x49, r16
    5742:	1a a9       	sts	0x4a, r17
    5744:	2b a9       	sts	0x4b, r18
    5746:	3c a9       	sts	0x4c, r19
    5748:	78 01       	movw	r14, r16
    574a:	dd 24       	eor	r13, r13
    574c:	cc 24       	eor	r12, r12
    574e:	0d a9       	sts	0x4d, r16
    5750:	1e a9       	sts	0x4e, r17
    5752:	2f a9       	sts	0x4f, r18
    5754:	38 ad       	sts	0x68, r19
    5756:	c9 01       	movw	r24, r18
    5758:	aa 27       	eor	r26, r26
    575a:	bb 27       	eor	r27, r27
    575c:	c8 2a       	or	r12, r24
    575e:	d9 2a       	or	r13, r25
    5760:	ea 2a       	or	r14, r26
    5762:	fb 2a       	or	r15, r27
    5764:	09 a5       	lds	r16, 0x69
    5766:	1a a5       	lds	r17, 0x6a
    5768:	2b a5       	lds	r18, 0x6b
    576a:	3c a5       	lds	r19, 0x6c
    576c:	c4 16       	cp	r12, r20
    576e:	d5 06       	cpc	r13, r21
    5770:	e6 06       	cpc	r14, r22
    5772:	f7 06       	cpc	r15, r23
    5774:	38 f5       	brcc	.+78     	; 0x57c4 <__divdi3+0x900>
    5776:	01 50       	subi	r16, 0x01	; 1
    5778:	10 40       	sbci	r17, 0x00	; 0
    577a:	20 40       	sbci	r18, 0x00	; 0
    577c:	30 40       	sbci	r19, 0x00	; 0
    577e:	09 ab       	sts	0x59, r16
    5780:	1a ab       	sts	0x5a, r17
    5782:	2b ab       	sts	0x5b, r18
    5784:	3c ab       	sts	0x5c, r19
    5786:	c8 0c       	add	r12, r8
    5788:	d9 1c       	adc	r13, r9
    578a:	ea 1c       	adc	r14, r10
    578c:	fb 1c       	adc	r15, r11
    578e:	c8 14       	cp	r12, r8
    5790:	d9 04       	cpc	r13, r9
    5792:	ea 04       	cpc	r14, r10
    5794:	fb 04       	cpc	r15, r11
    5796:	d0 f0       	brcs	.+52     	; 0x57cc <__divdi3+0x908>
    5798:	c4 16       	cp	r12, r20
    579a:	d5 06       	cpc	r13, r21
    579c:	e6 06       	cpc	r14, r22
    579e:	f7 06       	cpc	r15, r23
    57a0:	a8 f4       	brcc	.+42     	; 0x57cc <__divdi3+0x908>
    57a2:	09 a5       	lds	r16, 0x69
    57a4:	1a a5       	lds	r17, 0x6a
    57a6:	2b a5       	lds	r18, 0x6b
    57a8:	3c a5       	lds	r19, 0x6c
    57aa:	02 50       	subi	r16, 0x02	; 2
    57ac:	10 40       	sbci	r17, 0x00	; 0
    57ae:	20 40       	sbci	r18, 0x00	; 0
    57b0:	30 40       	sbci	r19, 0x00	; 0
    57b2:	09 ab       	sts	0x59, r16
    57b4:	1a ab       	sts	0x5a, r17
    57b6:	2b ab       	sts	0x5b, r18
    57b8:	3c ab       	sts	0x5c, r19
    57ba:	c8 0c       	add	r12, r8
    57bc:	d9 1c       	adc	r13, r9
    57be:	ea 1c       	adc	r14, r10
    57c0:	fb 1c       	adc	r15, r11
    57c2:	04 c0       	rjmp	.+8      	; 0x57cc <__divdi3+0x908>
    57c4:	09 ab       	sts	0x59, r16
    57c6:	1a ab       	sts	0x5a, r17
    57c8:	2b ab       	sts	0x5b, r18
    57ca:	3c ab       	sts	0x5c, r19
    57cc:	c4 1a       	sub	r12, r20
    57ce:	d5 0a       	sbc	r13, r21
    57d0:	e6 0a       	sbc	r14, r22
    57d2:	f7 0a       	sbc	r15, r23
    57d4:	c7 01       	movw	r24, r14
    57d6:	b6 01       	movw	r22, r12
    57d8:	2d a5       	lds	r18, 0x6d
    57da:	3e a5       	lds	r19, 0x6e
    57dc:	4f a5       	lds	r20, 0x6f
    57de:	58 a9       	sts	0x48, r21
    57e0:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    57e4:	29 a7       	lds	r18, 0x79
    57e6:	3a a7       	lds	r19, 0x7a
    57e8:	4b a7       	lds	r20, 0x7b
    57ea:	5c a7       	lds	r21, 0x7c
    57ec:	21 96       	adiw	r28, 0x01	; 1
    57ee:	6c af       	sts	0x7c, r22
    57f0:	7d af       	sts	0x7d, r23
    57f2:	8e af       	sts	0x7e, r24
    57f4:	9f af       	sts	0x7f, r25
    57f6:	21 97       	sbiw	r28, 0x01	; 1
    57f8:	c7 01       	movw	r24, r14
    57fa:	b6 01       	movw	r22, r12
    57fc:	2d a5       	lds	r18, 0x6d
    57fe:	3e a5       	lds	r19, 0x6e
    5800:	4f a5       	lds	r20, 0x6f
    5802:	58 a9       	sts	0x48, r21
    5804:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5808:	ca 01       	movw	r24, r20
    580a:	b9 01       	movw	r22, r18
    580c:	29 ad       	sts	0x69, r18
    580e:	3a ad       	sts	0x6a, r19
    5810:	4b ad       	sts	0x6b, r20
    5812:	5c ad       	sts	0x6c, r21
    5814:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5818:	8b 01       	movw	r16, r22
    581a:	9c 01       	movw	r18, r24
    581c:	21 96       	adiw	r28, 0x01	; 1
    581e:	4c ad       	sts	0x6c, r20
    5820:	5d ad       	sts	0x6d, r21
    5822:	6e ad       	sts	0x6e, r22
    5824:	7f ad       	sts	0x6f, r23
    5826:	21 97       	sbiw	r28, 0x01	; 1
    5828:	da 01       	movw	r26, r20
    582a:	99 27       	eor	r25, r25
    582c:	88 27       	eor	r24, r24
    582e:	4d a9       	sts	0x4d, r20
    5830:	5e a9       	sts	0x4e, r21
    5832:	6f a9       	sts	0x4f, r22
    5834:	78 ad       	sts	0x68, r23
    5836:	60 70       	andi	r22, 0x00	; 0
    5838:	70 70       	andi	r23, 0x00	; 0
    583a:	84 2b       	or	r24, r20
    583c:	95 2b       	or	r25, r21
    583e:	a6 2b       	or	r26, r22
    5840:	b7 2b       	or	r27, r23
    5842:	49 a5       	lds	r20, 0x69
    5844:	5a a5       	lds	r21, 0x6a
    5846:	6b a5       	lds	r22, 0x6b
    5848:	7c a5       	lds	r23, 0x6c
    584a:	80 17       	cp	r24, r16
    584c:	91 07       	cpc	r25, r17
    584e:	a2 07       	cpc	r26, r18
    5850:	b3 07       	cpc	r27, r19
    5852:	d0 f4       	brcc	.+52     	; 0x5888 <__divdi3+0x9c4>
    5854:	41 50       	subi	r20, 0x01	; 1
    5856:	50 40       	sbci	r21, 0x00	; 0
    5858:	60 40       	sbci	r22, 0x00	; 0
    585a:	70 40       	sbci	r23, 0x00	; 0
    585c:	88 0d       	add	r24, r8
    585e:	99 1d       	adc	r25, r9
    5860:	aa 1d       	adc	r26, r10
    5862:	bb 1d       	adc	r27, r11
    5864:	88 15       	cp	r24, r8
    5866:	99 05       	cpc	r25, r9
    5868:	aa 05       	cpc	r26, r10
    586a:	bb 05       	cpc	r27, r11
    586c:	68 f0       	brcs	.+26     	; 0x5888 <__divdi3+0x9c4>
    586e:	80 17       	cp	r24, r16
    5870:	91 07       	cpc	r25, r17
    5872:	a2 07       	cpc	r26, r18
    5874:	b3 07       	cpc	r27, r19
    5876:	40 f4       	brcc	.+16     	; 0x5888 <__divdi3+0x9c4>
    5878:	49 a5       	lds	r20, 0x69
    587a:	5a a5       	lds	r21, 0x6a
    587c:	6b a5       	lds	r22, 0x6b
    587e:	7c a5       	lds	r23, 0x6c
    5880:	42 50       	subi	r20, 0x02	; 2
    5882:	50 40       	sbci	r21, 0x00	; 0
    5884:	60 40       	sbci	r22, 0x00	; 0
    5886:	70 40       	sbci	r23, 0x00	; 0
    5888:	09 a9       	sts	0x49, r16
    588a:	1a a9       	sts	0x4a, r17
    588c:	2b a9       	sts	0x4b, r18
    588e:	3c a9       	sts	0x4c, r19
    5890:	78 01       	movw	r14, r16
    5892:	dd 24       	eor	r13, r13
    5894:	cc 24       	eor	r12, r12
    5896:	c4 2a       	or	r12, r20
    5898:	d5 2a       	or	r13, r21
    589a:	e6 2a       	or	r14, r22
    589c:	f7 2a       	or	r15, r23
    589e:	50 c2       	rjmp	.+1184   	; 0x5d40 <__divdi3+0xe7c>
    58a0:	c8 16       	cp	r12, r24
    58a2:	d9 06       	cpc	r13, r25
    58a4:	ea 06       	cpc	r14, r26
    58a6:	fb 06       	cpc	r15, r27
    58a8:	08 f4       	brcc	.+2      	; 0x58ac <__divdi3+0x9e8>
    58aa:	37 c2       	rjmp	.+1134   	; 0x5d1a <__divdi3+0xe56>
    58ac:	80 30       	cpi	r24, 0x00	; 0
    58ae:	10 e0       	ldi	r17, 0x00	; 0
    58b0:	91 07       	cpc	r25, r17
    58b2:	11 e0       	ldi	r17, 0x01	; 1
    58b4:	a1 07       	cpc	r26, r17
    58b6:	10 e0       	ldi	r17, 0x00	; 0
    58b8:	b1 07       	cpc	r27, r17
    58ba:	50 f4       	brcc	.+20     	; 0x58d0 <__divdi3+0xa0c>
    58bc:	8f 3f       	cpi	r24, 0xFF	; 255
    58be:	91 05       	cpc	r25, r1
    58c0:	a1 05       	cpc	r26, r1
    58c2:	b1 05       	cpc	r27, r1
    58c4:	09 f0       	breq	.+2      	; 0x58c8 <__divdi3+0xa04>
    58c6:	88 f4       	brcc	.+34     	; 0x58ea <__divdi3+0xa26>
    58c8:	00 e0       	ldi	r16, 0x00	; 0
    58ca:	10 e0       	ldi	r17, 0x00	; 0
    58cc:	98 01       	movw	r18, r16
    58ce:	16 c0       	rjmp	.+44     	; 0x58fc <__divdi3+0xa38>
    58d0:	80 30       	cpi	r24, 0x00	; 0
    58d2:	20 e0       	ldi	r18, 0x00	; 0
    58d4:	92 07       	cpc	r25, r18
    58d6:	20 e0       	ldi	r18, 0x00	; 0
    58d8:	a2 07       	cpc	r26, r18
    58da:	21 e0       	ldi	r18, 0x01	; 1
    58dc:	b2 07       	cpc	r27, r18
    58de:	50 f4       	brcc	.+20     	; 0x58f4 <__divdi3+0xa30>
    58e0:	00 e1       	ldi	r16, 0x10	; 16
    58e2:	10 e0       	ldi	r17, 0x00	; 0
    58e4:	20 e0       	ldi	r18, 0x00	; 0
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	09 c0       	rjmp	.+18     	; 0x58fc <__divdi3+0xa38>
    58ea:	08 e0       	ldi	r16, 0x08	; 8
    58ec:	10 e0       	ldi	r17, 0x00	; 0
    58ee:	20 e0       	ldi	r18, 0x00	; 0
    58f0:	30 e0       	ldi	r19, 0x00	; 0
    58f2:	04 c0       	rjmp	.+8      	; 0x58fc <__divdi3+0xa38>
    58f4:	08 e1       	ldi	r16, 0x18	; 24
    58f6:	10 e0       	ldi	r17, 0x00	; 0
    58f8:	20 e0       	ldi	r18, 0x00	; 0
    58fa:	30 e0       	ldi	r19, 0x00	; 0
    58fc:	ac 01       	movw	r20, r24
    58fe:	bd 01       	movw	r22, r26
    5900:	00 2e       	mov	r0, r16
    5902:	04 c0       	rjmp	.+8      	; 0x590c <__divdi3+0xa48>
    5904:	76 95       	lsr	r23
    5906:	67 95       	ror	r22
    5908:	57 95       	ror	r21
    590a:	47 95       	ror	r20
    590c:	0a 94       	dec	r0
    590e:	d2 f7       	brpl	.-12     	; 0x5904 <__divdi3+0xa40>
    5910:	fa 01       	movw	r30, r20
    5912:	ef 5d       	subi	r30, 0xDF	; 223
    5914:	ff 4d       	sbci	r31, 0xDF	; 223
    5916:	40 81       	ld	r20, Z
    5918:	04 0f       	add	r16, r20
    591a:	11 1d       	adc	r17, r1
    591c:	21 1d       	adc	r18, r1
    591e:	31 1d       	adc	r19, r1
    5920:	40 e2       	ldi	r20, 0x20	; 32
    5922:	50 e0       	ldi	r21, 0x00	; 0
    5924:	60 e0       	ldi	r22, 0x00	; 0
    5926:	70 e0       	ldi	r23, 0x00	; 0
    5928:	40 1b       	sub	r20, r16
    592a:	51 0b       	sbc	r21, r17
    592c:	62 0b       	sbc	r22, r18
    592e:	73 0b       	sbc	r23, r19
    5930:	a1 f4       	brne	.+40     	; 0x595a <__divdi3+0xa96>
    5932:	8c 15       	cp	r24, r12
    5934:	9d 05       	cpc	r25, r13
    5936:	ae 05       	cpc	r26, r14
    5938:	bf 05       	cpc	r27, r15
    593a:	08 f4       	brcc	.+2      	; 0x593e <__divdi3+0xa7a>
    593c:	f5 c1       	rjmp	.+1002   	; 0x5d28 <__divdi3+0xe64>
    593e:	ed a8       	sts	0x8d, r30
    5940:	fe a8       	sts	0x8e, r31
    5942:	0f a9       	sts	0x4f, r16
    5944:	18 ad       	sts	0x68, r17
    5946:	44 24       	eor	r4, r4
    5948:	55 24       	eor	r5, r5
    594a:	32 01       	movw	r6, r4
    594c:	e8 14       	cp	r14, r8
    594e:	f9 04       	cpc	r15, r9
    5950:	0a 05       	cpc	r16, r10
    5952:	1b 05       	cpc	r17, r11
    5954:	08 f0       	brcs	.+2      	; 0x5958 <__divdi3+0xa94>
    5956:	eb c1       	rjmp	.+982    	; 0x5d2e <__divdi3+0xe6a>
    5958:	e3 c1       	rjmp	.+966    	; 0x5d20 <__divdi3+0xe5c>
    595a:	34 2e       	mov	r3, r20
    595c:	2c 01       	movw	r4, r24
    595e:	3d 01       	movw	r6, r26
    5960:	04 c0       	rjmp	.+8      	; 0x596a <__divdi3+0xaa6>
    5962:	44 0c       	add	r4, r4
    5964:	55 1c       	adc	r5, r5
    5966:	66 1c       	adc	r6, r6
    5968:	77 1c       	adc	r7, r7
    596a:	4a 95       	dec	r20
    596c:	d2 f7       	brpl	.-12     	; 0x5962 <__divdi3+0xa9e>
    596e:	d5 01       	movw	r26, r10
    5970:	c4 01       	movw	r24, r8
    5972:	00 2e       	mov	r0, r16
    5974:	04 c0       	rjmp	.+8      	; 0x597e <__divdi3+0xaba>
    5976:	b6 95       	lsr	r27
    5978:	a7 95       	ror	r26
    597a:	97 95       	ror	r25
    597c:	87 95       	ror	r24
    597e:	0a 94       	dec	r0
    5980:	d2 f7       	brpl	.-12     	; 0x5976 <__divdi3+0xab2>
    5982:	48 2a       	or	r4, r24
    5984:	59 2a       	or	r5, r25
    5986:	6a 2a       	or	r6, r26
    5988:	7b 2a       	or	r7, r27
    598a:	a5 01       	movw	r20, r10
    598c:	94 01       	movw	r18, r8
    598e:	03 2c       	mov	r0, r3
    5990:	04 c0       	rjmp	.+8      	; 0x599a <__divdi3+0xad6>
    5992:	22 0f       	add	r18, r18
    5994:	33 1f       	adc	r19, r19
    5996:	44 1f       	adc	r20, r20
    5998:	55 1f       	adc	r21, r21
    599a:	0a 94       	dec	r0
    599c:	d2 f7       	brpl	.-12     	; 0x5992 <__divdi3+0xace>
    599e:	29 af       	sts	0x79, r18
    59a0:	3a af       	sts	0x7a, r19
    59a2:	4b af       	sts	0x7b, r20
    59a4:	5c af       	sts	0x7c, r21
    59a6:	b7 01       	movw	r22, r14
    59a8:	a6 01       	movw	r20, r12
    59aa:	00 2e       	mov	r0, r16
    59ac:	04 c0       	rjmp	.+8      	; 0x59b6 <__divdi3+0xaf2>
    59ae:	76 95       	lsr	r23
    59b0:	67 95       	ror	r22
    59b2:	57 95       	ror	r21
    59b4:	47 95       	ror	r20
    59b6:	0a 94       	dec	r0
    59b8:	d2 f7       	brpl	.-12     	; 0x59ae <__divdi3+0xaea>
    59ba:	49 ab       	sts	0x59, r20
    59bc:	5a ab       	sts	0x5a, r21
    59be:	6b ab       	sts	0x5b, r22
    59c0:	7c ab       	sts	0x5c, r23
    59c2:	c7 01       	movw	r24, r14
    59c4:	b6 01       	movw	r22, r12
    59c6:	03 2c       	mov	r0, r3
    59c8:	04 c0       	rjmp	.+8      	; 0x59d2 <__divdi3+0xb0e>
    59ca:	66 0f       	add	r22, r22
    59cc:	77 1f       	adc	r23, r23
    59ce:	88 1f       	adc	r24, r24
    59d0:	99 1f       	adc	r25, r25
    59d2:	0a 94       	dec	r0
    59d4:	d2 f7       	brpl	.-12     	; 0x59ca <__divdi3+0xb06>
    59d6:	6d a7       	lds	r22, 0x7d
    59d8:	7e a7       	lds	r23, 0x7e
    59da:	8f a7       	lds	r24, 0x7f
    59dc:	98 ab       	sts	0x58, r25
    59de:	8d a9       	sts	0x4d, r24
    59e0:	9e a9       	sts	0x4e, r25
    59e2:	af a9       	sts	0x4f, r26
    59e4:	b8 ad       	sts	0x68, r27
    59e6:	04 c0       	rjmp	.+8      	; 0x59f0 <__divdi3+0xb2c>
    59e8:	b6 95       	lsr	r27
    59ea:	a7 95       	ror	r26
    59ec:	97 95       	ror	r25
    59ee:	87 95       	ror	r24
    59f0:	0a 95       	dec	r16
    59f2:	d2 f7       	brpl	.-12     	; 0x59e8 <__divdi3+0xb24>
    59f4:	4d a5       	lds	r20, 0x6d
    59f6:	5e a5       	lds	r21, 0x6e
    59f8:	6f a5       	lds	r22, 0x6f
    59fa:	78 a9       	sts	0x48, r23
    59fc:	48 2b       	or	r20, r24
    59fe:	59 2b       	or	r21, r25
    5a00:	6a 2b       	or	r22, r26
    5a02:	7b 2b       	or	r23, r27
    5a04:	4d a7       	lds	r20, 0x7d
    5a06:	5e a7       	lds	r21, 0x7e
    5a08:	6f a7       	lds	r22, 0x7f
    5a0a:	78 ab       	sts	0x58, r23
    5a0c:	43 01       	movw	r8, r6
    5a0e:	aa 24       	eor	r10, r10
    5a10:	bb 24       	eor	r11, r11
    5a12:	93 01       	movw	r18, r6
    5a14:	82 01       	movw	r16, r4
    5a16:	20 70       	andi	r18, 0x00	; 0
    5a18:	30 70       	andi	r19, 0x00	; 0
    5a1a:	21 96       	adiw	r28, 0x01	; 1
    5a1c:	0c af       	sts	0x7c, r16
    5a1e:	1d af       	sts	0x7d, r17
    5a20:	2e af       	sts	0x7e, r18
    5a22:	3f af       	sts	0x7f, r19
    5a24:	21 97       	sbiw	r28, 0x01	; 1
    5a26:	69 a9       	sts	0x49, r22
    5a28:	7a a9       	sts	0x4a, r23
    5a2a:	8b a9       	sts	0x4b, r24
    5a2c:	9c a9       	sts	0x4c, r25
    5a2e:	a5 01       	movw	r20, r10
    5a30:	94 01       	movw	r18, r8
    5a32:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5a36:	29 a7       	lds	r18, 0x79
    5a38:	3a a7       	lds	r19, 0x7a
    5a3a:	4b a7       	lds	r20, 0x7b
    5a3c:	5c a7       	lds	r21, 0x7c
    5a3e:	6b 01       	movw	r12, r22
    5a40:	7c 01       	movw	r14, r24
    5a42:	69 a9       	sts	0x49, r22
    5a44:	7a a9       	sts	0x4a, r23
    5a46:	8b a9       	sts	0x4b, r24
    5a48:	9c a9       	sts	0x4c, r25
    5a4a:	a5 01       	movw	r20, r10
    5a4c:	94 01       	movw	r18, r8
    5a4e:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5a52:	ca 01       	movw	r24, r20
    5a54:	b9 01       	movw	r22, r18
    5a56:	21 96       	adiw	r28, 0x01	; 1
    5a58:	2c ad       	sts	0x6c, r18
    5a5a:	3d ad       	sts	0x6d, r19
    5a5c:	4e ad       	sts	0x6e, r20
    5a5e:	5f ad       	sts	0x6f, r21
    5a60:	21 97       	sbiw	r28, 0x01	; 1
    5a62:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5a66:	dc 01       	movw	r26, r24
    5a68:	cb 01       	movw	r24, r22
    5a6a:	76 01       	movw	r14, r12
    5a6c:	dd 24       	eor	r13, r13
    5a6e:	cc 24       	eor	r12, r12
    5a70:	0d a5       	lds	r16, 0x6d
    5a72:	1e a5       	lds	r17, 0x6e
    5a74:	2f a5       	lds	r18, 0x6f
    5a76:	38 a9       	sts	0x48, r19
    5a78:	a9 01       	movw	r20, r18
    5a7a:	66 27       	eor	r22, r22
    5a7c:	77 27       	eor	r23, r23
    5a7e:	c4 2a       	or	r12, r20
    5a80:	d5 2a       	or	r13, r21
    5a82:	e6 2a       	or	r14, r22
    5a84:	f7 2a       	or	r15, r23
    5a86:	09 a5       	lds	r16, 0x69
    5a88:	1a a5       	lds	r17, 0x6a
    5a8a:	2b a5       	lds	r18, 0x6b
    5a8c:	3c a5       	lds	r19, 0x6c
    5a8e:	c8 16       	cp	r12, r24
    5a90:	d9 06       	cpc	r13, r25
    5a92:	ea 06       	cpc	r14, r26
    5a94:	fb 06       	cpc	r15, r27
    5a96:	38 f5       	brcc	.+78     	; 0x5ae6 <__divdi3+0xc22>
    5a98:	01 50       	subi	r16, 0x01	; 1
    5a9a:	10 40       	sbci	r17, 0x00	; 0
    5a9c:	20 40       	sbci	r18, 0x00	; 0
    5a9e:	30 40       	sbci	r19, 0x00	; 0
    5aa0:	09 ab       	sts	0x59, r16
    5aa2:	1a ab       	sts	0x5a, r17
    5aa4:	2b ab       	sts	0x5b, r18
    5aa6:	3c ab       	sts	0x5c, r19
    5aa8:	c4 0c       	add	r12, r4
    5aaa:	d5 1c       	adc	r13, r5
    5aac:	e6 1c       	adc	r14, r6
    5aae:	f7 1c       	adc	r15, r7
    5ab0:	c4 14       	cp	r12, r4
    5ab2:	d5 04       	cpc	r13, r5
    5ab4:	e6 04       	cpc	r14, r6
    5ab6:	f7 04       	cpc	r15, r7
    5ab8:	d0 f0       	brcs	.+52     	; 0x5aee <__divdi3+0xc2a>
    5aba:	c8 16       	cp	r12, r24
    5abc:	d9 06       	cpc	r13, r25
    5abe:	ea 06       	cpc	r14, r26
    5ac0:	fb 06       	cpc	r15, r27
    5ac2:	a8 f4       	brcc	.+42     	; 0x5aee <__divdi3+0xc2a>
    5ac4:	09 a5       	lds	r16, 0x69
    5ac6:	1a a5       	lds	r17, 0x6a
    5ac8:	2b a5       	lds	r18, 0x6b
    5aca:	3c a5       	lds	r19, 0x6c
    5acc:	02 50       	subi	r16, 0x02	; 2
    5ace:	10 40       	sbci	r17, 0x00	; 0
    5ad0:	20 40       	sbci	r18, 0x00	; 0
    5ad2:	30 40       	sbci	r19, 0x00	; 0
    5ad4:	09 ab       	sts	0x59, r16
    5ad6:	1a ab       	sts	0x5a, r17
    5ad8:	2b ab       	sts	0x5b, r18
    5ada:	3c ab       	sts	0x5c, r19
    5adc:	c4 0c       	add	r12, r4
    5ade:	d5 1c       	adc	r13, r5
    5ae0:	e6 1c       	adc	r14, r6
    5ae2:	f7 1c       	adc	r15, r7
    5ae4:	04 c0       	rjmp	.+8      	; 0x5aee <__divdi3+0xc2a>
    5ae6:	09 ab       	sts	0x59, r16
    5ae8:	1a ab       	sts	0x5a, r17
    5aea:	2b ab       	sts	0x5b, r18
    5aec:	3c ab       	sts	0x5c, r19
    5aee:	c8 1a       	sub	r12, r24
    5af0:	d9 0a       	sbc	r13, r25
    5af2:	ea 0a       	sbc	r14, r26
    5af4:	fb 0a       	sbc	r15, r27
    5af6:	c7 01       	movw	r24, r14
    5af8:	b6 01       	movw	r22, r12
    5afa:	a5 01       	movw	r20, r10
    5afc:	94 01       	movw	r18, r8
    5afe:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5b02:	29 a7       	lds	r18, 0x79
    5b04:	3a a7       	lds	r19, 0x7a
    5b06:	4b a7       	lds	r20, 0x7b
    5b08:	5c a7       	lds	r21, 0x7c
    5b0a:	29 96       	adiw	r28, 0x09	; 9
    5b0c:	6c af       	sts	0x7c, r22
    5b0e:	7d af       	sts	0x7d, r23
    5b10:	8e af       	sts	0x7e, r24
    5b12:	9f af       	sts	0x7f, r25
    5b14:	29 97       	sbiw	r28, 0x09	; 9
    5b16:	c7 01       	movw	r24, r14
    5b18:	b6 01       	movw	r22, r12
    5b1a:	a5 01       	movw	r20, r10
    5b1c:	94 01       	movw	r18, r8
    5b1e:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__udivmodsi4>
    5b22:	ca 01       	movw	r24, r20
    5b24:	b9 01       	movw	r22, r18
    5b26:	21 96       	adiw	r28, 0x01	; 1
    5b28:	2c ad       	sts	0x6c, r18
    5b2a:	3d ad       	sts	0x6d, r19
    5b2c:	4e ad       	sts	0x6e, r20
    5b2e:	5f ad       	sts	0x6f, r21
    5b30:	21 97       	sbiw	r28, 0x01	; 1
    5b32:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5b36:	4b 01       	movw	r8, r22
    5b38:	5c 01       	movw	r10, r24
    5b3a:	29 96       	adiw	r28, 0x09	; 9
    5b3c:	4c ad       	sts	0x6c, r20
    5b3e:	5d ad       	sts	0x6d, r21
    5b40:	6e ad       	sts	0x6e, r22
    5b42:	7f ad       	sts	0x6f, r23
    5b44:	29 97       	sbiw	r28, 0x09	; 9
    5b46:	9a 01       	movw	r18, r20
    5b48:	11 27       	eor	r17, r17
    5b4a:	00 27       	eor	r16, r16
    5b4c:	8d a5       	lds	r24, 0x6d
    5b4e:	9e a5       	lds	r25, 0x6e
    5b50:	af a5       	lds	r26, 0x6f
    5b52:	b8 a9       	sts	0x48, r27
    5b54:	a0 70       	andi	r26, 0x00	; 0
    5b56:	b0 70       	andi	r27, 0x00	; 0
    5b58:	08 2b       	or	r16, r24
    5b5a:	19 2b       	or	r17, r25
    5b5c:	2a 2b       	or	r18, r26
    5b5e:	3b 2b       	or	r19, r27
    5b60:	89 a5       	lds	r24, 0x69
    5b62:	9a a5       	lds	r25, 0x6a
    5b64:	ab a5       	lds	r26, 0x6b
    5b66:	bc a5       	lds	r27, 0x6c
    5b68:	08 15       	cp	r16, r8
    5b6a:	19 05       	cpc	r17, r9
    5b6c:	2a 05       	cpc	r18, r10
    5b6e:	3b 05       	cpc	r19, r11
    5b70:	e0 f4       	brcc	.+56     	; 0x5baa <__divdi3+0xce6>
    5b72:	01 97       	sbiw	r24, 0x01	; 1
    5b74:	a1 09       	sbc	r26, r1
    5b76:	b1 09       	sbc	r27, r1
    5b78:	04 0d       	add	r16, r4
    5b7a:	15 1d       	adc	r17, r5
    5b7c:	26 1d       	adc	r18, r6
    5b7e:	37 1d       	adc	r19, r7
    5b80:	04 15       	cp	r16, r4
    5b82:	15 05       	cpc	r17, r5
    5b84:	26 05       	cpc	r18, r6
    5b86:	37 05       	cpc	r19, r7
    5b88:	80 f0       	brcs	.+32     	; 0x5baa <__divdi3+0xce6>
    5b8a:	08 15       	cp	r16, r8
    5b8c:	19 05       	cpc	r17, r9
    5b8e:	2a 05       	cpc	r18, r10
    5b90:	3b 05       	cpc	r19, r11
    5b92:	58 f4       	brcc	.+22     	; 0x5baa <__divdi3+0xce6>
    5b94:	89 a5       	lds	r24, 0x69
    5b96:	9a a5       	lds	r25, 0x6a
    5b98:	ab a5       	lds	r26, 0x6b
    5b9a:	bc a5       	lds	r27, 0x6c
    5b9c:	02 97       	sbiw	r24, 0x02	; 2
    5b9e:	a1 09       	sbc	r26, r1
    5ba0:	b1 09       	sbc	r27, r1
    5ba2:	04 0d       	add	r16, r4
    5ba4:	15 1d       	adc	r17, r5
    5ba6:	26 1d       	adc	r18, r6
    5ba8:	37 1d       	adc	r19, r7
    5baa:	b9 01       	movw	r22, r18
    5bac:	a8 01       	movw	r20, r16
    5bae:	48 19       	sub	r20, r8
    5bb0:	59 09       	sbc	r21, r9
    5bb2:	6a 09       	sbc	r22, r10
    5bb4:	7b 09       	sbc	r23, r11
    5bb6:	4d a7       	lds	r20, 0x7d
    5bb8:	5e a7       	lds	r21, 0x7e
    5bba:	6f a7       	lds	r22, 0x7f
    5bbc:	78 ab       	sts	0x58, r23
    5bbe:	09 a9       	sts	0x49, r16
    5bc0:	1a a9       	sts	0x4a, r17
    5bc2:	2b a9       	sts	0x4b, r18
    5bc4:	3c a9       	sts	0x4c, r19
    5bc6:	78 01       	movw	r14, r16
    5bc8:	dd 24       	eor	r13, r13
    5bca:	cc 24       	eor	r12, r12
    5bcc:	c8 2a       	or	r12, r24
    5bce:	d9 2a       	or	r13, r25
    5bd0:	ea 2a       	or	r14, r26
    5bd2:	fb 2a       	or	r15, r27
    5bd4:	ff ef       	ldi	r31, 0xFF	; 255
    5bd6:	8f 2e       	mov	r8, r31
    5bd8:	ff ef       	ldi	r31, 0xFF	; 255
    5bda:	9f 2e       	mov	r9, r31
    5bdc:	a1 2c       	mov	r10, r1
    5bde:	b1 2c       	mov	r11, r1
    5be0:	8c 20       	and	r8, r12
    5be2:	9d 20       	and	r9, r13
    5be4:	ae 20       	and	r10, r14
    5be6:	bf 20       	and	r11, r15
    5be8:	87 01       	movw	r16, r14
    5bea:	22 27       	eor	r18, r18
    5bec:	33 27       	eor	r19, r19
    5bee:	09 a7       	lds	r16, 0x79
    5bf0:	1a a7       	lds	r17, 0x7a
    5bf2:	2b a7       	lds	r18, 0x7b
    5bf4:	3c a7       	lds	r19, 0x7c
    5bf6:	49 ac       	sts	0xa9, r20
    5bf8:	5a ac       	sts	0xaa, r21
    5bfa:	6b ac       	sts	0xab, r22
    5bfc:	7c ac       	sts	0xac, r23
    5bfe:	2f ef       	ldi	r18, 0xFF	; 255
    5c00:	3f ef       	ldi	r19, 0xFF	; 255
    5c02:	40 e0       	ldi	r20, 0x00	; 0
    5c04:	50 e0       	ldi	r21, 0x00	; 0
    5c06:	42 22       	and	r4, r18
    5c08:	53 22       	and	r5, r19
    5c0a:	64 22       	and	r6, r20
    5c0c:	75 22       	and	r7, r21
    5c0e:	29 ad       	sts	0x69, r18
    5c10:	3a ad       	sts	0x6a, r19
    5c12:	4b ad       	sts	0x6b, r20
    5c14:	5c ad       	sts	0x6c, r21
    5c16:	8a 01       	movw	r16, r20
    5c18:	22 27       	eor	r18, r18
    5c1a:	33 27       	eor	r19, r19
    5c1c:	09 ab       	sts	0x59, r16
    5c1e:	1a ab       	sts	0x5a, r17
    5c20:	2b ab       	sts	0x5b, r18
    5c22:	3c ab       	sts	0x5c, r19
    5c24:	c5 01       	movw	r24, r10
    5c26:	b4 01       	movw	r22, r8
    5c28:	a3 01       	movw	r20, r6
    5c2a:	92 01       	movw	r18, r4
    5c2c:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5c30:	69 af       	sts	0x79, r22
    5c32:	7a af       	sts	0x7a, r23
    5c34:	8b af       	sts	0x7b, r24
    5c36:	9c af       	sts	0x7c, r25
    5c38:	c5 01       	movw	r24, r10
    5c3a:	b4 01       	movw	r22, r8
    5c3c:	29 a9       	sts	0x49, r18
    5c3e:	3a a9       	sts	0x4a, r19
    5c40:	4b a9       	sts	0x4b, r20
    5c42:	5c a9       	sts	0x4c, r21
    5c44:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5c48:	4b 01       	movw	r8, r22
    5c4a:	5c 01       	movw	r10, r24
    5c4c:	69 a5       	lds	r22, 0x69
    5c4e:	7a a5       	lds	r23, 0x6a
    5c50:	8b a5       	lds	r24, 0x6b
    5c52:	9c a5       	lds	r25, 0x6c
    5c54:	a3 01       	movw	r20, r6
    5c56:	92 01       	movw	r18, r4
    5c58:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5c5c:	2b 01       	movw	r4, r22
    5c5e:	3c 01       	movw	r6, r24
    5c60:	69 a5       	lds	r22, 0x69
    5c62:	7a a5       	lds	r23, 0x6a
    5c64:	8b a5       	lds	r24, 0x6b
    5c66:	9c a5       	lds	r25, 0x6c
    5c68:	29 a9       	sts	0x49, r18
    5c6a:	3a a9       	sts	0x4a, r19
    5c6c:	4b a9       	sts	0x4b, r20
    5c6e:	5c a9       	sts	0x4c, r21
    5c70:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsi3>
    5c74:	ab 01       	movw	r20, r22
    5c76:	bc 01       	movw	r22, r24
    5c78:	84 0c       	add	r8, r4
    5c7a:	95 1c       	adc	r9, r5
    5c7c:	a6 1c       	adc	r10, r6
    5c7e:	b7 1c       	adc	r11, r7
    5c80:	09 ad       	sts	0x69, r16
    5c82:	1a ad       	sts	0x6a, r17
    5c84:	2b ad       	sts	0x6b, r18
    5c86:	3c ad       	sts	0x6c, r19
    5c88:	c9 01       	movw	r24, r18
    5c8a:	aa 27       	eor	r26, r26
    5c8c:	bb 27       	eor	r27, r27
    5c8e:	88 0e       	add	r8, r24
    5c90:	99 1e       	adc	r9, r25
    5c92:	aa 1e       	adc	r10, r26
    5c94:	bb 1e       	adc	r11, r27
    5c96:	84 14       	cp	r8, r4
    5c98:	95 04       	cpc	r9, r5
    5c9a:	a6 04       	cpc	r10, r6
    5c9c:	b7 04       	cpc	r11, r7
    5c9e:	20 f4       	brcc	.+8      	; 0x5ca8 <__divdi3+0xde4>
    5ca0:	40 50       	subi	r20, 0x00	; 0
    5ca2:	50 40       	sbci	r21, 0x00	; 0
    5ca4:	6f 4f       	sbci	r22, 0xFF	; 255
    5ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca8:	c5 01       	movw	r24, r10
    5caa:	aa 27       	eor	r26, r26
    5cac:	bb 27       	eor	r27, r27
    5cae:	84 0f       	add	r24, r20
    5cb0:	95 1f       	adc	r25, r21
    5cb2:	a6 1f       	adc	r26, r22
    5cb4:	b7 1f       	adc	r27, r23
    5cb6:	0d a5       	lds	r16, 0x6d
    5cb8:	1e a5       	lds	r17, 0x6e
    5cba:	2f a5       	lds	r18, 0x6f
    5cbc:	38 a9       	sts	0x48, r19
    5cbe:	08 17       	cp	r16, r24
    5cc0:	19 07       	cpc	r17, r25
    5cc2:	2a 07       	cpc	r18, r26
    5cc4:	3b 07       	cpc	r19, r27
    5cc6:	18 f1       	brcs	.+70     	; 0x5d0e <__divdi3+0xe4a>
    5cc8:	80 17       	cp	r24, r16
    5cca:	91 07       	cpc	r25, r17
    5ccc:	a2 07       	cpc	r26, r18
    5cce:	b3 07       	cpc	r27, r19
    5cd0:	a1 f5       	brne	.+104    	; 0x5d3a <__divdi3+0xe76>
    5cd2:	54 01       	movw	r10, r8
    5cd4:	99 24       	eor	r9, r9
    5cd6:	88 24       	eor	r8, r8
    5cd8:	89 ad       	sts	0x69, r24
    5cda:	9a ad       	sts	0x6a, r25
    5cdc:	ab ad       	sts	0x6b, r26
    5cde:	bc ad       	sts	0x6c, r27
    5ce0:	a0 70       	andi	r26, 0x00	; 0
    5ce2:	b0 70       	andi	r27, 0x00	; 0
    5ce4:	88 0e       	add	r8, r24
    5ce6:	99 1e       	adc	r9, r25
    5ce8:	aa 1e       	adc	r10, r26
    5cea:	bb 1e       	adc	r11, r27
    5cec:	4d a9       	sts	0x4d, r20
    5cee:	5e a9       	sts	0x4e, r21
    5cf0:	6f a9       	sts	0x4f, r22
    5cf2:	78 ad       	sts	0x68, r23
    5cf4:	03 2c       	mov	r0, r3
    5cf6:	04 c0       	rjmp	.+8      	; 0x5d00 <__divdi3+0xe3c>
    5cf8:	44 0f       	add	r20, r20
    5cfa:	55 1f       	adc	r21, r21
    5cfc:	66 1f       	adc	r22, r22
    5cfe:	77 1f       	adc	r23, r23
    5d00:	0a 94       	dec	r0
    5d02:	d2 f7       	brpl	.-12     	; 0x5cf8 <__divdi3+0xe34>
    5d04:	48 15       	cp	r20, r8
    5d06:	59 05       	cpc	r21, r9
    5d08:	6a 05       	cpc	r22, r10
    5d0a:	7b 05       	cpc	r23, r11
    5d0c:	b0 f4       	brcc	.+44     	; 0x5d3a <__divdi3+0xe76>
    5d0e:	08 94       	sec
    5d10:	c1 08       	sbc	r12, r1
    5d12:	d1 08       	sbc	r13, r1
    5d14:	e1 08       	sbc	r14, r1
    5d16:	f1 08       	sbc	r15, r1
    5d18:	10 c0       	rjmp	.+32     	; 0x5d3a <__divdi3+0xe76>
    5d1a:	44 24       	eor	r4, r4
    5d1c:	55 24       	eor	r5, r5
    5d1e:	32 01       	movw	r6, r4
    5d20:	cc 24       	eor	r12, r12
    5d22:	dd 24       	eor	r13, r13
    5d24:	76 01       	movw	r14, r12
    5d26:	0c c0       	rjmp	.+24     	; 0x5d40 <__divdi3+0xe7c>
    5d28:	44 24       	eor	r4, r4
    5d2a:	55 24       	eor	r5, r5
    5d2c:	32 01       	movw	r6, r4
    5d2e:	81 e0       	ldi	r24, 0x01	; 1
    5d30:	c8 2e       	mov	r12, r24
    5d32:	d1 2c       	mov	r13, r1
    5d34:	e1 2c       	mov	r14, r1
    5d36:	f1 2c       	mov	r15, r1
    5d38:	03 c0       	rjmp	.+6      	; 0x5d40 <__divdi3+0xe7c>
    5d3a:	44 24       	eor	r4, r4
    5d3c:	55 24       	eor	r5, r5
    5d3e:	32 01       	movw	r6, r4
    5d40:	fe 01       	movw	r30, r28
    5d42:	31 96       	adiw	r30, 0x01	; 1
    5d44:	88 e0       	ldi	r24, 0x08	; 8
    5d46:	df 01       	movw	r26, r30
    5d48:	1d 92       	st	X+, r1
    5d4a:	8a 95       	dec	r24
    5d4c:	e9 f7       	brne	.-6      	; 0x5d48 <__divdi3+0xe84>
    5d4e:	c9 82       	std	Y+1, r12	; 0x01
    5d50:	da 82       	std	Y+2, r13	; 0x02
    5d52:	eb 82       	std	Y+3, r14	; 0x03
    5d54:	fc 82       	std	Y+4, r15	; 0x04
    5d56:	4d 82       	std	Y+5, r4	; 0x05
    5d58:	5e 82       	std	Y+6, r5	; 0x06
    5d5a:	6f 82       	std	Y+7, r6	; 0x07
    5d5c:	78 86       	std	Y+8, r7	; 0x08
    5d5e:	2c 2d       	mov	r18, r12
    5d60:	3a 81       	ldd	r19, Y+2	; 0x02
    5d62:	4b 81       	ldd	r20, Y+3	; 0x03
    5d64:	5c 81       	ldd	r21, Y+4	; 0x04
    5d66:	64 2d       	mov	r22, r4
    5d68:	7e 81       	ldd	r23, Y+6	; 0x06
    5d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    5d6c:	98 85       	ldd	r25, Y+8	; 0x08
    5d6e:	25 96       	adiw	r28, 0x05	; 5
    5d70:	ec ac       	sts	0xac, r30
    5d72:	fd ac       	sts	0xad, r31
    5d74:	0e ad       	sts	0x6e, r16
    5d76:	1f ad       	sts	0x6f, r17
    5d78:	25 97       	sbiw	r28, 0x05	; 5
    5d7a:	e1 14       	cp	r14, r1
    5d7c:	f1 04       	cpc	r15, r1
    5d7e:	01 05       	cpc	r16, r1
    5d80:	11 05       	cpc	r17, r1
    5d82:	09 f4       	brne	.+2      	; 0x5d86 <__divdi3+0xec2>
    5d84:	56 c0       	rjmp	.+172    	; 0x5e32 <__divdi3+0xf6e>
    5d86:	21 95       	neg	r18
    5d88:	e1 e0       	ldi	r30, 0x01	; 1
    5d8a:	12 16       	cp	r1, r18
    5d8c:	08 f0       	brcs	.+2      	; 0x5d90 <__divdi3+0xecc>
    5d8e:	e0 e0       	ldi	r30, 0x00	; 0
    5d90:	31 95       	neg	r19
    5d92:	f1 e0       	ldi	r31, 0x01	; 1
    5d94:	13 16       	cp	r1, r19
    5d96:	08 f0       	brcs	.+2      	; 0x5d9a <__divdi3+0xed6>
    5d98:	f0 e0       	ldi	r31, 0x00	; 0
    5d9a:	03 2f       	mov	r16, r19
    5d9c:	0e 1b       	sub	r16, r30
    5d9e:	e1 e0       	ldi	r30, 0x01	; 1
    5da0:	30 17       	cp	r19, r16
    5da2:	08 f0       	brcs	.+2      	; 0x5da6 <__divdi3+0xee2>
    5da4:	e0 e0       	ldi	r30, 0x00	; 0
    5da6:	fe 2b       	or	r31, r30
    5da8:	41 95       	neg	r20
    5daa:	e1 e0       	ldi	r30, 0x01	; 1
    5dac:	14 16       	cp	r1, r20
    5dae:	08 f0       	brcs	.+2      	; 0x5db2 <__divdi3+0xeee>
    5db0:	e0 e0       	ldi	r30, 0x00	; 0
    5db2:	14 2f       	mov	r17, r20
    5db4:	1f 1b       	sub	r17, r31
    5db6:	31 e0       	ldi	r19, 0x01	; 1
    5db8:	41 17       	cp	r20, r17
    5dba:	08 f0       	brcs	.+2      	; 0x5dbe <__divdi3+0xefa>
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	e3 2b       	or	r30, r19
    5dc0:	51 95       	neg	r21
    5dc2:	f1 e0       	ldi	r31, 0x01	; 1
    5dc4:	15 16       	cp	r1, r21
    5dc6:	08 f0       	brcs	.+2      	; 0x5dca <__divdi3+0xf06>
    5dc8:	f0 e0       	ldi	r31, 0x00	; 0
    5dca:	b5 2f       	mov	r27, r21
    5dcc:	be 1b       	sub	r27, r30
    5dce:	31 e0       	ldi	r19, 0x01	; 1
    5dd0:	5b 17       	cp	r21, r27
    5dd2:	08 f0       	brcs	.+2      	; 0x5dd6 <__divdi3+0xf12>
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	f3 2b       	or	r31, r19
    5dd8:	61 95       	neg	r22
    5dda:	e1 e0       	ldi	r30, 0x01	; 1
    5ddc:	16 16       	cp	r1, r22
    5dde:	08 f0       	brcs	.+2      	; 0x5de2 <__divdi3+0xf1e>
    5de0:	e0 e0       	ldi	r30, 0x00	; 0
    5de2:	46 2e       	mov	r4, r22
    5de4:	4f 1a       	sub	r4, r31
    5de6:	31 e0       	ldi	r19, 0x01	; 1
    5de8:	64 15       	cp	r22, r4
    5dea:	08 f0       	brcs	.+2      	; 0x5dee <__divdi3+0xf2a>
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	e3 2b       	or	r30, r19
    5df0:	71 95       	neg	r23
    5df2:	f1 e0       	ldi	r31, 0x01	; 1
    5df4:	17 16       	cp	r1, r23
    5df6:	08 f0       	brcs	.+2      	; 0x5dfa <__divdi3+0xf36>
    5df8:	f0 e0       	ldi	r31, 0x00	; 0
    5dfa:	a7 2f       	mov	r26, r23
    5dfc:	ae 1b       	sub	r26, r30
    5dfe:	31 e0       	ldi	r19, 0x01	; 1
    5e00:	7a 17       	cp	r23, r26
    5e02:	08 f0       	brcs	.+2      	; 0x5e06 <__divdi3+0xf42>
    5e04:	30 e0       	ldi	r19, 0x00	; 0
    5e06:	f3 2b       	or	r31, r19
    5e08:	81 95       	neg	r24
    5e0a:	e1 e0       	ldi	r30, 0x01	; 1
    5e0c:	18 16       	cp	r1, r24
    5e0e:	08 f0       	brcs	.+2      	; 0x5e12 <__divdi3+0xf4e>
    5e10:	e0 e0       	ldi	r30, 0x00	; 0
    5e12:	f8 2e       	mov	r15, r24
    5e14:	ff 1a       	sub	r15, r31
    5e16:	ff 2d       	mov	r31, r15
    5e18:	31 e0       	ldi	r19, 0x01	; 1
    5e1a:	8f 15       	cp	r24, r15
    5e1c:	08 f0       	brcs	.+2      	; 0x5e20 <__divdi3+0xf5c>
    5e1e:	30 e0       	ldi	r19, 0x00	; 0
    5e20:	e3 2b       	or	r30, r19
    5e22:	91 95       	neg	r25
    5e24:	30 2f       	mov	r19, r16
    5e26:	41 2f       	mov	r20, r17
    5e28:	5b 2f       	mov	r21, r27
    5e2a:	64 2d       	mov	r22, r4
    5e2c:	7a 2f       	mov	r23, r26
    5e2e:	8f 2f       	mov	r24, r31
    5e30:	9e 1b       	sub	r25, r30
    5e32:	c8 5b       	subi	r28, 0xB8	; 184
    5e34:	df 4f       	sbci	r29, 0xFF	; 255
    5e36:	e1 e1       	ldi	r30, 0x11	; 17
    5e38:	0c 94 d0 2f 	jmp	0x5fa0	; 0x5fa0 <__epilogue_restores__+0x2>

00005e3c <main>:

#include "E-000001-000009_firmware_rev_1_0.h"



int main(void) {
    5e3c:	cf 93       	push	r28
    5e3e:	df 93       	push	r29
    5e40:	00 d0       	rcall	.+0      	; 0x5e42 <main+0x6>
    5e42:	00 d0       	rcall	.+0      	; 0x5e44 <main+0x8>
    5e44:	cd b7       	in	r28, 0x3d	; 61
    5e46:	de b7       	in	r29, 0x3e	; 62
	int32_t BP_13b_avg_uV, BP_13b_min_uV, BP_13b_max_uV, BP_13b_delta_uV, BP_13b_diff1_uV, BP_13b_diff2_uV;
	//uint8_t DATA = {0x05,0x10,0x01,0x05};
	//uint8_t RDATA[512];
	uint8_t filterSettings;
	// set system clock
	set_32MHz();  // for RC clock
    5e48:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_32MHz>
	//setXOSC_32MHz();  // for crystal when installed
	// breakpoint 1a - collect room temperature
	CO_collectTemp(&BP_1a_avg_mV, &BP_1a_min_mV, &BP_1a_max_mV);
    5e4c:	ce 01       	movw	r24, r28
    5e4e:	05 96       	adiw	r24, 0x05	; 5
    5e50:	be 01       	movw	r22, r28
    5e52:	6d 5f       	subi	r22, 0xFD	; 253
    5e54:	7f 4f       	sbci	r23, 0xFF	; 255
    5e56:	ae 01       	movw	r20, r28
    5e58:	4f 5f       	subi	r20, 0xFF	; 255
    5e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    5e5c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <CO_collectTemp>
	//error = getBootSectorData();
	//SD_write_and_read_knowns_FAT();
	//SD_disable();
	
	//TestRadio();
	chibi_test_radio();
    5e60:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <chibi_test_radio>
    5e64:	ff cf       	rjmp	.-2      	; 0x5e64 <main+0x28>

00005e66 <__mulsi3>:
    5e66:	62 9f       	mul	r22, r18
    5e68:	d0 01       	movw	r26, r0
    5e6a:	73 9f       	mul	r23, r19
    5e6c:	f0 01       	movw	r30, r0
    5e6e:	82 9f       	mul	r24, r18
    5e70:	e0 0d       	add	r30, r0
    5e72:	f1 1d       	adc	r31, r1
    5e74:	64 9f       	mul	r22, r20
    5e76:	e0 0d       	add	r30, r0
    5e78:	f1 1d       	adc	r31, r1
    5e7a:	92 9f       	mul	r25, r18
    5e7c:	f0 0d       	add	r31, r0
    5e7e:	83 9f       	mul	r24, r19
    5e80:	f0 0d       	add	r31, r0
    5e82:	74 9f       	mul	r23, r20
    5e84:	f0 0d       	add	r31, r0
    5e86:	65 9f       	mul	r22, r21
    5e88:	f0 0d       	add	r31, r0
    5e8a:	99 27       	eor	r25, r25
    5e8c:	72 9f       	mul	r23, r18
    5e8e:	b0 0d       	add	r27, r0
    5e90:	e1 1d       	adc	r30, r1
    5e92:	f9 1f       	adc	r31, r25
    5e94:	63 9f       	mul	r22, r19
    5e96:	b0 0d       	add	r27, r0
    5e98:	e1 1d       	adc	r30, r1
    5e9a:	f9 1f       	adc	r31, r25
    5e9c:	bd 01       	movw	r22, r26
    5e9e:	cf 01       	movw	r24, r30
    5ea0:	11 24       	eor	r1, r1
    5ea2:	08 95       	ret

00005ea4 <__udivmodhi4>:
    5ea4:	aa 1b       	sub	r26, r26
    5ea6:	bb 1b       	sub	r27, r27
    5ea8:	51 e1       	ldi	r21, 0x11	; 17
    5eaa:	07 c0       	rjmp	.+14     	; 0x5eba <__udivmodhi4_ep>

00005eac <__udivmodhi4_loop>:
    5eac:	aa 1f       	adc	r26, r26
    5eae:	bb 1f       	adc	r27, r27
    5eb0:	a6 17       	cp	r26, r22
    5eb2:	b7 07       	cpc	r27, r23
    5eb4:	10 f0       	brcs	.+4      	; 0x5eba <__udivmodhi4_ep>
    5eb6:	a6 1b       	sub	r26, r22
    5eb8:	b7 0b       	sbc	r27, r23

00005eba <__udivmodhi4_ep>:
    5eba:	88 1f       	adc	r24, r24
    5ebc:	99 1f       	adc	r25, r25
    5ebe:	5a 95       	dec	r21
    5ec0:	a9 f7       	brne	.-22     	; 0x5eac <__udivmodhi4_loop>
    5ec2:	80 95       	com	r24
    5ec4:	90 95       	com	r25
    5ec6:	bc 01       	movw	r22, r24
    5ec8:	cd 01       	movw	r24, r26
    5eca:	08 95       	ret

00005ecc <__divmodhi4>:
    5ecc:	97 fb       	bst	r25, 7
    5ece:	09 2e       	mov	r0, r25
    5ed0:	07 26       	eor	r0, r23
    5ed2:	0a d0       	rcall	.+20     	; 0x5ee8 <__divmodhi4_neg1>
    5ed4:	77 fd       	sbrc	r23, 7
    5ed6:	04 d0       	rcall	.+8      	; 0x5ee0 <__divmodhi4_neg2>
    5ed8:	e5 df       	rcall	.-54     	; 0x5ea4 <__udivmodhi4>
    5eda:	06 d0       	rcall	.+12     	; 0x5ee8 <__divmodhi4_neg1>
    5edc:	00 20       	and	r0, r0
    5ede:	1a f4       	brpl	.+6      	; 0x5ee6 <__divmodhi4_exit>

00005ee0 <__divmodhi4_neg2>:
    5ee0:	70 95       	com	r23
    5ee2:	61 95       	neg	r22
    5ee4:	7f 4f       	sbci	r23, 0xFF	; 255

00005ee6 <__divmodhi4_exit>:
    5ee6:	08 95       	ret

00005ee8 <__divmodhi4_neg1>:
    5ee8:	f6 f7       	brtc	.-4      	; 0x5ee6 <__divmodhi4_exit>
    5eea:	90 95       	com	r25
    5eec:	81 95       	neg	r24
    5eee:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef0:	08 95       	ret

00005ef2 <__udivmodsi4>:
    5ef2:	a1 e2       	ldi	r26, 0x21	; 33
    5ef4:	1a 2e       	mov	r1, r26
    5ef6:	aa 1b       	sub	r26, r26
    5ef8:	bb 1b       	sub	r27, r27
    5efa:	fd 01       	movw	r30, r26
    5efc:	0d c0       	rjmp	.+26     	; 0x5f18 <__udivmodsi4_ep>

00005efe <__udivmodsi4_loop>:
    5efe:	aa 1f       	adc	r26, r26
    5f00:	bb 1f       	adc	r27, r27
    5f02:	ee 1f       	adc	r30, r30
    5f04:	ff 1f       	adc	r31, r31
    5f06:	a2 17       	cp	r26, r18
    5f08:	b3 07       	cpc	r27, r19
    5f0a:	e4 07       	cpc	r30, r20
    5f0c:	f5 07       	cpc	r31, r21
    5f0e:	20 f0       	brcs	.+8      	; 0x5f18 <__udivmodsi4_ep>
    5f10:	a2 1b       	sub	r26, r18
    5f12:	b3 0b       	sbc	r27, r19
    5f14:	e4 0b       	sbc	r30, r20
    5f16:	f5 0b       	sbc	r31, r21

00005f18 <__udivmodsi4_ep>:
    5f18:	66 1f       	adc	r22, r22
    5f1a:	77 1f       	adc	r23, r23
    5f1c:	88 1f       	adc	r24, r24
    5f1e:	99 1f       	adc	r25, r25
    5f20:	1a 94       	dec	r1
    5f22:	69 f7       	brne	.-38     	; 0x5efe <__udivmodsi4_loop>
    5f24:	60 95       	com	r22
    5f26:	70 95       	com	r23
    5f28:	80 95       	com	r24
    5f2a:	90 95       	com	r25
    5f2c:	9b 01       	movw	r18, r22
    5f2e:	ac 01       	movw	r20, r24
    5f30:	bd 01       	movw	r22, r26
    5f32:	cf 01       	movw	r24, r30
    5f34:	08 95       	ret

00005f36 <__divmodsi4>:
    5f36:	97 fb       	bst	r25, 7
    5f38:	09 2e       	mov	r0, r25
    5f3a:	05 26       	eor	r0, r21
    5f3c:	0e d0       	rcall	.+28     	; 0x5f5a <__divmodsi4_neg1>
    5f3e:	57 fd       	sbrc	r21, 7
    5f40:	04 d0       	rcall	.+8      	; 0x5f4a <__divmodsi4_neg2>
    5f42:	d7 df       	rcall	.-82     	; 0x5ef2 <__udivmodsi4>
    5f44:	0a d0       	rcall	.+20     	; 0x5f5a <__divmodsi4_neg1>
    5f46:	00 1c       	adc	r0, r0
    5f48:	38 f4       	brcc	.+14     	; 0x5f58 <__divmodsi4_exit>

00005f4a <__divmodsi4_neg2>:
    5f4a:	50 95       	com	r21
    5f4c:	40 95       	com	r20
    5f4e:	30 95       	com	r19
    5f50:	21 95       	neg	r18
    5f52:	3f 4f       	sbci	r19, 0xFF	; 255
    5f54:	4f 4f       	sbci	r20, 0xFF	; 255
    5f56:	5f 4f       	sbci	r21, 0xFF	; 255

00005f58 <__divmodsi4_exit>:
    5f58:	08 95       	ret

00005f5a <__divmodsi4_neg1>:
    5f5a:	f6 f7       	brtc	.-4      	; 0x5f58 <__divmodsi4_exit>
    5f5c:	90 95       	com	r25
    5f5e:	80 95       	com	r24
    5f60:	70 95       	com	r23
    5f62:	61 95       	neg	r22
    5f64:	7f 4f       	sbci	r23, 0xFF	; 255
    5f66:	8f 4f       	sbci	r24, 0xFF	; 255
    5f68:	9f 4f       	sbci	r25, 0xFF	; 255
    5f6a:	08 95       	ret

00005f6c <__prologue_saves__>:
    5f6c:	2f 92       	push	r2
    5f6e:	3f 92       	push	r3
    5f70:	4f 92       	push	r4
    5f72:	5f 92       	push	r5
    5f74:	6f 92       	push	r6
    5f76:	7f 92       	push	r7
    5f78:	8f 92       	push	r8
    5f7a:	9f 92       	push	r9
    5f7c:	af 92       	push	r10
    5f7e:	bf 92       	push	r11
    5f80:	cf 92       	push	r12
    5f82:	df 92       	push	r13
    5f84:	ef 92       	push	r14
    5f86:	ff 92       	push	r15
    5f88:	0f 93       	push	r16
    5f8a:	1f 93       	push	r17
    5f8c:	cf 93       	push	r28
    5f8e:	df 93       	push	r29
    5f90:	cd b7       	in	r28, 0x3d	; 61
    5f92:	de b7       	in	r29, 0x3e	; 62
    5f94:	ca 1b       	sub	r28, r26
    5f96:	db 0b       	sbc	r29, r27
    5f98:	cd bf       	out	0x3d, r28	; 61
    5f9a:	de bf       	out	0x3e, r29	; 62
    5f9c:	19 94       	eijmp

00005f9e <__epilogue_restores__>:
    5f9e:	2a 88       	ldd	r2, Y+18	; 0x12
    5fa0:	39 88       	ldd	r3, Y+17	; 0x11
    5fa2:	48 88       	ldd	r4, Y+16	; 0x10
    5fa4:	5f 84       	ldd	r5, Y+15	; 0x0f
    5fa6:	6e 84       	ldd	r6, Y+14	; 0x0e
    5fa8:	7d 84       	ldd	r7, Y+13	; 0x0d
    5faa:	8c 84       	ldd	r8, Y+12	; 0x0c
    5fac:	9b 84       	ldd	r9, Y+11	; 0x0b
    5fae:	aa 84       	ldd	r10, Y+10	; 0x0a
    5fb0:	b9 84       	ldd	r11, Y+9	; 0x09
    5fb2:	c8 84       	ldd	r12, Y+8	; 0x08
    5fb4:	df 80       	ldd	r13, Y+7	; 0x07
    5fb6:	ee 80       	ldd	r14, Y+6	; 0x06
    5fb8:	fd 80       	ldd	r15, Y+5	; 0x05
    5fba:	0c 81       	ldd	r16, Y+4	; 0x04
    5fbc:	1b 81       	ldd	r17, Y+3	; 0x03
    5fbe:	aa 81       	ldd	r26, Y+2	; 0x02
    5fc0:	b9 81       	ldd	r27, Y+1	; 0x01
    5fc2:	ce 0f       	add	r28, r30
    5fc4:	d1 1d       	adc	r29, r1
    5fc6:	cd bf       	out	0x3d, r28	; 61
    5fc8:	de bf       	out	0x3e, r29	; 62
    5fca:	ed 01       	movw	r28, r26
    5fcc:	08 95       	ret

00005fce <strcpy_P>:
    5fce:	fb 01       	movw	r30, r22
    5fd0:	dc 01       	movw	r26, r24
    5fd2:	05 90       	lpm	r0, Z+
    5fd4:	0d 92       	st	X+, r0
    5fd6:	00 20       	and	r0, r0
    5fd8:	e1 f7       	brne	.-8      	; 0x5fd2 <strcpy_P+0x4>
    5fda:	08 95       	ret

00005fdc <memmove>:
    5fdc:	68 17       	cp	r22, r24
    5fde:	79 07       	cpc	r23, r25
    5fe0:	68 f4       	brcc	.+26     	; 0x5ffc <memmove+0x20>
    5fe2:	fb 01       	movw	r30, r22
    5fe4:	dc 01       	movw	r26, r24
    5fe6:	e4 0f       	add	r30, r20
    5fe8:	f5 1f       	adc	r31, r21
    5fea:	a4 0f       	add	r26, r20
    5fec:	b5 1f       	adc	r27, r21
    5fee:	02 c0       	rjmp	.+4      	; 0x5ff4 <memmove+0x18>
    5ff0:	02 90       	ld	r0, -Z
    5ff2:	0e 92       	st	-X, r0
    5ff4:	41 50       	subi	r20, 0x01	; 1
    5ff6:	50 40       	sbci	r21, 0x00	; 0
    5ff8:	d8 f7       	brcc	.-10     	; 0x5ff0 <memmove+0x14>
    5ffa:	08 95       	ret
    5ffc:	0c 94 1e 32 	jmp	0x643c	; 0x643c <memcpy>

00006000 <printf>:
    6000:	cf 93       	push	r28
    6002:	df 93       	push	r29
    6004:	cd b7       	in	r28, 0x3d	; 61
    6006:	de b7       	in	r29, 0x3e	; 62
    6008:	fe 01       	movw	r30, r28
    600a:	36 96       	adiw	r30, 0x06	; 6
    600c:	61 91       	ld	r22, Z+
    600e:	71 91       	ld	r23, Z+
    6010:	80 91 a0 50 	lds	r24, 0x50A0
    6014:	90 91 a1 50 	lds	r25, 0x50A1
    6018:	af 01       	movw	r20, r30
    601a:	0e 94 12 30 	call	0x6024	; 0x6024 <vfprintf>
    601e:	df 91       	pop	r29
    6020:	cf 91       	pop	r28
    6022:	08 95       	ret

00006024 <vfprintf>:
    6024:	2f 92       	push	r2
    6026:	3f 92       	push	r3
    6028:	4f 92       	push	r4
    602a:	5f 92       	push	r5
    602c:	6f 92       	push	r6
    602e:	7f 92       	push	r7
    6030:	8f 92       	push	r8
    6032:	9f 92       	push	r9
    6034:	af 92       	push	r10
    6036:	bf 92       	push	r11
    6038:	cf 92       	push	r12
    603a:	df 92       	push	r13
    603c:	ef 92       	push	r14
    603e:	ff 92       	push	r15
    6040:	0f 93       	push	r16
    6042:	1f 93       	push	r17
    6044:	cf 93       	push	r28
    6046:	df 93       	push	r29
    6048:	cd b7       	in	r28, 0x3d	; 61
    604a:	de b7       	in	r29, 0x3e	; 62
    604c:	2d 97       	sbiw	r28, 0x0d	; 13
    604e:	cd bf       	out	0x3d, r28	; 61
    6050:	de bf       	out	0x3e, r29	; 62
    6052:	3c 01       	movw	r6, r24
    6054:	6c 87       	std	Y+12, r22	; 0x0c
    6056:	7d 87       	std	Y+13, r23	; 0x0d
    6058:	5a 01       	movw	r10, r20
    605a:	fc 01       	movw	r30, r24
    605c:	16 82       	std	Z+6, r1	; 0x06
    605e:	17 82       	std	Z+7, r1	; 0x07
    6060:	83 81       	ldd	r24, Z+3	; 0x03
    6062:	81 ff       	sbrs	r24, 1
    6064:	c8 c1       	rjmp	.+912    	; 0x63f6 <vfprintf+0x3d2>
    6066:	2e 01       	movw	r4, r28
    6068:	08 94       	sec
    606a:	41 1c       	adc	r4, r1
    606c:	51 1c       	adc	r5, r1
    606e:	f3 01       	movw	r30, r6
    6070:	93 81       	ldd	r25, Z+3	; 0x03
    6072:	ec 85       	ldd	r30, Y+12	; 0x0c
    6074:	fd 85       	ldd	r31, Y+13	; 0x0d
    6076:	93 fd       	sbrc	r25, 3
    6078:	85 91       	lpm	r24, Z+
    607a:	93 ff       	sbrs	r25, 3
    607c:	81 91       	ld	r24, Z+
    607e:	ec 87       	std	Y+12, r30	; 0x0c
    6080:	fd 87       	std	Y+13, r31	; 0x0d
    6082:	88 23       	and	r24, r24
    6084:	09 f4       	brne	.+2      	; 0x6088 <vfprintf+0x64>
    6086:	b3 c1       	rjmp	.+870    	; 0x63ee <vfprintf+0x3ca>
    6088:	85 32       	cpi	r24, 0x25	; 37
    608a:	41 f4       	brne	.+16     	; 0x609c <vfprintf+0x78>
    608c:	93 fd       	sbrc	r25, 3
    608e:	85 91       	lpm	r24, Z+
    6090:	93 ff       	sbrs	r25, 3
    6092:	81 91       	ld	r24, Z+
    6094:	ec 87       	std	Y+12, r30	; 0x0c
    6096:	fd 87       	std	Y+13, r31	; 0x0d
    6098:	85 32       	cpi	r24, 0x25	; 37
    609a:	29 f4       	brne	.+10     	; 0x60a6 <vfprintf+0x82>
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	b3 01       	movw	r22, r6
    60a0:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    60a4:	e4 cf       	rjmp	.-56     	; 0x606e <vfprintf+0x4a>
    60a6:	ff 24       	eor	r15, r15
    60a8:	ee 24       	eor	r14, r14
    60aa:	10 e0       	ldi	r17, 0x00	; 0
    60ac:	10 32       	cpi	r17, 0x20	; 32
    60ae:	b0 f4       	brcc	.+44     	; 0x60dc <vfprintf+0xb8>
    60b0:	8b 32       	cpi	r24, 0x2B	; 43
    60b2:	69 f0       	breq	.+26     	; 0x60ce <vfprintf+0xaa>
    60b4:	8c 32       	cpi	r24, 0x2C	; 44
    60b6:	28 f4       	brcc	.+10     	; 0x60c2 <vfprintf+0x9e>
    60b8:	80 32       	cpi	r24, 0x20	; 32
    60ba:	51 f0       	breq	.+20     	; 0x60d0 <vfprintf+0xac>
    60bc:	83 32       	cpi	r24, 0x23	; 35
    60be:	71 f4       	brne	.+28     	; 0x60dc <vfprintf+0xb8>
    60c0:	0b c0       	rjmp	.+22     	; 0x60d8 <vfprintf+0xb4>
    60c2:	8d 32       	cpi	r24, 0x2D	; 45
    60c4:	39 f0       	breq	.+14     	; 0x60d4 <vfprintf+0xb0>
    60c6:	80 33       	cpi	r24, 0x30	; 48
    60c8:	49 f4       	brne	.+18     	; 0x60dc <vfprintf+0xb8>
    60ca:	11 60       	ori	r17, 0x01	; 1
    60cc:	2c c0       	rjmp	.+88     	; 0x6126 <vfprintf+0x102>
    60ce:	12 60       	ori	r17, 0x02	; 2
    60d0:	14 60       	ori	r17, 0x04	; 4
    60d2:	29 c0       	rjmp	.+82     	; 0x6126 <vfprintf+0x102>
    60d4:	18 60       	ori	r17, 0x08	; 8
    60d6:	27 c0       	rjmp	.+78     	; 0x6126 <vfprintf+0x102>
    60d8:	10 61       	ori	r17, 0x10	; 16
    60da:	25 c0       	rjmp	.+74     	; 0x6126 <vfprintf+0x102>
    60dc:	17 fd       	sbrc	r17, 7
    60de:	2e c0       	rjmp	.+92     	; 0x613c <vfprintf+0x118>
    60e0:	28 2f       	mov	r18, r24
    60e2:	20 53       	subi	r18, 0x30	; 48
    60e4:	2a 30       	cpi	r18, 0x0A	; 10
    60e6:	98 f4       	brcc	.+38     	; 0x610e <vfprintf+0xea>
    60e8:	16 ff       	sbrs	r17, 6
    60ea:	08 c0       	rjmp	.+16     	; 0x60fc <vfprintf+0xd8>
    60ec:	8f 2d       	mov	r24, r15
    60ee:	88 0f       	add	r24, r24
    60f0:	f8 2e       	mov	r15, r24
    60f2:	ff 0c       	add	r15, r15
    60f4:	ff 0c       	add	r15, r15
    60f6:	f8 0e       	add	r15, r24
    60f8:	f2 0e       	add	r15, r18
    60fa:	15 c0       	rjmp	.+42     	; 0x6126 <vfprintf+0x102>
    60fc:	8e 2d       	mov	r24, r14
    60fe:	88 0f       	add	r24, r24
    6100:	e8 2e       	mov	r14, r24
    6102:	ee 0c       	add	r14, r14
    6104:	ee 0c       	add	r14, r14
    6106:	e8 0e       	add	r14, r24
    6108:	e2 0e       	add	r14, r18
    610a:	10 62       	ori	r17, 0x20	; 32
    610c:	0c c0       	rjmp	.+24     	; 0x6126 <vfprintf+0x102>
    610e:	8e 32       	cpi	r24, 0x2E	; 46
    6110:	21 f4       	brne	.+8      	; 0x611a <vfprintf+0xf6>
    6112:	16 fd       	sbrc	r17, 6
    6114:	6c c1       	rjmp	.+728    	; 0x63ee <vfprintf+0x3ca>
    6116:	10 64       	ori	r17, 0x40	; 64
    6118:	06 c0       	rjmp	.+12     	; 0x6126 <vfprintf+0x102>
    611a:	8c 36       	cpi	r24, 0x6C	; 108
    611c:	11 f4       	brne	.+4      	; 0x6122 <vfprintf+0xfe>
    611e:	10 68       	ori	r17, 0x80	; 128
    6120:	02 c0       	rjmp	.+4      	; 0x6126 <vfprintf+0x102>
    6122:	88 36       	cpi	r24, 0x68	; 104
    6124:	59 f4       	brne	.+22     	; 0x613c <vfprintf+0x118>
    6126:	ec 85       	ldd	r30, Y+12	; 0x0c
    6128:	fd 85       	ldd	r31, Y+13	; 0x0d
    612a:	93 fd       	sbrc	r25, 3
    612c:	85 91       	lpm	r24, Z+
    612e:	93 ff       	sbrs	r25, 3
    6130:	81 91       	ld	r24, Z+
    6132:	ec 87       	std	Y+12, r30	; 0x0c
    6134:	fd 87       	std	Y+13, r31	; 0x0d
    6136:	88 23       	and	r24, r24
    6138:	09 f0       	breq	.+2      	; 0x613c <vfprintf+0x118>
    613a:	b8 cf       	rjmp	.-144    	; 0x60ac <vfprintf+0x88>
    613c:	98 2f       	mov	r25, r24
    613e:	95 54       	subi	r25, 0x45	; 69
    6140:	93 30       	cpi	r25, 0x03	; 3
    6142:	18 f0       	brcs	.+6      	; 0x614a <vfprintf+0x126>
    6144:	90 52       	subi	r25, 0x20	; 32
    6146:	93 30       	cpi	r25, 0x03	; 3
    6148:	38 f4       	brcc	.+14     	; 0x6158 <vfprintf+0x134>
    614a:	24 e0       	ldi	r18, 0x04	; 4
    614c:	30 e0       	ldi	r19, 0x00	; 0
    614e:	a2 0e       	add	r10, r18
    6150:	b3 1e       	adc	r11, r19
    6152:	3f e3       	ldi	r19, 0x3F	; 63
    6154:	39 83       	std	Y+1, r19	; 0x01
    6156:	0f c0       	rjmp	.+30     	; 0x6176 <vfprintf+0x152>
    6158:	83 36       	cpi	r24, 0x63	; 99
    615a:	31 f0       	breq	.+12     	; 0x6168 <vfprintf+0x144>
    615c:	83 37       	cpi	r24, 0x73	; 115
    615e:	81 f0       	breq	.+32     	; 0x6180 <vfprintf+0x15c>
    6160:	83 35       	cpi	r24, 0x53	; 83
    6162:	09 f0       	breq	.+2      	; 0x6166 <vfprintf+0x142>
    6164:	5a c0       	rjmp	.+180    	; 0x621a <vfprintf+0x1f6>
    6166:	22 c0       	rjmp	.+68     	; 0x61ac <vfprintf+0x188>
    6168:	f5 01       	movw	r30, r10
    616a:	80 81       	ld	r24, Z
    616c:	89 83       	std	Y+1, r24	; 0x01
    616e:	22 e0       	ldi	r18, 0x02	; 2
    6170:	30 e0       	ldi	r19, 0x00	; 0
    6172:	a2 0e       	add	r10, r18
    6174:	b3 1e       	adc	r11, r19
    6176:	21 e0       	ldi	r18, 0x01	; 1
    6178:	c2 2e       	mov	r12, r18
    617a:	d1 2c       	mov	r13, r1
    617c:	42 01       	movw	r8, r4
    617e:	14 c0       	rjmp	.+40     	; 0x61a8 <vfprintf+0x184>
    6180:	92 e0       	ldi	r25, 0x02	; 2
    6182:	29 2e       	mov	r2, r25
    6184:	31 2c       	mov	r3, r1
    6186:	2a 0c       	add	r2, r10
    6188:	3b 1c       	adc	r3, r11
    618a:	f5 01       	movw	r30, r10
    618c:	80 80       	ld	r8, Z
    618e:	91 80       	ldd	r9, Z+1	; 0x01
    6190:	16 ff       	sbrs	r17, 6
    6192:	03 c0       	rjmp	.+6      	; 0x619a <vfprintf+0x176>
    6194:	6f 2d       	mov	r22, r15
    6196:	70 e0       	ldi	r23, 0x00	; 0
    6198:	02 c0       	rjmp	.+4      	; 0x619e <vfprintf+0x17a>
    619a:	6f ef       	ldi	r22, 0xFF	; 255
    619c:	7f ef       	ldi	r23, 0xFF	; 255
    619e:	c4 01       	movw	r24, r8
    61a0:	0e 94 27 32 	call	0x644e	; 0x644e <strnlen>
    61a4:	6c 01       	movw	r12, r24
    61a6:	51 01       	movw	r10, r2
    61a8:	1f 77       	andi	r17, 0x7F	; 127
    61aa:	15 c0       	rjmp	.+42     	; 0x61d6 <vfprintf+0x1b2>
    61ac:	82 e0       	ldi	r24, 0x02	; 2
    61ae:	28 2e       	mov	r2, r24
    61b0:	31 2c       	mov	r3, r1
    61b2:	2a 0c       	add	r2, r10
    61b4:	3b 1c       	adc	r3, r11
    61b6:	f5 01       	movw	r30, r10
    61b8:	80 80       	ld	r8, Z
    61ba:	91 80       	ldd	r9, Z+1	; 0x01
    61bc:	16 ff       	sbrs	r17, 6
    61be:	03 c0       	rjmp	.+6      	; 0x61c6 <vfprintf+0x1a2>
    61c0:	6f 2d       	mov	r22, r15
    61c2:	70 e0       	ldi	r23, 0x00	; 0
    61c4:	02 c0       	rjmp	.+4      	; 0x61ca <vfprintf+0x1a6>
    61c6:	6f ef       	ldi	r22, 0xFF	; 255
    61c8:	7f ef       	ldi	r23, 0xFF	; 255
    61ca:	c4 01       	movw	r24, r8
    61cc:	0e 94 13 32 	call	0x6426	; 0x6426 <strnlen_P>
    61d0:	6c 01       	movw	r12, r24
    61d2:	10 68       	ori	r17, 0x80	; 128
    61d4:	51 01       	movw	r10, r2
    61d6:	13 fd       	sbrc	r17, 3
    61d8:	1c c0       	rjmp	.+56     	; 0x6212 <vfprintf+0x1ee>
    61da:	06 c0       	rjmp	.+12     	; 0x61e8 <vfprintf+0x1c4>
    61dc:	80 e2       	ldi	r24, 0x20	; 32
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	b3 01       	movw	r22, r6
    61e2:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    61e6:	ea 94       	dec	r14
    61e8:	8e 2d       	mov	r24, r14
    61ea:	90 e0       	ldi	r25, 0x00	; 0
    61ec:	c8 16       	cp	r12, r24
    61ee:	d9 06       	cpc	r13, r25
    61f0:	a8 f3       	brcs	.-22     	; 0x61dc <vfprintf+0x1b8>
    61f2:	0f c0       	rjmp	.+30     	; 0x6212 <vfprintf+0x1ee>
    61f4:	f4 01       	movw	r30, r8
    61f6:	17 fd       	sbrc	r17, 7
    61f8:	85 91       	lpm	r24, Z+
    61fa:	17 ff       	sbrs	r17, 7
    61fc:	81 91       	ld	r24, Z+
    61fe:	4f 01       	movw	r8, r30
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	b3 01       	movw	r22, r6
    6204:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    6208:	e1 10       	cpse	r14, r1
    620a:	ea 94       	dec	r14
    620c:	08 94       	sec
    620e:	c1 08       	sbc	r12, r1
    6210:	d1 08       	sbc	r13, r1
    6212:	c1 14       	cp	r12, r1
    6214:	d1 04       	cpc	r13, r1
    6216:	71 f7       	brne	.-36     	; 0x61f4 <vfprintf+0x1d0>
    6218:	e7 c0       	rjmp	.+462    	; 0x63e8 <vfprintf+0x3c4>
    621a:	84 36       	cpi	r24, 0x64	; 100
    621c:	11 f0       	breq	.+4      	; 0x6222 <vfprintf+0x1fe>
    621e:	89 36       	cpi	r24, 0x69	; 105
    6220:	51 f5       	brne	.+84     	; 0x6276 <vfprintf+0x252>
    6222:	f5 01       	movw	r30, r10
    6224:	17 ff       	sbrs	r17, 7
    6226:	07 c0       	rjmp	.+14     	; 0x6236 <vfprintf+0x212>
    6228:	80 81       	ld	r24, Z
    622a:	91 81       	ldd	r25, Z+1	; 0x01
    622c:	a2 81       	ldd	r26, Z+2	; 0x02
    622e:	b3 81       	ldd	r27, Z+3	; 0x03
    6230:	24 e0       	ldi	r18, 0x04	; 4
    6232:	30 e0       	ldi	r19, 0x00	; 0
    6234:	08 c0       	rjmp	.+16     	; 0x6246 <vfprintf+0x222>
    6236:	80 81       	ld	r24, Z
    6238:	91 81       	ldd	r25, Z+1	; 0x01
    623a:	aa 27       	eor	r26, r26
    623c:	97 fd       	sbrc	r25, 7
    623e:	a0 95       	com	r26
    6240:	ba 2f       	mov	r27, r26
    6242:	22 e0       	ldi	r18, 0x02	; 2
    6244:	30 e0       	ldi	r19, 0x00	; 0
    6246:	a2 0e       	add	r10, r18
    6248:	b3 1e       	adc	r11, r19
    624a:	01 2f       	mov	r16, r17
    624c:	0f 76       	andi	r16, 0x6F	; 111
    624e:	b7 ff       	sbrs	r27, 7
    6250:	08 c0       	rjmp	.+16     	; 0x6262 <vfprintf+0x23e>
    6252:	b0 95       	com	r27
    6254:	a0 95       	com	r26
    6256:	90 95       	com	r25
    6258:	81 95       	neg	r24
    625a:	9f 4f       	sbci	r25, 0xFF	; 255
    625c:	af 4f       	sbci	r26, 0xFF	; 255
    625e:	bf 4f       	sbci	r27, 0xFF	; 255
    6260:	00 68       	ori	r16, 0x80	; 128
    6262:	bc 01       	movw	r22, r24
    6264:	cd 01       	movw	r24, r26
    6266:	a2 01       	movw	r20, r4
    6268:	2a e0       	ldi	r18, 0x0A	; 10
    626a:	30 e0       	ldi	r19, 0x00	; 0
    626c:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__ultoa_invert>
    6270:	d8 2e       	mov	r13, r24
    6272:	d4 18       	sub	r13, r4
    6274:	3f c0       	rjmp	.+126    	; 0x62f4 <vfprintf+0x2d0>
    6276:	85 37       	cpi	r24, 0x75	; 117
    6278:	21 f4       	brne	.+8      	; 0x6282 <vfprintf+0x25e>
    627a:	1f 7e       	andi	r17, 0xEF	; 239
    627c:	2a e0       	ldi	r18, 0x0A	; 10
    627e:	30 e0       	ldi	r19, 0x00	; 0
    6280:	20 c0       	rjmp	.+64     	; 0x62c2 <vfprintf+0x29e>
    6282:	19 7f       	andi	r17, 0xF9	; 249
    6284:	8f 36       	cpi	r24, 0x6F	; 111
    6286:	a9 f0       	breq	.+42     	; 0x62b2 <vfprintf+0x28e>
    6288:	80 37       	cpi	r24, 0x70	; 112
    628a:	20 f4       	brcc	.+8      	; 0x6294 <vfprintf+0x270>
    628c:	88 35       	cpi	r24, 0x58	; 88
    628e:	09 f0       	breq	.+2      	; 0x6292 <vfprintf+0x26e>
    6290:	ae c0       	rjmp	.+348    	; 0x63ee <vfprintf+0x3ca>
    6292:	0b c0       	rjmp	.+22     	; 0x62aa <vfprintf+0x286>
    6294:	80 37       	cpi	r24, 0x70	; 112
    6296:	21 f0       	breq	.+8      	; 0x62a0 <vfprintf+0x27c>
    6298:	88 37       	cpi	r24, 0x78	; 120
    629a:	09 f0       	breq	.+2      	; 0x629e <vfprintf+0x27a>
    629c:	a8 c0       	rjmp	.+336    	; 0x63ee <vfprintf+0x3ca>
    629e:	01 c0       	rjmp	.+2      	; 0x62a2 <vfprintf+0x27e>
    62a0:	10 61       	ori	r17, 0x10	; 16
    62a2:	14 ff       	sbrs	r17, 4
    62a4:	09 c0       	rjmp	.+18     	; 0x62b8 <vfprintf+0x294>
    62a6:	14 60       	ori	r17, 0x04	; 4
    62a8:	07 c0       	rjmp	.+14     	; 0x62b8 <vfprintf+0x294>
    62aa:	14 ff       	sbrs	r17, 4
    62ac:	08 c0       	rjmp	.+16     	; 0x62be <vfprintf+0x29a>
    62ae:	16 60       	ori	r17, 0x06	; 6
    62b0:	06 c0       	rjmp	.+12     	; 0x62be <vfprintf+0x29a>
    62b2:	28 e0       	ldi	r18, 0x08	; 8
    62b4:	30 e0       	ldi	r19, 0x00	; 0
    62b6:	05 c0       	rjmp	.+10     	; 0x62c2 <vfprintf+0x29e>
    62b8:	20 e1       	ldi	r18, 0x10	; 16
    62ba:	30 e0       	ldi	r19, 0x00	; 0
    62bc:	02 c0       	rjmp	.+4      	; 0x62c2 <vfprintf+0x29e>
    62be:	20 e1       	ldi	r18, 0x10	; 16
    62c0:	32 e0       	ldi	r19, 0x02	; 2
    62c2:	f5 01       	movw	r30, r10
    62c4:	17 ff       	sbrs	r17, 7
    62c6:	07 c0       	rjmp	.+14     	; 0x62d6 <vfprintf+0x2b2>
    62c8:	60 81       	ld	r22, Z
    62ca:	71 81       	ldd	r23, Z+1	; 0x01
    62cc:	82 81       	ldd	r24, Z+2	; 0x02
    62ce:	93 81       	ldd	r25, Z+3	; 0x03
    62d0:	44 e0       	ldi	r20, 0x04	; 4
    62d2:	50 e0       	ldi	r21, 0x00	; 0
    62d4:	06 c0       	rjmp	.+12     	; 0x62e2 <vfprintf+0x2be>
    62d6:	60 81       	ld	r22, Z
    62d8:	71 81       	ldd	r23, Z+1	; 0x01
    62da:	80 e0       	ldi	r24, 0x00	; 0
    62dc:	90 e0       	ldi	r25, 0x00	; 0
    62de:	42 e0       	ldi	r20, 0x02	; 2
    62e0:	50 e0       	ldi	r21, 0x00	; 0
    62e2:	a4 0e       	add	r10, r20
    62e4:	b5 1e       	adc	r11, r21
    62e6:	a2 01       	movw	r20, r4
    62e8:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__ultoa_invert>
    62ec:	d8 2e       	mov	r13, r24
    62ee:	d4 18       	sub	r13, r4
    62f0:	01 2f       	mov	r16, r17
    62f2:	0f 77       	andi	r16, 0x7F	; 127
    62f4:	06 ff       	sbrs	r16, 6
    62f6:	09 c0       	rjmp	.+18     	; 0x630a <vfprintf+0x2e6>
    62f8:	0e 7f       	andi	r16, 0xFE	; 254
    62fa:	df 14       	cp	r13, r15
    62fc:	30 f4       	brcc	.+12     	; 0x630a <vfprintf+0x2e6>
    62fe:	04 ff       	sbrs	r16, 4
    6300:	06 c0       	rjmp	.+12     	; 0x630e <vfprintf+0x2ea>
    6302:	02 fd       	sbrc	r16, 2
    6304:	04 c0       	rjmp	.+8      	; 0x630e <vfprintf+0x2ea>
    6306:	0f 7e       	andi	r16, 0xEF	; 239
    6308:	02 c0       	rjmp	.+4      	; 0x630e <vfprintf+0x2ea>
    630a:	1d 2d       	mov	r17, r13
    630c:	01 c0       	rjmp	.+2      	; 0x6310 <vfprintf+0x2ec>
    630e:	1f 2d       	mov	r17, r15
    6310:	80 2f       	mov	r24, r16
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	04 ff       	sbrs	r16, 4
    6316:	0c c0       	rjmp	.+24     	; 0x6330 <vfprintf+0x30c>
    6318:	fe 01       	movw	r30, r28
    631a:	ed 0d       	add	r30, r13
    631c:	f1 1d       	adc	r31, r1
    631e:	20 81       	ld	r18, Z
    6320:	20 33       	cpi	r18, 0x30	; 48
    6322:	11 f4       	brne	.+4      	; 0x6328 <vfprintf+0x304>
    6324:	09 7e       	andi	r16, 0xE9	; 233
    6326:	09 c0       	rjmp	.+18     	; 0x633a <vfprintf+0x316>
    6328:	02 ff       	sbrs	r16, 2
    632a:	06 c0       	rjmp	.+12     	; 0x6338 <vfprintf+0x314>
    632c:	1e 5f       	subi	r17, 0xFE	; 254
    632e:	05 c0       	rjmp	.+10     	; 0x633a <vfprintf+0x316>
    6330:	86 78       	andi	r24, 0x86	; 134
    6332:	90 70       	andi	r25, 0x00	; 0
    6334:	00 97       	sbiw	r24, 0x00	; 0
    6336:	09 f0       	breq	.+2      	; 0x633a <vfprintf+0x316>
    6338:	1f 5f       	subi	r17, 0xFF	; 255
    633a:	80 2e       	mov	r8, r16
    633c:	99 24       	eor	r9, r9
    633e:	03 fd       	sbrc	r16, 3
    6340:	12 c0       	rjmp	.+36     	; 0x6366 <vfprintf+0x342>
    6342:	00 ff       	sbrs	r16, 0
    6344:	0d c0       	rjmp	.+26     	; 0x6360 <vfprintf+0x33c>
    6346:	fd 2c       	mov	r15, r13
    6348:	1e 15       	cp	r17, r14
    634a:	50 f4       	brcc	.+20     	; 0x6360 <vfprintf+0x33c>
    634c:	fe 0c       	add	r15, r14
    634e:	f1 1a       	sub	r15, r17
    6350:	1e 2d       	mov	r17, r14
    6352:	06 c0       	rjmp	.+12     	; 0x6360 <vfprintf+0x33c>
    6354:	80 e2       	ldi	r24, 0x20	; 32
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	b3 01       	movw	r22, r6
    635a:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    635e:	1f 5f       	subi	r17, 0xFF	; 255
    6360:	1e 15       	cp	r17, r14
    6362:	c0 f3       	brcs	.-16     	; 0x6354 <vfprintf+0x330>
    6364:	04 c0       	rjmp	.+8      	; 0x636e <vfprintf+0x34a>
    6366:	1e 15       	cp	r17, r14
    6368:	10 f4       	brcc	.+4      	; 0x636e <vfprintf+0x34a>
    636a:	e1 1a       	sub	r14, r17
    636c:	01 c0       	rjmp	.+2      	; 0x6370 <vfprintf+0x34c>
    636e:	ee 24       	eor	r14, r14
    6370:	84 fe       	sbrs	r8, 4
    6372:	0f c0       	rjmp	.+30     	; 0x6392 <vfprintf+0x36e>
    6374:	80 e3       	ldi	r24, 0x30	; 48
    6376:	90 e0       	ldi	r25, 0x00	; 0
    6378:	b3 01       	movw	r22, r6
    637a:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    637e:	82 fe       	sbrs	r8, 2
    6380:	1f c0       	rjmp	.+62     	; 0x63c0 <vfprintf+0x39c>
    6382:	81 fe       	sbrs	r8, 1
    6384:	03 c0       	rjmp	.+6      	; 0x638c <vfprintf+0x368>
    6386:	88 e5       	ldi	r24, 0x58	; 88
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	10 c0       	rjmp	.+32     	; 0x63ac <vfprintf+0x388>
    638c:	88 e7       	ldi	r24, 0x78	; 120
    638e:	90 e0       	ldi	r25, 0x00	; 0
    6390:	0d c0       	rjmp	.+26     	; 0x63ac <vfprintf+0x388>
    6392:	c4 01       	movw	r24, r8
    6394:	86 78       	andi	r24, 0x86	; 134
    6396:	90 70       	andi	r25, 0x00	; 0
    6398:	00 97       	sbiw	r24, 0x00	; 0
    639a:	91 f0       	breq	.+36     	; 0x63c0 <vfprintf+0x39c>
    639c:	81 fc       	sbrc	r8, 1
    639e:	02 c0       	rjmp	.+4      	; 0x63a4 <vfprintf+0x380>
    63a0:	80 e2       	ldi	r24, 0x20	; 32
    63a2:	01 c0       	rjmp	.+2      	; 0x63a6 <vfprintf+0x382>
    63a4:	8b e2       	ldi	r24, 0x2B	; 43
    63a6:	07 fd       	sbrc	r16, 7
    63a8:	8d e2       	ldi	r24, 0x2D	; 45
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	b3 01       	movw	r22, r6
    63ae:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    63b2:	06 c0       	rjmp	.+12     	; 0x63c0 <vfprintf+0x39c>
    63b4:	80 e3       	ldi	r24, 0x30	; 48
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	b3 01       	movw	r22, r6
    63ba:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    63be:	fa 94       	dec	r15
    63c0:	df 14       	cp	r13, r15
    63c2:	c0 f3       	brcs	.-16     	; 0x63b4 <vfprintf+0x390>
    63c4:	da 94       	dec	r13
    63c6:	f2 01       	movw	r30, r4
    63c8:	ed 0d       	add	r30, r13
    63ca:	f1 1d       	adc	r31, r1
    63cc:	80 81       	ld	r24, Z
    63ce:	90 e0       	ldi	r25, 0x00	; 0
    63d0:	b3 01       	movw	r22, r6
    63d2:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    63d6:	dd 20       	and	r13, r13
    63d8:	a9 f7       	brne	.-22     	; 0x63c4 <vfprintf+0x3a0>
    63da:	06 c0       	rjmp	.+12     	; 0x63e8 <vfprintf+0x3c4>
    63dc:	80 e2       	ldi	r24, 0x20	; 32
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	b3 01       	movw	r22, r6
    63e2:	0e 94 32 32 	call	0x6464	; 0x6464 <fputc>
    63e6:	ea 94       	dec	r14
    63e8:	ee 20       	and	r14, r14
    63ea:	c1 f7       	brne	.-16     	; 0x63dc <vfprintf+0x3b8>
    63ec:	40 ce       	rjmp	.-896    	; 0x606e <vfprintf+0x4a>
    63ee:	f3 01       	movw	r30, r6
    63f0:	86 81       	ldd	r24, Z+6	; 0x06
    63f2:	97 81       	ldd	r25, Z+7	; 0x07
    63f4:	02 c0       	rjmp	.+4      	; 0x63fa <vfprintf+0x3d6>
    63f6:	8f ef       	ldi	r24, 0xFF	; 255
    63f8:	9f ef       	ldi	r25, 0xFF	; 255
    63fa:	2d 96       	adiw	r28, 0x0d	; 13
    63fc:	cd bf       	out	0x3d, r28	; 61
    63fe:	de bf       	out	0x3e, r29	; 62
    6400:	df 91       	pop	r29
    6402:	cf 91       	pop	r28
    6404:	1f 91       	pop	r17
    6406:	0f 91       	pop	r16
    6408:	ff 90       	pop	r15
    640a:	ef 90       	pop	r14
    640c:	df 90       	pop	r13
    640e:	cf 90       	pop	r12
    6410:	bf 90       	pop	r11
    6412:	af 90       	pop	r10
    6414:	9f 90       	pop	r9
    6416:	8f 90       	pop	r8
    6418:	7f 90       	pop	r7
    641a:	6f 90       	pop	r6
    641c:	5f 90       	pop	r5
    641e:	4f 90       	pop	r4
    6420:	3f 90       	pop	r3
    6422:	2f 90       	pop	r2
    6424:	08 95       	ret

00006426 <strnlen_P>:
    6426:	fc 01       	movw	r30, r24
    6428:	05 90       	lpm	r0, Z+
    642a:	61 50       	subi	r22, 0x01	; 1
    642c:	70 40       	sbci	r23, 0x00	; 0
    642e:	01 10       	cpse	r0, r1
    6430:	d8 f7       	brcc	.-10     	; 0x6428 <strnlen_P+0x2>
    6432:	80 95       	com	r24
    6434:	90 95       	com	r25
    6436:	8e 0f       	add	r24, r30
    6438:	9f 1f       	adc	r25, r31
    643a:	08 95       	ret

0000643c <memcpy>:
    643c:	fb 01       	movw	r30, r22
    643e:	dc 01       	movw	r26, r24
    6440:	02 c0       	rjmp	.+4      	; 0x6446 <memcpy+0xa>
    6442:	01 90       	ld	r0, Z+
    6444:	0d 92       	st	X+, r0
    6446:	41 50       	subi	r20, 0x01	; 1
    6448:	50 40       	sbci	r21, 0x00	; 0
    644a:	d8 f7       	brcc	.-10     	; 0x6442 <memcpy+0x6>
    644c:	08 95       	ret

0000644e <strnlen>:
    644e:	fc 01       	movw	r30, r24
    6450:	61 50       	subi	r22, 0x01	; 1
    6452:	70 40       	sbci	r23, 0x00	; 0
    6454:	01 90       	ld	r0, Z+
    6456:	01 10       	cpse	r0, r1
    6458:	d8 f7       	brcc	.-10     	; 0x6450 <strnlen+0x2>
    645a:	80 95       	com	r24
    645c:	90 95       	com	r25
    645e:	8e 0f       	add	r24, r30
    6460:	9f 1f       	adc	r25, r31
    6462:	08 95       	ret

00006464 <fputc>:
    6464:	0f 93       	push	r16
    6466:	1f 93       	push	r17
    6468:	cf 93       	push	r28
    646a:	df 93       	push	r29
    646c:	8c 01       	movw	r16, r24
    646e:	eb 01       	movw	r28, r22
    6470:	8b 81       	ldd	r24, Y+3	; 0x03
    6472:	81 ff       	sbrs	r24, 1
    6474:	1b c0       	rjmp	.+54     	; 0x64ac <fputc+0x48>
    6476:	82 ff       	sbrs	r24, 2
    6478:	0d c0       	rjmp	.+26     	; 0x6494 <fputc+0x30>
    647a:	2e 81       	ldd	r18, Y+6	; 0x06
    647c:	3f 81       	ldd	r19, Y+7	; 0x07
    647e:	8c 81       	ldd	r24, Y+4	; 0x04
    6480:	9d 81       	ldd	r25, Y+5	; 0x05
    6482:	28 17       	cp	r18, r24
    6484:	39 07       	cpc	r19, r25
    6486:	64 f4       	brge	.+24     	; 0x64a0 <fputc+0x3c>
    6488:	e8 81       	ld	r30, Y
    648a:	f9 81       	ldd	r31, Y+1	; 0x01
    648c:	01 93       	st	Z+, r16
    648e:	e8 83       	st	Y, r30
    6490:	f9 83       	std	Y+1, r31	; 0x01
    6492:	06 c0       	rjmp	.+12     	; 0x64a0 <fputc+0x3c>
    6494:	e8 85       	ldd	r30, Y+8	; 0x08
    6496:	f9 85       	ldd	r31, Y+9	; 0x09
    6498:	80 2f       	mov	r24, r16
    649a:	19 95       	eicall
    649c:	00 97       	sbiw	r24, 0x00	; 0
    649e:	31 f4       	brne	.+12     	; 0x64ac <fputc+0x48>
    64a0:	8e 81       	ldd	r24, Y+6	; 0x06
    64a2:	9f 81       	ldd	r25, Y+7	; 0x07
    64a4:	01 96       	adiw	r24, 0x01	; 1
    64a6:	8e 83       	std	Y+6, r24	; 0x06
    64a8:	9f 83       	std	Y+7, r25	; 0x07
    64aa:	02 c0       	rjmp	.+4      	; 0x64b0 <fputc+0x4c>
    64ac:	0f ef       	ldi	r16, 0xFF	; 255
    64ae:	1f ef       	ldi	r17, 0xFF	; 255
    64b0:	c8 01       	movw	r24, r16
    64b2:	df 91       	pop	r29
    64b4:	cf 91       	pop	r28
    64b6:	1f 91       	pop	r17
    64b8:	0f 91       	pop	r16
    64ba:	08 95       	ret

000064bc <__ultoa_invert>:
    64bc:	fa 01       	movw	r30, r20
    64be:	aa 27       	eor	r26, r26
    64c0:	28 30       	cpi	r18, 0x08	; 8
    64c2:	51 f1       	breq	.+84     	; 0x6518 <__ultoa_invert+0x5c>
    64c4:	20 31       	cpi	r18, 0x10	; 16
    64c6:	81 f1       	breq	.+96     	; 0x6528 <__ultoa_invert+0x6c>
    64c8:	e8 94       	clt
    64ca:	6f 93       	push	r22
    64cc:	6e 7f       	andi	r22, 0xFE	; 254
    64ce:	6e 5f       	subi	r22, 0xFE	; 254
    64d0:	7f 4f       	sbci	r23, 0xFF	; 255
    64d2:	8f 4f       	sbci	r24, 0xFF	; 255
    64d4:	9f 4f       	sbci	r25, 0xFF	; 255
    64d6:	af 4f       	sbci	r26, 0xFF	; 255
    64d8:	b1 e0       	ldi	r27, 0x01	; 1
    64da:	3e d0       	rcall	.+124    	; 0x6558 <__ultoa_invert+0x9c>
    64dc:	b4 e0       	ldi	r27, 0x04	; 4
    64de:	3c d0       	rcall	.+120    	; 0x6558 <__ultoa_invert+0x9c>
    64e0:	67 0f       	add	r22, r23
    64e2:	78 1f       	adc	r23, r24
    64e4:	89 1f       	adc	r24, r25
    64e6:	9a 1f       	adc	r25, r26
    64e8:	a1 1d       	adc	r26, r1
    64ea:	68 0f       	add	r22, r24
    64ec:	79 1f       	adc	r23, r25
    64ee:	8a 1f       	adc	r24, r26
    64f0:	91 1d       	adc	r25, r1
    64f2:	a1 1d       	adc	r26, r1
    64f4:	6a 0f       	add	r22, r26
    64f6:	71 1d       	adc	r23, r1
    64f8:	81 1d       	adc	r24, r1
    64fa:	91 1d       	adc	r25, r1
    64fc:	a1 1d       	adc	r26, r1
    64fe:	20 d0       	rcall	.+64     	; 0x6540 <__ultoa_invert+0x84>
    6500:	09 f4       	brne	.+2      	; 0x6504 <__ultoa_invert+0x48>
    6502:	68 94       	set
    6504:	3f 91       	pop	r19
    6506:	2a e0       	ldi	r18, 0x0A	; 10
    6508:	26 9f       	mul	r18, r22
    650a:	11 24       	eor	r1, r1
    650c:	30 19       	sub	r19, r0
    650e:	30 5d       	subi	r19, 0xD0	; 208
    6510:	31 93       	st	Z+, r19
    6512:	de f6       	brtc	.-74     	; 0x64ca <__ultoa_invert+0xe>
    6514:	cf 01       	movw	r24, r30
    6516:	08 95       	ret
    6518:	46 2f       	mov	r20, r22
    651a:	47 70       	andi	r20, 0x07	; 7
    651c:	40 5d       	subi	r20, 0xD0	; 208
    651e:	41 93       	st	Z+, r20
    6520:	b3 e0       	ldi	r27, 0x03	; 3
    6522:	0f d0       	rcall	.+30     	; 0x6542 <__ultoa_invert+0x86>
    6524:	c9 f7       	brne	.-14     	; 0x6518 <__ultoa_invert+0x5c>
    6526:	f6 cf       	rjmp	.-20     	; 0x6514 <__ultoa_invert+0x58>
    6528:	46 2f       	mov	r20, r22
    652a:	4f 70       	andi	r20, 0x0F	; 15
    652c:	40 5d       	subi	r20, 0xD0	; 208
    652e:	4a 33       	cpi	r20, 0x3A	; 58
    6530:	18 f0       	brcs	.+6      	; 0x6538 <__ultoa_invert+0x7c>
    6532:	49 5d       	subi	r20, 0xD9	; 217
    6534:	31 fd       	sbrc	r19, 1
    6536:	40 52       	subi	r20, 0x20	; 32
    6538:	41 93       	st	Z+, r20
    653a:	02 d0       	rcall	.+4      	; 0x6540 <__ultoa_invert+0x84>
    653c:	a9 f7       	brne	.-22     	; 0x6528 <__ultoa_invert+0x6c>
    653e:	ea cf       	rjmp	.-44     	; 0x6514 <__ultoa_invert+0x58>
    6540:	b4 e0       	ldi	r27, 0x04	; 4
    6542:	a6 95       	lsr	r26
    6544:	97 95       	ror	r25
    6546:	87 95       	ror	r24
    6548:	77 95       	ror	r23
    654a:	67 95       	ror	r22
    654c:	ba 95       	dec	r27
    654e:	c9 f7       	brne	.-14     	; 0x6542 <__ultoa_invert+0x86>
    6550:	00 97       	sbiw	r24, 0x00	; 0
    6552:	61 05       	cpc	r22, r1
    6554:	71 05       	cpc	r23, r1
    6556:	08 95       	ret
    6558:	9b 01       	movw	r18, r22
    655a:	ac 01       	movw	r20, r24
    655c:	0a 2e       	mov	r0, r26
    655e:	06 94       	lsr	r0
    6560:	57 95       	ror	r21
    6562:	47 95       	ror	r20
    6564:	37 95       	ror	r19
    6566:	27 95       	ror	r18
    6568:	ba 95       	dec	r27
    656a:	c9 f7       	brne	.-14     	; 0x655e <__ultoa_invert+0xa2>
    656c:	62 0f       	add	r22, r18
    656e:	73 1f       	adc	r23, r19
    6570:	84 1f       	adc	r24, r20
    6572:	95 1f       	adc	r25, r21
    6574:	a0 1d       	adc	r26, r0
    6576:	08 95       	ret

00006578 <_exit>:
    6578:	f8 94       	cli

0000657a <__stop_program>:
    657a:	ff cf       	rjmp	.-2      	; 0x657a <__stop_program>
