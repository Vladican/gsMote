
board_checkout.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00802000  000068d2  00006966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f7e  00802122  00802122  00006a88  2**0
                  ALLOC
  3 .stab         00000e70  00000000  00000000  00006a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002e1  00000000  00000000  000078f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000360  00000000  00000000  00007be0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009384  00000000  00000000  00007f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d86  00000000  00000000  000112c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bea  00000000  00000000  0001304a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001774  00000000  00000000  00015c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004839  00000000  00000000  000173a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000708d  00000000  00000000  0001bbe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00022c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
       c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      38:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__vector_14>
      3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      40:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__vector_16>
      44:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__vector_17>
      48:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__vector_18>
      4c:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__vector_19>
      50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      8c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      90:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      94:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      98:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      9c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      e8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      ec:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      f8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     100:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_64>
     104:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     108:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     10c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     110:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     114:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     118:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     11c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     120:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     124:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     128:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     12c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     130:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     134:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__vector_77>
     138:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     13c:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__vector_79>
     140:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_80>
     144:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__vector_81>
     148:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__vector_82>
     14c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     150:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     154:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     158:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     15c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     160:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     164:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     168:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     16c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     170:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     174:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     178:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     17c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     180:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     184:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     188:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     18c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     190:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     194:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     198:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     19c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a0:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__vector_104>
     1a4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1a8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1b8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1bc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1c8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1d8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1dc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
     1e4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

000001e8 <chb_err_init>:
     1e8:	52 41 44 49 4f 20 4e 4f 54 20 49 4e 49 54 49 41     RADIO NOT INITIA
     1f8:	4c 49 5a 45 44 20 50 52 4f 50 45 52 4c 59 0a 00     LIZED PROPERLY..

00000208 <chb_err_overflow>:
     208:	42 55 46 46 45 52 20 46 55 4c 4c 2e 20 54 4f 53     BUFFER FULL. TOS
     218:	53 49 4e 47 20 49 4e 43 4f 4d 49 4e 47 20 44 41     SING INCOMING DA
     228:	54 41 0a 00                                         TA..

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	df e5       	ldi	r29, 0x5F	; 95
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	e2 ed       	ldi	r30, 0xD2	; 210
     244:	f8 e6       	ldi	r31, 0x68	; 104
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a2 32       	cpi	r26, 0x22	; 34
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	10 e5       	ldi	r17, 0x50	; 80
     258:	a2 e2       	ldi	r26, 0x22	; 34
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a0 3a       	cpi	r26, 0xA0	; 160
     262:	b1 07       	cpc	r27, r17
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <main>
     26a:	0c 94 67 34 	jmp	0x68ce	; 0x68ce <_exit>

0000026e <__bad_interrupt>:
     26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <chb_init>:

*/
/**************************************************************************/
void chb_init()
{
    memset(&pcb, 0, sizeof(pcb_t));
     272:	84 e1       	ldi	r24, 0x14	; 20
     274:	e2 e2       	ldi	r30, 0x22	; 34
     276:	f1 e2       	ldi	r31, 0x21	; 33
     278:	df 01       	movw	r26, r30
     27a:	1d 92       	st	X+, r1
     27c:	8a 95       	dec	r24
     27e:	e9 f7       	brne	.-6      	; 0x27a <chb_init+0x8>
    pcb.src_addr = chb_get_short_addr();
     280:	0e 94 2f 04 	call	0x85e	; 0x85e <chb_get_short_addr>
     284:	80 93 22 21 	sts	0x2122, r24
     288:	90 93 23 21 	sts	0x2123, r25
    chb_drvr_init();
     28c:	0e 94 9f 04 	call	0x93e	; 0x93e <chb_drvr_init>
}
     290:	08 95       	ret

00000292 <chb_get_pcb>:
*/
/**************************************************************************/
pcb_t *chb_get_pcb()
{
    return &pcb;
}
     292:	82 e2       	ldi	r24, 0x22	; 34
     294:	91 e2       	ldi	r25, 0x21	; 33
     296:	08 95       	ret

00000298 <chb_write>:
/*!

*/
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U8 len)
{
     298:	6f 92       	push	r6
     29a:	7f 92       	push	r7
     29c:	8f 92       	push	r8
     29e:	9f 92       	push	r9
     2a0:	bf 92       	push	r11
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	2a 97       	sbiw	r28, 0x0a	; 10
     2b8:	cd bf       	out	0x3d, r28	; 61
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	7c 01       	movw	r14, r24
     2be:	4b 01       	movw	r8, r22
     2c0:	14 2f       	mov	r17, r20
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
    *hdr_ptr++ = CHB_FCF_BYTE_1;
     2c2:	28 e9       	ldi	r18, 0x98	; 152
     2c4:	b2 2e       	mov	r11, r18

    *hdr_ptr++ = pcb.seq++;

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
     2c6:	34 e3       	ldi	r19, 0x34	; 52
     2c8:	63 2e       	mov	r6, r19
     2ca:	32 e1       	ldi	r19, 0x12	; 18
     2cc:	73 2e       	mov	r7, r19
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U8 len)
{
    U8 status, frm_len, hdr_len, hdr[CHB_HDR_SZ + 1];
    
    while (len > 0)
     2ce:	58 c0       	rjmp	.+176    	; 0x380 <chb_write+0xe8>
    {
        // calculate which frame len to use. if greater than max payload, split
        // up operation.
        frm_len = (len > CHB_MAX_PAYLOAD) ? CHB_MAX_PAYLOAD : len;
     2d0:	01 2f       	mov	r16, r17
     2d2:	15 36       	cpi	r17, 0x65	; 101
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <chb_write+0x40>
     2d6:	04 e6       	ldi	r16, 0x64	; 100
{
    U8 *hdr_ptr = hdr;

    // calc frame size and put in 0 position of array
    // frame size = hdr sz + payload len + fcs len
    *hdr_ptr++ = CHB_HDR_SZ + len + CHB_FCS_LEN;
     2d8:	80 2f       	mov	r24, r16
     2da:	85 5f       	subi	r24, 0xF5	; 245
     2dc:	89 83       	std	Y+1, r24	; 0x01

    // use default fcf byte 0 val but test for ack request. we won't request
    // ack if broadcast. all other cases we will.
    *hdr_ptr++ = CHB_FCF_BYTE_0 | ((addr != 0xFFFF) << CHB_ACK_REQ_POS);
     2de:	8f ef       	ldi	r24, 0xFF	; 255
     2e0:	e8 16       	cp	r14, r24
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	f8 06       	cpc	r15, r24
     2e6:	11 f0       	breq	.+4      	; 0x2ec <chb_write+0x54>
     2e8:	81 e6       	ldi	r24, 0x61	; 97
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <chb_write+0x56>
     2ec:	81 e4       	ldi	r24, 0x41	; 65
     2ee:	8a 83       	std	Y+2, r24	; 0x02
    *hdr_ptr++ = CHB_FCF_BYTE_1;
     2f0:	bb 82       	std	Y+3, r11	; 0x03

    *hdr_ptr++ = pcb.seq++;
     2f2:	80 91 24 21 	lds	r24, 0x2124
     2f6:	8c 83       	std	Y+4, r24	; 0x04
     2f8:	8f 5f       	subi	r24, 0xFF	; 255
     2fa:	80 93 24 21 	sts	0x2124, r24

    // fill out dest pan ID, dest addr, src addr
    *(U16 *)hdr_ptr = CHB_PAN_ID;
     2fe:	6d 82       	std	Y+5, r6	; 0x05
     300:	7e 82       	std	Y+6, r7	; 0x06
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = addr;
     302:	ef 82       	std	Y+7, r14	; 0x07
     304:	f8 86       	std	Y+8, r15	; 0x08
    hdr_ptr += sizeof(U16);
    *(U16 *)hdr_ptr = pcb.src_addr;
     306:	82 e2       	ldi	r24, 0x22	; 34
     308:	c8 2e       	mov	r12, r24
     30a:	81 e2       	ldi	r24, 0x21	; 33
     30c:	d8 2e       	mov	r13, r24
     30e:	80 91 22 21 	lds	r24, 0x2122
     312:	90 91 23 21 	lds	r25, 0x2123
     316:	89 87       	std	Y+9, r24	; 0x09
     318:	9a 87       	std	Y+10, r25	; 0x0a

        // gen frame header
        hdr_len = chb_gen_hdr(hdr, addr, frm_len);

        // send data to chip
        status = chb_tx(hdr, data, frm_len);
     31a:	ce 01       	movw	r24, r28
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	b4 01       	movw	r22, r8
     320:	40 2f       	mov	r20, r16
     322:	0e 94 45 04 	call	0x88a	; 0x88a <chb_tx>
		
        if (status != CHB_SUCCESS)
     326:	88 23       	and	r24, r24
     328:	51 f1       	breq	.+84     	; 0x37e <chb_write+0xe6>
        {
            switch (status)
     32a:	83 30       	cpi	r24, 0x03	; 3
     32c:	f1 f0       	breq	.+60     	; 0x36a <chb_write+0xd2>
     32e:	84 30       	cpi	r24, 0x04	; 4
     330:	18 f4       	brcc	.+6      	; 0x338 <chb_write+0xa0>
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	49 f5       	brne	.+82     	; 0x388 <chb_write+0xf0>
     336:	04 c0       	rjmp	.+8      	; 0x340 <chb_write+0xa8>
     338:	85 30       	cpi	r24, 0x05	; 5
     33a:	69 f0       	breq	.+26     	; 0x356 <chb_write+0xbe>
     33c:	80 34       	cpi	r24, 0x40	; 64
     33e:	21 f5       	brne	.+72     	; 0x388 <chb_write+0xf0>
            {
            case RADIO_SUCCESS:
                // fall through
            case CHB_SUCCESS_DATA_PENDING:
                pcb.txd_success++;
     340:	20 91 29 21 	lds	r18, 0x2129
     344:	30 91 2a 21 	lds	r19, 0x212A
     348:	2f 5f       	subi	r18, 0xFF	; 255
     34a:	3f 4f       	sbci	r19, 0xFF	; 255
     34c:	20 93 29 21 	sts	0x2129, r18
     350:	30 93 2a 21 	sts	0x212A, r19
                break;
     354:	19 c0       	rjmp	.+50     	; 0x388 <chb_write+0xf0>

            case CHB_NO_ACK:
                pcb.txd_noack++;
     356:	20 91 2b 21 	lds	r18, 0x212B
     35a:	30 91 2c 21 	lds	r19, 0x212C
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	3f 4f       	sbci	r19, 0xFF	; 255
     362:	f6 01       	movw	r30, r12
     364:	21 87       	std	Z+9, r18	; 0x09
     366:	32 87       	std	Z+10, r19	; 0x0a
                break;
     368:	0f c0       	rjmp	.+30     	; 0x388 <chb_write+0xf0>

            case CHB_CHANNEL_ACCESS_FAILURE:
                pcb.txd_channel_fail++;
     36a:	20 91 2d 21 	lds	r18, 0x212D
     36e:	30 91 2e 21 	lds	r19, 0x212E
     372:	2f 5f       	subi	r18, 0xFF	; 255
     374:	3f 4f       	sbci	r19, 0xFF	; 255
     376:	f6 01       	movw	r30, r12
     378:	23 87       	std	Z+11, r18	; 0x0b
     37a:	34 87       	std	Z+12, r19	; 0x0c
                break;
     37c:	05 c0       	rjmp	.+10     	; 0x388 <chb_write+0xf0>
            }
            return status;
        }

        // adjust len and restart
        len = len - frm_len;
     37e:	10 1b       	sub	r17, r16
/**************************************************************************/
U8 chb_write(U16 addr, U8 *data, U8 len)
{
    U8 status, frm_len, hdr_len, hdr[CHB_HDR_SZ + 1];
    
    while (len > 0)
     380:	11 23       	and	r17, r17
     382:	09 f0       	breq	.+2      	; 0x386 <chb_write+0xee>
     384:	a5 cf       	rjmp	.-182    	; 0x2d0 <chb_write+0x38>
        }

        // adjust len and restart
        len = len - frm_len;
    }
    return CHB_SUCCESS;
     386:	80 e0       	ldi	r24, 0x00	; 0
}
     388:	2a 96       	adiw	r28, 0x0a	; 10
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	9f 90       	pop	r9
     3a2:	8f 90       	pop	r8
     3a4:	7f 90       	pop	r7
     3a6:	6f 90       	pop	r6
     3a8:	08 95       	ret

000003aa <chb_read>:
    The read function will automatically populate the addresses and the data with
    the frm payload. It will then return the len of the payload.
*/
/**************************************************************************/
U8 chb_read(chb_rx_data_t *rx)
{
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	8c 01       	movw	r16, r24

    data_ptr = rx->data;

    // first byte is always len. check it to make sure 
    // we have a valid len byte.
    if ((len = chb_buf_read()) > CHB_MAX_FRAME_LENGTH)
     3ba:	0e 94 46 02 	call	0x48c	; 0x48c <chb_buf_read>
     3be:	d8 2e       	mov	r13, r24
     3c0:	87 fd       	sbrc	r24, 7
     3c2:	41 c0       	rjmp	.+130    	; 0x446 <chb_read+0x9c>
    {
        return 0;
    }
    *data_ptr++ = len;
     3c4:	f8 01       	movw	r30, r16
     3c6:	85 83       	std	Z+5, r24	; 0x05
     3c8:	e8 01       	movw	r28, r16
     3ca:	26 96       	adiw	r28, 0x06	; 6
     3cc:	7e 01       	movw	r14, r28

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
     3ce:	05 c0       	rjmp	.+10     	; 0x3da <chb_read+0x30>
    {
        *data_ptr++ = chb_buf_read();
     3d0:	0e 94 46 02 	call	0x48c	; 0x48c <chb_buf_read>
     3d4:	f7 01       	movw	r30, r14
     3d6:	81 93       	st	Z+, r24
     3d8:	7f 01       	movw	r14, r30
        return 0;
    }
    *data_ptr++ = len;

    // load the rest of the data into buffer
    for (i=0; i<len; i++)
     3da:	8e 2d       	mov	r24, r14
     3dc:	8c 1b       	sub	r24, r28
     3de:	8d 15       	cp	r24, r13
     3e0:	b8 f3       	brcs	.-18     	; 0x3d0 <chb_read+0x26>
    // we'll use it as temp storage to parse the frame. then move the frame
    // down so that only the payload will be in the buffer.

    // extract the sequence number
    data_ptr = rx->data + 3;    // location of sequence number
    seq = *data_ptr;
     3e2:	f8 01       	movw	r30, r16
     3e4:	c0 85       	ldd	r28, Z+8	; 0x08

    // parse the buffer and extract the dest and src addresses
    data_ptr = rx->data + 6;                // location of dest addr
    rx->dest_addr = *(U16 *)data_ptr;
     3e6:	83 85       	ldd	r24, Z+11	; 0x0b
     3e8:	94 85       	ldd	r25, Z+12	; 0x0c
     3ea:	83 83       	std	Z+3, r24	; 0x03
     3ec:	94 83       	std	Z+4, r25	; 0x04
    data_ptr += sizeof(U16);
    rx->src_addr = *(U16 *)data_ptr;
     3ee:	85 85       	ldd	r24, Z+13	; 0x0d
     3f0:	96 85       	ldd	r25, Z+14	; 0x0e
     3f2:	81 83       	std	Z+1, r24	; 0x01
     3f4:	92 83       	std	Z+2, r25	; 0x02
    data_ptr += sizeof(U16);

    // if the data in the rx buf is 0, then clear the rx_flag. otherwise, keep it raised
    if (!chb_buf_get_len())
     3f6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <chb_buf_get_len>
     3fa:	88 23       	and	r24, r24
     3fc:	11 f4       	brne	.+4      	; 0x402 <chb_read+0x58>
    {
        pcb.data_rcv = false;
     3fe:	10 92 25 21 	sts	0x2125, r1
#else
    // duplicate frame check (dupe check). we want to remove frames that have been already been received since they 
    // are just retries. 
    // note: this dupe check only removes duplicate frames from the previous transfer. if another frame from a different
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
     402:	20 91 00 20 	lds	r18, 0x2000
     406:	f8 01       	movw	r30, r16
     408:	81 81       	ldd	r24, Z+1	; 0x01
     40a:	92 81       	ldd	r25, Z+2	; 0x02
     40c:	c2 17       	cp	r28, r18
     40e:	39 f4       	brne	.+14     	; 0x41e <chb_read+0x74>
     410:	20 91 01 20 	lds	r18, 0x2001
     414:	30 91 02 20 	lds	r19, 0x2002
     418:	82 17       	cp	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	a1 f0       	breq	.+40     	; 0x446 <chb_read+0x9c>
        // it properly. discard.
        return 0;
    }
    else
    {
        prev_seq = seq;
     41e:	c0 93 00 20 	sts	0x2000, r28
        prev_src_addr = rx->src_addr;
     422:	80 93 01 20 	sts	0x2001, r24
     426:	90 93 02 20 	sts	0x2002, r25
    }

    // move the payload down to the beginning of the data buffer
    memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
     42a:	b8 01       	movw	r22, r16
     42c:	61 5f       	subi	r22, 0xF1	; 241
     42e:	7f 4f       	sbci	r23, 0xFF	; 255
     430:	4d 2d       	mov	r20, r13
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	49 50       	subi	r20, 0x09	; 9
     436:	50 40       	sbci	r21, 0x00	; 0
     438:	c8 01       	movw	r24, r16
     43a:	05 96       	adiw	r24, 0x05	; 5
     43c:	0e 94 99 31 	call	0x6332	; 0x6332 <memmove>
	//memmove(rx->data, data_ptr+((seq%4)*128)+128, len - CHB_HDR_SZ);
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
     440:	8d 2d       	mov	r24, r13
     442:	8b 50       	subi	r24, 0x0B	; 11
     444:	01 c0       	rjmp	.+2      	; 0x448 <chb_read+0x9e>
    // node comes in between the dupes, then the dupe will show up as a received frame.
    if ((seq == prev_seq) && (rx->src_addr == prev_src_addr))
    {
        // this is a duplicate frame from a retry. the remote node thinks we didn't receive 
        // it properly. discard.
        return 0;
     446:	80 e0       	ldi	r24, 0x00	; 0
    memmove(rx->data, data_ptr, len - CHB_HDR_SZ);
	//memmove(rx->data, data_ptr+((seq%4)*128)+128, len - CHB_HDR_SZ);
    // finally, return the len of the payload
    return len - CHB_HDR_SZ - CHB_FCS_LEN;
#endif
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	08 95       	ret

00000458 <chb_buf_init>:

*/
/**************************************************************************/
void chb_buf_init()
{
    rd_ptr = 0;
     458:	10 92 36 21 	sts	0x2136, r1
    wr_ptr = 0;
     45c:	10 92 37 21 	sts	0x2137, r1
    len = 0;
     460:	10 92 38 21 	sts	0x2138, r1
}
     464:	08 95       	ret

00000466 <chb_buf_write>:

*/
/**************************************************************************/
void chb_buf_write(U8 data)
{
    chb_buf[wr_ptr] = data;
     466:	20 91 37 21 	lds	r18, 0x2137
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	f9 01       	movw	r30, r18
     46e:	e7 5c       	subi	r30, 0xC7	; 199
     470:	fe 4d       	sbci	r31, 0xDE	; 222
     472:	80 83       	st	Z, r24
    wr_ptr = (wr_ptr + 1) % CHB_BUF_SZ;
     474:	2f 5f       	subi	r18, 0xFF	; 255
     476:	3f 4f       	sbci	r19, 0xFF	; 255
     478:	2f 77       	andi	r18, 0x7F	; 127
     47a:	30 70       	andi	r19, 0x00	; 0
     47c:	20 93 37 21 	sts	0x2137, r18
    len++;
     480:	80 91 38 21 	lds	r24, 0x2138
     484:	8f 5f       	subi	r24, 0xFF	; 255
     486:	80 93 38 21 	sts	0x2138, r24
}
     48a:	08 95       	ret

0000048c <chb_buf_read>:
/**************************************************************************/
U8 chb_buf_read()
{
    U8 data;

    data = chb_buf[rd_ptr];
     48c:	20 91 36 21 	lds	r18, 0x2136
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	f9 01       	movw	r30, r18
     494:	e7 5c       	subi	r30, 0xC7	; 199
     496:	fe 4d       	sbci	r31, 0xDE	; 222
     498:	80 81       	ld	r24, Z
    rd_ptr = (rd_ptr + 1) % CHB_BUF_SZ;
     49a:	2f 5f       	subi	r18, 0xFF	; 255
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	2f 77       	andi	r18, 0x7F	; 127
     4a0:	30 70       	andi	r19, 0x00	; 0
     4a2:	20 93 36 21 	sts	0x2136, r18
    len--;
     4a6:	90 91 38 21 	lds	r25, 0x2138
     4aa:	91 50       	subi	r25, 0x01	; 1
     4ac:	90 93 38 21 	sts	0x2138, r25
    return data;
}
     4b0:	08 95       	ret

000004b2 <chb_buf_get_len>:
*/
/**************************************************************************/
U8 chb_buf_get_len()
{
    return len;
}
     4b2:	80 91 38 21 	lds	r24, 0x2138
     4b6:	08 95       	ret

000004b8 <chb_reg_read>:
/*!

*/
/**************************************************************************/
U8 chb_reg_read(U8 addr)
{
     4b8:	cf 93       	push	r28
     4ba:	c8 2f       	mov	r28, r24
    U8 val = 0;

    /* Add the register read command to the register address. */
    addr |= 0x80;

    CHB_ENTER_CRIT();
     4bc:	8f b7       	in	r24, 0x3f	; 63
     4be:	80 93 bf 21 	sts	0x21BF, r24
     4c2:	f8 94       	cli
    RadioCS(TRUE);
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>

    /*Send Register address and read register content.*/
    val = SPID_write(addr);
     4ca:	8c 2f       	mov	r24, r28
     4cc:	80 68       	ori	r24, 0x80	; 128
     4ce:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
    val = SPID_write(val);
     4d2:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
     4d6:	c8 2f       	mov	r28, r24

    RadioCS(FALSE);
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>
    CHB_LEAVE_CRIT();
     4de:	80 91 bf 21 	lds	r24, 0x21BF
     4e2:	8f bf       	out	0x3f, r24	; 63
     4e4:	78 94       	sei

    return val;
}
     4e6:	8c 2f       	mov	r24, r28
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <chb_get_state>:

*/
/**************************************************************************/
static U8 chb_get_state()
{
    return chb_reg_read(TRX_STATUS) & 0x1f;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
}
     4f2:	8f 71       	andi	r24, 0x1F	; 31
     4f4:	08 95       	ret

000004f6 <chb_reset>:

*/
/**************************************************************************/
void chb_reset()
{
    CHB_RST_DISABLE();
     4f6:	80 91 64 06 	lds	r24, 0x0664
     4fa:	81 60       	ori	r24, 0x01	; 1
     4fc:	80 93 64 06 	sts	0x0664, r24
    CHB_SLPTR_DISABLE();
     500:	80 91 64 06 	lds	r24, 0x0664
     504:	8d 7f       	andi	r24, 0xFD	; 253
     506:	80 93 64 06 	sts	0x0664, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     50a:	8e e7       	ldi	r24, 0x7E	; 126
     50c:	8a 95       	dec	r24
     50e:	f1 f7       	brne	.-4      	; 0x50c <chb_reset+0x16>
     510:	00 c0       	rjmp	.+0      	; 0x512 <chb_reset+0x1c>

    // wait a bit while transceiver wakes up
    _delay_us(TIME_P_ON_TO_CLKM_AVAIL);

    // reset the device
    CHB_RST_ENABLE();
     512:	80 91 64 06 	lds	r24, 0x0664
     516:	8e 7f       	andi	r24, 0xFE	; 254
     518:	80 93 64 06 	sts	0x0664, r24
     51c:	00 00       	nop
    _delay_us(TIME_RST_PULSE_WIDTH);
    CHB_RST_DISABLE();
     51e:	80 91 64 06 	lds	r24, 0x0664
     522:	81 60       	ori	r24, 0x01	; 1
     524:	80 93 64 06 	sts	0x0664, r24
    while (1)
    {
        // if you're stuck in this loop, that means that you're not reading
        // the version and part number register correctly. possible that version number
        // changes. if so, update version num in header file
        if ((chb_reg_read(VERSION_NUM) == CHB_AT86RF212_VER_NUM) && (chb_reg_read(PART_NUM) == CHB_AT86RF212_PART_NUM)) 
     528:	8d e1       	ldi	r24, 0x1D	; 29
     52a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	d9 f7       	brne	.-10     	; 0x528 <chb_reset+0x32>
     532:	8c e1       	ldi	r24, 0x1C	; 28
     534:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
     538:	87 30       	cpi	r24, 0x07	; 7
     53a:	b1 f7       	brne	.-20     	; 0x528 <chb_reset+0x32>
            break;
        }
    }
	

}
     53c:	08 95       	ret

0000053e <chb_reg_read16>:
/*! 
 
*/
/**************************************************************************/
U16 chb_reg_read16(U8 addr)
{
     53e:	cf 93       	push	r28
     540:	c8 2f       	mov	r28, r24
    U8 i;
    U16 val = 0;

    for (i=0; i<2; i++)
    {
        addr |= chb_reg_read(addr + i) << (8 * i);
     542:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
     546:	8c 2b       	or	r24, r28
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
    }
    return val;
}
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <chb_reg_write>:
/*!

*/
/**************************************************************************/
void chb_reg_write(U8 addr, U8 val)
{
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	0f 92       	push	r0
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	18 2f       	mov	r17, r24
    U8 dummy; 

    /* Add the Register Write command to the address. */
    addr |= 0xC0;

    CHB_ENTER_CRIT();
     564:	8f b7       	in	r24, 0x3f	; 63
     566:	80 93 bf 21 	sts	0x21BF, r24
     56a:	f8 94       	cli
    RadioCS(TRUE);
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	69 83       	std	Y+1, r22	; 0x01
     570:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>

    /*Send Register address and write register content.*/
    dummy = SPID_write(addr);
     574:	81 2f       	mov	r24, r17
     576:	80 6c       	ori	r24, 0xC0	; 192
     578:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
    dummy = SPID_write(val);
     57c:	69 81       	ldd	r22, Y+1	; 0x01
     57e:	86 2f       	mov	r24, r22
     580:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>

    RadioCS(FALSE);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>
    CHB_LEAVE_CRIT();
     58a:	80 91 bf 21 	lds	r24, 0x21BF
     58e:	8f bf       	out	0x3f, r24	; 63
     590:	78 94       	sei
}
     592:	0f 90       	pop	r0
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	08 95       	ret

0000059c <chb_reg_write16>:
/*!

*/
/**************************************************************************/
void chb_reg_write16(U8 addr, U16 val)
{
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	0f 92       	push	r0
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	18 2f       	mov	r17, r24
    U8 i;

    for (i=0; i<2; i++)
    {
        chb_reg_write(addr + i, val >> (8 * i));
     5aa:	79 83       	std	Y+1, r23	; 0x01
     5ac:	0e 94 ab 02 	call	0x556	; 0x556 <chb_reg_write>
     5b0:	81 2f       	mov	r24, r17
     5b2:	8f 5f       	subi	r24, 0xFF	; 255
     5b4:	79 81       	ldd	r23, Y+1	; 0x01
     5b6:	67 2f       	mov	r22, r23
     5b8:	0e 94 ab 02 	call	0x556	; 0x556 <chb_reg_write>
    }
}
     5bc:	0f 90       	pop	r0
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	08 95       	ret

000005c6 <chb_reg_write64>:
/*!

*/
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	18 2f       	mov	r17, r24
    U8 i;

    for (i=0; i<8; i++)
     5d0:	eb 01       	movw	r28, r22
     5d2:	00 e0       	ldi	r16, 0x00	; 0
    {
        chb_reg_write(addr + i, *(val + i));
     5d4:	69 91       	ld	r22, Y+
     5d6:	80 2f       	mov	r24, r16
     5d8:	81 0f       	add	r24, r17
     5da:	0e 94 ab 02 	call	0x556	; 0x556 <chb_reg_write>
/**************************************************************************/
void chb_reg_write64(U8 addr, U8 *val)
{
    U8 i;

    for (i=0; i<8; i++)
     5de:	0f 5f       	subi	r16, 0xFF	; 255
     5e0:	08 30       	cpi	r16, 0x08	; 8
     5e2:	c1 f7       	brne	.-16     	; 0x5d4 <chb_reg_write64+0xe>
    {
        chb_reg_write(addr + i, *(val + i));
    }
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <chb_reg_read_mod_write>:
/*!

*/
/**************************************************************************/
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	0f 92       	push	r0
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	18 2f       	mov	r17, r24
     5fe:	06 2f       	mov	r16, r22
    U8 tmp;

    tmp = chb_reg_read(addr);
     600:	49 83       	std	Y+1, r20	; 0x01
     602:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
    val &= mask;                // mask off stray bits from val
    tmp &= ~mask;               // mask off bits in reg val
     606:	49 81       	ldd	r20, Y+1	; 0x01
     608:	64 2f       	mov	r22, r20
     60a:	60 95       	com	r22
     60c:	68 23       	and	r22, r24
void chb_reg_read_mod_write(U8 addr, U8 val, U8 mask)
{
    U8 tmp;

    tmp = chb_reg_read(addr);
    val &= mask;                // mask off stray bits from val
     60e:	40 23       	and	r20, r16
    tmp &= ~mask;               // mask off bits in reg val
    tmp |= val;                 // copy val into reg val
     610:	64 2b       	or	r22, r20
    chb_reg_write(addr, tmp);   // write back to reg
     612:	81 2f       	mov	r24, r17
     614:	0e 94 ab 02 	call	0x556	; 0x556 <chb_reg_write>
}
     618:	0f 90       	pop	r0
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	08 95       	ret

00000624 <chb_frame_write>:
/*!

*/
/**************************************************************************/
void chb_frame_write(U8 *hdr, U8 hdr_len, U8 *data, U8 data_len)
{
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	0f 92       	push	r0
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	18 2f       	mov	r17, r24
     63e:	06 2f       	mov	r16, r22
     640:	f4 2e       	mov	r15, r20
     642:	e5 2e       	mov	r14, r21
     644:	d2 2e       	mov	r13, r18
    U8 i, dummy;

    // dont allow transmission longer than max frame size
    if ((hdr_len + data_len) > 127)
     646:	e2 2f       	mov	r30, r18
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	e6 0f       	add	r30, r22
     64c:	f1 1d       	adc	r31, r1
     64e:	e0 38       	cpi	r30, 0x80	; 128
     650:	f1 05       	cpc	r31, r1
     652:	5c f5       	brge	.+86     	; 0x6aa <chb_frame_write+0x86>
    {
        return;
    }

    // initiate spi transaction
    CHB_ENTER_CRIT();
     654:	8f b7       	in	r24, 0x3f	; 63
     656:	80 93 bf 21 	sts	0x21BF, r24
     65a:	f8 94       	cli
    RadioCS(TRUE); 
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	99 83       	std	Y+1, r25	; 0x01
     660:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>

    // send fifo write command
    dummy = SPID_write(CHB_SPI_CMD_FW);
     664:	80 e6       	ldi	r24, 0x60	; 96
     666:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
     66a:	a1 2e       	mov	r10, r17
     66c:	99 81       	ldd	r25, Y+1	; 0x01
     66e:	b9 2e       	mov	r11, r25
     670:	05 c0       	rjmp	.+10     	; 0x67c <chb_frame_write+0x58>
    {
        dummy = SPID_write(*hdr++);
     672:	f5 01       	movw	r30, r10
     674:	81 91       	ld	r24, Z+
     676:	5f 01       	movw	r10, r30
     678:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>

    // send fifo write command
    dummy = SPID_write(CHB_SPI_CMD_FW);

    // write hdr contents to fifo
    for (i=0; i<hdr_len; i++)
     67c:	8a 2d       	mov	r24, r10
     67e:	81 1b       	sub	r24, r17
     680:	80 17       	cp	r24, r16
     682:	b8 f3       	brcs	.-18     	; 0x672 <chb_frame_write+0x4e>
     684:	0f 2d       	mov	r16, r15
     686:	1e 2d       	mov	r17, r14
     688:	05 c0       	rjmp	.+10     	; 0x694 <chb_frame_write+0x70>
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
    {
        dummy = SPID_write(*data++);
     68a:	f8 01       	movw	r30, r16
     68c:	81 91       	ld	r24, Z+
     68e:	8f 01       	movw	r16, r30
     690:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
    {
        dummy = SPID_write(*hdr++);
    }

    // write data contents to fifo
    for (i=0; i<data_len; i++)
     694:	80 2f       	mov	r24, r16
     696:	8f 19       	sub	r24, r15
     698:	8d 15       	cp	r24, r13
     69a:	b8 f3       	brcs	.-18     	; 0x68a <chb_frame_write+0x66>
    {
        dummy = SPID_write(*data++);
    }

    // terminate spi transaction
    RadioCS(FALSE); 
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>
    CHB_LEAVE_CRIT();
     6a2:	80 91 bf 21 	lds	r24, 0x21BF
     6a6:	8f bf       	out	0x3f, r24	; 63
     6a8:	78 94       	sei
}
     6aa:	0f 90       	pop	r0
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	df 90       	pop	r13
     6ba:	bf 90       	pop	r11
     6bc:	af 90       	pop	r10
     6be:	08 95       	ret

000006c0 <chb_set_mode>:
    Set the channel mode, BPSK, OQPSK, etc...
*/
/**************************************************************************/
void chb_set_mode(U8 mode)
{
    switch (mode)
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	51 f0       	breq	.+20     	; 0x6d8 <chb_set_mode+0x18>
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	28 f0       	brcs	.+10     	; 0x6d2 <chb_set_mode+0x12>
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	49 f0       	breq	.+18     	; 0x6de <chb_set_mode+0x1e>
     6cc:	83 30       	cpi	r24, 0x03	; 3
     6ce:	e1 f4       	brne	.+56     	; 0x708 <chb_set_mode+0x48>
     6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <chb_set_mode+0x34>
    {
    case OQPSK_868MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x08, 0x3f);                 // 802.15.4-2006, channel page 2, channel 0 (868 MHz, Europe)
     6d2:	8c e0       	ldi	r24, 0x0C	; 12
     6d4:	68 e0       	ldi	r22, 0x08	; 8
     6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <chb_set_mode+0x22>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
        break;
    case OQPSK_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);                 // 802.15.4-2006, channel page 2, channels 1-10 (915 MHz, US)
     6d8:	8c e0       	ldi	r24, 0x0C	; 12
     6da:	6c e0       	ldi	r22, 0x0C	; 12
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <chb_set_mode+0x22>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
        break;
    case OQPSK_780MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x1c, 0x3f);                 // 802.15.4-2006, channel page 5, channel 0-3 (780 MHz, China)
     6de:	8c e0       	ldi	r24, 0x0C	; 12
     6e0:	6c e1       	ldi	r22, 0x1C	; 28
     6e2:	4f e3       	ldi	r20, 0x3F	; 63
     6e4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_OQPSK_TX_OFFSET, 0x3);    // this is according to table 7-16 in at86rf212 datasheet
     6e8:	86 e1       	ldi	r24, 0x16	; 22
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	43 e0       	ldi	r20, 0x03	; 3
     6ee:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>
        break;
     6f2:	08 95       	ret
    case BPSK40_915MHZ:
        chb_reg_read_mod_write(TRX_CTRL_2, 0x00, 0x3f);                 // 802.15.4-2006, BPSK, 40 kbps
     6f4:	8c e0       	ldi	r24, 0x0C	; 12
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	4f e3       	ldi	r20, 0x3F	; 63
     6fa:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>
        chb_reg_read_mod_write(RF_CTRL_0, CHB_BPSK_TX_OFFSET, 0x3);     // this is according to table 7-16 in at86rf212 datasheet
     6fe:	86 e1       	ldi	r24, 0x16	; 22
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	43 e0       	ldi	r20, 0x03	; 3
     704:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>
     708:	08 95       	ret

0000070a <chb_set_channel>:
/*!

*/
/**************************************************************************/
U8 chb_set_channel(U8 channel)
{
     70a:	cf 93       	push	r28
     70c:	c8 2f       	mov	r28, r24
    //    {
    //        chb_reg_read_mod_write(TRX_CTRL_2, 0x0c, 0x3f);
    //    }
    //}
        
    chb_reg_read_mod_write(PHY_CC_CCA, channel, 0x1f); 
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	6c 2f       	mov	r22, r28
     712:	4f e1       	ldi	r20, 0x1F	; 31
     714:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>
#endif

    // add a delay to allow the PLL to lock if in active mode.
    state = chb_get_state();
     718:	0e 94 76 02 	call	0x4ec	; 0x4ec <chb_get_state>
    if ((state == CHB_RX_ON) || (state == CHB_PLL_ON))
     71c:	86 30       	cpi	r24, 0x06	; 6
     71e:	11 f0       	breq	.+4      	; 0x724 <chb_set_channel+0x1a>
     720:	89 30       	cpi	r24, 0x09	; 9
     722:	21 f4       	brne	.+8      	; 0x72c <chb_set_channel+0x22>
     724:	84 e2       	ldi	r24, 0x24	; 36
     726:	8a 95       	dec	r24
     728:	f1 f7       	brne	.-4      	; 0x726 <chb_set_channel+0x1c>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <chb_set_channel+0x22>
    {
        _delay_us(TIME_PLL_LOCK_TIME);
    }

    return ((chb_reg_read(PHY_CC_CCA) & 0x1f) == channel) ? RADIO_SUCCESS : RADIO_TIMED_OUT;
     72c:	88 e0       	ldi	r24, 0x08	; 8
     72e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
     732:	28 2f       	mov	r18, r24
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	2f 71       	andi	r18, 0x1F	; 31
     738:	30 70       	andi	r19, 0x00	; 0
     73a:	8c 2f       	mov	r24, r28
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	28 17       	cp	r18, r24
     740:	39 07       	cpc	r19, r25
     742:	11 f4       	brne	.+4      	; 0x748 <chb_set_channel+0x3e>
     744:	80 e4       	ldi	r24, 0x40	; 64
     746:	01 c0       	rjmp	.+2      	; 0x74a <chb_set_channel+0x40>
     748:	83 e4       	ldi	r24, 0x43	; 67
}
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <chb_set_pwr>:
/*!
    Set the power level
*/
/**************************************************************************/
void chb_set_pwr(U8 val)
{
     74e:	68 2f       	mov	r22, r24
    chb_reg_write(PHY_TX_PWR, val);
     750:	85 e0       	ldi	r24, 0x05	; 5
     752:	0e 94 ab 02 	call	0x556	; 0x556 <chb_reg_write>
}
     756:	08 95       	ret

00000758 <chb_set_state>:
    for certain operations. Check the datasheet for more details on the state 
    machine and manipulations.
*/
/**************************************************************************/
U8 chb_set_state(U8 state)
{
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	c8 2f       	mov	r28, r24
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
     75e:	80 91 64 06 	lds	r24, 0x0664
     762:	81 fd       	sbrc	r24, 1
     764:	38 c0       	rjmp	.+112    	; 0x7d6 <chb_set_state+0x7e>
    {
        return RADIO_WRONG_STATE;
    }

    // if we're in a transition state, wait for the state to become stable
    curr_state = chb_get_state();
     766:	0e 94 76 02 	call	0x4ec	; 0x4ec <chb_get_state>
     76a:	d8 2f       	mov	r29, r24
    if ((curr_state == CHB_BUSY_TX_ARET) || (curr_state == CHB_BUSY_RX_AACK) || (curr_state == CHB_BUSY_RX) || (curr_state == CHB_BUSY_TX))
     76c:	81 51       	subi	r24, 0x11	; 17
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	20 f0       	brcs	.+8      	; 0x77a <chb_set_state+0x22>
     772:	d1 30       	cpi	r29, 0x01	; 1
     774:	11 f0       	breq	.+4      	; 0x77a <chb_set_state+0x22>
     776:	d2 30       	cpi	r29, 0x02	; 2
     778:	21 f4       	brne	.+8      	; 0x782 <chb_set_state+0x2a>
    {
        while (chb_get_state() == curr_state);
     77a:	0e 94 76 02 	call	0x4ec	; 0x4ec <chb_get_state>
     77e:	8d 17       	cp	r24, r29
     780:	e1 f3       	breq	.-8      	; 0x77a <chb_set_state+0x22>
    }

    // At this point it is clear that the requested new_state is:
    // TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
    // we need to handle some special cases before we transition to the new state
    switch (state)
     782:	c6 31       	cpi	r28, 0x16	; 22
     784:	79 f0       	breq	.+30     	; 0x7a4 <chb_set_state+0x4c>
     786:	c9 31       	cpi	r28, 0x19	; 25
     788:	51 f0       	breq	.+20     	; 0x79e <chb_set_state+0x46>
     78a:	c8 30       	cpi	r28, 0x08	; 8
     78c:	99 f4       	brne	.+38     	; 0x7b4 <chb_set_state+0x5c>
    {
    case CHB_TRX_OFF:
        /* Go to TRX_OFF from any state. */
        CHB_SLPTR_DISABLE();
     78e:	80 91 64 06 	lds	r24, 0x0664
     792:	8d 7f       	andi	r24, 0xFD	; 253
     794:	80 93 64 06 	sts	0x0664, r24
        chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1f);
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	63 e0       	ldi	r22, 0x03	; 3
     79c:	07 c0       	rjmp	.+14     	; 0x7ac <chb_set_state+0x54>
        _delay_us(TIME_ALL_STATES_TRX_OFF);
        break;

    case CHB_TX_ARET_ON:
        if (curr_state == CHB_RX_AACK_ON)
     79e:	d6 31       	cpi	r29, 0x16	; 22
     7a0:	49 f4       	brne	.+18     	; 0x7b4 <chb_set_state+0x5c>
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <chb_set_state+0x50>
            _delay_us(TIME_RX_ON_PLL_ON);
        }
        break;

    case CHB_RX_AACK_ON:
        if (curr_state == CHB_TX_ARET_ON)
     7a4:	d9 31       	cpi	r29, 0x19	; 25
     7a6:	31 f4       	brne	.+12     	; 0x7b4 <chb_set_state+0x5c>
        {
            /* First do intermediate state transition to RX_ON, then to RX_AACK_ON. */
            chb_reg_read_mod_write(TRX_STATE, CMD_PLL_ON, 0x1f);
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	69 e0       	ldi	r22, 0x09	; 9
     7ac:	4f e1       	ldi	r20, 0x1F	; 31
     7ae:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>
     7b2:	00 00       	nop
        }
        break;
    }

    /* Now we're okay to transition to any new state. */
    chb_reg_read_mod_write(TRX_STATE, state, 0x1f);
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	6c 2f       	mov	r22, r28
     7b8:	4f e1       	ldi	r20, 0x1F	; 31
     7ba:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>
     7be:	84 e2       	ldi	r24, 0x24	; 36
     7c0:	8a 95       	dec	r24
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <chb_set_state+0x68>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <chb_set_state+0x6e>

    /* When the PLL is active most states can be reached in 1us. However, from */
    /* TRX_OFF the PLL needs time to activate. */
    _delay_us(TIME_TRX_OFF_PLL_ON);

    if (chb_get_state() == state)
     7c6:	0e 94 76 02 	call	0x4ec	; 0x4ec <chb_get_state>
     7ca:	8c 17       	cp	r24, r28
     7cc:	11 f4       	brne	.+4      	; 0x7d2 <chb_set_state+0x7a>
    {
        return RADIO_SUCCESS;
     7ce:	80 e4       	ldi	r24, 0x40	; 64
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <chb_set_state+0x80>
    }
    return RADIO_TIMED_OUT;
     7d2:	83 e4       	ldi	r24, 0x43	; 67
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <chb_set_state+0x80>
    U8 curr_state;

    // if we're sleeping then don't allow transition
    if (CHB_SLPTR_PORT & _BV(CHB_SLPTR_PIN))
    {
        return RADIO_WRONG_STATE;
     7d6:	84 e4       	ldi	r24, 0x44	; 68
    if (chb_get_state() == state)
    {
        return RADIO_SUCCESS;
    }
    return RADIO_TIMED_OUT;
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <chb_set_ieee_addr>:
/*! 
 
*/
/**************************************************************************/
void chb_set_ieee_addr(U8 *addr)
{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	ec 01       	movw	r28, r24
    chb_eeprom_write(CHB_EEPROM_IEEE_ADDR, addr, 8); 
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	be 01       	movw	r22, r28
     7ea:	48 e0       	ldi	r20, 0x08	; 8
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	0e 94 2d 06 	call	0xc5a	; 0xc5a <chb_eeprom_write>
    chb_reg_write64(IEEE_ADDR_0, addr); 
     7f2:	84 e2       	ldi	r24, 0x24	; 36
     7f4:	be 01       	movw	r22, r28
     7f6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <chb_reg_write64>
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <chb_get_ieee_addr>:
/*!

*/
/**************************************************************************/
void chb_get_ieee_addr(U8 *addr)
{
     800:	bc 01       	movw	r22, r24
    chb_eeprom_read(CHB_EEPROM_IEEE_ADDR, addr, 8);
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	48 e0       	ldi	r20, 0x08	; 8
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <chb_eeprom_read>
}
     80e:	08 95       	ret

00000810 <chb_set_short_addr>:
/*!

*/
/**************************************************************************/
void chb_set_short_addr(U16 addr)
{
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	0f 92       	push	r0
     81a:	0f 92       	push	r0
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	9a 83       	std	Y+2, r25	; 0x02
    U8 *addr_ptr = (U8 *)&addr;
    pcb_t *pcb = chb_get_pcb();
     824:	0e 94 49 01 	call	0x292	; 0x292 <chb_get_pcb>
     828:	8c 01       	movw	r16, r24

    chb_eeprom_write(CHB_EEPROM_SHORT_ADDR, addr_ptr, 2);
     82a:	89 e0       	ldi	r24, 0x09	; 9
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	be 01       	movw	r22, r28
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	42 e0       	ldi	r20, 0x02	; 2
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	0e 94 2d 06 	call	0xc5a	; 0xc5a <chb_eeprom_write>
    chb_reg_write16(SHORT_ADDR_0, addr);
     83c:	69 81       	ldd	r22, Y+1	; 0x01
     83e:	7a 81       	ldd	r23, Y+2	; 0x02
     840:	80 e2       	ldi	r24, 0x20	; 32
     842:	0e 94 ce 02 	call	0x59c	; 0x59c <chb_reg_write16>
    pcb->src_addr = addr;
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	f8 01       	movw	r30, r16
     84c:	80 83       	st	Z, r24
     84e:	91 83       	std	Z+1, r25	; 0x01
}
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <chb_get_short_addr>:
/*!

*/
/**************************************************************************/
U16 chb_get_short_addr()
{
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	0f 92       	push	r0
     864:	0f 92       	push	r0
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
    U8 addr[2];

    chb_eeprom_read(CHB_EEPROM_SHORT_ADDR, addr, 2);
     86a:	89 e0       	ldi	r24, 0x09	; 9
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	be 01       	movw	r22, r28
     870:	6f 5f       	subi	r22, 0xFF	; 255
     872:	7f 4f       	sbci	r23, 0xFF	; 255
     874:	42 e0       	ldi	r20, 0x02	; 2
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	0e 94 8f 06 	call	0xd1e	; 0xd1e <chb_eeprom_read>
    return *(U16 *)addr;
}
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	9a 81       	ldd	r25, Y+2	; 0x02
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <chb_tx>:
    Load the data into the fifo, initiate a transmission attempt,
    and return the status of the transmission attempt.
*/
/**************************************************************************/
U8 chb_tx(U8 *hdr, U8 *data, U8 len)
{
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	0f 92       	push	r0
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	6c 01       	movw	r12, r24
     8a4:	8b 01       	movw	r16, r22
     8a6:	f4 2e       	mov	r15, r20
    U8 state = chb_get_state();
     8a8:	0e 94 76 02 	call	0x4ec	; 0x4ec <chb_get_state>
    pcb_t *pcb = chb_get_pcb();
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	0e 94 49 01 	call	0x292	; 0x292 <chb_get_pcb>
     8b2:	5c 01       	movw	r10, r24

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
     8b4:	29 81       	ldd	r18, Y+1	; 0x01
     8b6:	22 30       	cpi	r18, 0x02	; 2
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <chb_tx+0x6e>
     8ba:	22 31       	cpi	r18, 0x12	; 18
     8bc:	e9 f0       	breq	.+58     	; 0x8f8 <chb_tx+0x6e>
    {
        return RADIO_WRONG_STATE;
    }

    // TODO: check why we need to transition to the off state before we go to tx_aret_on
    chb_set_state(CHB_TRX_OFF);
     8be:	88 e0       	ldi	r24, 0x08	; 8
     8c0:	0e 94 ac 03 	call	0x758	; 0x758 <chb_set_state>
    chb_set_state(CHB_TX_ARET_ON);
     8c4:	89 e1       	ldi	r24, 0x19	; 25
     8c6:	0e 94 ac 03 	call	0x758	; 0x758 <chb_set_state>

    // TODO: try and start the frame transmission by writing TX_START command instead of toggling
    // sleep pin...i just feel like it's kind of weird...

    // write frame to buffer. first write header into buffer (add 1 for len byte), then data. 
    chb_frame_write(hdr, CHB_HDR_SZ + 1, data, len);
     8ca:	c6 01       	movw	r24, r12
     8cc:	6a e0       	ldi	r22, 0x0A	; 10
     8ce:	a8 01       	movw	r20, r16
     8d0:	2f 2d       	mov	r18, r15
     8d2:	0e 94 12 03 	call	0x624	; 0x624 <chb_frame_write>

    //Do frame transmission. 
    chb_reg_read_mod_write(TRX_STATE, CMD_TX_START, 0x1F);
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	62 e0       	ldi	r22, 0x02	; 2
     8da:	4f e1       	ldi	r20, 0x1F	; 31
     8dc:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>

    // wait for the transmission to end, signalled by the TRX END flag
    while (!pcb->tx_end);
     8e0:	f5 01       	movw	r30, r10
     8e2:	84 81       	ldd	r24, Z+4	; 0x04
     8e4:	88 23       	and	r24, r24
     8e6:	e1 f3       	breq	.-8      	; 0x8e0 <chb_tx+0x56>
    pcb->tx_end = false;
     8e8:	14 82       	std	Z+4, r1	; 0x04

*/
/**************************************************************************/
static U8 chb_get_status()
{
    return chb_reg_read(TRX_STATE) >> CHB_TRAC_STATUS_POS;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
     8f0:	82 95       	swap	r24
     8f2:	86 95       	lsr	r24
     8f4:	87 70       	andi	r24, 0x07	; 7
    // wait for the transmission to end, signalled by the TRX END flag
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <chb_tx+0x70>
    U8 state = chb_get_state();
    pcb_t *pcb = chb_get_pcb();

    if ((state == CHB_BUSY_TX) || (state == CHB_BUSY_TX_ARET))
    {
        return RADIO_WRONG_STATE;
     8f8:	84 e4       	ldi	r24, 0x44	; 68
    while (!pcb->tx_end);
    pcb->tx_end = false;

    // check the status of the transmission
    return chb_get_status();
}
     8fa:	0f 90       	pop	r0
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	bf 90       	pop	r11
     90c:	af 90       	pop	r10
     90e:	08 95       	ret

00000910 <chb_sleep>:
    Enable or disable the radio's sleep mode.
*/
/**************************************************************************/
void chb_sleep(U8 enb)
{
    if (enb)
     910:	88 23       	and	r24, r24
     912:	49 f0       	breq	.+18     	; 0x926 <chb_sleep+0x16>
    {
        // first we need to go to TRX OFF state
        chb_set_state(CHB_TRX_OFF);
     914:	88 e0       	ldi	r24, 0x08	; 8
     916:	0e 94 ac 03 	call	0x758	; 0x758 <chb_set_state>

        // set the SLPTR pin
        CHB_SLPTR_PORT |= _BV(CHB_SLPTR_PIN);
     91a:	80 91 64 06 	lds	r24, 0x0664
     91e:	82 60       	ori	r24, 0x02	; 2
     920:	80 93 64 06 	sts	0x0664, r24
     924:	08 95       	ret
    }
    else
    {
        // make sure the SLPTR pin is low first
        CHB_SLPTR_PORT &= ~(_BV(CHB_SLPTR_PIN));
     926:	80 91 64 06 	lds	r24, 0x0664
     92a:	8d 7f       	andi	r24, 0xFD	; 253
     92c:	80 93 64 06 	sts	0x0664, r24
     930:	80 e5       	ldi	r24, 0x50	; 80
     932:	8a 95       	dec	r24
     934:	f1 f7       	brne	.-4      	; 0x932 <chb_sleep+0x22>

        // we need to allow some time for the PLL to lock
        _delay_us(TIME_SLEEP_TO_TRX_OFF);

        // Turn the transceiver back on
        chb_set_state(RX_STATE);
     936:	86 e1       	ldi	r24, 0x16	; 22
     938:	0e 94 ac 03 	call	0x758	; 0x758 <chb_set_state>
     93c:	08 95       	ret

0000093e <chb_drvr_init>:
/*!

*/
/**************************************************************************/
void chb_drvr_init()
{
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	ea 97       	sbiw	r28, 0x3a	; 58
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	de bf       	out	0x3e, r29	; 62
    // config SPI for at86rf230 access
    chb_spi_init();
     950:	0e 94 c7 06 	call	0xd8e	; 0xd8e <chb_spi_init>
	//SPIDInit(SPI_MODE0_bm);
	//RadioCS(FALSE);
    // configure IOs
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
     954:	80 91 60 06 	lds	r24, 0x0660
     958:	82 60       	ori	r24, 0x02	; 2
     95a:	80 93 60 06 	sts	0x0660, r24
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));
     95e:	80 91 60 06 	lds	r24, 0x0660
     962:	81 60       	ori	r24, 0x01	; 1
     964:	80 93 60 06 	sts	0x0660, r24
static void chb_radio_init()
{
    U8 ieee_addr[8];

    // reset chip
    chb_reset();
     968:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <chb_reset>

    // disable intps while we config the radio
    chb_reg_write(IRQ_MASK, 0);
     96c:	8e e0       	ldi	r24, 0x0E	; 14
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	0e 94 ab 02 	call	0x556	; 0x556 <chb_reg_write>

    // force transceiver off while we configure the intps
    chb_reg_read_mod_write(TRX_STATE, CMD_FORCE_TRX_OFF, 0x1F);
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	63 e0       	ldi	r22, 0x03	; 3
     978:	4f e1       	ldi	r20, 0x1F	; 31
     97a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>

    // make sure the transceiver is in the off state before proceeding
    while ((chb_reg_read(TRX_STATUS) & 0x1f) != CHB_TRX_OFF);
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
     984:	8f 71       	andi	r24, 0x1F	; 31
     986:	88 30       	cpi	r24, 0x08	; 8
     988:	d1 f7       	brne	.-12     	; 0x97e <chb_drvr_init+0x40>
    //chb_ret_write(CSMA_SEED0, CHB_CSMA_SEED0);     
    //chb_reg_read_mod_write(PHY_CC_CCA, CHB_CCA_MODE << CHB_CCA_MODE_POS,0x3 << CHB_CCA_MODE_POS);
    //chb_reg_write(CCA_THRES, CHB_CCA_ED_THRES);

    // set frame version that we'll accept
    chb_reg_read_mod_write(CSMA_SEED_1, CHB_FRM_VER << CHB_FVN_POS, 3 << CHB_FVN_POS);
     98a:	8e e2       	ldi	r24, 0x2E	; 46
     98c:	60 e4       	ldi	r22, 0x40	; 64
     98e:	40 ec       	ldi	r20, 0xC0	; 192
     990:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>

    // set interrupt mask
    // re-enable intps while we config the radio
    chb_reg_write(IRQ_MASK, (1<<IRQ_RX_START) | (1<<IRQ_TRX_END));
     994:	8e e0       	ldi	r24, 0x0E	; 14
     996:	6c e0       	ldi	r22, 0x0C	; 12
     998:	0e 94 ab 02 	call	0x556	; 0x556 <chb_reg_write>

    #if (CHB_PROMISCUOUS == 0)
    // set autocrc mode
    chb_reg_read_mod_write(TRX_CTRL_1, 1 << CHB_AUTO_CRC_POS, 1 << CHB_AUTO_CRC_POS);
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	60 e2       	ldi	r22, 0x20	; 32
     9a0:	40 e2       	ldi	r20, 0x20	; 32
     9a2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <chb_reg_read_mod_write>
    #endif

    // set up default phy modulation and data rate - OQPSK, 250 kbps, 915 MHz
    chb_set_mode(CHB_INIT_MODE);
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <chb_set_mode>

    chb_set_channel(CHB_CHANNEL);
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	0e 94 85 03 	call	0x70a	; 0x70a <chb_set_channel>

    // set fsm state
    // put trx in rx auto ack mode
    chb_set_state(RX_STATE);
     9b2:	86 e1       	ldi	r24, 0x16	; 22
     9b4:	0e 94 ac 03 	call	0x758	; 0x758 <chb_set_state>

    // set pan ID
    chb_reg_write16(PAN_ID_0, CHB_PAN_ID);
     9b8:	82 e2       	ldi	r24, 0x22	; 34
     9ba:	64 e3       	ldi	r22, 0x34	; 52
     9bc:	72 e1       	ldi	r23, 0x12	; 18
     9be:	0e 94 ce 02 	call	0x59c	; 0x59c <chb_reg_write16>

    // set short addr
    // NOTE: Possibly get this from EEPROM
    chb_reg_write16(SHORT_ADDR_0, chb_get_short_addr());
     9c2:	0e 94 2f 04 	call	0x85e	; 0x85e <chb_get_short_addr>
     9c6:	bc 01       	movw	r22, r24
     9c8:	80 e2       	ldi	r24, 0x20	; 32
     9ca:	0e 94 ce 02 	call	0x59c	; 0x59c <chb_reg_write16>

    // set long addr
    // NOTE: Possibly get this from EEPROM
    chb_get_ieee_addr(ieee_addr);
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	0e 94 00 04 	call	0x800	; 0x800 <chb_get_ieee_addr>
    chb_reg_write64(IEEE_ADDR_0, ieee_addr);
     9d6:	84 e2       	ldi	r24, 0x24	; 36
     9d8:	be 01       	movw	r22, r28
     9da:	6f 5f       	subi	r22, 0xFF	; 255
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <chb_reg_write64>
    // set power to 0 dBm if CC1190 is being used. 
    chb_set_pwr(0x24);   
#endif

    // enable mcu intp pin
    CFG_CHB_INTP_RISE_EDGE();
     9e2:	80 91 72 06 	lds	r24, 0x0672
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	80 93 72 06 	sts	0x0672, r24
     9ec:	80 91 69 06 	lds	r24, 0x0669
     9f0:	82 60       	ori	r24, 0x02	; 2
     9f2:	80 93 69 06 	sts	0x0669, r24
     9f6:	80 91 6a 06 	lds	r24, 0x066A
     9fa:	84 60       	ori	r24, 0x04	; 4
     9fc:	80 93 6a 06 	sts	0x066A, r24
	PMIC.CTRL = 0x07;	//enable interrupts on MCU
     a00:	87 e0       	ldi	r24, 0x07	; 7
     a02:	e0 ea       	ldi	r30, 0xA0	; 160
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	82 83       	std	Z+2, r24	; 0x02

    if (chb_get_state() != RX_STATE)
     a08:	0e 94 76 02 	call	0x4ec	; 0x4ec <chb_get_state>
     a0c:	86 31       	cpi	r24, 0x16	; 22
     a0e:	91 f0       	breq	.+36     	; 0xa34 <chb_drvr_init+0xf6>
    {
        // ERROR occurred initializing the radio. Print out error message.
        char buf[50];

        // grab the error message from flash & print it out
        strcpy_P(buf, chb_err_init);
     a10:	8e 01       	movw	r16, r28
     a12:	07 5f       	subi	r16, 0xF7	; 247
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	c8 01       	movw	r24, r16
     a18:	68 ee       	ldi	r22, 0xE8	; 232
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	0e 94 92 31 	call	0x6324	; 0x6324 <strcpy_P>
        printf(buf);
     a20:	0f 92       	push	r0
     a22:	0f 92       	push	r0
     a24:	ed b7       	in	r30, 0x3d	; 61
     a26:	fe b7       	in	r31, 0x3e	; 62
     a28:	01 83       	std	Z+1, r16	; 0x01
     a2a:	12 83       	std	Z+2, r17	; 0x02
     a2c:	0e 94 ab 31 	call	0x6356	; 0x6356 <printf>
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
    CHB_SLPTR_DDIR |= (_BV(CHB_SLPTR_PIN));
    CHB_RST_DDIR |= (_BV(CHB_RST_PIN));

    // config radio
    chb_radio_init();
}
     a34:	ea 96       	adiw	r28, 0x3a	; 58
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <__vector_64>:
/*!

*/
/**************************************************************************/
ISR(CHB_RADIO_IRQ)
{
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	0b b6       	in	r0, 0x3b	; 59
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	6f 92       	push	r6
     a54:	7f 92       	push	r7
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	2f 93       	push	r18
     a6a:	3f 93       	push	r19
     a6c:	4f 93       	push	r20
     a6e:	5f 93       	push	r21
     a70:	6f 93       	push	r22
     a72:	7f 93       	push	r23
     a74:	8f 93       	push	r24
     a76:	9f 93       	push	r25
     a78:	af 93       	push	r26
     a7a:	bf 93       	push	r27
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	e2 97       	sbiw	r28, 0x32	; 50
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	de bf       	out	0x3e, r29	; 62
    U8 dummy, state, intp_src = 0;
    pcb_t *pcb = chb_get_pcb();
     a8e:	0e 94 49 01 	call	0x292	; 0x292 <chb_get_pcb>
     a92:	7c 01       	movw	r14, r24

    CHB_ENTER_CRIT();
     a94:	8f b7       	in	r24, 0x3f	; 63
     a96:	80 93 bf 21 	sts	0x21BF, r24
     a9a:	f8 94       	cli

    /*Read Interrupt source.*/
    RadioCS(TRUE);   
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>

    /*Send Register address and read register content.*/
    dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
     aa2:	8f e8       	ldi	r24, 0x8F	; 143
     aa4:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
    intp_src = SPID_write(0);
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
     aae:	18 2f       	mov	r17, r24

    RadioCS(FALSE);
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
     ab6:	80 e8       	ldi	r24, 0x80	; 128
     ab8:	68 2e       	mov	r6, r24
     aba:	71 2c       	mov	r7, r1

            // Increment the overflow stat
            pcb->overflow++;

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
     abc:	5e 01       	movw	r10, r28
     abe:	08 94       	sec
     ac0:	a1 1c       	adc	r10, r1
     ac2:	b1 1c       	adc	r11, r1
    dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    intp_src = SPID_write(0);

    RadioCS(FALSE);

    while (intp_src)
     ac4:	9d c0       	rjmp	.+314    	; 0xc00 <__vector_64+0x1bc>
    {
        /*Handle the incomming interrupt. Prioritized.*/
        if ((intp_src & CHB_IRQ_RX_START_MASK))
     ac6:	12 ff       	sbrs	r17, 2
     ac8:	02 c0       	rjmp	.+4      	; 0xace <__vector_64+0x8a>
        {
            intp_src &= ~CHB_IRQ_RX_START_MASK;
     aca:	1b 7f       	andi	r17, 0xFB	; 251
     acc:	99 c0       	rjmp	.+306    	; 0xc00 <__vector_64+0x1bc>
        }
        else if (intp_src & CHB_IRQ_TRX_END_MASK)
     ace:	13 ff       	sbrs	r17, 3
     ad0:	7e c0       	rjmp	.+252    	; 0xbce <__vector_64+0x18a>
        {
            state = chb_get_state();
     ad2:	0e 94 76 02 	call	0x4ec	; 0x4ec <chb_get_state>

            if ((state == CHB_RX_ON) || (state == CHB_RX_AACK_ON) || (state == CHB_BUSY_RX_AACK))
     ad6:	86 30       	cpi	r24, 0x06	; 6
     ad8:	29 f0       	breq	.+10     	; 0xae4 <__vector_64+0xa0>
     ada:	86 31       	cpi	r24, 0x16	; 22
     adc:	19 f0       	breq	.+6      	; 0xae4 <__vector_64+0xa0>
     ade:	81 31       	cpi	r24, 0x11	; 17
     ae0:	09 f0       	breq	.+2      	; 0xae4 <__vector_64+0xa0>
     ae2:	6b c0       	rjmp	.+214    	; 0xbba <__vector_64+0x176>
            {
                // get the ed measurement
                pcb->ed = chb_reg_read(PHY_ED_LEVEL);
     ae4:	87 e0       	ldi	r24, 0x07	; 7
     ae6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
     aea:	f7 01       	movw	r30, r14
     aec:	82 8b       	std	Z+18, r24	; 0x12

                // get the crc
                pcb->crc = (chb_reg_read(PHY_RSSI) & (1<<7)) ? 1 : 0;
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
     af4:	88 1f       	adc	r24, r24
     af6:	88 27       	eor	r24, r24
     af8:	88 1f       	adc	r24, r24
     afa:	f7 01       	movw	r30, r14
     afc:	83 8b       	std	Z+19, r24	; 0x13

                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc)
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <__vector_64+0xc0>
     b02:	5e c0       	rjmp	.+188    	; 0xbc0 <__vector_64+0x17c>
/**************************************************************************/
static void chb_frame_read()
{
    U8 i, len, data;

    CHB_ENTER_CRIT();
     b04:	8f b7       	in	r24, 0x3f	; 63
     b06:	80 93 bf 21 	sts	0x21BF, r24
     b0a:	f8 94       	cli
    RadioCS(TRUE);
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>

    /*Send frame read command and read the length.*/
    SPID_write(CHB_SPI_CMD_FR);
     b12:	80 e2       	ldi	r24, 0x20	; 32
     b14:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
    len = SPID_write(0);
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
     b1e:	08 2f       	mov	r16, r24

    /*Check for correct frame length.*/
    if ((len >= CHB_MIN_FRAME_LENGTH) && (len <= CHB_MAX_FRAME_LENGTH))
     b20:	83 50       	subi	r24, 0x03	; 3
     b22:	8d 37       	cpi	r24, 0x7D	; 125
     b24:	b0 f5       	brcc	.+108    	; 0xb92 <__vector_64+0x14e>
    {
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
     b26:	0e 94 59 02 	call	0x4b2	; 0x4b2 <chb_buf_get_len>
     b2a:	20 2f       	mov	r18, r16
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	a3 01       	movw	r20, r6
     b30:	48 1b       	sub	r20, r24
     b32:	51 09       	sbc	r21, r1
     b34:	24 17       	cp	r18, r20
     b36:	35 07       	cpc	r19, r21
     b38:	6c f4       	brge	.+26     	; 0xb54 <__vector_64+0x110>
        {
            chb_buf_write(len);
     b3a:	80 2f       	mov	r24, r16
     b3c:	0e 94 33 02 	call	0x466	; 0x466 <chb_buf_write>
            
            for (i=0; i<len; i++)
     b40:	cc 24       	eor	r12, r12
            {
                data = SPID_write(0);
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
                chb_buf_write(data);
     b48:	0e 94 33 02 	call	0x466	; 0x466 <chb_buf_write>
        // check to see if there is room to write the frame in the buffer. if not, then drop it
        if (len < (CHB_BUF_SZ - chb_buf_get_len()))
        {
            chb_buf_write(len);
            
            for (i=0; i<len; i++)
     b4c:	c3 94       	inc	r12
     b4e:	c0 16       	cp	r12, r16
     b50:	c1 f7       	brne	.-16     	; 0xb42 <__vector_64+0xfe>
     b52:	1f c0       	rjmp	.+62     	; 0xb92 <__vector_64+0x14e>
            }
        }
        else
        {
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
     b54:	0e 94 49 01 	call	0x292	; 0x292 <chb_get_pcb>
     b58:	6c 01       	movw	r12, r24
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
     b5a:	99 24       	eor	r9, r9
            {
                data = SPID_write(0);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SPID_write>
            // we've overflowed the buffer. toss the data and do some housekeeping
            pcb_t *pcb = chb_get_pcb();
            char buf[50];

            // read out the data and throw it away
            for (i=0; i<len; i++)
     b62:	93 94       	inc	r9
     b64:	90 16       	cp	r9, r16
     b66:	d1 f7       	brne	.-12     	; 0xb5c <__vector_64+0x118>
            {
                data = SPID_write(0);
            }

            // Increment the overflow stat
            pcb->overflow++;
     b68:	f6 01       	movw	r30, r12
     b6a:	85 85       	ldd	r24, Z+13	; 0x0d
     b6c:	96 85       	ldd	r25, Z+14	; 0x0e
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	85 87       	std	Z+13, r24	; 0x0d
     b72:	96 87       	std	Z+14, r25	; 0x0e

            // grab the message from flash & print it out
            strcpy_P(buf, chb_err_overflow);
     b74:	c5 01       	movw	r24, r10
     b76:	68 e0       	ldi	r22, 0x08	; 8
     b78:	72 e0       	ldi	r23, 0x02	; 2
     b7a:	0e 94 92 31 	call	0x6324	; 0x6324 <strcpy_P>
            printf(buf);
     b7e:	0f 92       	push	r0
     b80:	0f 92       	push	r0
     b82:	ed b7       	in	r30, 0x3d	; 61
     b84:	fe b7       	in	r31, 0x3e	; 62
     b86:	a1 82       	std	Z+1, r10	; 0x01
     b88:	b2 82       	std	Z+2, r11	; 0x02
     b8a:	0e 94 ab 31 	call	0x6356	; 0x6356 <printf>
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
        }
    }

    RadioCS(FALSE);
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <RadioCS>
    CHB_LEAVE_CRIT();
     b98:	80 91 bf 21 	lds	r24, 0x21BF
     b9c:	8f bf       	out	0x3f, r24	; 63
     b9e:	78 94       	sei
                // if the crc is not valid, then do not read the frame and set the rx flag
                if (pcb->crc)
                {
                    // get the data
                    chb_frame_read();
                    pcb->rcvd_xfers++;
     ba0:	f7 01       	movw	r30, r14
     ba2:	85 81       	ldd	r24, Z+5	; 0x05
     ba4:	96 81       	ldd	r25, Z+6	; 0x06
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	85 83       	std	Z+5, r24	; 0x05
     baa:	96 83       	std	Z+6, r25	; 0x06
                    pcb->data_rcv = true;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	83 83       	std	Z+3, r24	; 0x03
					chb_read(FRAMReadBuffer);				//read the data into the FRAM buffer right away --vlad
     bb0:	88 ec       	ldi	r24, 0xC8	; 200
     bb2:	93 e2       	ldi	r25, 0x23	; 35
     bb4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <chb_read>
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <__vector_64+0x17c>
                }
            }
            else
            {
                pcb->tx_end = true;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	f7 01       	movw	r30, r14
     bbe:	84 83       	std	Z+4, r24	; 0x04
            }
            intp_src &= ~CHB_IRQ_TRX_END_MASK;
     bc0:	17 7f       	andi	r17, 0xF7	; 247
            while (chb_set_state(RX_STATE) != RADIO_SUCCESS);
     bc2:	86 e1       	ldi	r24, 0x16	; 22
     bc4:	0e 94 ac 03 	call	0x758	; 0x758 <chb_set_state>
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	d9 f7       	brne	.-10     	; 0xbc2 <__vector_64+0x17e>
     bcc:	19 c0       	rjmp	.+50     	; 0xc00 <__vector_64+0x1bc>
        }
        else if (intp_src & CHB_IRQ_TRX_UR_MASK)
     bce:	16 ff       	sbrs	r17, 6
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <__vector_64+0x19e>
        {
            intp_src &= ~CHB_IRQ_TRX_UR_MASK;
     bd2:	1f 7b       	andi	r17, 0xBF	; 191
            pcb->underrun++;
     bd4:	f7 01       	movw	r30, r14
     bd6:	87 85       	ldd	r24, Z+15	; 0x0f
     bd8:	90 89       	ldd	r25, Z+16	; 0x10
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	87 87       	std	Z+15, r24	; 0x0f
     bde:	90 8b       	std	Z+16, r25	; 0x10
     be0:	0f c0       	rjmp	.+30     	; 0xc00 <__vector_64+0x1bc>
        }
        else if (intp_src & CHB_IRQ_PLL_UNLOCK_MASK)
     be2:	11 ff       	sbrs	r17, 1
     be4:	02 c0       	rjmp	.+4      	; 0xbea <__vector_64+0x1a6>
        {
            intp_src &= ~CHB_IRQ_PLL_UNLOCK_MASK;
     be6:	1d 7f       	andi	r17, 0xFD	; 253
     be8:	0b c0       	rjmp	.+22     	; 0xc00 <__vector_64+0x1bc>
        }
        else if (intp_src & CHB_IRQ_PLL_LOCK_MASK)
     bea:	10 ff       	sbrs	r17, 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <__vector_64+0x1ae>
        {
            intp_src &= ~CHB_IRQ_PLL_LOCK_MASK;
     bee:	1e 7f       	andi	r17, 0xFE	; 254
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <__vector_64+0x1bc>
        }
        else if (intp_src & CHB_IRQ_BAT_LOW_MASK)
     bf2:	17 ff       	sbrs	r17, 7
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__vector_64+0x1bc>
        {
            intp_src &= ~CHB_IRQ_BAT_LOW_MASK;
     bf6:	1f 77       	andi	r17, 0x7F	; 127
            pcb->battlow++;
     bf8:	f7 01       	movw	r30, r14
     bfa:	81 89       	ldd	r24, Z+17	; 0x11
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	81 8b       	std	Z+17, r24	; 0x11
    dummy = SPID_write(IRQ_STATUS | CHB_SPI_CMD_RR);
    intp_src = SPID_write(0);

    RadioCS(FALSE);

    while (intp_src)
     c00:	11 23       	and	r17, r17
     c02:	09 f0       	breq	.+2      	; 0xc06 <__vector_64+0x1c2>
     c04:	60 cf       	rjmp	.-320    	; 0xac6 <__vector_64+0x82>
        }
        else
        {
        }
    }
    CHB_LEAVE_CRIT();
     c06:	80 91 bf 21 	lds	r24, 0x21BF
     c0a:	8f bf       	out	0x3f, r24	; 63
     c0c:	78 94       	sei
	chb_reg_read(IRQ_STATUS);		//clear any interrupts that might have been seen when handling this interrupt
     c0e:	8f e0       	ldi	r24, 0x0F	; 15
     c10:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <chb_reg_read>
}
     c14:	e2 96       	adiw	r28, 0x32	; 50
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	bf 90       	pop	r11
     c44:	af 90       	pop	r10
     c46:	9f 90       	pop	r9
     c48:	7f 90       	pop	r7
     c4a:	6f 90       	pop	r6
     c4c:	0f 90       	pop	r0
     c4e:	0b be       	out	0x3b, r0	; 59
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <chb_eeprom_write>:
/*!

*/
/**************************************************************************/
void chb_eeprom_write(U16 addr, U8 *buf, U16 size)
{
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
     c6c:	80 91 cc 01 	lds	r24, 0x01CC
     c70:	87 7f       	andi	r24, 0xF7	; 247
     c72:	e0 ec       	ldi	r30, 0xC0	; 192
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	84 87       	std	Z+12, r24	; 0x0c

    // Write bytes
    for(U8 i=0; i<size; i++)
     c78:	20 e0       	ldi	r18, 0x00	; 0
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     c7a:	80 ec       	ldi	r24, 0xC0	; 192
     c7c:	e8 2e       	mov	r14, r24
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	f8 2e       	mov	r15, r24

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     c82:	36 e3       	ldi	r19, 0x36	; 54
     c84:	d3 2e       	mov	r13, r19
        NVM_EXEC();
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
     c86:	a3 e3       	ldi	r26, 0x33	; 51
     c88:	ca 2e       	mov	r12, r26

    // load the data to write
    NVM.DATA0 = value;

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     c8a:	35 e3       	ldi	r19, 0x35	; 53
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
     c8c:	39 c0       	rjmp	.+114    	; 0xd00 <chb_eeprom_write+0xa6>
    {
        chb_eep_write_byte(addr+i, buf[i]);
     c8e:	8c 01       	movw	r16, r24
     c90:	0c 0f       	add	r16, r28
     c92:	1d 1f       	adc	r17, r29
     c94:	86 0f       	add	r24, r22
     c96:	97 1f       	adc	r25, r23
     c98:	dc 01       	movw	r26, r24
     c9a:	8c 91       	ld	r24, X
/**************************************************************************/
static void chb_eep_write_byte( U16 addr, U8 value )
{
    // flush the eeprom buffers
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     c9c:	90 91 cf 01 	lds	r25, 0x01CF
     ca0:	97 fd       	sbrc	r25, 7
     ca2:	fc cf       	rjmp	.-8      	; 0xc9c <chb_eeprom_write+0x42>

    /* Flush EEPROM page buffer if necessary. */
    if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     ca4:	90 91 cf 01 	lds	r25, 0x01CF
     ca8:	91 ff       	sbrs	r25, 1
     caa:	12 c0       	rjmp	.+36     	; 0xcd0 <chb_eeprom_write+0x76>
        NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     cac:	d7 01       	movw	r26, r14
     cae:	1a 96       	adiw	r26, 0x0a	; 10
     cb0:	dc 92       	st	X, r13
     cb2:	1a 97       	sbiw	r26, 0x0a	; 10
        NVM_EXEC();
     cb4:	ef 93       	push	r30
     cb6:	ff 93       	push	r31
     cb8:	0f 93       	push	r16
     cba:	2f 93       	push	r18
     cbc:	eb ec       	ldi	r30, 0xCB	; 203
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	08 ed       	ldi	r16, 0xD8	; 216
     cc2:	21 e0       	ldi	r18, 0x01	; 1
     cc4:	04 bf       	out	0x34, r16	; 52
     cc6:	20 83       	st	Z, r18
     cc8:	2f 91       	pop	r18
     cca:	0f 91       	pop	r16
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
    }

    // tell the non-volatile regs that we're going to load the eeprom addr
    NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
     cd0:	c2 86       	std	Z+10, r12	; 0x0a

    // load the address
    NVM.ADDR0 = addr & 0xFF;
     cd2:	00 93 c0 01 	sts	0x01C0, r16
    NVM.ADDR1 = (addr >> 8) & 0x1F;
     cd6:	91 2f       	mov	r25, r17
     cd8:	9f 71       	andi	r25, 0x1F	; 31
     cda:	91 83       	std	Z+1, r25	; 0x01
    NVM.ADDR2 = 0x00;
     cdc:	12 82       	std	Z+2, r1	; 0x02

    // load the data to write
    NVM.DATA0 = value;
     cde:	84 83       	std	Z+4, r24	; 0x04

    // execute the eeprom write command
    NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     ce0:	32 87       	std	Z+10, r19	; 0x0a
    NVM_EXEC();
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
     ce6:	0f 93       	push	r16
     ce8:	2f 93       	push	r18
     cea:	eb ec       	ldi	r30, 0xCB	; 203
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	08 ed       	ldi	r16, 0xD8	; 216
     cf0:	21 e0       	ldi	r18, 0x01	; 1
     cf2:	04 bf       	out	0x34, r16	; 52
     cf4:	20 83       	st	Z, r18
     cf6:	2f 91       	pop	r18
     cf8:	0f 91       	pop	r16
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    // Write bytes
    for(U8 i=0; i<size; i++)
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	82 2f       	mov	r24, r18
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	84 17       	cp	r24, r20
     d06:	95 07       	cpc	r25, r21
     d08:	08 f4       	brcc	.+2      	; 0xd0c <chb_eeprom_write+0xb2>
     d0a:	c1 cf       	rjmp	.-126    	; 0xc8e <chb_eeprom_write+0x34>
    {
        chb_eep_write_byte(addr+i, buf[i]);
    }
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	08 95       	ret

00000d1e <chb_eeprom_read>:
/*!

*/
/**************************************************************************/
void chb_eeprom_read(U16 addr, U8 *buf, U16 size)
{
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	9c 01       	movw	r18, r24
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;
     d26:	80 91 cc 01 	lds	r24, 0x01CC
     d2a:	87 7f       	andi	r24, 0xF7	; 247
     d2c:	e0 ec       	ldi	r30, 0xC0	; 192
     d2e:	f1 e0       	ldi	r31, 0x01	; 1
     d30:	84 87       	std	Z+12, r24	; 0x0c

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
     d32:	c0 e0       	ldi	r28, 0x00	; 0
    NVM.ADDR0 = addr & 0xFF;
    NVM.ADDR1 = (addr >> 8) & 0x1F;
    NVM.ADDR2 = 0x00;

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
     d34:	d6 e0       	ldi	r29, 0x06	; 6
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
     d36:	22 c0       	rjmp	.+68     	; 0xd7c <chb_eeprom_read+0x5e>
    {
        buf[i] = chb_eep_read_byte(addr+i);
     d38:	db 01       	movw	r26, r22
     d3a:	a8 0f       	add	r26, r24
     d3c:	b9 1f       	adc	r27, r25
     d3e:	82 0f       	add	r24, r18
     d40:	93 1f       	adc	r25, r19
*/
/**************************************************************************/
static U8 chb_eep_read_byte(U16 addr)
{
    /* Wait until NVM is not busy. */
    while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     d42:	10 91 cf 01 	lds	r17, 0x01CF
     d46:	17 fd       	sbrc	r17, 7
     d48:	fc cf       	rjmp	.-8      	; 0xd42 <chb_eeprom_read+0x24>

    /* Set address to read from. */
    NVM.ADDR0 = addr & 0xFF;
     d4a:	80 93 c0 01 	sts	0x01C0, r24
    NVM.ADDR1 = (addr >> 8) & 0x1F;
     d4e:	89 2f       	mov	r24, r25
     d50:	8f 71       	andi	r24, 0x1F	; 31
     d52:	81 83       	std	Z+1, r24	; 0x01
    NVM.ADDR2 = 0x00;
     d54:	12 82       	std	Z+2, r1	; 0x02

    /* Issue EEPROM Read command. */
    NVM.CMD = NVM_CMD_READ_EEPROM_gc;
     d56:	d2 87       	std	Z+10, r29	; 0x0a
    NVM_EXEC();
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
     d5c:	0f 93       	push	r16
     d5e:	2f 93       	push	r18
     d60:	eb ec       	ldi	r30, 0xCB	; 203
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	08 ed       	ldi	r16, 0xD8	; 216
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	04 bf       	out	0x34, r16	; 52
     d6a:	20 83       	st	Z, r18
     d6c:	2f 91       	pop	r18
     d6e:	0f 91       	pop	r16
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30

    return NVM.DATA0;
     d74:	80 91 c4 01 	lds	r24, 0x01C4
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
    {
        buf[i] = chb_eep_read_byte(addr+i);
     d78:	8c 93       	st	X, r24
{
    // disable memory mapping
    NVM.CTRLB &= ~NVM_EEMAPEN_bm;

    /* Write bytes.*/
    for(U8 i=0; i<size; i++)
     d7a:	cf 5f       	subi	r28, 0xFF	; 255
     d7c:	8c 2f       	mov	r24, r28
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	84 17       	cp	r24, r20
     d82:	95 07       	cpc	r25, r21
     d84:	c8 f2       	brcs	.-78     	; 0xd38 <chb_eeprom_read+0x1a>
    {
        buf[i] = chb_eep_read_byte(addr+i);
    }
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	08 95       	ret

00000d8e <chb_spi_init>:

void chb_spi_init()
{
    // configure the SPI slave_select, spi clk, and mosi pins as output. the miso pin
    // is cleared since its an input.
    CHB_SPI_DDIR |= (1<<CHB_SSPIN) | (1<<CHB_MOSI) | (1<<CHB_SCK);
     d8e:	e0 e6       	ldi	r30, 0x60	; 96
     d90:	f6 e0       	ldi	r31, 0x06	; 6
     d92:	80 81       	ld	r24, Z
     d94:	80 6b       	ori	r24, 0xB0	; 176
     d96:	80 83       	st	Z, r24
    CHB_SPI_PORT |= (1<<CHB_SSPIN);
     d98:	e4 e6       	ldi	r30, 0x64	; 100
     d9a:	f6 e0       	ldi	r31, 0x06	; 6
     d9c:	80 81       	ld	r24, Z
     d9e:	80 61       	ori	r24, 0x10	; 16
     da0:	80 83       	st	Z, r24

    // set to master mode
    // set the clock freq to fck/16
    CHB_CTRL |= (1<<SPI_MASTER_bp) | (1<<SPI_ENABLE_bp) | (1<<SPI_PRESCALER_gp);
     da2:	a0 ec       	ldi	r26, 0xC0	; 192
     da4:	b9 e0       	ldi	r27, 0x09	; 9
     da6:	8c 91       	ld	r24, X
     da8:	81 65       	ori	r24, 0x51	; 81
     daa:	8c 93       	st	X, r24

    // set the slave select to idle
    CHB_SPI_DISABLE();
     dac:	80 81       	ld	r24, Z
     dae:	80 61       	ori	r24, 0x10	; 16
     db0:	80 83       	st	Z, r24
}
     db2:	08 95       	ret

00000db4 <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
     db4:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
     dba:	84 81       	ldd	r24, Z+4	; 0x04
     dbc:	95 81       	ldd	r25, Z+5	; 0x05
     dbe:	86 1b       	sub	r24, r22
     dc0:	91 09       	sbc	r25, r1

	return answer;
}
     dc2:	08 95       	ret

00000dc4 <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
     dc4:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     dca:	84 81       	ldd	r24, Z+4	; 0x04
     dcc:	95 81       	ldd	r25, Z+5	; 0x05
     dce:	77 27       	eor	r23, r23
     dd0:	67 fd       	sbrc	r22, 7
     dd2:	70 95       	com	r23
     dd4:	86 1b       	sub	r24, r22
     dd6:	97 0b       	sbc	r25, r23

	return answer;
}
     dd8:	08 95       	ret

00000dda <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
     dda:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
     de0:	84 81       	ldd	r24, Z+4	; 0x04
     de2:	95 81       	ldd	r25, Z+5	; 0x05
}
     de4:	08 95       	ret

00000de6 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
     de6:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
     dec:	84 81       	ldd	r24, Z+4	; 0x04
}
     dee:	08 95       	ret

00000df0 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
     df0:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
     df6:	85 81       	ldd	r24, Z+5	; 0x05
}
     df8:	08 95       	ret

00000dfa <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
     dfa:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
     dfc:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
     dfe:	14 82       	std	Z+4, r1	; 0x04
     e00:	9a e2       	ldi	r25, 0x2A	; 42
     e02:	9a 95       	dec	r25
     e04:	f1 f7       	brne	.-4      	; 0xe02 <ADC_Wait_8MHz+0x8>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <ADC_Wait_8MHz+0xe>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
     e08:	84 83       	std	Z+4, r24	; 0x04
}
     e0a:	08 95       	ret

00000e0c <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
     e0c:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
     e0e:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	94 83       	std	Z+4, r25	; 0x04
     e14:	95 e5       	ldi	r25, 0x55	; 85
     e16:	9a 95       	dec	r25
     e18:	f1 f7       	brne	.-4      	; 0xe16 <ADC_Wait_32MHz+0xa>
     e1a:	00 00       	nop

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
     e1c:	84 83       	std	Z+4, r24	; 0x04
}
     e1e:	08 95       	ret

00000e20 <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     e20:	fb 01       	movw	r30, r22
    if (oversampling)
     e22:	44 23       	and	r20, r20
     e24:	c9 f0       	breq	.+50     	; 0xe58 <ADC_Offset_Get_Unsigned+0x38>
     e26:	24 e0       	ldi	r18, 0x04	; 4
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     e2e:	61 e0       	ldi	r22, 0x01	; 1
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     e30:	80 81       	ld	r24, Z
     e32:	80 68       	ori	r24, 0x80	; 128
     e34:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
     e36:	83 81       	ldd	r24, Z+3	; 0x03
     e38:	80 ff       	sbrs	r24, 0
     e3a:	fd cf       	rjmp	.-6      	; 0xe36 <ADC_Offset_Get_Unsigned+0x16>
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     e3c:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
     e3e:	84 81       	ldd	r24, Z+4	; 0x04
     e40:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
     e42:	48 0f       	add	r20, r24
     e44:	59 1f       	adc	r21, r25
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	30 40       	sbci	r19, 0x00	; 0
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
     e4a:	91 f7       	brne	.-28     	; 0xe30 <ADC_Offset_Get_Unsigned+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
     e4c:	ca 01       	movw	r24, r20
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	08 95       	ret
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
     e58:	80 81       	ld	r24, Z
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
     e5e:	83 81       	ldd	r24, Z+3	; 0x03
     e60:	80 ff       	sbrs	r24, 0
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <ADC_Offset_Get_Unsigned+0x3e>
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
     e68:	84 81       	ldd	r24, Z+4	; 0x04
     e6a:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
      
      return offset;
    }
}
     e6c:	08 95       	ret

00000e6e <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     e6e:	fb 01       	movw	r30, r22
    if (oversampling)
     e70:	44 23       	and	r20, r20
     e72:	d1 f0       	breq	.+52     	; 0xea8 <ADC_Offset_Get_Signed+0x3a>
     e74:	44 e0       	ldi	r20, 0x04	; 4
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     e7c:	61 e0       	ldi	r22, 0x01	; 1
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     e7e:	80 81       	ld	r24, Z
     e80:	80 68       	ori	r24, 0x80	; 128
     e82:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
     e84:	83 81       	ldd	r24, Z+3	; 0x03
     e86:	80 ff       	sbrs	r24, 0
     e88:	fd cf       	rjmp	.-6      	; 0xe84 <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     e8a:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     e8c:	84 81       	ldd	r24, Z+4	; 0x04
     e8e:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
     e90:	28 0f       	add	r18, r24
     e92:	39 1f       	adc	r19, r25
     e94:	41 50       	subi	r20, 0x01	; 1
     e96:	50 40       	sbci	r21, 0x00	; 0
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
     e98:	91 f7       	brne	.-28     	; 0xe7e <ADC_Offset_Get_Signed+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
     e9a:	c9 01       	movw	r24, r18
     e9c:	64 e0       	ldi	r22, 0x04	; 4
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
     ea4:	86 2f       	mov	r24, r22
     ea6:	08 95       	ret
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
     ea8:	80 81       	ld	r24, Z
     eaa:	80 68       	ori	r24, 0x80	; 128
     eac:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
     eae:	83 81       	ldd	r24, Z+3	; 0x03
     eb0:	80 ff       	sbrs	r24, 0
     eb2:	fd cf       	rjmp	.-6      	; 0xeae <ADC_Offset_Get_Signed+0x40>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     eb8:	84 81       	ldd	r24, Z+4	; 0x04
     eba:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
      
      return offset;
    }
}
     ebc:	08 95       	ret

00000ebe <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     ebe:	aa ec       	ldi	r26, 0xCA	; 202
     ec0:	b1 e0       	ldi	r27, 0x01	; 1
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
     ec6:	e8 2f       	mov	r30, r24
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     ecc:	1c 92       	st	X, r1

	return result;
}
     ece:	08 95       	ret

00000ed0 <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	c0 30       	cpi	r28, 0x00	; 0
     eda:	d8 07       	cpc	r29, r24
     edc:	31 f4       	brne	.+12     	; 0xeea <ADC_CalibrationValues_Load+0x1a>
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	0e 94 5f 07 	call	0xebe	; 0xebe <SP_ReadCalibrationByte>
     ee4:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
     ee6:	81 e2       	ldi	r24, 0x21	; 33
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <ADC_CalibrationValues_Load+0x24>
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
     eea:	84 e2       	ldi	r24, 0x24	; 36
     eec:	0e 94 5f 07 	call	0xebe	; 0xebe <SP_ReadCalibrationByte>
     ef0:	8c 87       	std	Y+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
     ef2:	85 e2       	ldi	r24, 0x25	; 37
     ef4:	0e 94 5f 07 	call	0xebe	; 0xebe <SP_ReadCalibrationByte>
     ef8:	8d 87       	std	Y+13, r24	; 0x0d
	}
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     f00:	0f 93       	push	r16
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     f0c:	2f b7       	in	r18, 0x3f	; 63
     f0e:	29 83       	std	Y+1, r18	; 0x01
     f10:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     f12:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     f14:	fc 01       	movw	r30, r24
     f16:	08 ed       	ldi	r16, 0xD8	; 216
     f18:	04 bf       	out	0x34, r16	; 52
     f1a:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	8f bf       	out	0x3f, r24	; 63
#endif
}
     f20:	0f 90       	pop	r0
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     f2a:	66 23       	and	r22, r22
     f2c:	11 f0       	breq	.+4      	; 0xf32 <CLKSYS_XOSC_Config+0x8>
     f2e:	90 e2       	ldi	r25, 0x20	; 32
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <CLKSYS_XOSC_Config+0xa>
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	84 2b       	or	r24, r20
     f36:	89 2b       	or	r24, r25
     f38:	e0 e5       	ldi	r30, 0x50	; 80
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     f3e:	08 95       	ret

00000f40 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     f40:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     f42:	68 2b       	or	r22, r24
     f44:	e0 e5       	ldi	r30, 0x50	; 80
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	65 83       	std	Z+5, r22	; 0x05
}
     f4a:	08 95       	ret

00000f4c <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     f4c:	e0 e5       	ldi	r30, 0x50	; 80
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	20 81       	ld	r18, Z
     f52:	98 2f       	mov	r25, r24
     f54:	90 95       	com	r25
     f56:	92 23       	and	r25, r18
     f58:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     f5a:	90 81       	ld	r25, Z
	return clkEnabled;
}
     f5c:	89 23       	and	r24, r25
     f5e:	08 95       	ret

00000f60 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     f60:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     f62:	81 e4       	ldi	r24, 0x41	; 65
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 80 07 	call	0xf00	; 0xf00 <CCPWrite>
}
     f6a:	08 95       	ret

00000f6c <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     f74:	c0 e4       	ldi	r28, 0x40	; 64
     f76:	d0 e0       	ldi	r29, 0x00	; 0
     f78:	68 81       	ld	r22, Y
     f7a:	68 7f       	andi	r22, 0xF8	; 248
     f7c:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     f7e:	80 e4       	ldi	r24, 0x40	; 64
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 80 07 	call	0xf00	; 0xf00 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     f86:	88 81       	ld	r24, Y
	return clkCtrl;
}
     f88:	81 23       	and	r24, r17
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	08 95       	ret

00000f92 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
     f92:	e0 e4       	ldi	r30, 0x40	; 64
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	91 7f       	andi	r25, 0xF1	; 241
     f9a:	91 60       	ori	r25, 0x01	; 1
     f9c:	98 2b       	or	r25, r24
     f9e:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
     fa0:	08 95       	ret

00000fa2 <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
     fa2:	30 91 56 00 	lds	r19, 0x0056
     fa6:	28 2f       	mov	r18, r24
     fa8:	98 2f       	mov	r25, r24
     faa:	90 95       	com	r25
     fac:	93 23       	and	r25, r19
     fae:	66 23       	and	r22, r22
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <CLKSYS_AutoCalibration_Enable+0x12>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	92 2b       	or	r25, r18
     fb6:	e0 e5       	ldi	r30, 0x50	; 80
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	31 f4       	brne	.+12     	; 0xfcc <CLKSYS_AutoCalibration_Enable+0x2a>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
     fc0:	80 91 68 00 	lds	r24, 0x0068
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	80 93 68 00 	sts	0x0068, r24
     fca:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	29 f4       	brne	.+10     	; 0xfda <CLKSYS_AutoCalibration_Enable+0x38>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     fd0:	80 91 60 00 	lds	r24, 0x0060
     fd4:	81 60       	ori	r24, 0x01	; 1
     fd6:	80 93 60 00 	sts	0x0060, r24
     fda:	08 95       	ret

00000fdc <CLKSYS_XOSC_FailureDetection_Enable>:
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
     fdc:	83 e5       	ldi	r24, 0x53	; 83
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	63 e0       	ldi	r22, 0x03	; 3
     fe2:	0e 94 80 07 	call	0xf00	; 0xf00 <CCPWrite>
}
     fe6:	08 95       	ret

00000fe8 <CLKSYS_Configuration_Lock>:
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
     fe8:	82 e4       	ldi	r24, 0x42	; 66
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	0e 94 80 07 	call	0xf00	; 0xf00 <CCPWrite>
}
     ff2:	08 95       	ret

00000ff4 <setXOSC_32MHz>:
//  - LS900-SI-02 does not contain the crystal
//  - SFLX02-A03 does contain the crystal
// The high frequency crystal is required to clock the ADC without jitter
void setXOSC_32MHz() {
	// configure the crystal to match the chip 
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc,
     ff4:	80 ec       	ldi	r24, 0xC0	; 192
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	4b e0       	ldi	r20, 0x0B	; 11
     ffa:	0e 94 95 07 	call	0xf2a	; 0xf2a <CLKSYS_XOSC_Config>
		                    false,
		                    OSC_XOSCSEL_XTAL_16KCLK_gc );
	CLKSYS_Enable(OSC_XOSCEN_bm);
     ffe:	80 91 50 00 	lds	r24, 0x0050
    1002:	88 60       	ori	r24, 0x08	; 8
    1004:	80 93 50 00 	sts	0x0050, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    1008:	80 91 51 00 	lds	r24, 0x0051
    100c:	83 ff       	sbrs	r24, 3
    100e:	fc cf       	rjmp	.-8      	; 0x1008 <setXOSC_32MHz+0x14>
	// configure PLL to use the crystal and turn on
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
    1010:	80 ec       	ldi	r24, 0xC0	; 192
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	0e 94 a0 07 	call	0xf40	; 0xf40 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    1018:	80 91 50 00 	lds	r24, 0x0050
    101c:	80 61       	ori	r24, 0x10	; 16
    101e:	80 93 50 00 	sts	0x0050, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    1022:	80 91 51 00 	lds	r24, 0x0051
    1026:	84 ff       	sbrs	r24, 4
    1028:	fc cf       	rjmp	.-8      	; 0x1022 <setXOSC_32MHz+0x2e>
	// set as system clock and disable unused RC oscillator
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	0e 94 a6 07 	call	0xf4c	; 0xf4c <CLKSYS_Disable>
}
    1036:	08 95       	ret

00001038 <set_16MHz>:

// produces consistent but inaccurate clock period.
void set_16MHz() {
	// select 32MHz Oscillator and prescale by 1/2
	CLKSYS_Enable(OSC_RC32MEN_bm);
    1038:	80 91 50 00 	lds	r24, 0x0050
    103c:	82 60       	ori	r24, 0x02	; 2
    103e:	80 93 50 00 	sts	0x0050, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	0e 94 b0 07 	call	0xf60	; 0xf60 <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
    104a:	80 91 51 00 	lds	r24, 0x0051
    104e:	81 ff       	sbrs	r24, 1
    1050:	fc cf       	rjmp	.-8      	; 0x104a <set_16MHz+0x12>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 b6 07 	call	0xf6c	; 0xf6c <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <CLKSYS_Disable>
	
}
    105e:	08 95       	ret

00001060 <set_32MHz>:


// produces consistent but inaccurate clock period.
void set_32MHz() {
	// select 32MHz Oscillator and prescale by 1
	CLKSYS_Enable(OSC_RC32MEN_bm);
    1060:	80 91 50 00 	lds	r24, 0x0050
    1064:	82 60       	ori	r24, 0x02	; 2
    1066:	80 93 50 00 	sts	0x0050, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	0e 94 b0 07 	call	0xf60	; 0xf60 <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
    1072:	80 91 51 00 	lds	r24, 0x0051
    1076:	81 ff       	sbrs	r24, 1
    1078:	fc cf       	rjmp	.-8      	; 0x1072 <set_32MHz+0x12>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 a6 07 	call	0xf4c	; 0xf4c <CLKSYS_Disable>
	
}
    1086:	08 95       	ret

00001088 <portExCS>:
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
    1088:	88 23       	and	r24, r24
    108a:	29 f0       	breq	.+10     	; 0x1096 <portExCS+0xe>
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	e0 e0       	ldi	r30, 0x00	; 0
    1090:	f6 e0       	ldi	r31, 0x06	; 6
    1092:	86 83       	std	Z+6, r24	; 0x06
    1094:	04 c0       	rjmp	.+8      	; 0x109e <portExCS+0x16>
	else {
		PORTA.OUTSET = PIN3_bm;
    1096:	88 e0       	ldi	r24, 0x08	; 8
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	f6 e0       	ldi	r31, 0x06	; 6
    109c:	85 83       	std	Z+5, r24	; 0x05
    109e:	8a e6       	ldi	r24, 0x6A	; 106
    10a0:	8a 95       	dec	r24
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <portExCS+0x18>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <portExCS+0x1e>
	}
	_delay_us(10);
}
    10a6:	08 95       	ret

000010a8 <Ext1Power>:
	}
}

void Ext1Power(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN5_bm;
    10a8:	e0 ea       	ldi	r30, 0xA0	; 160
    10aa:	f6 e0       	ldi	r31, 0x06	; 6
		
	}
}

void Ext1Power(uint8_t on) {
	if (on) {
    10ac:	88 23       	and	r24, r24
    10ae:	69 f0       	breq	.+26     	; 0x10ca <Ext1Power+0x22>
		PORTF.DIRSET = PIN5_bm;
    10b0:	80 e2       	ldi	r24, 0x20	; 32
    10b2:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN5_bm;
    10b4:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	93 ec       	ldi	r25, 0xC3	; 195
    10ba:	a9 e0       	ldi	r26, 0x09	; 9
    10bc:	81 50       	subi	r24, 0x01	; 1
    10be:	90 40       	sbci	r25, 0x00	; 0
    10c0:	a0 40       	sbci	r26, 0x00	; 0
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <Ext1Power+0x14>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <Ext1Power+0x1e>
    10c6:	00 00       	nop
    10c8:	08 95       	ret
		//PortEx_DIRSET(PIN3_bm, PS_BANKB);
		//PortEx_OUTSET(PIN3_bm, PS_BANKB);  //write protect SDHC
		_delay_ms(100);
		
	} else {
		PORTF.OUTCLR = PIN5_bm;
    10ca:	80 e2       	ldi	r24, 0x20	; 32
    10cc:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN5_bm;
    10ce:	82 83       	std	Z+2, r24	; 0x02
    10d0:	08 95       	ret

000010d2 <Ext2Power>:
	}
}

void Ext2Power(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN6_bm;
    10d2:	e0 ea       	ldi	r30, 0xA0	; 160
    10d4:	f6 e0       	ldi	r31, 0x06	; 6
		//PortEx_OUTCLR(PIN3_bm, PS_BANKB);  //no need to write protect SDHC
	}
}

void Ext2Power(uint8_t on) {
	if (on) {
    10d6:	88 23       	and	r24, r24
    10d8:	69 f0       	breq	.+26     	; 0x10f4 <Ext2Power+0x22>
		PORTF.DIRSET = PIN6_bm;
    10da:	80 e4       	ldi	r24, 0x40	; 64
    10dc:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN6_bm;
    10de:	85 83       	std	Z+5, r24	; 0x05
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	93 ec       	ldi	r25, 0xC3	; 195
    10e4:	a9 e0       	ldi	r26, 0x09	; 9
    10e6:	81 50       	subi	r24, 0x01	; 1
    10e8:	90 40       	sbci	r25, 0x00	; 0
    10ea:	a0 40       	sbci	r26, 0x00	; 0
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <Ext2Power+0x14>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <Ext2Power+0x1e>
    10f0:	00 00       	nop
    10f2:	08 95       	ret
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN6_bm;
    10f4:	80 e4       	ldi	r24, 0x40	; 64
    10f6:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN6_bm;
    10f8:	82 83       	std	Z+2, r24	; 0x02
    10fa:	08 95       	ret

000010fc <HVPower>:
	}
}

void HVPower(uint8_t on) {
	if (on) {
		PORTF.DIRSET = PIN7_bm;
    10fc:	e0 ea       	ldi	r30, 0xA0	; 160
    10fe:	f6 e0       	ldi	r31, 0x06	; 6
		PORTF.DIRCLR = PIN6_bm;
	}
}

void HVPower(uint8_t on) {
	if (on) {
    1100:	88 23       	and	r24, r24
    1102:	69 f0       	breq	.+26     	; 0x111e <HVPower+0x22>
		PORTF.DIRSET = PIN7_bm;
    1104:	80 e8       	ldi	r24, 0x80	; 128
    1106:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN7_bm;
    1108:	85 83       	std	Z+5, r24	; 0x05
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	93 ec       	ldi	r25, 0xC3	; 195
    110e:	a9 e0       	ldi	r26, 0x09	; 9
    1110:	81 50       	subi	r24, 0x01	; 1
    1112:	90 40       	sbci	r25, 0x00	; 0
    1114:	a0 40       	sbci	r26, 0x00	; 0
    1116:	e1 f7       	brne	.-8      	; 0x1110 <HVPower+0x14>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <HVPower+0x1e>
    111a:	00 00       	nop
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <HVPower+0x28>
		_delay_ms(100);
	} else {
		PORTF.OUTCLR = PIN7_bm;
    111e:	80 e8       	ldi	r24, 0x80	; 128
    1120:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN7_bm;
    1122:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1124:	af e3       	ldi	r26, 0x3F	; 63
    1126:	bf e1       	ldi	r27, 0x1F	; 31
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <HVPower+0x2c>
    112c:	00 c0       	rjmp	.+0      	; 0x112e <HVPower+0x32>
    112e:	00 00       	nop
	}
	_delay_us(1000);
}
    1130:	08 95       	ret

00001132 <enableADCMUX>:
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
    1132:	e0 e0       	ldi	r30, 0x00	; 0
    1134:	f6 e0       	ldi	r31, 0x06	; 6
	if (upperCS) upperMuxCS(FALSE);
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
    1136:	88 23       	and	r24, r24
    1138:	21 f0       	breq	.+8      	; 0x1142 <enableADCMUX+0x10>
		PORTA.DIRSET = PIN5_bm;
    113a:	80 e2       	ldi	r24, 0x20	; 32
    113c:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
    113e:	85 83       	std	Z+5, r24	; 0x05
    1140:	08 95       	ret
	} else {
		PORTA.OUTCLR = PIN5_bm;
    1142:	80 e2       	ldi	r24, 0x20	; 32
    1144:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
    1146:	82 83       	std	Z+2, r24	; 0x02
    1148:	08 95       	ret

0000114a <lowerMuxCS>:
	}
}

void lowerMuxCS(uint8_t write) {
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
    114a:	88 23       	and	r24, r24
    114c:	29 f0       	breq	.+10     	; 0x1158 <lowerMuxCS+0xe>
    114e:	80 e1       	ldi	r24, 0x10	; 16
    1150:	e0 e8       	ldi	r30, 0x80	; 128
    1152:	f6 e0       	ldi	r31, 0x06	; 6
    1154:	86 83       	std	Z+6, r24	; 0x06
    1156:	08 95       	ret
	else PORTE.OUTSET = PIN4_bm;
    1158:	80 e1       	ldi	r24, 0x10	; 16
    115a:	e0 e8       	ldi	r30, 0x80	; 128
    115c:	f6 e0       	ldi	r31, 0x06	; 6
    115e:	85 83       	std	Z+5, r24	; 0x05
    1160:	08 95       	ret

00001162 <upperMuxCS>:
}
void upperMuxCS(uint8_t write) {
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
    1162:	88 23       	and	r24, r24
    1164:	29 f0       	breq	.+10     	; 0x1170 <upperMuxCS+0xe>
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	e0 e4       	ldi	r30, 0x40	; 64
    116a:	f6 e0       	ldi	r31, 0x06	; 6
    116c:	86 83       	std	Z+6, r24	; 0x06
    116e:	08 95       	ret
	else PORTC.OUTSET = PIN1_bm;
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	e0 e4       	ldi	r30, 0x40	; 64
    1174:	f6 e0       	ldi	r31, 0x06	; 6
    1176:	85 83       	std	Z+5, r24	; 0x05
    1178:	08 95       	ret

0000117a <setADCInput>:

/*! \brief Sets input channel to AD7767 via the A0, A1, A2 control lines of ADG758
 */
void setADCInput(uint8_t channel) {
	// set bit A0 to LSB
	if(channel & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    117a:	20 e4       	ldi	r18, 0x40	; 64
    117c:	e0 e0       	ldi	r30, 0x00	; 0
    117e:	f6 e0       	ldi	r31, 0x06	; 6
    1180:	80 ff       	sbrs	r24, 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <setADCInput+0xe>
    1184:	25 83       	std	Z+5, r18	; 0x05
    1186:	01 c0       	rjmp	.+2      	; 0x118a <setADCInput+0x10>
	else {PORTA.OUTCLR = PIN6_bm;}
    1188:	26 83       	std	Z+6, r18	; 0x06
	// set bit A1 to second bit
	if(channel & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    118a:	22 e0       	ldi	r18, 0x02	; 2
    118c:	e0 e2       	ldi	r30, 0x20	; 32
    118e:	f6 e0       	ldi	r31, 0x06	; 6
    1190:	81 ff       	sbrs	r24, 1
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <setADCInput+0x1e>
    1194:	25 83       	std	Z+5, r18	; 0x05
    1196:	01 c0       	rjmp	.+2      	; 0x119a <setADCInput+0x20>
	else {PORTB.OUTCLR = PIN1_bm;}
    1198:	26 83       	std	Z+6, r18	; 0x06
	// set bit A3 to third bit
	if(channel & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    119a:	82 ff       	sbrs	r24, 2
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <setADCInput+0x2e>
    119e:	84 e0       	ldi	r24, 0x04	; 4
    11a0:	e0 e2       	ldi	r30, 0x20	; 32
    11a2:	f6 e0       	ldi	r31, 0x06	; 6
    11a4:	85 83       	std	Z+5, r24	; 0x05
    11a6:	08 95       	ret
	else {PORTB.OUTCLR = PIN2_bm;}
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	e0 e2       	ldi	r30, 0x20	; 32
    11ac:	f6 e0       	ldi	r31, 0x06	; 6
    11ae:	86 83       	std	Z+6, r24	; 0x06
    11b0:	08 95       	ret

000011b2 <SPIInit>:
}


void SPIInit(uint8_t mode) {
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
    11b2:	e0 e4       	ldi	r30, 0x40	; 64
    11b4:	f6 e0       	ldi	r31, 0x06	; 6
    11b6:	90 e1       	ldi	r25, 0x10	; 16
    11b8:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
    11ba:	28 e3       	ldi	r18, 0x38	; 56
    11bc:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
    11be:	95 83       	std	Z+5, r25	; 0x05

	// init SPI
	SPIC.CTRL =	SPI_PRESCALER |  // set clock speed
    11c0:	81 65       	ori	r24, 0x51	; 81
    11c2:	a0 ec       	ldi	r26, 0xC0	; 192
    11c4:	b8 e0       	ldi	r27, 0x08	; 8
    11c6:	8c 93       	st	X, r24
	            0x00 |  // set data order msb first
	            SPI_MASTER_bm | // set SPI master
	            mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    11c8:	11 96       	adiw	r26, 0x01	; 1
    11ca:	1c 92       	st	X, r1
    11cc:	11 97       	sbiw	r26, 0x01	; 1

 	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
    11ce:	80 ea       	ldi	r24, 0xA0	; 160
    11d0:	81 83       	std	Z+1, r24	; 0x01

	
}
    11d2:	08 95       	ret

000011d4 <SPIInit2>:
//use this if using a prescalar
void SPIInit2(uint8_t mode, uint8_t prescalar) {
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
    11d4:	e0 e4       	ldi	r30, 0x40	; 64
    11d6:	f6 e0       	ldi	r31, 0x06	; 6
    11d8:	90 e1       	ldi	r25, 0x10	; 16
    11da:	91 83       	std	Z+1, r25	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
    11dc:	28 e3       	ldi	r18, 0x38	; 56
    11de:	24 8b       	std	Z+20, r18	; 0x14
	PORTC.OUTSET = PIN4_bm;
    11e0:	95 83       	std	Z+5, r25	; 0x05
	

	// init SPI
	SPIC.CTRL =	prescalar |  // set clock speed
    11e2:	80 65       	ori	r24, 0x50	; 80
    11e4:	86 2b       	or	r24, r22
    11e6:	a0 ec       	ldi	r26, 0xC0	; 192
    11e8:	b8 e0       	ldi	r27, 0x08	; 8
    11ea:	8c 93       	st	X, r24
	0x00 |  // set data order msb first
	SPI_MASTER_bm | // set SPI master
	mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	1c 92       	st	X, r1
    11f0:	11 97       	sbiw	r26, 0x01	; 1

	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
    11f2:	80 ea       	ldi	r24, 0xA0	; 160
    11f4:	81 83       	std	Z+1, r24	; 0x01
}
    11f6:	08 95       	ret

000011f8 <SPICS>:

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
    11f8:	88 23       	and	r24, r24
    11fa:	29 f0       	breq	.+10     	; 0x1206 <SPICS+0xe>
    11fc:	80 e1       	ldi	r24, 0x10	; 16
    11fe:	e0 e4       	ldi	r30, 0x40	; 64
    1200:	f6 e0       	ldi	r31, 0x06	; 6
    1202:	86 83       	std	Z+6, r24	; 0x06
    1204:	08 95       	ret
	else {
		PORTC.OUTSET = PIN4_bm;
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	e0 e4       	ldi	r30, 0x40	; 64
    120a:	f6 e0       	ldi	r31, 0x06	; 6
    120c:	85 83       	std	Z+5, r24	; 0x05
    120e:	08 95       	ret

00001210 <SPIDisable>:
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
    1210:	e0 e4       	ldi	r30, 0x40	; 64
    1212:	f6 e0       	ldi	r31, 0x06	; 6
    1214:	80 e1       	ldi	r24, 0x10	; 16
    1216:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
    1218:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
    121c:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
    121e:	80 eb       	ldi	r24, 0xB0	; 176
    1220:	82 83       	std	Z+2, r24	; 0x02

}
    1222:	08 95       	ret

00001224 <set_filter>:
 *	filterConfig[2]	Channel 3 and 7 mask
 *	filterConfig[3]	Channel 4 and 8 mask
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
*/
void set_filter(uint8_t filterConfig) {
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
	// hack to get ADC to work
	//filterConfig |= 0x0F;

	// boolean flags for upper/lower channels CS
	uint8_t lowerCS = filterConfig & 0x03; 
    1228:	d8 2f       	mov	r29, r24
    122a:	d3 70       	andi	r29, 0x03	; 3
	uint8_t upperCS = filterConfig & 0x0C;
    122c:	c8 2f       	mov	r28, r24
    122e:	cc 70       	andi	r28, 0x0C	; 12

	// update left and right channel status
	if (filterConfig & (BIT0_bm | BIT2_bm)) channelStatus = 
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	a9 01       	movw	r20, r18
    1236:	45 70       	andi	r20, 0x05	; 5
    1238:	50 70       	andi	r21, 0x00	; 0
    123a:	41 15       	cp	r20, r1
    123c:	51 05       	cpc	r21, r1
    123e:	49 f0       	breq	.+18     	; 0x1252 <set_filter+0x2e>
    1240:	40 91 6f 50 	lds	r20, 0x506F
    1244:	98 2f       	mov	r25, r24
    1246:	92 95       	swap	r25
    1248:	9f 70       	andi	r25, 0x0F	; 15
    124a:	40 7f       	andi	r20, 0xF0	; 240
    124c:	94 2b       	or	r25, r20
    124e:	90 93 6f 50 	sts	0x506F, r25
		(0xF0 & channelStatus) | (filterConfig >> 4);  //right
	if (filterConfig & (BIT1_bm | BIT3_bm)) channelStatus =
    1252:	2a 70       	andi	r18, 0x0A	; 10
    1254:	30 70       	andi	r19, 0x00	; 0
    1256:	21 15       	cp	r18, r1
    1258:	31 05       	cpc	r19, r1
    125a:	39 f0       	breq	.+14     	; 0x126a <set_filter+0x46>
    125c:	90 91 6f 50 	lds	r25, 0x506F
    1260:	80 7f       	andi	r24, 0xF0	; 240
    1262:	9f 70       	andi	r25, 0x0F	; 15
    1264:	89 2b       	or	r24, r25
    1266:	80 93 6f 50 	sts	0x506F, r24
		(0xF0 & filterConfig) | (0x0F & channelStatus); //left
		
	SPIInit(SPI_MODE_1_gc);
    126a:	84 e0       	ldi	r24, 0x04	; 4
    126c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>

	
	SPIBuffer[0] = channelStatus;
    1270:	80 91 6f 50 	lds	r24, 0x506F
    1274:	80 93 5f 50 	sts	0x505F, r24
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
    1278:	dd 23       	and	r29, r29
    127a:	19 f0       	breq	.+6      	; 0x1282 <set_filter+0x5e>
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	0e 94 a5 08 	call	0x114a	; 0x114a <lowerMuxCS>
	if (upperCS) upperMuxCS(TRUE);
    1282:	cc 23       	and	r28, r28
    1284:	19 f0       	breq	.+6      	; 0x128c <set_filter+0x68>
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	0e 94 b1 08 	call	0x1162	; 0x1162 <upperMuxCS>

	SPICS(TRUE);
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>

	// Send all logic high to ensure that the SDO line on the chip is
	// left in high Z state after SPI transaction.
	// The t-1 SDI transaction is output on the SDO and the pin left in the configuration.
	// of the last bit
	SPIC.DATA = 0xFF;
    1292:	8f ef       	ldi	r24, 0xFF	; 255
    1294:	e0 ec       	ldi	r30, 0xC0	; 192
    1296:	f8 e0       	ldi	r31, 0x08	; 8
    1298:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    129a:	80 91 c2 08 	lds	r24, 0x08C2
    129e:	87 ff       	sbrs	r24, 7
    12a0:	fc cf       	rjmp	.-8      	; 0x129a <set_filter+0x76>
	SPIBuffer[12] = SPIC.DATA;
    12a2:	80 91 c3 08 	lds	r24, 0x08C3
    12a6:	80 93 6b 50 	sts	0x506B, r24

	nop();
    12aa:	00 00       	nop

	SPIC.DATA = SPIBuffer[0];
    12ac:	80 91 5f 50 	lds	r24, 0x505F
    12b0:	e0 ec       	ldi	r30, 0xC0	; 192
    12b2:	f8 e0       	ldi	r31, 0x08	; 8
    12b4:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    12b6:	80 91 c2 08 	lds	r24, 0x08C2
    12ba:	87 ff       	sbrs	r24, 7
    12bc:	fc cf       	rjmp	.-8      	; 0x12b6 <set_filter+0x92>
	SPIBuffer[12] = SPIC.DATA;
    12be:	80 91 c3 08 	lds	r24, 0x08C3
    12c2:	80 93 6b 50 	sts	0x506B, r24
	SPICS(FALSE);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>

	if (lowerCS) lowerMuxCS(FALSE);
    12cc:	dd 23       	and	r29, r29
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <set_filter+0xb2>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	0e 94 a5 08 	call	0x114a	; 0x114a <lowerMuxCS>
	if (upperCS) upperMuxCS(FALSE);
    12d6:	cc 23       	and	r28, r28
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <set_filter+0xbc>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 b1 08 	call	0x1162	; 0x1162 <upperMuxCS>
	SPIDisable();
    12e0:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <PortEx_OUTCLR>:
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	69 83       	std	Y+1, r22	; 0x01
    12fc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	portExCS(TRUE);
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	0e 94 44 08 	call	0x1088	; 0x1088 <portExCS>
    130c:	91 2f       	mov	r25, r17
    130e:	90 95       	com	r25
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
    1310:	69 81       	ldd	r22, Y+1	; 0x01
    1312:	66 23       	and	r22, r22
    1314:	31 f0       	breq	.+12     	; 0x1322 <PortEx_OUTCLR+0x38>
    1316:	80 91 59 40 	lds	r24, 0x4059
    131a:	89 23       	and	r24, r25
    131c:	80 93 59 40 	sts	0x4059, r24
    1320:	05 c0       	rjmp	.+10     	; 0x132c <PortEx_OUTCLR+0x42>
	else bankB_OUT = (uint8_t) (bankB_OUT & ~pins);
    1322:	80 91 70 50 	lds	r24, 0x5070
    1326:	89 23       	and	r24, r25
    1328:	80 93 70 50 	sts	0x5070, r24
	
	SPIBuffer[0] = PS_WRITE;
    132c:	80 e4       	ldi	r24, 0x40	; 64
    132e:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
    1332:	66 23       	and	r22, r22
    1334:	31 f0       	breq	.+12     	; 0x1342 <PortEx_OUTCLR+0x58>
		SPIBuffer[1]=PS_OLATA;
    1336:	84 e1       	ldi	r24, 0x14	; 20
    1338:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = bankA_OUT;
    133c:	80 91 59 40 	lds	r24, 0x4059
    1340:	05 c0       	rjmp	.+10     	; 0x134c <PortEx_OUTCLR+0x62>
	} else {
		SPIBuffer[1]=PS_OLATB;
    1342:	85 e1       	ldi	r24, 0x15	; 21
    1344:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = bankB_OUT; 
    1348:	80 91 70 50 	lds	r24, 0x5070
    134c:	80 93 61 50 	sts	0x5061, r24
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    1354:	e0 ec       	ldi	r30, 0xC0	; 192
    1356:	f8 e0       	ldi	r31, 0x08	; 8
    1358:	dc 01       	movw	r26, r24
    135a:	a1 5a       	subi	r26, 0xA1	; 161
    135c:	bf 4a       	sbci	r27, 0xAF	; 175
    135e:	2c 91       	ld	r18, X
    1360:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    1362:	20 91 c2 08 	lds	r18, 0x08C2
    1366:	27 ff       	sbrs	r18, 7
    1368:	fc cf       	rjmp	.-8      	; 0x1362 <PortEx_OUTCLR+0x78>
		SPIBuffer[12] = SPIC.DATA;
    136a:	20 91 c3 08 	lds	r18, 0x08C3
    136e:	20 93 6b 50 	sts	0x506B, r18
    1372:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	79 f7       	brne	.-34     	; 0x1358 <PortEx_OUTCLR+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	portExCS(FALSE);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 44 08 	call	0x1088	; 0x1088 <portExCS>
	SPIDisable();
    1386:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	08 95       	ret

00001394 <PortEx_OUTSET>:
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	69 83       	std	Y+1, r22	; 0x01
    13a6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	portExCS(TRUE);
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	0e 94 44 08 	call	0x1088	; 0x1088 <portExCS>
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
    13b6:	69 81       	ldd	r22, Y+1	; 0x01
    13b8:	66 23       	and	r22, r22
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <PortEx_OUTSET+0x34>
    13bc:	80 91 59 40 	lds	r24, 0x4059
    13c0:	81 2b       	or	r24, r17
    13c2:	80 93 59 40 	sts	0x4059, r24
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <PortEx_OUTSET+0x3e>
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
    13c8:	80 91 70 50 	lds	r24, 0x5070
    13cc:	81 2b       	or	r24, r17
    13ce:	80 93 70 50 	sts	0x5070, r24
	
	SPIBuffer[0] = PS_WRITE;
    13d2:	80 e4       	ldi	r24, 0x40	; 64
    13d4:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
    13d8:	66 23       	and	r22, r22
    13da:	31 f0       	breq	.+12     	; 0x13e8 <PortEx_OUTSET+0x54>
		SPIBuffer[1]=PS_OLATA;
    13dc:	84 e1       	ldi	r24, 0x14	; 20
    13de:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = bankA_OUT;
    13e2:	80 91 59 40 	lds	r24, 0x4059
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <PortEx_OUTSET+0x5e>
	} else {
		SPIBuffer[1]=PS_OLATB;
    13e8:	85 e1       	ldi	r24, 0x15	; 21
    13ea:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = bankB_OUT; 
    13ee:	80 91 70 50 	lds	r24, 0x5070
    13f2:	80 93 61 50 	sts	0x5061, r24
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    13fa:	e0 ec       	ldi	r30, 0xC0	; 192
    13fc:	f8 e0       	ldi	r31, 0x08	; 8
    13fe:	dc 01       	movw	r26, r24
    1400:	a1 5a       	subi	r26, 0xA1	; 161
    1402:	bf 4a       	sbci	r27, 0xAF	; 175
    1404:	2c 91       	ld	r18, X
    1406:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    1408:	20 91 c2 08 	lds	r18, 0x08C2
    140c:	27 ff       	sbrs	r18, 7
    140e:	fc cf       	rjmp	.-8      	; 0x1408 <PortEx_OUTSET+0x74>
		SPIBuffer[12] = SPIC.DATA;
    1410:	20 91 c3 08 	lds	r18, 0x08C3
    1414:	20 93 6b 50 	sts	0x506B, r18
    1418:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	79 f7       	brne	.-34     	; 0x13fe <PortEx_OUTSET+0x6a>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	portExCS(FALSE);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 44 08 	call	0x1088	; 0x1088 <portExCS>
	SPIDisable();
    142c:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}
    1430:	0f 90       	pop	r0
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	08 95       	ret

0000143a <set_ampGain>:
 *	All selected op-amps will be set to the same gain value.
 *
 *	\param channel	channel for gain to be set
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 */
void set_ampGain(uint8_t channel, uint8_t gainExponent) {
    143a:	cf 93       	push	r28
    143c:	c6 2f       	mov	r28, r22
	// set chip select.  note: AD8231 CS is select on low
	PortEx_OUTCLR((1 << channel), PS_BANKA);
    143e:	21 e0       	ldi	r18, 0x01	; 1
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <set_ampGain+0xe>
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <set_ampGain+0xa>
    144c:	82 2f       	mov	r24, r18
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	0e 94 75 09 	call	0x12ea	; 0x12ea <PortEx_OUTCLR>
	//setPortEx(~(1 << channel), PS_BANKA);
	// set gain
	// set bit A0
	if(gainExponent & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
    1454:	80 e4       	ldi	r24, 0x40	; 64
    1456:	e0 e0       	ldi	r30, 0x00	; 0
    1458:	f6 e0       	ldi	r31, 0x06	; 6
    145a:	c0 ff       	sbrs	r28, 0
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <set_ampGain+0x28>
    145e:	85 83       	std	Z+5, r24	; 0x05
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <set_ampGain+0x2a>
	else {PORTA.OUTCLR = PIN6_bm;}
    1462:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1
	if(gainExponent & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	e0 e2       	ldi	r30, 0x20	; 32
    1468:	f6 e0       	ldi	r31, 0x06	; 6
    146a:	c1 ff       	sbrs	r28, 1
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <set_ampGain+0x38>
    146e:	85 83       	std	Z+5, r24	; 0x05
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <set_ampGain+0x3a>
	else {PORTB.OUTCLR = PIN1_bm;}
    1472:	86 83       	std	Z+6, r24	; 0x06
	// set bit A2
	if(gainExponent & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
    1474:	84 e0       	ldi	r24, 0x04	; 4
    1476:	e0 e2       	ldi	r30, 0x20	; 32
    1478:	f6 e0       	ldi	r31, 0x06	; 6
    147a:	c2 ff       	sbrs	r28, 2
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <set_ampGain+0x48>
    147e:	85 83       	std	Z+5, r24	; 0x05
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <set_ampGain+0x4a>
	else {PORTB.OUTCLR = PIN2_bm;}
    1482:	86 83       	std	Z+6, r24	; 0x06
    1484:	8a e0       	ldi	r24, 0x0A	; 10
    1486:	8a 95       	dec	r24
    1488:	f1 f7       	brne	.-4      	; 0x1486 <set_ampGain+0x4c>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <set_ampGain+0x52>

	_delay_us(1);

	PortEx_OUTSET(0xFF, PS_BANKA);	// write protect all AD8231 amps
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	61 e0       	ldi	r22, 0x01	; 1
    1490:	0e 94 ca 09 	call	0x1394	; 0x1394 <PortEx_OUTSET>
	//setPortEx(0xFF, PS_BANKA);

}
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <PortEx_DIRCLR>:
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	69 83       	std	Y+1, r22	; 0x01
    14aa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	portExCS(TRUE);
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	0e 94 44 08 	call	0x1088	; 0x1088 <portExCS>
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
    14ba:	69 81       	ldd	r22, Y+1	; 0x01
    14bc:	66 23       	and	r22, r22
    14be:	39 f0       	breq	.+14     	; 0x14ce <PortEx_DIRCLR+0x36>
    14c0:	80 91 6e 50 	lds	r24, 0x506E
    14c4:	80 95       	com	r24
    14c6:	81 23       	and	r24, r17
    14c8:	80 93 6e 50 	sts	0x506E, r24
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <PortEx_DIRCLR+0x42>
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
    14ce:	80 91 99 50 	lds	r24, 0x5099
    14d2:	80 95       	com	r24
    14d4:	81 23       	and	r24, r17
    14d6:	80 93 99 50 	sts	0x5099, r24
	
	SPIBuffer[0] = PS_WRITE;
    14da:	80 e4       	ldi	r24, 0x40	; 64
    14dc:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
    14e0:	66 23       	and	r22, r22
    14e2:	29 f0       	breq	.+10     	; 0x14ee <PortEx_DIRCLR+0x56>
		SPIBuffer[1]=PS_IODIRA;
    14e4:	10 92 60 50 	sts	0x5060, r1
		SPIBuffer[2] = ~bankA_DIR; 
    14e8:	80 91 6e 50 	lds	r24, 0x506E
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <PortEx_DIRCLR+0x60>
	} else {
		SPIBuffer[1]=PS_IODIRB;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = ~bankB_DIR;
    14f4:	80 91 99 50 	lds	r24, 0x5099
    14f8:	80 95       	com	r24
    14fa:	80 93 61 50 	sts	0x5061, r24
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    1502:	e0 ec       	ldi	r30, 0xC0	; 192
    1504:	f8 e0       	ldi	r31, 0x08	; 8
    1506:	dc 01       	movw	r26, r24
    1508:	a1 5a       	subi	r26, 0xA1	; 161
    150a:	bf 4a       	sbci	r27, 0xAF	; 175
    150c:	2c 91       	ld	r18, X
    150e:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    1510:	20 91 c2 08 	lds	r18, 0x08C2
    1514:	27 ff       	sbrs	r18, 7
    1516:	fc cf       	rjmp	.-8      	; 0x1510 <PortEx_DIRCLR+0x78>
		SPIBuffer[12] = SPIC.DATA;
    1518:	20 91 c3 08 	lds	r18, 0x08C3
    151c:	20 93 6b 50 	sts	0x506B, r18
    1520:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	79 f7       	brne	.-34     	; 0x1506 <PortEx_DIRCLR+0x6e>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));
		SPIBuffer[12] = SPIC.DATA;
	}

	SPICS(FALSE);
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	portExCS(FALSE);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	0e 94 44 08 	call	0x1088	; 0x1088 <portExCS>
	SPIDisable();
    1534:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}
    1538:	0f 90       	pop	r0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	08 95       	ret

00001542 <PortEx_DIRSET>:
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	0f 92       	push	r0
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	18 2f       	mov	r17, r24
	SPIInit(PS_SPI_MODE);
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	69 83       	std	Y+1, r22	; 0x01
    1554:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	portExCS(TRUE);
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	0e 94 44 08 	call	0x1088	; 0x1088 <portExCS>

	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
    1564:	69 81       	ldd	r22, Y+1	; 0x01
    1566:	66 23       	and	r22, r22
    1568:	31 f0       	breq	.+12     	; 0x1576 <PortEx_DIRSET+0x34>
    156a:	80 91 6e 50 	lds	r24, 0x506E
    156e:	81 2b       	or	r24, r17
    1570:	80 93 6e 50 	sts	0x506E, r24
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <PortEx_DIRSET+0x3e>
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
    1576:	80 91 99 50 	lds	r24, 0x5099
    157a:	81 2b       	or	r24, r17
    157c:	80 93 99 50 	sts	0x5099, r24
	
	SPIBuffer[0] = PS_WRITE;
    1580:	80 e4       	ldi	r24, 0x40	; 64
    1582:	80 93 5f 50 	sts	0x505F, r24
	if(bank) {
    1586:	66 23       	and	r22, r22
    1588:	29 f0       	breq	.+10     	; 0x1594 <PortEx_DIRSET+0x52>
		SPIBuffer[1]=PS_IODIRA;
    158a:	10 92 60 50 	sts	0x5060, r1
		SPIBuffer[2] = ~bankA_DIR; 
    158e:	80 91 6e 50 	lds	r24, 0x506E
    1592:	05 c0       	rjmp	.+10     	; 0x159e <PortEx_DIRSET+0x5c>
	} else {
		SPIBuffer[1]=PS_IODIRB;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 60 50 	sts	0x5060, r24
		SPIBuffer[2] = ~bankB_DIR;
    159a:	80 91 99 50 	lds	r24, 0x5099
    159e:	80 95       	com	r24
    15a0:	80 93 61 50 	sts	0x5061, r24
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
    15a8:	e0 ec       	ldi	r30, 0xC0	; 192
    15aa:	f8 e0       	ldi	r31, 0x08	; 8
    15ac:	dc 01       	movw	r26, r24
    15ae:	a1 5a       	subi	r26, 0xA1	; 161
    15b0:	bf 4a       	sbci	r27, 0xAF	; 175
    15b2:	2c 91       	ld	r18, X
    15b4:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
    15b6:	20 91 c2 08 	lds	r18, 0x08C2
    15ba:	27 ff       	sbrs	r18, 7
    15bc:	fc cf       	rjmp	.-8      	; 0x15b6 <PortEx_DIRSET+0x74>
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
    15be:	20 91 c3 08 	lds	r18, 0x08C3
    15c2:	20 93 6b 50 	sts	0x506B, r18
    15c6:	01 96       	adiw	r24, 0x01	; 1
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	79 f7       	brne	.-34     	; 0x15ac <PortEx_DIRSET+0x6a>
		SPIC.DATA = SPIBuffer[bufIndex];
		while(!(SPIC.STATUS & SPI_IF_bm));	//wait for the byte to be sent
		SPIBuffer[12] = SPIC.DATA;			//read the data register to clear status flag
	}

	portExCS(FALSE);
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	0e 94 44 08 	call	0x1088	; 0x1088 <portExCS>
	SPICS(FALSE);
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();
    15da:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>


}
    15de:	0f 90       	pop	r0
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	08 95       	ret

000015e8 <ADCPower>:
	portExCS(FALSE);	
	SPIDisable();
}
*/

void ADCPower(uint8_t on) {
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
	if (on) {
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
    15f0:	00 e0       	ldi	r16, 0x00	; 0
    15f2:	16 e0       	ldi	r17, 0x06	; 6
	SPIDisable();
}
*/

void ADCPower(uint8_t on) {
	if (on) {
    15f4:	88 23       	and	r24, r24
    15f6:	09 f4       	brne	.+2      	; 0x15fa <ADCPower+0x12>
    15f8:	44 c0       	rjmp	.+136    	; 0x1682 <ADCPower+0x9a>
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
    15fa:	8e ed       	ldi	r24, 0xDE	; 222
    15fc:	d8 01       	movw	r26, r16
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	8c 93       	st	X, r24
		PORTB.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
    1602:	c0 e2       	ldi	r28, 0x20	; 32
    1604:	d6 e0       	ldi	r29, 0x06	; 6
    1606:	4e e0       	ldi	r20, 0x0E	; 14
    1608:	49 83       	std	Y+1, r20	; 0x01
		PORTC.DIRSET = PIN0_bm | PIN1_bm;// VDCA and VDC-2 and MUX-SYNC1
    160a:	e0 e4       	ldi	r30, 0x40	; 64
    160c:	f6 e0       	ldi	r31, 0x06	; 6
    160e:	63 e0       	ldi	r22, 0x03	; 3
    1610:	61 83       	std	Z+1, r22	; 0x01
		PORTE.DIRSET = PIN4_bm; // MUX-SYNC2
    1612:	80 e8       	ldi	r24, 0x80	; 128
    1614:	96 e0       	ldi	r25, 0x06	; 6
    1616:	50 e1       	ldi	r21, 0x10	; 16
    1618:	dc 01       	movw	r26, r24
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	5c 93       	st	X, r21
		PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; // DAC LDAC and CS
    161e:	20 ea       	ldi	r18, 0xA0	; 160
    1620:	36 e0       	ldi	r19, 0x06	; 6
    1622:	d9 01       	movw	r26, r18
    1624:	11 96       	adiw	r26, 0x01	; 1
    1626:	4c 93       	st	X, r20

		// high signal to write protect
		PORTA.OUTSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm;; // portEx-CS
    1628:	7e e9       	ldi	r23, 0x9E	; 158
    162a:	d8 01       	movw	r26, r16
    162c:	15 96       	adiw	r26, 0x05	; 5
    162e:	7c 93       	st	X, r23
		PORTB.OUTSET = PIN3_bm; // FRAM-CS
    1630:	78 e0       	ldi	r23, 0x08	; 8
    1632:	7d 83       	std	Y+5, r23	; 0x05
		PORTC.OUTSET = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
    1634:	65 83       	std	Z+5, r22	; 0x05
		PORTE.OUTSET = PIN4_bm; // MUX-SYNC2
    1636:	ec 01       	movw	r28, r24
    1638:	5d 83       	std	Y+5, r21	; 0x05
		PORTF.OUTSET = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
    163a:	d9 01       	movw	r26, r18
    163c:	15 96       	adiw	r26, 0x05	; 5
    163e:	4c 93       	st	X, r20
		channelStatus = 0x00; // POR to zeros
    1640:	10 92 6f 50 	sts	0x506F, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	93 ec       	ldi	r25, 0xC3	; 195
    1648:	a9 e0       	ldi	r26, 0x09	; 9
    164a:	81 50       	subi	r24, 0x01	; 1
    164c:	90 40       	sbci	r25, 0x00	; 0
    164e:	a0 40       	sbci	r26, 0x00	; 0
    1650:	e1 f7       	brne	.-8      	; 0x164a <ADCPower+0x62>
    1652:	00 c0       	rjmp	.+0      	; 0x1654 <ADCPower+0x6c>
    1654:	00 00       	nop
		_delay_ms(100);

		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
    1656:	80 e4       	ldi	r24, 0x40	; 64
    1658:	82 83       	std	Z+2, r24	; 0x02
				
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
    165a:	10 92 70 50 	sts	0x5070, r1
    165e:	10 92 99 50 	sts	0x5099, r1
    1662:	10 92 59 40 	sts	0x4059, r1
    1666:	10 92 6e 50 	sts	0x506E, r1
		PortEx_DIRSET(0xFF, PS_BANKA);
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <PortEx_DIRSET>
		PortEx_OUTSET(0xFF, PS_BANKA);  //write protect IN-AMP 1 thru 8
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	0e 94 ca 09 	call	0x1394	; 0x1394 <PortEx_OUTSET>
		//setPortEx(0xFF, PS_BANKA);
		set_filter(0xFF);  // set filters initially to ensure data out pulled high
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	0e 94 12 09 	call	0x1224	; 0x1224 <set_filter>
    1680:	30 c0       	rjmp	.+96     	; 0x16e2 <ADCPower+0xfa>

	} else {
		// low signal for low power
		PORTA.OUTCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and A0
    1682:	7e ed       	ldi	r23, 0xDE	; 222
    1684:	d8 01       	movw	r26, r16
    1686:	16 96       	adiw	r26, 0x06	; 6
    1688:	7c 93       	st	X, r23
		PORTB.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
    168a:	a0 e2       	ldi	r26, 0x20	; 32
    168c:	b6 e0       	ldi	r27, 0x06	; 6
    168e:	4e e0       	ldi	r20, 0x0E	; 14
    1690:	16 96       	adiw	r26, 0x06	; 6
    1692:	4c 93       	st	X, r20
    1694:	16 97       	sbiw	r26, 0x06	; 6
		PORTC.OUTCLR = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
    1696:	20 e4       	ldi	r18, 0x40	; 64
    1698:	36 e0       	ldi	r19, 0x06	; 6
    169a:	63 e0       	ldi	r22, 0x03	; 3
    169c:	e9 01       	movw	r28, r18
    169e:	6e 83       	std	Y+6, r22	; 0x06
		PORTE.OUTCLR = PIN4_bm; // MUX-SYNC2
    16a0:	c0 e8       	ldi	r28, 0x80	; 128
    16a2:	d6 e0       	ldi	r29, 0x06	; 6
    16a4:	50 e1       	ldi	r21, 0x10	; 16
    16a6:	5e 83       	std	Y+6, r21	; 0x06
		PORTF.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
    16a8:	80 ea       	ldi	r24, 0xA0	; 160
    16aa:	96 e0       	ldi	r25, 0x06	; 6
    16ac:	fc 01       	movw	r30, r24
    16ae:	46 83       	std	Z+6, r20	; 0x06


		PORTA.DIRCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm | PIN6_bm;
    16b0:	f8 01       	movw	r30, r16
    16b2:	72 83       	std	Z+2, r23	; 0x02
		PORTB.DIRCLR = PIN1_bm | PIN2_bm| PIN3_bm;
    16b4:	12 96       	adiw	r26, 0x02	; 2
    16b6:	4c 93       	st	X, r20
		PORTC.DIRCLR = PIN0_bm | PIN1_bm;
    16b8:	d9 01       	movw	r26, r18
    16ba:	12 96       	adiw	r26, 0x02	; 2
    16bc:	6c 93       	st	X, r22
    16be:	12 97       	sbiw	r26, 0x02	; 2
		PORTE.DIRCLR = PIN4_bm;
    16c0:	5a 83       	std	Y+2, r21	; 0x02
		PORTF.DIRCLR = PIN1_bm | PIN2_bm | PIN3_bm;
    16c2:	ec 01       	movw	r28, r24
    16c4:	4a 83       	std	Y+2, r20	; 0x02
		
		// set SPI-MISO as input
		PORTC.DIRCLR = PIN6_bm;
    16c6:	80 e4       	ldi	r24, 0x40	; 64
    16c8:	12 96       	adiw	r26, 0x02	; 2
    16ca:	8c 93       	st	X, r24
    16cc:	12 97       	sbiw	r26, 0x02	; 2
		
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
    16ce:	10 92 70 50 	sts	0x5070, r1
    16d2:	10 92 99 50 	sts	0x5099, r1
    16d6:	10 92 59 40 	sts	0x4059, r1
    16da:	10 92 6e 50 	sts	0x506E, r1
		channelStatus = 0x00;
    16de:	10 92 6f 50 	sts	0x506F, r1
		
	}
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <CO_collectTemp>:
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    16ec:	2f 92       	push	r2
    16ee:	3f 92       	push	r3
    16f0:	4f 92       	push	r4
    16f2:	5f 92       	push	r5
    16f4:	6f 92       	push	r6
    16f6:	7f 92       	push	r7
    16f8:	8f 92       	push	r8
    16fa:	9f 92       	push	r9
    16fc:	af 92       	push	r10
    16fe:	bf 92       	push	r11
    1700:	cf 92       	push	r12
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	25 97       	sbiw	r28, 0x05	; 5
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	1c 01       	movw	r2, r24
    171c:	6a 83       	std	Y+2, r22	; 0x02
    171e:	7b 83       	std	Y+3, r23	; 0x03
    1720:	4c 83       	std	Y+4, r20	; 0x04
    1722:	5d 83       	std	Y+5, r21	; 0x05
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>

	/* Move stored calibration values to ADCA. */
	ADC_CalibrationValues_Load(&ADCA);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	0e 94 68 07 	call	0xed0	; 0xed0 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    1732:	00 e0       	ldi	r16, 0x00	; 0
    1734:	12 e0       	ldi	r17, 0x02	; 2
    1736:	80 91 01 02 	lds	r24, 0x0201
    173a:	89 7e       	andi	r24, 0xE9	; 233
    173c:	f8 01       	movw	r30, r16
    173e:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV32_gc);
    1740:	80 91 04 02 	lds	r24, 0x0204
    1744:	88 7f       	andi	r24, 0xF8	; 248
    1746:	83 60       	ori	r24, 0x03	; 3
    1748:	84 83       	std	Z+4, r24	; 0x04

	/* Set reference voltage on ADCA to be 1.0 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_INT1V_gc); 
    174a:	80 91 02 02 	lds	r24, 0x0202
    174e:	8f 7c       	andi	r24, 0xCF	; 207
    1750:	82 83       	std	Z+2, r24	; 0x02

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
    1752:	a0 e2       	ldi	r26, 0x20	; 32
    1754:	ca 2e       	mov	r12, r26
    1756:	a2 e0       	ldi	r26, 0x02	; 2
    1758:	da 2e       	mov	r13, r26
    175a:	80 91 20 02 	lds	r24, 0x0220
    175e:	80 7e       	andi	r24, 0xE0	; 224
    1760:	81 60       	ori	r24, 0x01	; 1
    1762:	80 93 20 02 	sts	0x0220, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	/* Get offset value for ADCA. */
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    1766:	89 e0       	ldi	r24, 0x09	; 9
    1768:	f6 01       	movw	r30, r12
    176a:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
    176c:	80 91 00 02 	lds	r24, 0x0200
    1770:	81 60       	ori	r24, 0x01	; 1
    1772:	80 93 00 02 	sts	0x0200, r24
	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	0e 94 06 07 	call	0xe0c	; 0xe0c <ADC_Wait_32MHz>
 	offset = ADC_Offset_Get_Unsigned(&ADCA, &ADCA.CH0, false);
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	60 e2       	ldi	r22, 0x20	; 32
    1784:	72 e0       	ldi	r23, 0x02	; 2
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Offset_Get_Unsigned>
    178c:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCA);
    178e:	80 91 00 02 	lds	r24, 0x0200
    1792:	8e 7f       	andi	r24, 0xFE	; 254
    1794:	80 93 00 02 	sts	0x0200, r24
    
	/* Set input to the channels in ADCA */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    1798:	f6 01       	movw	r30, r12
    179a:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
    179c:	80 91 03 02 	lds	r24, 0x0203
    17a0:	8f 73       	andi	r24, 0x3F	; 63
    17a2:	f8 01       	movw	r30, r16
    17a4:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC .*/
	ADC_Enable(&ADCA);
    17a6:	80 91 00 02 	lds	r24, 0x0200
    17aa:	81 60       	ori	r24, 0x01	; 1
    17ac:	80 93 00 02 	sts	0x0200, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	0e 94 06 07 	call	0xe0c	; 0xe0c <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
    17b8:	80 91 01 02 	lds	r24, 0x0201
    17bc:	88 60       	ori	r24, 0x08	; 8
    17be:	f8 01       	movw	r30, r16
    17c0:	81 83       	std	Z+1, r24	; 0x01
    17c2:	00 e0       	ldi	r16, 0x00	; 0
    17c4:	14 e0       	ldi	r17, 0x04	; 4
void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    17c6:	88 24       	eor	r8, r8
    17c8:	99 24       	eor	r9, r9
    17ca:	54 01       	movw	r10, r8

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResult;
	uint32_t average;
	uint32_t min = 4096;
    17cc:	41 2c       	mov	r4, r1
    17ce:	b0 e1       	ldi	r27, 0x10	; 16
    17d0:	5b 2e       	mov	r5, r27
    17d2:	61 2c       	mov	r6, r1
    17d4:	71 2c       	mov	r7, r1
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
    17d6:	cc 24       	eor	r12, r12
    17d8:	dd 24       	eor	r13, r13
    17da:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
    17dc:	80 91 23 02 	lds	r24, 0x0223
    17e0:	80 ff       	sbrs	r24, 0
    17e2:	fc cf       	rjmp	.-8      	; 0x17dc <CO_collectTemp+0xf0>
		tempResult = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
    17e4:	69 81       	ldd	r22, Y+1	; 0x01
    17e6:	80 e2       	ldi	r24, 0x20	; 32
    17e8:	92 e0       	ldi	r25, 0x02	; 2
    17ea:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <ADC_ResultCh_GetWord_Signed>
		sum+=tempResult;
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	c8 0e       	add	r12, r24
    17f4:	d9 1e       	adc	r13, r25
    17f6:	ea 1e       	adc	r14, r26
    17f8:	fb 1e       	adc	r15, r27
    17fa:	88 16       	cp	r8, r24
    17fc:	99 06       	cpc	r9, r25
    17fe:	aa 06       	cpc	r10, r26
    1800:	bb 06       	cpc	r11, r27
    1802:	10 f4       	brcc	.+4      	; 0x1808 <CO_collectTemp+0x11c>
    1804:	4c 01       	movw	r8, r24
    1806:	5d 01       	movw	r10, r26
    1808:	84 15       	cp	r24, r4
    180a:	95 05       	cpc	r25, r5
    180c:	a6 05       	cpc	r26, r6
    180e:	b7 05       	cpc	r27, r7
    1810:	10 f4       	brcc	.+4      	; 0x1816 <CO_collectTemp+0x12a>
    1812:	2c 01       	movw	r4, r24
    1814:	3d 01       	movw	r6, r26
    1816:	01 50       	subi	r16, 0x01	; 1
    1818:	10 40       	sbci	r17, 0x00	; 0

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);

	/* Sample onboard ADC.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    181a:	01 f7       	brne	.-64     	; 0x17dc <CO_collectTemp+0xf0>
		if (min > tempResult) { min = tempResult;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCA);
    181c:	80 91 01 02 	lds	r24, 0x0201
    1820:	87 7f       	andi	r24, 0xF7	; 247
    1822:	e0 e0       	ldi	r30, 0x00	; 0
    1824:	f2 e0       	ldi	r31, 0x02	; 2
    1826:	81 83       	std	Z+1, r24	; 0x01
	ADC_Pipeline_Flush(&ADCA);
    1828:	80 91 00 02 	lds	r24, 0x0200
    182c:	82 60       	ori	r24, 0x02	; 2
    182e:	80 93 00 02 	sts	0x0200, r24
	ADC_Disable(&ADCA);
    1832:	80 91 00 02 	lds	r24, 0x0200
    1836:	8e 7f       	andi	r24, 0xFE	; 254
    1838:	80 93 00 02 	sts	0x0200, r24

	ADCPower(FALSE);
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>

	average = sum / NUM_SAMPLES;
    1842:	c7 01       	movw	r24, r14
    1844:	b6 01       	movw	r22, r12
    1846:	2a e0       	ldi	r18, 0x0A	; 10
    1848:	96 95       	lsr	r25
    184a:	87 95       	ror	r24
    184c:	77 95       	ror	r23
    184e:	67 95       	ror	r22
    1850:	2a 95       	dec	r18
    1852:	d1 f7       	brne	.-12     	; 0x1848 <CO_collectTemp+0x15c>

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    1854:	28 ee       	ldi	r18, 0xE8	; 232
    1856:	33 e0       	ldi	r19, 0x03	; 3
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    1860:	ef ef       	ldi	r30, 0xFF	; 255
    1862:	ce 2e       	mov	r12, r30
    1864:	ef e0       	ldi	r30, 0x0F	; 15
    1866:	de 2e       	mov	r13, r30
    1868:	e1 2c       	mov	r14, r1
    186a:	f1 2c       	mov	r15, r1
    186c:	a7 01       	movw	r20, r14
    186e:	96 01       	movw	r18, r12
    1870:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    1874:	c9 01       	movw	r24, r18
    1876:	c2 97       	sbiw	r24, 0x32	; 50
    1878:	f1 01       	movw	r30, r2
    187a:	80 83       	st	Z, r24
    187c:	91 83       	std	Z+1, r25	; 0x01
	*maxV = (max * 1000 / 4095) - 50;
    187e:	c5 01       	movw	r24, r10
    1880:	b4 01       	movw	r22, r8
    1882:	28 ee       	ldi	r18, 0xE8	; 232
    1884:	33 e0       	ldi	r19, 0x03	; 3
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    188e:	a7 01       	movw	r20, r14
    1890:	96 01       	movw	r18, r12
    1892:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    1896:	22 53       	subi	r18, 0x32	; 50
    1898:	30 40       	sbci	r19, 0x00	; 0
    189a:	ec 81       	ldd	r30, Y+4	; 0x04
    189c:	fd 81       	ldd	r31, Y+5	; 0x05
    189e:	20 83       	st	Z, r18
    18a0:	31 83       	std	Z+1, r19	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    18a2:	c3 01       	movw	r24, r6
    18a4:	b2 01       	movw	r22, r4
    18a6:	28 ee       	ldi	r18, 0xE8	; 232
    18a8:	33 e0       	ldi	r19, 0x03	; 3
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    18b2:	a7 01       	movw	r20, r14
    18b4:	96 01       	movw	r18, r12
    18b6:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    18ba:	22 53       	subi	r18, 0x32	; 50
    18bc:	30 40       	sbci	r19, 0x00	; 0
    18be:	ea 81       	ldd	r30, Y+2	; 0x02
    18c0:	fb 81       	ldd	r31, Y+3	; 0x03
    18c2:	20 83       	st	Z, r18
    18c4:	31 83       	std	Z+1, r19	; 0x01
}
    18c6:	25 96       	adiw	r28, 0x05	; 5
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	bf 90       	pop	r11
    18de:	af 90       	pop	r10
    18e0:	9f 90       	pop	r9
    18e2:	8f 90       	pop	r8
    18e4:	7f 90       	pop	r7
    18e6:	6f 90       	pop	r6
    18e8:	5f 90       	pop	r5
    18ea:	4f 90       	pop	r4
    18ec:	3f 90       	pop	r3
    18ee:	2f 90       	pop	r2
    18f0:	08 95       	ret

000018f2 <CO_collectBatt>:


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    18f2:	2f 92       	push	r2
    18f4:	3f 92       	push	r3
    18f6:	4f 92       	push	r4
    18f8:	5f 92       	push	r5
    18fa:	6f 92       	push	r6
    18fc:	7f 92       	push	r7
    18fe:	8f 92       	push	r8
    1900:	9f 92       	push	r9
    1902:	af 92       	push	r10
    1904:	bf 92       	push	r11
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	25 97       	sbiw	r28, 0x05	; 5
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	1c 01       	movw	r2, r24
    1922:	6a 83       	std	Y+2, r22	; 0x02
    1924:	7b 83       	std	Y+3, r23	; 0x03
    1926:	4c 83       	std	Y+4, r20	; 0x04
    1928:	5d 83       	std	Y+5, r21	; 0x05
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	PortEx_DIRSET(BIT2_bm, PS_BANKB);
    1930:	84 e0       	ldi	r24, 0x04	; 4
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	0e 94 a1 0a 	call	0x1542	; 0x1542 <PortEx_DIRSET>
	PortEx_OUTSET(BIT2_bm, PS_BANKB); // activate PIO24 (VBATT)
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	0e 94 ca 09 	call	0x1394	; 0x1394 <PortEx_OUTSET>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	93 ec       	ldi	r25, 0xC3	; 195
    1944:	a9 e0       	ldi	r26, 0x09	; 9
    1946:	81 50       	subi	r24, 0x01	; 1
    1948:	90 40       	sbci	r25, 0x00	; 0
    194a:	a0 40       	sbci	r26, 0x00	; 0
    194c:	e1 f7       	brne	.-8      	; 0x1946 <CO_collectBatt+0x54>
    194e:	00 c0       	rjmp	.+0      	; 0x1950 <CO_collectBatt+0x5e>
    1950:	00 00       	nop
	_delay_ms(100);
	//setPortEx(BIT2_bm, PS_BANKB);
		
	/* Move stored calibration values to ADCB. */
	ADC_CalibrationValues_Load(&ADCB);
    1952:	80 e4       	ldi	r24, 0x40	; 64
    1954:	92 e0       	ldi	r25, 0x02	; 2
    1956:	0e 94 68 07 	call	0xed0	; 0xed0 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    195a:	00 e4       	ldi	r16, 0x40	; 64
    195c:	12 e0       	ldi	r17, 0x02	; 2
    195e:	80 91 41 02 	lds	r24, 0x0241
    1962:	89 7e       	andi	r24, 0xE9	; 233
    1964:	d8 01       	movw	r26, r16
    1966:	11 96       	adiw	r26, 0x01	; 1
    1968:	8c 93       	st	X, r24
    196a:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV32_gc);
    196c:	80 91 44 02 	lds	r24, 0x0244
    1970:	88 7f       	andi	r24, 0xF8	; 248
    1972:	83 60       	ori	r24, 0x03	; 3
    1974:	14 96       	adiw	r26, 0x04	; 4
    1976:	8c 93       	st	X, r24
    1978:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADCB to be 1.0 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_INT1V_gc); 
    197a:	80 91 42 02 	lds	r24, 0x0242
    197e:	8f 7c       	andi	r24, 0xCF	; 207
    1980:	12 96       	adiw	r26, 0x02	; 2
    1982:	8c 93       	st	X, r24

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
    1984:	80 e6       	ldi	r24, 0x60	; 96
    1986:	c8 2e       	mov	r12, r24
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	d8 2e       	mov	r13, r24
    198c:	80 91 60 02 	lds	r24, 0x0260
    1990:	80 7e       	andi	r24, 0xE0	; 224
    1992:	81 60       	ori	r24, 0x01	; 1
    1994:	80 93 60 02 	sts	0x0260, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	// Get offset value for ADCB.
   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    1998:	89 e0       	ldi	r24, 0x09	; 9
    199a:	f6 01       	movw	r30, r12
    199c:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
    199e:	80 91 40 02 	lds	r24, 0x0240
    19a2:	81 60       	ori	r24, 0x01	; 1
    19a4:	80 93 40 02 	sts	0x0240, r24
	// Wait until common mode voltage is stable. Default clk is 16MHz
	ADC_Wait_32MHz(&ADCB);
    19a8:	80 e4       	ldi	r24, 0x40	; 64
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	0e 94 06 07 	call	0xe0c	; 0xe0c <ADC_Wait_32MHz>
	offset = ADC_Offset_Get_Unsigned(&ADCB, &ADCB.CH0, false);
    19b0:	80 e4       	ldi	r24, 0x40	; 64
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	60 e6       	ldi	r22, 0x60	; 96
    19b6:	72 e0       	ldi	r23, 0x02	; 2
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Offset_Get_Unsigned>
    19be:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCB);
    19c0:	80 91 40 02 	lds	r24, 0x0240
    19c4:	8e 7f       	andi	r24, 0xFE	; 254
    19c6:	80 93 40 02 	sts	0x0240, r24
    
	/* Set input to the channels in ADC B */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    19ca:	d6 01       	movw	r26, r12
    19cc:	11 96       	adiw	r26, 0x01	; 1
    19ce:	1c 92       	st	X, r1
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0_gc);
    19d0:	80 91 43 02 	lds	r24, 0x0243
    19d4:	8f 73       	andi	r24, 0x3F	; 63
    19d6:	f8 01       	movw	r30, r16
    19d8:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC .*/
	ADC_Enable(&ADCB);
    19da:	80 91 40 02 	lds	r24, 0x0240
    19de:	81 60       	ori	r24, 0x01	; 1
    19e0:	80 93 40 02 	sts	0x0240, r24

	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
    19e4:	80 e4       	ldi	r24, 0x40	; 64
    19e6:	92 e0       	ldi	r25, 0x02	; 2
    19e8:	0e 94 06 07 	call	0xe0c	; 0xe0c <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);
    19ec:	80 91 41 02 	lds	r24, 0x0241
    19f0:	88 60       	ori	r24, 0x08	; 8
    19f2:	d8 01       	movw	r26, r16
    19f4:	11 96       	adiw	r26, 0x01	; 1
    19f6:	8c 93       	st	X, r24
    19f8:	11 97       	sbiw	r26, 0x01	; 1
    19fa:	00 e0       	ldi	r16, 0x00	; 0
    19fc:	14 e0       	ldi	r17, 0x04	; 4
void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
    19fe:	88 24       	eor	r8, r8
    1a00:	99 24       	eor	r9, r9
    1a02:	54 01       	movw	r10, r8

void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
	uint16_t tempResultB;
	uint32_t average;
	uint32_t min = 4096;
    1a04:	41 2c       	mov	r4, r1
    1a06:	20 e1       	ldi	r18, 0x10	; 16
    1a08:	52 2e       	mov	r5, r18
    1a0a:	61 2c       	mov	r6, r1
    1a0c:	71 2c       	mov	r7, r1
	*minV = (min * 1000  / 4095) - 50;
}


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
	uint32_t sum = 0;
    1a0e:	cc 24       	eor	r12, r12
    1a10:	dd 24       	eor	r13, r13
    1a12:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCB channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCB.CH0));
    1a14:	80 91 63 02 	lds	r24, 0x0263
    1a18:	80 ff       	sbrs	r24, 0
    1a1a:	fc cf       	rjmp	.-8      	; 0x1a14 <CO_collectBatt+0x122>
		tempResultB = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, offset);
    1a1c:	69 81       	ldd	r22, Y+1	; 0x01
    1a1e:	80 e6       	ldi	r24, 0x60	; 96
    1a20:	92 e0       	ldi	r25, 0x02	; 2
    1a22:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <ADC_ResultCh_GetWord_Signed>
		sum+=tempResultB;
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	c8 0e       	add	r12, r24
    1a2c:	d9 1e       	adc	r13, r25
    1a2e:	ea 1e       	adc	r14, r26
    1a30:	fb 1e       	adc	r15, r27
    1a32:	88 16       	cp	r8, r24
    1a34:	99 06       	cpc	r9, r25
    1a36:	aa 06       	cpc	r10, r26
    1a38:	bb 06       	cpc	r11, r27
    1a3a:	10 f4       	brcc	.+4      	; 0x1a40 <CO_collectBatt+0x14e>
    1a3c:	4c 01       	movw	r8, r24
    1a3e:	5d 01       	movw	r10, r26
    1a40:	84 15       	cp	r24, r4
    1a42:	95 05       	cpc	r25, r5
    1a44:	a6 05       	cpc	r26, r6
    1a46:	b7 05       	cpc	r27, r7
    1a48:	10 f4       	brcc	.+4      	; 0x1a4e <CO_collectBatt+0x15c>
    1a4a:	2c 01       	movw	r4, r24
    1a4c:	3d 01       	movw	r6, r26
    1a4e:	01 50       	subi	r16, 0x01	; 1
    1a50:	10 40       	sbci	r17, 0x00	; 0

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);

	/* Store samples.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    1a52:	01 f7       	brne	.-64     	; 0x1a14 <CO_collectBatt+0x122>
		if (min > tempResultB) { min = tempResultB;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
    1a54:	80 91 41 02 	lds	r24, 0x0241
    1a58:	87 7f       	andi	r24, 0xF7	; 247
    1a5a:	e0 e4       	ldi	r30, 0x40	; 64
    1a5c:	f2 e0       	ldi	r31, 0x02	; 2
    1a5e:	81 83       	std	Z+1, r24	; 0x01
	ADC_Disable(&ADCB);
    1a60:	80 91 40 02 	lds	r24, 0x0240
    1a64:	8e 7f       	andi	r24, 0xFE	; 254
    1a66:	80 93 40 02 	sts	0x0240, r24

	average = sum / NUM_SAMPLES;
	
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <PortEx_DIRCLR>
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
	ADC_Disable(&ADCB);

	average = sum / NUM_SAMPLES;
    1a78:	c7 01       	movw	r24, r14
    1a7a:	b6 01       	movw	r22, r12
    1a7c:	1a e0       	ldi	r17, 0x0A	; 10
    1a7e:	96 95       	lsr	r25
    1a80:	87 95       	ror	r24
    1a82:	77 95       	ror	r23
    1a84:	67 95       	ror	r22
    1a86:	1a 95       	dec	r17
    1a88:	d1 f7       	brne	.-12     	; 0x1a7e <CO_collectBatt+0x18c>
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    1a8a:	28 ee       	ldi	r18, 0xE8	; 232
    1a8c:	33 e0       	ldi	r19, 0x03	; 3
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    1a96:	0f ef       	ldi	r16, 0xFF	; 255
    1a98:	c0 2e       	mov	r12, r16
    1a9a:	0f e0       	ldi	r16, 0x0F	; 15
    1a9c:	d0 2e       	mov	r13, r16
    1a9e:	e1 2c       	mov	r14, r1
    1aa0:	f1 2c       	mov	r15, r1
    1aa2:	a7 01       	movw	r20, r14
    1aa4:	96 01       	movw	r18, r12
    1aa6:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    1aaa:	c9 01       	movw	r24, r18
    1aac:	c2 97       	sbiw	r24, 0x32	; 50
    1aae:	f1 01       	movw	r30, r2
    1ab0:	80 83       	st	Z, r24
    1ab2:	91 83       	std	Z+1, r25	; 0x01
	*maxV = (max * 1000 / 4095) - 50;
    1ab4:	c5 01       	movw	r24, r10
    1ab6:	b4 01       	movw	r22, r8
    1ab8:	28 ee       	ldi	r18, 0xE8	; 232
    1aba:	33 e0       	ldi	r19, 0x03	; 3
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    1ac4:	a7 01       	movw	r20, r14
    1ac6:	96 01       	movw	r18, r12
    1ac8:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    1acc:	22 53       	subi	r18, 0x32	; 50
    1ace:	30 40       	sbci	r19, 0x00	; 0
    1ad0:	ac 81       	ldd	r26, Y+4	; 0x04
    1ad2:	bd 81       	ldd	r27, Y+5	; 0x05
    1ad4:	2d 93       	st	X+, r18
    1ad6:	3c 93       	st	X, r19
    1ad8:	11 97       	sbiw	r26, 0x01	; 1
	*minV = (min * 1000  / 4095) - 50;
    1ada:	c3 01       	movw	r24, r6
    1adc:	b2 01       	movw	r22, r4
    1ade:	28 ee       	ldi	r18, 0xE8	; 232
    1ae0:	33 e0       	ldi	r19, 0x03	; 3
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    1aea:	a7 01       	movw	r20, r14
    1aec:	96 01       	movw	r18, r12
    1aee:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    1af2:	22 53       	subi	r18, 0x32	; 50
    1af4:	30 40       	sbci	r19, 0x00	; 0
    1af6:	ea 81       	ldd	r30, Y+2	; 0x02
    1af8:	fb 81       	ldd	r31, Y+3	; 0x03
    1afa:	20 83       	st	Z, r18
    1afc:	31 83       	std	Z+1, r19	; 0x01
}
    1afe:	25 96       	adiw	r28, 0x05	; 5
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	bf 90       	pop	r11
    1b16:	af 90       	pop	r10
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	7f 90       	pop	r7
    1b1e:	6f 90       	pop	r6
    1b20:	5f 90       	pop	r5
    1b22:	4f 90       	pop	r4
    1b24:	3f 90       	pop	r3
    1b26:	2f 90       	pop	r2
    1b28:	08 95       	ret

00001b2a <__vector_104>:
	*maxV = (int32_t) -(max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
	*minV = (int32_t) -(min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);

}

ISR(PORTF_INT0_vect) {
    1b2a:	1f 92       	push	r1
    1b2c:	0f 92       	push	r0
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	0f 92       	push	r0
    1b32:	0b b6       	in	r0, 0x3b	; 59
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
	// skip first samples because cannot perform recommended reset
	if (discardCount < ADC_DISCARD) {
    1b50:	80 91 5c 40 	lds	r24, 0x405C
    1b54:	87 fd       	sbrc	r24, 7
    1b56:	06 c0       	rjmp	.+12     	; 0x1b64 <__vector_104+0x3a>
		discardCount++;
    1b58:	80 91 5c 40 	lds	r24, 0x405C
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	80 93 5c 40 	sts	0x405C, r24
    1b62:	64 c0       	rjmp	.+200    	; 0x1c2c <__vector_104+0x102>
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	e0 ea       	ldi	r30, 0xA0	; 160
    1b6e:	f6 e0       	ldi	r31, 0x06	; 6
    1b70:	86 83       	std	Z+6, r24	; 0x06
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1b76:	e0 ec       	ldi	r30, 0xC0	; 192
    1b78:	f8 e0       	ldi	r31, 0x08	; 8
    1b7a:	2a ea       	ldi	r18, 0xAA	; 170
    1b7c:	23 83       	std	Z+3, r18	; 0x03
			while(!(SPIC.STATUS & SPI_IF_bm));
    1b7e:	30 91 c2 08 	lds	r19, 0x08C2
    1b82:	37 ff       	sbrs	r19, 7
    1b84:	fc cf       	rjmp	.-8      	; 0x1b7e <__vector_104+0x54>
			SPIBuffer[bufIndex] = SPIC.DATA;
    1b86:	30 91 c3 08 	lds	r19, 0x08C3
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	a1 5a       	subi	r26, 0xA1	; 161
    1b8e:	bf 4a       	sbci	r27, 0xAF	; 175
    1b90:	3c 93       	st	X, r19
    1b92:	01 96       	adiw	r24, 0x01	; 1
		discardCount++;
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	89 f7       	brne	.-30     	; 0x1b7c <__vector_104+0x52>
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	e0 ea       	ldi	r30, 0xA0	; 160
    1b9e:	f6 e0       	ldi	r31, 0x06	; 6
    1ba0:	85 83       	std	Z+5, r24	; 0x05
		SPICS(FALSE);
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>

		// create 32 bits from SPIBuffer[0:2] with sign extension of SPIBuffer[0][7]
		if(SPIBuffer[0] & BIT7_bm) *(((uint8_t*)&data24Bit[sampleCount]) + 3) = 0xFF; // sign extension if negative
    1ba8:	80 91 5f 50 	lds	r24, 0x505F
    1bac:	e0 91 6c 50 	lds	r30, 0x506C
    1bb0:	f0 91 6d 50 	lds	r31, 0x506D
    1bb4:	ee 0f       	add	r30, r30
    1bb6:	ff 1f       	adc	r31, r31
    1bb8:	ee 0f       	add	r30, r30
    1bba:	ff 1f       	adc	r31, r31
    1bbc:	e0 5a       	subi	r30, 0xA0	; 160
    1bbe:	ff 4b       	sbci	r31, 0xBF	; 191
    1bc0:	87 ff       	sbrs	r24, 7
    1bc2:	03 c0       	rjmp	.+6      	; 0x1bca <__vector_104+0xa0>
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	80 83       	st	Z, r24
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <__vector_104+0xa2>
		else *(((uint8_t*)&data24Bit[sampleCount]) + 3) = 0x00;
    1bca:	10 82       	st	Z, r1
	
		*(((uint8_t*)&data24Bit[sampleCount]) + 2) = SPIBuffer[0];
    1bcc:	e0 91 6c 50 	lds	r30, 0x506C
    1bd0:	f0 91 6d 50 	lds	r31, 0x506D
    1bd4:	80 91 5f 50 	lds	r24, 0x505F
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	ee 0f       	add	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	e1 5a       	subi	r30, 0xA1	; 161
    1be2:	ff 4b       	sbci	r31, 0xBF	; 191
    1be4:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 1) = SPIBuffer[1];
    1be6:	e0 91 6c 50 	lds	r30, 0x506C
    1bea:	f0 91 6d 50 	lds	r31, 0x506D
    1bee:	80 91 60 50 	lds	r24, 0x5060
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	e2 5a       	subi	r30, 0xA2	; 162
    1bfc:	ff 4b       	sbci	r31, 0xBF	; 191
    1bfe:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 0) = SPIBuffer[2];
    1c00:	e0 91 6c 50 	lds	r30, 0x506C
    1c04:	f0 91 6d 50 	lds	r31, 0x506D
    1c08:	ee 0f       	add	r30, r30
    1c0a:	ff 1f       	adc	r31, r31
    1c0c:	ee 0f       	add	r30, r30
    1c0e:	ff 1f       	adc	r31, r31
    1c10:	e3 5a       	subi	r30, 0xA3	; 163
    1c12:	ff 4b       	sbci	r31, 0xBF	; 191
    1c14:	80 91 61 50 	lds	r24, 0x5061
    1c18:	80 83       	st	Z, r24

		sampleCount++;
    1c1a:	80 91 6c 50 	lds	r24, 0x506C
    1c1e:	90 91 6d 50 	lds	r25, 0x506D
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	80 93 6c 50 	sts	0x506C, r24
    1c28:	90 93 6d 50 	sts	0x506D, r25
	}
}
    1c2c:	ff 91       	pop	r31
    1c2e:	ef 91       	pop	r30
    1c30:	bf 91       	pop	r27
    1c32:	af 91       	pop	r26
    1c34:	9f 91       	pop	r25
    1c36:	8f 91       	pop	r24
    1c38:	7f 91       	pop	r23
    1c3a:	6f 91       	pop	r22
    1c3c:	5f 91       	pop	r21
    1c3e:	4f 91       	pop	r20
    1c40:	3f 91       	pop	r19
    1c42:	2f 91       	pop	r18
    1c44:	0f 90       	pop	r0
    1c46:	0b be       	out	0x3b, r0	; 59
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	0f 90       	pop	r0
    1c4e:	1f 90       	pop	r1
    1c50:	18 95       	reti

00001c52 <ACC_DCPassEnable>:

// Enable DC Pass for acc
// Pull PIO27 high to enable
void ACC_DCPassEnable(uint8_t enable) {
	if (enable) {
    1c52:	88 23       	and	r24, r24
    1c54:	49 f0       	breq	.+18     	; 0x1c68 <ACC_DCPassEnable+0x16>
		PortEx_DIRSET(BIT5_bm, PS_BANKB);
    1c56:	80 e2       	ldi	r24, 0x20	; 32
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <PortEx_DIRSET>
		PortEx_OUTSET(BIT5_bm, PS_BANKB);
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	0e 94 ca 09 	call	0x1394	; 0x1394 <PortEx_OUTSET>
    1c66:	08 95       	ret
		//setPortEx(BIT5_bm, PS_BANKB);
	} else {
		PortEx_DIRCLR(BIT5_bm, PS_BANKB);
    1c68:	80 e2       	ldi	r24, 0x20	; 32
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <PortEx_DIRCLR>
    1c70:	08 95       	ret

00001c72 <CO_collectADC>:
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {
    1c72:	2f 92       	push	r2
    1c74:	3f 92       	push	r3
    1c76:	4f 92       	push	r4
    1c78:	5f 92       	push	r5
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	61 97       	sbiw	r28, 0x11	; 17
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	f8 2e       	mov	r15, r24
    1ca2:	d6 2e       	mov	r13, r22
    1ca4:	4a 87       	std	Y+10, r20	; 0x0a
    1ca6:	5b 87       	std	Y+11, r21	; 0x0b
    1ca8:	2c 87       	std	Y+12, r18	; 0x0c
    1caa:	3d 87       	std	Y+13, r19	; 0x0d
    1cac:	0e 87       	std	Y+14, r16	; 0x0e
    1cae:	1f 87       	std	Y+15, r17	; 0x0f
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
	uint16_t period;
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gainExponent);
    1cb6:	8f 2d       	mov	r24, r15
    1cb8:	6e 2d       	mov	r22, r14
    1cba:	0e 94 1d 0a 	call	0x143a	; 0x143a <set_ampGain>
	set_filter(filterConfig);
    1cbe:	8d 2d       	mov	r24, r13
    1cc0:	0e 94 12 09 	call	0x1224	; 0x1224 <set_filter>

	// if acc channel then enable DC Pass 
	// it is assumed that if not using high frequency acc specific function then 
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
    1cc4:	8f 2d       	mov	r24, r15
    1cc6:	85 50       	subi	r24, 0x05	; 5
    1cc8:	83 30       	cpi	r24, 0x03	; 3
    1cca:	18 f4       	brcc	.+6      	; 0x1cd2 <CO_collectADC+0x60>
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <ACC_DCPassEnable>

	enableADCMUX(TRUE);
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	0e 94 99 08 	call	0x1132	; 0x1132 <enableADCMUX>
	setADCInput(channel);
    1cd8:	8f 2d       	mov	r24, r15
    1cda:	0e 94 bd 08 	call	0x117a	; 0x117a <setADCInput>
	SPIInit(SPI_MODE_1_gc);
    1cde:	84 e0       	ldi	r24, 0x04	; 4
    1ce0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    1ce4:	84 e5       	ldi	r24, 0x54	; 84
    1ce6:	80 93 c0 08 	sts	0x08C0, r24
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.DIRCLR = PIN0_bm;
    1cea:	e0 ea       	ldi	r30, 0xA0	; 160
    1cec:	f6 e0       	ldi	r31, 0x06	; 6
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	82 83       	std	Z+2, r24	; 0x02
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.INT0MASK = PIN0_bm;
    1cf6:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_LO_gc;
    1cf8:	81 87       	std	Z+9, r24	; 0x09

	// Configure clock for AD7767 MCLK for desired sample frequency
	// f_samples = f_MCLK / 16
	// f_MCLK = f_peripheral(2^25Hz) / (f_period + 1Hz)
	// Set IO14 (PE5) to output
	PORTE.DIRSET = PIN5_bm;
    1cfa:	80 e2       	ldi	r24, 0x20	; 32
    1cfc:	e0 e8       	ldi	r30, 0x80	; 128
    1cfe:	f6 e0       	ldi	r31, 0x06	; 6
    1d00:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    1d02:	e0 e4       	ldi	r30, 0x40	; 64
    1d04:	fa e0       	ldi	r31, 0x0A	; 10
    1d06:	83 e2       	ldi	r24, 0x23	; 35
    1d08:	81 83       	std	Z+1, r24	; 0x01
	// set period
	period = (1 << (21 - spsExponent)) - 1;
    1d0a:	25 e1       	ldi	r18, 0x15	; 21
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	2c 19       	sub	r18, r12
    1d10:	31 09       	sbc	r19, r1
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <CO_collectADC+0xaa>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	2a 95       	dec	r18
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <CO_collectADC+0xa6>
    1d20:	01 97       	sbiw	r24, 0x01	; 1
	TCE1.PER = period;
    1d22:	86 a3       	lds	r24, 0x56
    1d24:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = period / 2;
    1d26:	96 95       	lsr	r25
    1d28:	87 95       	ror	r24
    1d2a:	82 af       	sts	0x72, r24
    1d2c:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1d2e:	80 91 40 0a 	lds	r24, 0x0A40
    1d32:	80 7f       	andi	r24, 0xF0	; 240
    1d34:	81 60       	ori	r24, 0x01	; 1
    1d36:	80 93 40 0a 	sts	0x0A40, r24
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1d3a:	80 91 a2 00 	lds	r24, 0x00A2
    1d3e:	81 60       	ori	r24, 0x01	; 1
    1d40:	e0 ea       	ldi	r30, 0xA0	; 160
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	82 83       	std	Z+2, r24	; 0x02
	sei();
    1d46:	78 94       	sei

	sampleCount = 0;
    1d48:	10 92 6c 50 	sts	0x506C, r1
    1d4c:	10 92 6d 50 	sts	0x506D, r1
	discardCount = 0;
    1d50:	10 92 5c 40 	sts	0x405C, r1
	
	// wait for ADC to collect samples
	while(sampleCount < NUM_SAMPLES);
    1d54:	80 91 6c 50 	lds	r24, 0x506C
    1d58:	90 91 6d 50 	lds	r25, 0x506D
    1d5c:	24 e0       	ldi	r18, 0x04	; 4
    1d5e:	80 30       	cpi	r24, 0x00	; 0
    1d60:	92 07       	cpc	r25, r18
    1d62:	c0 f3       	brcs	.-16     	; 0x1d54 <CO_collectADC+0xe2>

	// turn off timer and interupts
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1d64:	80 91 40 0a 	lds	r24, 0x0A40
    1d68:	80 7f       	andi	r24, 0xF0	; 240
    1d6a:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~PMIC_LOLVLEN_bm;	
    1d6e:	80 91 a2 00 	lds	r24, 0x00A2
    1d72:	8e 7f       	andi	r24, 0xFE	; 254
    1d74:	e0 ea       	ldi	r30, 0xA0	; 160
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	82 83       	std	Z+2, r24	; 0x02
	cli();
    1d7a:	f8 94       	cli

	SPIDisable();	
    1d7c:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
	enableADCMUX(FALSE);
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	0e 94 99 08 	call	0x1132	; 0x1132 <enableADCMUX>
	ADCPower(FALSE);
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    1d8c:	10 92 6c 50 	sts	0x506C, r1
    1d90:	10 92 6d 50 	sts	0x506D, r1
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
    1d94:	31 e0       	ldi	r19, 0x01	; 1
    1d96:	38 87       	std	Y+8, r19	; 0x08
    1d98:	1d 82       	std	Y+5, r1	; 0x05
    1d9a:	50 e8       	ldi	r21, 0x80	; 128
    1d9c:	5e 83       	std	Y+6, r21	; 0x06
    1d9e:	6f ef       	ldi	r22, 0xFF	; 255
    1da0:	69 87       	std	Y+9, r22	; 0x09
    1da2:	44 24       	eor	r4, r4
    1da4:	4a 94       	dec	r4
    1da6:	33 24       	eor	r3, r3
    1da8:	3a 94       	dec	r3
    1daa:	22 24       	eor	r2, r2
    1dac:	2a 94       	dec	r2
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	88 8b       	std	Y+16, r24	; 0x10
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
	int64_t average;
	int64_t min = ADC_MAX;
    1db2:	9f ef       	ldi	r25, 0xFF	; 255
    1db4:	9f 83       	std	Y+7, r25	; 0x07
    1db6:	af ef       	ldi	r26, 0xFF	; 255
    1db8:	a9 83       	std	Y+1, r26	; 0x01
    1dba:	bf e7       	ldi	r27, 0x7F	; 127
    1dbc:	ba 83       	std	Y+2, r27	; 0x02
    1dbe:	1b 82       	std	Y+3, r1	; 0x03
    1dc0:	1c 82       	std	Y+4, r1	; 0x04
    1dc2:	66 24       	eor	r6, r6
    1dc4:	55 24       	eor	r5, r5
    1dc6:	77 24       	eor	r7, r7
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {

	int64_t sum = 0;
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	a0 e0       	ldi	r26, 0x00	; 0
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
    1dce:	00 e0       	ldi	r16, 0x00	; 0
    1dd0:	cc 24       	eor	r12, r12
    1dd2:	88 24       	eor	r8, r8
    1dd4:	ff 24       	eor	r15, r15
    1dd6:	e0 e0       	ldi	r30, 0x00	; 0
    1dd8:	ef 2e       	mov	r14, r31
    1dda:	a9 8b       	std	Y+17, r26	; 0x11
    1ddc:	2e 2f       	mov	r18, r30
    1dde:	99 24       	eor	r9, r9
    1de0:	9a 94       	dec	r9
	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    1de2:	18 c1       	rjmp	.+560    	; 0x2014 <CO_collectADC+0x3a2>
		sum += data24Bit[sampleCount];
    1de4:	e0 91 6c 50 	lds	r30, 0x506C
    1de8:	f0 91 6d 50 	lds	r31, 0x506D
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	ee 0f       	add	r30, r30
    1df2:	ff 1f       	adc	r31, r31
    1df4:	e3 5a       	subi	r30, 0xA3	; 163
    1df6:	ff 4b       	sbci	r31, 0xBF	; 191
    1df8:	40 81       	ld	r20, Z
    1dfa:	51 81       	ldd	r21, Z+1	; 0x01
    1dfc:	62 81       	ldd	r22, Z+2	; 0x02
    1dfe:	73 81       	ldd	r23, Z+3	; 0x03
    1e00:	35 2f       	mov	r19, r21
    1e02:	fb 01       	movw	r30, r22
    1e04:	db 01       	movw	r26, r22
    1e06:	ca 01       	movw	r24, r20
    1e08:	bb 0f       	add	r27, r27
    1e0a:	88 0b       	sbc	r24, r24
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	dc 01       	movw	r26, r24
    1e10:	d8 2e       	mov	r13, r24
    1e12:	b8 2e       	mov	r11, r24
    1e14:	a8 2e       	mov	r10, r24
    1e16:	4e 0d       	add	r20, r14
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	4e 15       	cp	r20, r14
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <CO_collectADC+0x1ae>
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	59 89       	ldd	r21, Y+17	; 0x11
    1e22:	35 0f       	add	r19, r21
    1e24:	51 e0       	ldi	r21, 0x01	; 1
    1e26:	69 89       	ldd	r22, Y+17	; 0x11
    1e28:	36 17       	cp	r19, r22
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <CO_collectADC+0x1bc>
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	69 2f       	mov	r22, r25
    1e30:	63 0f       	add	r22, r19
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	63 17       	cp	r22, r19
    1e36:	08 f0       	brcs	.+2      	; 0x1e3a <CO_collectADC+0x1c8>
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	59 2b       	or	r21, r25
    1e3c:	e1 0f       	add	r30, r17
    1e3e:	91 e0       	ldi	r25, 0x01	; 1
    1e40:	e1 17       	cp	r30, r17
    1e42:	08 f0       	brcs	.+2      	; 0x1e46 <CO_collectADC+0x1d4>
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	15 2f       	mov	r17, r21
    1e48:	1e 0f       	add	r17, r30
    1e4a:	31 e0       	ldi	r19, 0x01	; 1
    1e4c:	1e 17       	cp	r17, r30
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <CO_collectADC+0x1e0>
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	93 2b       	or	r25, r19
    1e54:	f0 0f       	add	r31, r16
    1e56:	31 e0       	ldi	r19, 0x01	; 1
    1e58:	f0 17       	cp	r31, r16
    1e5a:	08 f0       	brcs	.+2      	; 0x1e5e <CO_collectADC+0x1ec>
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	09 2f       	mov	r16, r25
    1e60:	0f 0f       	add	r16, r31
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	0f 17       	cp	r16, r31
    1e66:	08 f0       	brcs	.+2      	; 0x1e6a <CO_collectADC+0x1f8>
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	39 2b       	or	r19, r25
    1e6c:	dc 0c       	add	r13, r12
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	dc 14       	cp	r13, r12
    1e72:	08 f0       	brcs	.+2      	; 0x1e76 <CO_collectADC+0x204>
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	c3 2e       	mov	r12, r19
    1e78:	cd 0c       	add	r12, r13
    1e7a:	31 e0       	ldi	r19, 0x01	; 1
    1e7c:	cd 14       	cp	r12, r13
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <CO_collectADC+0x210>
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	93 2b       	or	r25, r19
    1e84:	b8 0c       	add	r11, r8
    1e86:	51 e0       	ldi	r21, 0x01	; 1
    1e88:	b8 14       	cp	r11, r8
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <CO_collectADC+0x21c>
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	89 2e       	mov	r8, r25
    1e90:	8b 0c       	add	r8, r11
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	8b 14       	cp	r8, r11
    1e96:	08 f0       	brcs	.+2      	; 0x1e9a <CO_collectADC+0x228>
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	59 2b       	or	r21, r25
    1e9c:	af 0c       	add	r10, r15
    1e9e:	31 e0       	ldi	r19, 0x01	; 1
    1ea0:	af 14       	cp	r10, r15
    1ea2:	08 f0       	brcs	.+2      	; 0x1ea6 <CO_collectADC+0x234>
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	f5 2e       	mov	r15, r21
    1ea8:	fa 0c       	add	r15, r10
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	fa 14       	cp	r15, r10
    1eae:	08 f0       	brcs	.+2      	; 0x1eb2 <CO_collectADC+0x240>
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	39 2b       	or	r19, r25
    1eb4:	28 0f       	add	r18, r24
    1eb6:	e4 2e       	mov	r14, r20
    1eb8:	69 8b       	std	Y+17, r22	; 0x11
    1eba:	23 0f       	add	r18, r19
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
    1ebc:	e0 91 6c 50 	lds	r30, 0x506C
    1ec0:	f0 91 6d 50 	lds	r31, 0x506D
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 1f       	adc	r31, r31
    1ecc:	e3 5a       	subi	r30, 0xA3	; 163
    1ece:	ff 4b       	sbci	r31, 0xBF	; 191
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ed6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ed8:	68 2f       	mov	r22, r24
    1eda:	39 2f       	mov	r19, r25
    1edc:	ad 01       	movw	r20, r26
    1ede:	bb 0f       	add	r27, r27
    1ee0:	88 0b       	sbc	r24, r24
    1ee2:	98 2f       	mov	r25, r24
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	98 89       	ldd	r25, Y+16	; 0x10
    1ee8:	98 17       	cp	r25, r24
    1eea:	fc f0       	brlt	.+62     	; 0x1f2a <CO_collectADC+0x2b8>
    1eec:	89 17       	cp	r24, r25
    1eee:	b9 f5       	brne	.+110    	; 0x1f5e <CO_collectADC+0x2ec>
    1ef0:	29 16       	cp	r2, r25
    1ef2:	d8 f0       	brcs	.+54     	; 0x1f2a <CO_collectADC+0x2b8>
    1ef4:	92 15       	cp	r25, r2
    1ef6:	99 f5       	brne	.+102    	; 0x1f5e <CO_collectADC+0x2ec>
    1ef8:	39 16       	cp	r3, r25
    1efa:	b8 f0       	brcs	.+46     	; 0x1f2a <CO_collectADC+0x2b8>
    1efc:	93 15       	cp	r25, r3
    1efe:	79 f5       	brne	.+94     	; 0x1f5e <CO_collectADC+0x2ec>
    1f00:	49 16       	cp	r4, r25
    1f02:	98 f0       	brcs	.+38     	; 0x1f2a <CO_collectADC+0x2b8>
    1f04:	94 15       	cp	r25, r4
    1f06:	59 f5       	brne	.+86     	; 0x1f5e <CO_collectADC+0x2ec>
    1f08:	95 16       	cp	r9, r21
    1f0a:	78 f0       	brcs	.+30     	; 0x1f2a <CO_collectADC+0x2b8>
    1f0c:	59 15       	cp	r21, r9
    1f0e:	39 f5       	brne	.+78     	; 0x1f5e <CO_collectADC+0x2ec>
    1f10:	ae 81       	ldd	r26, Y+6	; 0x06
    1f12:	a4 17       	cp	r26, r20
    1f14:	50 f0       	brcs	.+20     	; 0x1f2a <CO_collectADC+0x2b8>
    1f16:	4a 17       	cp	r20, r26
    1f18:	11 f5       	brne	.+68     	; 0x1f5e <CO_collectADC+0x2ec>
    1f1a:	bd 81       	ldd	r27, Y+5	; 0x05
    1f1c:	b3 17       	cp	r27, r19
    1f1e:	28 f0       	brcs	.+10     	; 0x1f2a <CO_collectADC+0x2b8>
    1f20:	3b 17       	cp	r19, r27
    1f22:	e9 f4       	brne	.+58     	; 0x1f5e <CO_collectADC+0x2ec>
    1f24:	e8 85       	ldd	r30, Y+8	; 0x08
    1f26:	e6 17       	cp	r30, r22
    1f28:	d0 f4       	brcc	.+52     	; 0x1f5e <CO_collectADC+0x2ec>
    1f2a:	e0 91 6c 50 	lds	r30, 0x506C
    1f2e:	f0 91 6d 50 	lds	r31, 0x506D
    1f32:	ee 0f       	add	r30, r30
    1f34:	ff 1f       	adc	r31, r31
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	e3 5a       	subi	r30, 0xA3	; 163
    1f3c:	ff 4b       	sbci	r31, 0xBF	; 191
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	a2 81       	ldd	r26, Z+2	; 0x02
    1f44:	b3 81       	ldd	r27, Z+3	; 0x03
    1f46:	88 87       	std	Y+8, r24	; 0x08
    1f48:	9d 83       	std	Y+5, r25	; 0x05
    1f4a:	ae 83       	std	Y+6, r26	; 0x06
    1f4c:	9b 2e       	mov	r9, r27
    1f4e:	bb 0f       	add	r27, r27
    1f50:	88 0b       	sbc	r24, r24
    1f52:	98 2f       	mov	r25, r24
    1f54:	dc 01       	movw	r26, r24
    1f56:	48 2e       	mov	r4, r24
    1f58:	38 2e       	mov	r3, r24
    1f5a:	28 2e       	mov	r2, r24
    1f5c:	88 8b       	std	Y+16, r24	; 0x10
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
    1f5e:	e0 91 6c 50 	lds	r30, 0x506C
    1f62:	f0 91 6d 50 	lds	r31, 0x506D
    1f66:	ee 0f       	add	r30, r30
    1f68:	ff 1f       	adc	r31, r31
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	e3 5a       	subi	r30, 0xA3	; 163
    1f70:	ff 4b       	sbci	r31, 0xBF	; 191
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	a2 81       	ldd	r26, Z+2	; 0x02
    1f78:	b3 81       	ldd	r27, Z+3	; 0x03
    1f7a:	68 2f       	mov	r22, r24
    1f7c:	39 2f       	mov	r19, r25
    1f7e:	ad 01       	movw	r20, r26
    1f80:	bb 0f       	add	r27, r27
    1f82:	88 0b       	sbc	r24, r24
    1f84:	98 2f       	mov	r25, r24
    1f86:	dc 01       	movw	r26, r24
    1f88:	87 15       	cp	r24, r7
    1f8a:	0c f1       	brlt	.+66     	; 0x1fce <CO_collectADC+0x35c>
    1f8c:	78 16       	cp	r7, r24
    1f8e:	c9 f5       	brne	.+114    	; 0x2002 <CO_collectADC+0x390>
    1f90:	75 14       	cp	r7, r5
    1f92:	e8 f0       	brcs	.+58     	; 0x1fce <CO_collectADC+0x35c>
    1f94:	57 14       	cp	r5, r7
    1f96:	a9 f5       	brne	.+106    	; 0x2002 <CO_collectADC+0x390>
    1f98:	56 14       	cp	r5, r6
    1f9a:	c8 f0       	brcs	.+50     	; 0x1fce <CO_collectADC+0x35c>
    1f9c:	65 14       	cp	r6, r5
    1f9e:	89 f5       	brne	.+98     	; 0x2002 <CO_collectADC+0x390>
    1fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa2:	6f 16       	cp	r6, r31
    1fa4:	a0 f0       	brcs	.+40     	; 0x1fce <CO_collectADC+0x35c>
    1fa6:	f6 15       	cp	r31, r6
    1fa8:	61 f5       	brne	.+88     	; 0x2002 <CO_collectADC+0x390>
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	58 17       	cp	r21, r24
    1fae:	78 f0       	brcs	.+30     	; 0x1fce <CO_collectADC+0x35c>
    1fb0:	85 17       	cp	r24, r21
    1fb2:	39 f5       	brne	.+78     	; 0x2002 <CO_collectADC+0x390>
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	49 17       	cp	r20, r25
    1fb8:	50 f0       	brcs	.+20     	; 0x1fce <CO_collectADC+0x35c>
    1fba:	94 17       	cp	r25, r20
    1fbc:	11 f5       	brne	.+68     	; 0x2002 <CO_collectADC+0x390>
    1fbe:	a9 81       	ldd	r26, Y+1	; 0x01
    1fc0:	3a 17       	cp	r19, r26
    1fc2:	28 f0       	brcs	.+10     	; 0x1fce <CO_collectADC+0x35c>
    1fc4:	a3 17       	cp	r26, r19
    1fc6:	e9 f4       	brne	.+58     	; 0x2002 <CO_collectADC+0x390>
    1fc8:	bf 81       	ldd	r27, Y+7	; 0x07
    1fca:	6b 17       	cp	r22, r27
    1fcc:	d0 f4       	brcc	.+52     	; 0x2002 <CO_collectADC+0x390>
    1fce:	e0 91 6c 50 	lds	r30, 0x506C
    1fd2:	f0 91 6d 50 	lds	r31, 0x506D
    1fd6:	ee 0f       	add	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	e3 5a       	subi	r30, 0xA3	; 163
    1fe0:	ff 4b       	sbci	r31, 0xBF	; 191
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe8:	b3 81       	ldd	r27, Z+3	; 0x03
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	99 83       	std	Y+1, r25	; 0x01
    1fee:	aa 83       	std	Y+2, r26	; 0x02
    1ff0:	bb 83       	std	Y+3, r27	; 0x03
    1ff2:	bb 0f       	add	r27, r27
    1ff4:	88 0b       	sbc	r24, r24
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	8c 83       	std	Y+4, r24	; 0x04
    1ffc:	68 2e       	mov	r6, r24
    1ffe:	58 2e       	mov	r5, r24
    2000:	78 2e       	mov	r7, r24
	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    2002:	80 91 6c 50 	lds	r24, 0x506C
    2006:	90 91 6d 50 	lds	r25, 0x506D
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	80 93 6c 50 	sts	0x506C, r24
    2010:	90 93 6d 50 	sts	0x506D, r25
    2014:	80 91 6c 50 	lds	r24, 0x506C
    2018:	90 91 6d 50 	lds	r25, 0x506D
    201c:	e4 e0       	ldi	r30, 0x04	; 4
    201e:	80 30       	cpi	r24, 0x00	; 0
    2020:	9e 07       	cpc	r25, r30
    2022:	08 f4       	brcc	.+2      	; 0x2026 <CO_collectADC+0x3b4>
    2024:	df ce       	rjmp	.-578    	; 0x1de4 <CO_collectADC+0x172>
    2026:	a9 89       	ldd	r26, Y+17	; 0x11
    2028:	e2 2f       	mov	r30, r18
    202a:	99 86       	std	Y+9, r9	; 0x09
		sum += data24Bit[sampleCount];
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
	}
	average = sum / NUM_SAMPLES;
    202c:	2e 2d       	mov	r18, r14
    202e:	3a 2f       	mov	r19, r26
    2030:	41 2f       	mov	r20, r17
    2032:	50 2f       	mov	r21, r16
    2034:	6c 2d       	mov	r22, r12
    2036:	78 2d       	mov	r23, r8
    2038:	8f 2d       	mov	r24, r15
    203a:	9e 2f       	mov	r25, r30
    203c:	e7 ff       	sbrs	r30, 7
    203e:	2b c0       	rjmp	.+86     	; 0x2096 <CO_collectADC+0x424>
    2040:	21 50       	subi	r18, 0x01	; 1
    2042:	31 e0       	ldi	r19, 0x01	; 1
    2044:	2e 15       	cp	r18, r14
    2046:	08 f0       	brcs	.+2      	; 0x204a <CO_collectADC+0x3d8>
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	8a 2f       	mov	r24, r26
    204c:	8d 5f       	subi	r24, 0xFD	; 253
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	8a 17       	cp	r24, r26
    2052:	08 f0       	brcs	.+2      	; 0x2056 <CO_collectADC+0x3e4>
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	38 0f       	add	r19, r24
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	38 17       	cp	r19, r24
    205c:	08 f0       	brcs	.+2      	; 0x2060 <CO_collectADC+0x3ee>
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	49 2b       	or	r20, r25
    2062:	41 0f       	add	r20, r17
    2064:	51 e0       	ldi	r21, 0x01	; 1
    2066:	41 17       	cp	r20, r17
    2068:	08 f0       	brcs	.+2      	; 0x206c <CO_collectADC+0x3fa>
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	50 0f       	add	r21, r16
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	50 17       	cp	r21, r16
    2072:	08 f0       	brcs	.+2      	; 0x2076 <CO_collectADC+0x404>
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	6c 0d       	add	r22, r12
    2078:	71 e0       	ldi	r23, 0x01	; 1
    207a:	6c 15       	cp	r22, r12
    207c:	08 f0       	brcs	.+2      	; 0x2080 <CO_collectADC+0x40e>
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	78 0d       	add	r23, r8
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	78 15       	cp	r23, r8
    2086:	08 f0       	brcs	.+2      	; 0x208a <CO_collectADC+0x418>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	8f 0d       	add	r24, r15
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	8f 15       	cp	r24, r15
    2090:	08 f0       	brcs	.+2      	; 0x2094 <CO_collectADC+0x422>
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9e 0f       	add	r25, r30
    2096:	0a e0       	ldi	r16, 0x0A	; 10
    2098:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__ashrdi3>

	//convert to uV
	*avgV = (int32_t) -(average * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    209c:	e0 ea       	ldi	r30, 0xA0	; 160
    209e:	ae 2e       	mov	r10, r30
    20a0:	f5 e2       	ldi	r31, 0x25	; 37
    20a2:	bf 2e       	mov	r11, r31
    20a4:	a6 e2       	ldi	r26, 0x26	; 38
    20a6:	ca 2e       	mov	r12, r26
    20a8:	dd 24       	eor	r13, r13
    20aa:	ee 24       	eor	r14, r14
    20ac:	ff 24       	eor	r15, r15
    20ae:	00 e0       	ldi	r16, 0x00	; 0
    20b0:	10 e0       	ldi	r17, 0x00	; 0
    20b2:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <__muldi3>
    20b6:	aa 24       	eor	r10, r10
    20b8:	aa 94       	dec	r10
    20ba:	bb 24       	eor	r11, r11
    20bc:	ba 94       	dec	r11
    20be:	bf e7       	ldi	r27, 0x7F	; 127
    20c0:	cb 2e       	mov	r12, r27
    20c2:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__divdi3>
    20c6:	01 e0       	ldi	r16, 0x01	; 1
    20c8:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__ashldi3>
    20cc:	03 e0       	ldi	r16, 0x03	; 3
    20ce:	a0 2e       	mov	r10, r16
    20d0:	bb 24       	eor	r11, r11
    20d2:	cc 24       	eor	r12, r12
    20d4:	00 e0       	ldi	r16, 0x00	; 0
    20d6:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__divdi3>
    20da:	49 01       	movw	r8, r18
    20dc:	5a 01       	movw	r10, r20
    20de:	b0 94       	com	r11
    20e0:	a0 94       	com	r10
    20e2:	90 94       	com	r9
    20e4:	80 94       	com	r8
    20e6:	81 1c       	adc	r8, r1
    20e8:	91 1c       	adc	r9, r1
    20ea:	a1 1c       	adc	r10, r1
    20ec:	b1 1c       	adc	r11, r1
    20ee:	aa 85       	ldd	r26, Y+10	; 0x0a
    20f0:	bb 85       	ldd	r27, Y+11	; 0x0b
    20f2:	8d 92       	st	X+, r8
    20f4:	9d 92       	st	X+, r9
    20f6:	ad 92       	st	X+, r10
    20f8:	bc 92       	st	X, r11
    20fa:	13 97       	sbiw	r26, 0x03	; 3
	*maxV = (int32_t) -(max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    20fc:	28 85       	ldd	r18, Y+8	; 0x08
    20fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2100:	4e 81       	ldd	r20, Y+6	; 0x06
    2102:	59 85       	ldd	r21, Y+9	; 0x09
    2104:	64 2d       	mov	r22, r4
    2106:	73 2d       	mov	r23, r3
    2108:	82 2d       	mov	r24, r2
    210a:	98 89       	ldd	r25, Y+16	; 0x10
    210c:	e0 ea       	ldi	r30, 0xA0	; 160
    210e:	ae 2e       	mov	r10, r30
    2110:	f5 e2       	ldi	r31, 0x25	; 37
    2112:	bf 2e       	mov	r11, r31
    2114:	e6 e2       	ldi	r30, 0x26	; 38
    2116:	ce 2e       	mov	r12, r30
    2118:	dd 24       	eor	r13, r13
    211a:	ee 24       	eor	r14, r14
    211c:	ff 24       	eor	r15, r15
    211e:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <__muldi3>
    2122:	aa 24       	eor	r10, r10
    2124:	aa 94       	dec	r10
    2126:	bb 24       	eor	r11, r11
    2128:	ba 94       	dec	r11
    212a:	ff e7       	ldi	r31, 0x7F	; 127
    212c:	cf 2e       	mov	r12, r31
    212e:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__divdi3>
    2132:	01 e0       	ldi	r16, 0x01	; 1
    2134:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__ashldi3>
    2138:	03 e0       	ldi	r16, 0x03	; 3
    213a:	a0 2e       	mov	r10, r16
    213c:	bb 24       	eor	r11, r11
    213e:	cc 24       	eor	r12, r12
    2140:	00 e0       	ldi	r16, 0x00	; 0
    2142:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__divdi3>
    2146:	49 01       	movw	r8, r18
    2148:	5a 01       	movw	r10, r20
    214a:	b0 94       	com	r11
    214c:	a0 94       	com	r10
    214e:	90 94       	com	r9
    2150:	80 94       	com	r8
    2152:	81 1c       	adc	r8, r1
    2154:	91 1c       	adc	r9, r1
    2156:	a1 1c       	adc	r10, r1
    2158:	b1 1c       	adc	r11, r1
    215a:	ee 85       	ldd	r30, Y+14	; 0x0e
    215c:	ff 85       	ldd	r31, Y+15	; 0x0f
    215e:	80 82       	st	Z, r8
    2160:	91 82       	std	Z+1, r9	; 0x01
    2162:	a2 82       	std	Z+2, r10	; 0x02
    2164:	b3 82       	std	Z+3, r11	; 0x03
	*minV = (int32_t) -(min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    2166:	2f 81       	ldd	r18, Y+7	; 0x07
    2168:	39 81       	ldd	r19, Y+1	; 0x01
    216a:	4a 81       	ldd	r20, Y+2	; 0x02
    216c:	5b 81       	ldd	r21, Y+3	; 0x03
    216e:	6c 81       	ldd	r22, Y+4	; 0x04
    2170:	76 2d       	mov	r23, r6
    2172:	85 2d       	mov	r24, r5
    2174:	97 2d       	mov	r25, r7
    2176:	0f 2e       	mov	r0, r31
    2178:	f0 ea       	ldi	r31, 0xA0	; 160
    217a:	af 2e       	mov	r10, r31
    217c:	f0 2d       	mov	r31, r0
    217e:	0f 2e       	mov	r0, r31
    2180:	f5 e2       	ldi	r31, 0x25	; 37
    2182:	bf 2e       	mov	r11, r31
    2184:	f0 2d       	mov	r31, r0
    2186:	0f 2e       	mov	r0, r31
    2188:	f6 e2       	ldi	r31, 0x26	; 38
    218a:	cf 2e       	mov	r12, r31
    218c:	f0 2d       	mov	r31, r0
    218e:	dd 24       	eor	r13, r13
    2190:	ee 24       	eor	r14, r14
    2192:	ff 24       	eor	r15, r15
    2194:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <__muldi3>
    2198:	aa 24       	eor	r10, r10
    219a:	aa 94       	dec	r10
    219c:	bb 24       	eor	r11, r11
    219e:	ba 94       	dec	r11
    21a0:	0f 2e       	mov	r0, r31
    21a2:	ff e7       	ldi	r31, 0x7F	; 127
    21a4:	cf 2e       	mov	r12, r31
    21a6:	f0 2d       	mov	r31, r0
    21a8:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__divdi3>
    21ac:	01 e0       	ldi	r16, 0x01	; 1
    21ae:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__ashldi3>
    21b2:	03 e0       	ldi	r16, 0x03	; 3
    21b4:	a0 2e       	mov	r10, r16
    21b6:	bb 24       	eor	r11, r11
    21b8:	cc 24       	eor	r12, r12
    21ba:	00 e0       	ldi	r16, 0x00	; 0
    21bc:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__divdi3>
    21c0:	49 01       	movw	r8, r18
    21c2:	5a 01       	movw	r10, r20
    21c4:	b0 94       	com	r11
    21c6:	a0 94       	com	r10
    21c8:	90 94       	com	r9
    21ca:	80 94       	com	r8
    21cc:	81 1c       	adc	r8, r1
    21ce:	91 1c       	adc	r9, r1
    21d0:	a1 1c       	adc	r10, r1
    21d2:	b1 1c       	adc	r11, r1
    21d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    21d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    21d8:	8d 92       	st	X+, r8
    21da:	9d 92       	st	X+, r9
    21dc:	ad 92       	st	X+, r10
    21de:	bc 92       	st	X, r11
    21e0:	13 97       	sbiw	r26, 0x03	; 3

}
    21e2:	61 96       	adiw	r28, 0x11	; 17
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	ff 90       	pop	r15
    21f2:	ef 90       	pop	r14
    21f4:	df 90       	pop	r13
    21f6:	cf 90       	pop	r12
    21f8:	bf 90       	pop	r11
    21fa:	af 90       	pop	r10
    21fc:	9f 90       	pop	r9
    21fe:	8f 90       	pop	r8
    2200:	7f 90       	pop	r7
    2202:	6f 90       	pop	r6
    2204:	5f 90       	pop	r5
    2206:	4f 90       	pop	r4
    2208:	3f 90       	pop	r3
    220a:	2f 90       	pop	r2
    220c:	08 95       	ret

0000220e <CO_collectSeismic3Channel>:
	}
}

void CO_collectSeismic3Channel(uint8_t filterConfig, uint8_t gain[], uint8_t subsamplesPerSecond,
	uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
	uint16_t averagingPtC, uint16_t averagingPtD) {
    220e:	6f 92       	push	r6
    2210:	7f 92       	push	r7
    2212:	8f 92       	push	r8
    2214:	9f 92       	push	r9
    2216:	af 92       	push	r10
    2218:	bf 92       	push	r11
    221a:	cf 92       	push	r12
    221c:	df 92       	push	r13
    221e:	ef 92       	push	r14
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	0f 92       	push	r0
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	18 2f       	mov	r17, r24
    2234:	3b 01       	movw	r6, r22
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	29 83       	std	Y+1, r18	; 0x01
    223a:	4a 83       	std	Y+2, r20	; 0x02
    223c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	
	// Set gains, filters, and input channel	
	set_ampGain(ADC_CH_6_gc, gain[0]);
    2240:	85 e0       	ldi	r24, 0x05	; 5
    2242:	f3 01       	movw	r30, r6
    2244:	60 81       	ld	r22, Z
    2246:	0e 94 1d 0a 	call	0x143a	; 0x143a <set_ampGain>
	set_ampGain(ADC_CH_7_gc, gain[1]);
    224a:	86 e0       	ldi	r24, 0x06	; 6
    224c:	f3 01       	movw	r30, r6
    224e:	61 81       	ldd	r22, Z+1	; 0x01
    2250:	0e 94 1d 0a 	call	0x143a	; 0x143a <set_ampGain>
	set_ampGain(ADC_CH_8_gc, gain[2]);
    2254:	87 e0       	ldi	r24, 0x07	; 7
    2256:	f3 01       	movw	r30, r6
    2258:	62 81       	ldd	r22, Z+2	; 0x02
    225a:	0e 94 1d 0a 	call	0x143a	; 0x143a <set_ampGain>
	set_filter(filterConfig);
    225e:	81 2f       	mov	r24, r17
    2260:	0e 94 12 09 	call	0x1224	; 0x1224 <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    2264:	80 2f       	mov	r24, r16
    2266:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    226a:	84 e0       	ldi	r24, 0x04	; 4
    226c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2270:	84 e5       	ldi	r24, 0x54	; 84
    2272:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	0e 94 99 08 	call	0x1132	; 0x1132 <enableADCMUX>
	setADCInput(ADC_CH_6_gc);
    227c:	85 e0       	ldi	r24, 0x05	; 5
    227e:	0e 94 bd 08 	call	0x117a	; 0x117a <setADCInput>
	

	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    2282:	e0 ea       	ldi	r30, 0xA0	; 160
    2284:	f6 e0       	ldi	r31, 0x06	; 6
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	92 83       	std	Z+2, r25	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    228e:	98 e7       	ldi	r25, 0x78	; 120
    2290:	90 93 80 01 	sts	0x0180, r25

	// Configure counter for IO13(PF0) events
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    2294:	e0 e0       	ldi	r30, 0x00	; 0
    2296:	f8 e0       	ldi	r31, 0x08	; 8
    2298:	90 ef       	ldi	r25, 0xF0	; 240
    229a:	91 83       	std	Z+1, r25	; 0x01
	TCC0.CCA = averagingPtA;
    229c:	e0 a6       	lds	r30, 0xb0
    229e:	f1 a6       	lds	r31, 0xb1
	TCC0.CCB = averagingPtB;
    22a0:	c2 a6       	lds	r28, 0xb2
    22a2:	d3 a6       	lds	r29, 0xb3
	TCC0.CCC = averagingPtC;
    22a4:	a4 a6       	lds	r26, 0xb4
    22a6:	b5 a6       	lds	r27, 0xb5
	TCC0.CCD = averagingPtD;
    22a8:	86 a6       	lds	r24, 0xb6
    22aa:	97 a6       	lds	r25, 0xb7
	TCC0.PER = subsamplesPerChannel - 1;
    22ac:	29 81       	ldd	r18, Y+1	; 0x01
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	21 50       	subi	r18, 0x01	; 1
    22b2:	30 40       	sbci	r19, 0x00	; 0
    22b4:	26 a3       	lds	r18, 0x56
    22b6:	37 a3       	lds	r19, 0x57
	TCC0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    22b8:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    22ba:	8f ef       	ldi	r24, 0xFF	; 255
    22bc:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    22be:	80 91 00 08 	lds	r24, 0x0800
    22c2:	80 7f       	andi	r24, 0xF0	; 240
    22c4:	88 60       	ori	r24, 0x08	; 8
    22c6:	80 93 00 08 	sts	0x0800, r24

	FRAMAddress = FR_BASEADD;
    22ca:	10 92 5a 40 	sts	0x405A, r1
    22ce:	10 92 5b 40 	sts	0x405B, r1
	sampleCount = 0;
    22d2:	10 92 6c 50 	sts	0x506C, r1
    22d6:	10 92 6d 50 	sts	0x506D, r1
	SPICount = 0;
    22da:	10 92 98 50 	sts	0x5098, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    22de:	10 92 be 21 	sts	0x21BE, r1
    22e2:	10 92 bd 21 	sts	0x21BD, r1
    22e6:	10 92 bc 21 	sts	0x21BC, r1

	// Enable interrupts.
	PMIC.CTRL |= (PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);
    22ea:	80 91 a2 00 	lds	r24, 0x00A2
    22ee:	86 60       	ori	r24, 0x06	; 6
    22f0:	e0 ea       	ldi	r30, 0xA0	; 160
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	82 83       	std	Z+2, r24	; 0x02
	sei();
    22f6:	78 94       	sei

	SPICS(TRUE);
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    22fe:	80 e2       	ldi	r24, 0x20	; 32
    2300:	e0 e8       	ldi	r30, 0x80	; 128
    2302:	f6 e0       	ldi	r31, 0x06	; 6
    2304:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    2306:	e0 e4       	ldi	r30, 0x40	; 64
    2308:	fa e0       	ldi	r31, 0x0A	; 10
    230a:	83 e2       	ldi	r24, 0x23	; 35
    230c:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    230e:	80 e2       	ldi	r24, 0x20	; 32
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	4a 81       	ldd	r20, Y+2	; 0x02
    2314:	04 2e       	mov	r0, r20
    2316:	02 c0       	rjmp	.+4      	; 0x231c <CO_collectSeismic3Channel+0x10e>
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	0a 94       	dec	r0
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <CO_collectSeismic3Channel+0x10a>
    2320:	86 a3       	lds	r24, 0x56
    2322:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    2324:	80 e1       	ldi	r24, 0x10	; 16
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 c0       	rjmp	.+4      	; 0x232e <CO_collectSeismic3Channel+0x120>
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	4a 95       	dec	r20
    2330:	e2 f7       	brpl	.-8      	; 0x232a <CO_collectSeismic3Channel+0x11c>
    2332:	82 af       	sts	0x72, r24
    2334:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    2336:	80 91 40 0a 	lds	r24, 0x0A40
    233a:	80 7f       	andi	r24, 0xF0	; 240
    233c:	81 60       	ori	r24, 0x01	; 1
    233e:	80 93 40 0a 	sts	0x0A40, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    2342:	80 91 6c 50 	lds	r24, 0x506C
    2346:	90 91 6d 50 	lds	r25, 0x506D
    234a:	f5 e5       	ldi	r31, 0x55	; 85
    234c:	83 35       	cpi	r24, 0x53	; 83
    234e:	9f 07       	cpc	r25, r31
    2350:	c0 f3       	brcs	.-16     	; 0x2342 <CO_collectSeismic3Channel+0x134>

	// turn off timer and interrupts
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    2352:	80 91 00 08 	lds	r24, 0x0800
    2356:	80 7f       	andi	r24, 0xF0	; 240
    2358:	80 93 00 08 	sts	0x0800, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    235c:	80 91 40 0a 	lds	r24, 0x0A40
    2360:	80 7f       	andi	r24, 0xF0	; 240
    2362:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    2366:	80 91 a2 00 	lds	r24, 0x00A2
    236a:	89 7f       	andi	r24, 0xF9	; 249
    236c:	e0 ea       	ldi	r30, 0xA0	; 160
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	82 83       	std	Z+2, r24	; 0x02
	cli();
    2372:	f8 94       	cli

	SPICS(FALSE);
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();
    237a:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
	enableADCMUX(FALSE);
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	0e 94 99 08 	call	0x1132	; 0x1132 <enableADCMUX>
	ADCPower(FALSE);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	ff 90       	pop	r15
    2398:	ef 90       	pop	r14
    239a:	df 90       	pop	r13
    239c:	cf 90       	pop	r12
    239e:	bf 90       	pop	r11
    23a0:	af 90       	pop	r10
    23a2:	9f 90       	pop	r9
    23a4:	8f 90       	pop	r8
    23a6:	7f 90       	pop	r7
    23a8:	6f 90       	pop	r6
    23aa:	08 95       	ret

000023ac <CO_collectSeismic1Channel>:
}

void CO_collectSeismic1Channel(uint8_t channel, uint8_t filterConfig, uint8_t gain,
	uint8_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable,
	uint16_t averagingPtA, uint16_t averagingPtB, uint16_t averagingPtC,
	uint16_t averagingPtD) {
    23ac:	8f 92       	push	r8
    23ae:	9f 92       	push	r9
    23b0:	af 92       	push	r10
    23b2:	bf 92       	push	r11
    23b4:	cf 92       	push	r12
    23b6:	df 92       	push	r13
    23b8:	ef 92       	push	r14
    23ba:	ff 92       	push	r15
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	0f 92       	push	r0
    23c6:	0f 92       	push	r0
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	18 2f       	mov	r17, r24
    23ce:	f6 2e       	mov	r15, r22
				
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	2a 83       	std	Y+2, r18	; 0x02
    23d4:	49 83       	std	Y+1, r20	; 0x01
    23d6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	
	// Set gains, filters, and input channel	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gain);
    23da:	81 2f       	mov	r24, r17
    23dc:	49 81       	ldd	r20, Y+1	; 0x01
    23de:	64 2f       	mov	r22, r20
    23e0:	0e 94 1d 0a 	call	0x143a	; 0x143a <set_ampGain>
	set_filter(filterConfig);
    23e4:	8f 2d       	mov	r24, r15
    23e6:	0e 94 12 09 	call	0x1224	; 0x1224 <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    23ea:	8e 2d       	mov	r24, r14
    23ec:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    23f0:	84 e0       	ldi	r24, 0x04	; 4
    23f2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    23f6:	84 e5       	ldi	r24, 0x54	; 84
    23f8:	80 93 c0 08 	sts	0x08C0, r24

	enableADCMUX(TRUE);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	0e 94 99 08 	call	0x1132	; 0x1132 <enableADCMUX>
	setADCInput(channel);
    2402:	81 2f       	mov	r24, r17
    2404:	0e 94 bd 08 	call	0x117a	; 0x117a <setADCInput>
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    2408:	e0 ea       	ldi	r30, 0xA0	; 160
    240a:	f6 e0       	ldi	r31, 0x06	; 6
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	92 83       	std	Z+2, r25	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    2414:	98 e7       	ldi	r25, 0x78	; 120
    2416:	90 93 80 01 	sts	0x0180, r25

	// Configure counter for IO13(PF0) events
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    241a:	e0 e0       	ldi	r30, 0x00	; 0
    241c:	f9 e0       	ldi	r31, 0x09	; 9
    241e:	90 ef       	ldi	r25, 0xF0	; 240
    2420:	91 83       	std	Z+1, r25	; 0x01
	TCD0.CCA = averagingPtA;
    2422:	c0 a6       	lds	r28, 0xb0
    2424:	d1 a6       	lds	r29, 0xb1
	TCD0.CCB = averagingPtB;
    2426:	a2 a6       	lds	r26, 0xb2
    2428:	b3 a6       	lds	r27, 0xb3
	TCD0.CCC = averagingPtC;
    242a:	84 a6       	lds	r24, 0xb4
    242c:	95 a6       	lds	r25, 0xb5
	TCD0.CCD = averagingPtD;
    242e:	4a 89       	ldd	r20, Y+18	; 0x12
    2430:	5b 89       	ldd	r21, Y+19	; 0x13
    2432:	46 a7       	lds	r20, 0x76
    2434:	57 a7       	lds	r21, 0x77
	TCD0.PER = subsamplesPerSample - 1;
    2436:	10 e0       	ldi	r17, 0x00	; 0
    2438:	01 50       	subi	r16, 0x01	; 1
    243a:	10 40       	sbci	r17, 0x00	; 0
    243c:	06 a3       	lds	r16, 0x56
    243e:	17 a3       	lds	r17, 0x57
	TCD0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    2440:	86 83       	std	Z+6, r24	; 0x06
	TCD0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    2442:	8f ef       	ldi	r24, 0xFF	; 255
    2444:	87 83       	std	Z+7, r24	; 0x07
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    2446:	80 91 00 09 	lds	r24, 0x0900
    244a:	80 7f       	andi	r24, 0xF0	; 240
    244c:	88 60       	ori	r24, 0x08	; 8
    244e:	80 93 00 09 	sts	0x0900, r24

	FRAMAddress = FR_BASEADD;
    2452:	10 92 5a 40 	sts	0x405A, r1
    2456:	10 92 5b 40 	sts	0x405B, r1
	sampleCount = 0;
    245a:	10 92 6c 50 	sts	0x506C, r1
    245e:	10 92 6d 50 	sts	0x506D, r1
	SPICount = 0;
    2462:	10 92 98 50 	sts	0x5098, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;	
    2466:	10 92 be 21 	sts	0x21BE, r1
    246a:	10 92 bd 21 	sts	0x21BD, r1
    246e:	10 92 bc 21 	sts	0x21BC, r1
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm;
    2472:	80 91 a2 00 	lds	r24, 0x00A2
    2476:	86 60       	ori	r24, 0x06	; 6
    2478:	e0 ea       	ldi	r30, 0xA0	; 160
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	82 83       	std	Z+2, r24	; 0x02
	sei();
    247e:	78 94       	sei

	SPICS(TRUE);
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    2486:	80 e2       	ldi	r24, 0x20	; 32
    2488:	e0 e8       	ldi	r30, 0x80	; 128
    248a:	f6 e0       	ldi	r31, 0x06	; 6
    248c:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    248e:	e0 e4       	ldi	r30, 0x40	; 64
    2490:	fa e0       	ldi	r31, 0x0A	; 10
    2492:	83 e2       	ldi	r24, 0x23	; 35
    2494:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    2496:	80 e2       	ldi	r24, 0x20	; 32
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	2a 81       	ldd	r18, Y+2	; 0x02
    249c:	02 2e       	mov	r0, r18
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <CO_collectSeismic1Channel+0xf8>
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	0a 94       	dec	r0
    24a6:	e2 f7       	brpl	.-8      	; 0x24a0 <CO_collectSeismic1Channel+0xf4>
    24a8:	86 a3       	lds	r24, 0x56
    24aa:	97 a3       	lds	r25, 0x57
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    24ac:	80 e1       	ldi	r24, 0x10	; 16
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <CO_collectSeismic1Channel+0x10a>
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	2a 95       	dec	r18
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <CO_collectSeismic1Channel+0x106>
    24ba:	82 af       	sts	0x72, r24
    24bc:	93 af       	sts	0x73, r25
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    24be:	80 91 40 0a 	lds	r24, 0x0A40
    24c2:	80 7f       	andi	r24, 0xF0	; 240
    24c4:	81 60       	ori	r24, 0x01	; 1
    24c6:	80 93 40 0a 	sts	0x0A40, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    24ca:	80 91 6c 50 	lds	r24, 0x506C
    24ce:	90 91 6d 50 	lds	r25, 0x506D
    24d2:	25 e5       	ldi	r18, 0x55	; 85
    24d4:	83 35       	cpi	r24, 0x53	; 83
    24d6:	92 07       	cpc	r25, r18
    24d8:	c0 f3       	brcs	.-16     	; 0x24ca <CO_collectSeismic1Channel+0x11e>

	// turn off timer and interrupts
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    24da:	80 91 00 09 	lds	r24, 0x0900
    24de:	80 7f       	andi	r24, 0xF0	; 240
    24e0:	80 93 00 09 	sts	0x0900, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    24e4:	80 91 40 0a 	lds	r24, 0x0A40
    24e8:	80 7f       	andi	r24, 0xF0	; 240
    24ea:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    24ee:	80 91 a2 00 	lds	r24, 0x00A2
    24f2:	89 7f       	andi	r24, 0xF9	; 249
    24f4:	e0 ea       	ldi	r30, 0xA0	; 160
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	82 83       	std	Z+2, r24	; 0x02
	cli();
    24fa:	f8 94       	cli

	SPICS(FALSE);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();
    2502:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
	enableADCMUX(FALSE);
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	0e 94 99 08 	call	0x1132	; 0x1132 <enableADCMUX>
	ADCPower(FALSE);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	df 90       	pop	r13
    2524:	cf 90       	pop	r12
    2526:	bf 90       	pop	r11
    2528:	af 90       	pop	r10
    252a:	9f 90       	pop	r9
    252c:	8f 90       	pop	r8
    252e:	08 95       	ret

00002530 <sampleCurrentChannel>:
ISR(TCD0_OVF_vect) {
	writeSE2FRAM();
}

void sampleCurrentChannel() {
	PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	e0 ea       	ldi	r30, 0xA0	; 160
    2534:	f6 e0       	ldi	r31, 0x06	; 6
    2536:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    2538:	8a ea       	ldi	r24, 0xAA	; 170
    253a:	e0 ec       	ldi	r30, 0xC0	; 192
    253c:	f8 e0       	ldi	r31, 0x08	; 8
    253e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2540:	80 91 c2 08 	lds	r24, 0x08C2
    2544:	87 ff       	sbrs	r24, 7
    2546:	fc cf       	rjmp	.-8      	; 0x2540 <sampleCurrentChannel+0x10>
	SPIBuffer[SPICount] = SPIC.DATA;
    2548:	e0 91 98 50 	lds	r30, 0x5098
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 91 c3 08 	lds	r24, 0x08C3
    2552:	e1 5a       	subi	r30, 0xA1	; 161
    2554:	ff 4a       	sbci	r31, 0xAF	; 175
    2556:	80 83       	st	Z, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    2558:	8a ea       	ldi	r24, 0xAA	; 170
    255a:	e0 ec       	ldi	r30, 0xC0	; 192
    255c:	f8 e0       	ldi	r31, 0x08	; 8
    255e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2560:	80 91 c2 08 	lds	r24, 0x08C2
    2564:	87 ff       	sbrs	r24, 7
    2566:	fc cf       	rjmp	.-8      	; 0x2560 <sampleCurrentChannel+0x30>
	SPIBuffer[SPICount+1] = SPIC.DATA;
    2568:	e0 91 98 50 	lds	r30, 0x5098
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 91 c3 08 	lds	r24, 0x08C3
    2572:	e0 5a       	subi	r30, 0xA0	; 160
    2574:	ff 4a       	sbci	r31, 0xAF	; 175
    2576:	80 83       	st	Z, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    2578:	8a ea       	ldi	r24, 0xAA	; 170
    257a:	e0 ec       	ldi	r30, 0xC0	; 192
    257c:	f8 e0       	ldi	r31, 0x08	; 8
    257e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2580:	80 91 c2 08 	lds	r24, 0x08C2
    2584:	87 ff       	sbrs	r24, 7
    2586:	fc cf       	rjmp	.-8      	; 0x2580 <sampleCurrentChannel+0x50>
	SPIBuffer[SPICount+2] = SPIC.DATA;
    2588:	e0 91 98 50 	lds	r30, 0x5098
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 91 c3 08 	lds	r24, 0x08C3
    2592:	ef 59       	subi	r30, 0x9F	; 159
    2594:	ff 4a       	sbci	r31, 0xAF	; 175
    2596:	80 83       	st	Z, r24
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	e0 ea       	ldi	r30, 0xA0	; 160
    259c:	f6 e0       	ldi	r31, 0x06	; 6
    259e:	85 83       	std	Z+5, r24	; 0x05
	SPICount +=3;
    25a0:	80 91 98 50 	lds	r24, 0x5098
    25a4:	8d 5f       	subi	r24, 0xFD	; 253
    25a6:	80 93 98 50 	sts	0x5098, r24
}
    25aa:	08 95       	ret

000025ac <__vector_82>:

ISR(TCD0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCD_vect) {
    25ac:	1f 92       	push	r1
    25ae:	0f 92       	push	r0
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	0f 92       	push	r0
    25b4:	0b b6       	in	r0, 0x3b	; 59
    25b6:	0f 92       	push	r0
    25b8:	11 24       	eor	r1, r1
    25ba:	2f 93       	push	r18
    25bc:	3f 93       	push	r19
    25be:	4f 93       	push	r20
    25c0:	5f 93       	push	r21
    25c2:	6f 93       	push	r22
    25c4:	7f 93       	push	r23
    25c6:	8f 93       	push	r24
    25c8:	9f 93       	push	r25
    25ca:	af 93       	push	r26
    25cc:	bf 93       	push	r27
    25ce:	ef 93       	push	r30
    25d0:	ff 93       	push	r31
	sampleCurrentChannel();
    25d2:	0e 94 98 12 	call	0x2530	; 0x2530 <sampleCurrentChannel>
	SPICount = 0;		
    25d6:	10 92 98 50 	sts	0x5098, r1
}
    25da:	ff 91       	pop	r31
    25dc:	ef 91       	pop	r30
    25de:	bf 91       	pop	r27
    25e0:	af 91       	pop	r26
    25e2:	9f 91       	pop	r25
    25e4:	8f 91       	pop	r24
    25e6:	7f 91       	pop	r23
    25e8:	6f 91       	pop	r22
    25ea:	5f 91       	pop	r21
    25ec:	4f 91       	pop	r20
    25ee:	3f 91       	pop	r19
    25f0:	2f 91       	pop	r18
    25f2:	0f 90       	pop	r0
    25f4:	0b be       	out	0x3b, r0	; 59
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	0f 90       	pop	r0
    25fc:	1f 90       	pop	r1
    25fe:	18 95       	reti

00002600 <__vector_81>:

ISR(TCD0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCC_vect) {
    2600:	1f 92       	push	r1
    2602:	0f 92       	push	r0
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	0f 92       	push	r0
    2608:	0b b6       	in	r0, 0x3b	; 59
    260a:	0f 92       	push	r0
    260c:	11 24       	eor	r1, r1
    260e:	2f 93       	push	r18
    2610:	3f 93       	push	r19
    2612:	4f 93       	push	r20
    2614:	5f 93       	push	r21
    2616:	6f 93       	push	r22
    2618:	7f 93       	push	r23
    261a:	8f 93       	push	r24
    261c:	9f 93       	push	r25
    261e:	af 93       	push	r26
    2620:	bf 93       	push	r27
    2622:	ef 93       	push	r30
    2624:	ff 93       	push	r31
	sampleCurrentChannel();
    2626:	0e 94 98 12 	call	0x2530	; 0x2530 <sampleCurrentChannel>
}
    262a:	ff 91       	pop	r31
    262c:	ef 91       	pop	r30
    262e:	bf 91       	pop	r27
    2630:	af 91       	pop	r26
    2632:	9f 91       	pop	r25
    2634:	8f 91       	pop	r24
    2636:	7f 91       	pop	r23
    2638:	6f 91       	pop	r22
    263a:	5f 91       	pop	r21
    263c:	4f 91       	pop	r20
    263e:	3f 91       	pop	r19
    2640:	2f 91       	pop	r18
    2642:	0f 90       	pop	r0
    2644:	0b be       	out	0x3b, r0	; 59
    2646:	0f 90       	pop	r0
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	0f 90       	pop	r0
    264c:	1f 90       	pop	r1
    264e:	18 95       	reti

00002650 <__vector_80>:

ISR(TCD0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCB_vect) {
    2650:	1f 92       	push	r1
    2652:	0f 92       	push	r0
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	0f 92       	push	r0
    2658:	0b b6       	in	r0, 0x3b	; 59
    265a:	0f 92       	push	r0
    265c:	11 24       	eor	r1, r1
    265e:	2f 93       	push	r18
    2660:	3f 93       	push	r19
    2662:	4f 93       	push	r20
    2664:	5f 93       	push	r21
    2666:	6f 93       	push	r22
    2668:	7f 93       	push	r23
    266a:	8f 93       	push	r24
    266c:	9f 93       	push	r25
    266e:	af 93       	push	r26
    2670:	bf 93       	push	r27
    2672:	ef 93       	push	r30
    2674:	ff 93       	push	r31
	sampleCurrentChannel();
    2676:	0e 94 98 12 	call	0x2530	; 0x2530 <sampleCurrentChannel>
}
    267a:	ff 91       	pop	r31
    267c:	ef 91       	pop	r30
    267e:	bf 91       	pop	r27
    2680:	af 91       	pop	r26
    2682:	9f 91       	pop	r25
    2684:	8f 91       	pop	r24
    2686:	7f 91       	pop	r23
    2688:	6f 91       	pop	r22
    268a:	5f 91       	pop	r21
    268c:	4f 91       	pop	r20
    268e:	3f 91       	pop	r19
    2690:	2f 91       	pop	r18
    2692:	0f 90       	pop	r0
    2694:	0b be       	out	0x3b, r0	; 59
    2696:	0f 90       	pop	r0
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	0f 90       	pop	r0
    269c:	1f 90       	pop	r1
    269e:	18 95       	reti

000026a0 <__vector_79>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCD0_CCA_vect) {
    26a0:	1f 92       	push	r1
    26a2:	0f 92       	push	r0
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	0f 92       	push	r0
    26a8:	0b b6       	in	r0, 0x3b	; 59
    26aa:	0f 92       	push	r0
    26ac:	11 24       	eor	r1, r1
    26ae:	2f 93       	push	r18
    26b0:	3f 93       	push	r19
    26b2:	4f 93       	push	r20
    26b4:	5f 93       	push	r21
    26b6:	6f 93       	push	r22
    26b8:	7f 93       	push	r23
    26ba:	8f 93       	push	r24
    26bc:	9f 93       	push	r25
    26be:	af 93       	push	r26
    26c0:	bf 93       	push	r27
    26c2:	ef 93       	push	r30
    26c4:	ff 93       	push	r31
	sampleCurrentChannel();
    26c6:	0e 94 98 12 	call	0x2530	; 0x2530 <sampleCurrentChannel>
}
    26ca:	ff 91       	pop	r31
    26cc:	ef 91       	pop	r30
    26ce:	bf 91       	pop	r27
    26d0:	af 91       	pop	r26
    26d2:	9f 91       	pop	r25
    26d4:	8f 91       	pop	r24
    26d6:	7f 91       	pop	r23
    26d8:	6f 91       	pop	r22
    26da:	5f 91       	pop	r21
    26dc:	4f 91       	pop	r20
    26de:	3f 91       	pop	r19
    26e0:	2f 91       	pop	r18
    26e2:	0f 90       	pop	r0
    26e4:	0b be       	out	0x3b, r0	; 59
    26e6:	0f 90       	pop	r0
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	0f 90       	pop	r0
    26ec:	1f 90       	pop	r1
    26ee:	18 95       	reti

000026f0 <__vector_19>:

ISR(TCC0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCD_vect) {
    26f0:	1f 92       	push	r1
    26f2:	0f 92       	push	r0
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	0f 92       	push	r0
    26f8:	0b b6       	in	r0, 0x3b	; 59
    26fa:	0f 92       	push	r0
    26fc:	11 24       	eor	r1, r1
    26fe:	2f 93       	push	r18
    2700:	3f 93       	push	r19
    2702:	4f 93       	push	r20
    2704:	5f 93       	push	r21
    2706:	6f 93       	push	r22
    2708:	7f 93       	push	r23
    270a:	8f 93       	push	r24
    270c:	9f 93       	push	r25
    270e:	af 93       	push	r26
    2710:	bf 93       	push	r27
    2712:	ef 93       	push	r30
    2714:	ff 93       	push	r31
	sampleCurrentChannel();
    2716:	0e 94 98 12 	call	0x2530	; 0x2530 <sampleCurrentChannel>
	SPICount = 0;
    271a:	10 92 98 50 	sts	0x5098, r1
	if(PORTB.OUT & PIN1_bm) {
    271e:	e0 e2       	ldi	r30, 0x20	; 32
    2720:	f6 e0       	ldi	r31, 0x06	; 6
    2722:	80 91 24 06 	lds	r24, 0x0624
    2726:	81 ff       	sbrs	r24, 1
    2728:	0b c0       	rjmp	.+22     	; 0x2740 <__vector_19+0x50>
		if (PORTA.OUT & PIN6_bm) PORTB.OUTTGL = PIN1_bm;
    272a:	80 91 04 06 	lds	r24, 0x0604
    272e:	86 ff       	sbrs	r24, 6
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <__vector_19+0x46>
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	03 c0       	rjmp	.+6      	; 0x273c <__vector_19+0x4c>
		else PORTA.OUTTGL = PIN6_bm;
    2736:	80 e4       	ldi	r24, 0x40	; 64
    2738:	e0 e0       	ldi	r30, 0x00	; 0
    273a:	f6 e0       	ldi	r31, 0x06	; 6
    273c:	87 83       	std	Z+7, r24	; 0x07
    273e:	07 c0       	rjmp	.+14     	; 0x274e <__vector_19+0x5e>
	} else {
		PORTA.OUTCLR = PIN6_bm;
    2740:	80 e4       	ldi	r24, 0x40	; 64
    2742:	a0 e0       	ldi	r26, 0x00	; 0
    2744:	b6 e0       	ldi	r27, 0x06	; 6
    2746:	16 96       	adiw	r26, 0x06	; 6
    2748:	8c 93       	st	X, r24
		PORTB.OUTSET = PIN1_bm;
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	85 83       	std	Z+5, r24	; 0x05
	}
	
}
    274e:	ff 91       	pop	r31
    2750:	ef 91       	pop	r30
    2752:	bf 91       	pop	r27
    2754:	af 91       	pop	r26
    2756:	9f 91       	pop	r25
    2758:	8f 91       	pop	r24
    275a:	7f 91       	pop	r23
    275c:	6f 91       	pop	r22
    275e:	5f 91       	pop	r21
    2760:	4f 91       	pop	r20
    2762:	3f 91       	pop	r19
    2764:	2f 91       	pop	r18
    2766:	0f 90       	pop	r0
    2768:	0b be       	out	0x3b, r0	; 59
    276a:	0f 90       	pop	r0
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	0f 90       	pop	r0
    2770:	1f 90       	pop	r1
    2772:	18 95       	reti

00002774 <__vector_18>:

ISR(TCC0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCC_vect) {
    2774:	1f 92       	push	r1
    2776:	0f 92       	push	r0
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	0f 92       	push	r0
    277c:	0b b6       	in	r0, 0x3b	; 59
    277e:	0f 92       	push	r0
    2780:	11 24       	eor	r1, r1
    2782:	2f 93       	push	r18
    2784:	3f 93       	push	r19
    2786:	4f 93       	push	r20
    2788:	5f 93       	push	r21
    278a:	6f 93       	push	r22
    278c:	7f 93       	push	r23
    278e:	8f 93       	push	r24
    2790:	9f 93       	push	r25
    2792:	af 93       	push	r26
    2794:	bf 93       	push	r27
    2796:	ef 93       	push	r30
    2798:	ff 93       	push	r31
	sampleCurrentChannel();
    279a:	0e 94 98 12 	call	0x2530	; 0x2530 <sampleCurrentChannel>
}
    279e:	ff 91       	pop	r31
    27a0:	ef 91       	pop	r30
    27a2:	bf 91       	pop	r27
    27a4:	af 91       	pop	r26
    27a6:	9f 91       	pop	r25
    27a8:	8f 91       	pop	r24
    27aa:	7f 91       	pop	r23
    27ac:	6f 91       	pop	r22
    27ae:	5f 91       	pop	r21
    27b0:	4f 91       	pop	r20
    27b2:	3f 91       	pop	r19
    27b4:	2f 91       	pop	r18
    27b6:	0f 90       	pop	r0
    27b8:	0b be       	out	0x3b, r0	; 59
    27ba:	0f 90       	pop	r0
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	0f 90       	pop	r0
    27c0:	1f 90       	pop	r1
    27c2:	18 95       	reti

000027c4 <__vector_17>:

ISR(TCC0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCB_vect) {
    27c4:	1f 92       	push	r1
    27c6:	0f 92       	push	r0
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	0f 92       	push	r0
    27cc:	0b b6       	in	r0, 0x3b	; 59
    27ce:	0f 92       	push	r0
    27d0:	11 24       	eor	r1, r1
    27d2:	2f 93       	push	r18
    27d4:	3f 93       	push	r19
    27d6:	4f 93       	push	r20
    27d8:	5f 93       	push	r21
    27da:	6f 93       	push	r22
    27dc:	7f 93       	push	r23
    27de:	8f 93       	push	r24
    27e0:	9f 93       	push	r25
    27e2:	af 93       	push	r26
    27e4:	bf 93       	push	r27
    27e6:	ef 93       	push	r30
    27e8:	ff 93       	push	r31
	sampleCurrentChannel();
    27ea:	0e 94 98 12 	call	0x2530	; 0x2530 <sampleCurrentChannel>
}
    27ee:	ff 91       	pop	r31
    27f0:	ef 91       	pop	r30
    27f2:	bf 91       	pop	r27
    27f4:	af 91       	pop	r26
    27f6:	9f 91       	pop	r25
    27f8:	8f 91       	pop	r24
    27fa:	7f 91       	pop	r23
    27fc:	6f 91       	pop	r22
    27fe:	5f 91       	pop	r21
    2800:	4f 91       	pop	r20
    2802:	3f 91       	pop	r19
    2804:	2f 91       	pop	r18
    2806:	0f 90       	pop	r0
    2808:	0b be       	out	0x3b, r0	; 59
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	0f 90       	pop	r0
    2810:	1f 90       	pop	r1
    2812:	18 95       	reti

00002814 <__vector_16>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCC0_CCA_vect) {
    2814:	1f 92       	push	r1
    2816:	0f 92       	push	r0
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	0f 92       	push	r0
    281c:	0b b6       	in	r0, 0x3b	; 59
    281e:	0f 92       	push	r0
    2820:	11 24       	eor	r1, r1
    2822:	2f 93       	push	r18
    2824:	3f 93       	push	r19
    2826:	4f 93       	push	r20
    2828:	5f 93       	push	r21
    282a:	6f 93       	push	r22
    282c:	7f 93       	push	r23
    282e:	8f 93       	push	r24
    2830:	9f 93       	push	r25
    2832:	af 93       	push	r26
    2834:	bf 93       	push	r27
    2836:	ef 93       	push	r30
    2838:	ff 93       	push	r31
	sampleCurrentChannel();
    283a:	0e 94 98 12 	call	0x2530	; 0x2530 <sampleCurrentChannel>
}
    283e:	ff 91       	pop	r31
    2840:	ef 91       	pop	r30
    2842:	bf 91       	pop	r27
    2844:	af 91       	pop	r26
    2846:	9f 91       	pop	r25
    2848:	8f 91       	pop	r24
    284a:	7f 91       	pop	r23
    284c:	6f 91       	pop	r22
    284e:	5f 91       	pop	r21
    2850:	4f 91       	pop	r20
    2852:	3f 91       	pop	r19
    2854:	2f 91       	pop	r18
    2856:	0f 90       	pop	r0
    2858:	0b be       	out	0x3b, r0	; 59
    285a:	0f 90       	pop	r0
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	0f 90       	pop	r0
    2860:	1f 90       	pop	r1
    2862:	18 95       	reti

00002864 <writeSE2FRAM>:
	SPIBuffer[SPICount+2] = SPIC.DATA;
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

void writeSE2FRAM() {
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	28 97       	sbiw	r28, 0x08	; 8
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	de bf       	out	0x3e, r29	; 62
	volatile int32_t sum = 0;
    2878:	1d 82       	std	Y+5, r1	; 0x05
    287a:	1e 82       	std	Y+6, r1	; 0x06
    287c:	1f 82       	std	Y+7, r1	; 0x07
    287e:	18 86       	std	Y+8, r1	; 0x08
	volatile int32_t currentSample;
	sampleCount++;
    2880:	80 91 6c 50 	lds	r24, 0x506C
    2884:	90 91 6d 50 	lds	r25, 0x506D
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	80 93 6c 50 	sts	0x506C, r24
    288e:	90 93 6d 50 	sts	0x506D, r25
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2892:	80 ed       	ldi	r24, 0xD0	; 208
    2894:	80 93 c0 08 	sts	0x08C0, r24
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    289c:	1f ef       	ldi	r17, 0xFF	; 255
    289e:	f9 01       	movw	r30, r18
    28a0:	e1 5a       	subi	r30, 0xA1	; 161
    28a2:	ff 4a       	sbci	r31, 0xAF	; 175
    28a4:	80 81       	ld	r24, Z
    28a6:	87 ff       	sbrs	r24, 7
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <writeSE2FRAM+0x4a>
    28aa:	1c 83       	std	Y+4, r17	; 0x04
    28ac:	01 c0       	rjmp	.+2      	; 0x28b0 <writeSE2FRAM+0x4c>
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
    28ae:	1c 82       	std	Y+4, r1	; 0x04
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    28b0:	4f e5       	ldi	r20, 0x5F	; 95
    28b2:	e4 2e       	mov	r14, r20
    28b4:	40 e5       	ldi	r20, 0x50	; 80
    28b6:	f4 2e       	mov	r15, r20
    28b8:	80 81       	ld	r24, Z
    28ba:	8b 83       	std	Y+3, r24	; 0x03
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    28bc:	f9 01       	movw	r30, r18
    28be:	e0 5a       	subi	r30, 0xA0	; 160
    28c0:	ff 4a       	sbci	r31, 0xAF	; 175
    28c2:	80 81       	ld	r24, Z
    28c4:	8a 83       	std	Y+2, r24	; 0x02
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    28c6:	f9 01       	movw	r30, r18
    28c8:	ef 59       	subi	r30, 0x9F	; 159
    28ca:	ff 4a       	sbci	r31, 0xAF	; 175
    28cc:	80 81       	ld	r24, Z
    28ce:	89 83       	std	Y+1, r24	; 0x01
		sum += currentSample;
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	af 81       	ldd	r26, Y+7	; 0x07
    28d6:	b8 85       	ldd	r27, Y+8	; 0x08
    28d8:	49 81       	ldd	r20, Y+1	; 0x01
    28da:	5a 81       	ldd	r21, Y+2	; 0x02
    28dc:	6b 81       	ldd	r22, Y+3	; 0x03
    28de:	7c 81       	ldd	r23, Y+4	; 0x04
    28e0:	84 0f       	add	r24, r20
    28e2:	95 1f       	adc	r25, r21
    28e4:	a6 1f       	adc	r26, r22
    28e6:	b7 1f       	adc	r27, r23
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	9e 83       	std	Y+6, r25	; 0x06
    28ec:	af 83       	std	Y+7, r26	; 0x07
    28ee:	b8 87       	std	Y+8, r27	; 0x08
    28f0:	2d 5f       	subi	r18, 0xFD	; 253
    28f2:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile int32_t currentSample;
	sampleCount++;
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    28f4:	2c 30       	cpi	r18, 0x0C	; 12
    28f6:	31 05       	cpc	r19, r1
    28f8:	91 f6       	brne	.-92     	; 0x289e <writeSE2FRAM+0x3a>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
	
	sum = sum / 4;
    28fa:	6d 81       	ldd	r22, Y+5	; 0x05
    28fc:	7e 81       	ldd	r23, Y+6	; 0x06
    28fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2900:	98 85       	ldd	r25, Y+8	; 0x08
    2902:	24 e0       	ldi	r18, 0x04	; 4
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	0e 94 46 31 	call	0x628c	; 0x628c <__divmodsi4>
    290e:	2d 83       	std	Y+5, r18	; 0x05
    2910:	3e 83       	std	Y+6, r19	; 0x06
    2912:	4f 83       	std	Y+7, r20	; 0x07
    2914:	58 87       	std	Y+8, r21	; 0x08
	SPIBuffer[2] = *(((uint8_t*)&sum)+0);
    2916:	8d 81       	ldd	r24, Y+5	; 0x05
    2918:	f7 01       	movw	r30, r14
    291a:	82 83       	std	Z+2, r24	; 0x02
	SPIBuffer[1] = *(((uint8_t*)&sum)+1);
    291c:	8e 81       	ldd	r24, Y+6	; 0x06
    291e:	81 83       	std	Z+1, r24	; 0x01
	SPIBuffer[0] = *(((uint8_t*)&sum)+2);	
    2920:	8f 81       	ldd	r24, Y+7	; 0x07
    2922:	80 93 5f 50 	sts	0x505F, r24


	
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2926:	80 e1       	ldi	r24, 0x10	; 16
    2928:	e0 e4       	ldi	r30, 0x40	; 64
    292a:	f6 e0       	ldi	r31, 0x06	; 6
    292c:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    292e:	88 e0       	ldi	r24, 0x08	; 8
    2930:	e0 e2       	ldi	r30, 0x20	; 32
    2932:	f6 e0       	ldi	r31, 0x06	; 6
    2934:	86 83       	std	Z+6, r24	; 0x06
	nop();
    2936:	00 00       	nop
	SPIC.DATA = FR_WREN;
    2938:	86 e0       	ldi	r24, 0x06	; 6
    293a:	e0 ec       	ldi	r30, 0xC0	; 192
    293c:	f8 e0       	ldi	r31, 0x08	; 8
    293e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2940:	80 91 c2 08 	lds	r24, 0x08C2
    2944:	87 ff       	sbrs	r24, 7
    2946:	fc cf       	rjmp	.-8      	; 0x2940 <writeSE2FRAM+0xdc>
	SPIBuffer[12] = SPIC.DATA;
    2948:	80 91 c3 08 	lds	r24, 0x08C3
    294c:	80 93 6b 50 	sts	0x506B, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
    2950:	e0 e2       	ldi	r30, 0x20	; 32
    2952:	f6 e0       	ldi	r31, 0x06	; 6
    2954:	88 e0       	ldi	r24, 0x08	; 8
    2956:	85 83       	std	Z+5, r24	; 0x05
	nop(); // time for CS_FRAM to accept high signal
    2958:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    295a:	86 83       	std	Z+6, r24	; 0x06
	nop();
    295c:	00 00       	nop
	SPIC.DATA = FR_WRITE;
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	e0 ec       	ldi	r30, 0xC0	; 192
    2962:	f8 e0       	ldi	r31, 0x08	; 8
    2964:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2966:	80 91 c2 08 	lds	r24, 0x08C2
    296a:	87 ff       	sbrs	r24, 7
    296c:	fc cf       	rjmp	.-8      	; 0x2966 <writeSE2FRAM+0x102>
	SPIBuffer[12] = SPIC.DATA;
    296e:	80 91 c3 08 	lds	r24, 0x08C3
    2972:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    2976:	80 91 5b 40 	lds	r24, 0x405B
    297a:	e0 ec       	ldi	r30, 0xC0	; 192
    297c:	f8 e0       	ldi	r31, 0x08	; 8
    297e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2980:	80 91 c2 08 	lds	r24, 0x08C2
    2984:	87 ff       	sbrs	r24, 7
    2986:	fc cf       	rjmp	.-8      	; 0x2980 <writeSE2FRAM+0x11c>
	SPIBuffer[12] = SPIC.DATA;
    2988:	80 91 c3 08 	lds	r24, 0x08C3
    298c:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
    2990:	80 91 5a 40 	lds	r24, 0x405A
    2994:	e0 ec       	ldi	r30, 0xC0	; 192
    2996:	f8 e0       	ldi	r31, 0x08	; 8
    2998:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    299a:	80 91 c2 08 	lds	r24, 0x08C2
    299e:	87 ff       	sbrs	r24, 7
    29a0:	fc cf       	rjmp	.-8      	; 0x299a <writeSE2FRAM+0x136>
	SPIBuffer[12] = SPIC.DATA;
    29a2:	80 91 c3 08 	lds	r24, 0x08C3
    29a6:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = SPIBuffer[0];
    29aa:	80 91 5f 50 	lds	r24, 0x505F
    29ae:	e0 ec       	ldi	r30, 0xC0	; 192
    29b0:	f8 e0       	ldi	r31, 0x08	; 8
    29b2:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    29b4:	80 91 c2 08 	lds	r24, 0x08C2
    29b8:	87 ff       	sbrs	r24, 7
    29ba:	fc cf       	rjmp	.-8      	; 0x29b4 <writeSE2FRAM+0x150>
	SPIBuffer[12] = SPIC.DATA;
    29bc:	80 91 c3 08 	lds	r24, 0x08C3
    29c0:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = SPIBuffer[1];
    29c4:	80 91 60 50 	lds	r24, 0x5060
    29c8:	e0 ec       	ldi	r30, 0xC0	; 192
    29ca:	f8 e0       	ldi	r31, 0x08	; 8
    29cc:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    29ce:	80 91 c2 08 	lds	r24, 0x08C2
    29d2:	87 ff       	sbrs	r24, 7
    29d4:	fc cf       	rjmp	.-8      	; 0x29ce <writeSE2FRAM+0x16a>
	SPIBuffer[12] = SPIC.DATA;
    29d6:	80 91 c3 08 	lds	r24, 0x08C3
    29da:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = SPIBuffer[2];
    29de:	80 91 61 50 	lds	r24, 0x5061
    29e2:	e0 ec       	ldi	r30, 0xC0	; 192
    29e4:	f8 e0       	ldi	r31, 0x08	; 8
    29e6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    29e8:	80 91 c2 08 	lds	r24, 0x08C2
    29ec:	87 ff       	sbrs	r24, 7
    29ee:	fc cf       	rjmp	.-8      	; 0x29e8 <writeSE2FRAM+0x184>
	SPIBuffer[12] = SPIC.DATA;
    29f0:	80 91 c3 08 	lds	r24, 0x08C3
    29f4:	80 93 6b 50 	sts	0x506B, r24
		
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    29f8:	88 e0       	ldi	r24, 0x08	; 8
    29fa:	e0 e2       	ldi	r30, 0x20	; 32
    29fc:	f6 e0       	ldi	r31, 0x06	; 6
    29fe:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    2a00:	e0 e4       	ldi	r30, 0x40	; 64
    2a02:	f6 e0       	ldi	r31, 0x06	; 6
    2a04:	80 e1       	ldi	r24, 0x10	; 16
    2a06:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    2a08:	94 e5       	ldi	r25, 0x54	; 84
    2a0a:	90 93 c0 08 	sts	0x08C0, r25
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    2a0e:	86 83       	std	Z+6, r24	; 0x06
	
	FRAMAddress +=3;
    2a10:	80 91 5a 40 	lds	r24, 0x405A
    2a14:	90 91 5b 40 	lds	r25, 0x405B
    2a18:	03 96       	adiw	r24, 0x03	; 3
    2a1a:	80 93 5a 40 	sts	0x405A, r24
    2a1e:	90 93 5b 40 	sts	0x405B, r25
	checksumADC[0] += SPIBuffer[0];
    2a22:	90 91 bc 21 	lds	r25, 0x21BC
    2a26:	80 91 5f 50 	lds	r24, 0x505F
    2a2a:	89 0f       	add	r24, r25
    2a2c:	80 93 bc 21 	sts	0x21BC, r24
	checksumADC[1] += SPIBuffer[1];
    2a30:	90 91 bd 21 	lds	r25, 0x21BD
    2a34:	80 91 60 50 	lds	r24, 0x5060
    2a38:	89 0f       	add	r24, r25
    2a3a:	80 93 bd 21 	sts	0x21BD, r24
	checksumADC[2] += SPIBuffer[2];	
    2a3e:	90 91 be 21 	lds	r25, 0x21BE
    2a42:	80 91 61 50 	lds	r24, 0x5061
    2a46:	89 0f       	add	r24, r25
    2a48:	80 93 be 21 	sts	0x21BE, r24
}
    2a4c:	28 96       	adiw	r28, 0x08	; 8
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	ff 90       	pop	r15
    2a5a:	ef 90       	pop	r14
    2a5c:	08 95       	ret

00002a5e <__vector_77>:
ISR(TCD0_CCD_vect) {
	sampleCurrentChannel();
	SPICount = 0;		
}

ISR(TCD0_OVF_vect) {
    2a5e:	1f 92       	push	r1
    2a60:	0f 92       	push	r0
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	0f 92       	push	r0
    2a66:	0b b6       	in	r0, 0x3b	; 59
    2a68:	0f 92       	push	r0
    2a6a:	11 24       	eor	r1, r1
    2a6c:	2f 93       	push	r18
    2a6e:	3f 93       	push	r19
    2a70:	4f 93       	push	r20
    2a72:	5f 93       	push	r21
    2a74:	6f 93       	push	r22
    2a76:	7f 93       	push	r23
    2a78:	8f 93       	push	r24
    2a7a:	9f 93       	push	r25
    2a7c:	af 93       	push	r26
    2a7e:	bf 93       	push	r27
    2a80:	ef 93       	push	r30
    2a82:	ff 93       	push	r31
	writeSE2FRAM();
    2a84:	0e 94 32 14 	call	0x2864	; 0x2864 <writeSE2FRAM>
}
    2a88:	ff 91       	pop	r31
    2a8a:	ef 91       	pop	r30
    2a8c:	bf 91       	pop	r27
    2a8e:	af 91       	pop	r26
    2a90:	9f 91       	pop	r25
    2a92:	8f 91       	pop	r24
    2a94:	7f 91       	pop	r23
    2a96:	6f 91       	pop	r22
    2a98:	5f 91       	pop	r21
    2a9a:	4f 91       	pop	r20
    2a9c:	3f 91       	pop	r19
    2a9e:	2f 91       	pop	r18
    2aa0:	0f 90       	pop	r0
    2aa2:	0b be       	out	0x3b, r0	; 59
    2aa4:	0f 90       	pop	r0
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	0f 90       	pop	r0
    2aaa:	1f 90       	pop	r1
    2aac:	18 95       	reti

00002aae <__vector_14>:
		PORTB.OUTSET = PIN1_bm;
	}
	
}

ISR(TCC0_OVF_vect) {
    2aae:	1f 92       	push	r1
    2ab0:	0f 92       	push	r0
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	0f 92       	push	r0
    2ab6:	0b b6       	in	r0, 0x3b	; 59
    2ab8:	0f 92       	push	r0
    2aba:	11 24       	eor	r1, r1
    2abc:	2f 93       	push	r18
    2abe:	3f 93       	push	r19
    2ac0:	4f 93       	push	r20
    2ac2:	5f 93       	push	r21
    2ac4:	6f 93       	push	r22
    2ac6:	7f 93       	push	r23
    2ac8:	8f 93       	push	r24
    2aca:	9f 93       	push	r25
    2acc:	af 93       	push	r26
    2ace:	bf 93       	push	r27
    2ad0:	ef 93       	push	r30
    2ad2:	ff 93       	push	r31
	writeSE2FRAM();
    2ad4:	0e 94 32 14 	call	0x2864	; 0x2864 <writeSE2FRAM>
}
    2ad8:	ff 91       	pop	r31
    2ada:	ef 91       	pop	r30
    2adc:	bf 91       	pop	r27
    2ade:	af 91       	pop	r26
    2ae0:	9f 91       	pop	r25
    2ae2:	8f 91       	pop	r24
    2ae4:	7f 91       	pop	r23
    2ae6:	6f 91       	pop	r22
    2ae8:	5f 91       	pop	r21
    2aea:	4f 91       	pop	r20
    2aec:	3f 91       	pop	r19
    2aee:	2f 91       	pop	r18
    2af0:	0f 90       	pop	r0
    2af2:	0b be       	out	0x3b, r0	; 59
    2af4:	0f 90       	pop	r0
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	0f 90       	pop	r0
    2afa:	1f 90       	pop	r1
    2afc:	18 95       	reti

00002afe <readFRAM>:
	checksumADC[2] += SPIBuffer[2];	
}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes) {
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	ec 01       	movw	r28, r24
	SPIInit(SPI_MODE_0_gc);
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2b0a:	80 ed       	ldi	r24, 0xD0	; 208
    2b0c:	80 93 c0 08 	sts	0x08C0, r24
	SPICS(TRUE);
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    2b16:	88 e0       	ldi	r24, 0x08	; 8
    2b18:	e0 e2       	ldi	r30, 0x20	; 32
    2b1a:	f6 e0       	ldi	r31, 0x06	; 6
    2b1c:	86 83       	std	Z+6, r24	; 0x06
	nop();
    2b1e:	00 00       	nop
								
	SPIC.DATA = FR_READ;
    2b20:	83 e0       	ldi	r24, 0x03	; 3
    2b22:	e0 ec       	ldi	r30, 0xC0	; 192
    2b24:	f8 e0       	ldi	r31, 0x08	; 8
    2b26:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2b28:	80 91 c2 08 	lds	r24, 0x08C2
    2b2c:	87 ff       	sbrs	r24, 7
    2b2e:	fc cf       	rjmp	.-8      	; 0x2b28 <readFRAM+0x2a>
	SPIBuffer[12] = SPIC.DATA;
    2b30:	80 91 c3 08 	lds	r24, 0x08C3
    2b34:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 1);;
    2b38:	80 91 5b 40 	lds	r24, 0x405B
    2b3c:	e0 ec       	ldi	r30, 0xC0	; 192
    2b3e:	f8 e0       	ldi	r31, 0x08	; 8
    2b40:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2b42:	80 91 c2 08 	lds	r24, 0x08C2
    2b46:	87 ff       	sbrs	r24, 7
    2b48:	fc cf       	rjmp	.-8      	; 0x2b42 <readFRAM+0x44>
	SPIBuffer[12] = SPIC.DATA;
    2b4a:	80 91 c3 08 	lds	r24, 0x08C3
    2b4e:	80 93 6b 50 	sts	0x506B, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
    2b52:	80 91 5a 40 	lds	r24, 0x405A
    2b56:	e0 ec       	ldi	r30, 0xC0	; 192
    2b58:	f8 e0       	ldi	r31, 0x08	; 8
    2b5a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2b5c:	80 91 c2 08 	lds	r24, 0x08C2
    2b60:	87 ff       	sbrs	r24, 7
    2b62:	fc cf       	rjmp	.-8      	; 0x2b5c <readFRAM+0x5e>
	SPIBuffer[12] = SPIC.DATA;
    2b64:	80 91 c3 08 	lds	r24, 0x08C3
    2b68:	80 93 6b 50 	sts	0x506B, r24
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
		SPIC.DATA = 0xAA;
    2b70:	a0 ec       	ldi	r26, 0xC0	; 192
    2b72:	b8 e0       	ldi	r27, 0x08	; 8
    2b74:	2a ea       	ldi	r18, 0xAA	; 170
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    2b76:	0e c0       	rjmp	.+28     	; 0x2b94 <readFRAM+0x96>
		SPIC.DATA = 0xAA;
    2b78:	13 96       	adiw	r26, 0x03	; 3
    2b7a:	2c 93       	st	X, r18
    2b7c:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    2b7e:	30 91 c2 08 	lds	r19, 0x08C2
    2b82:	37 ff       	sbrs	r19, 7
    2b84:	fc cf       	rjmp	.-8      	; 0x2b7e <readFRAM+0x80>
		FRAMReadBuffer[i] = SPIC.DATA;
    2b86:	30 91 c3 08 	lds	r19, 0x08C3
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e8 53       	subi	r30, 0x38	; 56
    2b8e:	fc 4d       	sbci	r31, 0xDC	; 220
    2b90:	30 83       	st	Z, r19
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    2b92:	01 96       	adiw	r24, 0x01	; 1
    2b94:	8c 17       	cp	r24, r28
    2b96:	9d 07       	cpc	r25, r29
    2b98:	79 f7       	brne	.-34     	; 0x2b78 <readFRAM+0x7a>
		SPIC.DATA = 0xAA;
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
	}

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
    2b9a:	88 e0       	ldi	r24, 0x08	; 8
    2b9c:	e0 e2       	ldi	r30, 0x20	; 32
    2b9e:	f6 e0       	ldi	r31, 0x06	; 6
    2ba0:	85 83       	std	Z+5, r24	; 0x05
	SPICS(FALSE);
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();
    2ba8:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>

}
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	08 95       	ret

00002bb2 <calcChecksumFRAM>:

	ADCPower(FALSE);

}

void calcChecksumFRAM() {
    2bb2:	2f 92       	push	r2
    2bb4:	3f 92       	push	r3
    2bb6:	4f 92       	push	r4
    2bb8:	5f 92       	push	r5
    2bba:	6f 92       	push	r6
    2bbc:	7f 92       	push	r7
    2bbe:	8f 92       	push	r8
    2bc0:	9f 92       	push	r9
    2bc2:	af 92       	push	r10
    2bc4:	bf 92       	push	r11
    2bc6:	cf 92       	push	r12
    2bc8:	df 92       	push	r13
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
    2bd6:	10 92 83 50 	sts	0x5083, r1
    2bda:	10 92 84 50 	sts	0x5084, r1
    2bde:	10 92 85 50 	sts	0x5085, r1
    2be2:	10 92 86 50 	sts	0x5086, r1
    2be6:	10 92 87 50 	sts	0x5087, r1
    2bea:	10 92 88 50 	sts	0x5088, r1
    2bee:	10 92 89 50 	sts	0x5089, r1
    2bf2:	10 92 8a 50 	sts	0x508A, r1
    2bf6:	eb e7       	ldi	r30, 0x7B	; 123
    2bf8:	f0 e5       	ldi	r31, 0x50	; 80
    2bfa:	10 92 7b 50 	sts	0x507B, r1
    2bfe:	11 82       	std	Z+1, r1	; 0x01
    2c00:	12 82       	std	Z+2, r1	; 0x02
    2c02:	13 82       	std	Z+3, r1	; 0x03
    2c04:	14 82       	std	Z+4, r1	; 0x04
    2c06:	15 82       	std	Z+5, r1	; 0x05
    2c08:	16 82       	std	Z+6, r1	; 0x06
    2c0a:	17 82       	std	Z+7, r1	; 0x07
    2c0c:	df 01       	movw	r26, r30
    2c0e:	18 97       	sbiw	r26, 0x08	; 8
    2c10:	10 92 73 50 	sts	0x5073, r1
    2c14:	11 96       	adiw	r26, 0x01	; 1
    2c16:	1c 92       	st	X, r1
    2c18:	11 97       	sbiw	r26, 0x01	; 1
    2c1a:	12 96       	adiw	r26, 0x02	; 2
    2c1c:	1c 92       	st	X, r1
    2c1e:	12 97       	sbiw	r26, 0x02	; 2
    2c20:	13 96       	adiw	r26, 0x03	; 3
    2c22:	1c 92       	st	X, r1
    2c24:	13 97       	sbiw	r26, 0x03	; 3
    2c26:	14 96       	adiw	r26, 0x04	; 4
    2c28:	1c 92       	st	X, r1
    2c2a:	14 97       	sbiw	r26, 0x04	; 4
    2c2c:	15 96       	adiw	r26, 0x05	; 5
    2c2e:	1c 92       	st	X, r1
    2c30:	15 97       	sbiw	r26, 0x05	; 5
    2c32:	16 96       	adiw	r26, 0x06	; 6
    2c34:	1c 92       	st	X, r1
    2c36:	16 97       	sbiw	r26, 0x06	; 6
    2c38:	17 96       	adiw	r26, 0x07	; 7
    2c3a:	1c 92       	st	X, r1
    2c3c:	17 97       	sbiw	r26, 0x07	; 7
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
    2c3e:	10 92 bb 21 	sts	0x21BB, r1
    2c42:	10 92 ba 21 	sts	0x21BA, r1
    2c46:	10 92 b9 21 	sts	0x21B9, r1
	FRAMAddress = FR_BASEADD;
    2c4a:	10 92 5a 40 	sts	0x405A, r1
    2c4e:	10 92 5b 40 	sts	0x405B, r1
    2c52:	59 e0       	ldi	r21, 0x09	; 9
    2c54:	45 2e       	mov	r4, r21
    2c56:	51 2c       	mov	r5, r1
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    2c58:	63 e0       	ldi	r22, 0x03	; 3
    2c5a:	26 2e       	mov	r2, r22
    2c5c:	31 2c       	mov	r3, r1
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    2c5e:	ee 24       	eor	r14, r14
    2c60:	ea 94       	dec	r14
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
			if(k%9 == 8) sumFRAM[2] += *temp64;
    2c62:	70 e1       	ldi	r23, 0x10	; 16
    2c64:	67 2e       	mov	r6, r23
    2c66:	71 2c       	mov	r7, r1
    2c68:	6a 0e       	add	r6, r26
    2c6a:	7b 1e       	adc	r7, r27
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
    2c6c:	4f 01       	movw	r8, r30
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    2c6e:	5d 01       	movw	r10, r26
void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
    2c70:	81 e7       	ldi	r24, 0x71	; 113
    2c72:	9c e1       	ldi	r25, 0x1C	; 28
    2c74:	0e 94 7f 15 	call	0x2afe	; 0x2afe <readFRAM>
		FRAMAddress += FR_READ_BUFFER_SIZE;
    2c78:	80 91 5a 40 	lds	r24, 0x405A
    2c7c:	90 91 5b 40 	lds	r25, 0x405B
    2c80:	8f 58       	subi	r24, 0x8F	; 143
    2c82:	93 4e       	sbci	r25, 0xE3	; 227
    2c84:	80 93 5a 40 	sts	0x405A, r24
    2c88:	90 93 5b 40 	sts	0x405B, r25
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    2c8c:	cc 24       	eor	r12, r12
    2c8e:	dd 24       	eor	r13, r13
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    2c90:	c6 01       	movw	r24, r12
    2c92:	b1 01       	movw	r22, r2
    2c94:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__udivmodhi4>
    2c98:	fc 01       	movw	r30, r24
    2c9a:	e7 54       	subi	r30, 0x47	; 71
    2c9c:	fe 4d       	sbci	r31, 0xDE	; 222
    2c9e:	20 81       	ld	r18, Z
    2ca0:	d6 01       	movw	r26, r12
    2ca2:	a8 53       	subi	r26, 0x38	; 56
    2ca4:	bc 4d       	sbci	r27, 0xDC	; 220
    2ca6:	3c 91       	ld	r19, X
    2ca8:	23 0f       	add	r18, r19
    2caa:	20 83       	st	Z, r18
    2cac:	e0 91 5d 50 	lds	r30, 0x505D
    2cb0:	f0 91 5e 50 	lds	r31, 0x505E
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	c1 f4       	brne	.+48     	; 0x2ce8 <calcChecksumFRAM+0x136>
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    2cb8:	8c 91       	ld	r24, X
    2cba:	10 82       	st	Z, r1
    2cbc:	11 82       	std	Z+1, r1	; 0x01
    2cbe:	12 82       	std	Z+2, r1	; 0x02
    2cc0:	87 ff       	sbrs	r24, 7
    2cc2:	06 c0       	rjmp	.+12     	; 0x2cd0 <calcChecksumFRAM+0x11e>
    2cc4:	e3 82       	std	Z+3, r14	; 0x03
    2cc6:	e4 82       	std	Z+4, r14	; 0x04
    2cc8:	e5 82       	std	Z+5, r14	; 0x05
    2cca:	e6 82       	std	Z+6, r14	; 0x06
    2ccc:	e7 82       	std	Z+7, r14	; 0x07
    2cce:	05 c0       	rjmp	.+10     	; 0x2cda <calcChecksumFRAM+0x128>
				else *temp64 = 0x0000000000000000;
    2cd0:	13 82       	std	Z+3, r1	; 0x03
    2cd2:	14 82       	std	Z+4, r1	; 0x04
    2cd4:	15 82       	std	Z+5, r1	; 0x05
    2cd6:	16 82       	std	Z+6, r1	; 0x06
    2cd8:	17 82       	std	Z+7, r1	; 0x07
				*(((uint8_t*)temp64) + 2) = FRAMReadBuffer[k];
    2cda:	8c 91       	ld	r24, X
    2cdc:	e0 91 5d 50 	lds	r30, 0x505D
    2ce0:	f0 91 5e 50 	lds	r31, 0x505E
    2ce4:	82 83       	std	Z+2, r24	; 0x02
    2ce6:	08 c0       	rjmp	.+16     	; 0x2cf8 <calcChecksumFRAM+0x146>
			} else if(k%3 == 1) {
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	91 05       	cpc	r25, r1
    2cec:	19 f4       	brne	.+6      	; 0x2cf4 <calcChecksumFRAM+0x142>
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
    2cee:	8c 91       	ld	r24, X
    2cf0:	81 83       	std	Z+1, r24	; 0x01
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <calcChecksumFRAM+0x146>
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
    2cf4:	8c 91       	ld	r24, X
    2cf6:	80 83       	st	Z, r24
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    2cf8:	c6 01       	movw	r24, r12
    2cfa:	69 e0       	ldi	r22, 0x09	; 9
    2cfc:	70 e0       	ldi	r23, 0x00	; 0
    2cfe:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__udivmodhi4>
    2d02:	82 30       	cpi	r24, 0x02	; 2
    2d04:	91 05       	cpc	r25, r1
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <calcChecksumFRAM+0x158>
    2d08:	69 c0       	rjmp	.+210    	; 0x2ddc <calcChecksumFRAM+0x22a>
    2d0a:	70 91 73 50 	lds	r23, 0x5073
    2d0e:	60 91 74 50 	lds	r22, 0x5074
    2d12:	50 91 75 50 	lds	r21, 0x5075
    2d16:	40 91 76 50 	lds	r20, 0x5076
    2d1a:	30 91 77 50 	lds	r19, 0x5077
    2d1e:	20 91 78 50 	lds	r18, 0x5078
    2d22:	90 91 79 50 	lds	r25, 0x5079
    2d26:	f0 90 7a 50 	lds	r15, 0x507A
    2d2a:	e0 91 5d 50 	lds	r30, 0x505D
    2d2e:	f0 91 5e 50 	lds	r31, 0x505E
    2d32:	80 81       	ld	r24, Z
    2d34:	11 81       	ldd	r17, Z+1	; 0x01
    2d36:	d2 81       	ldd	r29, Z+2	; 0x02
    2d38:	c3 81       	ldd	r28, Z+3	; 0x03
    2d3a:	b4 81       	ldd	r27, Z+4	; 0x04
    2d3c:	a5 81       	ldd	r26, Z+5	; 0x05
    2d3e:	06 81       	ldd	r16, Z+6	; 0x06
    2d40:	e7 81       	ldd	r30, Z+7	; 0x07
    2d42:	87 0f       	add	r24, r23
    2d44:	f1 e0       	ldi	r31, 0x01	; 1
    2d46:	87 17       	cp	r24, r23
    2d48:	08 f0       	brcs	.+2      	; 0x2d4c <calcChecksumFRAM+0x19a>
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	16 0f       	add	r17, r22
    2d4e:	71 e0       	ldi	r23, 0x01	; 1
    2d50:	16 17       	cp	r17, r22
    2d52:	08 f0       	brcs	.+2      	; 0x2d56 <calcChecksumFRAM+0x1a4>
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	f1 0f       	add	r31, r17
    2d58:	61 e0       	ldi	r22, 0x01	; 1
    2d5a:	f1 17       	cp	r31, r17
    2d5c:	08 f0       	brcs	.+2      	; 0x2d60 <calcChecksumFRAM+0x1ae>
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	76 2b       	or	r23, r22
    2d62:	d5 0f       	add	r29, r21
    2d64:	61 e0       	ldi	r22, 0x01	; 1
    2d66:	d5 17       	cp	r29, r21
    2d68:	08 f0       	brcs	.+2      	; 0x2d6c <calcChecksumFRAM+0x1ba>
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	7d 0f       	add	r23, r29
    2d6e:	51 e0       	ldi	r21, 0x01	; 1
    2d70:	7d 17       	cp	r23, r29
    2d72:	08 f0       	brcs	.+2      	; 0x2d76 <calcChecksumFRAM+0x1c4>
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	65 2b       	or	r22, r21
    2d78:	c4 0f       	add	r28, r20
    2d7a:	51 e0       	ldi	r21, 0x01	; 1
    2d7c:	c4 17       	cp	r28, r20
    2d7e:	08 f0       	brcs	.+2      	; 0x2d82 <calcChecksumFRAM+0x1d0>
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	6c 0f       	add	r22, r28
    2d84:	41 e0       	ldi	r20, 0x01	; 1
    2d86:	6c 17       	cp	r22, r28
    2d88:	08 f0       	brcs	.+2      	; 0x2d8c <calcChecksumFRAM+0x1da>
    2d8a:	40 e0       	ldi	r20, 0x00	; 0
    2d8c:	54 2b       	or	r21, r20
    2d8e:	b3 0f       	add	r27, r19
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	b3 17       	cp	r27, r19
    2d94:	08 f0       	brcs	.+2      	; 0x2d98 <calcChecksumFRAM+0x1e6>
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	5b 0f       	add	r21, r27
    2d9a:	31 e0       	ldi	r19, 0x01	; 1
    2d9c:	5b 17       	cp	r21, r27
    2d9e:	08 f0       	brcs	.+2      	; 0x2da2 <calcChecksumFRAM+0x1f0>
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	43 2b       	or	r20, r19
    2da4:	a2 0f       	add	r26, r18
    2da6:	31 e0       	ldi	r19, 0x01	; 1
    2da8:	a2 17       	cp	r26, r18
    2daa:	08 f0       	brcs	.+2      	; 0x2dae <calcChecksumFRAM+0x1fc>
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a 0f       	add	r20, r26
    2db0:	21 e0       	ldi	r18, 0x01	; 1
    2db2:	4a 17       	cp	r20, r26
    2db4:	08 f0       	brcs	.+2      	; 0x2db8 <calcChecksumFRAM+0x206>
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	32 2b       	or	r19, r18
    2dba:	09 0f       	add	r16, r25
    2dbc:	21 e0       	ldi	r18, 0x01	; 1
    2dbe:	09 17       	cp	r16, r25
    2dc0:	08 f0       	brcs	.+2      	; 0x2dc4 <calcChecksumFRAM+0x212>
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 0f       	add	r19, r16
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	30 17       	cp	r19, r16
    2dca:	08 f0       	brcs	.+2      	; 0x2dce <calcChecksumFRAM+0x21c>
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	92 2b       	or	r25, r18
    2dd0:	fe 0e       	add	r15, r30
    2dd2:	9f 0d       	add	r25, r15
    2dd4:	80 93 73 50 	sts	0x5073, r24
    2dd8:	d5 01       	movw	r26, r10
    2dda:	d9 c0       	rjmp	.+434    	; 0x2f8e <calcChecksumFRAM+0x3dc>
			if(k%9 == 5) sumFRAM[1] += *temp64;
    2ddc:	85 30       	cpi	r24, 0x05	; 5
    2dde:	91 05       	cpc	r25, r1
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <calcChecksumFRAM+0x232>
    2de2:	69 c0       	rjmp	.+210    	; 0x2eb6 <calcChecksumFRAM+0x304>
    2de4:	70 91 7b 50 	lds	r23, 0x507B
    2de8:	60 91 7c 50 	lds	r22, 0x507C
    2dec:	50 91 7d 50 	lds	r21, 0x507D
    2df0:	40 91 7e 50 	lds	r20, 0x507E
    2df4:	30 91 7f 50 	lds	r19, 0x507F
    2df8:	20 91 80 50 	lds	r18, 0x5080
    2dfc:	90 91 81 50 	lds	r25, 0x5081
    2e00:	f0 90 82 50 	lds	r15, 0x5082
    2e04:	e0 91 5d 50 	lds	r30, 0x505D
    2e08:	f0 91 5e 50 	lds	r31, 0x505E
    2e0c:	80 81       	ld	r24, Z
    2e0e:	11 81       	ldd	r17, Z+1	; 0x01
    2e10:	d2 81       	ldd	r29, Z+2	; 0x02
    2e12:	c3 81       	ldd	r28, Z+3	; 0x03
    2e14:	b4 81       	ldd	r27, Z+4	; 0x04
    2e16:	a5 81       	ldd	r26, Z+5	; 0x05
    2e18:	06 81       	ldd	r16, Z+6	; 0x06
    2e1a:	e7 81       	ldd	r30, Z+7	; 0x07
    2e1c:	87 0f       	add	r24, r23
    2e1e:	f1 e0       	ldi	r31, 0x01	; 1
    2e20:	87 17       	cp	r24, r23
    2e22:	08 f0       	brcs	.+2      	; 0x2e26 <calcChecksumFRAM+0x274>
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	16 0f       	add	r17, r22
    2e28:	71 e0       	ldi	r23, 0x01	; 1
    2e2a:	16 17       	cp	r17, r22
    2e2c:	08 f0       	brcs	.+2      	; 0x2e30 <calcChecksumFRAM+0x27e>
    2e2e:	70 e0       	ldi	r23, 0x00	; 0
    2e30:	f1 0f       	add	r31, r17
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	f1 17       	cp	r31, r17
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <calcChecksumFRAM+0x288>
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	76 2b       	or	r23, r22
    2e3c:	d5 0f       	add	r29, r21
    2e3e:	61 e0       	ldi	r22, 0x01	; 1
    2e40:	d5 17       	cp	r29, r21
    2e42:	08 f0       	brcs	.+2      	; 0x2e46 <calcChecksumFRAM+0x294>
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	7d 0f       	add	r23, r29
    2e48:	51 e0       	ldi	r21, 0x01	; 1
    2e4a:	7d 17       	cp	r23, r29
    2e4c:	08 f0       	brcs	.+2      	; 0x2e50 <calcChecksumFRAM+0x29e>
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	65 2b       	or	r22, r21
    2e52:	c4 0f       	add	r28, r20
    2e54:	51 e0       	ldi	r21, 0x01	; 1
    2e56:	c4 17       	cp	r28, r20
    2e58:	08 f0       	brcs	.+2      	; 0x2e5c <calcChecksumFRAM+0x2aa>
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	6c 0f       	add	r22, r28
    2e5e:	41 e0       	ldi	r20, 0x01	; 1
    2e60:	6c 17       	cp	r22, r28
    2e62:	08 f0       	brcs	.+2      	; 0x2e66 <calcChecksumFRAM+0x2b4>
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	54 2b       	or	r21, r20
    2e68:	b3 0f       	add	r27, r19
    2e6a:	41 e0       	ldi	r20, 0x01	; 1
    2e6c:	b3 17       	cp	r27, r19
    2e6e:	08 f0       	brcs	.+2      	; 0x2e72 <calcChecksumFRAM+0x2c0>
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	5b 0f       	add	r21, r27
    2e74:	31 e0       	ldi	r19, 0x01	; 1
    2e76:	5b 17       	cp	r21, r27
    2e78:	08 f0       	brcs	.+2      	; 0x2e7c <calcChecksumFRAM+0x2ca>
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	43 2b       	or	r20, r19
    2e7e:	a2 0f       	add	r26, r18
    2e80:	31 e0       	ldi	r19, 0x01	; 1
    2e82:	a2 17       	cp	r26, r18
    2e84:	08 f0       	brcs	.+2      	; 0x2e88 <calcChecksumFRAM+0x2d6>
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a 0f       	add	r20, r26
    2e8a:	21 e0       	ldi	r18, 0x01	; 1
    2e8c:	4a 17       	cp	r20, r26
    2e8e:	08 f0       	brcs	.+2      	; 0x2e92 <calcChecksumFRAM+0x2e0>
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	32 2b       	or	r19, r18
    2e94:	09 0f       	add	r16, r25
    2e96:	21 e0       	ldi	r18, 0x01	; 1
    2e98:	09 17       	cp	r16, r25
    2e9a:	08 f0       	brcs	.+2      	; 0x2e9e <calcChecksumFRAM+0x2ec>
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 0f       	add	r19, r16
    2ea0:	91 e0       	ldi	r25, 0x01	; 1
    2ea2:	30 17       	cp	r19, r16
    2ea4:	08 f0       	brcs	.+2      	; 0x2ea8 <calcChecksumFRAM+0x2f6>
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	92 2b       	or	r25, r18
    2eaa:	fe 0e       	add	r15, r30
    2eac:	9f 0d       	add	r25, r15
    2eae:	80 93 7b 50 	sts	0x507B, r24
    2eb2:	d4 01       	movw	r26, r8
    2eb4:	6c c0       	rjmp	.+216    	; 0x2f8e <calcChecksumFRAM+0x3dc>
			if(k%9 == 8) sumFRAM[2] += *temp64;
    2eb6:	88 30       	cpi	r24, 0x08	; 8
    2eb8:	91 05       	cpc	r25, r1
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <calcChecksumFRAM+0x30c>
    2ebc:	7d c0       	rjmp	.+250    	; 0x2fb8 <calcChecksumFRAM+0x406>
    2ebe:	70 91 83 50 	lds	r23, 0x5083
    2ec2:	60 91 84 50 	lds	r22, 0x5084
    2ec6:	50 91 85 50 	lds	r21, 0x5085
    2eca:	40 91 86 50 	lds	r20, 0x5086
    2ece:	30 91 87 50 	lds	r19, 0x5087
    2ed2:	20 91 88 50 	lds	r18, 0x5088
    2ed6:	90 91 89 50 	lds	r25, 0x5089
    2eda:	f0 90 8a 50 	lds	r15, 0x508A
    2ede:	e0 91 5d 50 	lds	r30, 0x505D
    2ee2:	f0 91 5e 50 	lds	r31, 0x505E
    2ee6:	80 81       	ld	r24, Z
    2ee8:	11 81       	ldd	r17, Z+1	; 0x01
    2eea:	d2 81       	ldd	r29, Z+2	; 0x02
    2eec:	c3 81       	ldd	r28, Z+3	; 0x03
    2eee:	b4 81       	ldd	r27, Z+4	; 0x04
    2ef0:	a5 81       	ldd	r26, Z+5	; 0x05
    2ef2:	06 81       	ldd	r16, Z+6	; 0x06
    2ef4:	e7 81       	ldd	r30, Z+7	; 0x07
    2ef6:	87 0f       	add	r24, r23
    2ef8:	f1 e0       	ldi	r31, 0x01	; 1
    2efa:	87 17       	cp	r24, r23
    2efc:	08 f0       	brcs	.+2      	; 0x2f00 <calcChecksumFRAM+0x34e>
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	16 0f       	add	r17, r22
    2f02:	71 e0       	ldi	r23, 0x01	; 1
    2f04:	16 17       	cp	r17, r22
    2f06:	08 f0       	brcs	.+2      	; 0x2f0a <calcChecksumFRAM+0x358>
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	f1 0f       	add	r31, r17
    2f0c:	61 e0       	ldi	r22, 0x01	; 1
    2f0e:	f1 17       	cp	r31, r17
    2f10:	08 f0       	brcs	.+2      	; 0x2f14 <calcChecksumFRAM+0x362>
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	76 2b       	or	r23, r22
    2f16:	d5 0f       	add	r29, r21
    2f18:	61 e0       	ldi	r22, 0x01	; 1
    2f1a:	d5 17       	cp	r29, r21
    2f1c:	08 f0       	brcs	.+2      	; 0x2f20 <calcChecksumFRAM+0x36e>
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	7d 0f       	add	r23, r29
    2f22:	51 e0       	ldi	r21, 0x01	; 1
    2f24:	7d 17       	cp	r23, r29
    2f26:	08 f0       	brcs	.+2      	; 0x2f2a <calcChecksumFRAM+0x378>
    2f28:	50 e0       	ldi	r21, 0x00	; 0
    2f2a:	65 2b       	or	r22, r21
    2f2c:	c4 0f       	add	r28, r20
    2f2e:	51 e0       	ldi	r21, 0x01	; 1
    2f30:	c4 17       	cp	r28, r20
    2f32:	08 f0       	brcs	.+2      	; 0x2f36 <calcChecksumFRAM+0x384>
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	6c 0f       	add	r22, r28
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	6c 17       	cp	r22, r28
    2f3c:	08 f0       	brcs	.+2      	; 0x2f40 <calcChecksumFRAM+0x38e>
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	54 2b       	or	r21, r20
    2f42:	b3 0f       	add	r27, r19
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	b3 17       	cp	r27, r19
    2f48:	08 f0       	brcs	.+2      	; 0x2f4c <calcChecksumFRAM+0x39a>
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	5b 0f       	add	r21, r27
    2f4e:	31 e0       	ldi	r19, 0x01	; 1
    2f50:	5b 17       	cp	r21, r27
    2f52:	08 f0       	brcs	.+2      	; 0x2f56 <calcChecksumFRAM+0x3a4>
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	43 2b       	or	r20, r19
    2f58:	a2 0f       	add	r26, r18
    2f5a:	31 e0       	ldi	r19, 0x01	; 1
    2f5c:	a2 17       	cp	r26, r18
    2f5e:	08 f0       	brcs	.+2      	; 0x2f62 <calcChecksumFRAM+0x3b0>
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a 0f       	add	r20, r26
    2f64:	21 e0       	ldi	r18, 0x01	; 1
    2f66:	4a 17       	cp	r20, r26
    2f68:	08 f0       	brcs	.+2      	; 0x2f6c <calcChecksumFRAM+0x3ba>
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	32 2b       	or	r19, r18
    2f6e:	09 0f       	add	r16, r25
    2f70:	21 e0       	ldi	r18, 0x01	; 1
    2f72:	09 17       	cp	r16, r25
    2f74:	08 f0       	brcs	.+2      	; 0x2f78 <calcChecksumFRAM+0x3c6>
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 0f       	add	r19, r16
    2f7a:	91 e0       	ldi	r25, 0x01	; 1
    2f7c:	30 17       	cp	r19, r16
    2f7e:	08 f0       	brcs	.+2      	; 0x2f82 <calcChecksumFRAM+0x3d0>
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	92 2b       	or	r25, r18
    2f84:	fe 0e       	add	r15, r30
    2f86:	9f 0d       	add	r25, r15
    2f88:	80 93 83 50 	sts	0x5083, r24
    2f8c:	d3 01       	movw	r26, r6
    2f8e:	11 96       	adiw	r26, 0x01	; 1
    2f90:	fc 93       	st	X, r31
    2f92:	11 97       	sbiw	r26, 0x01	; 1
    2f94:	12 96       	adiw	r26, 0x02	; 2
    2f96:	7c 93       	st	X, r23
    2f98:	12 97       	sbiw	r26, 0x02	; 2
    2f9a:	13 96       	adiw	r26, 0x03	; 3
    2f9c:	6c 93       	st	X, r22
    2f9e:	13 97       	sbiw	r26, 0x03	; 3
    2fa0:	14 96       	adiw	r26, 0x04	; 4
    2fa2:	5c 93       	st	X, r21
    2fa4:	14 97       	sbiw	r26, 0x04	; 4
    2fa6:	15 96       	adiw	r26, 0x05	; 5
    2fa8:	4c 93       	st	X, r20
    2faa:	15 97       	sbiw	r26, 0x05	; 5
    2fac:	16 96       	adiw	r26, 0x06	; 6
    2fae:	3c 93       	st	X, r19
    2fb0:	16 97       	sbiw	r26, 0x06	; 6
    2fb2:	17 96       	adiw	r26, 0x07	; 7
    2fb4:	9c 93       	st	X, r25
    2fb6:	17 97       	sbiw	r26, 0x07	; 7
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    2fb8:	08 94       	sec
    2fba:	c1 1c       	adc	r12, r1
    2fbc:	d1 1c       	adc	r13, r1
    2fbe:	b1 e7       	ldi	r27, 0x71	; 113
    2fc0:	cb 16       	cp	r12, r27
    2fc2:	bc e1       	ldi	r27, 0x1C	; 28
    2fc4:	db 06       	cpc	r13, r27
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <calcChecksumFRAM+0x418>
    2fc8:	63 ce       	rjmp	.-826    	; 0x2c90 <calcChecksumFRAM+0xde>
    2fca:	08 94       	sec
    2fcc:	41 08       	sbc	r4, r1
    2fce:	51 08       	sbc	r5, r1

void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
    2fd0:	41 14       	cp	r4, r1
    2fd2:	51 04       	cpc	r5, r1
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <calcChecksumFRAM+0x426>
    2fd6:	4c ce       	rjmp	.-872    	; 0x2c70 <calcChecksumFRAM+0xbe>
			
		}	
		
	}
	
}
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	ff 90       	pop	r15
    2fe2:	ef 90       	pop	r14
    2fe4:	df 90       	pop	r13
    2fe6:	cf 90       	pop	r12
    2fe8:	bf 90       	pop	r11
    2fea:	af 90       	pop	r10
    2fec:	9f 90       	pop	r9
    2fee:	8f 90       	pop	r8
    2ff0:	7f 90       	pop	r7
    2ff2:	6f 90       	pop	r6
    2ff4:	5f 90       	pop	r5
    2ff6:	4f 90       	pop	r4
    2ff8:	3f 90       	pop	r3
    2ffa:	2f 90       	pop	r2
    2ffc:	08 95       	ret

00002ffe <FRAMTest1Channel>:

	ADCPower(FALSE);
	
}

void FRAMTest1Channel(void) {
    2ffe:	8f 92       	push	r8
    3000:	9f 92       	push	r9
    3002:	af 92       	push	r10
    3004:	bf 92       	push	r11
    3006:	cf 92       	push	r12
    3008:	df 92       	push	r13
    300a:	ef 92       	push	r14
    300c:	0f 93       	push	r16

	CO_collectSeismic1Channel(ADC_CH_8_gc, FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
    300e:	0f 92       	push	r0
    3010:	0f 92       	push	r0
    3012:	80 e1       	ldi	r24, 0x10	; 16
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	ed b7       	in	r30, 0x3d	; 61
    3018:	fe b7       	in	r31, 0x3e	; 62
    301a:	81 83       	std	Z+1, r24	; 0x01
    301c:	92 83       	std	Z+2, r25	; 0x02
    301e:	87 e0       	ldi	r24, 0x07	; 7
    3020:	68 ec       	ldi	r22, 0xC8	; 200
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	05 e1       	ldi	r16, 0x15	; 21
    3028:	ee 24       	eor	r14, r14
    302a:	e3 94       	inc	r14
    302c:	ad e0       	ldi	r26, 0x0D	; 13
    302e:	ca 2e       	mov	r12, r26
    3030:	d1 2c       	mov	r13, r1
    3032:	be e0       	ldi	r27, 0x0E	; 14
    3034:	ab 2e       	mov	r10, r27
    3036:	b1 2c       	mov	r11, r1
    3038:	3f e0       	ldi	r19, 0x0F	; 15
    303a:	83 2e       	mov	r8, r19
    303c:	91 2c       	mov	r9, r1
    303e:	0e 94 d6 11 	call	0x23ac	; 0x23ac <CO_collectSeismic1Channel>
	GAIN_1_gc, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    304c:	8f ec       	ldi	r24, 0xCF	; 207
    304e:	97 e0       	ldi	r25, 0x07	; 7
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <FRAMTest1Channel+0x52>
    3054:	00 c0       	rjmp	.+0      	; 0x3056 <FRAMTest1Channel+0x58>
    3056:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    3058:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <calcChecksumFRAM>

	ADCPower(FALSE);
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>

}
    3062:	0f 91       	pop	r16
    3064:	ef 90       	pop	r14
    3066:	df 90       	pop	r13
    3068:	cf 90       	pop	r12
    306a:	bf 90       	pop	r11
    306c:	af 90       	pop	r10
    306e:	9f 90       	pop	r9
    3070:	8f 90       	pop	r8
    3072:	08 95       	ret

00003074 <FRAMTest3Channel>:
	SPICS(FALSE);
	SPIDisable();

}

void FRAMTest3Channel(void) {
    3074:	8f 92       	push	r8
    3076:	9f 92       	push	r9
    3078:	af 92       	push	r10
    307a:	bf 92       	push	r11
    307c:	cf 92       	push	r12
    307e:	df 92       	push	r13
    3080:	ef 92       	push	r14
    3082:	ff 92       	push	r15
    3084:	0f 93       	push	r16
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	00 d0       	rcall	.+0      	; 0x308c <FRAMTest3Channel+0x18>
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
	uint8_t gains[3] = { GAIN_1_gc, GAIN_1_gc, GAIN_1_gc };
    3090:	19 82       	std	Y+1, r1	; 0x01
    3092:	1a 82       	std	Y+2, r1	; 0x02
    3094:	1b 82       	std	Y+3, r1	; 0x03
			
	CO_collectSeismic3Channel(FILTER_CH_2AND6_bm | FILTER_CH_3AND7_bm |
    3096:	8e ec       	ldi	r24, 0xCE	; 206
    3098:	be 01       	movw	r22, r28
    309a:	6f 5f       	subi	r22, 0xFF	; 255
    309c:	7f 4f       	sbci	r23, 0xFF	; 255
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	25 e1       	ldi	r18, 0x15	; 21
    30a2:	01 e0       	ldi	r16, 0x01	; 1
    30a4:	5d e0       	ldi	r21, 0x0D	; 13
    30a6:	e5 2e       	mov	r14, r21
    30a8:	f1 2c       	mov	r15, r1
    30aa:	ee e0       	ldi	r30, 0x0E	; 14
    30ac:	ce 2e       	mov	r12, r30
    30ae:	d1 2c       	mov	r13, r1
    30b0:	ff e0       	ldi	r31, 0x0F	; 15
    30b2:	af 2e       	mov	r10, r31
    30b4:	b1 2c       	mov	r11, r1
    30b6:	a0 e1       	ldi	r26, 0x10	; 16
    30b8:	8a 2e       	mov	r8, r26
    30ba:	91 2c       	mov	r9, r1
    30bc:	0e 94 07 11 	call	0x220e	; 0x220e <CO_collectSeismic3Channel>
		FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
		gains, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
    30c6:	8f ec       	ldi	r24, 0xCF	; 207
    30c8:	97 e0       	ldi	r25, 0x07	; 7
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <FRAMTest3Channel+0x56>
    30ce:	00 c0       	rjmp	.+0      	; 0x30d0 <FRAMTest3Channel+0x5c>
    30d0:	00 00       	nop
	_delay_us(250);
	
	calcChecksumFRAM();
    30d2:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <calcChecksumFRAM>

	ADCPower(FALSE);
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	
}
    30dc:	23 96       	adiw	r28, 0x03	; 3
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	0f 91       	pop	r16
    30e8:	ff 90       	pop	r15
    30ea:	ef 90       	pop	r14
    30ec:	df 90       	pop	r13
    30ee:	cf 90       	pop	r12
    30f0:	bf 90       	pop	r11
    30f2:	af 90       	pop	r10
    30f4:	9f 90       	pop	r9
    30f6:	8f 90       	pop	r8
    30f8:	08 95       	ret

000030fa <FRAMWriteKnowns>:

	ADCPower(FALSE);

}

void FRAMWriteKnowns() {
    30fa:	0f 93       	push	r16
    30fc:	1f 93       	push	r17
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
	FRAMAddress = FR_BASEADD;
    3102:	10 92 5a 40 	sts	0x405A, r1
    3106:	10 92 5b 40 	sts	0x405B, r1
	sampleCount = 0;
    310a:	10 92 6c 50 	sts	0x506C, r1
    310e:	10 92 6d 50 	sts	0x506D, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    3112:	10 92 be 21 	sts	0x21BE, r1
    3116:	10 92 bd 21 	sts	0x21BD, r1
    311a:	10 92 bc 21 	sts	0x21BC, r1
	
	ADCPower(TRUE);
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	SPIInit(SPI_MODE_1_gc);
    3124:	84 e0       	ldi	r24, 0x04	; 4
    3126:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    312a:	80 ed       	ldi	r24, 0xD0	; 208
    312c:	80 93 c0 08 	sts	0x08C0, r24
	SPIBuffer[0] = 0x0D;
    3130:	8d e0       	ldi	r24, 0x0D	; 13
    3132:	80 93 5f 50 	sts	0x505F, r24
	SPIBuffer[1] = 0xF3;
    3136:	83 ef       	ldi	r24, 0xF3	; 243
    3138:	80 93 60 50 	sts	0x5060, r24
	SPIBuffer[2] = 0x57;
    313c:	87 e5       	ldi	r24, 0x57	; 87
    313e:	80 93 61 50 	sts	0x5061, r24
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    3142:	00 e4       	ldi	r16, 0x40	; 64
    3144:	16 e0       	ldi	r17, 0x06	; 6
    3146:	30 e1       	ldi	r19, 0x10	; 16
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    3148:	a0 e2       	ldi	r26, 0x20	; 32
    314a:	b6 e0       	ldi	r27, 0x06	; 6
    314c:	28 e0       	ldi	r18, 0x08	; 8
		nop();
		SPIC.DATA = FR_WREN;
    314e:	60 ec       	ldi	r22, 0xC0	; 192
    3150:	78 e0       	ldi	r23, 0x08	; 8
    3152:	56 e0       	ldi	r21, 0x06	; 6
		while(!(SPIC.STATUS & SPI_IF_bm));
    3154:	e0 ec       	ldi	r30, 0xC0	; 192
    3156:	f8 e0       	ldi	r31, 0x08	; 8
		SPIBuffer[12] = SPIC.DATA;
		PORTB.OUTSET = PIN3_bm;  // latch opcode
		nop(); // time for CS_FRAM to accept high signal
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
		nop();
		SPIC.DATA = FR_WRITE;
    3158:	42 e0       	ldi	r20, 0x02	; 2
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    315a:	84 c0       	rjmp	.+264    	; 0x3264 <FRAMWriteKnowns+0x16a>
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    315c:	e8 01       	movw	r28, r16
    315e:	3e 83       	std	Y+6, r19	; 0x06
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    3160:	16 96       	adiw	r26, 0x06	; 6
    3162:	2c 93       	st	X, r18
    3164:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    3166:	00 00       	nop
		SPIC.DATA = FR_WREN;
    3168:	eb 01       	movw	r28, r22
    316a:	5b 83       	std	Y+3, r21	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    316c:	80 91 c2 08 	lds	r24, 0x08C2
    3170:	87 ff       	sbrs	r24, 7
    3172:	fc cf       	rjmp	.-8      	; 0x316c <FRAMWriteKnowns+0x72>
		SPIBuffer[12] = SPIC.DATA;
    3174:	80 91 c3 08 	lds	r24, 0x08C3
    3178:	80 93 6b 50 	sts	0x506B, r24
		PORTB.OUTSET = PIN3_bm;  // latch opcode
    317c:	15 96       	adiw	r26, 0x05	; 5
    317e:	2c 93       	st	X, r18
    3180:	15 97       	sbiw	r26, 0x05	; 5
		nop(); // time for CS_FRAM to accept high signal
    3182:	00 00       	nop
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    3184:	16 96       	adiw	r26, 0x06	; 6
    3186:	2c 93       	st	X, r18
    3188:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    318a:	00 00       	nop
		SPIC.DATA = FR_WRITE;
    318c:	43 83       	std	Z+3, r20	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    318e:	80 91 c2 08 	lds	r24, 0x08C2
    3192:	87 ff       	sbrs	r24, 7
    3194:	fc cf       	rjmp	.-8      	; 0x318e <FRAMWriteKnowns+0x94>
		SPIBuffer[12] = SPIC.DATA;
    3196:	80 91 c3 08 	lds	r24, 0x08C3
    319a:	80 93 6b 50 	sts	0x506B, r24
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    319e:	80 91 5b 40 	lds	r24, 0x405B
    31a2:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    31a4:	80 91 c2 08 	lds	r24, 0x08C2
    31a8:	87 ff       	sbrs	r24, 7
    31aa:	fc cf       	rjmp	.-8      	; 0x31a4 <FRAMWriteKnowns+0xaa>
		SPIBuffer[12] = SPIC.DATA;
    31ac:	80 91 c3 08 	lds	r24, 0x08C3
    31b0:	80 93 6b 50 	sts	0x506B, r24
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
    31b4:	80 91 5a 40 	lds	r24, 0x405A
    31b8:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    31ba:	80 91 c2 08 	lds	r24, 0x08C2
    31be:	87 ff       	sbrs	r24, 7
    31c0:	fc cf       	rjmp	.-8      	; 0x31ba <FRAMWriteKnowns+0xc0>
		SPIBuffer[12] = SPIC.DATA;
    31c2:	80 91 c3 08 	lds	r24, 0x08C3
    31c6:	80 93 6b 50 	sts	0x506B, r24
		SPIC.DATA = SPIBuffer[0];
    31ca:	80 91 5f 50 	lds	r24, 0x505F
    31ce:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    31d0:	80 91 c2 08 	lds	r24, 0x08C2
    31d4:	87 ff       	sbrs	r24, 7
    31d6:	fc cf       	rjmp	.-8      	; 0x31d0 <FRAMWriteKnowns+0xd6>
		SPIBuffer[12] = SPIC.DATA;
    31d8:	80 91 c3 08 	lds	r24, 0x08C3
    31dc:	80 93 6b 50 	sts	0x506B, r24
		SPIC.DATA = SPIBuffer[1];
    31e0:	80 91 60 50 	lds	r24, 0x5060
    31e4:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    31e6:	80 91 c2 08 	lds	r24, 0x08C2
    31ea:	87 ff       	sbrs	r24, 7
    31ec:	fc cf       	rjmp	.-8      	; 0x31e6 <FRAMWriteKnowns+0xec>
		SPIBuffer[12] = SPIC.DATA;
    31ee:	80 91 c3 08 	lds	r24, 0x08C3
    31f2:	80 93 6b 50 	sts	0x506B, r24
		SPIC.DATA = SPIBuffer[2];
    31f6:	80 91 61 50 	lds	r24, 0x5061
    31fa:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    31fc:	80 91 c2 08 	lds	r24, 0x08C2
    3200:	87 ff       	sbrs	r24, 7
    3202:	fc cf       	rjmp	.-8      	; 0x31fc <FRAMWriteKnowns+0x102>
		SPIBuffer[12] = SPIC.DATA;
    3204:	80 91 c3 08 	lds	r24, 0x08C3
    3208:	80 93 6b 50 	sts	0x506B, r24
			
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    320c:	15 96       	adiw	r26, 0x05	; 5
    320e:	2c 93       	st	X, r18
    3210:	15 97       	sbiw	r26, 0x05	; 5
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    3212:	e8 01       	movw	r28, r16
    3214:	3d 83       	std	Y+5, r19	; 0x05
		
		FRAMAddress +=3;
    3216:	80 91 5a 40 	lds	r24, 0x405A
    321a:	90 91 5b 40 	lds	r25, 0x405B
    321e:	03 96       	adiw	r24, 0x03	; 3
    3220:	80 93 5a 40 	sts	0x405A, r24
    3224:	90 93 5b 40 	sts	0x405B, r25
		checksumADC[0] += SPIBuffer[0];
    3228:	90 91 bc 21 	lds	r25, 0x21BC
    322c:	80 91 5f 50 	lds	r24, 0x505F
    3230:	89 0f       	add	r24, r25
    3232:	80 93 bc 21 	sts	0x21BC, r24
		checksumADC[1] += SPIBuffer[1];
    3236:	90 91 bd 21 	lds	r25, 0x21BD
    323a:	80 91 60 50 	lds	r24, 0x5060
    323e:	89 0f       	add	r24, r25
    3240:	80 93 bd 21 	sts	0x21BD, r24
		checksumADC[2] += SPIBuffer[2];
    3244:	90 91 be 21 	lds	r25, 0x21BE
    3248:	80 91 61 50 	lds	r24, 0x5061
    324c:	89 0f       	add	r24, r25
    324e:	80 93 be 21 	sts	0x21BE, r24
		
		sampleCount++;
    3252:	80 91 6c 50 	lds	r24, 0x506C
    3256:	90 91 6d 50 	lds	r25, 0x506D
    325a:	01 96       	adiw	r24, 0x01	; 1
    325c:	80 93 6c 50 	sts	0x506C, r24
    3260:	90 93 6d 50 	sts	0x506D, r25
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    3264:	80 91 6c 50 	lds	r24, 0x506C
    3268:	90 91 6d 50 	lds	r25, 0x506D
    326c:	d5 e5       	ldi	r29, 0x55	; 85
    326e:	83 35       	cpi	r24, 0x53	; 83
    3270:	9d 07       	cpc	r25, r29
    3272:	08 f4       	brcc	.+2      	; 0x3276 <FRAMWriteKnowns+0x17c>
    3274:	73 cf       	rjmp	.-282    	; 0x315c <FRAMWriteKnowns+0x62>
		checksumADC[2] += SPIBuffer[2];
		
		sampleCount++;
	}
	
	SPIDisable();
    3276:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
	ADCPower(FALSE);
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
}
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	08 95       	ret

0000328a <FRAMWriteKnownsCheck>:
	
}


void FRAMWriteKnownsCheck() {
	FRAMWriteKnowns();
    328a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <FRAMWriteKnowns>
	ADCPower(TRUE);
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
    3294:	8f ec       	ldi	r24, 0xCF	; 207
    3296:	97 e0       	ldi	r25, 0x07	; 7
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <FRAMWriteKnownsCheck+0xe>
    329c:	00 c0       	rjmp	.+0      	; 0x329e <FRAMWriteKnownsCheck+0x14>
    329e:	00 00       	nop

	_delay_us(250);
	calcChecksumFRAM();
    32a0:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <calcChecksumFRAM>

	ADCPower(FALSE);
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>

}
    32aa:	08 95       	ret

000032ac <SDHC_CS>:
void SDHC_write_block(uint8_t *buffer, uint16_t address, uint16_t numBlocks);
void SDHC_read_register(uint8_t *buffer, uint8_t cmd);

void SDHC_CS(uint8_t enable) {
		
}
    32ac:	08 95       	ret

000032ae <SPI_write>:


//the following command writes/reads a byte via spi
uint8_t SPI_write(uint8_t byteToSend){
	uint8_t data;
	SPIC.DATA = byteToSend;
    32ae:	e0 ec       	ldi	r30, 0xC0	; 192
    32b0:	f8 e0       	ldi	r31, 0x08	; 8
    32b2:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    32b4:	80 91 c2 08 	lds	r24, 0x08C2
    32b8:	87 ff       	sbrs	r24, 7
    32ba:	fc cf       	rjmp	.-8      	; 0x32b4 <SPI_write+0x6>
	data = SPIC.DATA; //read SPI data register to reset status flag
    32bc:	80 91 c3 08 	lds	r24, 0x08C3
	return data;
}
    32c0:	08 95       	ret

000032c2 <SD_command>:
//the following command writes a command to the sd card and returns a response (if any) or 0xFF if no response
uint8_t SD_command(uint8_t cmd, uint32_t arg, uint8_t crc, int read) {
    32c2:	af 92       	push	r10
    32c4:	bf 92       	push	r11
    32c6:	cf 92       	push	r12
    32c8:	df 92       	push	r13
    32ca:	ef 92       	push	r14
    32cc:	ff 92       	push	r15
    32ce:	0f 93       	push	r16
    32d0:	1f 93       	push	r17
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	25 97       	sbiw	r28, 0x05	; 5
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	78 01       	movw	r14, r16
	
	SPI_write(SDHC_COMMAND_START | cmd);
    32e2:	80 64       	ori	r24, 0x40	; 64
    32e4:	2d 83       	std	Y+5, r18	; 0x05
    32e6:	4c 83       	std	Y+4, r20	; 0x04
    32e8:	5b 83       	std	Y+3, r21	; 0x03
    32ea:	6a 83       	std	Y+2, r22	; 0x02
    32ec:	79 83       	std	Y+1, r23	; 0x01
    32ee:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
	SPI_write(arg>>24 & LSBYTE_MASK);
    32f2:	79 81       	ldd	r23, Y+1	; 0x01
    32f4:	87 2f       	mov	r24, r23
    32f6:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
	SPI_write(arg>>16 & LSBYTE_MASK);
    32fa:	6a 81       	ldd	r22, Y+2	; 0x02
    32fc:	86 2f       	mov	r24, r22
    32fe:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
	SPI_write(arg>>8 & LSBYTE_MASK);
    3302:	5b 81       	ldd	r21, Y+3	; 0x03
    3304:	85 2f       	mov	r24, r21
    3306:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
	SPI_write(arg & LSBYTE_MASK);
    330a:	4c 81       	ldd	r20, Y+4	; 0x04
    330c:	84 2f       	mov	r24, r20
    330e:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
	SPI_write(crc);
    3312:	2d 81       	ldd	r18, Y+5	; 0x05
    3314:	82 2f       	mov	r24, r18
    3316:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
	
	for(int i=0; i<read; i++){
    331a:	00 e0       	ldi	r16, 0x00	; 0
    331c:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(SDHC_DUMMY_BYTE);
    331e:	bd e0       	ldi	r27, 0x0D	; 13
    3320:	cb 2e       	mov	r12, r27
    3322:	d1 2c       	mov	r13, r1
	SPI_write(arg>>16 & LSBYTE_MASK);
	SPI_write(arg>>8 & LSBYTE_MASK);
	SPI_write(arg & LSBYTE_MASK);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    3324:	18 c0       	rjmp	.+48     	; 0x3356 <SD_command+0x94>
		Buffer[i%13] = SPI_write(SDHC_DUMMY_BYTE);
    3326:	c8 01       	movw	r24, r16
    3328:	b6 01       	movw	r22, r12
    332a:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
    332e:	5c 01       	movw	r10, r24
    3330:	8f ef       	ldi	r24, 0xFF	; 255
    3332:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3336:	f5 01       	movw	r30, r10
    3338:	e5 57       	subi	r30, 0x75	; 117
    333a:	ff 4a       	sbci	r31, 0xAF	; 175
    333c:	80 83       	st	Z, r24
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
    333e:	80 81       	ld	r24, Z
    3340:	8f 3f       	cpi	r24, 0xFF	; 255
    3342:	39 f0       	breq	.+14     	; 0x3352 <SD_command+0x90>
			 Buffer[1] = Buffer[i%13];
    3344:	80 81       	ld	r24, Z
    3346:	eb e8       	ldi	r30, 0x8B	; 139
    3348:	f0 e5       	ldi	r31, 0x50	; 80
    334a:	81 83       	std	Z+1, r24	; 0x01
			 return Buffer[1];
    334c:	80 91 8c 50 	lds	r24, 0x508C
    3350:	06 c0       	rjmp	.+12     	; 0x335e <SD_command+0x9c>
	SPI_write(arg>>16 & LSBYTE_MASK);
	SPI_write(arg>>8 & LSBYTE_MASK);
	SPI_write(arg & LSBYTE_MASK);
	SPI_write(crc);
	
	for(int i=0; i<read; i++){
    3352:	0f 5f       	subi	r16, 0xFF	; 255
    3354:	1f 4f       	sbci	r17, 0xFF	; 255
    3356:	0e 15       	cp	r16, r14
    3358:	1f 05       	cpc	r17, r15
    335a:	2c f3       	brlt	.-54     	; 0x3326 <SD_command+0x64>
		if (Buffer[i%13] != SDHC_DUMMY_BYTE){
			 Buffer[1] = Buffer[i%13];
			 return Buffer[1];
		}			
	}
	return SDHC_DUMMY_BYTE;	
    335c:	8f ef       	ldi	r24, 0xFF	; 255
}
    335e:	25 96       	adiw	r28, 0x05	; 5
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	1f 91       	pop	r17
    336a:	0f 91       	pop	r16
    336c:	ff 90       	pop	r15
    336e:	ef 90       	pop	r14
    3370:	df 90       	pop	r13
    3372:	cf 90       	pop	r12
    3374:	bf 90       	pop	r11
    3376:	af 90       	pop	r10
    3378:	08 95       	ret

0000337a <SD_write_block>:
//the following command writes one sector to the sdhc card
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
    337a:	6f 92       	push	r6
    337c:	7f 92       	push	r7
    337e:	8f 92       	push	r8
    3380:	9f 92       	push	r9
    3382:	af 92       	push	r10
    3384:	bf 92       	push	r11
    3386:	cf 92       	push	r12
    3388:	df 92       	push	r13
    338a:	ef 92       	push	r14
    338c:	ff 92       	push	r15
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	6b 01       	movw	r12, r22
    3398:	7c 01       	movw	r14, r24
    339a:	94 2e       	mov	r9, r20
    339c:	85 2e       	mov	r8, r21
    339e:	39 01       	movw	r6, r18
	SPIInit(SPI_MODE_0_gc);
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
    33ac:	a1 2c       	mov	r10, r1
    33ae:	12 e0       	ldi	r17, 0x02	; 2
    33b0:	b1 2e       	mov	r11, r17
    33b2:	a6 18       	sub	r10, r6
    33b4:	b7 08       	sbc	r11, r7
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	a8 16       	cp	r10, r24
    33ba:	82 e0       	ldi	r24, 0x02	; 2
    33bc:	b8 06       	cpc	r11, r24
    33be:	11 f4       	brne	.+4      	; 0x33c4 <SD_write_block+0x4a>
    33c0:	aa 24       	eor	r10, r10
    33c2:	bb 24       	eor	r11, r11
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    33c4:	cb e0       	ldi	r28, 0x0B	; 11
    33c6:	d0 e0       	ldi	r29, 0x00	; 0
    33c8:	03 c0       	rjmp	.+6      	; 0x33d0 <SD_write_block+0x56>
    33ca:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <SD_write_block+0x56>
    33ce:	ff cf       	rjmp	.-2      	; 0x33ce <SD_write_block+0x54>
void SD_write_block(uint32_t sector,uint8_t* data, int lengthOfData){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	for(int i=0;SD_command(SDHC_CMD_WRITE_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//write to specified sector
    33d0:	88 e1       	ldi	r24, 0x18	; 24
    33d2:	b7 01       	movw	r22, r14
    33d4:	a6 01       	movw	r20, r12
    33d6:	2f ef       	ldi	r18, 0xFF	; 255
    33d8:	08 e0       	ldi	r16, 0x08	; 8
    33da:	10 e0       	ldi	r17, 0x00	; 0
    33dc:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
    33e0:	88 23       	and	r24, r24
    33e2:	99 f7       	brne	.-26     	; 0x33ca <SD_write_block+0x50>
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
    33e4:	8f ef       	ldi	r24, 0xFF	; 255
    33e6:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    33ea:	80 93 8b 50 	sts	0x508B, r24
	SPI_write(SDHC_DATA_TOKEN);	//send data token
    33ee:	8e ef       	ldi	r24, 0xFE	; 254
    33f0:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    33f4:	c9 2c       	mov	r12, r9
    33f6:	d8 2c       	mov	r13, r8
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    33f8:	00 e0       	ldi	r16, 0x00	; 0
    33fa:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(data[i]);
    33fc:	dd e0       	ldi	r29, 0x0D	; 13
    33fe:	8d 2e       	mov	r8, r29
    3400:	91 2c       	mov	r9, r1
			while(1);
		}
	}
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
	SPI_write(SDHC_DATA_TOKEN);	//send data token
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    3402:	10 c0       	rjmp	.+32     	; 0x3424 <SD_write_block+0xaa>
		Buffer[i%13] = SPI_write(data[i]);
    3404:	c8 01       	movw	r24, r16
    3406:	b4 01       	movw	r22, r8
    3408:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
    340c:	ec 01       	movw	r28, r24
    340e:	f6 01       	movw	r30, r12
    3410:	81 91       	ld	r24, Z+
    3412:	6f 01       	movw	r12, r30
    3414:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3418:	fe 01       	movw	r30, r28
    341a:	e5 57       	subi	r30, 0x75	; 117
    341c:	ff 4a       	sbci	r31, 0xAF	; 175
    341e:	80 83       	st	Z, r24
			while(1);
		}
	}
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
	SPI_write(SDHC_DATA_TOKEN);	//send data token
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
    3420:	0f 5f       	subi	r16, 0xFF	; 255
    3422:	1f 4f       	sbci	r17, 0xFF	; 255
    3424:	06 15       	cp	r16, r6
    3426:	17 05       	cpc	r17, r7
    3428:	6c f3       	brlt	.-38     	; 0x3404 <SD_write_block+0x8a>
    342a:	00 e0       	ldi	r16, 0x00	; 0
    342c:	10 e0       	ldi	r17, 0x00	; 0
		Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
	Buffer[i%13] = SPI_write(FILLER_BYTE);
    342e:	cd e0       	ldi	r28, 0x0D	; 13
    3430:	cc 2e       	mov	r12, r28
    3432:	d1 2c       	mov	r13, r1
    3434:	0d c0       	rjmp	.+26     	; 0x3450 <SD_write_block+0xd6>
    3436:	c8 01       	movw	r24, r16
    3438:	b6 01       	movw	r22, r12
    343a:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
    343e:	ec 01       	movw	r28, r24
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3446:	c5 57       	subi	r28, 0x75	; 117
    3448:	df 4a       	sbci	r29, 0xAF	; 175
    344a:	88 83       	st	Y, r24
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 1 dummy byte as spacer
	SPI_write(SDHC_DATA_TOKEN);	//send data token
	for (int i=0;i<lengthOfData;i++){	//write the data segment 1 byte at a time
		Buffer[i%13] = SPI_write(data[i]);
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
    344c:	0f 5f       	subi	r16, 0xFF	; 255
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	0a 15       	cp	r16, r10
    3452:	1b 05       	cpc	r17, r11
    3454:	84 f3       	brlt	.-32     	; 0x3436 <SD_write_block+0xbc>
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
    3456:	8f ef       	ldi	r24, 0xFF	; 255
    3458:	80 93 8b 50 	sts	0x508B, r24
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    345c:	c0 e0       	ldi	r28, 0x00	; 0
    345e:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
    3460:	8f ef       	ldi	r24, 0xFF	; 255
    3462:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3466:	80 93 8b 50 	sts	0x508B, r24
	}
	for (int i=0;i<fillerBytes;i++){	//fill the rest of the sector with filler bytes
	Buffer[i%13] = SPI_write(FILLER_BYTE);
	} 
	Buffer[0] = SDHC_DUMMY_BYTE;
	for(int i=0; (i<2) || (Buffer[0] == SDHC_DUMMY_BYTE);i++){
    346a:	21 96       	adiw	r28, 0x01	; 1
    346c:	c1 30       	cpi	r28, 0x01	; 1
    346e:	d1 05       	cpc	r29, r1
    3470:	b9 f3       	breq	.-18     	; 0x3460 <SD_write_block+0xe6>
    3472:	80 91 8b 50 	lds	r24, 0x508B
    3476:	8f 3f       	cpi	r24, 0xFF	; 255
    3478:	99 f3       	breq	.-26     	; 0x3460 <SD_write_block+0xe6>
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//send 2 CRC dummy bytes and keep reading bytes until a response is seen 	
	}
	if ((Buffer[0] & SDHC_RESPONSE_STATUS_MASK) == 0x02){
    347a:	80 91 8b 50 	lds	r24, 0x508B
		//data was written successfully
	}
	while(Buffer[0] != SDHC_DUMMY_BYTE) Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to finish internal processes
    347e:	05 c0       	rjmp	.+10     	; 0x348a <SD_write_block+0x110>
    3480:	8f ef       	ldi	r24, 0xFF	; 255
    3482:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3486:	80 93 8b 50 	sts	0x508B, r24
    348a:	80 91 8b 50 	lds	r24, 0x508B
    348e:	8f 3f       	cpi	r24, 0xFF	; 255
    3490:	b9 f7       	brne	.-18     	; 0x3480 <SD_write_block+0x106>
	SPICS(FALSE);
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();	
    3498:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	1f 91       	pop	r17
    34a2:	0f 91       	pop	r16
    34a4:	ff 90       	pop	r15
    34a6:	ef 90       	pop	r14
    34a8:	df 90       	pop	r13
    34aa:	cf 90       	pop	r12
    34ac:	bf 90       	pop	r11
    34ae:	af 90       	pop	r10
    34b0:	9f 90       	pop	r9
    34b2:	8f 90       	pop	r8
    34b4:	7f 90       	pop	r7
    34b6:	6f 90       	pop	r6
    34b8:	08 95       	ret

000034ba <SD_read_block>:

//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
    34ba:	af 92       	push	r10
    34bc:	bf 92       	push	r11
    34be:	cf 92       	push	r12
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	6b 01       	movw	r12, r22
    34d0:	7c 01       	movw	r14, r24
    34d2:	b4 2e       	mov	r11, r20
    34d4:	a5 2e       	mov	r10, r21
	SPIInit(SPI_MODE_0_gc);
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){	//send command to read data
    34e2:	cb e0       	ldi	r28, 0x0B	; 11
    34e4:	d0 e0       	ldi	r29, 0x00	; 0
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <SD_read_block+0x34>
    34e8:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    34ea:	09 f4       	brne	.+2      	; 0x34ee <SD_read_block+0x34>
    34ec:	ff cf       	rjmp	.-2      	; 0x34ec <SD_read_block+0x32>
//the following command reads one sector from the sdhc card
void SD_read_block(uint32_t sector,uint8_t* arrayOf512Bytes){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	
	for(int i=0;SD_command(SDHC_CMD_READ_SINGLE_BLOCK,sector,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){	//send command to read data
    34ee:	81 e1       	ldi	r24, 0x11	; 17
    34f0:	b7 01       	movw	r22, r14
    34f2:	a6 01       	movw	r20, r12
    34f4:	2f ef       	ldi	r18, 0xFF	; 255
    34f6:	08 e0       	ldi	r16, 0x08	; 8
    34f8:	10 e0       	ldi	r17, 0x00	; 0
    34fa:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
    34fe:	88 23       	and	r24, r24
    3500:	99 f7       	brne	.-26     	; 0x34e8 <SD_read_block+0x2e>
    3502:	05 c0       	rjmp	.+10     	; 0x350e <SD_read_block+0x54>
			//there was no response to the command
			while(1);
		}
	}
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    350a:	80 93 8b 50 	sts	0x508B, r24
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}
	while(Buffer[0] != SDHC_DATA_TOKEN){
    350e:	80 91 8b 50 	lds	r24, 0x508B
    3512:	8e 3f       	cpi	r24, 0xFE	; 254
    3514:	b9 f7       	brne	.-18     	; 0x3504 <SD_read_block+0x4a>
    3516:	0b 2d       	mov	r16, r11
    3518:	1a 2d       	mov	r17, r10
    351a:	c0 e0       	ldi	r28, 0x00	; 0
    351c:	d0 e0       	ldi	r29, 0x00	; 0
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    351e:	8f ef       	ldi	r24, 0xFF	; 255
    3520:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3524:	f8 01       	movw	r30, r16
    3526:	81 93       	st	Z+, r24
    3528:	8f 01       	movw	r16, r30
		}
	}
	while(Buffer[0] != SDHC_DATA_TOKEN){
		Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    352a:	21 96       	adiw	r28, 0x01	; 1
    352c:	f2 e0       	ldi	r31, 0x02	; 2
    352e:	c0 30       	cpi	r28, 0x00	; 0
    3530:	df 07       	cpc	r29, r31
    3532:	a9 f7       	brne	.-22     	; 0x351e <SD_read_block+0x64>
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
    3534:	10 92 97 50 	sts	0x5097, r1
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    3538:	05 c0       	rjmp	.+10     	; 0x3544 <SD_read_block+0x8a>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
    353a:	8f ef       	ldi	r24, 0xFF	; 255
    353c:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3540:	80 93 97 50 	sts	0x5097, r24
	}		
	for (int i=0;i<SDHC_SECTOR_SIZE;i++){
		arrayOf512Bytes[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
	}
	Buffer[12] = FILLER_BYTE;
	while (Buffer[12] != SDHC_DUMMY_BYTE){
    3544:	80 91 97 50 	lds	r24, 0x5097
    3548:	8f 3f       	cpi	r24, 0xFF	; 255
    354a:	b9 f7       	brne	.-18     	; 0x353a <SD_read_block+0x80>
		Buffer[12] = SPI_write(SDHC_DUMMY_BYTE);	
	}

	SPICS(FALSE);
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();
    3552:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	ff 90       	pop	r15
    3560:	ef 90       	pop	r14
    3562:	df 90       	pop	r13
    3564:	cf 90       	pop	r12
    3566:	bf 90       	pop	r11
    3568:	af 90       	pop	r10
    356a:	08 95       	ret

0000356c <checkMote>:

void checkMote(){
	ADCPower(TRUE);
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	Ext1Power(TRUE);
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3578:	8f ef       	ldi	r24, 0xFF	; 255
    357a:	93 ec       	ldi	r25, 0xC3	; 195
    357c:	a9 e0       	ldi	r26, 0x09	; 9
    357e:	81 50       	subi	r24, 0x01	; 1
    3580:	90 40       	sbci	r25, 0x00	; 0
    3582:	a0 40       	sbci	r26, 0x00	; 0
    3584:	e1 f7       	brne	.-8      	; 0x357e <checkMote+0x12>
    3586:	00 c0       	rjmp	.+0      	; 0x3588 <checkMote+0x1c>
    3588:	00 00       	nop
	_delay_ms(100);
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS	
    358a:	88 e0       	ldi	r24, 0x08	; 8
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <PortEx_DIRSET>
	while(1){
		PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    3592:	88 e0       	ldi	r24, 0x08	; 8
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	0e 94 ca 09 	call	0x1394	; 0x1394 <PortEx_OUTSET>
    359a:	8a ea       	ldi	r24, 0xAA	; 170
    359c:	96 ee       	ldi	r25, 0xE6	; 230
    359e:	a6 e9       	ldi	r26, 0x96	; 150
    35a0:	b1 e0       	ldi	r27, 0x01	; 1
    35a2:	81 50       	subi	r24, 0x01	; 1
    35a4:	90 40       	sbci	r25, 0x00	; 0
    35a6:	a0 40       	sbci	r26, 0x00	; 0
    35a8:	b0 40       	sbci	r27, 0x00	; 0
    35aa:	d9 f7       	brne	.-10     	; 0x35a2 <checkMote+0x36>
    35ac:	00 00       	nop
		_delay_ms(5000);
		PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    35ae:	88 e0       	ldi	r24, 0x08	; 8
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	0e 94 75 09 	call	0x12ea	; 0x12ea <PortEx_OUTCLR>
    35b6:	8a ea       	ldi	r24, 0xAA	; 170
    35b8:	96 ee       	ldi	r25, 0xE6	; 230
    35ba:	a6 e9       	ldi	r26, 0x96	; 150
    35bc:	b1 e0       	ldi	r27, 0x01	; 1
    35be:	81 50       	subi	r24, 0x01	; 1
    35c0:	90 40       	sbci	r25, 0x00	; 0
    35c2:	a0 40       	sbci	r26, 0x00	; 0
    35c4:	b0 40       	sbci	r27, 0x00	; 0
    35c6:	d9 f7       	brne	.-10     	; 0x35be <checkMote+0x52>
    35c8:	00 00       	nop
    35ca:	e3 cf       	rjmp	.-58     	; 0x3592 <checkMote+0x26>

000035cc <SD_init>:
		_delay_ms(5000);
	}
}

//the following function turns on power to the sd card and port expander and initializes the sdhc card in spi mode
void SD_init(void){
    35cc:	0f 93       	push	r16
    35ce:	1f 93       	push	r17
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
	ADCPower(TRUE);				//power up portEX
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	Ext1Power(TRUE);			//power up SD card
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>
    35e0:	8f ef       	ldi	r24, 0xFF	; 255
    35e2:	93 ec       	ldi	r25, 0xC3	; 195
    35e4:	a9 e0       	ldi	r26, 0x09	; 9
    35e6:	81 50       	subi	r24, 0x01	; 1
    35e8:	90 40       	sbci	r25, 0x00	; 0
    35ea:	a0 40       	sbci	r26, 0x00	; 0
    35ec:	e1 f7       	brne	.-8      	; 0x35e6 <SD_init+0x1a>
    35ee:	00 c0       	rjmp	.+0      	; 0x35f0 <SD_init+0x24>
    35f0:	00 00       	nop
	_delay_ms(100);				//wait for bootup

	
	PortEx_DIRSET(BIT3_bm, PS_BANKB);  //SD card CS	
    35f2:	88 e0       	ldi	r24, 0x08	; 8
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <PortEx_DIRSET>
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high
    35fa:	88 e0       	ldi	r24, 0x08	; 8
    35fc:	60 e0       	ldi	r22, 0x00	; 0
    35fe:	0e 94 ca 09 	call	0x1394	; 0x1394 <PortEx_OUTSET>

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	63 e0       	ldi	r22, 0x03	; 3
    3606:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SPIInit2>
	SPICS(TRUE);
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
    3610:	8a e0       	ldi	r24, 0x0A	; 10
    3612:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i=0; i<10; i++){ // idle for 10 bytes / 80 clocks
		SPIC.DATA=SDHC_DUMMY_BYTE;
    3614:	e0 ec       	ldi	r30, 0xC0	; 192
    3616:	f8 e0       	ldi	r31, 0x08	; 8
    3618:	2f ef       	ldi	r18, 0xFF	; 255
    361a:	23 83       	std	Z+3, r18	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
    361c:	30 91 c2 08 	lds	r19, 0x08C2
    3620:	37 ff       	sbrs	r19, 7
    3622:	fc cf       	rjmp	.-8      	; 0x361c <SD_init+0x50>
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
    3624:	30 91 c3 08 	lds	r19, 0x08C3
    3628:	30 93 97 50 	sts	0x5097, r19
    362c:	01 97       	sbiw	r24, 0x01	; 1
	PortEx_OUTSET(BIT3_bm, PS_BANKB);	//pull SD cs high

	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	
	for(int i=0; i<10; i++){ // idle for 10 bytes / 80 clocks
    362e:	a9 f7       	brne	.-22     	; 0x361a <SD_init+0x4e>
		SPIC.DATA=SDHC_DUMMY_BYTE;
		while(!(SPIC.STATUS & SPI_IF_bm)); //wait for byte to be sent
		Buffer[12] = SPIC.DATA; //read SPI data register to reset status flag
	}
	
	SPICS(FALSE);
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();
    3636:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
	

	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
    363a:	88 e0       	ldi	r24, 0x08	; 8
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	0e 94 75 09 	call	0x12ea	; 0x12ea <PortEx_OUTCLR>
	
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	63 e0       	ldi	r22, 0x03	; 3
    3646:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SPIInit2>
	SPICS(TRUE);
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
    3650:	cb e0       	ldi	r28, 0x0B	; 11
    3652:	d0 e0       	ldi	r29, 0x00	; 0
    3654:	03 c0       	rjmp	.+6      	; 0x365c <SD_init+0x90>
    3656:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {												//try command 10 times before timing out
    3658:	09 f4       	brne	.+2      	; 0x365c <SD_init+0x90>
    365a:	ff cf       	rjmp	.-2      	; 0x365a <SD_init+0x8e>

	PortEx_OUTCLR(BIT3_bm, PS_BANKB);	//pull SD cs low
	
	SPIInit2(SPI_MODE_0_gc,SPI_LOWEST_CLOCKRATE_PRESCALAR);
	SPICS(TRUE);
	for(int i=0;SD_command(SDHC_CMD_RESET,SDHC_NO_ARGUMENTS,SDHC_CMD_RESET_CRC,8) != SDHC_IDLE_STATE; i++){		//send command 0 to put card in idle state and read 8 next bytes sent back or until response read
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	40 e0       	ldi	r20, 0x00	; 0
    3660:	50 e0       	ldi	r21, 0x00	; 0
    3662:	ba 01       	movw	r22, r20
    3664:	25 e9       	ldi	r18, 0x95	; 149
    3666:	08 e0       	ldi	r16, 0x08	; 8
    3668:	10 e0       	ldi	r17, 0x00	; 0
    366a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
    366e:	81 30       	cpi	r24, 0x01	; 1
    3670:	91 f7       	brne	.-28     	; 0x3656 <SD_init+0x8a>
    3672:	8f ef       	ldi	r24, 0xFF	; 255
    3674:	93 ec       	ldi	r25, 0xC3	; 195
    3676:	a9 e0       	ldi	r26, 0x09	; 9
    3678:	81 50       	subi	r24, 0x01	; 1
    367a:	90 40       	sbci	r25, 0x00	; 0
    367c:	a0 40       	sbci	r26, 0x00	; 0
    367e:	e1 f7       	brne	.-8      	; 0x3678 <SD_init+0xac>
    3680:	00 c0       	rjmp	.+0      	; 0x3682 <SD_init+0xb6>
    3682:	00 00       	nop
			while(1);
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    3684:	cb e0       	ldi	r28, 0x0B	; 11
    3686:	d0 e0       	ldi	r29, 0x00	; 0
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <SD_init+0xc4>
    368a:	21 97       	sbiw	r28, 0x01	; 1
		if (i >= 10) {
    368c:	09 f4       	brne	.+2      	; 0x3690 <SD_init+0xc4>
    368e:	ff cf       	rjmp	.-2      	; 0x368e <SD_init+0xc2>
			while(1);
		}
	}
	_delay_ms(100);	
	
	for(int i=0;SD_command(SDHC_CHECK_VOLTAGE_CMD,SDHC_CHECK_VOLTAGE_ARGUMENT,SDHC_CHECK_VOLTAGE_CRC,8) != SDHC_IDLE_STATE; i++){		//check voltage range (used to indicate to sd card that we know it is an sdhc card)
    3690:	88 e0       	ldi	r24, 0x08	; 8
    3692:	4a ea       	ldi	r20, 0xAA	; 170
    3694:	51 e0       	ldi	r21, 0x01	; 1
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	27 e8       	ldi	r18, 0x87	; 135
    369c:	08 e0       	ldi	r16, 0x08	; 8
    369e:	10 e0       	ldi	r17, 0x00	; 0
    36a0:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
    36a4:	81 30       	cpi	r24, 0x01	; 1
    36a6:	89 f7       	brne	.-30     	; 0x368a <SD_init+0xbe>
    36a8:	c2 e0       	ldi	r28, 0x02	; 2
    36aa:	d0 e0       	ldi	r29, 0x00	; 0
			//there was no response to the command
			while(1);
		}			
	}		
	for(int i=0;i<4;i++){
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
    36ac:	8f ef       	ldi	r24, 0xFF	; 255
    36ae:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    36b2:	fe 01       	movw	r30, r28
    36b4:	e5 57       	subi	r30, 0x75	; 117
    36b6:	ff 4a       	sbci	r31, 0xAF	; 175
    36b8:	80 83       	st	Z, r24
    36ba:	21 96       	adiw	r28, 0x01	; 1
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}			
	}		
	for(int i=0;i<4;i++){
    36bc:	c6 30       	cpi	r28, 0x06	; 6
    36be:	d1 05       	cpc	r29, r1
    36c0:	a9 f7       	brne	.-22     	; 0x36ac <SD_init+0xe0>
		Buffer[i+2] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if((Buffer[4] != 0x01) || (Buffer[5] != 0xAA)){			//check that the response is the same as the argument sent in
    36c2:	80 91 8f 50 	lds	r24, 0x508F
    36c6:	81 30       	cpi	r24, 0x01	; 1
    36c8:	a1 f4       	brne	.+40     	; 0x36f2 <SD_init+0x126>
    36ca:	80 91 90 50 	lds	r24, 0x5090
    36ce:	11 c0       	rjmp	.+34     	; 0x36f2 <SD_init+0x126>
		
	}
	*/
	//send second initialization command
	while(Buffer[1]!= 0x00){
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
    36d0:	87 e3       	ldi	r24, 0x37	; 55
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	50 e0       	ldi	r21, 0x00	; 0
    36d6:	ba 01       	movw	r22, r20
    36d8:	2f ef       	ldi	r18, 0xFF	; 255
    36da:	08 e0       	ldi	r16, 0x08	; 8
    36dc:	10 e0       	ldi	r17, 0x00	; 0
    36de:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	70 e4       	ldi	r23, 0x40	; 64
    36ec:	2f ef       	ldi	r18, 0xFF	; 255
    36ee:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
		}
		
	}
	*/
	//send second initialization command
	while(Buffer[1]!= 0x00){
    36f2:	80 91 8c 50 	lds	r24, 0x508C
    36f6:	88 23       	and	r24, r24
    36f8:	59 f7       	brne	.-42     	; 0x36d0 <SD_init+0x104>
    36fa:	cb e0       	ldi	r28, 0x0B	; 11
    36fc:	d0 e0       	ldi	r29, 0x00	; 0
    36fe:	03 c0       	rjmp	.+6      	; 0x3706 <SD_init+0x13a>
    3700:	21 97       	sbiw	r28, 0x01	; 1
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
	}
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//check OCR register
		if (i >= 10) {
    3702:	09 f4       	brne	.+2      	; 0x3706 <SD_init+0x13a>
    3704:	ff cf       	rjmp	.-2      	; 0x3704 <SD_init+0x138>
	//send second initialization command
	while(Buffer[1]!= 0x00){
		SD_command(SDHC_ADV_COMMAND,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//next command will be advanced
		SD_command(SDHC_INITIALIZATION_CMD,SDHC_INITIALIZATION_CMD_ARGUMENT,SDHC_DUMMY_BYTE,8);	//initialize the SDHC card in SPI mode
	}
	for(int i=0;SD_command(SDHC_CMD_READ_OCR,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8) != SDHC_CMD_SUCCESS; i++){		//check OCR register
    3706:	8a e3       	ldi	r24, 0x3A	; 58
    3708:	40 e0       	ldi	r20, 0x00	; 0
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	ba 01       	movw	r22, r20
    370e:	2f ef       	ldi	r18, 0xFF	; 255
    3710:	08 e0       	ldi	r16, 0x08	; 8
    3712:	10 e0       	ldi	r17, 0x00	; 0
    3714:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
    3718:	88 23       	and	r24, r24
    371a:	91 f7       	brne	.-28     	; 0x3700 <SD_init+0x134>
    371c:	c0 e0       	ldi	r28, 0x00	; 0
    371e:	d0 e0       	ldi	r29, 0x00	; 0
			//there was no response to the command
			while(1);
		}
	}		
	for (int i=0;i<4;i++){
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
    3720:	8f ef       	ldi	r24, 0xFF	; 255
    3722:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3726:	fe 01       	movw	r30, r28
    3728:	e5 57       	subi	r30, 0x75	; 117
    372a:	ff 4a       	sbci	r31, 0xAF	; 175
    372c:	80 83       	st	Z, r24
		if (i >= 10) {
			//there was no response to the command
			while(1);
		}
	}		
	for (int i=0;i<4;i++){
    372e:	21 96       	adiw	r28, 0x01	; 1
    3730:	c4 30       	cpi	r28, 0x04	; 4
    3732:	d1 05       	cpc	r29, r1
    3734:	a9 f7       	brne	.-22     	; 0x3720 <SD_init+0x154>
		Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);
	}
	if (Buffer[0] & 0x40){
    3736:	80 91 8b 50 	lds	r24, 0x508B
		//the card is addressed in 512 byte sectors
	}
	SPICS(FALSE);
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();	
    3740:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}	
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	08 95       	ret

0000374e <SD_write_multiple_blocks>:
//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    374e:	2f 92       	push	r2
    3750:	3f 92       	push	r3
    3752:	4f 92       	push	r4
    3754:	5f 92       	push	r5
    3756:	6f 92       	push	r6
    3758:	7f 92       	push	r7
    375a:	8f 92       	push	r8
    375c:	9f 92       	push	r9
    375e:	af 92       	push	r10
    3760:	bf 92       	push	r11
    3762:	cf 92       	push	r12
    3764:	df 92       	push	r13
    3766:	ef 92       	push	r14
    3768:	ff 92       	push	r15
    376a:	0f 93       	push	r16
    376c:	1f 93       	push	r17
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	00 d0       	rcall	.+0      	; 0x3774 <SD_write_multiple_blocks+0x26>
    3774:	0f 92       	push	r0
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	6b 01       	movw	r12, r22
    377c:	7c 01       	movw	r14, r24
    377e:	5a 01       	movw	r10, r20
    3780:	89 01       	movw	r16, r18
	SPIInit(SPI_MODE_0_gc);
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	32 e0       	ldi	r19, 0x02	; 2
    3792:	c8 01       	movw	r24, r16
    3794:	b9 01       	movw	r22, r18
    3796:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
    379a:	3b 01       	movw	r6, r22
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
    379c:	49 01       	movw	r8, r18
    379e:	88 1a       	sub	r8, r24
    37a0:	99 0a       	sbc	r9, r25
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	88 16       	cp	r8, r24
    37a6:	82 e0       	ldi	r24, 0x02	; 2
    37a8:	98 06       	cpc	r9, r24
    37aa:	21 f0       	breq	.+8      	; 0x37b4 <SD_write_multiple_blocks+0x66>
	else numSectors++;
    37ac:	08 94       	sec
    37ae:	61 1c       	adc	r6, r1
    37b0:	71 1c       	adc	r7, r1
    37b2:	02 c0       	rjmp	.+4      	; 0x37b8 <SD_write_multiple_blocks+0x6a>
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
    37b4:	88 24       	eor	r8, r8
    37b6:	99 24       	eor	r9, r9
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
    37b8:	89 e1       	ldi	r24, 0x19	; 25
    37ba:	b7 01       	movw	r22, r14
    37bc:	a6 01       	movw	r20, r12
    37be:	2f ef       	ldi	r18, 0xFF	; 255
    37c0:	08 e0       	ldi	r16, 0x08	; 8
    37c2:	10 e0       	ldi	r17, 0x00	; 0
    37c4:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
    37c8:	65 01       	movw	r12, r10
	for (int j=0;j<numSectors;j++){
    37ca:	aa 24       	eor	r10, r10
    37cc:	bb 24       	eor	r11, r11
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    37ce:	f3 01       	movw	r30, r6
    37d0:	31 97       	sbiw	r30, 0x01	; 1
    37d2:	e9 83       	std	Y+1, r30	; 0x01
    37d4:	fa 83       	std	Y+2, r31	; 0x02
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    37d6:	41 2c       	mov	r4, r1
    37d8:	82 e0       	ldi	r24, 0x02	; 2
    37da:	58 2e       	mov	r5, r24
    37dc:	48 18       	sub	r4, r8
    37de:	59 08       	sbc	r5, r9
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    37e0:	9c e0       	ldi	r25, 0x0C	; 12
    37e2:	29 2e       	mov	r2, r25
    37e4:	31 2c       	mov	r3, r1
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
    37e6:	76 c0       	rjmp	.+236    	; 0x38d4 <SD_write_multiple_blocks+0x186>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
    37e8:	8f ef       	ldi	r24, 0xFF	; 255
    37ea:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    37ee:	80 93 8c 50 	sts	0x508C, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
    37f2:	8c ef       	ldi	r24, 0xFC	; 252
    37f4:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    37f8:	80 93 8c 50 	sts	0x508C, r24
		if(j == (numSectors-1)){
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3800:	a8 16       	cp	r10, r24
    3802:	b9 06       	cpc	r11, r25
    3804:	c1 f0       	breq	.+48     	; 0x3836 <SD_write_multiple_blocks+0xe8>
    3806:	ee 24       	eor	r14, r14
    3808:	ff 24       	eor	r15, r15
    380a:	30 c0       	rjmp	.+96     	; 0x386c <SD_write_multiple_blocks+0x11e>
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    380c:	c8 01       	movw	r24, r16
    380e:	b1 01       	movw	r22, r2
    3810:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
    3814:	9c 01       	movw	r18, r24
    3816:	f7 01       	movw	r30, r14
    3818:	81 91       	ld	r24, Z+
    381a:	7f 01       	movw	r14, r30
    381c:	2b 83       	std	Y+3, r18	; 0x03
    381e:	3c 83       	std	Y+4, r19	; 0x04
    3820:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3824:	2b 81       	ldd	r18, Y+3	; 0x03
    3826:	3c 81       	ldd	r19, Y+4	; 0x04
    3828:	f9 01       	movw	r30, r18
    382a:	e5 57       	subi	r30, 0x75	; 117
    382c:	ff 4a       	sbci	r31, 0xAF	; 175
    382e:	80 83       	st	Z, r24
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    3830:	0f 5f       	subi	r16, 0xFF	; 255
    3832:	1f 4f       	sbci	r17, 0xFF	; 255
    3834:	03 c0       	rjmp	.+6      	; 0x383c <SD_write_multiple_blocks+0xee>
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//send dummy byte
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
    3836:	76 01       	movw	r14, r12
    3838:	00 e0       	ldi	r16, 0x00	; 0
    383a:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
    383c:	04 15       	cp	r16, r4
    383e:	15 05       	cpc	r17, r5
    3840:	2c f3       	brlt	.-54     	; 0x380c <SD_write_multiple_blocks+0xbe>
    3842:	00 e0       	ldi	r16, 0x00	; 0
    3844:	10 e0       	ldi	r17, 0x00	; 0
    3846:	0e c0       	rjmp	.+28     	; 0x3864 <SD_write_multiple_blocks+0x116>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
				Buffer[i%12] = SPI_write(FILLER_BYTE);
    3848:	c8 01       	movw	r24, r16
    384a:	b1 01       	movw	r22, r2
    384c:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
    3850:	7c 01       	movw	r14, r24
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3858:	f7 01       	movw	r30, r14
    385a:	e5 57       	subi	r30, 0x75	; 117
    385c:	ff 4a       	sbci	r31, 0xAF	; 175
    385e:	80 83       	st	Z, r24
		Buffer[1] = SPI_write(SDHC_MULT_WRITE_DATA_TOKEN);	//send data token
		if(j == (numSectors-1)){
			for (int i=0;i<(SDHC_SECTOR_SIZE-fillerBytes);i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
			for (int i=0;i<fillerBytes;i++){
    3860:	0f 5f       	subi	r16, 0xFF	; 255
    3862:	1f 4f       	sbci	r17, 0xFF	; 255
    3864:	08 15       	cp	r16, r8
    3866:	19 05       	cpc	r17, r9
    3868:	7c f3       	brlt	.-34     	; 0x3848 <SD_write_multiple_blocks+0xfa>
    386a:	17 c0       	rjmp	.+46     	; 0x389a <SD_write_multiple_blocks+0x14c>
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    386c:	c7 01       	movw	r24, r14
    386e:	b1 01       	movw	r22, r2
    3870:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
    3874:	8c 01       	movw	r16, r24
	}
	SPICS(FALSE);
	SPIDisable();	
}	
//the following command writes multiple blocks/sectors to the sd card starting at a specified sector (in the sd card)
void SD_write_multiple_blocks(uint32_t sector,uint8_t* data,int lengthOfData){
    3876:	f6 01       	movw	r30, r12
    3878:	ee 0d       	add	r30, r14
    387a:	ff 1d       	adc	r31, r15
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
    387c:	80 81       	ld	r24, Z
    387e:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3882:	f8 01       	movw	r30, r16
    3884:	e5 57       	subi	r30, 0x75	; 117
    3886:	ff 4a       	sbci	r31, 0xAF	; 175
    3888:	80 83       	st	Z, r24
			for (int i=0;i<fillerBytes;i++){
				Buffer[i%12] = SPI_write(FILLER_BYTE);
			}
		}
		else{
			for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    388a:	08 94       	sec
    388c:	e1 1c       	adc	r14, r1
    388e:	f1 1c       	adc	r15, r1
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	ef 16       	cp	r14, r31
    3894:	f2 e0       	ldi	r31, 0x02	; 2
    3896:	ff 06       	cpc	r15, r31
    3898:	49 f7       	brne	.-46     	; 0x386c <SD_write_multiple_blocks+0x11e>
				Buffer[i%12] = SPI_write(data[(i+(j*SDHC_SECTOR_SIZE))]);
			}
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
    389a:	8f ef       	ldi	r24, 0xFF	; 255
    389c:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    38a0:	80 93 8c 50 	sts	0x508C, r24
    38a4:	8f ef       	ldi	r24, 0xFF	; 255
    38a6:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    38aa:	80 93 8c 50 	sts	0x508C, r24
		Buffer[1] = FILLER_BYTE;
    38ae:	10 92 8c 50 	sts	0x508C, r1
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
    38b2:	05 c0       	rjmp	.+10     	; 0x38be <SD_write_multiple_blocks+0x170>
    38b4:	8f ef       	ldi	r24, 0xFF	; 255
    38b6:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    38ba:	80 93 8c 50 	sts	0x508C, r24
    38be:	80 91 8c 50 	lds	r24, 0x508C
    38c2:	8f 3f       	cpi	r24, 0xFF	; 255
    38c4:	b9 f7       	brne	.-18     	; 0x38b4 <SD_write_multiple_blocks+0x166>
	int numSectors = lengthOfData/SDHC_SECTOR_SIZE;
	int fillerBytes = SDHC_SECTOR_SIZE - lengthOfData%SDHC_SECTOR_SIZE;
	if (fillerBytes==SDHC_SECTOR_SIZE) fillerBytes = 0;
	else numSectors++;
	SD_command(SDHC_CMD_WRITE_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//write starting at specified sector
	for (int j=0;j<numSectors;j++){
    38c6:	08 94       	sec
    38c8:	a1 1c       	adc	r10, r1
    38ca:	b1 1c       	adc	r11, r1
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	92 e0       	ldi	r25, 0x02	; 2
    38d0:	c8 0e       	add	r12, r24
    38d2:	d9 1e       	adc	r13, r25
    38d4:	a6 14       	cp	r10, r6
    38d6:	b7 04       	cpc	r11, r7
    38d8:	0c f4       	brge	.+2      	; 0x38dc <SD_write_multiple_blocks+0x18e>
    38da:	86 cf       	rjmp	.-244    	; 0x37e8 <SD_write_multiple_blocks+0x9a>
    38dc:	04 e0       	ldi	r16, 0x04	; 4
    38de:	10 e0       	ldi	r17, 0x00	; 0
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    38e0:	8f ef       	ldi	r24, 0xFF	; 255
    38e2:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    38e6:	80 93 8c 50 	sts	0x508C, r24
    38ea:	01 50       	subi	r16, 0x01	; 1
    38ec:	10 40       	sbci	r17, 0x00	; 0
		}
		for (int i=0;i<2;i++) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write 2 CRC token
		Buffer[1] = FILLER_BYTE;
		while(Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for card to store the data it received		
	}
	for(int i=0;i<4;i++){
    38ee:	c1 f7       	brne	.-16     	; 0x38e0 <SD_write_multiple_blocks+0x192>
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}		
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
    38f0:	8d ef       	ldi	r24, 0xFD	; 253
    38f2:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    38f6:	80 93 8c 50 	sts	0x508C, r24
    38fa:	04 e0       	ldi	r16, 0x04	; 4
    38fc:	10 e0       	ldi	r17, 0x00	; 0
	for(int i=0;i<4;i++){
	Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
    38fe:	8f ef       	ldi	r24, 0xFF	; 255
    3900:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3904:	80 93 8c 50 	sts	0x508C, r24
    3908:	01 50       	subi	r16, 0x01	; 1
    390a:	10 40       	sbci	r17, 0x00	; 0
	}
	for(int i=0;i<4;i++){
		Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}		
	Buffer[1] = SPI_write(SDHC_MULT_WRITE_STOP_TOKEN);	//write stop token
	for(int i=0;i<4;i++){
    390c:	c1 f7       	brne	.-16     	; 0x38fe <SD_write_multiple_blocks+0x1b0>
	Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//write dummy byte
	}	
	Buffer[1] = FILLER_BYTE;
    390e:	10 92 8c 50 	sts	0x508C, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    3912:	05 c0       	rjmp	.+10     	; 0x391e <SD_write_multiple_blocks+0x1d0>
    3914:	8f ef       	ldi	r24, 0xFF	; 255
    3916:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    391a:	80 93 8c 50 	sts	0x508C, r24
    391e:	80 91 8c 50 	lds	r24, 0x508C
    3922:	8f 3f       	cpi	r24, 0xFF	; 255
    3924:	b9 f7       	brne	.-18     	; 0x3914 <SD_write_multiple_blocks+0x1c6>
	SPICS(FALSE);
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();		
    392c:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}
    3930:	24 96       	adiw	r28, 0x04	; 4
    3932:	cd bf       	out	0x3d, r28	; 61
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	df 91       	pop	r29
    3938:	cf 91       	pop	r28
    393a:	1f 91       	pop	r17
    393c:	0f 91       	pop	r16
    393e:	ff 90       	pop	r15
    3940:	ef 90       	pop	r14
    3942:	df 90       	pop	r13
    3944:	cf 90       	pop	r12
    3946:	bf 90       	pop	r11
    3948:	af 90       	pop	r10
    394a:	9f 90       	pop	r9
    394c:	8f 90       	pop	r8
    394e:	7f 90       	pop	r7
    3950:	6f 90       	pop	r6
    3952:	5f 90       	pop	r5
    3954:	4f 90       	pop	r4
    3956:	3f 90       	pop	r3
    3958:	2f 90       	pop	r2
    395a:	08 95       	ret

0000395c <SD_read_multiple_blocks>:
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
    395c:	af 92       	push	r10
    395e:	bf 92       	push	r11
    3960:	cf 92       	push	r12
    3962:	df 92       	push	r13
    3964:	ef 92       	push	r14
    3966:	ff 92       	push	r15
    3968:	0f 93       	push	r16
    396a:	1f 93       	push	r17
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	6b 01       	movw	r12, r22
    3972:	7c 01       	movw	r14, r24
    3974:	ea 01       	movw	r28, r20
    3976:	59 01       	movw	r10, r18
	SPIInit(SPI_MODE_0_gc);
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	Buffer[1] = SDHC_DUMMY_BYTE;
    3984:	8f ef       	ldi	r24, 0xFF	; 255
    3986:	80 93 8c 50 	sts	0x508C, r24
	while(Buffer[1] != FILLER_BYTE){
    398a:	08 c0       	rjmp	.+16     	; 0x399c <SD_read_multiple_blocks+0x40>
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
    398c:	82 e1       	ldi	r24, 0x12	; 18
    398e:	b7 01       	movw	r22, r14
    3990:	a6 01       	movw	r20, r12
    3992:	2f ef       	ldi	r18, 0xFF	; 255
    3994:	08 e0       	ldi	r16, 0x08	; 8
    3996:	10 e0       	ldi	r17, 0x00	; 0
    3998:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
	SPIInit(SPI_MODE_0_gc);
	SPICS(TRUE);
	Buffer[1] = SDHC_DUMMY_BYTE;
	while(Buffer[1] != FILLER_BYTE){
    399c:	80 91 8c 50 	lds	r24, 0x508C
    39a0:	88 23       	and	r24, r24
    39a2:	a1 f7       	brne	.-24     	; 0x398c <SD_read_multiple_blocks+0x30>
    39a4:	8e 01       	movw	r16, r28
    39a6:	ee 24       	eor	r14, r14
    39a8:	ff 24       	eor	r15, r15
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
	}
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
    39aa:	cc 24       	eor	r12, r12
    39ac:	ca 94       	dec	r12
    39ae:	29 c0       	rjmp	.+82     	; 0x3a02 <SD_read_multiple_blocks+0xa6>
    39b0:	c0 92 8c 50 	sts	0x508C, r12
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
    39b4:	05 c0       	rjmp	.+10     	; 0x39c0 <SD_read_multiple_blocks+0x64>
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
    39b6:	8f ef       	ldi	r24, 0xFF	; 255
    39b8:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    39bc:	80 93 8c 50 	sts	0x508C, r24
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
	}
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
    39c0:	80 91 8c 50 	lds	r24, 0x508C
    39c4:	8e 3f       	cpi	r24, 0xFE	; 254
    39c6:	b9 f7       	brne	.-18     	; 0x39b6 <SD_read_multiple_blocks+0x5a>
    39c8:	c0 e0       	ldi	r28, 0x00	; 0
    39ca:	d0 e0       	ldi	r29, 0x00	; 0
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}			
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    39cc:	8f ef       	ldi	r24, 0xFF	; 255
    39ce:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
	SPICS(FALSE);
	SPIDisable();		
}
//the following command reads multiple blocks from the sd card starting at the specified block/sector
void SD_read_multiple_blocks(uint32_t sector,uint8_t* data,int numOfBlocks){
    39d2:	f8 01       	movw	r30, r16
    39d4:	ec 0f       	add	r30, r28
    39d6:	fd 1f       	adc	r31, r29
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}			
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
    39d8:	80 83       	st	Z, r24
	for (int j=0;j<numOfBlocks;j++){
		Buffer[1]=SDHC_DUMMY_BYTE;
		while(Buffer[1] != SDHC_DATA_TOKEN){ 
			Buffer[1] = SPI_write(SDHC_DUMMY_BYTE);	//wait for start of data token
		}			
		for (int i=0;i<SDHC_SECTOR_SIZE;i++){
    39da:	21 96       	adiw	r28, 0x01	; 1
    39dc:	82 e0       	ldi	r24, 0x02	; 2
    39de:	c0 30       	cpi	r28, 0x00	; 0
    39e0:	d8 07       	cpc	r29, r24
    39e2:	a1 f7       	brne	.-24     	; 0x39cc <SD_read_multiple_blocks+0x70>
			data[(i+(j*SDHC_SECTOR_SIZE))] = SPI_write(SDHC_DUMMY_BYTE);	//read in the data
		}
	
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
    39e4:	8f ef       	ldi	r24, 0xFF	; 255
    39e6:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    39ea:	80 93 8b 50 	sts	0x508B, r24
    39ee:	8f ef       	ldi	r24, 0xFF	; 255
    39f0:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    39f4:	80 93 8c 50 	sts	0x508C, r24
	Buffer[1] = SDHC_DUMMY_BYTE;
	while(Buffer[1] != FILLER_BYTE){
		SD_command(SDHC_CMD_READ_MULTIPLE_BLOCKS,sector,SDHC_DUMMY_BYTE,8);	//send command to read data
	}
	//do the following for however many sectors to be read in		
	for (int j=0;j<numOfBlocks;j++){
    39f8:	08 94       	sec
    39fa:	e1 1c       	adc	r14, r1
    39fc:	f1 1c       	adc	r15, r1
    39fe:	00 50       	subi	r16, 0x00	; 0
    3a00:	1e 4f       	sbci	r17, 0xFE	; 254
    3a02:	ea 14       	cp	r14, r10
    3a04:	fb 04       	cpc	r15, r11
    3a06:	a4 f2       	brlt	.-88     	; 0x39b0 <SD_read_multiple_blocks+0x54>
	
		for (int i=0;i<2;i++){
			Buffer[i] = SPI_write(SDHC_DUMMY_BYTE);	//read in the 2 CRC bytes
		}
	}	
	SD_command(SDHC_CMD_STOP_TRANSMISSION,SDHC_NO_ARGUMENTS,SDHC_DUMMY_BYTE,8);	//send command to stop reading data
    3a08:	8c e0       	ldi	r24, 0x0C	; 12
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	50 e0       	ldi	r21, 0x00	; 0
    3a0e:	ba 01       	movw	r22, r20
    3a10:	2f ef       	ldi	r18, 0xFF	; 255
    3a12:	08 e0       	ldi	r16, 0x08	; 8
    3a14:	10 e0       	ldi	r17, 0x00	; 0
    3a16:	0e 94 61 19 	call	0x32c2	; 0x32c2 <SD_command>
	Buffer[0] = SPI_write(SDHC_DUMMY_BYTE);	//read the stuff byte
    3a1a:	8f ef       	ldi	r24, 0xFF	; 255
    3a1c:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3a20:	80 93 8b 50 	sts	0x508B, r24
	Buffer[1] = FILLER_BYTE;
    3a24:	10 92 8c 50 	sts	0x508C, r1
	while (Buffer[1] != SDHC_DUMMY_BYTE) Buffer[1] = SPI_write(SDHC_DUMMY_BYTE); //wait for card to finish internal processes
    3a28:	05 c0       	rjmp	.+10     	; 0x3a34 <SD_read_multiple_blocks+0xd8>
    3a2a:	8f ef       	ldi	r24, 0xFF	; 255
    3a2c:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
    3a30:	80 93 8c 50 	sts	0x508C, r24
    3a34:	80 91 8c 50 	lds	r24, 0x508C
    3a38:	8f 3f       	cpi	r24, 0xFF	; 255
    3a3a:	b9 f7       	brne	.-18     	; 0x3a2a <SD_read_multiple_blocks+0xce>
	SPICS(FALSE);
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();
    3a42:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
}
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	df 90       	pop	r13
    3a54:	cf 90       	pop	r12
    3a56:	bf 90       	pop	r11
    3a58:	af 90       	pop	r10
    3a5a:	08 95       	ret

00003a5c <SD_disable>:
//this function deselects the sd card and turns off power to the port expander and the sd card
void SD_disable(){
	PortEx_DIRCLR(BIT3_bm, PS_BANKB);  //pull SD card CS high
    3a5c:	88 e0       	ldi	r24, 0x08	; 8
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	0e 94 4c 0a 	call	0x1498	; 0x1498 <PortEx_DIRCLR>
	PortEx_OUTCLR(BIT3_bm, PS_BANKB);
    3a64:	88 e0       	ldi	r24, 0x08	; 8
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	0e 94 75 09 	call	0x12ea	; 0x12ea <PortEx_OUTCLR>
	SPIInit(SPI_MODE_0_gc);
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <SPIInit>
	SPICS(TRUE);
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPI_write(SDHC_DUMMY_BYTE);	//must write a byte to spi when cd card cs is high to have sd card release MISO line
    3a78:	8f ef       	ldi	r24, 0xFF	; 255
    3a7a:	0e 94 57 19 	call	0x32ae	; 0x32ae <SPI_write>
	SPICS(FALSE);	//stop spi
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SPICS>
	SPIDisable();
    3a84:	0e 94 08 09 	call	0x1210	; 0x1210 <SPIDisable>
	
	ADCPower(FALSE);		//turn off portEX power
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADCPower>
	Ext1Power(FALSE);			//power down SD card
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>
}
    3a94:	08 95       	ret

00003a96 <SD_write_and_read_knowns>:
//command to check reading and writing to sd card
void SD_write_and_read_knowns(){
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	e8 53       	subi	r30, 0x38	; 56
    3a9e:	fc 4d       	sbci	r31, 0xDC	; 220
    3aa0:	80 83       	st	Z, r24
    3aa2:	01 96       	adiw	r24, 0x01	; 1
    3aa4:	88 31       	cpi	r24, 0x18	; 24
    3aa6:	91 05       	cpc	r25, r1
    3aa8:	c1 f7       	brne	.-16     	; 0x3a9a <SD_write_and_read_knowns+0x4>
	SD_write_block(20,FRAMReadBuffer,24);	//write those values to the card
    3aaa:	64 e1       	ldi	r22, 0x14	; 20
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	48 ec       	ldi	r20, 0xC8	; 200
    3ab4:	53 e2       	ldi	r21, 0x23	; 35
    3ab6:	28 e1       	ldi	r18, 0x18	; 24
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_write_block>
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	e8 53       	subi	r30, 0x38	; 56
    3ac6:	fc 4d       	sbci	r31, 0xDC	; 220
    3ac8:	10 82       	st	Z, r1
    3aca:	01 96       	adiw	r24, 0x01	; 1
    3acc:	88 31       	cpi	r24, 0x18	; 24
    3ace:	91 05       	cpc	r25, r1
    3ad0:	c1 f7       	brne	.-16     	; 0x3ac2 <SD_write_and_read_knowns+0x2c>
	SD_read_block(20,FRAMReadBuffer);	//read into the FRAM buffer from the SD card
    3ad2:	64 e1       	ldi	r22, 0x14	; 20
    3ad4:	70 e0       	ldi	r23, 0x00	; 0
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	48 ec       	ldi	r20, 0xC8	; 200
    3adc:	53 e2       	ldi	r21, 0x23	; 35
    3ade:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = i%100;	//write 1250 values to the FRAM buffer	
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	e4 e6       	ldi	r30, 0x64	; 100
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	c9 01       	movw	r24, r18
    3aec:	bf 01       	movw	r22, r30
    3aee:	0e 94 11 31 	call	0x6222	; 0x6222 <__divmodhi4>
    3af2:	d9 01       	movw	r26, r18
    3af4:	a8 53       	subi	r26, 0x38	; 56
    3af6:	bc 4d       	sbci	r27, 0xDC	; 220
    3af8:	8c 93       	st	X, r24
    3afa:	2f 5f       	subi	r18, 0xFF	; 255
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	84 e0       	ldi	r24, 0x04	; 4
    3b00:	22 3e       	cpi	r18, 0xE2	; 226
    3b02:	38 07       	cpc	r19, r24
    3b04:	91 f7       	brne	.-28     	; 0x3aea <SD_write_and_read_knowns+0x54>
	SD_write_multiple_blocks(80,FRAMReadBuffer,1250);	//write those values to sd card
    3b06:	60 e5       	ldi	r22, 0x50	; 80
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	48 ec       	ldi	r20, 0xC8	; 200
    3b10:	53 e2       	ldi	r21, 0x23	; 35
    3b12:	22 ee       	ldi	r18, 0xE2	; 226
    3b14:	34 e0       	ldi	r19, 0x04	; 4
    3b16:	0e 94 a7 1b 	call	0x374e	; 0x374e <SD_write_multiple_blocks>
	for(int i=0;i<1250;i++) FRAMReadBuffer[i] = 0;	//clear FRAM buffer
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	fc 01       	movw	r30, r24
    3b20:	e8 53       	subi	r30, 0x38	; 56
    3b22:	fc 4d       	sbci	r31, 0xDC	; 220
    3b24:	10 82       	st	Z, r1
    3b26:	01 96       	adiw	r24, 0x01	; 1
    3b28:	24 e0       	ldi	r18, 0x04	; 4
    3b2a:	82 3e       	cpi	r24, 0xE2	; 226
    3b2c:	92 07       	cpc	r25, r18
    3b2e:	b9 f7       	brne	.-18     	; 0x3b1e <SD_write_and_read_knowns+0x88>
	SD_read_multiple_blocks(80,FRAMReadBuffer,3);	//read in 3 blocks of data from the memory card
    3b30:	60 e5       	ldi	r22, 0x50	; 80
    3b32:	70 e0       	ldi	r23, 0x00	; 0
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	48 ec       	ldi	r20, 0xC8	; 200
    3b3a:	53 e2       	ldi	r21, 0x23	; 35
    3b3c:	23 e0       	ldi	r18, 0x03	; 3
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	0e 94 ae 1c 	call	0x395c	; 0x395c <SD_read_multiple_blocks>
}
    3b44:	08 95       	ret

00003b46 <SD_write_and_read_knowns_FAT>:

void SD_write_and_read_knowns_FAT(){
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = i;	//write 24 values to the FRAM buffer
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	e8 53       	subi	r30, 0x38	; 56
    3b4e:	fc 4d       	sbci	r31, 0xDC	; 220
    3b50:	80 83       	st	Z, r24
    3b52:	01 96       	adiw	r24, 0x01	; 1
    3b54:	88 31       	cpi	r24, 0x18	; 24
    3b56:	91 05       	cpc	r25, r1
    3b58:	c1 f7       	brne	.-16     	; 0x3b4a <SD_write_and_read_knowns_FAT+0x4>
	error = writeFile(newFile);
    3b5a:	82 e1       	ldi	r24, 0x12	; 18
    3b5c:	90 e2       	ldi	r25, 0x20	; 32
    3b5e:	0e 94 25 23 	call	0x464a	; 0x464a <writeFile>
    3b62:	80 93 53 40 	sts	0x4053, r24
	for (int i=0;i<24;i++) FRAMReadBuffer[i] = 0;	//clear the FRAM buffer
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	e8 53       	subi	r30, 0x38	; 56
    3b6e:	fc 4d       	sbci	r31, 0xDC	; 220
    3b70:	10 82       	st	Z, r1
    3b72:	01 96       	adiw	r24, 0x01	; 1
    3b74:	88 31       	cpi	r24, 0x18	; 24
    3b76:	91 05       	cpc	r25, r1
    3b78:	c1 f7       	brne	.-16     	; 0x3b6a <SD_write_and_read_knowns_FAT+0x24>
	error = readFile(READ,newFileR);		//read the data into the buffer from file
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	63 e0       	ldi	r22, 0x03	; 3
    3b7e:	70 e2       	ldi	r23, 0x20	; 32
    3b80:	0e 94 b7 22 	call	0x456e	; 0x456e <readFile>
    3b84:	80 93 53 40 	sts	0x4053, r24
}
    3b88:	08 95       	ret

00003b8a <RadioCS>:
	PORTD.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
}
*/
//select radio SPI on port D with cs
void RadioCS(uint8_t status){
	if (status) PORTD.OUTCLR = PIN4_bm;
    3b8a:	88 23       	and	r24, r24
    3b8c:	29 f0       	breq	.+10     	; 0x3b98 <RadioCS+0xe>
    3b8e:	80 e1       	ldi	r24, 0x10	; 16
    3b90:	e0 e6       	ldi	r30, 0x60	; 96
    3b92:	f6 e0       	ldi	r31, 0x06	; 6
    3b94:	86 83       	std	Z+6, r24	; 0x06
    3b96:	08 95       	ret
	else {
		PORTD.OUTSET = PIN4_bm;
    3b98:	80 e1       	ldi	r24, 0x10	; 16
    3b9a:	e0 e6       	ldi	r30, 0x60	; 96
    3b9c:	f6 e0       	ldi	r31, 0x06	; 6
    3b9e:	85 83       	std	Z+5, r24	; 0x05
    3ba0:	08 95       	ret

00003ba2 <SPID_write>:
}
*/
//write a byte of data over SPI port D and read a byte of data simultaneously
uint8_t SPID_write(uint8_t byteToSend){
	uint8_t data;
	SPID.DATA = byteToSend;
    3ba2:	e0 ec       	ldi	r30, 0xC0	; 192
    3ba4:	f9 e0       	ldi	r31, 0x09	; 9
    3ba6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPID.STATUS & SPI_IF_bm)); //wait for byte to be sent
    3ba8:	80 91 c2 09 	lds	r24, 0x09C2
    3bac:	87 ff       	sbrs	r24, 7
    3bae:	fc cf       	rjmp	.-8      	; 0x3ba8 <SPID_write+0x6>
	data = SPID.DATA; //read SPI data register to reset status flag
    3bb0:	80 91 c3 09 	lds	r24, 0x09C3
	return data;
}
    3bb4:	08 95       	ret

00003bb6 <chibi_test_radio>:
	
}
*/
void chibi_test_radio(){
		
	chb_init();
    3bb6:	0e 94 39 01 	call	0x272	; 0x272 <chb_init>
	chb_set_short_addr(0x0001);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	0e 94 08 04 	call	0x810	; 0x810 <chb_set_short_addr>
	//chb_set_pwr(10);
	while(1) nop();
    3bc2:	00 00       	nop
    3bc4:	fe cf       	rjmp	.-4      	; 0x3bc2 <chibi_test_radio+0xc>

00003bc6 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    3bd2:	20 91 47 40 	lds	r18, 0x4047
    3bd6:	30 91 48 40 	lds	r19, 0x4048
    3bda:	c0 90 c4 23 	lds	r12, 0x23C4
    3bde:	d0 90 c5 23 	lds	r13, 0x23C5
    3be2:	e0 90 c6 23 	lds	r14, 0x23C6
    3be6:	f0 90 c7 23 	lds	r15, 0x23C7
    3bea:	62 50       	subi	r22, 0x02	; 2
    3bec:	70 40       	sbci	r23, 0x00	; 0
    3bee:	80 40       	sbci	r24, 0x00	; 0
    3bf0:	90 40       	sbci	r25, 0x00	; 0
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	50 e0       	ldi	r21, 0x00	; 0
    3bf6:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    3bfa:	8b 01       	movw	r16, r22
    3bfc:	9c 01       	movw	r18, r24
    3bfe:	0c 0d       	add	r16, r12
    3c00:	1d 1d       	adc	r17, r13
    3c02:	2e 1d       	adc	r18, r14
    3c04:	3f 1d       	adc	r19, r15
}
    3c06:	b8 01       	movw	r22, r16
    3c08:	c9 01       	movw	r24, r18
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	ff 90       	pop	r15
    3c10:	ef 90       	pop	r14
    3c12:	df 90       	pop	r13
    3c14:	cf 90       	pop	r12
    3c16:	08 95       	ret

00003c18 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    3c18:	3f 92       	push	r3
    3c1a:	4f 92       	push	r4
    3c1c:	5f 92       	push	r5
    3c1e:	6f 92       	push	r6
    3c20:	7f 92       	push	r7
    3c22:	8f 92       	push	r8
    3c24:	9f 92       	push	r9
    3c26:	af 92       	push	r10
    3c28:	bf 92       	push	r11
    3c2a:	cf 92       	push	r12
    3c2c:	df 92       	push	r13
    3c2e:	ef 92       	push	r14
    3c30:	ff 92       	push	r15
    3c32:	0f 93       	push	r16
    3c34:	1f 93       	push	r17
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	4b 01       	movw	r8, r22
    3c3c:	5c 01       	movw	r10, r24
    3c3e:	34 2e       	mov	r3, r20
    3c40:	28 01       	movw	r4, r16
    3c42:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    3c44:	c0 90 4d 40 	lds	r12, 0x404D
    3c48:	d0 90 4e 40 	lds	r13, 0x404E
    3c4c:	42 e0       	ldi	r20, 0x02	; 2
    3c4e:	88 0c       	add	r8, r8
    3c50:	99 1c       	adc	r9, r9
    3c52:	aa 1c       	adc	r10, r10
    3c54:	bb 1c       	adc	r11, r11
    3c56:	4a 95       	dec	r20
    3c58:	d1 f7       	brne	.-12     	; 0x3c4e <getSetNextCluster+0x36>
    3c5a:	20 91 3d 40 	lds	r18, 0x403D
    3c5e:	30 91 3e 40 	lds	r19, 0x403E
    3c62:	ee 24       	eor	r14, r14
    3c64:	ff 24       	eor	r15, r15
    3c66:	80 91 49 40 	lds	r24, 0x4049
    3c6a:	90 91 4a 40 	lds	r25, 0x404A
    3c6e:	a0 91 4b 40 	lds	r26, 0x404B
    3c72:	b0 91 4c 40 	lds	r27, 0x404C
    3c76:	c8 0e       	add	r12, r24
    3c78:	d9 1e       	adc	r13, r25
    3c7a:	ea 1e       	adc	r14, r26
    3c7c:	fb 1e       	adc	r15, r27
    3c7e:	40 e0       	ldi	r20, 0x00	; 0
    3c80:	50 e0       	ldi	r21, 0x00	; 0
    3c82:	c5 01       	movw	r24, r10
    3c84:	b4 01       	movw	r22, r8
    3c86:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    3c8a:	c2 0e       	add	r12, r18
    3c8c:	d3 1e       	adc	r13, r19
    3c8e:	e4 1e       	adc	r14, r20
    3c90:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    3c92:	20 91 3d 40 	lds	r18, 0x403D
    3c96:	30 91 3e 40 	lds	r19, 0x403E
    3c9a:	40 e0       	ldi	r20, 0x00	; 0
    3c9c:	50 e0       	ldi	r21, 0x00	; 0
    3c9e:	c5 01       	movw	r24, r10
    3ca0:	b4 01       	movw	r22, r8
    3ca2:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	ec 01       	movw	r28, r24

//read the sector into a buffer
SD_read_block(FATEntrySector,SDBuffer);
    3cac:	c7 01       	movw	r24, r14
    3cae:	b6 01       	movw	r22, r12
    3cb0:	40 ec       	ldi	r20, 0xC0	; 192
    3cb2:	51 e2       	ldi	r21, 0x21	; 33
    3cb4:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &SDBuffer[FATEntryOffset];
    3cb8:	c0 54       	subi	r28, 0x40	; 64
    3cba:	de 4d       	sbci	r29, 0xDE	; 222

if(get_set == GET)
    3cbc:	33 20       	and	r3, r3
    3cbe:	31 f4       	brne	.+12     	; 0x3ccc <getSetNextCluster+0xb4>
  return ((*FATEntryValue) & 0x0fffffff);
    3cc0:	08 81       	ld	r16, Y
    3cc2:	19 81       	ldd	r17, Y+1	; 0x01
    3cc4:	2a 81       	ldd	r18, Y+2	; 0x02
    3cc6:	3b 81       	ldd	r19, Y+3	; 0x03
    3cc8:	3f 70       	andi	r19, 0x0F	; 15
    3cca:	0f c0       	rjmp	.+30     	; 0x3cea <getSetNextCluster+0xd2>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    3ccc:	48 82       	st	Y, r4
    3cce:	59 82       	std	Y+1, r5	; 0x01
    3cd0:	6a 82       	std	Y+2, r6	; 0x02
    3cd2:	7b 82       	std	Y+3, r7	; 0x03

SD_write_block(FATEntrySector,SDBuffer,512);
    3cd4:	c7 01       	movw	r24, r14
    3cd6:	b6 01       	movw	r22, r12
    3cd8:	40 ec       	ldi	r20, 0xC0	; 192
    3cda:	51 e2       	ldi	r21, 0x21	; 33
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	32 e0       	ldi	r19, 0x02	; 2
    3ce0:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_write_block>

return (0);
    3ce4:	00 e0       	ldi	r16, 0x00	; 0
    3ce6:	10 e0       	ldi	r17, 0x00	; 0
    3ce8:	98 01       	movw	r18, r16
}
    3cea:	b8 01       	movw	r22, r16
    3cec:	c9 01       	movw	r24, r18
    3cee:	df 91       	pop	r29
    3cf0:	cf 91       	pop	r28
    3cf2:	1f 91       	pop	r17
    3cf4:	0f 91       	pop	r16
    3cf6:	ff 90       	pop	r15
    3cf8:	ef 90       	pop	r14
    3cfa:	df 90       	pop	r13
    3cfc:	cf 90       	pop	r12
    3cfe:	bf 90       	pop	r11
    3d00:	af 90       	pop	r10
    3d02:	9f 90       	pop	r9
    3d04:	8f 90       	pop	r8
    3d06:	7f 90       	pop	r7
    3d08:	6f 90       	pop	r6
    3d0a:	5f 90       	pop	r5
    3d0c:	4f 90       	pop	r4
    3d0e:	3f 90       	pop	r3
    3d10:	08 95       	ret

00003d12 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    3d12:	cf 92       	push	r12
    3d14:	df 92       	push	r13
    3d16:	ef 92       	push	r14
    3d18:	ff 92       	push	r15
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	08 2f       	mov	r16, r24
    3d22:	c6 2f       	mov	r28, r22
    3d24:	69 01       	movw	r12, r18
    3d26:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SDBuffer;
//unsigned char error;

SD_read_block(unusedSectors + 1,SDBuffer);
    3d28:	80 91 49 40 	lds	r24, 0x4049
    3d2c:	90 91 4a 40 	lds	r25, 0x404A
    3d30:	a0 91 4b 40 	lds	r26, 0x404B
    3d34:	b0 91 4c 40 	lds	r27, 0x404C
    3d38:	01 96       	adiw	r24, 0x01	; 1
    3d3a:	a1 1d       	adc	r26, r1
    3d3c:	b1 1d       	adc	r27, r1
    3d3e:	bc 01       	movw	r22, r24
    3d40:	cd 01       	movw	r24, r26
    3d42:	40 ec       	ldi	r20, 0xC0	; 192
    3d44:	51 e2       	ldi	r21, 0x21	; 33
    3d46:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    3d4a:	80 91 c0 21 	lds	r24, 0x21C0
    3d4e:	90 91 c1 21 	lds	r25, 0x21C1
    3d52:	a0 91 c2 21 	lds	r26, 0x21C2
    3d56:	b0 91 c3 21 	lds	r27, 0x21C3
    3d5a:	82 35       	cpi	r24, 0x52	; 82
    3d5c:	22 e5       	ldi	r18, 0x52	; 82
    3d5e:	92 07       	cpc	r25, r18
    3d60:	21 e6       	ldi	r18, 0x61	; 97
    3d62:	a2 07       	cpc	r26, r18
    3d64:	21 e4       	ldi	r18, 0x41	; 65
    3d66:	b2 07       	cpc	r27, r18
    3d68:	09 f0       	breq	.+2      	; 0x3d6c <getSetFreeCluster+0x5a>
    3d6a:	5d c0       	rjmp	.+186    	; 0x3e26 <getSetFreeCluster+0x114>
    3d6c:	80 91 a4 23 	lds	r24, 0x23A4
    3d70:	90 91 a5 23 	lds	r25, 0x23A5
    3d74:	a0 91 a6 23 	lds	r26, 0x23A6
    3d78:	b0 91 a7 23 	lds	r27, 0x23A7
    3d7c:	82 37       	cpi	r24, 0x72	; 114
    3d7e:	22 e7       	ldi	r18, 0x72	; 114
    3d80:	92 07       	cpc	r25, r18
    3d82:	21 e4       	ldi	r18, 0x41	; 65
    3d84:	a2 07       	cpc	r26, r18
    3d86:	21 e6       	ldi	r18, 0x61	; 97
    3d88:	b2 07       	cpc	r27, r18
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <getSetFreeCluster+0x7c>
    3d8c:	4c c0       	rjmp	.+152    	; 0x3e26 <getSetFreeCluster+0x114>
    3d8e:	80 91 bc 23 	lds	r24, 0x23BC
    3d92:	90 91 bd 23 	lds	r25, 0x23BD
    3d96:	a0 91 be 23 	lds	r26, 0x23BE
    3d9a:	b0 91 bf 23 	lds	r27, 0x23BF
    3d9e:	80 30       	cpi	r24, 0x00	; 0
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	92 07       	cpc	r25, r18
    3da4:	25 e5       	ldi	r18, 0x55	; 85
    3da6:	a2 07       	cpc	r26, r18
    3da8:	2a ea       	ldi	r18, 0xAA	; 170
    3daa:	b2 07       	cpc	r27, r18
    3dac:	e1 f5       	brne	.+120    	; 0x3e26 <getSetFreeCluster+0x114>
  return 0xffffffff;

 if(get_set == GET)
    3dae:	cc 23       	and	r28, r28
    3db0:	a1 f4       	brne	.+40     	; 0x3dda <getSetFreeCluster+0xc8>
 {
   if(totOrNext == TOTAL_FREE)
    3db2:	01 30       	cpi	r16, 0x01	; 1
    3db4:	49 f4       	brne	.+18     	; 0x3dc8 <getSetFreeCluster+0xb6>
      return(FS->freeClusterCount);
    3db6:	00 91 a8 23 	lds	r16, 0x23A8
    3dba:	10 91 a9 23 	lds	r17, 0x23A9
    3dbe:	20 91 aa 23 	lds	r18, 0x23AA
    3dc2:	30 91 ab 23 	lds	r19, 0x23AB
    3dc6:	32 c0       	rjmp	.+100    	; 0x3e2c <getSetFreeCluster+0x11a>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    3dc8:	00 91 ac 23 	lds	r16, 0x23AC
    3dcc:	10 91 ad 23 	lds	r17, 0x23AD
    3dd0:	20 91 ae 23 	lds	r18, 0x23AE
    3dd4:	30 91 af 23 	lds	r19, 0x23AF
    3dd8:	29 c0       	rjmp	.+82     	; 0x3e2c <getSetFreeCluster+0x11a>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    3dda:	01 30       	cpi	r16, 0x01	; 1
    3ddc:	49 f4       	brne	.+18     	; 0x3df0 <getSetFreeCluster+0xde>
      FS->freeClusterCount = FSEntry;
    3dde:	c0 92 a8 23 	sts	0x23A8, r12
    3de2:	d0 92 a9 23 	sts	0x23A9, r13
    3de6:	e0 92 aa 23 	sts	0x23AA, r14
    3dea:	f0 92 ab 23 	sts	0x23AB, r15
    3dee:	08 c0       	rjmp	.+16     	; 0x3e00 <getSetFreeCluster+0xee>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    3df0:	c0 92 ac 23 	sts	0x23AC, r12
    3df4:	d0 92 ad 23 	sts	0x23AD, r13
    3df8:	e0 92 ae 23 	sts	0x23AE, r14
    3dfc:	f0 92 af 23 	sts	0x23AF, r15
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
    3e00:	80 91 49 40 	lds	r24, 0x4049
    3e04:	90 91 4a 40 	lds	r25, 0x404A
    3e08:	a0 91 4b 40 	lds	r26, 0x404B
    3e0c:	b0 91 4c 40 	lds	r27, 0x404C
    3e10:	01 96       	adiw	r24, 0x01	; 1
    3e12:	a1 1d       	adc	r26, r1
    3e14:	b1 1d       	adc	r27, r1
    3e16:	bc 01       	movw	r22, r24
    3e18:	cd 01       	movw	r24, r26
    3e1a:	40 ec       	ldi	r20, 0xC0	; 192
    3e1c:	51 e2       	ldi	r21, 0x21	; 33
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	32 e0       	ldi	r19, 0x02	; 2
    3e22:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_write_block>
//unsigned char error;

SD_read_block(unusedSectors + 1,SDBuffer);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
    3e26:	0f ef       	ldi	r16, 0xFF	; 255
    3e28:	1f ef       	ldi	r17, 0xFF	; 255
    3e2a:	98 01       	movw	r18, r16
	  FS->nextFreeCluster = FSEntry;
 
   SD_write_block(unusedSectors + 1,SDBuffer,512);	//update FSinfo
 }
 return 0xffffffff;
}
    3e2c:	b8 01       	movw	r22, r16
    3e2e:	c9 01       	movw	r24, r18
    3e30:	cf 91       	pop	r28
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	ff 90       	pop	r15
    3e38:	ef 90       	pop	r14
    3e3a:	df 90       	pop	r13
    3e3c:	cf 90       	pop	r12
    3e3e:	08 95       	ret

00003e40 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    3e40:	ef 92       	push	r14
    3e42:	ff 92       	push	r15
    3e44:	0f 93       	push	r16
    3e46:	1f 93       	push	r17
    3e48:	cf 93       	push	r28
    3e4a:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    3e4c:	10 92 49 40 	sts	0x4049, r1
    3e50:	10 92 4a 40 	sts	0x404A, r1
    3e54:	10 92 4b 40 	sts	0x404B, r1
    3e58:	10 92 4c 40 	sts	0x404C, r1

SD_read_block(0,SDBuffer);
    3e5c:	60 e0       	ldi	r22, 0x00	; 0
    3e5e:	70 e0       	ldi	r23, 0x00	; 0
    3e60:	cb 01       	movw	r24, r22
    3e62:	40 ec       	ldi	r20, 0xC0	; 192
    3e64:	51 e2       	ldi	r21, 0x21	; 33
    3e66:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
bpb = (struct BS_Structure *)SDBuffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    3e6a:	80 91 c0 21 	lds	r24, 0x21C0
    3e6e:	89 3e       	cpi	r24, 0xE9	; 233
    3e70:	31 f1       	breq	.+76     	; 0x3ebe <getBootSectorData+0x7e>
    3e72:	8b 3e       	cpi	r24, 0xEB	; 235
    3e74:	21 f1       	breq	.+72     	; 0x3ebe <getBootSectorData+0x7e>
{
  mbr = (struct MBRinfo_Structure *) SDBuffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    3e76:	80 91 be 23 	lds	r24, 0x23BE
    3e7a:	90 91 bf 23 	lds	r25, 0x23BF
    3e7e:	2a ea       	ldi	r18, 0xAA	; 170
    3e80:	85 35       	cpi	r24, 0x55	; 85
    3e82:	92 07       	cpc	r25, r18
    3e84:	09 f0       	breq	.+2      	; 0x3e88 <getBootSectorData+0x48>
    3e86:	b6 c0       	rjmp	.+364    	; 0x3ff4 <getBootSectorData+0x1b4>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    3e88:	60 91 86 23 	lds	r22, 0x2386
    3e8c:	70 91 87 23 	lds	r23, 0x2387
    3e90:	80 91 88 23 	lds	r24, 0x2388
    3e94:	90 91 89 23 	lds	r25, 0x2389
    3e98:	60 93 49 40 	sts	0x4049, r22
    3e9c:	70 93 4a 40 	sts	0x404A, r23
    3ea0:	80 93 4b 40 	sts	0x404B, r24
    3ea4:	90 93 4c 40 	sts	0x404C, r25
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
    3ea8:	40 ec       	ldi	r20, 0xC0	; 192
    3eaa:	51 e2       	ldi	r21, 0x21	; 33
    3eac:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    3eb0:	80 91 c0 21 	lds	r24, 0x21C0
    3eb4:	89 3e       	cpi	r24, 0xE9	; 233
    3eb6:	19 f0       	breq	.+6      	; 0x3ebe <getBootSectorData+0x7e>
    3eb8:	8b 3e       	cpi	r24, 0xEB	; 235
    3eba:	09 f0       	breq	.+2      	; 0x3ebe <getBootSectorData+0x7e>
    3ebc:	9b c0       	rjmp	.+310    	; 0x3ff4 <getBootSectorData+0x1b4>
}

bytesPerSector = bpb->bytesPerSector;
    3ebe:	80 91 cb 21 	lds	r24, 0x21CB
    3ec2:	90 91 cc 21 	lds	r25, 0x21CC
    3ec6:	80 93 3d 40 	sts	0x403D, r24
    3eca:	90 93 3e 40 	sts	0x403E, r25
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
    3ece:	80 91 cd 21 	lds	r24, 0x21CD
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	80 93 47 40 	sts	0x4047, r24
    3ed8:	90 93 48 40 	sts	0x4048, r25
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
    3edc:	e0 90 ce 21 	lds	r14, 0x21CE
    3ee0:	f0 90 cf 21 	lds	r15, 0x21CF
    3ee4:	e0 92 4d 40 	sts	0x404D, r14
    3ee8:	f0 92 4e 40 	sts	0x404E, r15
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    3eec:	80 91 ec 21 	lds	r24, 0x21EC
    3ef0:	90 91 ed 21 	lds	r25, 0x21ED
    3ef4:	a0 91 ee 21 	lds	r26, 0x21EE
    3ef8:	b0 91 ef 21 	lds	r27, 0x21EF
    3efc:	80 93 43 40 	sts	0x4043, r24
    3f00:	90 93 44 40 	sts	0x4044, r25
    3f04:	a0 93 45 40 	sts	0x4045, r26
    3f08:	b0 93 46 40 	sts	0x4046, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    3f0c:	c0 91 4d 40 	lds	r28, 0x404D
    3f10:	d0 91 4e 40 	lds	r29, 0x404E
    3f14:	60 91 d0 21 	lds	r22, 0x21D0
    3f18:	70 e0       	ldi	r23, 0x00	; 0
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	20 91 e4 21 	lds	r18, 0x21E4
    3f22:	30 91 e5 21 	lds	r19, 0x21E5
    3f26:	40 91 e6 21 	lds	r20, 0x21E6
    3f2a:	50 91 e7 21 	lds	r21, 0x21E7
    3f2e:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    3f32:	8b 01       	movw	r16, r22
    3f34:	9c 01       	movw	r18, r24
    3f36:	ce 01       	movw	r24, r28
    3f38:	a0 e0       	ldi	r26, 0x00	; 0
    3f3a:	b0 e0       	ldi	r27, 0x00	; 0
    3f3c:	40 91 dc 21 	lds	r20, 0x21DC
    3f40:	50 91 dd 21 	lds	r21, 0x21DD
    3f44:	60 91 de 21 	lds	r22, 0x21DE
    3f48:	70 91 df 21 	lds	r23, 0x21DF
    3f4c:	84 0f       	add	r24, r20
    3f4e:	95 1f       	adc	r25, r21
    3f50:	a6 1f       	adc	r26, r22
    3f52:	b7 1f       	adc	r27, r23
    3f54:	80 0f       	add	r24, r16
    3f56:	91 1f       	adc	r25, r17
    3f58:	a2 1f       	adc	r26, r18
    3f5a:	b3 1f       	adc	r27, r19
    3f5c:	80 93 c4 23 	sts	0x23C4, r24
    3f60:	90 93 c5 23 	sts	0x23C5, r25
    3f64:	a0 93 c6 23 	sts	0x23C6, r26
    3f68:	b0 93 c7 23 	sts	0x23C7, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    3f6c:	e0 91 47 40 	lds	r30, 0x4047
    3f70:	f0 91 48 40 	lds	r31, 0x4048
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
    3f74:	a7 01       	movw	r20, r14
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	70 e0       	ldi	r23, 0x00	; 0
    3f7a:	80 91 e0 21 	lds	r24, 0x21E0
    3f7e:	90 91 e1 21 	lds	r25, 0x21E1
    3f82:	a0 91 e2 21 	lds	r26, 0x21E2
    3f86:	b0 91 e3 21 	lds	r27, 0x21E3
    3f8a:	84 1b       	sub	r24, r20
    3f8c:	95 0b       	sbc	r25, r21
    3f8e:	a6 0b       	sbc	r26, r22
    3f90:	b7 0b       	sbc	r27, r23
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
    3f92:	80 1b       	sub	r24, r16
    3f94:	91 0b       	sbc	r25, r17
    3f96:	a2 0b       	sbc	r26, r18
    3f98:	b3 0b       	sbc	r27, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    3f9a:	9f 01       	movw	r18, r30
    3f9c:	40 e0       	ldi	r20, 0x00	; 0
    3f9e:	50 e0       	ldi	r21, 0x00	; 0
    3fa0:	bc 01       	movw	r22, r24
    3fa2:	cd 01       	movw	r24, r26
    3fa4:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    3fa8:	20 93 3f 40 	sts	0x403F, r18
    3fac:	30 93 40 40 	sts	0x4040, r19
    3fb0:	40 93 41 40 	sts	0x4041, r20
    3fb4:	50 93 42 40 	sts	0x4042, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	60 e0       	ldi	r22, 0x00	; 0
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	a9 01       	movw	r20, r18
    3fc2:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <getSetFreeCluster>
    3fc6:	ab 01       	movw	r20, r22
    3fc8:	bc 01       	movw	r22, r24
    3fca:	80 91 3f 40 	lds	r24, 0x403F
    3fce:	90 91 40 40 	lds	r25, 0x4040
    3fd2:	a0 91 41 40 	lds	r26, 0x4041
    3fd6:	b0 91 42 40 	lds	r27, 0x4042
    3fda:	84 17       	cp	r24, r20
    3fdc:	95 07       	cpc	r25, r21
    3fde:	a6 07       	cpc	r26, r22
    3fe0:	b7 07       	cpc	r27, r23
    3fe2:	18 f4       	brcc	.+6      	; 0x3fea <getBootSectorData+0x1aa>
     freeClusterCountUpdated = 0;
    3fe4:	10 92 54 40 	sts	0x4054, r1
    3fe8:	03 c0       	rjmp	.+6      	; 0x3ff0 <getBootSectorData+0x1b0>
else
	 freeClusterCountUpdated = 1;
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	80 93 54 40 	sts	0x4054, r24
return 0;
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	01 c0       	rjmp	.+2      	; 0x3ff6 <getBootSectorData+0x1b6>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_read_block(partition->firstSector,SDBuffer);//read the bpb sector
  bpb = (struct BS_Structure *)SDBuffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
    3ff6:	df 91       	pop	r29
    3ff8:	cf 91       	pop	r28
    3ffa:	1f 91       	pop	r17
    3ffc:	0f 91       	pop	r16
    3ffe:	ff 90       	pop	r15
    4000:	ef 90       	pop	r14
    4002:	08 95       	ret

00004004 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	2b 97       	sbiw	r28, 0x0b	; 11
    400e:	cd bf       	out	0x3d, r28	; 61
    4010:	de bf       	out	0x3e, r29	; 62

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}
    4012:	bc 01       	movw	r22, r24
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    4014:	fc 01       	movw	r30, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    4016:	50 e0       	ldi	r21, 0x00	; 0
if(fileName[j] == '.') break;
    4018:	21 91       	ld	r18, Z+
    401a:	2e 32       	cpi	r18, 0x2E	; 46
    401c:	21 f0       	breq	.+8      	; 0x4026 <convertFileName+0x22>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    401e:	5f 5f       	subi	r21, 0xFF	; 255
    4020:	5c 30       	cpi	r21, 0x0C	; 12
    4022:	d1 f7       	brne	.-12     	; 0x4018 <convertFileName+0x14>
    4024:	51 c0       	rjmp	.+162    	; 0x40c8 <convertFileName+0xc4>
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
    4026:	59 30       	cpi	r21, 0x09	; 9
    4028:	08 f0       	brcs	.+2      	; 0x402c <convertFileName+0x28>
    402a:	4e c0       	rjmp	.+156    	; 0x40c8 <convertFileName+0xc4>
    402c:	9e 01       	movw	r18, r28
    402e:	2f 5f       	subi	r18, 0xFF	; 255
    4030:	3f 4f       	sbci	r19, 0xFF	; 255
    4032:	d9 01       	movw	r26, r18
    4034:	fc 01       	movw	r30, r24
    4036:	02 c0       	rjmp	.+4      	; 0x403c <convertFileName+0x38>
	return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
    4038:	41 91       	ld	r20, Z+
    403a:	4d 93       	st	X+, r20
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}

for(k=0; k<j; k++) //setting file name
    403c:	4e 2f       	mov	r20, r30
    403e:	48 1b       	sub	r20, r24
    4040:	45 17       	cp	r20, r21
    4042:	d0 f3       	brcs	.-12     	; 0x4038 <convertFileName+0x34>
    4044:	45 2f       	mov	r20, r21
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    4046:	a0 e2       	ldi	r26, 0x20	; 32
    4048:	08 c0       	rjmp	.+16     	; 0x405a <convertFileName+0x56>
    404a:	e1 e0       	ldi	r30, 0x01	; 1
    404c:	f0 e0       	ldi	r31, 0x00	; 0
    404e:	ec 0f       	add	r30, r28
    4050:	fd 1f       	adc	r31, r29
    4052:	e4 0f       	add	r30, r20
    4054:	f1 1d       	adc	r31, r1
    4056:	a0 83       	st	Z, r26
	return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    4058:	4f 5f       	subi	r20, 0xFF	; 255
    405a:	48 30       	cpi	r20, 0x08	; 8
    405c:	b1 f7       	brne	.-20     	; 0x404a <convertFileName+0x46>
  fileNameFAT[k] = ' ';

j++;
    405e:	5f 5f       	subi	r21, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    4060:	b0 e2       	ldi	r27, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    4062:	fc 01       	movw	r30, r24
    4064:	e5 0f       	add	r30, r21
    4066:	f1 1d       	adc	r31, r1
    4068:	a0 81       	ld	r26, Z
    406a:	aa 23       	and	r26, r26
    406c:	49 f0       	breq	.+18     	; 0x4080 <convertFileName+0x7c>
    fileNameFAT[k] = fileName[j++];
    406e:	e1 e0       	ldi	r30, 0x01	; 1
    4070:	f0 e0       	ldi	r31, 0x00	; 0
    4072:	ec 0f       	add	r30, r28
    4074:	fd 1f       	adc	r31, r29
    4076:	e4 0f       	add	r30, r20
    4078:	f1 1d       	adc	r31, r1
    407a:	a0 83       	st	Z, r26
    407c:	5f 5f       	subi	r21, 0xFF	; 255
    407e:	0a c0       	rjmp	.+20     	; 0x4094 <convertFileName+0x90>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    4080:	e1 e0       	ldi	r30, 0x01	; 1
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	ec 0f       	add	r30, r28
    4086:	fd 1f       	adc	r31, r29
    4088:	e4 0f       	add	r30, r20
    408a:	f1 1d       	adc	r31, r1
    408c:	b0 83       	st	Z, r27
    408e:	4f 5f       	subi	r20, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    4090:	4b 30       	cpi	r20, 0x0B	; 11
    4092:	b0 f3       	brcs	.-20     	; 0x4080 <convertFileName+0x7c>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
    4094:	4f 5f       	subi	r20, 0xFF	; 255
    4096:	4b 30       	cpi	r20, 0x0B	; 11
    4098:	20 f3       	brcs	.-56     	; 0x4062 <convertFileName+0x5e>
    409a:	f9 01       	movw	r30, r18
    409c:	8b e0       	ldi	r24, 0x0B	; 11
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    409e:	90 81       	ld	r25, Z
    40a0:	49 2f       	mov	r20, r25
    40a2:	41 56       	subi	r20, 0x61	; 97
    40a4:	4a 31       	cpi	r20, 0x1A	; 26
    40a6:	10 f4       	brcc	.+4      	; 0x40ac <convertFileName+0xa8>
    fileNameFAT[j] -= 0x20;
    40a8:	90 52       	subi	r25, 0x20	; 32
    40aa:	90 83       	st	Z, r25
    40ac:	81 50       	subi	r24, 0x01	; 1
    40ae:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    40b0:	88 23       	and	r24, r24
    40b2:	a9 f7       	brne	.-22     	; 0x409e <convertFileName+0x9a>
    40b4:	8b e0       	ldi	r24, 0x0B	; 11
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
    40b6:	f9 01       	movw	r30, r18
    40b8:	91 91       	ld	r25, Z+
    40ba:	9f 01       	movw	r18, r30
    40bc:	fb 01       	movw	r30, r22
    40be:	91 93       	st	Z+, r25
    40c0:	bf 01       	movw	r22, r30
    40c2:	81 50       	subi	r24, 0x01	; 1

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    40c4:	c1 f7       	brne	.-16     	; 0x40b6 <convertFileName+0xb2>
    40c6:	01 c0       	rjmp	.+2      	; 0x40ca <convertFileName+0xc6>

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}
    40c8:	81 e0       	ldi	r24, 0x01	; 1

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];

return 0;
}
    40ca:	2b 96       	adiw	r28, 0x0b	; 11
    40cc:	cd bf       	out	0x3d, r28	; 61
    40ce:	de bf       	out	0x3e, r29	; 62
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	08 95       	ret

000040d6 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    40d6:	4f 92       	push	r4
    40d8:	5f 92       	push	r5
    40da:	6f 92       	push	r6
    40dc:	7f 92       	push	r7
    40de:	8f 92       	push	r8
    40e0:	9f 92       	push	r9
    40e2:	af 92       	push	r10
    40e4:	bf 92       	push	r11
    40e6:	cf 92       	push	r12
    40e8:	df 92       	push	r13
    40ea:	ef 92       	push	r14
    40ec:	ff 92       	push	r15
    40ee:	cf 93       	push	r28
    40f0:	df 93       	push	r29
    40f2:	00 d0       	rcall	.+0      	; 0x40f4 <searchNextFreeCluster+0x1e>
    40f4:	0f 92       	push	r0
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	4b 01       	movw	r8, r22
    40fc:	5c 01       	movw	r10, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    40fe:	80 e8       	ldi	r24, 0x80	; 128
    4100:	9f ef       	ldi	r25, 0xFF	; 255
    4102:	af ef       	ldi	r26, 0xFF	; 255
    4104:	bf ef       	ldi	r27, 0xFF	; 255
    4106:	88 22       	and	r8, r24
    4108:	99 22       	and	r9, r25
    410a:	aa 22       	and	r10, r26
    410c:	bb 22       	and	r11, r27
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    410e:	44 24       	eor	r4, r4
    4110:	55 24       	eor	r5, r5
    4112:	32 01       	movw	r6, r4
//Function: to search for the next free cluster in the root directory
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
    4114:	d5 01       	movw	r26, r10
    4116:	c4 01       	movw	r24, r8
    4118:	e2 e0       	ldi	r30, 0x02	; 2
    411a:	88 0f       	add	r24, r24
    411c:	99 1f       	adc	r25, r25
    411e:	aa 1f       	adc	r26, r26
    4120:	bb 1f       	adc	r27, r27
    4122:	ea 95       	dec	r30
    4124:	d1 f7       	brne	.-12     	; 0x411a <searchNextFreeCluster+0x44>
    4126:	89 83       	std	Y+1, r24	; 0x01
    4128:	9a 83       	std	Y+2, r25	; 0x02
    412a:	ab 83       	std	Y+3, r26	; 0x03
    412c:	bc 83       	std	Y+4, r27	; 0x04
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    412e:	56 c0       	rjmp	.+172    	; 0x41dc <searchNextFreeCluster+0x106>
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    4130:	c0 90 4d 40 	lds	r12, 0x404D
    4134:	d0 90 4e 40 	lds	r13, 0x404E
    4138:	20 91 3d 40 	lds	r18, 0x403D
    413c:	30 91 3e 40 	lds	r19, 0x403E
    4140:	ee 24       	eor	r14, r14
    4142:	ff 24       	eor	r15, r15
    4144:	80 91 49 40 	lds	r24, 0x4049
    4148:	90 91 4a 40 	lds	r25, 0x404A
    414c:	a0 91 4b 40 	lds	r26, 0x404B
    4150:	b0 91 4c 40 	lds	r27, 0x404C
    4154:	c8 0e       	add	r12, r24
    4156:	d9 1e       	adc	r13, r25
    4158:	ea 1e       	adc	r14, r26
    415a:	fb 1e       	adc	r15, r27
//Function: to search for the next free cluster in the root directory
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
    415c:	69 81       	ldd	r22, Y+1	; 0x01
    415e:	7a 81       	ldd	r23, Y+2	; 0x02
    4160:	8b 81       	ldd	r24, Y+3	; 0x03
    4162:	9c 81       	ldd	r25, Y+4	; 0x04
    4164:	64 0d       	add	r22, r4
    4166:	75 1d       	adc	r23, r5
    4168:	86 1d       	adc	r24, r6
    416a:	97 1d       	adc	r25, r7
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    416c:	40 e0       	ldi	r20, 0x00	; 0
    416e:	50 e0       	ldi	r21, 0x00	; 0
    4170:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    4174:	c2 0e       	add	r12, r18
    4176:	d3 1e       	adc	r13, r19
    4178:	e4 1e       	adc	r14, r20
    417a:	f5 1e       	adc	r15, r21
      SD_read_block(sector,SDBuffer);
    417c:	c7 01       	movw	r24, r14
    417e:	b6 01       	movw	r22, r12
    4180:	40 ec       	ldi	r20, 0xC0	; 192
    4182:	51 e2       	ldi	r21, 0x21	; 33
    4184:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
      for(i=0; i<128; i++)
    4188:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &SDBuffer[i*4];
    418a:	e2 2f       	mov	r30, r18
    418c:	f0 e0       	ldi	r31, 0x00	; 0
    418e:	ee 0f       	add	r30, r30
    4190:	ff 1f       	adc	r31, r31
    4192:	ee 0f       	add	r30, r30
    4194:	ff 1f       	adc	r31, r31
    4196:	e0 54       	subi	r30, 0x40	; 64
    4198:	fe 4d       	sbci	r31, 0xDE	; 222
         if(((*value) & 0x0fffffff) == 0)
    419a:	80 81       	ld	r24, Z
    419c:	91 81       	ldd	r25, Z+1	; 0x01
    419e:	a2 81       	ldd	r26, Z+2	; 0x02
    41a0:	b3 81       	ldd	r27, Z+3	; 0x03
    41a2:	bf 70       	andi	r27, 0x0F	; 15
    41a4:	00 97       	sbiw	r24, 0x00	; 0
    41a6:	a1 05       	cpc	r26, r1
    41a8:	b1 05       	cpc	r27, r1
    41aa:	29 f4       	brne	.+10     	; 0x41b6 <searchNextFreeCluster+0xe0>
            return(cluster+i);
    41ac:	82 0e       	add	r8, r18
    41ae:	91 1c       	adc	r9, r1
    41b0:	a1 1c       	adc	r10, r1
    41b2:	b1 1c       	adc	r11, r1
    41b4:	24 c0       	rjmp	.+72     	; 0x41fe <searchNextFreeCluster+0x128>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_read_block(sector,SDBuffer);
      for(i=0; i<128; i++)
    41b6:	2f 5f       	subi	r18, 0xFF	; 255
    41b8:	20 38       	cpi	r18, 0x80	; 128
    41ba:	39 f7       	brne	.-50     	; 0x418a <searchNextFreeCluster+0xb4>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    41bc:	80 e8       	ldi	r24, 0x80	; 128
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	a0 e0       	ldi	r26, 0x00	; 0
    41c2:	b0 e0       	ldi	r27, 0x00	; 0
    41c4:	88 0e       	add	r8, r24
    41c6:	99 1e       	adc	r9, r25
    41c8:	aa 1e       	adc	r10, r26
    41ca:	bb 1e       	adc	r11, r27
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	92 e0       	ldi	r25, 0x02	; 2
    41d0:	a0 e0       	ldi	r26, 0x00	; 0
    41d2:	b0 e0       	ldi	r27, 0x00	; 0
    41d4:	48 0e       	add	r4, r24
    41d6:	59 1e       	adc	r5, r25
    41d8:	6a 1e       	adc	r6, r26
    41da:	7b 1e       	adc	r7, r27
    41dc:	80 91 3f 40 	lds	r24, 0x403F
    41e0:	90 91 40 40 	lds	r25, 0x4040
    41e4:	a0 91 41 40 	lds	r26, 0x4041
    41e8:	b0 91 42 40 	lds	r27, 0x4042
    41ec:	88 16       	cp	r8, r24
    41ee:	99 06       	cpc	r9, r25
    41f0:	aa 06       	cpc	r10, r26
    41f2:	bb 06       	cpc	r11, r27
    41f4:	08 f4       	brcc	.+2      	; 0x41f8 <searchNextFreeCluster+0x122>
    41f6:	9c cf       	rjmp	.-200    	; 0x4130 <searchNextFreeCluster+0x5a>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
    41f8:	88 24       	eor	r8, r8
    41fa:	99 24       	eor	r9, r9
    41fc:	54 01       	movw	r10, r8
}
    41fe:	b4 01       	movw	r22, r8
    4200:	c5 01       	movw	r24, r10
    4202:	24 96       	adiw	r28, 0x04	; 4
    4204:	cd bf       	out	0x3d, r28	; 61
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	ff 90       	pop	r15
    420e:	ef 90       	pop	r14
    4210:	df 90       	pop	r13
    4212:	cf 90       	pop	r12
    4214:	bf 90       	pop	r11
    4216:	af 90       	pop	r10
    4218:	9f 90       	pop	r9
    421a:	8f 90       	pop	r8
    421c:	7f 90       	pop	r7
    421e:	6f 90       	pop	r6
    4220:	5f 90       	pop	r5
    4222:	4f 90       	pop	r4
    4224:	08 95       	ret

00004226 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    4226:	cf 92       	push	r12
    4228:	df 92       	push	r13
    422a:	ef 92       	push	r14
    422c:	ff 92       	push	r15
    422e:	cf 93       	push	r28
    4230:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    4232:	db 01       	movw	r26, r22
    4234:	ca 01       	movw	r24, r20
    4236:	91 70       	andi	r25, 0x01	; 1
    4238:	a0 70       	andi	r26, 0x00	; 0
    423a:	b0 70       	andi	r27, 0x00	; 0
    423c:	29 e0       	ldi	r18, 0x09	; 9
    423e:	76 95       	lsr	r23
    4240:	67 95       	ror	r22
    4242:	57 95       	ror	r21
    4244:	47 95       	ror	r20
    4246:	2a 95       	dec	r18
    4248:	d1 f7       	brne	.-12     	; 0x423e <freeMemoryUpdate+0x18>
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	a1 05       	cpc	r26, r1
    424e:	b1 05       	cpc	r27, r1
    4250:	21 f0       	breq	.+8      	; 0x425a <freeMemoryUpdate+0x34>
  else size = (size / 512) +1;
    4252:	4f 5f       	subi	r20, 0xFF	; 255
    4254:	5f 4f       	sbci	r21, 0xFF	; 255
    4256:	6f 4f       	sbci	r22, 0xFF	; 255
    4258:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
    425a:	db 01       	movw	r26, r22
    425c:	ca 01       	movw	r24, r20
    425e:	87 70       	andi	r24, 0x07	; 7
    4260:	90 70       	andi	r25, 0x00	; 0
    4262:	a0 70       	andi	r26, 0x00	; 0
    4264:	b0 70       	andi	r27, 0x00	; 0
    4266:	6a 01       	movw	r12, r20
    4268:	7b 01       	movw	r14, r22
    426a:	f3 e0       	ldi	r31, 0x03	; 3
    426c:	f6 94       	lsr	r15
    426e:	e7 94       	ror	r14
    4270:	d7 94       	ror	r13
    4272:	c7 94       	ror	r12
    4274:	fa 95       	dec	r31
    4276:	d1 f7       	brne	.-12     	; 0x426c <freeMemoryUpdate+0x46>
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	a1 05       	cpc	r26, r1
    427c:	b1 05       	cpc	r27, r1
    427e:	29 f0       	breq	.+10     	; 0x428a <freeMemoryUpdate+0x64>
  else size = (size / 8) +1;
    4280:	08 94       	sec
    4282:	c1 1c       	adc	r12, r1
    4284:	d1 1c       	adc	r13, r1
    4286:	e1 1c       	adc	r14, r1
    4288:	f1 1c       	adc	r15, r1

  if(freeClusterCountUpdated)
    428a:	80 91 54 40 	lds	r24, 0x4054
    428e:	88 23       	and	r24, r24
    4290:	f1 f0       	breq	.+60     	; 0x42ce <freeMemoryUpdate+0xa8>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	a9 01       	movw	r20, r18
    429c:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <getSetFreeCluster>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
	if(flag == ADD)
    42a4:	cc 23       	and	r28, r28
    42a6:	29 f4       	brne	.+10     	; 0x42b2 <freeMemoryUpdate+0x8c>
  	   freeClusters = freeClusters + size;
    42a8:	c8 0e       	add	r12, r24
    42aa:	d9 1e       	adc	r13, r25
    42ac:	ea 1e       	adc	r14, r26
    42ae:	fb 1e       	adc	r15, r27
    42b0:	08 c0       	rjmp	.+16     	; 0x42c2 <freeMemoryUpdate+0x9c>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    42b2:	9c 01       	movw	r18, r24
    42b4:	ad 01       	movw	r20, r26
    42b6:	2c 19       	sub	r18, r12
    42b8:	3d 09       	sbc	r19, r13
    42ba:	4e 09       	sbc	r20, r14
    42bc:	5f 09       	sbc	r21, r15
    42be:	69 01       	movw	r12, r18
    42c0:	7a 01       	movw	r14, r20
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	61 e0       	ldi	r22, 0x01	; 1
    42c6:	a7 01       	movw	r20, r14
    42c8:	96 01       	movw	r18, r12
    42ca:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <getSetFreeCluster>
  }
}
    42ce:	cf 91       	pop	r28
    42d0:	ff 90       	pop	r15
    42d2:	ef 90       	pop	r14
    42d4:	df 90       	pop	r13
    42d6:	cf 90       	pop	r12
    42d8:	08 95       	ret

000042da <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    42da:	2f 92       	push	r2
    42dc:	3f 92       	push	r3
    42de:	4f 92       	push	r4
    42e0:	5f 92       	push	r5
    42e2:	6f 92       	push	r6
    42e4:	7f 92       	push	r7
    42e6:	8f 92       	push	r8
    42e8:	9f 92       	push	r9
    42ea:	af 92       	push	r10
    42ec:	bf 92       	push	r11
    42ee:	cf 92       	push	r12
    42f0:	df 92       	push	r13
    42f2:	ef 92       	push	r14
    42f4:	ff 92       	push	r15
    42f6:	0f 93       	push	r16
    42f8:	1f 93       	push	r17
    42fa:	cf 93       	push	r28
    42fc:	df 93       	push	r29
    42fe:	00 d0       	rcall	.+0      	; 0x4300 <findFiles+0x26>
    4300:	00 d0       	rcall	.+0      	; 0x4302 <findFiles+0x28>
    4302:	cd b7       	in	r28, 0x3d	; 61
    4304:	de b7       	in	r29, 0x3e	; 62
    4306:	38 2e       	mov	r3, r24
    4308:	26 2e       	mov	r2, r22
    430a:	7d 83       	std	Y+5, r23	; 0x05
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    430c:	c0 90 43 40 	lds	r12, 0x4043
    4310:	d0 90 44 40 	lds	r13, 0x4044
    4314:	e0 90 45 40 	lds	r14, 0x4045
    4318:	f0 90 46 40 	lds	r15, 0x4046
		      //transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    431c:	81 50       	subi	r24, 0x01	; 1
    431e:	8e 83       	std	Y+6, r24	; 0x06

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    4320:	c7 01       	movw	r24, r14
    4322:	b6 01       	movw	r22, r12
    4324:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <getFirstSector>
    4328:	69 83       	std	Y+1, r22	; 0x01
    432a:	7a 83       	std	Y+2, r23	; 0x02
    432c:	8b 83       	std	Y+3, r24	; 0x03
    432e:	9c 83       	std	Y+4, r25	; 0x04

   for(sector = 0; sector < sectorPerCluster; sector++)
    4330:	88 24       	eor	r8, r8
    4332:	99 24       	eor	r9, r9
    4334:	54 01       	movw	r10, r8
    4336:	cf c0       	rjmp	.+414    	; 0x44d6 <findFiles+0x1fc>
   {
     SD_read_block (firstSector + sector,SDBuffer);
    4338:	49 80       	ldd	r4, Y+1	; 0x01
    433a:	5a 80       	ldd	r5, Y+2	; 0x02
    433c:	6b 80       	ldd	r6, Y+3	; 0x03
    433e:	7c 80       	ldd	r7, Y+4	; 0x04
    4340:	48 0c       	add	r4, r8
    4342:	59 1c       	adc	r5, r9
    4344:	6a 1c       	adc	r6, r10
    4346:	7b 1c       	adc	r7, r11
    4348:	c3 01       	movw	r24, r6
    434a:	b2 01       	movw	r22, r4
    434c:	40 ec       	ldi	r20, 0xC0	; 192
    434e:	51 e2       	ldi	r21, 0x21	; 33
    4350:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	b1 c0       	rjmp	.+354    	; 0x44bc <findFiles+0x1e2>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    435a:	b9 01       	movw	r22, r18
    435c:	60 54       	subi	r22, 0x40	; 64
    435e:	7e 4d       	sbci	r23, 0xDE	; 222

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    4360:	fb 01       	movw	r30, r22
    4362:	80 81       	ld	r24, Z
    4364:	88 23       	and	r24, r24
    4366:	09 f4       	brne	.+2      	; 0x436a <findFiles+0x90>
    4368:	db c0       	rjmp	.+438    	; 0x4520 <findFiles+0x246>
		{
		  //if(flag == DELETE)
		      //transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    436a:	85 3e       	cpi	r24, 0xE5	; 229
    436c:	09 f4       	brne	.+2      	; 0x4370 <findFiles+0x96>
    436e:	a4 c0       	rjmp	.+328    	; 0x44b8 <findFiles+0x1de>
    4370:	83 85       	ldd	r24, Z+11	; 0x0b
    4372:	8f 30       	cpi	r24, 0x0F	; 15
    4374:	09 f4       	brne	.+2      	; 0x4378 <findFiles+0x9e>
    4376:	a0 c0       	rjmp	.+320    	; 0x44b8 <findFiles+0x1de>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    4378:	fe 81       	ldd	r31, Y+6	; 0x06
    437a:	f2 30       	cpi	r31, 0x02	; 2
    437c:	08 f0       	brcs	.+2      	; 0x4380 <findFiles+0xa6>
    437e:	9c c0       	rjmp	.+312    	; 0x44b8 <findFiles+0x1de>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    4380:	a2 2d       	mov	r26, r2
    4382:	bd 81       	ldd	r27, Y+5	; 0x05
    4384:	8b e0       	ldi	r24, 0x0B	; 11
    4386:	a9 01       	movw	r20, r18
    4388:	fb 01       	movw	r30, r22
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    438a:	21 91       	ld	r18, Z+
    438c:	9d 91       	ld	r25, X+
    438e:	29 17       	cp	r18, r25
    4390:	09 f0       	breq	.+2      	; 0x4394 <findFiles+0xba>
    4392:	91 c0       	rjmp	.+290    	; 0x44b6 <findFiles+0x1dc>
    4394:	81 50       	subi	r24, 0x01	; 1
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    4396:	c9 f7       	brne	.-14     	; 0x438a <findFiles+0xb0>
    4398:	9a 01       	movw	r18, r20
    439a:	8b 01       	movw	r16, r22
    439c:	fb 01       	movw	r30, r22
    439e:	84 88       	ldd	r8, Z+20	; 0x14
    43a0:	95 88       	ldd	r9, Z+21	; 0x15
    43a2:	42 8d       	ldd	r20, Z+26	; 0x1a
    43a4:	53 8d       	ldd	r21, Z+27	; 0x1b
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
			{
			  if(flag == GET_FILE)
    43a6:	f1 e0       	ldi	r31, 0x01	; 1
    43a8:	3f 16       	cp	r3, r31
    43aa:	a1 f5       	brne	.+104    	; 0x4414 <findFiles+0x13a>
              {
			    appendFileSector = firstSector + sector;
    43ac:	40 92 55 40 	sts	0x4055, r4
    43b0:	50 92 56 40 	sts	0x4056, r5
    43b4:	60 92 57 40 	sts	0x4057, r6
    43b8:	70 92 58 40 	sts	0x4058, r7
				appendFileLocation = i;
    43bc:	c9 01       	movw	r24, r18
    43be:	a0 e0       	ldi	r26, 0x00	; 0
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	80 93 c0 23 	sts	0x23C0, r24
    43c6:	90 93 c1 23 	sts	0x23C1, r25
    43ca:	a0 93 c2 23 	sts	0x23C2, r26
    43ce:	b0 93 c3 23 	sts	0x23C3, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    43d2:	aa 24       	eor	r10, r10
    43d4:	bb 24       	eor	r11, r11
    43d6:	54 01       	movw	r10, r8
    43d8:	99 24       	eor	r9, r9
    43da:	88 24       	eor	r8, r8
    43dc:	60 e0       	ldi	r22, 0x00	; 0
    43de:	70 e0       	ldi	r23, 0x00	; 0
    43e0:	84 2a       	or	r8, r20
    43e2:	95 2a       	or	r9, r21
    43e4:	a6 2a       	or	r10, r22
    43e6:	b7 2a       	or	r11, r23
    43e8:	80 92 4f 40 	sts	0x404F, r8
    43ec:	90 92 50 40 	sts	0x4050, r9
    43f0:	a0 92 51 40 	sts	0x4051, r10
    43f4:	b0 92 52 40 	sts	0x4052, r11
				fileSize = dir->fileSize;
    43f8:	f8 01       	movw	r30, r16
    43fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    43fc:	95 8d       	ldd	r25, Z+29	; 0x1d
    43fe:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4400:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4402:	80 93 39 40 	sts	0x4039, r24
    4406:	90 93 3a 40 	sts	0x403A, r25
    440a:	a0 93 3b 40 	sts	0x403B, r26
    440e:	b0 93 3c 40 	sts	0x403C, r27
			    return (dir);
    4412:	88 c0       	rjmp	.+272    	; 0x4524 <findFiles+0x24a>
			     TX_NEWLINE;
				 transmitString_F(PSTR("Deleting.."));
				 TX_NEWLINE;
				 TX_NEWLINE;
				 */
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    4414:	aa 24       	eor	r10, r10
    4416:	bb 24       	eor	r11, r11
    4418:	54 01       	movw	r10, r8
    441a:	99 24       	eor	r9, r9
    441c:	88 24       	eor	r8, r8
    441e:	ca 01       	movw	r24, r20
    4420:	a0 e0       	ldi	r26, 0x00	; 0
    4422:	b0 e0       	ldi	r27, 0x00	; 0
    4424:	88 2a       	or	r8, r24
    4426:	99 2a       	or	r9, r25
    4428:	aa 2a       	or	r10, r26
    442a:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    442c:	85 ee       	ldi	r24, 0xE5	; 229
    442e:	fb 01       	movw	r30, r22
    4430:	80 83       	st	Z, r24
				 SD_write_block (firstSector+sector,SDBuffer,512);
    4432:	c3 01       	movw	r24, r6
    4434:	b2 01       	movw	r22, r4
    4436:	40 ec       	ldi	r20, 0xC0	; 192
    4438:	51 e2       	ldi	r21, 0x21	; 33
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	32 e0       	ldi	r19, 0x02	; 2
    443e:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_write_block>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    4442:	f8 01       	movw	r30, r16
    4444:	44 8d       	ldd	r20, Z+28	; 0x1c
    4446:	55 8d       	ldd	r21, Z+29	; 0x1d
    4448:	66 8d       	ldd	r22, Z+30	; 0x1e
    444a:	77 8d       	ldd	r23, Z+31	; 0x1f
    444c:	80 e0       	ldi	r24, 0x00	; 0
    444e:	0e 94 13 21 	call	0x4226	; 0x4226 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    4452:	82 e0       	ldi	r24, 0x02	; 2
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	a9 01       	movw	r20, r18
    445c:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <getSetFreeCluster>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
				 if(firstCluster < cluster)
    4464:	88 16       	cp	r8, r24
    4466:	99 06       	cpc	r9, r25
    4468:	aa 06       	cpc	r10, r26
    446a:	bb 06       	cpc	r11, r27
    446c:	30 f4       	brcc	.+12     	; 0x447a <findFiles+0x1a0>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	61 e0       	ldi	r22, 0x01	; 1
    4472:	a5 01       	movw	r20, r10
    4474:	94 01       	movw	r18, r8
    4476:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    447a:	c5 01       	movw	r24, r10
    447c:	b4 01       	movw	r22, r8
    447e:	40 e0       	ldi	r20, 0x00	; 0
    4480:	00 e0       	ldi	r16, 0x00	; 0
    4482:	10 e0       	ldi	r17, 0x00	; 0
    4484:	98 01       	movw	r18, r16
    4486:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
    448a:	6b 01       	movw	r12, r22
    448c:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    448e:	c5 01       	movw	r24, r10
    4490:	b4 01       	movw	r22, r8
    4492:	41 e0       	ldi	r20, 0x01	; 1
    4494:	00 e0       	ldi	r16, 0x00	; 0
    4496:	10 e0       	ldi	r17, 0x00	; 0
    4498:	98 01       	movw	r18, r16
    449a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    449e:	f7 ef       	ldi	r31, 0xF7	; 247
    44a0:	cf 16       	cp	r12, r31
    44a2:	ff ef       	ldi	r31, 0xFF	; 255
    44a4:	df 06       	cpc	r13, r31
    44a6:	ff ef       	ldi	r31, 0xFF	; 255
    44a8:	ef 06       	cpc	r14, r31
    44aa:	ff e0       	ldi	r31, 0x0F	; 15
    44ac:	ff 06       	cpc	r15, r31
    44ae:	c0 f5       	brcc	.+112    	; 0x4520 <findFiles+0x246>
					   {//transmitString_F(PSTR("File deleted!"));
						   return 0;}
					firstCluster = nextCluster;
    44b0:	46 01       	movw	r8, r12
    44b2:	57 01       	movw	r10, r14
    44b4:	e2 cf       	rjmp	.-60     	; 0x447a <findFiles+0x1a0>
    44b6:	9a 01       	movw	r18, r20
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    44b8:	20 5e       	subi	r18, 0xE0	; 224
    44ba:	3f 4f       	sbci	r19, 0xFF	; 255
    44bc:	80 91 3d 40 	lds	r24, 0x403D
    44c0:	90 91 3e 40 	lds	r25, 0x403E
    44c4:	28 17       	cp	r18, r24
    44c6:	39 07       	cpc	r19, r25
    44c8:	08 f4       	brcc	.+2      	; 0x44cc <findFiles+0x1f2>
    44ca:	47 cf       	rjmp	.-370    	; 0x435a <findFiles+0x80>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    44cc:	08 94       	sec
    44ce:	81 1c       	adc	r8, r1
    44d0:	91 1c       	adc	r9, r1
    44d2:	a1 1c       	adc	r10, r1
    44d4:	b1 1c       	adc	r11, r1
    44d6:	80 91 47 40 	lds	r24, 0x4047
    44da:	90 91 48 40 	lds	r25, 0x4048
    44de:	a0 e0       	ldi	r26, 0x00	; 0
    44e0:	b0 e0       	ldi	r27, 0x00	; 0
    44e2:	88 16       	cp	r8, r24
    44e4:	99 06       	cpc	r9, r25
    44e6:	aa 06       	cpc	r10, r26
    44e8:	bb 06       	cpc	r11, r27
    44ea:	08 f4       	brcc	.+2      	; 0x44ee <findFiles+0x214>
    44ec:	25 cf       	rjmp	.-438    	; 0x4338 <findFiles+0x5e>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    44ee:	c7 01       	movw	r24, r14
    44f0:	b6 01       	movw	r22, r12
    44f2:	40 e0       	ldi	r20, 0x00	; 0
    44f4:	00 e0       	ldi	r16, 0x00	; 0
    44f6:	10 e0       	ldi	r17, 0x00	; 0
    44f8:	98 01       	movw	r18, r16
    44fa:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
    44fe:	6b 01       	movw	r12, r22
    4500:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    4502:	87 ef       	ldi	r24, 0xF7	; 247
    4504:	c8 16       	cp	r12, r24
    4506:	8f ef       	ldi	r24, 0xFF	; 255
    4508:	d8 06       	cpc	r13, r24
    450a:	8f ef       	ldi	r24, 0xFF	; 255
    450c:	e8 06       	cpc	r14, r24
    450e:	8f e0       	ldi	r24, 0x0F	; 15
    4510:	f8 06       	cpc	r15, r24
    4512:	30 f4       	brcc	.+12     	; 0x4520 <findFiles+0x246>
   	 return 0;
   if(cluster == 0) 
    4514:	c1 14       	cp	r12, r1
    4516:	d1 04       	cpc	r13, r1
    4518:	e1 04       	cpc	r14, r1
    451a:	f1 04       	cpc	r15, r1
    451c:	09 f0       	breq	.+2      	; 0x4520 <findFiles+0x246>
    451e:	00 cf       	rjmp	.-512    	; 0x4320 <findFiles+0x46>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    4520:	00 e0       	ldi	r16, 0x00	; 0
    4522:	10 e0       	ldi	r17, 0x00	; 0
   if(cluster == 0) 
   {//transmitString_F(PSTR("Error in getting cluster"));  
	   return 0;}
 }
return 0;
}
    4524:	c8 01       	movw	r24, r16
    4526:	26 96       	adiw	r28, 0x06	; 6
    4528:	cd bf       	out	0x3d, r28	; 61
    452a:	de bf       	out	0x3e, r29	; 62
    452c:	df 91       	pop	r29
    452e:	cf 91       	pop	r28
    4530:	1f 91       	pop	r17
    4532:	0f 91       	pop	r16
    4534:	ff 90       	pop	r15
    4536:	ef 90       	pop	r14
    4538:	df 90       	pop	r13
    453a:	cf 90       	pop	r12
    453c:	bf 90       	pop	r11
    453e:	af 90       	pop	r10
    4540:	9f 90       	pop	r9
    4542:	8f 90       	pop	r8
    4544:	7f 90       	pop	r7
    4546:	6f 90       	pop	r6
    4548:	5f 90       	pop	r5
    454a:	4f 90       	pop	r4
    454c:	3f 90       	pop	r3
    454e:	2f 90       	pop	r2
    4550:	08 95       	ret

00004552 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    4552:	cf 93       	push	r28
    4554:	df 93       	push	r29
    4556:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    4558:	0e 94 02 20 	call	0x4004	; 0x4004 <convertFileName>
  if(error) return;
    455c:	88 23       	and	r24, r24
    455e:	21 f4       	brne	.+8      	; 0x4568 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    4560:	82 e0       	ldi	r24, 0x02	; 2
    4562:	be 01       	movw	r22, r28
    4564:	0e 94 6d 21 	call	0x42da	; 0x42da <findFiles>
}
    4568:	df 91       	pop	r29
    456a:	cf 91       	pop	r28
    456c:	08 95       	ret

0000456e <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    456e:	8f 92       	push	r8
    4570:	9f 92       	push	r9
    4572:	af 92       	push	r10
    4574:	bf 92       	push	r11
    4576:	cf 92       	push	r12
    4578:	df 92       	push	r13
    457a:	ef 92       	push	r14
    457c:	ff 92       	push	r15
    457e:	0f 93       	push	r16
    4580:	1f 93       	push	r17
    4582:	cf 93       	push	r28
    4584:	df 93       	push	r29
    4586:	18 2f       	mov	r17, r24
    4588:	eb 01       	movw	r28, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    458a:	cb 01       	movw	r24, r22
    458c:	0e 94 02 20 	call	0x4004	; 0x4004 <convertFileName>
if(error) return 2;
    4590:	88 23       	and	r24, r24
    4592:	09 f0       	breq	.+2      	; 0x4596 <readFile+0x28>
    4594:	4a c0       	rjmp	.+148    	; 0x462a <readFile+0xbc>

dir = findFiles (GET_FILE, fileName); //get the file location
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	be 01       	movw	r22, r28
    459a:	0e 94 6d 21 	call	0x42da	; 0x42da <findFiles>
    459e:	fc 01       	movw	r30, r24
if(dir == 0) 
    45a0:	00 97       	sbiw	r24, 0x00	; 0
    45a2:	29 f4       	brne	.+10     	; 0x45ae <readFile+0x40>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	11 23       	and	r17, r17
    45a8:	09 f4       	brne	.+2      	; 0x45ac <readFile+0x3e>
    45aa:	42 c0       	rjmp	.+132    	; 0x4630 <readFile+0xc2>
    45ac:	3c c0       	rjmp	.+120    	; 0x4626 <readFile+0xb8>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    45ae:	11 30       	cpi	r17, 0x01	; 1
    45b0:	f1 f1       	breq	.+124    	; 0x462e <readFile+0xc0>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    45b2:	c4 88       	ldd	r12, Z+20	; 0x14
    45b4:	d5 88       	ldd	r13, Z+21	; 0x15
    45b6:	ee 24       	eor	r14, r14
    45b8:	ff 24       	eor	r15, r15
    45ba:	76 01       	movw	r14, r12
    45bc:	dd 24       	eor	r13, r13
    45be:	cc 24       	eor	r12, r12
    45c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    45c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    45c4:	a0 e0       	ldi	r26, 0x00	; 0
    45c6:	b0 e0       	ldi	r27, 0x00	; 0
    45c8:	c8 2a       	or	r12, r24
    45ca:	d9 2a       	or	r13, r25
    45cc:	ea 2a       	or	r14, r26
    45ce:	fb 2a       	or	r15, r27
TX_NEWLINE;
TX_NEWLINE;
*/
while(1)
{
  firstSector = getFirstSector (cluster);
    45d0:	c7 01       	movw	r24, r14
    45d2:	b6 01       	movw	r22, r12
    45d4:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <getFirstSector>
    45d8:	4b 01       	movw	r8, r22
    45da:	5c 01       	movw	r10, r24

  for(j=0; j<sectorPerCluster; j++)
    45dc:	c0 e0       	ldi	r28, 0x00	; 0
    45de:	0b c0       	rjmp	.+22     	; 0x45f6 <readFile+0x88>
  {
    SD_read_block(firstSector + j,FRAMReadBuffer);
    45e0:	c5 01       	movw	r24, r10
    45e2:	b4 01       	movw	r22, r8
    45e4:	6c 0f       	add	r22, r28
    45e6:	71 1d       	adc	r23, r1
    45e8:	81 1d       	adc	r24, r1
    45ea:	91 1d       	adc	r25, r1
    45ec:	48 ec       	ldi	r20, 0xC8	; 200
    45ee:	53 e2       	ldi	r21, 0x23	; 35
    45f0:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
*/
while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    45f4:	cf 5f       	subi	r28, 0xFF	; 255
    45f6:	80 91 47 40 	lds	r24, 0x4047
    45fa:	90 91 48 40 	lds	r25, 0x4048
    45fe:	2c 2f       	mov	r18, r28
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	28 17       	cp	r18, r24
    4604:	39 07       	cpc	r19, r25
    4606:	60 f3       	brcs	.-40     	; 0x45e0 <readFile+0x72>
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
	*/
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    4608:	c7 01       	movw	r24, r14
    460a:	b6 01       	movw	r22, r12
    460c:	40 e0       	ldi	r20, 0x00	; 0
    460e:	00 e0       	ldi	r16, 0x00	; 0
    4610:	10 e0       	ldi	r17, 0x00	; 0
    4612:	98 01       	movw	r18, r16
    4614:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
    4618:	6b 01       	movw	r12, r22
    461a:	7c 01       	movw	r14, r24
  if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
    461c:	61 15       	cp	r22, r1
    461e:	71 05       	cpc	r23, r1
    4620:	81 05       	cpc	r24, r1
    4622:	91 05       	cpc	r25, r1
    4624:	a9 f6       	brne	.-86     	; 0x45d0 <readFile+0x62>
	  return 0;}
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	03 c0       	rjmp	.+6      	; 0x4630 <readFile+0xc2>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
//unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    462a:	82 e0       	ldi	r24, 0x02	; 2
    462c:	01 c0       	rjmp	.+2      	; 0x4630 <readFile+0xc2>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    462e:	81 e0       	ldi	r24, 0x01	; 1
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
	  return 0;}
}
return 0;
}
    4630:	df 91       	pop	r29
    4632:	cf 91       	pop	r28
    4634:	1f 91       	pop	r17
    4636:	0f 91       	pop	r16
    4638:	ff 90       	pop	r15
    463a:	ef 90       	pop	r14
    463c:	df 90       	pop	r13
    463e:	cf 90       	pop	r12
    4640:	bf 90       	pop	r11
    4642:	af 90       	pop	r10
    4644:	9f 90       	pop	r9
    4646:	8f 90       	pop	r8
    4648:	08 95       	ret

0000464a <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
    464a:	2f 92       	push	r2
    464c:	3f 92       	push	r3
    464e:	4f 92       	push	r4
    4650:	5f 92       	push	r5
    4652:	6f 92       	push	r6
    4654:	7f 92       	push	r7
    4656:	8f 92       	push	r8
    4658:	9f 92       	push	r9
    465a:	af 92       	push	r10
    465c:	bf 92       	push	r11
    465e:	cf 92       	push	r12
    4660:	df 92       	push	r13
    4662:	ef 92       	push	r14
    4664:	ff 92       	push	r15
    4666:	0f 93       	push	r16
    4668:	1f 93       	push	r17
    466a:	cf 93       	push	r28
    466c:	df 93       	push	r29
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
    4672:	27 97       	sbiw	r28, 0x07	; 7
    4674:	cd bf       	out	0x3d, r28	; 61
    4676:	de bf       	out	0x3e, r29	; 62
    4678:	8d 83       	std	Y+5, r24	; 0x05
    467a:	9e 83       	std	Y+6, r25	; 0x06
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	6d 81       	ldd	r22, Y+5	; 0x05
    4680:	7e 81       	ldd	r23, Y+6	; 0x06
    4682:	0e 94 b7 22 	call	0x456e	; 0x456e <readFile>

if(j == 1) 
    4686:	81 30       	cpi	r24, 0x01	; 1
    4688:	09 f0       	breq	.+2      	; 0x468c <writeFile+0x42>
    468a:	6b c0       	rjmp	.+214    	; 0x4762 <writeFile+0x118>
{
  //transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
  cluster = appendStartCluster;
    468c:	c0 90 4f 40 	lds	r12, 0x404F
    4690:	d0 90 50 40 	lds	r13, 0x4050
    4694:	e0 90 51 40 	lds	r14, 0x4051
    4698:	f0 90 52 40 	lds	r15, 0x4052
  clusterCount=0;
    469c:	88 24       	eor	r8, r8
    469e:	99 24       	eor	r9, r9
    46a0:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    46a2:	c7 01       	movw	r24, r14
    46a4:	b6 01       	movw	r22, r12
    46a6:	40 e0       	ldi	r20, 0x00	; 0
    46a8:	00 e0       	ldi	r16, 0x00	; 0
    46aa:	10 e0       	ldi	r17, 0x00	; 0
    46ac:	98 01       	movw	r18, r16
    46ae:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
    46b2:	dc 01       	movw	r26, r24
    46b4:	cb 01       	movw	r24, r22
    if(nextCluster == EOF) break;
    46b6:	8f 3f       	cpi	r24, 0xFF	; 255
    46b8:	2f ef       	ldi	r18, 0xFF	; 255
    46ba:	92 07       	cpc	r25, r18
    46bc:	2f ef       	ldi	r18, 0xFF	; 255
    46be:	a2 07       	cpc	r26, r18
    46c0:	2f e0       	ldi	r18, 0x0F	; 15
    46c2:	b2 07       	cpc	r27, r18
    46c4:	41 f0       	breq	.+16     	; 0x46d6 <writeFile+0x8c>
	cluster = nextCluster;
	clusterCount++;
    46c6:	08 94       	sec
    46c8:	81 1c       	adc	r8, r1
    46ca:	91 1c       	adc	r9, r1
    46cc:	a1 1c       	adc	r10, r1
    46ce:	b1 1c       	adc	r11, r1
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    46d0:	6c 01       	movw	r12, r24
    46d2:	7d 01       	movw	r14, r26
	clusterCount++;
  }
    46d4:	e6 cf       	rjmp	.-52     	; 0x46a2 <writeFile+0x58>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    46d6:	20 91 47 40 	lds	r18, 0x4047
    46da:	30 91 48 40 	lds	r19, 0x4048
    46de:	60 91 3d 40 	lds	r22, 0x403D
    46e2:	70 91 3e 40 	lds	r23, 0x403E
    46e6:	00 91 3d 40 	lds	r16, 0x403D
    46ea:	10 91 3e 40 	lds	r17, 0x403E
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	40 e0       	ldi	r20, 0x00	; 0
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    46fa:	a5 01       	movw	r20, r10
    46fc:	94 01       	movw	r18, r8
    46fe:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    4702:	ab 01       	movw	r20, r22
    4704:	bc 01       	movw	r22, r24
    4706:	80 91 39 40 	lds	r24, 0x4039
    470a:	90 91 3a 40 	lds	r25, 0x403A
    470e:	a0 91 3b 40 	lds	r26, 0x403B
    4712:	b0 91 3c 40 	lds	r27, 0x403C
    4716:	84 1b       	sub	r24, r20
    4718:	95 0b       	sbc	r25, r21
    471a:	a6 0b       	sbc	r26, r22
    471c:	b7 0b       	sbc	r27, r23
    471e:	98 01       	movw	r18, r16
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	50 e0       	ldi	r21, 0x00	; 0
    4724:	bc 01       	movw	r22, r24
    4726:	cd 01       	movw	r24, r26
    4728:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    472c:	82 2e       	mov	r8, r18
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    472e:	b6 01       	movw	r22, r12
    4730:	c7 01       	movw	r24, r14
    4732:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <getFirstSector>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	99 24       	eor	r9, r9
    473c:	88 0e       	add	r8, r24
    473e:	99 1e       	adc	r9, r25
	  SD_read_block (startBlock,SDBuffer);
    4740:	b4 01       	movw	r22, r8
    4742:	80 e0       	ldi	r24, 0x00	; 0
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	40 ec       	ldi	r20, 0xC0	; 192
    4748:	51 e2       	ldi	r21, 0x21	; 33
    474a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
	  i = fileSize % bytesPerSector;
    474e:	80 91 3d 40 	lds	r24, 0x403D
    4752:	90 91 3e 40 	lds	r25, 0x403E
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0, startBlock=0;  //value 0 is assigned just to avoid warning in compilation
    4756:	1b 82       	std	Y+3, r1	; 0x03
    4758:	1c 82       	std	Y+4, r1	; 0x04
    475a:	19 82       	std	Y+1, r1	; 0x01
    475c:	1a 82       	std	Y+2, r1	; 0x02
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    475e:	11 e0       	ldi	r17, 0x01	; 1
    4760:	42 c0       	rjmp	.+132    	; 0x47e6 <writeFile+0x19c>
}
else if(j == 2) 
    4762:	82 30       	cpi	r24, 0x02	; 2
    4764:	09 f4       	brne	.+2      	; 0x4768 <writeFile+0x11e>
    4766:	7d c1       	rjmp	.+762    	; 0x4a62 <writeFile+0x418>
else
{
 // TX_NEWLINE;
 // transmitString_F(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    4768:	82 e0       	ldi	r24, 0x02	; 2
    476a:	60 e0       	ldi	r22, 0x00	; 0
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	30 e0       	ldi	r19, 0x00	; 0
    4770:	a9 01       	movw	r20, r18
    4772:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <getSetFreeCluster>
  if(cluster > totalClusters)
    4776:	00 91 3f 40 	lds	r16, 0x403F
    477a:	10 91 40 40 	lds	r17, 0x4040
    477e:	20 91 41 40 	lds	r18, 0x4041
    4782:	30 91 42 40 	lds	r19, 0x4042
    4786:	06 17       	cp	r16, r22
    4788:	17 07       	cpc	r17, r23
    478a:	28 07       	cpc	r18, r24
    478c:	39 07       	cpc	r19, r25
    478e:	40 f4       	brcc	.+16     	; 0x47a0 <writeFile+0x156>
     cluster = rootCluster;
    4790:	60 91 43 40 	lds	r22, 0x4043
    4794:	70 91 44 40 	lds	r23, 0x4044
    4798:	80 91 45 40 	lds	r24, 0x4045
    479c:	90 91 46 40 	lds	r25, 0x4046

  cluster = searchNextFreeCluster(cluster);
    47a0:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <searchNextFreeCluster>
    47a4:	6b 01       	movw	r12, r22
    47a6:	7c 01       	movw	r14, r24
   if(cluster == 0)
    47a8:	61 15       	cp	r22, r1
    47aa:	71 05       	cpc	r23, r1
    47ac:	81 05       	cpc	r24, r1
    47ae:	91 05       	cpc	r25, r1
    47b0:	09 f4       	brne	.+2      	; 0x47b4 <writeFile+0x16a>
    47b2:	59 c1       	rjmp	.+690    	; 0x4a66 <writeFile+0x41c>
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  */
	  return 2;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    47b4:	41 e0       	ldi	r20, 0x01	; 1
    47b6:	0f ef       	ldi	r16, 0xFF	; 255
    47b8:	1f ef       	ldi	r17, 0xFF	; 255
    47ba:	2f ef       	ldi	r18, 0xFF	; 255
    47bc:	3f e0       	ldi	r19, 0x0F	; 15
    47be:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    47c2:	e9 82       	std	Y+1, r14	; 0x01
    47c4:	fa 82       	std	Y+2, r15	; 0x02
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    47c6:	cb 82       	std	Y+3, r12	; 0x03
    47c8:	dc 82       	std	Y+4, r13	; 0x04
  fileSize = 0;
    47ca:	10 92 39 40 	sts	0x4039, r1
    47ce:	10 92 3a 40 	sts	0x403A, r1
    47d2:	10 92 3b 40 	sts	0x403B, r1
    47d6:	10 92 3c 40 	sts	0x403C, r1
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    47da:	c7 01       	movw	r24, r14
    47dc:	b6 01       	movw	r22, r12
    47de:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <getFirstSector>
    47e2:	4b 01       	movw	r8, r22
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    47e4:	10 e0       	ldi	r17, 0x00	; 0
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid
	 */ 
	// {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	  // i=0;
	  fileSize += 512;
    47e6:	80 91 39 40 	lds	r24, 0x4039
    47ea:	90 91 3a 40 	lds	r25, 0x403A
    47ee:	a0 91 3b 40 	lds	r26, 0x403B
    47f2:	b0 91 3c 40 	lds	r27, 0x403C
    47f6:	80 50       	subi	r24, 0x00	; 0
    47f8:	9e 4f       	sbci	r25, 0xFE	; 254
    47fa:	af 4f       	sbci	r26, 0xFF	; 255
    47fc:	bf 4f       	sbci	r27, 0xFF	; 255
    47fe:	80 93 39 40 	sts	0x4039, r24
    4802:	90 93 3a 40 	sts	0x403A, r25
    4806:	a0 93 3b 40 	sts	0x403B, r26
    480a:	b0 93 3c 40 	sts	0x403C, r27
	   SD_write_block (startBlock,FRAMReadBuffer,512);
    480e:	b4 01       	movw	r22, r8
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	48 ec       	ldi	r20, 0xC8	; 200
    4816:	53 e2       	ldi	r21, 0x23	; 35
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	32 e0       	ldi	r19, 0x02	; 2
    481c:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_write_block>
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
    4820:	80 91 47 40 	lds	r24, 0x4047
    4824:	90 91 48 40 	lds	r25, 0x4048

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    4828:	82 e0       	ldi	r24, 0x02	; 2
    482a:	61 e0       	ldi	r22, 0x01	; 1
    482c:	a7 01       	movw	r20, r14
    482e:	96 01       	movw	r18, r12
    4830:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <getSetFreeCluster>

//error = getDateTime_FAT();    //get current date & time from the RTC
//if(error) { dateFAT = 0; timeFAT = 0;}

if(appendFile)  //executes this loop if file is to be appended
    4834:	11 23       	and	r17, r17
    4836:	f1 f1       	breq	.+124    	; 0x48b4 <writeFile+0x26a>
{
  SD_read_block (appendFileSector,SDBuffer);    
    4838:	60 91 55 40 	lds	r22, 0x4055
    483c:	70 91 56 40 	lds	r23, 0x4056
    4840:	80 91 57 40 	lds	r24, 0x4057
    4844:	90 91 58 40 	lds	r25, 0x4058
    4848:	40 ec       	ldi	r20, 0xC0	; 192
    484a:	51 e2       	ldi	r21, 0x21	; 33
    484c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
  dir = (struct dir_Structure *) &SDBuffer[appendFileLocation]; 
    4850:	e0 91 c0 23 	lds	r30, 0x23C0
    4854:	f0 91 c1 23 	lds	r31, 0x23C1
    4858:	e0 54       	subi	r30, 0x40	; 64
    485a:	fe 4d       	sbci	r31, 0xDE	; 222

  dir->lastAccessDate = 0;   //date of last access ignored
    485c:	12 8a       	std	Z+18, r1	; 0x12
    485e:	13 8a       	std	Z+19, r1	; 0x13
  //dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
  //dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
  extraMemory = fileSize - dir->fileSize;
    4860:	80 91 39 40 	lds	r24, 0x4039
    4864:	90 91 3a 40 	lds	r25, 0x403A
    4868:	a0 91 3b 40 	lds	r26, 0x403B
    486c:	b0 91 3c 40 	lds	r27, 0x403C
    4870:	44 8d       	ldd	r20, Z+28	; 0x1c
    4872:	55 8d       	ldd	r21, Z+29	; 0x1d
    4874:	66 8d       	ldd	r22, Z+30	; 0x1e
    4876:	77 8d       	ldd	r23, Z+31	; 0x1f
    4878:	6c 01       	movw	r12, r24
    487a:	7d 01       	movw	r14, r26
    487c:	c4 1a       	sub	r12, r20
    487e:	d5 0a       	sbc	r13, r21
    4880:	e6 0a       	sbc	r14, r22
    4882:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    4884:	84 8f       	std	Z+28, r24	; 0x1c
    4886:	95 8f       	std	Z+29, r25	; 0x1d
    4888:	a6 8f       	std	Z+30, r26	; 0x1e
    488a:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_write_block (appendFileSector,SDBuffer,512);
    488c:	60 91 55 40 	lds	r22, 0x4055
    4890:	70 91 56 40 	lds	r23, 0x4056
    4894:	80 91 57 40 	lds	r24, 0x4057
    4898:	90 91 58 40 	lds	r25, 0x4058
    489c:	40 ec       	ldi	r20, 0xC0	; 192
    489e:	51 e2       	ldi	r21, 0x21	; 33
    48a0:	20 e0       	ldi	r18, 0x00	; 0
    48a2:	32 e0       	ldi	r19, 0x02	; 2
    48a4:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_write_block>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	b7 01       	movw	r22, r14
    48ac:	a6 01       	movw	r20, r12
    48ae:	0e 94 13 21 	call	0x4226	; 0x4226 <freeMemoryUpdate>
    48b2:	db c0       	rjmp	.+438    	; 0x4a6a <writeFile+0x420>
  return 0;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    48b4:	80 90 43 40 	lds	r8, 0x4043
    48b8:	90 90 44 40 	lds	r9, 0x4044
    48bc:	a0 90 45 40 	lds	r10, 0x4045
    48c0:	b0 90 46 40 	lds	r11, 0x4046
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    48c4:	80 e0       	ldi	r24, 0x00	; 0

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    48c6:	e0 e2       	ldi	r30, 0x20	; 32
    48c8:	3e 2e       	mov	r3, r30
    48ca:	28 2e       	mov	r2, r24
    48cc:	02 c0       	rjmp	.+4      	; 0x48d2 <writeFile+0x288>
      }
   }
   if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
	   return 4;}
   
   prevCluster = cluster;
    48ce:	46 01       	movw	r8, r12
    48d0:	57 01       	movw	r10, r14

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    48d2:	c5 01       	movw	r24, r10
    48d4:	b4 01       	movw	r22, r8
    48d6:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <getFirstSector>
    48da:	2b 01       	movw	r4, r22
    48dc:	3c 01       	movw	r6, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
    48de:	80 e0       	ldi	r24, 0x00	; 0
    48e0:	2f 82       	std	Y+7, r2	; 0x07
    48e2:	28 2e       	mov	r2, r24
    48e4:	7b c0       	rjmp	.+246    	; 0x49dc <writeFile+0x392>
   {
     SD_read_block (firstSector + sector,SDBuffer);
    48e6:	73 01       	movw	r14, r6
    48e8:	62 01       	movw	r12, r4
    48ea:	c2 0c       	add	r12, r2
    48ec:	d1 1c       	adc	r13, r1
    48ee:	e1 1c       	adc	r14, r1
    48f0:	f1 1c       	adc	r15, r1
    48f2:	c7 01       	movw	r24, r14
    48f4:	b6 01       	movw	r22, r12
    48f6:	40 ec       	ldi	r20, 0xC0	; 192
    48f8:	51 e2       	ldi	r21, 0x21	; 33
    48fa:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <SD_read_block>
	

     for(i=0; i<bytesPerSector; i+=32)
    48fe:	00 e2       	ldi	r16, 0x20	; 32
    4900:	10 e0       	ldi	r17, 0x00	; 0
    4902:	4f 81       	ldd	r20, Y+7	; 0x07
    4904:	5f c0       	rjmp	.+190    	; 0x49c4 <writeFile+0x37a>
     {
	    dir = (struct dir_Structure *) &SDBuffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    4906:	44 23       	and	r20, r20
    4908:	09 f0       	breq	.+2      	; 0x490c <writeFile+0x2c2>
    490a:	af c0       	rjmp	.+350    	; 0x4a6a <writeFile+0x420>
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    490c:	b8 01       	movw	r22, r16
    490e:	60 56       	subi	r22, 0x60	; 96
    4910:	7e 4d       	sbci	r23, 0xDE	; 222
    4912:	c8 01       	movw	r24, r16
    4914:	80 54       	subi	r24, 0x40	; 64
    4916:	9e 4d       	sbci	r25, 0xDE	; 222
    4918:	fc 01       	movw	r30, r24
    491a:	b0 97       	sbiw	r30, 0x20	; 32
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    491c:	20 81       	ld	r18, Z
    491e:	22 23       	and	r18, r18
    4920:	21 f0       	breq	.+8      	; 0x492a <writeFile+0x2e0>
    4922:	25 3e       	cpi	r18, 0xE5	; 229
    4924:	09 f0       	breq	.+2      	; 0x4928 <writeFile+0x2de>
    4926:	4c c0       	rjmp	.+152    	; 0x49c0 <writeFile+0x376>
    4928:	01 c0       	rjmp	.+2      	; 0x492c <writeFile+0x2e2>
    492a:	40 e0       	ldi	r20, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    492c:	a4 2f       	mov	r26, r20
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	2d 81       	ldd	r18, Y+5	; 0x05
    4932:	3e 81       	ldd	r19, Y+6	; 0x06
    4934:	2a 0f       	add	r18, r26
    4936:	3b 1f       	adc	r19, r27
    4938:	f9 01       	movw	r30, r18
    493a:	20 81       	ld	r18, Z
    493c:	fb 01       	movw	r30, r22
    493e:	ea 0f       	add	r30, r26
    4940:	fb 1f       	adc	r31, r27
    4942:	20 83       	st	Z, r18
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    4944:	4f 5f       	subi	r20, 0xFF	; 255
    4946:	4b 30       	cpi	r20, 0x0B	; 11
    4948:	89 f7       	brne	.-30     	; 0x492c <writeFile+0x2e2>
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    494a:	fc 01       	movw	r30, r24
    494c:	75 97       	sbiw	r30, 0x15	; 21

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    494e:	30 82       	st	Z, r3
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4950:	fc 01       	movw	r30, r24
    4952:	74 97       	sbiw	r30, 0x14	; 20
        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
    4954:	10 82       	st	Z, r1
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4956:	fc 01       	movw	r30, r24
    4958:	73 97       	sbiw	r30, 0x13	; 19
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
    495a:	10 82       	st	Z, r1
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    495c:	fc 01       	movw	r30, r24
    495e:	3e 97       	sbiw	r30, 0x0e	; 14
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
		  //dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
    4960:	10 82       	st	Z, r1
    4962:	11 82       	std	Z+1, r1	; 0x01
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4964:	fc 01       	movw	r30, r24
    4966:	3c 97       	sbiw	r30, 0x0c	; 12
		  //dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
    4968:	29 81       	ldd	r18, Y+1	; 0x01
    496a:	3a 81       	ldd	r19, Y+2	; 0x02
    496c:	20 83       	st	Z, r18
    496e:	31 83       	std	Z+1, r19	; 0x01
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    4970:	fc 01       	movw	r30, r24
    4972:	36 97       	sbiw	r30, 0x06	; 6
		  //dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
		  dir->lastAccessDate = 0;   	//date of last access ignored
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
    4974:	ab 81       	ldd	r26, Y+3	; 0x03
    4976:	bc 81       	ldd	r27, Y+4	; 0x04
    4978:	a0 83       	st	Z, r26
    497a:	b1 83       	std	Z+1, r27	; 0x01
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: 1 - invalid filename, 2 - no free cluster, 3 - end of cluster chain, 4 - error in getting cluster
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
    497c:	fc 01       	movw	r30, r24
    497e:	34 97       	sbiw	r30, 0x04	; 4
		  dir->lastAccessDate = 0;   	//date of last access ignored
		  //dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
		  //dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;
    4980:	80 91 39 40 	lds	r24, 0x4039
    4984:	90 91 3a 40 	lds	r25, 0x403A
    4988:	a0 91 3b 40 	lds	r26, 0x403B
    498c:	b0 91 3c 40 	lds	r27, 0x403C
    4990:	80 83       	st	Z, r24
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	a2 83       	std	Z+2, r26	; 0x02
    4996:	b3 83       	std	Z+3, r27	; 0x03

		  SD_write_block (firstSector + sector,SDBuffer,512);
    4998:	c7 01       	movw	r24, r14
    499a:	b6 01       	movw	r22, r12
    499c:	40 ec       	ldi	r20, 0xC0	; 192
    499e:	51 e2       	ldi	r21, 0x21	; 33
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	32 e0       	ldi	r19, 0x02	; 2
    49a4:	0e 94 bd 19 	call	0x337a	; 0x337a <SD_write_block>

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    49a8:	40 91 39 40 	lds	r20, 0x4039
    49ac:	50 91 3a 40 	lds	r21, 0x403A
    49b0:	60 91 3b 40 	lds	r22, 0x403B
    49b4:	70 91 3c 40 	lds	r23, 0x403C
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	0e 94 13 21 	call	0x4226	; 0x4226 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_write_block (firstSector + sector,SDBuffer,512);
		  fileCreatedFlag = 1;
    49be:	41 e0       	ldi	r20, 0x01	; 1

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    49c0:	00 5e       	subi	r16, 0xE0	; 224
    49c2:	1f 4f       	sbci	r17, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_read_block (firstSector + sector,SDBuffer);
	

     for(i=0; i<bytesPerSector; i+=32)
    49c4:	20 91 3d 40 	lds	r18, 0x403D
    49c8:	30 91 3e 40 	lds	r19, 0x403E
    49cc:	c8 01       	movw	r24, r16
    49ce:	80 97       	sbiw	r24, 0x20	; 32
    49d0:	82 17       	cp	r24, r18
    49d2:	93 07       	cpc	r25, r19
    49d4:	08 f4       	brcc	.+2      	; 0x49d8 <writeFile+0x38e>
    49d6:	97 cf       	rjmp	.-210    	; 0x4906 <writeFile+0x2bc>
    49d8:	4f 83       	std	Y+7, r20	; 0x07

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    49da:	23 94       	inc	r2
    49dc:	20 91 47 40 	lds	r18, 0x4047
    49e0:	30 91 48 40 	lds	r19, 0x4048
    49e4:	82 2d       	mov	r24, r2
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	82 17       	cp	r24, r18
    49ea:	93 07       	cpc	r25, r19
    49ec:	08 f4       	brcc	.+2      	; 0x49f0 <writeFile+0x3a6>
    49ee:	7b cf       	rjmp	.-266    	; 0x48e6 <writeFile+0x29c>
    49f0:	2f 80       	ldd	r2, Y+7	; 0x07
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    49f2:	c5 01       	movw	r24, r10
    49f4:	b4 01       	movw	r22, r8
    49f6:	40 e0       	ldi	r20, 0x00	; 0
    49f8:	00 e0       	ldi	r16, 0x00	; 0
    49fa:	10 e0       	ldi	r17, 0x00	; 0
    49fc:	98 01       	movw	r18, r16
    49fe:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
    4a02:	6b 01       	movw	r12, r22
    4a04:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    4a06:	67 3f       	cpi	r22, 0xF7	; 247
    4a08:	bf ef       	ldi	r27, 0xFF	; 255
    4a0a:	7b 07       	cpc	r23, r27
    4a0c:	bf ef       	ldi	r27, 0xFF	; 255
    4a0e:	8b 07       	cpc	r24, r27
    4a10:	bf e0       	ldi	r27, 0x0F	; 15
    4a12:	9b 07       	cpc	r25, r27
    4a14:	f0 f0       	brcs	.+60     	; 0x4a52 <writeFile+0x408>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    4a16:	6f 3f       	cpi	r22, 0xFF	; 255
    4a18:	ef ef       	ldi	r30, 0xFF	; 255
    4a1a:	7e 07       	cpc	r23, r30
    4a1c:	ef ef       	ldi	r30, 0xFF	; 255
    4a1e:	8e 07       	cpc	r24, r30
    4a20:	ef e0       	ldi	r30, 0x0F	; 15
    4a22:	9e 07       	cpc	r25, r30
    4a24:	21 f5       	brne	.+72     	; 0x4a6e <writeFile+0x424>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    4a26:	c5 01       	movw	r24, r10
    4a28:	b4 01       	movw	r22, r8
    4a2a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <searchNextFreeCluster>
    4a2e:	6b 01       	movw	r12, r22
    4a30:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    4a32:	c5 01       	movw	r24, r10
    4a34:	b4 01       	movw	r22, r8
    4a36:	41 e0       	ldi	r20, 0x01	; 1
    4a38:	97 01       	movw	r18, r14
    4a3a:	86 01       	movw	r16, r12
    4a3c:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    4a40:	c7 01       	movw	r24, r14
    4a42:	b6 01       	movw	r22, r12
    4a44:	41 e0       	ldi	r20, 0x01	; 1
    4a46:	0f ef       	ldi	r16, 0xFF	; 255
    4a48:	1f ef       	ldi	r17, 0xFF	; 255
    4a4a:	2f ef       	ldi	r18, 0xFF	; 255
    4a4c:	3f e0       	ldi	r19, 0x0F	; 15
    4a4e:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <getSetNextCluster>
      {	
	    //transmitString_F(PSTR("End of Cluster Chain")); 
	    return 3;
      }
   }
   if(cluster == 0) {//transmitString_F(PSTR("Error in getting cluster")); 
    4a52:	c1 14       	cp	r12, r1
    4a54:	d1 04       	cpc	r13, r1
    4a56:	e1 04       	cpc	r14, r1
    4a58:	f1 04       	cpc	r15, r1
    4a5a:	09 f0       	breq	.+2      	; 0x4a5e <writeFile+0x414>
    4a5c:	38 cf       	rjmp	.-400    	; 0x48ce <writeFile+0x284>
	   return 4;}
    4a5e:	84 e0       	ldi	r24, 0x04	; 4
    4a60:	07 c0       	rjmp	.+14     	; 0x4a70 <writeFile+0x426>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
   return 1; //invalid file name
    4a62:	81 e0       	ldi	r24, 0x01	; 1
    4a64:	05 c0       	rjmp	.+10     	; 0x4a70 <writeFile+0x426>
   {
	   /*
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  */
	  return 2;
    4a66:	82 e0       	ldi	r24, 0x02	; 2
    4a68:	03 c0       	rjmp	.+6      	; 0x4a70 <writeFile+0x426>

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	01 c0       	rjmp	.+2      	; 0x4a70 <writeFile+0x426>
      } 

      else
      {	
	    //transmitString_F(PSTR("End of Cluster Chain")); 
	    return 3;
    4a6e:	83 e0       	ldi	r24, 0x03	; 3
   
   prevCluster = cluster;
 }
 
 return 0;
}
    4a70:	27 96       	adiw	r28, 0x07	; 7
    4a72:	cd bf       	out	0x3d, r28	; 61
    4a74:	de bf       	out	0x3e, r29	; 62
    4a76:	df 91       	pop	r29
    4a78:	cf 91       	pop	r28
    4a7a:	1f 91       	pop	r17
    4a7c:	0f 91       	pop	r16
    4a7e:	ff 90       	pop	r15
    4a80:	ef 90       	pop	r14
    4a82:	df 90       	pop	r13
    4a84:	cf 90       	pop	r12
    4a86:	bf 90       	pop	r11
    4a88:	af 90       	pop	r10
    4a8a:	9f 90       	pop	r9
    4a8c:	8f 90       	pop	r8
    4a8e:	7f 90       	pop	r7
    4a90:	6f 90       	pop	r6
    4a92:	5f 90       	pop	r5
    4a94:	4f 90       	pop	r4
    4a96:	3f 90       	pop	r3
    4a98:	2f 90       	pop	r2
    4a9a:	08 95       	ret

00004a9c <__muldi3>:
    4a9c:	a0 e3       	ldi	r26, 0x30	; 48
    4a9e:	b0 e0       	ldi	r27, 0x00	; 0
    4aa0:	e4 e5       	ldi	r30, 0x54	; 84
    4aa2:	f5 e2       	ldi	r31, 0x25	; 37
    4aa4:	0c 94 63 31 	jmp	0x62c6	; 0x62c6 <__prologue_saves__+0x4>
    4aa8:	29 8f       	std	Y+25, r18	; 0x19
    4aaa:	3a 8f       	std	Y+26, r19	; 0x1a
    4aac:	4b 8f       	std	Y+27, r20	; 0x1b
    4aae:	5c 8f       	std	Y+28, r21	; 0x1c
    4ab0:	6d 8f       	std	Y+29, r22	; 0x1d
    4ab2:	7e 8f       	std	Y+30, r23	; 0x1e
    4ab4:	8f 8f       	std	Y+31, r24	; 0x1f
    4ab6:	98 a3       	lds	r25, 0x58
    4ab8:	a9 8a       	std	Y+17, r10	; 0x11
    4aba:	ba 8a       	std	Y+18, r11	; 0x12
    4abc:	cb 8a       	std	Y+19, r12	; 0x13
    4abe:	dc 8a       	std	Y+20, r13	; 0x14
    4ac0:	ed 8a       	std	Y+21, r14	; 0x15
    4ac2:	fe 8a       	std	Y+22, r15	; 0x16
    4ac4:	0f 8b       	std	Y+23, r16	; 0x17
    4ac6:	18 8f       	std	Y+24, r17	; 0x18
    4ac8:	09 8d       	ldd	r16, Y+25	; 0x19
    4aca:	1a 8d       	ldd	r17, Y+26	; 0x1a
    4acc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4ace:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4ad0:	09 a3       	lds	r16, 0x59
    4ad2:	1a a3       	lds	r17, 0x5a
    4ad4:	2b a3       	lds	r18, 0x5b
    4ad6:	3c a3       	lds	r19, 0x5c
    4ad8:	68 01       	movw	r12, r16
    4ada:	79 01       	movw	r14, r18
    4adc:	8f ef       	ldi	r24, 0xFF	; 255
    4ade:	9f ef       	ldi	r25, 0xFF	; 255
    4ae0:	a0 e0       	ldi	r26, 0x00	; 0
    4ae2:	b0 e0       	ldi	r27, 0x00	; 0
    4ae4:	c8 22       	and	r12, r24
    4ae6:	d9 22       	and	r13, r25
    4ae8:	ea 22       	and	r14, r26
    4aea:	fb 22       	and	r15, r27
    4aec:	89 01       	movw	r16, r18
    4aee:	22 27       	eor	r18, r18
    4af0:	33 27       	eor	r19, r19
    4af2:	09 a7       	lds	r16, 0x79
    4af4:	1a a7       	lds	r17, 0x7a
    4af6:	2b a7       	lds	r18, 0x7b
    4af8:	3c a7       	lds	r19, 0x7c
    4afa:	09 89       	ldd	r16, Y+17	; 0x11
    4afc:	1a 89       	ldd	r17, Y+18	; 0x12
    4afe:	2b 89       	ldd	r18, Y+19	; 0x13
    4b00:	3c 89       	ldd	r19, Y+20	; 0x14
    4b02:	0d a3       	lds	r16, 0x5d
    4b04:	1e a3       	lds	r17, 0x5e
    4b06:	2f a3       	lds	r18, 0x5f
    4b08:	38 a7       	lds	r19, 0x78
    4b0a:	48 01       	movw	r8, r16
    4b0c:	59 01       	movw	r10, r18
    4b0e:	88 22       	and	r8, r24
    4b10:	99 22       	and	r9, r25
    4b12:	aa 22       	and	r10, r26
    4b14:	bb 22       	and	r11, r27
    4b16:	29 01       	movw	r4, r18
    4b18:	66 24       	eor	r6, r6
    4b1a:	77 24       	eor	r7, r7
    4b1c:	c5 01       	movw	r24, r10
    4b1e:	b4 01       	movw	r22, r8
    4b20:	a7 01       	movw	r20, r14
    4b22:	96 01       	movw	r18, r12
    4b24:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    4b28:	6d a7       	lds	r22, 0x7d
    4b2a:	7e a7       	lds	r23, 0x7e
    4b2c:	8f a7       	lds	r24, 0x7f
    4b2e:	98 ab       	sts	0x58, r25
    4b30:	c3 01       	movw	r24, r6
    4b32:	b2 01       	movw	r22, r4
    4b34:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    4b38:	6b 01       	movw	r12, r22
    4b3a:	7c 01       	movw	r14, r24
    4b3c:	c5 01       	movw	r24, r10
    4b3e:	b4 01       	movw	r22, r8
    4b40:	29 a5       	lds	r18, 0x69
    4b42:	3a a5       	lds	r19, 0x6a
    4b44:	4b a5       	lds	r20, 0x6b
    4b46:	5c a5       	lds	r21, 0x6c
    4b48:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    4b4c:	4b 01       	movw	r8, r22
    4b4e:	5c 01       	movw	r10, r24
    4b50:	c3 01       	movw	r24, r6
    4b52:	b2 01       	movw	r22, r4
    4b54:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    4b58:	ab 01       	movw	r20, r22
    4b5a:	bc 01       	movw	r22, r24
    4b5c:	c8 0c       	add	r12, r8
    4b5e:	d9 1c       	adc	r13, r9
    4b60:	ea 1c       	adc	r14, r10
    4b62:	fb 1c       	adc	r15, r11
    4b64:	0d a5       	lds	r16, 0x6d
    4b66:	1e a5       	lds	r17, 0x6e
    4b68:	2f a5       	lds	r18, 0x6f
    4b6a:	38 a9       	sts	0x48, r19
    4b6c:	c9 01       	movw	r24, r18
    4b6e:	aa 27       	eor	r26, r26
    4b70:	bb 27       	eor	r27, r27
    4b72:	c8 0e       	add	r12, r24
    4b74:	d9 1e       	adc	r13, r25
    4b76:	ea 1e       	adc	r14, r26
    4b78:	fb 1e       	adc	r15, r27
    4b7a:	c8 14       	cp	r12, r8
    4b7c:	d9 04       	cpc	r13, r9
    4b7e:	ea 04       	cpc	r14, r10
    4b80:	fb 04       	cpc	r15, r11
    4b82:	20 f4       	brcc	.+8      	; 0x4b8c <__muldi3+0xf0>
    4b84:	40 50       	subi	r20, 0x00	; 0
    4b86:	50 40       	sbci	r21, 0x00	; 0
    4b88:	6f 4f       	sbci	r22, 0xFF	; 255
    4b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b8c:	c7 01       	movw	r24, r14
    4b8e:	aa 27       	eor	r26, r26
    4b90:	bb 27       	eor	r27, r27
    4b92:	84 0f       	add	r24, r20
    4b94:	95 1f       	adc	r25, r21
    4b96:	a6 1f       	adc	r26, r22
    4b98:	b7 1f       	adc	r27, r23
    4b9a:	8d 83       	std	Y+5, r24	; 0x05
    4b9c:	9e 83       	std	Y+6, r25	; 0x06
    4b9e:	af 83       	std	Y+7, r26	; 0x07
    4ba0:	b8 87       	std	Y+8, r27	; 0x08
    4ba2:	76 01       	movw	r14, r12
    4ba4:	dd 24       	eor	r13, r13
    4ba6:	cc 24       	eor	r12, r12
    4ba8:	4d a5       	lds	r20, 0x6d
    4baa:	5e a5       	lds	r21, 0x6e
    4bac:	6f a5       	lds	r22, 0x6f
    4bae:	78 a9       	sts	0x48, r23
    4bb0:	60 70       	andi	r22, 0x00	; 0
    4bb2:	70 70       	andi	r23, 0x00	; 0
    4bb4:	c4 0e       	add	r12, r20
    4bb6:	d5 1e       	adc	r13, r21
    4bb8:	e6 1e       	adc	r14, r22
    4bba:	f7 1e       	adc	r15, r23
    4bbc:	c9 82       	std	Y+1, r12	; 0x01
    4bbe:	da 82       	std	Y+2, r13	; 0x02
    4bc0:	eb 82       	std	Y+3, r14	; 0x03
    4bc2:	fc 82       	std	Y+4, r15	; 0x04
    4bc4:	1c 2d       	mov	r17, r12
    4bc6:	0a 81       	ldd	r16, Y+2	; 0x02
    4bc8:	8b 80       	ldd	r8, Y+3	; 0x03
    4bca:	4c 80       	ldd	r4, Y+4	; 0x04
    4bcc:	8d 87       	std	Y+13, r24	; 0x0d
    4bce:	8e 81       	ldd	r24, Y+6	; 0x06
    4bd0:	8e 87       	std	Y+14, r24	; 0x0e
    4bd2:	8f 81       	ldd	r24, Y+7	; 0x07
    4bd4:	8f 87       	std	Y+15, r24	; 0x0f
    4bd6:	88 85       	ldd	r24, Y+8	; 0x08
    4bd8:	88 8b       	std	Y+16, r24	; 0x10
    4bda:	2d 89       	ldd	r18, Y+21	; 0x15
    4bdc:	3e 89       	ldd	r19, Y+22	; 0x16
    4bde:	4f 89       	ldd	r20, Y+23	; 0x17
    4be0:	58 8d       	ldd	r21, Y+24	; 0x18
    4be2:	69 a1       	lds	r22, 0x49
    4be4:	7a a1       	lds	r23, 0x4a
    4be6:	8b a1       	lds	r24, 0x4b
    4be8:	9c a1       	lds	r25, 0x4c
    4bea:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    4bee:	6b 01       	movw	r12, r22
    4bf0:	7c 01       	movw	r14, r24
    4bf2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4bf4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4bf6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4bf8:	58 a1       	lds	r21, 0x48
    4bfa:	6d a1       	lds	r22, 0x4d
    4bfc:	7e a1       	lds	r23, 0x4e
    4bfe:	8f a1       	lds	r24, 0x4f
    4c00:	98 a5       	lds	r25, 0x68
    4c02:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	c8 0e       	add	r12, r24
    4c0c:	d9 1e       	adc	r13, r25
    4c0e:	ea 1e       	adc	r14, r26
    4c10:	fb 1e       	adc	r15, r27
    4c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c16:	af 85       	ldd	r26, Y+15	; 0x0f
    4c18:	b8 89       	ldd	r27, Y+16	; 0x10
    4c1a:	8c 0d       	add	r24, r12
    4c1c:	9d 1d       	adc	r25, r13
    4c1e:	ae 1d       	adc	r26, r14
    4c20:	bf 1d       	adc	r27, r15
    4c22:	8d 87       	std	Y+13, r24	; 0x0d
    4c24:	9e 87       	std	Y+14, r25	; 0x0e
    4c26:	af 87       	std	Y+15, r26	; 0x0f
    4c28:	b8 8b       	std	Y+16, r27	; 0x10
    4c2a:	68 2f       	mov	r22, r24
    4c2c:	7e 85       	ldd	r23, Y+14	; 0x0e
    4c2e:	21 2f       	mov	r18, r17
    4c30:	30 2f       	mov	r19, r16
    4c32:	48 2d       	mov	r20, r8
    4c34:	54 2d       	mov	r21, r4
    4c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c38:	98 89       	ldd	r25, Y+16	; 0x10
    4c3a:	e0 96       	adiw	r28, 0x30	; 48
    4c3c:	e0 e1       	ldi	r30, 0x10	; 16
    4c3e:	0c 94 7c 31 	jmp	0x62f8	; 0x62f8 <__epilogue_restores__+0x4>

00004c42 <__ashldi3>:
    4c42:	cf 92       	push	r12
    4c44:	df 92       	push	r13
    4c46:	ef 92       	push	r14
    4c48:	ff 92       	push	r15
    4c4a:	0f 93       	push	r16
    4c4c:	cf 93       	push	r28
    4c4e:	df 93       	push	r29
    4c50:	cd b7       	in	r28, 0x3d	; 61
    4c52:	de b7       	in	r29, 0x3e	; 62
    4c54:	60 97       	sbiw	r28, 0x10	; 16
    4c56:	cd bf       	out	0x3d, r28	; 61
    4c58:	de bf       	out	0x3e, r29	; 62
    4c5a:	00 23       	and	r16, r16
    4c5c:	09 f4       	brne	.+2      	; 0x4c60 <__ashldi3+0x1e>
    4c5e:	5a c0       	rjmp	.+180    	; 0x4d14 <__ashldi3+0xd2>
    4c60:	29 87       	std	Y+9, r18	; 0x09
    4c62:	3a 87       	std	Y+10, r19	; 0x0a
    4c64:	4b 87       	std	Y+11, r20	; 0x0b
    4c66:	5c 87       	std	Y+12, r21	; 0x0c
    4c68:	6d 87       	std	Y+13, r22	; 0x0d
    4c6a:	7e 87       	std	Y+14, r23	; 0x0e
    4c6c:	8f 87       	std	Y+15, r24	; 0x0f
    4c6e:	98 8b       	std	Y+16, r25	; 0x10
    4c70:	80 e2       	ldi	r24, 0x20	; 32
    4c72:	80 1b       	sub	r24, r16
    4c74:	49 85       	ldd	r20, Y+9	; 0x09
    4c76:	5a 85       	ldd	r21, Y+10	; 0x0a
    4c78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c7c:	18 16       	cp	r1, r24
    4c7e:	b4 f0       	brlt	.+44     	; 0x4cac <__ashldi3+0x6a>
    4c80:	19 82       	std	Y+1, r1	; 0x01
    4c82:	1a 82       	std	Y+2, r1	; 0x02
    4c84:	1b 82       	std	Y+3, r1	; 0x03
    4c86:	1c 82       	std	Y+4, r1	; 0x04
    4c88:	99 27       	eor	r25, r25
    4c8a:	87 fd       	sbrc	r24, 7
    4c8c:	90 95       	com	r25
    4c8e:	90 95       	com	r25
    4c90:	81 95       	neg	r24
    4c92:	9f 4f       	sbci	r25, 0xFF	; 255
    4c94:	04 c0       	rjmp	.+8      	; 0x4c9e <__ashldi3+0x5c>
    4c96:	44 0f       	add	r20, r20
    4c98:	55 1f       	adc	r21, r21
    4c9a:	66 1f       	adc	r22, r22
    4c9c:	77 1f       	adc	r23, r23
    4c9e:	8a 95       	dec	r24
    4ca0:	d2 f7       	brpl	.-12     	; 0x4c96 <__ashldi3+0x54>
    4ca2:	4d 83       	std	Y+5, r20	; 0x05
    4ca4:	5e 83       	std	Y+6, r21	; 0x06
    4ca6:	6f 83       	std	Y+7, r22	; 0x07
    4ca8:	78 87       	std	Y+8, r23	; 0x08
    4caa:	2c c0       	rjmp	.+88     	; 0x4d04 <__ashldi3+0xc2>
    4cac:	6a 01       	movw	r12, r20
    4cae:	7b 01       	movw	r14, r22
    4cb0:	00 2e       	mov	r0, r16
    4cb2:	04 c0       	rjmp	.+8      	; 0x4cbc <__ashldi3+0x7a>
    4cb4:	cc 0c       	add	r12, r12
    4cb6:	dd 1c       	adc	r13, r13
    4cb8:	ee 1c       	adc	r14, r14
    4cba:	ff 1c       	adc	r15, r15
    4cbc:	0a 94       	dec	r0
    4cbe:	d2 f7       	brpl	.-12     	; 0x4cb4 <__ashldi3+0x72>
    4cc0:	c9 82       	std	Y+1, r12	; 0x01
    4cc2:	da 82       	std	Y+2, r13	; 0x02
    4cc4:	eb 82       	std	Y+3, r14	; 0x03
    4cc6:	fc 82       	std	Y+4, r15	; 0x04
    4cc8:	6a 01       	movw	r12, r20
    4cca:	7b 01       	movw	r14, r22
    4ccc:	04 c0       	rjmp	.+8      	; 0x4cd6 <__ashldi3+0x94>
    4cce:	f6 94       	lsr	r15
    4cd0:	e7 94       	ror	r14
    4cd2:	d7 94       	ror	r13
    4cd4:	c7 94       	ror	r12
    4cd6:	8a 95       	dec	r24
    4cd8:	d2 f7       	brpl	.-12     	; 0x4cce <__ashldi3+0x8c>
    4cda:	d7 01       	movw	r26, r14
    4cdc:	c6 01       	movw	r24, r12
    4cde:	4d 85       	ldd	r20, Y+13	; 0x0d
    4ce0:	5e 85       	ldd	r21, Y+14	; 0x0e
    4ce2:	6f 85       	ldd	r22, Y+15	; 0x0f
    4ce4:	78 89       	ldd	r23, Y+16	; 0x10
    4ce6:	04 c0       	rjmp	.+8      	; 0x4cf0 <__ashldi3+0xae>
    4ce8:	44 0f       	add	r20, r20
    4cea:	55 1f       	adc	r21, r21
    4cec:	66 1f       	adc	r22, r22
    4cee:	77 1f       	adc	r23, r23
    4cf0:	0a 95       	dec	r16
    4cf2:	d2 f7       	brpl	.-12     	; 0x4ce8 <__ashldi3+0xa6>
    4cf4:	84 2b       	or	r24, r20
    4cf6:	95 2b       	or	r25, r21
    4cf8:	a6 2b       	or	r26, r22
    4cfa:	b7 2b       	or	r27, r23
    4cfc:	8d 83       	std	Y+5, r24	; 0x05
    4cfe:	9e 83       	std	Y+6, r25	; 0x06
    4d00:	af 83       	std	Y+7, r26	; 0x07
    4d02:	b8 87       	std	Y+8, r27	; 0x08
    4d04:	29 81       	ldd	r18, Y+1	; 0x01
    4d06:	3a 81       	ldd	r19, Y+2	; 0x02
    4d08:	4b 81       	ldd	r20, Y+3	; 0x03
    4d0a:	5c 81       	ldd	r21, Y+4	; 0x04
    4d0c:	6d 81       	ldd	r22, Y+5	; 0x05
    4d0e:	7e 81       	ldd	r23, Y+6	; 0x06
    4d10:	8f 81       	ldd	r24, Y+7	; 0x07
    4d12:	98 85       	ldd	r25, Y+8	; 0x08
    4d14:	60 96       	adiw	r28, 0x10	; 16
    4d16:	cd bf       	out	0x3d, r28	; 61
    4d18:	de bf       	out	0x3e, r29	; 62
    4d1a:	df 91       	pop	r29
    4d1c:	cf 91       	pop	r28
    4d1e:	0f 91       	pop	r16
    4d20:	ff 90       	pop	r15
    4d22:	ef 90       	pop	r14
    4d24:	df 90       	pop	r13
    4d26:	cf 90       	pop	r12
    4d28:	08 95       	ret

00004d2a <__ashrdi3>:
    4d2a:	0f 93       	push	r16
    4d2c:	cf 93       	push	r28
    4d2e:	df 93       	push	r29
    4d30:	cd b7       	in	r28, 0x3d	; 61
    4d32:	de b7       	in	r29, 0x3e	; 62
    4d34:	60 97       	sbiw	r28, 0x10	; 16
    4d36:	cd bf       	out	0x3d, r28	; 61
    4d38:	de bf       	out	0x3e, r29	; 62
    4d3a:	00 23       	and	r16, r16
    4d3c:	09 f4       	brne	.+2      	; 0x4d40 <__ashrdi3+0x16>
    4d3e:	56 c0       	rjmp	.+172    	; 0x4dec <__ashrdi3+0xc2>
    4d40:	29 87       	std	Y+9, r18	; 0x09
    4d42:	3a 87       	std	Y+10, r19	; 0x0a
    4d44:	4b 87       	std	Y+11, r20	; 0x0b
    4d46:	5c 87       	std	Y+12, r21	; 0x0c
    4d48:	6d 87       	std	Y+13, r22	; 0x0d
    4d4a:	7e 87       	std	Y+14, r23	; 0x0e
    4d4c:	8f 87       	std	Y+15, r24	; 0x0f
    4d4e:	98 8b       	std	Y+16, r25	; 0x10
    4d50:	20 e2       	ldi	r18, 0x20	; 32
    4d52:	20 1b       	sub	r18, r16
    4d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d58:	af 85       	ldd	r26, Y+15	; 0x0f
    4d5a:	b8 89       	ldd	r27, Y+16	; 0x10
    4d5c:	ac 01       	movw	r20, r24
    4d5e:	bd 01       	movw	r22, r26
    4d60:	12 16       	cp	r1, r18
    4d62:	b4 f0       	brlt	.+44     	; 0x4d90 <__ashrdi3+0x66>
    4d64:	77 0f       	add	r23, r23
    4d66:	44 0b       	sbc	r20, r20
    4d68:	54 2f       	mov	r21, r20
    4d6a:	ba 01       	movw	r22, r20
    4d6c:	4d 83       	std	Y+5, r20	; 0x05
    4d6e:	5e 83       	std	Y+6, r21	; 0x06
    4d70:	6f 83       	std	Y+7, r22	; 0x07
    4d72:	78 87       	std	Y+8, r23	; 0x08
    4d74:	33 27       	eor	r19, r19
    4d76:	27 fd       	sbrc	r18, 7
    4d78:	30 95       	com	r19
    4d7a:	30 95       	com	r19
    4d7c:	21 95       	neg	r18
    4d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d80:	04 c0       	rjmp	.+8      	; 0x4d8a <__ashrdi3+0x60>
    4d82:	b5 95       	asr	r27
    4d84:	a7 95       	ror	r26
    4d86:	97 95       	ror	r25
    4d88:	87 95       	ror	r24
    4d8a:	2a 95       	dec	r18
    4d8c:	d2 f7       	brpl	.-12     	; 0x4d82 <__ashrdi3+0x58>
    4d8e:	22 c0       	rjmp	.+68     	; 0x4dd4 <__ashrdi3+0xaa>
    4d90:	00 2e       	mov	r0, r16
    4d92:	04 c0       	rjmp	.+8      	; 0x4d9c <__ashrdi3+0x72>
    4d94:	75 95       	asr	r23
    4d96:	67 95       	ror	r22
    4d98:	57 95       	ror	r21
    4d9a:	47 95       	ror	r20
    4d9c:	0a 94       	dec	r0
    4d9e:	d2 f7       	brpl	.-12     	; 0x4d94 <__ashrdi3+0x6a>
    4da0:	4d 83       	std	Y+5, r20	; 0x05
    4da2:	5e 83       	std	Y+6, r21	; 0x06
    4da4:	6f 83       	std	Y+7, r22	; 0x07
    4da6:	78 87       	std	Y+8, r23	; 0x08
    4da8:	04 c0       	rjmp	.+8      	; 0x4db2 <__ashrdi3+0x88>
    4daa:	88 0f       	add	r24, r24
    4dac:	99 1f       	adc	r25, r25
    4dae:	aa 1f       	adc	r26, r26
    4db0:	bb 1f       	adc	r27, r27
    4db2:	2a 95       	dec	r18
    4db4:	d2 f7       	brpl	.-12     	; 0x4daa <__ashrdi3+0x80>
    4db6:	49 85       	ldd	r20, Y+9	; 0x09
    4db8:	5a 85       	ldd	r21, Y+10	; 0x0a
    4dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dbe:	04 c0       	rjmp	.+8      	; 0x4dc8 <__ashrdi3+0x9e>
    4dc0:	76 95       	lsr	r23
    4dc2:	67 95       	ror	r22
    4dc4:	57 95       	ror	r21
    4dc6:	47 95       	ror	r20
    4dc8:	0a 95       	dec	r16
    4dca:	d2 f7       	brpl	.-12     	; 0x4dc0 <__ashrdi3+0x96>
    4dcc:	84 2b       	or	r24, r20
    4dce:	95 2b       	or	r25, r21
    4dd0:	a6 2b       	or	r26, r22
    4dd2:	b7 2b       	or	r27, r23
    4dd4:	89 83       	std	Y+1, r24	; 0x01
    4dd6:	9a 83       	std	Y+2, r25	; 0x02
    4dd8:	ab 83       	std	Y+3, r26	; 0x03
    4dda:	bc 83       	std	Y+4, r27	; 0x04
    4ddc:	29 81       	ldd	r18, Y+1	; 0x01
    4dde:	3a 81       	ldd	r19, Y+2	; 0x02
    4de0:	4b 81       	ldd	r20, Y+3	; 0x03
    4de2:	5c 81       	ldd	r21, Y+4	; 0x04
    4de4:	6d 81       	ldd	r22, Y+5	; 0x05
    4de6:	7e 81       	ldd	r23, Y+6	; 0x06
    4de8:	8f 81       	ldd	r24, Y+7	; 0x07
    4dea:	98 85       	ldd	r25, Y+8	; 0x08
    4dec:	60 96       	adiw	r28, 0x10	; 16
    4dee:	cd bf       	out	0x3d, r28	; 61
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	df 91       	pop	r29
    4df4:	cf 91       	pop	r28
    4df6:	0f 91       	pop	r16
    4df8:	08 95       	ret

00004dfa <__divdi3>:
    4dfa:	a8 e4       	ldi	r26, 0x48	; 72
    4dfc:	b0 e0       	ldi	r27, 0x00	; 0
    4dfe:	e3 e0       	ldi	r30, 0x03	; 3
    4e00:	f7 e2       	ldi	r31, 0x27	; 39
    4e02:	0c 94 62 31 	jmp	0x62c4	; 0x62c4 <__prologue_saves__+0x2>
    4e06:	f5 01       	movw	r30, r10
    4e08:	29 a3       	lds	r18, 0x59
    4e0a:	3a a3       	lds	r19, 0x5a
    4e0c:	4b a3       	lds	r20, 0x5b
    4e0e:	5c a3       	lds	r21, 0x5c
    4e10:	6d a3       	lds	r22, 0x5d
    4e12:	7e a3       	lds	r23, 0x5e
    4e14:	8f a3       	lds	r24, 0x5f
    4e16:	98 a7       	lds	r25, 0x78
    4e18:	a9 8e       	std	Y+25, r10	; 0x19
    4e1a:	fa 8f       	std	Y+26, r31	; 0x1a
    4e1c:	cb 8e       	std	Y+27, r12	; 0x1b
    4e1e:	dc 8e       	std	Y+28, r13	; 0x1c
    4e20:	ed 8e       	std	Y+29, r14	; 0x1d
    4e22:	fe 8e       	std	Y+30, r15	; 0x1e
    4e24:	0f 8f       	std	Y+31, r16	; 0x1f
    4e26:	18 a3       	lds	r17, 0x58
    4e28:	8d a0       	lds	r24, 0x8d
    4e2a:	9e a0       	lds	r25, 0x8e
    4e2c:	af a0       	lds	r26, 0x8f
    4e2e:	b8 a4       	lds	r27, 0xa8
    4e30:	b7 fe       	sbrs	r11, 7
    4e32:	67 c0       	rjmp	.+206    	; 0x4f02 <__divdi3+0x108>
    4e34:	21 95       	neg	r18
    4e36:	b1 e0       	ldi	r27, 0x01	; 1
    4e38:	12 16       	cp	r1, r18
    4e3a:	08 f0       	brcs	.+2      	; 0x4e3e <__divdi3+0x44>
    4e3c:	b0 e0       	ldi	r27, 0x00	; 0
    4e3e:	31 95       	neg	r19
    4e40:	a1 e0       	ldi	r26, 0x01	; 1
    4e42:	13 16       	cp	r1, r19
    4e44:	08 f0       	brcs	.+2      	; 0x4e48 <__divdi3+0x4e>
    4e46:	a0 e0       	ldi	r26, 0x00	; 0
    4e48:	b3 2e       	mov	r11, r19
    4e4a:	bb 1a       	sub	r11, r27
    4e4c:	bb 2d       	mov	r27, r11
    4e4e:	88 24       	eor	r8, r8
    4e50:	83 94       	inc	r8
    4e52:	3b 15       	cp	r19, r11
    4e54:	08 f0       	brcs	.+2      	; 0x4e58 <__divdi3+0x5e>
    4e56:	88 24       	eor	r8, r8
    4e58:	a8 29       	or	r26, r8
    4e5a:	41 95       	neg	r20
    4e5c:	31 e0       	ldi	r19, 0x01	; 1
    4e5e:	14 16       	cp	r1, r20
    4e60:	08 f0       	brcs	.+2      	; 0x4e64 <__divdi3+0x6a>
    4e62:	30 e0       	ldi	r19, 0x00	; 0
    4e64:	b4 2e       	mov	r11, r20
    4e66:	ba 1a       	sub	r11, r26
    4e68:	ab 2d       	mov	r26, r11
    4e6a:	88 24       	eor	r8, r8
    4e6c:	83 94       	inc	r8
    4e6e:	4b 15       	cp	r20, r11
    4e70:	08 f0       	brcs	.+2      	; 0x4e74 <__divdi3+0x7a>
    4e72:	88 24       	eor	r8, r8
    4e74:	38 29       	or	r19, r8
    4e76:	51 95       	neg	r21
    4e78:	41 e0       	ldi	r20, 0x01	; 1
    4e7a:	15 16       	cp	r1, r21
    4e7c:	08 f0       	brcs	.+2      	; 0x4e80 <__divdi3+0x86>
    4e7e:	40 e0       	ldi	r20, 0x00	; 0
    4e80:	45 2e       	mov	r4, r21
    4e82:	43 1a       	sub	r4, r19
    4e84:	31 e0       	ldi	r19, 0x01	; 1
    4e86:	54 15       	cp	r21, r4
    4e88:	08 f0       	brcs	.+2      	; 0x4e8c <__divdi3+0x92>
    4e8a:	30 e0       	ldi	r19, 0x00	; 0
    4e8c:	43 2b       	or	r20, r19
    4e8e:	61 95       	neg	r22
    4e90:	31 e0       	ldi	r19, 0x01	; 1
    4e92:	16 16       	cp	r1, r22
    4e94:	08 f0       	brcs	.+2      	; 0x4e98 <__divdi3+0x9e>
    4e96:	30 e0       	ldi	r19, 0x00	; 0
    4e98:	86 2e       	mov	r8, r22
    4e9a:	84 1a       	sub	r8, r20
    4e9c:	41 e0       	ldi	r20, 0x01	; 1
    4e9e:	68 15       	cp	r22, r8
    4ea0:	08 f0       	brcs	.+2      	; 0x4ea4 <__divdi3+0xaa>
    4ea2:	40 e0       	ldi	r20, 0x00	; 0
    4ea4:	34 2b       	or	r19, r20
    4ea6:	71 95       	neg	r23
    4ea8:	41 e0       	ldi	r20, 0x01	; 1
    4eaa:	17 16       	cp	r1, r23
    4eac:	08 f0       	brcs	.+2      	; 0x4eb0 <__divdi3+0xb6>
    4eae:	40 e0       	ldi	r20, 0x00	; 0
    4eb0:	57 2f       	mov	r21, r23
    4eb2:	53 1b       	sub	r21, r19
    4eb4:	31 e0       	ldi	r19, 0x01	; 1
    4eb6:	75 17       	cp	r23, r21
    4eb8:	08 f0       	brcs	.+2      	; 0x4ebc <__divdi3+0xc2>
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	43 2b       	or	r20, r19
    4ebe:	81 95       	neg	r24
    4ec0:	31 e0       	ldi	r19, 0x01	; 1
    4ec2:	18 16       	cp	r1, r24
    4ec4:	08 f0       	brcs	.+2      	; 0x4ec8 <__divdi3+0xce>
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	68 2f       	mov	r22, r24
    4eca:	64 1b       	sub	r22, r20
    4ecc:	46 2f       	mov	r20, r22
    4ece:	61 e0       	ldi	r22, 0x01	; 1
    4ed0:	84 17       	cp	r24, r20
    4ed2:	08 f0       	brcs	.+2      	; 0x4ed6 <__divdi3+0xdc>
    4ed4:	60 e0       	ldi	r22, 0x00	; 0
    4ed6:	36 2b       	or	r19, r22
    4ed8:	91 95       	neg	r25
    4eda:	93 1b       	sub	r25, r19
    4edc:	29 a3       	lds	r18, 0x59
    4ede:	ba a3       	lds	r27, 0x5a
    4ee0:	ab a3       	lds	r26, 0x5b
    4ee2:	4c a2       	lds	r20, 0x9c
    4ee4:	8d a2       	lds	r24, 0x9d
    4ee6:	5e a3       	lds	r21, 0x5e
    4ee8:	4f a3       	lds	r20, 0x5f
    4eea:	98 a7       	lds	r25, 0x78
    4eec:	8f ef       	ldi	r24, 0xFF	; 255
    4eee:	9f ef       	ldi	r25, 0xFF	; 255
    4ef0:	af ef       	ldi	r26, 0xFF	; 255
    4ef2:	bf ef       	ldi	r27, 0xFF	; 255
    4ef4:	25 96       	adiw	r28, 0x05	; 5
    4ef6:	8c af       	sts	0x7c, r24
    4ef8:	9d af       	sts	0x7d, r25
    4efa:	ae af       	sts	0x7e, r26
    4efc:	bf af       	sts	0x7f, r27
    4efe:	25 97       	sbiw	r28, 0x05	; 5
    4f00:	06 c0       	rjmp	.+12     	; 0x4f0e <__divdi3+0x114>
    4f02:	25 96       	adiw	r28, 0x05	; 5
    4f04:	1c ae       	sts	0xbc, r17
    4f06:	1d ae       	sts	0xbd, r17
    4f08:	1e ae       	sts	0xbe, r17
    4f0a:	1f ae       	sts	0xbf, r17
    4f0c:	25 97       	sbiw	r28, 0x05	; 5
    4f0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f12:	af 8d       	ldd	r26, Y+31	; 0x1f
    4f14:	b8 a1       	lds	r27, 0x48
    4f16:	b7 ff       	sbrs	r27, 7
    4f18:	68 c0       	rjmp	.+208    	; 0x4fea <__divdi3+0x1f0>
    4f1a:	25 96       	adiw	r28, 0x05	; 5
    4f1c:	2c ad       	sts	0x6c, r18
    4f1e:	3d ad       	sts	0x6d, r19
    4f20:	4e ad       	sts	0x6e, r20
    4f22:	5f ad       	sts	0x6f, r21
    4f24:	25 97       	sbiw	r28, 0x05	; 5
    4f26:	20 95       	com	r18
    4f28:	30 95       	com	r19
    4f2a:	40 95       	com	r20
    4f2c:	50 95       	com	r21
    4f2e:	25 96       	adiw	r28, 0x05	; 5
    4f30:	2c af       	sts	0x7c, r18
    4f32:	3d af       	sts	0x7d, r19
    4f34:	4e af       	sts	0x7e, r20
    4f36:	5f af       	sts	0x7f, r21
    4f38:	25 97       	sbiw	r28, 0x05	; 5
    4f3a:	e1 95       	neg	r30
    4f3c:	81 e0       	ldi	r24, 0x01	; 1
    4f3e:	1e 16       	cp	r1, r30
    4f40:	08 f0       	brcs	.+2      	; 0x4f44 <__divdi3+0x14a>
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	f1 95       	neg	r31
    4f46:	91 e0       	ldi	r25, 0x01	; 1
    4f48:	1f 16       	cp	r1, r31
    4f4a:	08 f0       	brcs	.+2      	; 0x4f4e <__divdi3+0x154>
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	4f 2f       	mov	r20, r31
    4f50:	48 1b       	sub	r20, r24
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	f4 17       	cp	r31, r20
    4f56:	08 f0       	brcs	.+2      	; 0x4f5a <__divdi3+0x160>
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	98 2b       	or	r25, r24
    4f5c:	c1 94       	neg	r12
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	1c 14       	cp	r1, r12
    4f62:	08 f0       	brcs	.+2      	; 0x4f66 <__divdi3+0x16c>
    4f64:	80 e0       	ldi	r24, 0x00	; 0
    4f66:	6c 2d       	mov	r22, r12
    4f68:	69 1b       	sub	r22, r25
    4f6a:	91 e0       	ldi	r25, 0x01	; 1
    4f6c:	c6 16       	cp	r12, r22
    4f6e:	08 f0       	brcs	.+2      	; 0x4f72 <__divdi3+0x178>
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	89 2b       	or	r24, r25
    4f74:	d1 94       	neg	r13
    4f76:	91 e0       	ldi	r25, 0x01	; 1
    4f78:	1d 14       	cp	r1, r13
    4f7a:	08 f0       	brcs	.+2      	; 0x4f7e <__divdi3+0x184>
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	5d 2d       	mov	r21, r13
    4f80:	58 1b       	sub	r21, r24
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	d5 16       	cp	r13, r21
    4f86:	08 f0       	brcs	.+2      	; 0x4f8a <__divdi3+0x190>
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	98 2b       	or	r25, r24
    4f8c:	e1 94       	neg	r14
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	1e 14       	cp	r1, r14
    4f92:	08 f0       	brcs	.+2      	; 0x4f96 <__divdi3+0x19c>
    4f94:	80 e0       	ldi	r24, 0x00	; 0
    4f96:	3e 2d       	mov	r19, r14
    4f98:	39 1b       	sub	r19, r25
    4f9a:	91 e0       	ldi	r25, 0x01	; 1
    4f9c:	e3 16       	cp	r14, r19
    4f9e:	08 f0       	brcs	.+2      	; 0x4fa2 <__divdi3+0x1a8>
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	89 2b       	or	r24, r25
    4fa4:	f1 94       	neg	r15
    4fa6:	91 e0       	ldi	r25, 0x01	; 1
    4fa8:	1f 14       	cp	r1, r15
    4faa:	08 f0       	brcs	.+2      	; 0x4fae <__divdi3+0x1b4>
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	2f 2d       	mov	r18, r15
    4fb0:	28 1b       	sub	r18, r24
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	f2 16       	cp	r15, r18
    4fb6:	08 f0       	brcs	.+2      	; 0x4fba <__divdi3+0x1c0>
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	98 2b       	or	r25, r24
    4fbc:	01 95       	neg	r16
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	10 16       	cp	r1, r16
    4fc2:	08 f0       	brcs	.+2      	; 0x4fc6 <__divdi3+0x1cc>
    4fc4:	80 e0       	ldi	r24, 0x00	; 0
    4fc6:	70 2f       	mov	r23, r16
    4fc8:	79 1b       	sub	r23, r25
    4fca:	97 2f       	mov	r25, r23
    4fcc:	71 e0       	ldi	r23, 0x01	; 1
    4fce:	09 17       	cp	r16, r25
    4fd0:	08 f0       	brcs	.+2      	; 0x4fd4 <__divdi3+0x1da>
    4fd2:	70 e0       	ldi	r23, 0x00	; 0
    4fd4:	87 2b       	or	r24, r23
    4fd6:	11 95       	neg	r17
    4fd8:	18 1b       	sub	r17, r24
    4fda:	e9 8f       	std	Y+25, r30	; 0x19
    4fdc:	4a 8f       	std	Y+26, r20	; 0x1a
    4fde:	6b 8f       	std	Y+27, r22	; 0x1b
    4fe0:	5c 8f       	std	Y+28, r21	; 0x1c
    4fe2:	3d 8f       	std	Y+29, r19	; 0x1d
    4fe4:	2e 8f       	std	Y+30, r18	; 0x1e
    4fe6:	9f 8f       	std	Y+31, r25	; 0x1f
    4fe8:	18 a3       	lds	r17, 0x58
    4fea:	79 8d       	ldd	r23, Y+25	; 0x19
    4fec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4fee:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4ff0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4ff2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    4ff4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4ff6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4ff8:	88 a1       	lds	r24, 0x48
    4ffa:	e9 a1       	lds	r30, 0x49
    4ffc:	e9 8b       	std	Y+17, r30	; 0x11
    4ffe:	ea a1       	lds	r30, 0x4a
    5000:	ea 8b       	std	Y+18, r30	; 0x12
    5002:	eb a1       	lds	r30, 0x4b
    5004:	eb 8b       	std	Y+19, r30	; 0x13
    5006:	ec a1       	lds	r30, 0x4c
    5008:	ec 8b       	std	Y+20, r30	; 0x14
    500a:	ed a1       	lds	r30, 0x4d
    500c:	ed 8b       	std	Y+21, r30	; 0x15
    500e:	ee a1       	lds	r30, 0x4e
    5010:	ee 8b       	std	Y+22, r30	; 0x16
    5012:	ef a1       	lds	r30, 0x4f
    5014:	ef 8b       	std	Y+23, r30	; 0x17
    5016:	e8 a5       	lds	r30, 0x68
    5018:	e8 8f       	std	Y+24, r30	; 0x18
    501a:	79 87       	std	Y+9, r23	; 0x09
    501c:	6a 87       	std	Y+10, r22	; 0x0a
    501e:	5b 87       	std	Y+11, r21	; 0x0b
    5020:	4c 87       	std	Y+12, r20	; 0x0c
    5022:	3d 87       	std	Y+13, r19	; 0x0d
    5024:	2e 87       	std	Y+14, r18	; 0x0e
    5026:	9f 87       	std	Y+15, r25	; 0x0f
    5028:	88 8b       	std	Y+16, r24	; 0x10
    502a:	89 84       	ldd	r8, Y+9	; 0x09
    502c:	9a 84       	ldd	r9, Y+10	; 0x0a
    502e:	ab 84       	ldd	r10, Y+11	; 0x0b
    5030:	bc 84       	ldd	r11, Y+12	; 0x0c
    5032:	8d 85       	ldd	r24, Y+13	; 0x0d
    5034:	9e 85       	ldd	r25, Y+14	; 0x0e
    5036:	af 85       	ldd	r26, Y+15	; 0x0f
    5038:	b8 89       	ldd	r27, Y+16	; 0x10
    503a:	e9 88       	ldd	r14, Y+17	; 0x11
    503c:	fa 88       	ldd	r15, Y+18	; 0x12
    503e:	0b 89       	ldd	r16, Y+19	; 0x13
    5040:	1c 89       	ldd	r17, Y+20	; 0x14
    5042:	ed aa       	sts	0x9d, r30
    5044:	fe aa       	sts	0x9e, r31
    5046:	0f ab       	sts	0x5f, r16
    5048:	18 af       	sts	0x78, r17
    504a:	cd 88       	ldd	r12, Y+21	; 0x15
    504c:	de 88       	ldd	r13, Y+22	; 0x16
    504e:	ef 88       	ldd	r14, Y+23	; 0x17
    5050:	f8 8c       	ldd	r15, Y+24	; 0x18
    5052:	00 97       	sbiw	r24, 0x00	; 0
    5054:	a1 05       	cpc	r26, r1
    5056:	b1 05       	cpc	r27, r1
    5058:	09 f0       	breq	.+2      	; 0x505c <__divdi3+0x262>
    505a:	bd c3       	rjmp	.+1914   	; 0x57d6 <__divdi3+0x9dc>
    505c:	c8 14       	cp	r12, r8
    505e:	d9 04       	cpc	r13, r9
    5060:	ea 04       	cpc	r14, r10
    5062:	fb 04       	cpc	r15, r11
    5064:	08 f0       	brcs	.+2      	; 0x5068 <__divdi3+0x26e>
    5066:	4d c1       	rjmp	.+666    	; 0x5302 <__divdi3+0x508>
    5068:	00 e0       	ldi	r16, 0x00	; 0
    506a:	80 16       	cp	r8, r16
    506c:	00 e0       	ldi	r16, 0x00	; 0
    506e:	90 06       	cpc	r9, r16
    5070:	01 e0       	ldi	r16, 0x01	; 1
    5072:	a0 06       	cpc	r10, r16
    5074:	00 e0       	ldi	r16, 0x00	; 0
    5076:	b0 06       	cpc	r11, r16
    5078:	58 f4       	brcc	.+22     	; 0x5090 <__divdi3+0x296>
    507a:	1f ef       	ldi	r17, 0xFF	; 255
    507c:	81 16       	cp	r8, r17
    507e:	91 04       	cpc	r9, r1
    5080:	a1 04       	cpc	r10, r1
    5082:	b1 04       	cpc	r11, r1
    5084:	09 f0       	breq	.+2      	; 0x5088 <__divdi3+0x28e>
    5086:	90 f4       	brcc	.+36     	; 0x50ac <__divdi3+0x2b2>
    5088:	80 e0       	ldi	r24, 0x00	; 0
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	dc 01       	movw	r26, r24
    508e:	17 c0       	rjmp	.+46     	; 0x50be <__divdi3+0x2c4>
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	82 16       	cp	r8, r18
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	92 06       	cpc	r9, r18
    5098:	20 e0       	ldi	r18, 0x00	; 0
    509a:	a2 06       	cpc	r10, r18
    509c:	21 e0       	ldi	r18, 0x01	; 1
    509e:	b2 06       	cpc	r11, r18
    50a0:	50 f4       	brcc	.+20     	; 0x50b6 <__divdi3+0x2bc>
    50a2:	80 e1       	ldi	r24, 0x10	; 16
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	a0 e0       	ldi	r26, 0x00	; 0
    50a8:	b0 e0       	ldi	r27, 0x00	; 0
    50aa:	09 c0       	rjmp	.+18     	; 0x50be <__divdi3+0x2c4>
    50ac:	88 e0       	ldi	r24, 0x08	; 8
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	a0 e0       	ldi	r26, 0x00	; 0
    50b2:	b0 e0       	ldi	r27, 0x00	; 0
    50b4:	04 c0       	rjmp	.+8      	; 0x50be <__divdi3+0x2c4>
    50b6:	88 e1       	ldi	r24, 0x18	; 24
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	a0 e0       	ldi	r26, 0x00	; 0
    50bc:	b0 e0       	ldi	r27, 0x00	; 0
    50be:	b5 01       	movw	r22, r10
    50c0:	a4 01       	movw	r20, r8
    50c2:	08 2e       	mov	r0, r24
    50c4:	04 c0       	rjmp	.+8      	; 0x50ce <__divdi3+0x2d4>
    50c6:	76 95       	lsr	r23
    50c8:	67 95       	ror	r22
    50ca:	57 95       	ror	r21
    50cc:	47 95       	ror	r20
    50ce:	0a 94       	dec	r0
    50d0:	d2 f7       	brpl	.-12     	; 0x50c6 <__divdi3+0x2cc>
    50d2:	fa 01       	movw	r30, r20
    50d4:	ef 5d       	subi	r30, 0xDF	; 223
    50d6:	ff 4d       	sbci	r31, 0xDF	; 223
    50d8:	20 81       	ld	r18, Z
    50da:	40 e2       	ldi	r20, 0x20	; 32
    50dc:	50 e0       	ldi	r21, 0x00	; 0
    50de:	60 e0       	ldi	r22, 0x00	; 0
    50e0:	70 e0       	ldi	r23, 0x00	; 0
    50e2:	48 1b       	sub	r20, r24
    50e4:	59 0b       	sbc	r21, r25
    50e6:	6a 0b       	sbc	r22, r26
    50e8:	7b 0b       	sbc	r23, r27
    50ea:	42 1b       	sub	r20, r18
    50ec:	51 09       	sbc	r21, r1
    50ee:	61 09       	sbc	r22, r1
    50f0:	71 09       	sbc	r23, r1
    50f2:	41 15       	cp	r20, r1
    50f4:	51 05       	cpc	r21, r1
    50f6:	61 05       	cpc	r22, r1
    50f8:	71 05       	cpc	r23, r1
    50fa:	a1 f1       	breq	.+104    	; 0x5164 <__divdi3+0x36a>
    50fc:	04 2e       	mov	r0, r20
    50fe:	04 c0       	rjmp	.+8      	; 0x5108 <__divdi3+0x30e>
    5100:	88 0c       	add	r8, r8
    5102:	99 1c       	adc	r9, r9
    5104:	aa 1c       	adc	r10, r10
    5106:	bb 1c       	adc	r11, r11
    5108:	0a 94       	dec	r0
    510a:	d2 f7       	brpl	.-12     	; 0x5100 <__divdi3+0x306>
    510c:	97 01       	movw	r18, r14
    510e:	86 01       	movw	r16, r12
    5110:	04 2e       	mov	r0, r20
    5112:	04 c0       	rjmp	.+8      	; 0x511c <__divdi3+0x322>
    5114:	00 0f       	add	r16, r16
    5116:	11 1f       	adc	r17, r17
    5118:	22 1f       	adc	r18, r18
    511a:	33 1f       	adc	r19, r19
    511c:	0a 94       	dec	r0
    511e:	d2 f7       	brpl	.-12     	; 0x5114 <__divdi3+0x31a>
    5120:	80 e2       	ldi	r24, 0x20	; 32
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	84 1b       	sub	r24, r20
    5126:	95 0b       	sbc	r25, r21
    5128:	cd a8       	sts	0x8d, r28
    512a:	de a8       	sts	0x8e, r29
    512c:	ef a8       	sts	0x8f, r30
    512e:	f8 ac       	sts	0xa8, r31
    5130:	04 c0       	rjmp	.+8      	; 0x513a <__divdi3+0x340>
    5132:	f6 94       	lsr	r15
    5134:	e7 94       	ror	r14
    5136:	d7 94       	ror	r13
    5138:	c7 94       	ror	r12
    513a:	8a 95       	dec	r24
    513c:	d2 f7       	brpl	.-12     	; 0x5132 <__divdi3+0x338>
    513e:	c0 2a       	or	r12, r16
    5140:	d1 2a       	or	r13, r17
    5142:	e2 2a       	or	r14, r18
    5144:	f3 2a       	or	r15, r19
    5146:	0d a9       	sts	0x4d, r16
    5148:	1e a9       	sts	0x4e, r17
    514a:	2f a9       	sts	0x4f, r18
    514c:	38 ad       	sts	0x68, r19
    514e:	04 c0       	rjmp	.+8      	; 0x5158 <__divdi3+0x35e>
    5150:	00 0f       	add	r16, r16
    5152:	11 1f       	adc	r17, r17
    5154:	22 1f       	adc	r18, r18
    5156:	33 1f       	adc	r19, r19
    5158:	4a 95       	dec	r20
    515a:	d2 f7       	brpl	.-12     	; 0x5150 <__divdi3+0x356>
    515c:	0d ab       	sts	0x5d, r16
    515e:	1e ab       	sts	0x5e, r17
    5160:	2f ab       	sts	0x5f, r18
    5162:	38 af       	sts	0x78, r19
    5164:	25 01       	movw	r4, r10
    5166:	66 24       	eor	r6, r6
    5168:	77 24       	eor	r7, r7
    516a:	95 01       	movw	r18, r10
    516c:	84 01       	movw	r16, r8
    516e:	20 70       	andi	r18, 0x00	; 0
    5170:	30 70       	andi	r19, 0x00	; 0
    5172:	09 ab       	sts	0x59, r16
    5174:	1a ab       	sts	0x5a, r17
    5176:	2b ab       	sts	0x5b, r18
    5178:	3c ab       	sts	0x5c, r19
    517a:	c7 01       	movw	r24, r14
    517c:	b6 01       	movw	r22, r12
    517e:	a3 01       	movw	r20, r6
    5180:	92 01       	movw	r18, r4
    5182:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5186:	2d a7       	lds	r18, 0x7d
    5188:	3e a7       	lds	r19, 0x7e
    518a:	4f a7       	lds	r20, 0x7f
    518c:	58 ab       	sts	0x58, r21
    518e:	69 a7       	lds	r22, 0x79
    5190:	7a a7       	lds	r23, 0x7a
    5192:	8b a7       	lds	r24, 0x7b
    5194:	9c a7       	lds	r25, 0x7c
    5196:	c7 01       	movw	r24, r14
    5198:	b6 01       	movw	r22, r12
    519a:	a3 01       	movw	r20, r6
    519c:	92 01       	movw	r18, r4
    519e:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    51a2:	ca 01       	movw	r24, r20
    51a4:	b9 01       	movw	r22, r18
    51a6:	29 a9       	sts	0x49, r18
    51a8:	3a a9       	sts	0x4a, r19
    51aa:	4b a9       	sts	0x4b, r20
    51ac:	5c a9       	sts	0x4c, r21
    51ae:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    51b2:	ab 01       	movw	r20, r22
    51b4:	bc 01       	movw	r22, r24
    51b6:	09 a5       	lds	r16, 0x69
    51b8:	1a a5       	lds	r17, 0x6a
    51ba:	2b a5       	lds	r18, 0x6b
    51bc:	3c a5       	lds	r19, 0x6c
    51be:	78 01       	movw	r14, r16
    51c0:	dd 24       	eor	r13, r13
    51c2:	cc 24       	eor	r12, r12
    51c4:	0d a9       	sts	0x4d, r16
    51c6:	1e a9       	sts	0x4e, r17
    51c8:	2f a9       	sts	0x4f, r18
    51ca:	38 ad       	sts	0x68, r19
    51cc:	c9 01       	movw	r24, r18
    51ce:	aa 27       	eor	r26, r26
    51d0:	bb 27       	eor	r27, r27
    51d2:	c8 2a       	or	r12, r24
    51d4:	d9 2a       	or	r13, r25
    51d6:	ea 2a       	or	r14, r26
    51d8:	fb 2a       	or	r15, r27
    51da:	0d a5       	lds	r16, 0x6d
    51dc:	1e a5       	lds	r17, 0x6e
    51de:	2f a5       	lds	r18, 0x6f
    51e0:	38 a9       	sts	0x48, r19
    51e2:	c4 16       	cp	r12, r20
    51e4:	d5 06       	cpc	r13, r21
    51e6:	e6 06       	cpc	r14, r22
    51e8:	f7 06       	cpc	r15, r23
    51ea:	38 f5       	brcc	.+78     	; 0x523a <__divdi3+0x440>
    51ec:	01 50       	subi	r16, 0x01	; 1
    51ee:	10 40       	sbci	r17, 0x00	; 0
    51f0:	20 40       	sbci	r18, 0x00	; 0
    51f2:	30 40       	sbci	r19, 0x00	; 0
    51f4:	09 a7       	lds	r16, 0x79
    51f6:	1a a7       	lds	r17, 0x7a
    51f8:	2b a7       	lds	r18, 0x7b
    51fa:	3c a7       	lds	r19, 0x7c
    51fc:	c8 0c       	add	r12, r8
    51fe:	d9 1c       	adc	r13, r9
    5200:	ea 1c       	adc	r14, r10
    5202:	fb 1c       	adc	r15, r11
    5204:	c8 14       	cp	r12, r8
    5206:	d9 04       	cpc	r13, r9
    5208:	ea 04       	cpc	r14, r10
    520a:	fb 04       	cpc	r15, r11
    520c:	d0 f0       	brcs	.+52     	; 0x5242 <__divdi3+0x448>
    520e:	c4 16       	cp	r12, r20
    5210:	d5 06       	cpc	r13, r21
    5212:	e6 06       	cpc	r14, r22
    5214:	f7 06       	cpc	r15, r23
    5216:	a8 f4       	brcc	.+42     	; 0x5242 <__divdi3+0x448>
    5218:	0d a5       	lds	r16, 0x6d
    521a:	1e a5       	lds	r17, 0x6e
    521c:	2f a5       	lds	r18, 0x6f
    521e:	38 a9       	sts	0x48, r19
    5220:	02 50       	subi	r16, 0x02	; 2
    5222:	10 40       	sbci	r17, 0x00	; 0
    5224:	20 40       	sbci	r18, 0x00	; 0
    5226:	30 40       	sbci	r19, 0x00	; 0
    5228:	09 a7       	lds	r16, 0x79
    522a:	1a a7       	lds	r17, 0x7a
    522c:	2b a7       	lds	r18, 0x7b
    522e:	3c a7       	lds	r19, 0x7c
    5230:	c8 0c       	add	r12, r8
    5232:	d9 1c       	adc	r13, r9
    5234:	ea 1c       	adc	r14, r10
    5236:	fb 1c       	adc	r15, r11
    5238:	04 c0       	rjmp	.+8      	; 0x5242 <__divdi3+0x448>
    523a:	09 a7       	lds	r16, 0x79
    523c:	1a a7       	lds	r17, 0x7a
    523e:	2b a7       	lds	r18, 0x7b
    5240:	3c a7       	lds	r19, 0x7c
    5242:	c4 1a       	sub	r12, r20
    5244:	d5 0a       	sbc	r13, r21
    5246:	e6 0a       	sbc	r14, r22
    5248:	f7 0a       	sbc	r15, r23
    524a:	c7 01       	movw	r24, r14
    524c:	b6 01       	movw	r22, r12
    524e:	a3 01       	movw	r20, r6
    5250:	92 01       	movw	r18, r4
    5252:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5256:	2d a7       	lds	r18, 0x7d
    5258:	3e a7       	lds	r19, 0x7e
    525a:	4f a7       	lds	r20, 0x7f
    525c:	58 ab       	sts	0x58, r21
    525e:	69 af       	sts	0x79, r22
    5260:	7a af       	sts	0x7a, r23
    5262:	8b af       	sts	0x7b, r24
    5264:	9c af       	sts	0x7c, r25
    5266:	c7 01       	movw	r24, r14
    5268:	b6 01       	movw	r22, r12
    526a:	a3 01       	movw	r20, r6
    526c:	92 01       	movw	r18, r4
    526e:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5272:	ca 01       	movw	r24, r20
    5274:	b9 01       	movw	r22, r18
    5276:	29 a9       	sts	0x49, r18
    5278:	3a a9       	sts	0x4a, r19
    527a:	4b a9       	sts	0x4b, r20
    527c:	5c a9       	sts	0x4c, r21
    527e:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    5282:	6b 01       	movw	r12, r22
    5284:	7c 01       	movw	r14, r24
    5286:	49 ad       	sts	0x69, r20
    5288:	5a ad       	sts	0x6a, r21
    528a:	6b ad       	sts	0x6b, r22
    528c:	7c ad       	sts	0x6c, r23
    528e:	9a 01       	movw	r18, r20
    5290:	11 27       	eor	r17, r17
    5292:	00 27       	eor	r16, r16
    5294:	4d a9       	sts	0x4d, r20
    5296:	5e a9       	sts	0x4e, r21
    5298:	6f a9       	sts	0x4f, r22
    529a:	78 ad       	sts	0x68, r23
    529c:	60 70       	andi	r22, 0x00	; 0
    529e:	70 70       	andi	r23, 0x00	; 0
    52a0:	04 2b       	or	r16, r20
    52a2:	15 2b       	or	r17, r21
    52a4:	26 2b       	or	r18, r22
    52a6:	37 2b       	or	r19, r23
    52a8:	8d a5       	lds	r24, 0x6d
    52aa:	9e a5       	lds	r25, 0x6e
    52ac:	af a5       	lds	r26, 0x6f
    52ae:	b8 a9       	sts	0x48, r27
    52b0:	0c 15       	cp	r16, r12
    52b2:	1d 05       	cpc	r17, r13
    52b4:	2e 05       	cpc	r18, r14
    52b6:	3f 05       	cpc	r19, r15
    52b8:	c0 f4       	brcc	.+48     	; 0x52ea <__divdi3+0x4f0>
    52ba:	01 97       	sbiw	r24, 0x01	; 1
    52bc:	a1 09       	sbc	r26, r1
    52be:	b1 09       	sbc	r27, r1
    52c0:	08 0d       	add	r16, r8
    52c2:	19 1d       	adc	r17, r9
    52c4:	2a 1d       	adc	r18, r10
    52c6:	3b 1d       	adc	r19, r11
    52c8:	08 15       	cp	r16, r8
    52ca:	19 05       	cpc	r17, r9
    52cc:	2a 05       	cpc	r18, r10
    52ce:	3b 05       	cpc	r19, r11
    52d0:	60 f0       	brcs	.+24     	; 0x52ea <__divdi3+0x4f0>
    52d2:	0c 15       	cp	r16, r12
    52d4:	1d 05       	cpc	r17, r13
    52d6:	2e 05       	cpc	r18, r14
    52d8:	3f 05       	cpc	r19, r15
    52da:	38 f4       	brcc	.+14     	; 0x52ea <__divdi3+0x4f0>
    52dc:	8d a5       	lds	r24, 0x6d
    52de:	9e a5       	lds	r25, 0x6e
    52e0:	af a5       	lds	r26, 0x6f
    52e2:	b8 a9       	sts	0x48, r27
    52e4:	02 97       	sbiw	r24, 0x02	; 2
    52e6:	a1 09       	sbc	r26, r1
    52e8:	b1 09       	sbc	r27, r1
    52ea:	09 a5       	lds	r16, 0x69
    52ec:	1a a5       	lds	r17, 0x6a
    52ee:	2b a5       	lds	r18, 0x6b
    52f0:	3c a5       	lds	r19, 0x6c
    52f2:	78 01       	movw	r14, r16
    52f4:	dd 24       	eor	r13, r13
    52f6:	cc 24       	eor	r12, r12
    52f8:	c8 2a       	or	r12, r24
    52fa:	d9 2a       	or	r13, r25
    52fc:	ea 2a       	or	r14, r26
    52fe:	fb 2a       	or	r15, r27
    5300:	b7 c4       	rjmp	.+2414   	; 0x5c70 <__divdi3+0xe76>
    5302:	81 14       	cp	r8, r1
    5304:	91 04       	cpc	r9, r1
    5306:	a1 04       	cpc	r10, r1
    5308:	b1 04       	cpc	r11, r1
    530a:	51 f4       	brne	.+20     	; 0x5320 <__divdi3+0x526>
    530c:	61 e0       	ldi	r22, 0x01	; 1
    530e:	70 e0       	ldi	r23, 0x00	; 0
    5310:	80 e0       	ldi	r24, 0x00	; 0
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	a5 01       	movw	r20, r10
    5316:	94 01       	movw	r18, r8
    5318:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    531c:	49 01       	movw	r8, r18
    531e:	5a 01       	movw	r10, r20
    5320:	10 e0       	ldi	r17, 0x00	; 0
    5322:	81 16       	cp	r8, r17
    5324:	10 e0       	ldi	r17, 0x00	; 0
    5326:	91 06       	cpc	r9, r17
    5328:	11 e0       	ldi	r17, 0x01	; 1
    532a:	a1 06       	cpc	r10, r17
    532c:	10 e0       	ldi	r17, 0x00	; 0
    532e:	b1 06       	cpc	r11, r17
    5330:	58 f4       	brcc	.+22     	; 0x5348 <__divdi3+0x54e>
    5332:	2f ef       	ldi	r18, 0xFF	; 255
    5334:	82 16       	cp	r8, r18
    5336:	91 04       	cpc	r9, r1
    5338:	a1 04       	cpc	r10, r1
    533a:	b1 04       	cpc	r11, r1
    533c:	09 f0       	breq	.+2      	; 0x5340 <__divdi3+0x546>
    533e:	90 f4       	brcc	.+36     	; 0x5364 <__divdi3+0x56a>
    5340:	80 e0       	ldi	r24, 0x00	; 0
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	dc 01       	movw	r26, r24
    5346:	17 c0       	rjmp	.+46     	; 0x5376 <__divdi3+0x57c>
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	83 16       	cp	r8, r19
    534c:	30 e0       	ldi	r19, 0x00	; 0
    534e:	93 06       	cpc	r9, r19
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	a3 06       	cpc	r10, r19
    5354:	31 e0       	ldi	r19, 0x01	; 1
    5356:	b3 06       	cpc	r11, r19
    5358:	50 f4       	brcc	.+20     	; 0x536e <__divdi3+0x574>
    535a:	80 e1       	ldi	r24, 0x10	; 16
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	a0 e0       	ldi	r26, 0x00	; 0
    5360:	b0 e0       	ldi	r27, 0x00	; 0
    5362:	09 c0       	rjmp	.+18     	; 0x5376 <__divdi3+0x57c>
    5364:	88 e0       	ldi	r24, 0x08	; 8
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	a0 e0       	ldi	r26, 0x00	; 0
    536a:	b0 e0       	ldi	r27, 0x00	; 0
    536c:	04 c0       	rjmp	.+8      	; 0x5376 <__divdi3+0x57c>
    536e:	88 e1       	ldi	r24, 0x18	; 24
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	a0 e0       	ldi	r26, 0x00	; 0
    5374:	b0 e0       	ldi	r27, 0x00	; 0
    5376:	b5 01       	movw	r22, r10
    5378:	a4 01       	movw	r20, r8
    537a:	08 2e       	mov	r0, r24
    537c:	04 c0       	rjmp	.+8      	; 0x5386 <__divdi3+0x58c>
    537e:	76 95       	lsr	r23
    5380:	67 95       	ror	r22
    5382:	57 95       	ror	r21
    5384:	47 95       	ror	r20
    5386:	0a 94       	dec	r0
    5388:	d2 f7       	brpl	.-12     	; 0x537e <__divdi3+0x584>
    538a:	fa 01       	movw	r30, r20
    538c:	ef 5d       	subi	r30, 0xDF	; 223
    538e:	ff 4d       	sbci	r31, 0xDF	; 223
    5390:	20 81       	ld	r18, Z
    5392:	ac 01       	movw	r20, r24
    5394:	bd 01       	movw	r22, r26
    5396:	42 0f       	add	r20, r18
    5398:	51 1d       	adc	r21, r1
    539a:	61 1d       	adc	r22, r1
    539c:	71 1d       	adc	r23, r1
    539e:	80 e2       	ldi	r24, 0x20	; 32
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	a0 e0       	ldi	r26, 0x00	; 0
    53a4:	b0 e0       	ldi	r27, 0x00	; 0
    53a6:	84 1b       	sub	r24, r20
    53a8:	95 0b       	sbc	r25, r21
    53aa:	a6 0b       	sbc	r26, r22
    53ac:	b7 0b       	sbc	r27, r23
    53ae:	51 f4       	brne	.+20     	; 0x53c4 <__divdi3+0x5ca>
    53b0:	c8 18       	sub	r12, r8
    53b2:	d9 08       	sbc	r13, r9
    53b4:	ea 08       	sbc	r14, r10
    53b6:	fb 08       	sbc	r15, r11
    53b8:	f1 e0       	ldi	r31, 0x01	; 1
    53ba:	4f 2e       	mov	r4, r31
    53bc:	51 2c       	mov	r5, r1
    53be:	61 2c       	mov	r6, r1
    53c0:	71 2c       	mov	r7, r1
    53c2:	28 c1       	rjmp	.+592    	; 0x5614 <__divdi3+0x81a>
    53c4:	08 2e       	mov	r0, r24
    53c6:	04 c0       	rjmp	.+8      	; 0x53d0 <__divdi3+0x5d6>
    53c8:	88 0c       	add	r8, r8
    53ca:	99 1c       	adc	r9, r9
    53cc:	aa 1c       	adc	r10, r10
    53ce:	bb 1c       	adc	r11, r11
    53d0:	0a 94       	dec	r0
    53d2:	d2 f7       	brpl	.-12     	; 0x53c8 <__divdi3+0x5ce>
    53d4:	97 01       	movw	r18, r14
    53d6:	86 01       	movw	r16, r12
    53d8:	04 2e       	mov	r0, r20
    53da:	04 c0       	rjmp	.+8      	; 0x53e4 <__divdi3+0x5ea>
    53dc:	36 95       	lsr	r19
    53de:	27 95       	ror	r18
    53e0:	17 95       	ror	r17
    53e2:	07 95       	ror	r16
    53e4:	0a 94       	dec	r0
    53e6:	d2 f7       	brpl	.-12     	; 0x53dc <__divdi3+0x5e2>
    53e8:	09 ab       	sts	0x59, r16
    53ea:	1a ab       	sts	0x5a, r17
    53ec:	2b ab       	sts	0x5b, r18
    53ee:	3c ab       	sts	0x5c, r19
    53f0:	97 01       	movw	r18, r14
    53f2:	86 01       	movw	r16, r12
    53f4:	08 2e       	mov	r0, r24
    53f6:	04 c0       	rjmp	.+8      	; 0x5400 <__divdi3+0x606>
    53f8:	00 0f       	add	r16, r16
    53fa:	11 1f       	adc	r17, r17
    53fc:	22 1f       	adc	r18, r18
    53fe:	33 1f       	adc	r19, r19
    5400:	0a 94       	dec	r0
    5402:	d2 f7       	brpl	.-12     	; 0x53f8 <__divdi3+0x5fe>
    5404:	0d a7       	lds	r16, 0x7d
    5406:	1e a7       	lds	r17, 0x7e
    5408:	2f a7       	lds	r18, 0x7f
    540a:	38 ab       	sts	0x58, r19
    540c:	ed a8       	sts	0x8d, r30
    540e:	fe a8       	sts	0x8e, r31
    5410:	0f a9       	sts	0x4f, r16
    5412:	18 ad       	sts	0x68, r17
    5414:	04 c0       	rjmp	.+8      	; 0x541e <__divdi3+0x624>
    5416:	16 95       	lsr	r17
    5418:	07 95       	ror	r16
    541a:	f7 94       	ror	r15
    541c:	e7 94       	ror	r14
    541e:	4a 95       	dec	r20
    5420:	d2 f7       	brpl	.-12     	; 0x5416 <__divdi3+0x61c>
    5422:	b8 01       	movw	r22, r16
    5424:	a7 01       	movw	r20, r14
    5426:	0d a5       	lds	r16, 0x6d
    5428:	1e a5       	lds	r17, 0x6e
    542a:	2f a5       	lds	r18, 0x6f
    542c:	38 a9       	sts	0x48, r19
    542e:	04 2b       	or	r16, r20
    5430:	15 2b       	or	r17, r21
    5432:	26 2b       	or	r18, r22
    5434:	37 2b       	or	r19, r23
    5436:	0d a7       	lds	r16, 0x7d
    5438:	1e a7       	lds	r17, 0x7e
    543a:	2f a7       	lds	r18, 0x7f
    543c:	38 ab       	sts	0x58, r19
    543e:	ed a8       	sts	0x8d, r30
    5440:	fe a8       	sts	0x8e, r31
    5442:	0f a9       	sts	0x4f, r16
    5444:	18 ad       	sts	0x68, r17
    5446:	04 c0       	rjmp	.+8      	; 0x5450 <__divdi3+0x656>
    5448:	ee 0c       	add	r14, r14
    544a:	ff 1c       	adc	r15, r15
    544c:	00 1f       	adc	r16, r16
    544e:	11 1f       	adc	r17, r17
    5450:	8a 95       	dec	r24
    5452:	d2 f7       	brpl	.-12     	; 0x5448 <__divdi3+0x64e>
    5454:	ed aa       	sts	0x9d, r30
    5456:	fe aa       	sts	0x9e, r31
    5458:	0f ab       	sts	0x5f, r16
    545a:	18 af       	sts	0x78, r17
    545c:	25 01       	movw	r4, r10
    545e:	66 24       	eor	r6, r6
    5460:	77 24       	eor	r7, r7
    5462:	95 01       	movw	r18, r10
    5464:	84 01       	movw	r16, r8
    5466:	20 70       	andi	r18, 0x00	; 0
    5468:	30 70       	andi	r19, 0x00	; 0
    546a:	09 af       	sts	0x79, r16
    546c:	1a af       	sts	0x7a, r17
    546e:	2b af       	sts	0x7b, r18
    5470:	3c af       	sts	0x7c, r19
    5472:	69 a9       	sts	0x49, r22
    5474:	7a a9       	sts	0x4a, r23
    5476:	8b a9       	sts	0x4b, r24
    5478:	9c a9       	sts	0x4c, r25
    547a:	a3 01       	movw	r20, r6
    547c:	92 01       	movw	r18, r4
    547e:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5482:	29 a7       	lds	r18, 0x79
    5484:	3a a7       	lds	r19, 0x7a
    5486:	4b a7       	lds	r20, 0x7b
    5488:	5c a7       	lds	r21, 0x7c
    548a:	6b 01       	movw	r12, r22
    548c:	7c 01       	movw	r14, r24
    548e:	69 a9       	sts	0x49, r22
    5490:	7a a9       	sts	0x4a, r23
    5492:	8b a9       	sts	0x4b, r24
    5494:	9c a9       	sts	0x4c, r25
    5496:	a3 01       	movw	r20, r6
    5498:	92 01       	movw	r18, r4
    549a:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    549e:	ca 01       	movw	r24, r20
    54a0:	b9 01       	movw	r22, r18
    54a2:	29 ad       	sts	0x69, r18
    54a4:	3a ad       	sts	0x6a, r19
    54a6:	4b ad       	sts	0x6b, r20
    54a8:	5c ad       	sts	0x6c, r21
    54aa:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    54ae:	ab 01       	movw	r20, r22
    54b0:	bc 01       	movw	r22, r24
    54b2:	76 01       	movw	r14, r12
    54b4:	dd 24       	eor	r13, r13
    54b6:	cc 24       	eor	r12, r12
    54b8:	0d a5       	lds	r16, 0x6d
    54ba:	1e a5       	lds	r17, 0x6e
    54bc:	2f a5       	lds	r18, 0x6f
    54be:	38 a9       	sts	0x48, r19
    54c0:	c9 01       	movw	r24, r18
    54c2:	aa 27       	eor	r26, r26
    54c4:	bb 27       	eor	r27, r27
    54c6:	c8 2a       	or	r12, r24
    54c8:	d9 2a       	or	r13, r25
    54ca:	ea 2a       	or	r14, r26
    54cc:	fb 2a       	or	r15, r27
    54ce:	09 a5       	lds	r16, 0x69
    54d0:	1a a5       	lds	r17, 0x6a
    54d2:	2b a5       	lds	r18, 0x6b
    54d4:	3c a5       	lds	r19, 0x6c
    54d6:	c4 16       	cp	r12, r20
    54d8:	d5 06       	cpc	r13, r21
    54da:	e6 06       	cpc	r14, r22
    54dc:	f7 06       	cpc	r15, r23
    54de:	38 f5       	brcc	.+78     	; 0x552e <__divdi3+0x734>
    54e0:	01 50       	subi	r16, 0x01	; 1
    54e2:	10 40       	sbci	r17, 0x00	; 0
    54e4:	20 40       	sbci	r18, 0x00	; 0
    54e6:	30 40       	sbci	r19, 0x00	; 0
    54e8:	09 ab       	sts	0x59, r16
    54ea:	1a ab       	sts	0x5a, r17
    54ec:	2b ab       	sts	0x5b, r18
    54ee:	3c ab       	sts	0x5c, r19
    54f0:	c8 0c       	add	r12, r8
    54f2:	d9 1c       	adc	r13, r9
    54f4:	ea 1c       	adc	r14, r10
    54f6:	fb 1c       	adc	r15, r11
    54f8:	c8 14       	cp	r12, r8
    54fa:	d9 04       	cpc	r13, r9
    54fc:	ea 04       	cpc	r14, r10
    54fe:	fb 04       	cpc	r15, r11
    5500:	d0 f0       	brcs	.+52     	; 0x5536 <__divdi3+0x73c>
    5502:	c4 16       	cp	r12, r20
    5504:	d5 06       	cpc	r13, r21
    5506:	e6 06       	cpc	r14, r22
    5508:	f7 06       	cpc	r15, r23
    550a:	a8 f4       	brcc	.+42     	; 0x5536 <__divdi3+0x73c>
    550c:	09 a5       	lds	r16, 0x69
    550e:	1a a5       	lds	r17, 0x6a
    5510:	2b a5       	lds	r18, 0x6b
    5512:	3c a5       	lds	r19, 0x6c
    5514:	02 50       	subi	r16, 0x02	; 2
    5516:	10 40       	sbci	r17, 0x00	; 0
    5518:	20 40       	sbci	r18, 0x00	; 0
    551a:	30 40       	sbci	r19, 0x00	; 0
    551c:	09 ab       	sts	0x59, r16
    551e:	1a ab       	sts	0x5a, r17
    5520:	2b ab       	sts	0x5b, r18
    5522:	3c ab       	sts	0x5c, r19
    5524:	c8 0c       	add	r12, r8
    5526:	d9 1c       	adc	r13, r9
    5528:	ea 1c       	adc	r14, r10
    552a:	fb 1c       	adc	r15, r11
    552c:	04 c0       	rjmp	.+8      	; 0x5536 <__divdi3+0x73c>
    552e:	09 ab       	sts	0x59, r16
    5530:	1a ab       	sts	0x5a, r17
    5532:	2b ab       	sts	0x5b, r18
    5534:	3c ab       	sts	0x5c, r19
    5536:	c4 1a       	sub	r12, r20
    5538:	d5 0a       	sbc	r13, r21
    553a:	e6 0a       	sbc	r14, r22
    553c:	f7 0a       	sbc	r15, r23
    553e:	c7 01       	movw	r24, r14
    5540:	b6 01       	movw	r22, r12
    5542:	a3 01       	movw	r20, r6
    5544:	92 01       	movw	r18, r4
    5546:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    554a:	29 a7       	lds	r18, 0x79
    554c:	3a a7       	lds	r19, 0x7a
    554e:	4b a7       	lds	r20, 0x7b
    5550:	5c a7       	lds	r21, 0x7c
    5552:	21 96       	adiw	r28, 0x01	; 1
    5554:	6c af       	sts	0x7c, r22
    5556:	7d af       	sts	0x7d, r23
    5558:	8e af       	sts	0x7e, r24
    555a:	9f af       	sts	0x7f, r25
    555c:	21 97       	sbiw	r28, 0x01	; 1
    555e:	c7 01       	movw	r24, r14
    5560:	b6 01       	movw	r22, r12
    5562:	a3 01       	movw	r20, r6
    5564:	92 01       	movw	r18, r4
    5566:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    556a:	ca 01       	movw	r24, r20
    556c:	b9 01       	movw	r22, r18
    556e:	29 ad       	sts	0x69, r18
    5570:	3a ad       	sts	0x6a, r19
    5572:	4b ad       	sts	0x6b, r20
    5574:	5c ad       	sts	0x6c, r21
    5576:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    557a:	8b 01       	movw	r16, r22
    557c:	9c 01       	movw	r18, r24
    557e:	21 96       	adiw	r28, 0x01	; 1
    5580:	4c ad       	sts	0x6c, r20
    5582:	5d ad       	sts	0x6d, r21
    5584:	6e ad       	sts	0x6e, r22
    5586:	7f ad       	sts	0x6f, r23
    5588:	21 97       	sbiw	r28, 0x01	; 1
    558a:	da 01       	movw	r26, r20
    558c:	99 27       	eor	r25, r25
    558e:	88 27       	eor	r24, r24
    5590:	4d a5       	lds	r20, 0x6d
    5592:	5e a5       	lds	r21, 0x6e
    5594:	6f a5       	lds	r22, 0x6f
    5596:	78 a9       	sts	0x48, r23
    5598:	60 70       	andi	r22, 0x00	; 0
    559a:	70 70       	andi	r23, 0x00	; 0
    559c:	84 2b       	or	r24, r20
    559e:	95 2b       	or	r25, r21
    55a0:	a6 2b       	or	r26, r22
    55a2:	b7 2b       	or	r27, r23
    55a4:	49 a5       	lds	r20, 0x69
    55a6:	5a a5       	lds	r21, 0x6a
    55a8:	6b a5       	lds	r22, 0x6b
    55aa:	7c a5       	lds	r23, 0x6c
    55ac:	80 17       	cp	r24, r16
    55ae:	91 07       	cpc	r25, r17
    55b0:	a2 07       	cpc	r26, r18
    55b2:	b3 07       	cpc	r27, r19
    55b4:	f0 f4       	brcc	.+60     	; 0x55f2 <__divdi3+0x7f8>
    55b6:	41 50       	subi	r20, 0x01	; 1
    55b8:	50 40       	sbci	r21, 0x00	; 0
    55ba:	60 40       	sbci	r22, 0x00	; 0
    55bc:	70 40       	sbci	r23, 0x00	; 0
    55be:	88 0d       	add	r24, r8
    55c0:	99 1d       	adc	r25, r9
    55c2:	aa 1d       	adc	r26, r10
    55c4:	bb 1d       	adc	r27, r11
    55c6:	88 15       	cp	r24, r8
    55c8:	99 05       	cpc	r25, r9
    55ca:	aa 05       	cpc	r26, r10
    55cc:	bb 05       	cpc	r27, r11
    55ce:	88 f0       	brcs	.+34     	; 0x55f2 <__divdi3+0x7f8>
    55d0:	80 17       	cp	r24, r16
    55d2:	91 07       	cpc	r25, r17
    55d4:	a2 07       	cpc	r26, r18
    55d6:	b3 07       	cpc	r27, r19
    55d8:	60 f4       	brcc	.+24     	; 0x55f2 <__divdi3+0x7f8>
    55da:	49 a5       	lds	r20, 0x69
    55dc:	5a a5       	lds	r21, 0x6a
    55de:	6b a5       	lds	r22, 0x6b
    55e0:	7c a5       	lds	r23, 0x6c
    55e2:	42 50       	subi	r20, 0x02	; 2
    55e4:	50 40       	sbci	r21, 0x00	; 0
    55e6:	60 40       	sbci	r22, 0x00	; 0
    55e8:	70 40       	sbci	r23, 0x00	; 0
    55ea:	88 0d       	add	r24, r8
    55ec:	99 1d       	adc	r25, r9
    55ee:	aa 1d       	adc	r26, r10
    55f0:	bb 1d       	adc	r27, r11
    55f2:	6c 01       	movw	r12, r24
    55f4:	7d 01       	movw	r14, r26
    55f6:	c0 1a       	sub	r12, r16
    55f8:	d1 0a       	sbc	r13, r17
    55fa:	e2 0a       	sbc	r14, r18
    55fc:	f3 0a       	sbc	r15, r19
    55fe:	09 a9       	sts	0x49, r16
    5600:	1a a9       	sts	0x4a, r17
    5602:	2b a9       	sts	0x4b, r18
    5604:	3c a9       	sts	0x4c, r19
    5606:	38 01       	movw	r6, r16
    5608:	55 24       	eor	r5, r5
    560a:	44 24       	eor	r4, r4
    560c:	44 2a       	or	r4, r20
    560e:	55 2a       	or	r5, r21
    5610:	66 2a       	or	r6, r22
    5612:	77 2a       	or	r7, r23
    5614:	85 01       	movw	r16, r10
    5616:	22 27       	eor	r18, r18
    5618:	33 27       	eor	r19, r19
    561a:	0d a7       	lds	r16, 0x7d
    561c:	1e a7       	lds	r17, 0x7e
    561e:	2f a7       	lds	r18, 0x7f
    5620:	38 ab       	sts	0x58, r19
    5622:	95 01       	movw	r18, r10
    5624:	84 01       	movw	r16, r8
    5626:	20 70       	andi	r18, 0x00	; 0
    5628:	30 70       	andi	r19, 0x00	; 0
    562a:	09 af       	sts	0x79, r16
    562c:	1a af       	sts	0x7a, r17
    562e:	2b af       	sts	0x7b, r18
    5630:	3c af       	sts	0x7c, r19
    5632:	c7 01       	movw	r24, r14
    5634:	b6 01       	movw	r22, r12
    5636:	2d a5       	lds	r18, 0x6d
    5638:	3e a5       	lds	r19, 0x6e
    563a:	4f a5       	lds	r20, 0x6f
    563c:	58 a9       	sts	0x48, r21
    563e:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5642:	29 a7       	lds	r18, 0x79
    5644:	3a a7       	lds	r19, 0x7a
    5646:	4b a7       	lds	r20, 0x7b
    5648:	5c a7       	lds	r21, 0x7c
    564a:	69 ab       	sts	0x59, r22
    564c:	7a ab       	sts	0x5a, r23
    564e:	8b ab       	sts	0x5b, r24
    5650:	9c ab       	sts	0x5c, r25
    5652:	c7 01       	movw	r24, r14
    5654:	b6 01       	movw	r22, r12
    5656:	2d a5       	lds	r18, 0x6d
    5658:	3e a5       	lds	r19, 0x6e
    565a:	4f a5       	lds	r20, 0x6f
    565c:	58 a9       	sts	0x48, r21
    565e:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5662:	ca 01       	movw	r24, r20
    5664:	b9 01       	movw	r22, r18
    5666:	29 ad       	sts	0x69, r18
    5668:	3a ad       	sts	0x6a, r19
    566a:	4b ad       	sts	0x6b, r20
    566c:	5c ad       	sts	0x6c, r21
    566e:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    5672:	ab 01       	movw	r20, r22
    5674:	bc 01       	movw	r22, r24
    5676:	09 a9       	sts	0x49, r16
    5678:	1a a9       	sts	0x4a, r17
    567a:	2b a9       	sts	0x4b, r18
    567c:	3c a9       	sts	0x4c, r19
    567e:	78 01       	movw	r14, r16
    5680:	dd 24       	eor	r13, r13
    5682:	cc 24       	eor	r12, r12
    5684:	0d a9       	sts	0x4d, r16
    5686:	1e a9       	sts	0x4e, r17
    5688:	2f a9       	sts	0x4f, r18
    568a:	38 ad       	sts	0x68, r19
    568c:	c9 01       	movw	r24, r18
    568e:	aa 27       	eor	r26, r26
    5690:	bb 27       	eor	r27, r27
    5692:	c8 2a       	or	r12, r24
    5694:	d9 2a       	or	r13, r25
    5696:	ea 2a       	or	r14, r26
    5698:	fb 2a       	or	r15, r27
    569a:	09 a5       	lds	r16, 0x69
    569c:	1a a5       	lds	r17, 0x6a
    569e:	2b a5       	lds	r18, 0x6b
    56a0:	3c a5       	lds	r19, 0x6c
    56a2:	c4 16       	cp	r12, r20
    56a4:	d5 06       	cpc	r13, r21
    56a6:	e6 06       	cpc	r14, r22
    56a8:	f7 06       	cpc	r15, r23
    56aa:	38 f5       	brcc	.+78     	; 0x56fa <__divdi3+0x900>
    56ac:	01 50       	subi	r16, 0x01	; 1
    56ae:	10 40       	sbci	r17, 0x00	; 0
    56b0:	20 40       	sbci	r18, 0x00	; 0
    56b2:	30 40       	sbci	r19, 0x00	; 0
    56b4:	09 ab       	sts	0x59, r16
    56b6:	1a ab       	sts	0x5a, r17
    56b8:	2b ab       	sts	0x5b, r18
    56ba:	3c ab       	sts	0x5c, r19
    56bc:	c8 0c       	add	r12, r8
    56be:	d9 1c       	adc	r13, r9
    56c0:	ea 1c       	adc	r14, r10
    56c2:	fb 1c       	adc	r15, r11
    56c4:	c8 14       	cp	r12, r8
    56c6:	d9 04       	cpc	r13, r9
    56c8:	ea 04       	cpc	r14, r10
    56ca:	fb 04       	cpc	r15, r11
    56cc:	d0 f0       	brcs	.+52     	; 0x5702 <__divdi3+0x908>
    56ce:	c4 16       	cp	r12, r20
    56d0:	d5 06       	cpc	r13, r21
    56d2:	e6 06       	cpc	r14, r22
    56d4:	f7 06       	cpc	r15, r23
    56d6:	a8 f4       	brcc	.+42     	; 0x5702 <__divdi3+0x908>
    56d8:	09 a5       	lds	r16, 0x69
    56da:	1a a5       	lds	r17, 0x6a
    56dc:	2b a5       	lds	r18, 0x6b
    56de:	3c a5       	lds	r19, 0x6c
    56e0:	02 50       	subi	r16, 0x02	; 2
    56e2:	10 40       	sbci	r17, 0x00	; 0
    56e4:	20 40       	sbci	r18, 0x00	; 0
    56e6:	30 40       	sbci	r19, 0x00	; 0
    56e8:	09 ab       	sts	0x59, r16
    56ea:	1a ab       	sts	0x5a, r17
    56ec:	2b ab       	sts	0x5b, r18
    56ee:	3c ab       	sts	0x5c, r19
    56f0:	c8 0c       	add	r12, r8
    56f2:	d9 1c       	adc	r13, r9
    56f4:	ea 1c       	adc	r14, r10
    56f6:	fb 1c       	adc	r15, r11
    56f8:	04 c0       	rjmp	.+8      	; 0x5702 <__divdi3+0x908>
    56fa:	09 ab       	sts	0x59, r16
    56fc:	1a ab       	sts	0x5a, r17
    56fe:	2b ab       	sts	0x5b, r18
    5700:	3c ab       	sts	0x5c, r19
    5702:	c4 1a       	sub	r12, r20
    5704:	d5 0a       	sbc	r13, r21
    5706:	e6 0a       	sbc	r14, r22
    5708:	f7 0a       	sbc	r15, r23
    570a:	c7 01       	movw	r24, r14
    570c:	b6 01       	movw	r22, r12
    570e:	2d a5       	lds	r18, 0x6d
    5710:	3e a5       	lds	r19, 0x6e
    5712:	4f a5       	lds	r20, 0x6f
    5714:	58 a9       	sts	0x48, r21
    5716:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    571a:	29 a7       	lds	r18, 0x79
    571c:	3a a7       	lds	r19, 0x7a
    571e:	4b a7       	lds	r20, 0x7b
    5720:	5c a7       	lds	r21, 0x7c
    5722:	21 96       	adiw	r28, 0x01	; 1
    5724:	6c af       	sts	0x7c, r22
    5726:	7d af       	sts	0x7d, r23
    5728:	8e af       	sts	0x7e, r24
    572a:	9f af       	sts	0x7f, r25
    572c:	21 97       	sbiw	r28, 0x01	; 1
    572e:	c7 01       	movw	r24, r14
    5730:	b6 01       	movw	r22, r12
    5732:	2d a5       	lds	r18, 0x6d
    5734:	3e a5       	lds	r19, 0x6e
    5736:	4f a5       	lds	r20, 0x6f
    5738:	58 a9       	sts	0x48, r21
    573a:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    573e:	ca 01       	movw	r24, r20
    5740:	b9 01       	movw	r22, r18
    5742:	29 ad       	sts	0x69, r18
    5744:	3a ad       	sts	0x6a, r19
    5746:	4b ad       	sts	0x6b, r20
    5748:	5c ad       	sts	0x6c, r21
    574a:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    574e:	8b 01       	movw	r16, r22
    5750:	9c 01       	movw	r18, r24
    5752:	21 96       	adiw	r28, 0x01	; 1
    5754:	4c ad       	sts	0x6c, r20
    5756:	5d ad       	sts	0x6d, r21
    5758:	6e ad       	sts	0x6e, r22
    575a:	7f ad       	sts	0x6f, r23
    575c:	21 97       	sbiw	r28, 0x01	; 1
    575e:	da 01       	movw	r26, r20
    5760:	99 27       	eor	r25, r25
    5762:	88 27       	eor	r24, r24
    5764:	4d a9       	sts	0x4d, r20
    5766:	5e a9       	sts	0x4e, r21
    5768:	6f a9       	sts	0x4f, r22
    576a:	78 ad       	sts	0x68, r23
    576c:	60 70       	andi	r22, 0x00	; 0
    576e:	70 70       	andi	r23, 0x00	; 0
    5770:	84 2b       	or	r24, r20
    5772:	95 2b       	or	r25, r21
    5774:	a6 2b       	or	r26, r22
    5776:	b7 2b       	or	r27, r23
    5778:	49 a5       	lds	r20, 0x69
    577a:	5a a5       	lds	r21, 0x6a
    577c:	6b a5       	lds	r22, 0x6b
    577e:	7c a5       	lds	r23, 0x6c
    5780:	80 17       	cp	r24, r16
    5782:	91 07       	cpc	r25, r17
    5784:	a2 07       	cpc	r26, r18
    5786:	b3 07       	cpc	r27, r19
    5788:	d0 f4       	brcc	.+52     	; 0x57be <__divdi3+0x9c4>
    578a:	41 50       	subi	r20, 0x01	; 1
    578c:	50 40       	sbci	r21, 0x00	; 0
    578e:	60 40       	sbci	r22, 0x00	; 0
    5790:	70 40       	sbci	r23, 0x00	; 0
    5792:	88 0d       	add	r24, r8
    5794:	99 1d       	adc	r25, r9
    5796:	aa 1d       	adc	r26, r10
    5798:	bb 1d       	adc	r27, r11
    579a:	88 15       	cp	r24, r8
    579c:	99 05       	cpc	r25, r9
    579e:	aa 05       	cpc	r26, r10
    57a0:	bb 05       	cpc	r27, r11
    57a2:	68 f0       	brcs	.+26     	; 0x57be <__divdi3+0x9c4>
    57a4:	80 17       	cp	r24, r16
    57a6:	91 07       	cpc	r25, r17
    57a8:	a2 07       	cpc	r26, r18
    57aa:	b3 07       	cpc	r27, r19
    57ac:	40 f4       	brcc	.+16     	; 0x57be <__divdi3+0x9c4>
    57ae:	49 a5       	lds	r20, 0x69
    57b0:	5a a5       	lds	r21, 0x6a
    57b2:	6b a5       	lds	r22, 0x6b
    57b4:	7c a5       	lds	r23, 0x6c
    57b6:	42 50       	subi	r20, 0x02	; 2
    57b8:	50 40       	sbci	r21, 0x00	; 0
    57ba:	60 40       	sbci	r22, 0x00	; 0
    57bc:	70 40       	sbci	r23, 0x00	; 0
    57be:	09 a9       	sts	0x49, r16
    57c0:	1a a9       	sts	0x4a, r17
    57c2:	2b a9       	sts	0x4b, r18
    57c4:	3c a9       	sts	0x4c, r19
    57c6:	78 01       	movw	r14, r16
    57c8:	dd 24       	eor	r13, r13
    57ca:	cc 24       	eor	r12, r12
    57cc:	c4 2a       	or	r12, r20
    57ce:	d5 2a       	or	r13, r21
    57d0:	e6 2a       	or	r14, r22
    57d2:	f7 2a       	or	r15, r23
    57d4:	50 c2       	rjmp	.+1184   	; 0x5c76 <__divdi3+0xe7c>
    57d6:	c8 16       	cp	r12, r24
    57d8:	d9 06       	cpc	r13, r25
    57da:	ea 06       	cpc	r14, r26
    57dc:	fb 06       	cpc	r15, r27
    57de:	08 f4       	brcc	.+2      	; 0x57e2 <__divdi3+0x9e8>
    57e0:	37 c2       	rjmp	.+1134   	; 0x5c50 <__divdi3+0xe56>
    57e2:	80 30       	cpi	r24, 0x00	; 0
    57e4:	10 e0       	ldi	r17, 0x00	; 0
    57e6:	91 07       	cpc	r25, r17
    57e8:	11 e0       	ldi	r17, 0x01	; 1
    57ea:	a1 07       	cpc	r26, r17
    57ec:	10 e0       	ldi	r17, 0x00	; 0
    57ee:	b1 07       	cpc	r27, r17
    57f0:	50 f4       	brcc	.+20     	; 0x5806 <__divdi3+0xa0c>
    57f2:	8f 3f       	cpi	r24, 0xFF	; 255
    57f4:	91 05       	cpc	r25, r1
    57f6:	a1 05       	cpc	r26, r1
    57f8:	b1 05       	cpc	r27, r1
    57fa:	09 f0       	breq	.+2      	; 0x57fe <__divdi3+0xa04>
    57fc:	88 f4       	brcc	.+34     	; 0x5820 <__divdi3+0xa26>
    57fe:	00 e0       	ldi	r16, 0x00	; 0
    5800:	10 e0       	ldi	r17, 0x00	; 0
    5802:	98 01       	movw	r18, r16
    5804:	16 c0       	rjmp	.+44     	; 0x5832 <__divdi3+0xa38>
    5806:	80 30       	cpi	r24, 0x00	; 0
    5808:	20 e0       	ldi	r18, 0x00	; 0
    580a:	92 07       	cpc	r25, r18
    580c:	20 e0       	ldi	r18, 0x00	; 0
    580e:	a2 07       	cpc	r26, r18
    5810:	21 e0       	ldi	r18, 0x01	; 1
    5812:	b2 07       	cpc	r27, r18
    5814:	50 f4       	brcc	.+20     	; 0x582a <__divdi3+0xa30>
    5816:	00 e1       	ldi	r16, 0x10	; 16
    5818:	10 e0       	ldi	r17, 0x00	; 0
    581a:	20 e0       	ldi	r18, 0x00	; 0
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	09 c0       	rjmp	.+18     	; 0x5832 <__divdi3+0xa38>
    5820:	08 e0       	ldi	r16, 0x08	; 8
    5822:	10 e0       	ldi	r17, 0x00	; 0
    5824:	20 e0       	ldi	r18, 0x00	; 0
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	04 c0       	rjmp	.+8      	; 0x5832 <__divdi3+0xa38>
    582a:	08 e1       	ldi	r16, 0x18	; 24
    582c:	10 e0       	ldi	r17, 0x00	; 0
    582e:	20 e0       	ldi	r18, 0x00	; 0
    5830:	30 e0       	ldi	r19, 0x00	; 0
    5832:	ac 01       	movw	r20, r24
    5834:	bd 01       	movw	r22, r26
    5836:	00 2e       	mov	r0, r16
    5838:	04 c0       	rjmp	.+8      	; 0x5842 <__divdi3+0xa48>
    583a:	76 95       	lsr	r23
    583c:	67 95       	ror	r22
    583e:	57 95       	ror	r21
    5840:	47 95       	ror	r20
    5842:	0a 94       	dec	r0
    5844:	d2 f7       	brpl	.-12     	; 0x583a <__divdi3+0xa40>
    5846:	fa 01       	movw	r30, r20
    5848:	ef 5d       	subi	r30, 0xDF	; 223
    584a:	ff 4d       	sbci	r31, 0xDF	; 223
    584c:	40 81       	ld	r20, Z
    584e:	04 0f       	add	r16, r20
    5850:	11 1d       	adc	r17, r1
    5852:	21 1d       	adc	r18, r1
    5854:	31 1d       	adc	r19, r1
    5856:	40 e2       	ldi	r20, 0x20	; 32
    5858:	50 e0       	ldi	r21, 0x00	; 0
    585a:	60 e0       	ldi	r22, 0x00	; 0
    585c:	70 e0       	ldi	r23, 0x00	; 0
    585e:	40 1b       	sub	r20, r16
    5860:	51 0b       	sbc	r21, r17
    5862:	62 0b       	sbc	r22, r18
    5864:	73 0b       	sbc	r23, r19
    5866:	a1 f4       	brne	.+40     	; 0x5890 <__divdi3+0xa96>
    5868:	8c 15       	cp	r24, r12
    586a:	9d 05       	cpc	r25, r13
    586c:	ae 05       	cpc	r26, r14
    586e:	bf 05       	cpc	r27, r15
    5870:	08 f4       	brcc	.+2      	; 0x5874 <__divdi3+0xa7a>
    5872:	f5 c1       	rjmp	.+1002   	; 0x5c5e <__divdi3+0xe64>
    5874:	ed a8       	sts	0x8d, r30
    5876:	fe a8       	sts	0x8e, r31
    5878:	0f a9       	sts	0x4f, r16
    587a:	18 ad       	sts	0x68, r17
    587c:	44 24       	eor	r4, r4
    587e:	55 24       	eor	r5, r5
    5880:	32 01       	movw	r6, r4
    5882:	e8 14       	cp	r14, r8
    5884:	f9 04       	cpc	r15, r9
    5886:	0a 05       	cpc	r16, r10
    5888:	1b 05       	cpc	r17, r11
    588a:	08 f0       	brcs	.+2      	; 0x588e <__divdi3+0xa94>
    588c:	eb c1       	rjmp	.+982    	; 0x5c64 <__divdi3+0xe6a>
    588e:	e3 c1       	rjmp	.+966    	; 0x5c56 <__divdi3+0xe5c>
    5890:	34 2e       	mov	r3, r20
    5892:	2c 01       	movw	r4, r24
    5894:	3d 01       	movw	r6, r26
    5896:	04 c0       	rjmp	.+8      	; 0x58a0 <__divdi3+0xaa6>
    5898:	44 0c       	add	r4, r4
    589a:	55 1c       	adc	r5, r5
    589c:	66 1c       	adc	r6, r6
    589e:	77 1c       	adc	r7, r7
    58a0:	4a 95       	dec	r20
    58a2:	d2 f7       	brpl	.-12     	; 0x5898 <__divdi3+0xa9e>
    58a4:	d5 01       	movw	r26, r10
    58a6:	c4 01       	movw	r24, r8
    58a8:	00 2e       	mov	r0, r16
    58aa:	04 c0       	rjmp	.+8      	; 0x58b4 <__divdi3+0xaba>
    58ac:	b6 95       	lsr	r27
    58ae:	a7 95       	ror	r26
    58b0:	97 95       	ror	r25
    58b2:	87 95       	ror	r24
    58b4:	0a 94       	dec	r0
    58b6:	d2 f7       	brpl	.-12     	; 0x58ac <__divdi3+0xab2>
    58b8:	48 2a       	or	r4, r24
    58ba:	59 2a       	or	r5, r25
    58bc:	6a 2a       	or	r6, r26
    58be:	7b 2a       	or	r7, r27
    58c0:	a5 01       	movw	r20, r10
    58c2:	94 01       	movw	r18, r8
    58c4:	03 2c       	mov	r0, r3
    58c6:	04 c0       	rjmp	.+8      	; 0x58d0 <__divdi3+0xad6>
    58c8:	22 0f       	add	r18, r18
    58ca:	33 1f       	adc	r19, r19
    58cc:	44 1f       	adc	r20, r20
    58ce:	55 1f       	adc	r21, r21
    58d0:	0a 94       	dec	r0
    58d2:	d2 f7       	brpl	.-12     	; 0x58c8 <__divdi3+0xace>
    58d4:	29 af       	sts	0x79, r18
    58d6:	3a af       	sts	0x7a, r19
    58d8:	4b af       	sts	0x7b, r20
    58da:	5c af       	sts	0x7c, r21
    58dc:	b7 01       	movw	r22, r14
    58de:	a6 01       	movw	r20, r12
    58e0:	00 2e       	mov	r0, r16
    58e2:	04 c0       	rjmp	.+8      	; 0x58ec <__divdi3+0xaf2>
    58e4:	76 95       	lsr	r23
    58e6:	67 95       	ror	r22
    58e8:	57 95       	ror	r21
    58ea:	47 95       	ror	r20
    58ec:	0a 94       	dec	r0
    58ee:	d2 f7       	brpl	.-12     	; 0x58e4 <__divdi3+0xaea>
    58f0:	49 ab       	sts	0x59, r20
    58f2:	5a ab       	sts	0x5a, r21
    58f4:	6b ab       	sts	0x5b, r22
    58f6:	7c ab       	sts	0x5c, r23
    58f8:	c7 01       	movw	r24, r14
    58fa:	b6 01       	movw	r22, r12
    58fc:	03 2c       	mov	r0, r3
    58fe:	04 c0       	rjmp	.+8      	; 0x5908 <__divdi3+0xb0e>
    5900:	66 0f       	add	r22, r22
    5902:	77 1f       	adc	r23, r23
    5904:	88 1f       	adc	r24, r24
    5906:	99 1f       	adc	r25, r25
    5908:	0a 94       	dec	r0
    590a:	d2 f7       	brpl	.-12     	; 0x5900 <__divdi3+0xb06>
    590c:	6d a7       	lds	r22, 0x7d
    590e:	7e a7       	lds	r23, 0x7e
    5910:	8f a7       	lds	r24, 0x7f
    5912:	98 ab       	sts	0x58, r25
    5914:	8d a9       	sts	0x4d, r24
    5916:	9e a9       	sts	0x4e, r25
    5918:	af a9       	sts	0x4f, r26
    591a:	b8 ad       	sts	0x68, r27
    591c:	04 c0       	rjmp	.+8      	; 0x5926 <__divdi3+0xb2c>
    591e:	b6 95       	lsr	r27
    5920:	a7 95       	ror	r26
    5922:	97 95       	ror	r25
    5924:	87 95       	ror	r24
    5926:	0a 95       	dec	r16
    5928:	d2 f7       	brpl	.-12     	; 0x591e <__divdi3+0xb24>
    592a:	4d a5       	lds	r20, 0x6d
    592c:	5e a5       	lds	r21, 0x6e
    592e:	6f a5       	lds	r22, 0x6f
    5930:	78 a9       	sts	0x48, r23
    5932:	48 2b       	or	r20, r24
    5934:	59 2b       	or	r21, r25
    5936:	6a 2b       	or	r22, r26
    5938:	7b 2b       	or	r23, r27
    593a:	4d a7       	lds	r20, 0x7d
    593c:	5e a7       	lds	r21, 0x7e
    593e:	6f a7       	lds	r22, 0x7f
    5940:	78 ab       	sts	0x58, r23
    5942:	43 01       	movw	r8, r6
    5944:	aa 24       	eor	r10, r10
    5946:	bb 24       	eor	r11, r11
    5948:	93 01       	movw	r18, r6
    594a:	82 01       	movw	r16, r4
    594c:	20 70       	andi	r18, 0x00	; 0
    594e:	30 70       	andi	r19, 0x00	; 0
    5950:	21 96       	adiw	r28, 0x01	; 1
    5952:	0c af       	sts	0x7c, r16
    5954:	1d af       	sts	0x7d, r17
    5956:	2e af       	sts	0x7e, r18
    5958:	3f af       	sts	0x7f, r19
    595a:	21 97       	sbiw	r28, 0x01	; 1
    595c:	69 a9       	sts	0x49, r22
    595e:	7a a9       	sts	0x4a, r23
    5960:	8b a9       	sts	0x4b, r24
    5962:	9c a9       	sts	0x4c, r25
    5964:	a5 01       	movw	r20, r10
    5966:	94 01       	movw	r18, r8
    5968:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    596c:	29 a7       	lds	r18, 0x79
    596e:	3a a7       	lds	r19, 0x7a
    5970:	4b a7       	lds	r20, 0x7b
    5972:	5c a7       	lds	r21, 0x7c
    5974:	6b 01       	movw	r12, r22
    5976:	7c 01       	movw	r14, r24
    5978:	69 a9       	sts	0x49, r22
    597a:	7a a9       	sts	0x4a, r23
    597c:	8b a9       	sts	0x4b, r24
    597e:	9c a9       	sts	0x4c, r25
    5980:	a5 01       	movw	r20, r10
    5982:	94 01       	movw	r18, r8
    5984:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5988:	ca 01       	movw	r24, r20
    598a:	b9 01       	movw	r22, r18
    598c:	21 96       	adiw	r28, 0x01	; 1
    598e:	2c ad       	sts	0x6c, r18
    5990:	3d ad       	sts	0x6d, r19
    5992:	4e ad       	sts	0x6e, r20
    5994:	5f ad       	sts	0x6f, r21
    5996:	21 97       	sbiw	r28, 0x01	; 1
    5998:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    599c:	dc 01       	movw	r26, r24
    599e:	cb 01       	movw	r24, r22
    59a0:	76 01       	movw	r14, r12
    59a2:	dd 24       	eor	r13, r13
    59a4:	cc 24       	eor	r12, r12
    59a6:	0d a5       	lds	r16, 0x6d
    59a8:	1e a5       	lds	r17, 0x6e
    59aa:	2f a5       	lds	r18, 0x6f
    59ac:	38 a9       	sts	0x48, r19
    59ae:	a9 01       	movw	r20, r18
    59b0:	66 27       	eor	r22, r22
    59b2:	77 27       	eor	r23, r23
    59b4:	c4 2a       	or	r12, r20
    59b6:	d5 2a       	or	r13, r21
    59b8:	e6 2a       	or	r14, r22
    59ba:	f7 2a       	or	r15, r23
    59bc:	09 a5       	lds	r16, 0x69
    59be:	1a a5       	lds	r17, 0x6a
    59c0:	2b a5       	lds	r18, 0x6b
    59c2:	3c a5       	lds	r19, 0x6c
    59c4:	c8 16       	cp	r12, r24
    59c6:	d9 06       	cpc	r13, r25
    59c8:	ea 06       	cpc	r14, r26
    59ca:	fb 06       	cpc	r15, r27
    59cc:	38 f5       	brcc	.+78     	; 0x5a1c <__divdi3+0xc22>
    59ce:	01 50       	subi	r16, 0x01	; 1
    59d0:	10 40       	sbci	r17, 0x00	; 0
    59d2:	20 40       	sbci	r18, 0x00	; 0
    59d4:	30 40       	sbci	r19, 0x00	; 0
    59d6:	09 ab       	sts	0x59, r16
    59d8:	1a ab       	sts	0x5a, r17
    59da:	2b ab       	sts	0x5b, r18
    59dc:	3c ab       	sts	0x5c, r19
    59de:	c4 0c       	add	r12, r4
    59e0:	d5 1c       	adc	r13, r5
    59e2:	e6 1c       	adc	r14, r6
    59e4:	f7 1c       	adc	r15, r7
    59e6:	c4 14       	cp	r12, r4
    59e8:	d5 04       	cpc	r13, r5
    59ea:	e6 04       	cpc	r14, r6
    59ec:	f7 04       	cpc	r15, r7
    59ee:	d0 f0       	brcs	.+52     	; 0x5a24 <__divdi3+0xc2a>
    59f0:	c8 16       	cp	r12, r24
    59f2:	d9 06       	cpc	r13, r25
    59f4:	ea 06       	cpc	r14, r26
    59f6:	fb 06       	cpc	r15, r27
    59f8:	a8 f4       	brcc	.+42     	; 0x5a24 <__divdi3+0xc2a>
    59fa:	09 a5       	lds	r16, 0x69
    59fc:	1a a5       	lds	r17, 0x6a
    59fe:	2b a5       	lds	r18, 0x6b
    5a00:	3c a5       	lds	r19, 0x6c
    5a02:	02 50       	subi	r16, 0x02	; 2
    5a04:	10 40       	sbci	r17, 0x00	; 0
    5a06:	20 40       	sbci	r18, 0x00	; 0
    5a08:	30 40       	sbci	r19, 0x00	; 0
    5a0a:	09 ab       	sts	0x59, r16
    5a0c:	1a ab       	sts	0x5a, r17
    5a0e:	2b ab       	sts	0x5b, r18
    5a10:	3c ab       	sts	0x5c, r19
    5a12:	c4 0c       	add	r12, r4
    5a14:	d5 1c       	adc	r13, r5
    5a16:	e6 1c       	adc	r14, r6
    5a18:	f7 1c       	adc	r15, r7
    5a1a:	04 c0       	rjmp	.+8      	; 0x5a24 <__divdi3+0xc2a>
    5a1c:	09 ab       	sts	0x59, r16
    5a1e:	1a ab       	sts	0x5a, r17
    5a20:	2b ab       	sts	0x5b, r18
    5a22:	3c ab       	sts	0x5c, r19
    5a24:	c8 1a       	sub	r12, r24
    5a26:	d9 0a       	sbc	r13, r25
    5a28:	ea 0a       	sbc	r14, r26
    5a2a:	fb 0a       	sbc	r15, r27
    5a2c:	c7 01       	movw	r24, r14
    5a2e:	b6 01       	movw	r22, r12
    5a30:	a5 01       	movw	r20, r10
    5a32:	94 01       	movw	r18, r8
    5a34:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5a38:	29 a7       	lds	r18, 0x79
    5a3a:	3a a7       	lds	r19, 0x7a
    5a3c:	4b a7       	lds	r20, 0x7b
    5a3e:	5c a7       	lds	r21, 0x7c
    5a40:	29 96       	adiw	r28, 0x09	; 9
    5a42:	6c af       	sts	0x7c, r22
    5a44:	7d af       	sts	0x7d, r23
    5a46:	8e af       	sts	0x7e, r24
    5a48:	9f af       	sts	0x7f, r25
    5a4a:	29 97       	sbiw	r28, 0x09	; 9
    5a4c:	c7 01       	movw	r24, r14
    5a4e:	b6 01       	movw	r22, r12
    5a50:	a5 01       	movw	r20, r10
    5a52:	94 01       	movw	r18, r8
    5a54:	0e 94 24 31 	call	0x6248	; 0x6248 <__udivmodsi4>
    5a58:	ca 01       	movw	r24, r20
    5a5a:	b9 01       	movw	r22, r18
    5a5c:	21 96       	adiw	r28, 0x01	; 1
    5a5e:	2c ad       	sts	0x6c, r18
    5a60:	3d ad       	sts	0x6d, r19
    5a62:	4e ad       	sts	0x6e, r20
    5a64:	5f ad       	sts	0x6f, r21
    5a66:	21 97       	sbiw	r28, 0x01	; 1
    5a68:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    5a6c:	4b 01       	movw	r8, r22
    5a6e:	5c 01       	movw	r10, r24
    5a70:	29 96       	adiw	r28, 0x09	; 9
    5a72:	4c ad       	sts	0x6c, r20
    5a74:	5d ad       	sts	0x6d, r21
    5a76:	6e ad       	sts	0x6e, r22
    5a78:	7f ad       	sts	0x6f, r23
    5a7a:	29 97       	sbiw	r28, 0x09	; 9
    5a7c:	9a 01       	movw	r18, r20
    5a7e:	11 27       	eor	r17, r17
    5a80:	00 27       	eor	r16, r16
    5a82:	8d a5       	lds	r24, 0x6d
    5a84:	9e a5       	lds	r25, 0x6e
    5a86:	af a5       	lds	r26, 0x6f
    5a88:	b8 a9       	sts	0x48, r27
    5a8a:	a0 70       	andi	r26, 0x00	; 0
    5a8c:	b0 70       	andi	r27, 0x00	; 0
    5a8e:	08 2b       	or	r16, r24
    5a90:	19 2b       	or	r17, r25
    5a92:	2a 2b       	or	r18, r26
    5a94:	3b 2b       	or	r19, r27
    5a96:	89 a5       	lds	r24, 0x69
    5a98:	9a a5       	lds	r25, 0x6a
    5a9a:	ab a5       	lds	r26, 0x6b
    5a9c:	bc a5       	lds	r27, 0x6c
    5a9e:	08 15       	cp	r16, r8
    5aa0:	19 05       	cpc	r17, r9
    5aa2:	2a 05       	cpc	r18, r10
    5aa4:	3b 05       	cpc	r19, r11
    5aa6:	e0 f4       	brcc	.+56     	; 0x5ae0 <__divdi3+0xce6>
    5aa8:	01 97       	sbiw	r24, 0x01	; 1
    5aaa:	a1 09       	sbc	r26, r1
    5aac:	b1 09       	sbc	r27, r1
    5aae:	04 0d       	add	r16, r4
    5ab0:	15 1d       	adc	r17, r5
    5ab2:	26 1d       	adc	r18, r6
    5ab4:	37 1d       	adc	r19, r7
    5ab6:	04 15       	cp	r16, r4
    5ab8:	15 05       	cpc	r17, r5
    5aba:	26 05       	cpc	r18, r6
    5abc:	37 05       	cpc	r19, r7
    5abe:	80 f0       	brcs	.+32     	; 0x5ae0 <__divdi3+0xce6>
    5ac0:	08 15       	cp	r16, r8
    5ac2:	19 05       	cpc	r17, r9
    5ac4:	2a 05       	cpc	r18, r10
    5ac6:	3b 05       	cpc	r19, r11
    5ac8:	58 f4       	brcc	.+22     	; 0x5ae0 <__divdi3+0xce6>
    5aca:	89 a5       	lds	r24, 0x69
    5acc:	9a a5       	lds	r25, 0x6a
    5ace:	ab a5       	lds	r26, 0x6b
    5ad0:	bc a5       	lds	r27, 0x6c
    5ad2:	02 97       	sbiw	r24, 0x02	; 2
    5ad4:	a1 09       	sbc	r26, r1
    5ad6:	b1 09       	sbc	r27, r1
    5ad8:	04 0d       	add	r16, r4
    5ada:	15 1d       	adc	r17, r5
    5adc:	26 1d       	adc	r18, r6
    5ade:	37 1d       	adc	r19, r7
    5ae0:	b9 01       	movw	r22, r18
    5ae2:	a8 01       	movw	r20, r16
    5ae4:	48 19       	sub	r20, r8
    5ae6:	59 09       	sbc	r21, r9
    5ae8:	6a 09       	sbc	r22, r10
    5aea:	7b 09       	sbc	r23, r11
    5aec:	4d a7       	lds	r20, 0x7d
    5aee:	5e a7       	lds	r21, 0x7e
    5af0:	6f a7       	lds	r22, 0x7f
    5af2:	78 ab       	sts	0x58, r23
    5af4:	09 a9       	sts	0x49, r16
    5af6:	1a a9       	sts	0x4a, r17
    5af8:	2b a9       	sts	0x4b, r18
    5afa:	3c a9       	sts	0x4c, r19
    5afc:	78 01       	movw	r14, r16
    5afe:	dd 24       	eor	r13, r13
    5b00:	cc 24       	eor	r12, r12
    5b02:	c8 2a       	or	r12, r24
    5b04:	d9 2a       	or	r13, r25
    5b06:	ea 2a       	or	r14, r26
    5b08:	fb 2a       	or	r15, r27
    5b0a:	ff ef       	ldi	r31, 0xFF	; 255
    5b0c:	8f 2e       	mov	r8, r31
    5b0e:	ff ef       	ldi	r31, 0xFF	; 255
    5b10:	9f 2e       	mov	r9, r31
    5b12:	a1 2c       	mov	r10, r1
    5b14:	b1 2c       	mov	r11, r1
    5b16:	8c 20       	and	r8, r12
    5b18:	9d 20       	and	r9, r13
    5b1a:	ae 20       	and	r10, r14
    5b1c:	bf 20       	and	r11, r15
    5b1e:	87 01       	movw	r16, r14
    5b20:	22 27       	eor	r18, r18
    5b22:	33 27       	eor	r19, r19
    5b24:	09 a7       	lds	r16, 0x79
    5b26:	1a a7       	lds	r17, 0x7a
    5b28:	2b a7       	lds	r18, 0x7b
    5b2a:	3c a7       	lds	r19, 0x7c
    5b2c:	49 ac       	sts	0xa9, r20
    5b2e:	5a ac       	sts	0xaa, r21
    5b30:	6b ac       	sts	0xab, r22
    5b32:	7c ac       	sts	0xac, r23
    5b34:	2f ef       	ldi	r18, 0xFF	; 255
    5b36:	3f ef       	ldi	r19, 0xFF	; 255
    5b38:	40 e0       	ldi	r20, 0x00	; 0
    5b3a:	50 e0       	ldi	r21, 0x00	; 0
    5b3c:	42 22       	and	r4, r18
    5b3e:	53 22       	and	r5, r19
    5b40:	64 22       	and	r6, r20
    5b42:	75 22       	and	r7, r21
    5b44:	29 ad       	sts	0x69, r18
    5b46:	3a ad       	sts	0x6a, r19
    5b48:	4b ad       	sts	0x6b, r20
    5b4a:	5c ad       	sts	0x6c, r21
    5b4c:	8a 01       	movw	r16, r20
    5b4e:	22 27       	eor	r18, r18
    5b50:	33 27       	eor	r19, r19
    5b52:	09 ab       	sts	0x59, r16
    5b54:	1a ab       	sts	0x5a, r17
    5b56:	2b ab       	sts	0x5b, r18
    5b58:	3c ab       	sts	0x5c, r19
    5b5a:	c5 01       	movw	r24, r10
    5b5c:	b4 01       	movw	r22, r8
    5b5e:	a3 01       	movw	r20, r6
    5b60:	92 01       	movw	r18, r4
    5b62:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    5b66:	69 af       	sts	0x79, r22
    5b68:	7a af       	sts	0x7a, r23
    5b6a:	8b af       	sts	0x7b, r24
    5b6c:	9c af       	sts	0x7c, r25
    5b6e:	c5 01       	movw	r24, r10
    5b70:	b4 01       	movw	r22, r8
    5b72:	29 a9       	sts	0x49, r18
    5b74:	3a a9       	sts	0x4a, r19
    5b76:	4b a9       	sts	0x4b, r20
    5b78:	5c a9       	sts	0x4c, r21
    5b7a:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    5b7e:	4b 01       	movw	r8, r22
    5b80:	5c 01       	movw	r10, r24
    5b82:	69 a5       	lds	r22, 0x69
    5b84:	7a a5       	lds	r23, 0x6a
    5b86:	8b a5       	lds	r24, 0x6b
    5b88:	9c a5       	lds	r25, 0x6c
    5b8a:	a3 01       	movw	r20, r6
    5b8c:	92 01       	movw	r18, r4
    5b8e:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    5b92:	2b 01       	movw	r4, r22
    5b94:	3c 01       	movw	r6, r24
    5b96:	69 a5       	lds	r22, 0x69
    5b98:	7a a5       	lds	r23, 0x6a
    5b9a:	8b a5       	lds	r24, 0x6b
    5b9c:	9c a5       	lds	r25, 0x6c
    5b9e:	29 a9       	sts	0x49, r18
    5ba0:	3a a9       	sts	0x4a, r19
    5ba2:	4b a9       	sts	0x4b, r20
    5ba4:	5c a9       	sts	0x4c, r21
    5ba6:	0e 94 de 30 	call	0x61bc	; 0x61bc <__mulsi3>
    5baa:	ab 01       	movw	r20, r22
    5bac:	bc 01       	movw	r22, r24
    5bae:	84 0c       	add	r8, r4
    5bb0:	95 1c       	adc	r9, r5
    5bb2:	a6 1c       	adc	r10, r6
    5bb4:	b7 1c       	adc	r11, r7
    5bb6:	09 ad       	sts	0x69, r16
    5bb8:	1a ad       	sts	0x6a, r17
    5bba:	2b ad       	sts	0x6b, r18
    5bbc:	3c ad       	sts	0x6c, r19
    5bbe:	c9 01       	movw	r24, r18
    5bc0:	aa 27       	eor	r26, r26
    5bc2:	bb 27       	eor	r27, r27
    5bc4:	88 0e       	add	r8, r24
    5bc6:	99 1e       	adc	r9, r25
    5bc8:	aa 1e       	adc	r10, r26
    5bca:	bb 1e       	adc	r11, r27
    5bcc:	84 14       	cp	r8, r4
    5bce:	95 04       	cpc	r9, r5
    5bd0:	a6 04       	cpc	r10, r6
    5bd2:	b7 04       	cpc	r11, r7
    5bd4:	20 f4       	brcc	.+8      	; 0x5bde <__divdi3+0xde4>
    5bd6:	40 50       	subi	r20, 0x00	; 0
    5bd8:	50 40       	sbci	r21, 0x00	; 0
    5bda:	6f 4f       	sbci	r22, 0xFF	; 255
    5bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    5bde:	c5 01       	movw	r24, r10
    5be0:	aa 27       	eor	r26, r26
    5be2:	bb 27       	eor	r27, r27
    5be4:	84 0f       	add	r24, r20
    5be6:	95 1f       	adc	r25, r21
    5be8:	a6 1f       	adc	r26, r22
    5bea:	b7 1f       	adc	r27, r23
    5bec:	0d a5       	lds	r16, 0x6d
    5bee:	1e a5       	lds	r17, 0x6e
    5bf0:	2f a5       	lds	r18, 0x6f
    5bf2:	38 a9       	sts	0x48, r19
    5bf4:	08 17       	cp	r16, r24
    5bf6:	19 07       	cpc	r17, r25
    5bf8:	2a 07       	cpc	r18, r26
    5bfa:	3b 07       	cpc	r19, r27
    5bfc:	18 f1       	brcs	.+70     	; 0x5c44 <__divdi3+0xe4a>
    5bfe:	80 17       	cp	r24, r16
    5c00:	91 07       	cpc	r25, r17
    5c02:	a2 07       	cpc	r26, r18
    5c04:	b3 07       	cpc	r27, r19
    5c06:	a1 f5       	brne	.+104    	; 0x5c70 <__divdi3+0xe76>
    5c08:	54 01       	movw	r10, r8
    5c0a:	99 24       	eor	r9, r9
    5c0c:	88 24       	eor	r8, r8
    5c0e:	89 ad       	sts	0x69, r24
    5c10:	9a ad       	sts	0x6a, r25
    5c12:	ab ad       	sts	0x6b, r26
    5c14:	bc ad       	sts	0x6c, r27
    5c16:	a0 70       	andi	r26, 0x00	; 0
    5c18:	b0 70       	andi	r27, 0x00	; 0
    5c1a:	88 0e       	add	r8, r24
    5c1c:	99 1e       	adc	r9, r25
    5c1e:	aa 1e       	adc	r10, r26
    5c20:	bb 1e       	adc	r11, r27
    5c22:	4d a9       	sts	0x4d, r20
    5c24:	5e a9       	sts	0x4e, r21
    5c26:	6f a9       	sts	0x4f, r22
    5c28:	78 ad       	sts	0x68, r23
    5c2a:	03 2c       	mov	r0, r3
    5c2c:	04 c0       	rjmp	.+8      	; 0x5c36 <__divdi3+0xe3c>
    5c2e:	44 0f       	add	r20, r20
    5c30:	55 1f       	adc	r21, r21
    5c32:	66 1f       	adc	r22, r22
    5c34:	77 1f       	adc	r23, r23
    5c36:	0a 94       	dec	r0
    5c38:	d2 f7       	brpl	.-12     	; 0x5c2e <__divdi3+0xe34>
    5c3a:	48 15       	cp	r20, r8
    5c3c:	59 05       	cpc	r21, r9
    5c3e:	6a 05       	cpc	r22, r10
    5c40:	7b 05       	cpc	r23, r11
    5c42:	b0 f4       	brcc	.+44     	; 0x5c70 <__divdi3+0xe76>
    5c44:	08 94       	sec
    5c46:	c1 08       	sbc	r12, r1
    5c48:	d1 08       	sbc	r13, r1
    5c4a:	e1 08       	sbc	r14, r1
    5c4c:	f1 08       	sbc	r15, r1
    5c4e:	10 c0       	rjmp	.+32     	; 0x5c70 <__divdi3+0xe76>
    5c50:	44 24       	eor	r4, r4
    5c52:	55 24       	eor	r5, r5
    5c54:	32 01       	movw	r6, r4
    5c56:	cc 24       	eor	r12, r12
    5c58:	dd 24       	eor	r13, r13
    5c5a:	76 01       	movw	r14, r12
    5c5c:	0c c0       	rjmp	.+24     	; 0x5c76 <__divdi3+0xe7c>
    5c5e:	44 24       	eor	r4, r4
    5c60:	55 24       	eor	r5, r5
    5c62:	32 01       	movw	r6, r4
    5c64:	81 e0       	ldi	r24, 0x01	; 1
    5c66:	c8 2e       	mov	r12, r24
    5c68:	d1 2c       	mov	r13, r1
    5c6a:	e1 2c       	mov	r14, r1
    5c6c:	f1 2c       	mov	r15, r1
    5c6e:	03 c0       	rjmp	.+6      	; 0x5c76 <__divdi3+0xe7c>
    5c70:	44 24       	eor	r4, r4
    5c72:	55 24       	eor	r5, r5
    5c74:	32 01       	movw	r6, r4
    5c76:	fe 01       	movw	r30, r28
    5c78:	31 96       	adiw	r30, 0x01	; 1
    5c7a:	88 e0       	ldi	r24, 0x08	; 8
    5c7c:	df 01       	movw	r26, r30
    5c7e:	1d 92       	st	X+, r1
    5c80:	8a 95       	dec	r24
    5c82:	e9 f7       	brne	.-6      	; 0x5c7e <__divdi3+0xe84>
    5c84:	c9 82       	std	Y+1, r12	; 0x01
    5c86:	da 82       	std	Y+2, r13	; 0x02
    5c88:	eb 82       	std	Y+3, r14	; 0x03
    5c8a:	fc 82       	std	Y+4, r15	; 0x04
    5c8c:	4d 82       	std	Y+5, r4	; 0x05
    5c8e:	5e 82       	std	Y+6, r5	; 0x06
    5c90:	6f 82       	std	Y+7, r6	; 0x07
    5c92:	78 86       	std	Y+8, r7	; 0x08
    5c94:	2c 2d       	mov	r18, r12
    5c96:	3a 81       	ldd	r19, Y+2	; 0x02
    5c98:	4b 81       	ldd	r20, Y+3	; 0x03
    5c9a:	5c 81       	ldd	r21, Y+4	; 0x04
    5c9c:	64 2d       	mov	r22, r4
    5c9e:	7e 81       	ldd	r23, Y+6	; 0x06
    5ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    5ca2:	98 85       	ldd	r25, Y+8	; 0x08
    5ca4:	25 96       	adiw	r28, 0x05	; 5
    5ca6:	ec ac       	sts	0xac, r30
    5ca8:	fd ac       	sts	0xad, r31
    5caa:	0e ad       	sts	0x6e, r16
    5cac:	1f ad       	sts	0x6f, r17
    5cae:	25 97       	sbiw	r28, 0x05	; 5
    5cb0:	e1 14       	cp	r14, r1
    5cb2:	f1 04       	cpc	r15, r1
    5cb4:	01 05       	cpc	r16, r1
    5cb6:	11 05       	cpc	r17, r1
    5cb8:	09 f4       	brne	.+2      	; 0x5cbc <__divdi3+0xec2>
    5cba:	56 c0       	rjmp	.+172    	; 0x5d68 <__divdi3+0xf6e>
    5cbc:	21 95       	neg	r18
    5cbe:	e1 e0       	ldi	r30, 0x01	; 1
    5cc0:	12 16       	cp	r1, r18
    5cc2:	08 f0       	brcs	.+2      	; 0x5cc6 <__divdi3+0xecc>
    5cc4:	e0 e0       	ldi	r30, 0x00	; 0
    5cc6:	31 95       	neg	r19
    5cc8:	f1 e0       	ldi	r31, 0x01	; 1
    5cca:	13 16       	cp	r1, r19
    5ccc:	08 f0       	brcs	.+2      	; 0x5cd0 <__divdi3+0xed6>
    5cce:	f0 e0       	ldi	r31, 0x00	; 0
    5cd0:	03 2f       	mov	r16, r19
    5cd2:	0e 1b       	sub	r16, r30
    5cd4:	e1 e0       	ldi	r30, 0x01	; 1
    5cd6:	30 17       	cp	r19, r16
    5cd8:	08 f0       	brcs	.+2      	; 0x5cdc <__divdi3+0xee2>
    5cda:	e0 e0       	ldi	r30, 0x00	; 0
    5cdc:	fe 2b       	or	r31, r30
    5cde:	41 95       	neg	r20
    5ce0:	e1 e0       	ldi	r30, 0x01	; 1
    5ce2:	14 16       	cp	r1, r20
    5ce4:	08 f0       	brcs	.+2      	; 0x5ce8 <__divdi3+0xeee>
    5ce6:	e0 e0       	ldi	r30, 0x00	; 0
    5ce8:	14 2f       	mov	r17, r20
    5cea:	1f 1b       	sub	r17, r31
    5cec:	31 e0       	ldi	r19, 0x01	; 1
    5cee:	41 17       	cp	r20, r17
    5cf0:	08 f0       	brcs	.+2      	; 0x5cf4 <__divdi3+0xefa>
    5cf2:	30 e0       	ldi	r19, 0x00	; 0
    5cf4:	e3 2b       	or	r30, r19
    5cf6:	51 95       	neg	r21
    5cf8:	f1 e0       	ldi	r31, 0x01	; 1
    5cfa:	15 16       	cp	r1, r21
    5cfc:	08 f0       	brcs	.+2      	; 0x5d00 <__divdi3+0xf06>
    5cfe:	f0 e0       	ldi	r31, 0x00	; 0
    5d00:	b5 2f       	mov	r27, r21
    5d02:	be 1b       	sub	r27, r30
    5d04:	31 e0       	ldi	r19, 0x01	; 1
    5d06:	5b 17       	cp	r21, r27
    5d08:	08 f0       	brcs	.+2      	; 0x5d0c <__divdi3+0xf12>
    5d0a:	30 e0       	ldi	r19, 0x00	; 0
    5d0c:	f3 2b       	or	r31, r19
    5d0e:	61 95       	neg	r22
    5d10:	e1 e0       	ldi	r30, 0x01	; 1
    5d12:	16 16       	cp	r1, r22
    5d14:	08 f0       	brcs	.+2      	; 0x5d18 <__divdi3+0xf1e>
    5d16:	e0 e0       	ldi	r30, 0x00	; 0
    5d18:	46 2e       	mov	r4, r22
    5d1a:	4f 1a       	sub	r4, r31
    5d1c:	31 e0       	ldi	r19, 0x01	; 1
    5d1e:	64 15       	cp	r22, r4
    5d20:	08 f0       	brcs	.+2      	; 0x5d24 <__divdi3+0xf2a>
    5d22:	30 e0       	ldi	r19, 0x00	; 0
    5d24:	e3 2b       	or	r30, r19
    5d26:	71 95       	neg	r23
    5d28:	f1 e0       	ldi	r31, 0x01	; 1
    5d2a:	17 16       	cp	r1, r23
    5d2c:	08 f0       	brcs	.+2      	; 0x5d30 <__divdi3+0xf36>
    5d2e:	f0 e0       	ldi	r31, 0x00	; 0
    5d30:	a7 2f       	mov	r26, r23
    5d32:	ae 1b       	sub	r26, r30
    5d34:	31 e0       	ldi	r19, 0x01	; 1
    5d36:	7a 17       	cp	r23, r26
    5d38:	08 f0       	brcs	.+2      	; 0x5d3c <__divdi3+0xf42>
    5d3a:	30 e0       	ldi	r19, 0x00	; 0
    5d3c:	f3 2b       	or	r31, r19
    5d3e:	81 95       	neg	r24
    5d40:	e1 e0       	ldi	r30, 0x01	; 1
    5d42:	18 16       	cp	r1, r24
    5d44:	08 f0       	brcs	.+2      	; 0x5d48 <__divdi3+0xf4e>
    5d46:	e0 e0       	ldi	r30, 0x00	; 0
    5d48:	f8 2e       	mov	r15, r24
    5d4a:	ff 1a       	sub	r15, r31
    5d4c:	ff 2d       	mov	r31, r15
    5d4e:	31 e0       	ldi	r19, 0x01	; 1
    5d50:	8f 15       	cp	r24, r15
    5d52:	08 f0       	brcs	.+2      	; 0x5d56 <__divdi3+0xf5c>
    5d54:	30 e0       	ldi	r19, 0x00	; 0
    5d56:	e3 2b       	or	r30, r19
    5d58:	91 95       	neg	r25
    5d5a:	30 2f       	mov	r19, r16
    5d5c:	41 2f       	mov	r20, r17
    5d5e:	5b 2f       	mov	r21, r27
    5d60:	64 2d       	mov	r22, r4
    5d62:	7a 2f       	mov	r23, r26
    5d64:	8f 2f       	mov	r24, r31
    5d66:	9e 1b       	sub	r25, r30
    5d68:	c8 5b       	subi	r28, 0xB8	; 184
    5d6a:	df 4f       	sbci	r29, 0xFF	; 255
    5d6c:	e1 e1       	ldi	r30, 0x11	; 17
    5d6e:	0c 94 7b 31 	jmp	0x62f6	; 0x62f6 <__epilogue_restores__+0x2>

00005d72 <main>:

#include "E-000001-000009_firmware_rev_1_0.h"



int main(void) {
    5d72:	cf 93       	push	r28
    5d74:	df 93       	push	r29
    5d76:	cd b7       	in	r28, 0x3d	; 61
    5d78:	de b7       	in	r29, 0x3e	; 62
    5d7a:	c2 56       	subi	r28, 0x62	; 98
    5d7c:	d1 40       	sbci	r29, 0x01	; 1
    5d7e:	cd bf       	out	0x3d, r28	; 61
    5d80:	de bf       	out	0x3e, r29	; 62
	int32_t BP_13b_avg_uV, BP_13b_min_uV, BP_13b_max_uV, BP_13b_delta_uV, BP_13b_diff1_uV, BP_13b_diff2_uV;
	//uint8_t DATA = {0x05,0x10,0x01,0x05};
	//uint8_t RDATA[512];
	uint8_t filterSettings;
	// set system clock
	set_32MHz();  // for RC clock
    5d82:	0e 94 30 08 	call	0x1060	; 0x1060 <set_32MHz>
	//setXOSC_32MHz();  // for crystal when installed
	// breakpoint 1a - collect room temperature
	CO_collectTemp(&BP_1a_avg_mV, &BP_1a_min_mV, &BP_1a_max_mV);
    5d86:	ce 01       	movw	r24, r28
    5d88:	41 96       	adiw	r24, 0x11	; 17
    5d8a:	be 01       	movw	r22, r28
    5d8c:	61 5f       	subi	r22, 0xF1	; 241
    5d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d90:	ae 01       	movw	r20, r28
    5d92:	43 5f       	subi	r20, 0xF3	; 243
    5d94:	5f 4f       	sbci	r21, 0xFF	; 255
    5d96:	0e 94 76 0b 	call	0x16ec	; 0x16ec <CO_collectTemp>
	// avg 830mV +/- 25% with min/max +/- 1% of avg 
	SD_init();	//initialize SD Card
    5d9a:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <SD_init>
	//SD_write_and_read_knowns();
	error = getBootSectorData();
    5d9e:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <getBootSectorData>
    5da2:	80 93 53 40 	sts	0x4053, r24
	SD_write_and_read_knowns_FAT();
    5da6:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <SD_write_and_read_knowns_FAT>
	SD_disable();
    5daa:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <SD_disable>
	
	//TestRadio();
	chibi_test_radio();
    5dae:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <chibi_test_radio>
	// breakpoint 1b - collect body temperature
	CO_collectTemp(&BP_1b_avg_mV, &BP_1b_min_mV, &BP_1b_max_mV);
    5db2:	ce 01       	movw	r24, r28
    5db4:	0b 96       	adiw	r24, 0x0b	; 11
    5db6:	be 01       	movw	r22, r28
    5db8:	67 5f       	subi	r22, 0xF7	; 247
    5dba:	7f 4f       	sbci	r23, 0xFF	; 255
    5dbc:	ae 01       	movw	r20, r28
    5dbe:	49 5f       	subi	r20, 0xF9	; 249
    5dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    5dc2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <CO_collectTemp>
	// avg should increase from breakpoint 1a
	// min/max +/- 1% of avg

	// breakpoint 2 - collect battery voltage
	CO_collectBatt(&BP_2_avg_mV, &BP_2_min_mV, &BP_2_max_mV);
    5dc6:	ce 01       	movw	r24, r28
    5dc8:	05 96       	adiw	r24, 0x05	; 5
    5dca:	be 01       	movw	r22, r28
    5dcc:	6d 5f       	subi	r22, 0xFD	; 253
    5dce:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd0:	ae 01       	movw	r20, r28
    5dd2:	4f 5f       	subi	r20, 0xFF	; 255
    5dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <CO_collectBatt>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5dda:	00 00       	nop
	
	//set filter for breakpoint 3	
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 3a - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3a_avg_uV, &BP_3a_min_uV, &BP_3a_max_uV,
    5ddc:	80 e0       	ldi	r24, 0x00	; 0
    5dde:	61 ec       	ldi	r22, 0xC1	; 193
    5de0:	ae 01       	movw	r20, r28
    5de2:	41 5a       	subi	r20, 0xA1	; 161
    5de4:	5e 4f       	sbci	r21, 0xFE	; 254
    5de6:	9e 01       	movw	r18, r28
    5de8:	25 5a       	subi	r18, 0xA5	; 165
    5dea:	3e 4f       	sbci	r19, 0xFE	; 254
    5dec:	8e 01       	movw	r16, r28
    5dee:	09 5a       	subi	r16, 0xA9	; 169
    5df0:	1e 4f       	sbci	r17, 0xFE	; 254
    5df2:	ee 24       	eor	r14, r14
    5df4:	e3 94       	inc	r14
    5df6:	ec e0       	ldi	r30, 0x0C	; 12
    5df8:	ce 2e       	mov	r12, r30
    5dfa:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg 600mV +/- 10% with min/max +/- 1% of avg 
	
	// breakpoint 3b - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 2
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3b_avg_uV, &BP_3b_min_uV, &BP_3b_max_uV,
    5dfe:	80 e0       	ldi	r24, 0x00	; 0
    5e00:	61 ec       	ldi	r22, 0xC1	; 193
    5e02:	ae 01       	movw	r20, r28
    5e04:	4d 5a       	subi	r20, 0xAD	; 173
    5e06:	5e 4f       	sbci	r21, 0xFE	; 254
    5e08:	9e 01       	movw	r18, r28
    5e0a:	21 5b       	subi	r18, 0xB1	; 177
    5e0c:	3e 4f       	sbci	r19, 0xFE	; 254
    5e0e:	8e 01       	movw	r16, r28
    5e10:	05 5b       	subi	r16, 0xB5	; 181
    5e12:	1e 4f       	sbci	r17, 0xFE	; 254
    5e14:	ee 24       	eor	r14, r14
    5e16:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 300mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
    5e1a:	80 e0       	ldi	r24, 0x00	; 0
    5e1c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5e20:	00 00       	nop

	Ext1Power(TRUE);
    5e22:	81 e0       	ldi	r24, 0x01	; 1
    5e24:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	// breakpoint 3c - collect sample from Channel 1 (ELEC1/ELEC2) gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3c_avg_uV, &BP_3c_min_uV, &BP_3c_max_uV,
    5e28:	80 e0       	ldi	r24, 0x00	; 0
    5e2a:	61 ec       	ldi	r22, 0xC1	; 193
    5e2c:	ae 01       	movw	r20, r28
    5e2e:	49 5b       	subi	r20, 0xB9	; 185
    5e30:	5e 4f       	sbci	r21, 0xFE	; 254
    5e32:	9e 01       	movw	r18, r28
    5e34:	2d 5b       	subi	r18, 0xBD	; 189
    5e36:	3e 4f       	sbci	r19, 0xFE	; 254
    5e38:	8e 01       	movw	r16, r28
    5e3a:	01 5c       	subi	r16, 0xC1	; 193
    5e3c:	1e 4f       	sbci	r17, 0xFE	; 254
    5e3e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 0mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
    5e42:	80 e0       	ldi	r24, 0x00	; 0
    5e44:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5e48:	00 00       	nop

	Ext1Power(TRUE);
    5e4a:	81 e0       	ldi	r24, 0x01	; 1
    5e4c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	// breakpoint 3d - collect sample from Channel 1 (ELEC1/ELEC2) polarity reversed with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3d_avg_uV, &BP_3d_min_uV, &BP_3d_max_uV,
    5e50:	80 e0       	ldi	r24, 0x00	; 0
    5e52:	61 ec       	ldi	r22, 0xC1	; 193
    5e54:	ae 01       	movw	r20, r28
    5e56:	45 5c       	subi	r20, 0xC5	; 197
    5e58:	5e 4f       	sbci	r21, 0xFE	; 254
    5e5a:	9e 01       	movw	r18, r28
    5e5c:	29 5c       	subi	r18, 0xC9	; 201
    5e5e:	3e 4f       	sbci	r19, 0xFE	; 254
    5e60:	8e 01       	movw	r16, r28
    5e62:	0d 5c       	subi	r16, 0xCD	; 205
    5e64:	1e 4f       	sbci	r17, 0xFE	; 254
    5e66:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg -300mV +/- 10% with min/max +/- 1% of avg 

	// breakpoint 3e - collect sample from Channel 1 (ELEC1/ELEC2) polarity reversed with gain of 2
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3e_avg_uV, &BP_3e_min_uV, &BP_3e_max_uV,
    5e6a:	80 e0       	ldi	r24, 0x00	; 0
    5e6c:	61 ec       	ldi	r22, 0xC1	; 193
    5e6e:	ae 01       	movw	r20, r28
    5e70:	41 5d       	subi	r20, 0xD1	; 209
    5e72:	5e 4f       	sbci	r21, 0xFE	; 254
    5e74:	9e 01       	movw	r18, r28
    5e76:	25 5d       	subi	r18, 0xD5	; 213
    5e78:	3e 4f       	sbci	r19, 0xFE	; 254
    5e7a:	8e 01       	movw	r16, r28
    5e7c:	09 5d       	subi	r16, 0xD9	; 217
    5e7e:	1e 4f       	sbci	r17, 0xFE	; 254
    5e80:	ee 24       	eor	r14, r14
    5e82:	e3 94       	inc	r14
    5e84:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg -600mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
    5e88:	80 e0       	ldi	r24, 0x00	; 0
    5e8a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5e8e:	00 00       	nop

	Ext1Power(TRUE);
    5e90:	81 e0       	ldi	r24, 0x01	; 1
    5e92:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	// set filter for breakpoint 4
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 4a - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 2
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4a_avg_uV, &BP_4a_min_uV, &BP_4a_max_uV,
    5e96:	81 e0       	ldi	r24, 0x01	; 1
    5e98:	62 ec       	ldi	r22, 0xC2	; 194
    5e9a:	ae 01       	movw	r20, r28
    5e9c:	4d 5d       	subi	r20, 0xDD	; 221
    5e9e:	5e 4f       	sbci	r21, 0xFE	; 254
    5ea0:	9e 01       	movw	r18, r28
    5ea2:	21 5e       	subi	r18, 0xE1	; 225
    5ea4:	3e 4f       	sbci	r19, 0xFE	; 254
    5ea6:	8e 01       	movw	r16, r28
    5ea8:	05 5e       	subi	r16, 0xE5	; 229
    5eaa:	1e 4f       	sbci	r17, 0xFE	; 254
    5eac:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg 600mV +/- 10% with min/max +/- 1% of avg 

	// breakpoint 4b - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4b_avg_uV, &BP_4b_min_uV, &BP_4b_max_uV,
    5eb0:	81 e0       	ldi	r24, 0x01	; 1
    5eb2:	62 ec       	ldi	r22, 0xC2	; 194
    5eb4:	ae 01       	movw	r20, r28
    5eb6:	49 5e       	subi	r20, 0xE9	; 233
    5eb8:	5e 4f       	sbci	r21, 0xFE	; 254
    5eba:	9e 01       	movw	r18, r28
    5ebc:	2d 5e       	subi	r18, 0xED	; 237
    5ebe:	3e 4f       	sbci	r19, 0xFE	; 254
    5ec0:	8e 01       	movw	r16, r28
    5ec2:	01 5f       	subi	r16, 0xF1	; 241
    5ec4:	1e 4f       	sbci	r17, 0xFE	; 254
    5ec6:	ee 24       	eor	r14, r14
    5ec8:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 300mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
    5ecc:	80 e0       	ldi	r24, 0x00	; 0
    5ece:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5ed2:	00 00       	nop

	Ext1Power(TRUE);
    5ed4:	81 e0       	ldi	r24, 0x01	; 1
    5ed6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	// breakpoint 4c - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4c_avg_uV, &BP_4c_min_uV, &BP_4c_max_uV,
    5eda:	81 e0       	ldi	r24, 0x01	; 1
    5edc:	62 ec       	ldi	r22, 0xC2	; 194
    5ede:	ae 01       	movw	r20, r28
    5ee0:	45 5f       	subi	r20, 0xF5	; 245
    5ee2:	5e 4f       	sbci	r21, 0xFE	; 254
    5ee4:	9e 01       	movw	r18, r28
    5ee6:	29 5f       	subi	r18, 0xF9	; 249
    5ee8:	3e 4f       	sbci	r19, 0xFE	; 254
    5eea:	8e 01       	movw	r16, r28
    5eec:	0d 5f       	subi	r16, 0xFD	; 253
    5eee:	1e 4f       	sbci	r17, 0xFE	; 254
    5ef0:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 0mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
    5ef4:	80 e0       	ldi	r24, 0x00	; 0
    5ef6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5efa:	00 00       	nop

	Ext1Power(TRUE);
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	// breakpoint 4d - collect sample from Channel 2 (ELEC3/ELEC4) polarity reversed with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4d_avg_uV, &BP_4d_min_uV, &BP_4d_max_uV,
    5f02:	81 e0       	ldi	r24, 0x01	; 1
    5f04:	62 ec       	ldi	r22, 0xC2	; 194
    5f06:	ae 01       	movw	r20, r28
    5f08:	41 50       	subi	r20, 0x01	; 1
    5f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f0c:	9e 01       	movw	r18, r28
    5f0e:	25 50       	subi	r18, 0x05	; 5
    5f10:	3f 4f       	sbci	r19, 0xFF	; 255
    5f12:	8e 01       	movw	r16, r28
    5f14:	09 50       	subi	r16, 0x09	; 9
    5f16:	1f 4f       	sbci	r17, 0xFF	; 255
    5f18:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg -300mV +/- 10% with min/max +/- 1% of avg


	// breakpoint 4e - collect sample from Channel 2 (ELEC3/ELEC4) polarity reversed with gain of 2
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4e_avg_uV, &BP_4e_min_uV, &BP_4e_max_uV,
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	62 ec       	ldi	r22, 0xC2	; 194
    5f20:	ae 01       	movw	r20, r28
    5f22:	4d 50       	subi	r20, 0x0D	; 13
    5f24:	5f 4f       	sbci	r21, 0xFF	; 255
    5f26:	9e 01       	movw	r18, r28
    5f28:	21 51       	subi	r18, 0x11	; 17
    5f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f2c:	8e 01       	movw	r16, r28
    5f2e:	05 51       	subi	r16, 0x15	; 21
    5f30:	1f 4f       	sbci	r17, 0xFF	; 255
    5f32:	ee 24       	eor	r14, r14
    5f34:	e3 94       	inc	r14
    5f36:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg -600mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
    5f3a:	80 e0       	ldi	r24, 0x00	; 0
    5f3c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5f40:	00 00       	nop

	Ext1Power(TRUE);
    5f42:	81 e0       	ldi	r24, 0x01	; 1
    5f44:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>
	HVPower(TRUE);
    5f48:	81 e0       	ldi	r24, 0x01	; 1
    5f4a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HVPower>

	// set filter for breakpoint 5
	filterSettings = (uint8_t) (FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);
	
	// breakpoint 5a - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_4_gc, filterSettings, &BP_5a_avg_uV, &BP_5a_min_uV, &BP_5a_max_uV,
    5f4e:	83 e0       	ldi	r24, 0x03	; 3
    5f50:	68 ec       	ldi	r22, 0xC8	; 200
    5f52:	ae 01       	movw	r20, r28
    5f54:	49 51       	subi	r20, 0x19	; 25
    5f56:	5f 4f       	sbci	r21, 0xFF	; 255
    5f58:	9e 01       	movw	r18, r28
    5f5a:	2d 51       	subi	r18, 0x1D	; 29
    5f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f5e:	8e 01       	movw	r16, r28
    5f60:	01 52       	subi	r16, 0x21	; 33
    5f62:	1f 4f       	sbci	r17, 0xFF	; 255
    5f64:	ee 24       	eor	r14, r14
    5f66:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 293mV +/- 10% with min/max +/- 1% of avg
	
	HVPower(FALSE);
    5f6a:	80 e0       	ldi	r24, 0x00	; 0
    5f6c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HVPower>
	Ext1Power(FALSE);
    5f70:	80 e0       	ldi	r24, 0x00	; 0
    5f72:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>
	
	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5f76:	00 00       	nop

	Ext1Power(TRUE);
    5f78:	81 e0       	ldi	r24, 0x01	; 1
    5f7a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>
	HVPower(TRUE);
    5f7e:	81 e0       	ldi	r24, 0x01	; 1
    5f80:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HVPower>
	
	// breakpoint 5b - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_4_gc, filterSettings, &BP_5b_avg_uV, &BP_5b_min_uV, &BP_5b_max_uV,
    5f84:	83 e0       	ldi	r24, 0x03	; 3
    5f86:	68 ec       	ldi	r22, 0xC8	; 200
    5f88:	ae 01       	movw	r20, r28
    5f8a:	45 52       	subi	r20, 0x25	; 37
    5f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f8e:	9e 01       	movw	r18, r28
    5f90:	29 52       	subi	r18, 0x29	; 41
    5f92:	3f 4f       	sbci	r19, 0xFF	; 255
    5f94:	8e 01       	movw	r16, r28
    5f96:	0d 52       	subi	r16, 0x2D	; 45
    5f98:	1f 4f       	sbci	r17, 0xFF	; 255
    5f9a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg 571mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
    5f9e:	80 e0       	ldi	r24, 0x00	; 0
    5fa0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HVPower>
	Ext1Power(FALSE);
    5fa4:	80 e0       	ldi	r24, 0x00	; 0
    5fa6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5faa:	00 00       	nop

	Ext1Power(TRUE);
    5fac:	81 e0       	ldi	r24, 0x01	; 1
    5fae:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>
	HVPower(TRUE);
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HVPower>
	
	// set filter for breakpoint 6
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 6a - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_6a_avg_uV, &BP_6a_min_uV, &BP_6a_max_uV,
    5fb8:	84 e0       	ldi	r24, 0x04	; 4
    5fba:	61 ec       	ldi	r22, 0xC1	; 193
    5fbc:	ae 01       	movw	r20, r28
    5fbe:	41 53       	subi	r20, 0x31	; 49
    5fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fc2:	9e 01       	movw	r18, r28
    5fc4:	25 53       	subi	r18, 0x35	; 53
    5fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc8:	8e 01       	movw	r16, r28
    5fca:	09 53       	subi	r16, 0x39	; 57
    5fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    5fce:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
    5fd2:	80 e0       	ldi	r24, 0x00	; 0
    5fd4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HVPower>
	Ext1Power(FALSE);
    5fd8:	80 e0       	ldi	r24, 0x00	; 0
    5fda:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    5fde:	00 00       	nop

	Ext1Power(TRUE);
    5fe0:	81 e0       	ldi	r24, 0x01	; 1
    5fe2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>
	HVPower(TRUE);
    5fe6:	81 e0       	ldi	r24, 0x01	; 1
    5fe8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HVPower>

	// breakpoint 6b - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_6b_avg_uV, &BP_6b_min_uV, &BP_6b_max_uV,
    5fec:	84 e0       	ldi	r24, 0x04	; 4
    5fee:	61 ec       	ldi	r22, 0xC1	; 193
    5ff0:	ae 01       	movw	r20, r28
    5ff2:	4d 53       	subi	r20, 0x3D	; 61
    5ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ff6:	9e 01       	movw	r18, r28
    5ff8:	21 54       	subi	r18, 0x41	; 65
    5ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    5ffc:	8e 01       	movw	r16, r28
    5ffe:	05 54       	subi	r16, 0x45	; 69
    6000:	1f 4f       	sbci	r17, 0xFF	; 255
    6002:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	HVPower(FALSE);
    6006:	80 e0       	ldi	r24, 0x00	; 0
    6008:	0e 94 7e 08 	call	0x10fc	; 0x10fc <HVPower>
	Ext1Power(FALSE);
    600c:	80 e0       	ldi	r24, 0x00	; 0
    600e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    6012:	00 00       	nop

	Ext1Power(TRUE);
    6014:	81 e0       	ldi	r24, 0x01	; 1
    6016:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	// breakpoint 7a - write known values with checksums to FRAM
	// read known values back from FRAM and recalculate checksums
	FRAMWriteKnownsCheck();
    601a:	0e 94 45 19 	call	0x328a	; 0x328a <FRAMWriteKnownsCheck>
	// sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 18CC5ED67 = 6656748903


	// breakpoint 7b - collect sample from all three seismic channels with
	// checksums on FRAM writes and read back recalculating checksums
	FRAMTest3Channel();
    601e:	0e 94 3a 18 	call	0x3074	; 0x3074 <FRAMTest3Channel>
	// checksumADC and checkSumFRAM match

	// breakpoint 7c - collect sample from all three seismic channels with
	// checksums on FRAM writes and read back recalculating checksums
	FRAMTest1Channel();
    6022:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <FRAMTest1Channel>
	// checksumADC and checkSumFRAM match 

	Ext1Power(TRUE);
    6026:	81 e0       	ldi	r24, 0x01	; 1
    6028:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	nop();
    602c:	00 00       	nop

	Ext1Power(TRUE);
    602e:	81 e0       	ldi	r24, 0x01	; 1
    6030:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	// set filter for breakpoint 7
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 7a - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_7a_avg_uV, &BP_7a_min_uV, &BP_7a_max_uV,
    6034:	84 e0       	ldi	r24, 0x04	; 4
    6036:	61 ec       	ldi	r22, 0xC1	; 193
    6038:	ae 01       	movw	r20, r28
    603a:	49 54       	subi	r20, 0x49	; 73
    603c:	5f 4f       	sbci	r21, 0xFF	; 255
    603e:	9e 01       	movw	r18, r28
    6040:	2d 54       	subi	r18, 0x4D	; 77
    6042:	3f 4f       	sbci	r19, 0xFF	; 255
    6044:	8e 01       	movw	r16, r28
    6046:	01 55       	subi	r16, 0x51	; 81
    6048:	1f 4f       	sbci	r17, 0xFF	; 255
    604a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 7b - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_7b_avg_uV, &BP_7b_min_uV, &BP_7b_max_uV,
    604e:	84 e0       	ldi	r24, 0x04	; 4
    6050:	61 ec       	ldi	r22, 0xC1	; 193
    6052:	ae 01       	movw	r20, r28
    6054:	45 55       	subi	r20, 0x55	; 85
    6056:	5f 4f       	sbci	r21, 0xFF	; 255
    6058:	9e 01       	movw	r18, r28
    605a:	29 55       	subi	r18, 0x59	; 89
    605c:	3f 4f       	sbci	r19, 0xFF	; 255
    605e:	8e 01       	movw	r16, r28
    6060:	0d 55       	subi	r16, 0x5D	; 93
    6062:	1f 4f       	sbci	r17, 0xFF	; 255
    6064:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
    6068:	80 e0       	ldi	r24, 0x00	; 0
    606a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Ext1Power>

	//**********************************************************************
	//************ TEARDOWN EXTERNAL CIRCUIT BEFORE PROCEEDING *************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    606e:	00 00       	nop
	// set filter for breakpoint 8
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 8a - collect sample from Channel 6 (ACC x-axis) with gain of 1
	// configure board resting on long edge with J1 facing up
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_8a_avg_uV, &BP_8a_min_uV, &BP_8a_max_uV,
    6070:	85 e0       	ldi	r24, 0x05	; 5
    6072:	62 ec       	ldi	r22, 0xC2	; 194
    6074:	ae 01       	movw	r20, r28
    6076:	41 56       	subi	r20, 0x61	; 97
    6078:	5f 4f       	sbci	r21, 0xFF	; 255
    607a:	9e 01       	movw	r18, r28
    607c:	25 56       	subi	r18, 0x65	; 101
    607e:	3f 4f       	sbci	r19, 0xFF	; 255
    6080:	8e 01       	movw	r16, r28
    6082:	09 56       	subi	r16, 0x69	; 105
    6084:	1f 4f       	sbci	r17, 0xFF	; 255
    6086:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 8b - collect sample from Channel 6 (ACC x-axis) with gain of 1
	// configure board resting on long edge with J1 facing down
 	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_8b_avg_uV, &BP_8b_min_uV, &BP_8b_max_uV,
    608a:	85 e0       	ldi	r24, 0x05	; 5
    608c:	62 ec       	ldi	r22, 0xC2	; 194
    608e:	ae 01       	movw	r20, r28
    6090:	4d 56       	subi	r20, 0x6D	; 109
    6092:	5f 4f       	sbci	r21, 0xFF	; 255
    6094:	9e 01       	movw	r18, r28
    6096:	21 57       	subi	r18, 0x71	; 113
    6098:	3f 4f       	sbci	r19, 0xFF	; 255
    609a:	8e 01       	movw	r16, r28
    609c:	05 57       	subi	r16, 0x75	; 117
    609e:	1f 4f       	sbci	r17, 0xFF	; 255
    60a0:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
	// set filter for breakpoint 9
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 9a - collect sample from Channel 7 (ACC y-axis) with gain of 1
	// configure board resting vertically short edge with J1 facing up
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_9a_avg_uV, &BP_9a_min_uV, &BP_9a_max_uV,
    60a4:	86 e0       	ldi	r24, 0x06	; 6
    60a6:	64 ec       	ldi	r22, 0xC4	; 196
    60a8:	ae 01       	movw	r20, r28
    60aa:	49 57       	subi	r20, 0x79	; 121
    60ac:	5f 4f       	sbci	r21, 0xFF	; 255
    60ae:	9e 01       	movw	r18, r28
    60b0:	2d 57       	subi	r18, 0x7D	; 125
    60b2:	3f 4f       	sbci	r19, 0xFF	; 255
    60b4:	8e 01       	movw	r16, r28
    60b6:	01 58       	subi	r16, 0x81	; 129
    60b8:	1f 4f       	sbci	r17, 0xFF	; 255
    60ba:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 9b - collect sample from Channel 7 (ACC y-axis) with gain of 1
	// configure board resting vertically short edge with J1 facing down
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_9b_avg_uV, &BP_9b_min_uV, &BP_9b_max_uV,
    60be:	86 e0       	ldi	r24, 0x06	; 6
    60c0:	64 ec       	ldi	r22, 0xC4	; 196
    60c2:	ae 01       	movw	r20, r28
    60c4:	45 58       	subi	r20, 0x85	; 133
    60c6:	5f 4f       	sbci	r21, 0xFF	; 255
    60c8:	9e 01       	movw	r18, r28
    60ca:	29 58       	subi	r18, 0x89	; 137
    60cc:	3f 4f       	sbci	r19, 0xFF	; 255
    60ce:	8e 01       	movw	r16, r28
    60d0:	0d 58       	subi	r16, 0x8D	; 141
    60d2:	1f 4f       	sbci	r17, 0xFF	; 255
    60d4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
	// set filter for breakpoint 10
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 10a - collect sample from Channel 8 (ACC z-axis) with gain of 1
	// configure board resting lies flat with J1 facing up
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_10a_avg_uV, &BP_10a_min_uV, &BP_10a_max_uV,
    60d8:	87 e0       	ldi	r24, 0x07	; 7
    60da:	64 ec       	ldi	r22, 0xC4	; 196
    60dc:	ae 01       	movw	r20, r28
    60de:	41 59       	subi	r20, 0x91	; 145
    60e0:	5f 4f       	sbci	r21, 0xFF	; 255
    60e2:	9e 01       	movw	r18, r28
    60e4:	25 59       	subi	r18, 0x95	; 149
    60e6:	3f 4f       	sbci	r19, 0xFF	; 255
    60e8:	8e 01       	movw	r16, r28
    60ea:	09 59       	subi	r16, 0x99	; 153
    60ec:	1f 4f       	sbci	r17, 0xFF	; 255
    60ee:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 10b - collect sample from Channel 8 (ACC z-axis) with gain of 1
	// configure board resting lies flat with J1 facing down
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_10b_avg_uV, &BP_10b_min_uV, &BP_10b_max_uV,
    60f2:	87 e0       	ldi	r24, 0x07	; 7
    60f4:	64 ec       	ldi	r22, 0xC4	; 196
    60f6:	ae 01       	movw	r20, r28
    60f8:	4d 59       	subi	r20, 0x9D	; 157
    60fa:	5f 4f       	sbci	r21, 0xFF	; 255
    60fc:	9e 01       	movw	r18, r28
    60fe:	21 5a       	subi	r18, 0xA1	; 161
    6100:	3f 4f       	sbci	r19, 0xFF	; 255
    6102:	8e 01       	movw	r16, r28
    6104:	05 5a       	subi	r16, 0xA5	; 165
    6106:	1f 4f       	sbci	r17, 0xFF	; 255
    6108:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
	
	//**********************************************************************
	//************ SETUP SINE WAVE GENERATOR BEFORE PROCEEDING *************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
    610c:	00 00       	nop

	// set filter for breakpoint 11
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 11a - collect sample from Channel 6 (ACC x-axis) with gain of 16
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_11a_avg_uV, &BP_11a_min_uV, &BP_11a_max_uV,
    610e:	85 e0       	ldi	r24, 0x05	; 5
    6110:	62 ec       	ldi	r22, 0xC2	; 194
    6112:	ae 01       	movw	r20, r28
    6114:	49 5a       	subi	r20, 0xA9	; 169
    6116:	5f 4f       	sbci	r21, 0xFF	; 255
    6118:	9e 01       	movw	r18, r28
    611a:	2d 5a       	subi	r18, 0xAD	; 173
    611c:	3f 4f       	sbci	r19, 0xFF	; 255
    611e:	8e 01       	movw	r16, r28
    6120:	01 5b       	subi	r16, 0xB1	; 177
    6122:	1f 4f       	sbci	r17, 0xFF	; 255
    6124:	f4 e0       	ldi	r31, 0x04	; 4
    6126:	ef 2e       	mov	r14, r31
    6128:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_11a_delta_uV = BP_11a_max_uV - BP_11a_min_uV;
	BP_11a_diff1_uV = BP_11a_max_uV - BP_11a_avg_uV;
	BP_11a_diff2_uV = BP_11a_avg_uV - BP_11a_min_uV;
	nop();
    612c:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 11b - collect sample from Channel 6 (ACC x-axis) with gain of 16
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_11b_avg_uV, &BP_11b_min_uV, &BP_11b_max_uV,
    612e:	85 e0       	ldi	r24, 0x05	; 5
    6130:	62 ec       	ldi	r22, 0xC2	; 194
    6132:	ae 01       	movw	r20, r28
    6134:	45 5b       	subi	r20, 0xB5	; 181
    6136:	5f 4f       	sbci	r21, 0xFF	; 255
    6138:	9e 01       	movw	r18, r28
    613a:	29 5b       	subi	r18, 0xB9	; 185
    613c:	3f 4f       	sbci	r19, 0xFF	; 255
    613e:	8e 01       	movw	r16, r28
    6140:	0d 5b       	subi	r16, 0xBD	; 189
    6142:	1f 4f       	sbci	r17, 0xFF	; 255
    6144:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_11b_delta_uV = BP_11b_max_uV - BP_11b_min_uV;
	BP_11b_diff1_uV = BP_11b_max_uV - BP_11b_avg_uV;
	BP_11b_diff2_uV = BP_11b_avg_uV - BP_11b_min_uV;
	nop();
    6148:	00 00       	nop

	// set filter for breakpoint 12
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 12a - collect sample from Channel 7 (ACC y-axis) with gain of 16
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_12a_avg_uV, &BP_12a_min_uV, &BP_12a_max_uV,
    614a:	86 e0       	ldi	r24, 0x06	; 6
    614c:	64 ec       	ldi	r22, 0xC4	; 196
    614e:	ae 01       	movw	r20, r28
    6150:	41 5c       	subi	r20, 0xC1	; 193
    6152:	5f 4f       	sbci	r21, 0xFF	; 255
    6154:	9e 01       	movw	r18, r28
    6156:	25 5c       	subi	r18, 0xC5	; 197
    6158:	3f 4f       	sbci	r19, 0xFF	; 255
    615a:	8e 01       	movw	r16, r28
    615c:	09 5c       	subi	r16, 0xC9	; 201
    615e:	1f 4f       	sbci	r17, 0xFF	; 255
    6160:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_12a_delta_uV = BP_12a_max_uV - BP_12a_min_uV;
	BP_12a_diff1_uV = BP_12a_max_uV - BP_12a_avg_uV;
	BP_12a_diff2_uV = BP_12a_avg_uV - BP_12a_min_uV;
	nop();
    6164:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 12b - collect sample from Channel 7 (ACC y-axis) with gain of 16
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_12b_avg_uV, &BP_12b_min_uV, &BP_12b_max_uV,
    6166:	86 e0       	ldi	r24, 0x06	; 6
    6168:	64 ec       	ldi	r22, 0xC4	; 196
    616a:	ae 01       	movw	r20, r28
    616c:	4d 5c       	subi	r20, 0xCD	; 205
    616e:	5f 4f       	sbci	r21, 0xFF	; 255
    6170:	9e 01       	movw	r18, r28
    6172:	21 5d       	subi	r18, 0xD1	; 209
    6174:	3f 4f       	sbci	r19, 0xFF	; 255
    6176:	8e 01       	movw	r16, r28
    6178:	05 5d       	subi	r16, 0xD5	; 213
    617a:	1f 4f       	sbci	r17, 0xFF	; 255
    617c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_12b_delta_uV = BP_12b_max_uV - BP_12b_min_uV;
	BP_12b_diff1_uV = BP_12b_max_uV - BP_12b_avg_uV;
	BP_12b_diff2_uV = BP_12b_avg_uV - BP_12b_min_uV;
	nop();
    6180:	00 00       	nop
	
	// set filter for breakpoint 13
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 13a - collect sample from Channel 8 (ACC z-axis) with gain of 16
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_13a_avg_uV, &BP_13a_min_uV, &BP_13a_max_uV,
    6182:	87 e0       	ldi	r24, 0x07	; 7
    6184:	64 ec       	ldi	r22, 0xC4	; 196
    6186:	ae 01       	movw	r20, r28
    6188:	49 5d       	subi	r20, 0xD9	; 217
    618a:	5f 4f       	sbci	r21, 0xFF	; 255
    618c:	9e 01       	movw	r18, r28
    618e:	2d 5d       	subi	r18, 0xDD	; 221
    6190:	3f 4f       	sbci	r19, 0xFF	; 255
    6192:	8e 01       	movw	r16, r28
    6194:	01 5e       	subi	r16, 0xE1	; 225
    6196:	1f 4f       	sbci	r17, 0xFF	; 255
    6198:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_13a_delta_uV = BP_13a_max_uV - BP_13a_min_uV;
	BP_13a_diff1_uV = BP_13a_max_uV - BP_13a_avg_uV;
	BP_13a_diff2_uV = BP_13a_avg_uV - BP_13a_min_uV;
	nop();
    619c:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 13b - collect sample from Channel 8 (ACC z-axis) with gain of 16
	// configure board resting lies flat with J1 facing down
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_13b_avg_uV, &BP_13b_min_uV, &BP_13b_max_uV,
    619e:	87 e0       	ldi	r24, 0x07	; 7
    61a0:	64 ec       	ldi	r22, 0xC4	; 196
    61a2:	ae 01       	movw	r20, r28
    61a4:	45 5e       	subi	r20, 0xE5	; 229
    61a6:	5f 4f       	sbci	r21, 0xFF	; 255
    61a8:	9e 01       	movw	r18, r28
    61aa:	29 5e       	subi	r18, 0xE9	; 233
    61ac:	3f 4f       	sbci	r19, 0xFF	; 255
    61ae:	8e 01       	movw	r16, r28
    61b0:	0d 5e       	subi	r16, 0xED	; 237
    61b2:	1f 4f       	sbci	r17, 0xFF	; 255
    61b4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_13b_delta_uV = BP_13b_max_uV - BP_13b_min_uV;
	BP_13b_diff1_uV = BP_13b_max_uV - BP_13b_avg_uV;
	BP_13b_diff2_uV = BP_13b_avg_uV - BP_13b_min_uV;
	nop();
    61b8:	00 00       	nop
    61ba:	ff cf       	rjmp	.-2      	; 0x61ba <__stack+0x1bb>

000061bc <__mulsi3>:
    61bc:	62 9f       	mul	r22, r18
    61be:	d0 01       	movw	r26, r0
    61c0:	73 9f       	mul	r23, r19
    61c2:	f0 01       	movw	r30, r0
    61c4:	82 9f       	mul	r24, r18
    61c6:	e0 0d       	add	r30, r0
    61c8:	f1 1d       	adc	r31, r1
    61ca:	64 9f       	mul	r22, r20
    61cc:	e0 0d       	add	r30, r0
    61ce:	f1 1d       	adc	r31, r1
    61d0:	92 9f       	mul	r25, r18
    61d2:	f0 0d       	add	r31, r0
    61d4:	83 9f       	mul	r24, r19
    61d6:	f0 0d       	add	r31, r0
    61d8:	74 9f       	mul	r23, r20
    61da:	f0 0d       	add	r31, r0
    61dc:	65 9f       	mul	r22, r21
    61de:	f0 0d       	add	r31, r0
    61e0:	99 27       	eor	r25, r25
    61e2:	72 9f       	mul	r23, r18
    61e4:	b0 0d       	add	r27, r0
    61e6:	e1 1d       	adc	r30, r1
    61e8:	f9 1f       	adc	r31, r25
    61ea:	63 9f       	mul	r22, r19
    61ec:	b0 0d       	add	r27, r0
    61ee:	e1 1d       	adc	r30, r1
    61f0:	f9 1f       	adc	r31, r25
    61f2:	bd 01       	movw	r22, r26
    61f4:	cf 01       	movw	r24, r30
    61f6:	11 24       	eor	r1, r1
    61f8:	08 95       	ret

000061fa <__udivmodhi4>:
    61fa:	aa 1b       	sub	r26, r26
    61fc:	bb 1b       	sub	r27, r27
    61fe:	51 e1       	ldi	r21, 0x11	; 17
    6200:	07 c0       	rjmp	.+14     	; 0x6210 <__udivmodhi4_ep>

00006202 <__udivmodhi4_loop>:
    6202:	aa 1f       	adc	r26, r26
    6204:	bb 1f       	adc	r27, r27
    6206:	a6 17       	cp	r26, r22
    6208:	b7 07       	cpc	r27, r23
    620a:	10 f0       	brcs	.+4      	; 0x6210 <__udivmodhi4_ep>
    620c:	a6 1b       	sub	r26, r22
    620e:	b7 0b       	sbc	r27, r23

00006210 <__udivmodhi4_ep>:
    6210:	88 1f       	adc	r24, r24
    6212:	99 1f       	adc	r25, r25
    6214:	5a 95       	dec	r21
    6216:	a9 f7       	brne	.-22     	; 0x6202 <__udivmodhi4_loop>
    6218:	80 95       	com	r24
    621a:	90 95       	com	r25
    621c:	bc 01       	movw	r22, r24
    621e:	cd 01       	movw	r24, r26
    6220:	08 95       	ret

00006222 <__divmodhi4>:
    6222:	97 fb       	bst	r25, 7
    6224:	09 2e       	mov	r0, r25
    6226:	07 26       	eor	r0, r23
    6228:	0a d0       	rcall	.+20     	; 0x623e <__divmodhi4_neg1>
    622a:	77 fd       	sbrc	r23, 7
    622c:	04 d0       	rcall	.+8      	; 0x6236 <__divmodhi4_neg2>
    622e:	e5 df       	rcall	.-54     	; 0x61fa <__udivmodhi4>
    6230:	06 d0       	rcall	.+12     	; 0x623e <__divmodhi4_neg1>
    6232:	00 20       	and	r0, r0
    6234:	1a f4       	brpl	.+6      	; 0x623c <__divmodhi4_exit>

00006236 <__divmodhi4_neg2>:
    6236:	70 95       	com	r23
    6238:	61 95       	neg	r22
    623a:	7f 4f       	sbci	r23, 0xFF	; 255

0000623c <__divmodhi4_exit>:
    623c:	08 95       	ret

0000623e <__divmodhi4_neg1>:
    623e:	f6 f7       	brtc	.-4      	; 0x623c <__divmodhi4_exit>
    6240:	90 95       	com	r25
    6242:	81 95       	neg	r24
    6244:	9f 4f       	sbci	r25, 0xFF	; 255
    6246:	08 95       	ret

00006248 <__udivmodsi4>:
    6248:	a1 e2       	ldi	r26, 0x21	; 33
    624a:	1a 2e       	mov	r1, r26
    624c:	aa 1b       	sub	r26, r26
    624e:	bb 1b       	sub	r27, r27
    6250:	fd 01       	movw	r30, r26
    6252:	0d c0       	rjmp	.+26     	; 0x626e <__udivmodsi4_ep>

00006254 <__udivmodsi4_loop>:
    6254:	aa 1f       	adc	r26, r26
    6256:	bb 1f       	adc	r27, r27
    6258:	ee 1f       	adc	r30, r30
    625a:	ff 1f       	adc	r31, r31
    625c:	a2 17       	cp	r26, r18
    625e:	b3 07       	cpc	r27, r19
    6260:	e4 07       	cpc	r30, r20
    6262:	f5 07       	cpc	r31, r21
    6264:	20 f0       	brcs	.+8      	; 0x626e <__udivmodsi4_ep>
    6266:	a2 1b       	sub	r26, r18
    6268:	b3 0b       	sbc	r27, r19
    626a:	e4 0b       	sbc	r30, r20
    626c:	f5 0b       	sbc	r31, r21

0000626e <__udivmodsi4_ep>:
    626e:	66 1f       	adc	r22, r22
    6270:	77 1f       	adc	r23, r23
    6272:	88 1f       	adc	r24, r24
    6274:	99 1f       	adc	r25, r25
    6276:	1a 94       	dec	r1
    6278:	69 f7       	brne	.-38     	; 0x6254 <__udivmodsi4_loop>
    627a:	60 95       	com	r22
    627c:	70 95       	com	r23
    627e:	80 95       	com	r24
    6280:	90 95       	com	r25
    6282:	9b 01       	movw	r18, r22
    6284:	ac 01       	movw	r20, r24
    6286:	bd 01       	movw	r22, r26
    6288:	cf 01       	movw	r24, r30
    628a:	08 95       	ret

0000628c <__divmodsi4>:
    628c:	97 fb       	bst	r25, 7
    628e:	09 2e       	mov	r0, r25
    6290:	05 26       	eor	r0, r21
    6292:	0e d0       	rcall	.+28     	; 0x62b0 <__divmodsi4_neg1>
    6294:	57 fd       	sbrc	r21, 7
    6296:	04 d0       	rcall	.+8      	; 0x62a0 <__divmodsi4_neg2>
    6298:	d7 df       	rcall	.-82     	; 0x6248 <__udivmodsi4>
    629a:	0a d0       	rcall	.+20     	; 0x62b0 <__divmodsi4_neg1>
    629c:	00 1c       	adc	r0, r0
    629e:	38 f4       	brcc	.+14     	; 0x62ae <__divmodsi4_exit>

000062a0 <__divmodsi4_neg2>:
    62a0:	50 95       	com	r21
    62a2:	40 95       	com	r20
    62a4:	30 95       	com	r19
    62a6:	21 95       	neg	r18
    62a8:	3f 4f       	sbci	r19, 0xFF	; 255
    62aa:	4f 4f       	sbci	r20, 0xFF	; 255
    62ac:	5f 4f       	sbci	r21, 0xFF	; 255

000062ae <__divmodsi4_exit>:
    62ae:	08 95       	ret

000062b0 <__divmodsi4_neg1>:
    62b0:	f6 f7       	brtc	.-4      	; 0x62ae <__divmodsi4_exit>
    62b2:	90 95       	com	r25
    62b4:	80 95       	com	r24
    62b6:	70 95       	com	r23
    62b8:	61 95       	neg	r22
    62ba:	7f 4f       	sbci	r23, 0xFF	; 255
    62bc:	8f 4f       	sbci	r24, 0xFF	; 255
    62be:	9f 4f       	sbci	r25, 0xFF	; 255
    62c0:	08 95       	ret

000062c2 <__prologue_saves__>:
    62c2:	2f 92       	push	r2
    62c4:	3f 92       	push	r3
    62c6:	4f 92       	push	r4
    62c8:	5f 92       	push	r5
    62ca:	6f 92       	push	r6
    62cc:	7f 92       	push	r7
    62ce:	8f 92       	push	r8
    62d0:	9f 92       	push	r9
    62d2:	af 92       	push	r10
    62d4:	bf 92       	push	r11
    62d6:	cf 92       	push	r12
    62d8:	df 92       	push	r13
    62da:	ef 92       	push	r14
    62dc:	ff 92       	push	r15
    62de:	0f 93       	push	r16
    62e0:	1f 93       	push	r17
    62e2:	cf 93       	push	r28
    62e4:	df 93       	push	r29
    62e6:	cd b7       	in	r28, 0x3d	; 61
    62e8:	de b7       	in	r29, 0x3e	; 62
    62ea:	ca 1b       	sub	r28, r26
    62ec:	db 0b       	sbc	r29, r27
    62ee:	cd bf       	out	0x3d, r28	; 61
    62f0:	de bf       	out	0x3e, r29	; 62
    62f2:	19 94       	eijmp

000062f4 <__epilogue_restores__>:
    62f4:	2a 88       	ldd	r2, Y+18	; 0x12
    62f6:	39 88       	ldd	r3, Y+17	; 0x11
    62f8:	48 88       	ldd	r4, Y+16	; 0x10
    62fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    62fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    62fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    6300:	8c 84       	ldd	r8, Y+12	; 0x0c
    6302:	9b 84       	ldd	r9, Y+11	; 0x0b
    6304:	aa 84       	ldd	r10, Y+10	; 0x0a
    6306:	b9 84       	ldd	r11, Y+9	; 0x09
    6308:	c8 84       	ldd	r12, Y+8	; 0x08
    630a:	df 80       	ldd	r13, Y+7	; 0x07
    630c:	ee 80       	ldd	r14, Y+6	; 0x06
    630e:	fd 80       	ldd	r15, Y+5	; 0x05
    6310:	0c 81       	ldd	r16, Y+4	; 0x04
    6312:	1b 81       	ldd	r17, Y+3	; 0x03
    6314:	aa 81       	ldd	r26, Y+2	; 0x02
    6316:	b9 81       	ldd	r27, Y+1	; 0x01
    6318:	ce 0f       	add	r28, r30
    631a:	d1 1d       	adc	r29, r1
    631c:	cd bf       	out	0x3d, r28	; 61
    631e:	de bf       	out	0x3e, r29	; 62
    6320:	ed 01       	movw	r28, r26
    6322:	08 95       	ret

00006324 <strcpy_P>:
    6324:	fb 01       	movw	r30, r22
    6326:	dc 01       	movw	r26, r24
    6328:	05 90       	lpm	r0, Z+
    632a:	0d 92       	st	X+, r0
    632c:	00 20       	and	r0, r0
    632e:	e1 f7       	brne	.-8      	; 0x6328 <strcpy_P+0x4>
    6330:	08 95       	ret

00006332 <memmove>:
    6332:	68 17       	cp	r22, r24
    6334:	79 07       	cpc	r23, r25
    6336:	68 f4       	brcc	.+26     	; 0x6352 <memmove+0x20>
    6338:	fb 01       	movw	r30, r22
    633a:	dc 01       	movw	r26, r24
    633c:	e4 0f       	add	r30, r20
    633e:	f5 1f       	adc	r31, r21
    6340:	a4 0f       	add	r26, r20
    6342:	b5 1f       	adc	r27, r21
    6344:	02 c0       	rjmp	.+4      	; 0x634a <memmove+0x18>
    6346:	02 90       	ld	r0, -Z
    6348:	0e 92       	st	-X, r0
    634a:	41 50       	subi	r20, 0x01	; 1
    634c:	50 40       	sbci	r21, 0x00	; 0
    634e:	d8 f7       	brcc	.-10     	; 0x6346 <memmove+0x14>
    6350:	08 95       	ret
    6352:	0c 94 c9 33 	jmp	0x6792	; 0x6792 <memcpy>

00006356 <printf>:
    6356:	cf 93       	push	r28
    6358:	df 93       	push	r29
    635a:	cd b7       	in	r28, 0x3d	; 61
    635c:	de b7       	in	r29, 0x3e	; 62
    635e:	fe 01       	movw	r30, r28
    6360:	36 96       	adiw	r30, 0x06	; 6
    6362:	61 91       	ld	r22, Z+
    6364:	71 91       	ld	r23, Z+
    6366:	80 91 9c 50 	lds	r24, 0x509C
    636a:	90 91 9d 50 	lds	r25, 0x509D
    636e:	af 01       	movw	r20, r30
    6370:	0e 94 bd 31 	call	0x637a	; 0x637a <vfprintf>
    6374:	df 91       	pop	r29
    6376:	cf 91       	pop	r28
    6378:	08 95       	ret

0000637a <vfprintf>:
    637a:	2f 92       	push	r2
    637c:	3f 92       	push	r3
    637e:	4f 92       	push	r4
    6380:	5f 92       	push	r5
    6382:	6f 92       	push	r6
    6384:	7f 92       	push	r7
    6386:	8f 92       	push	r8
    6388:	9f 92       	push	r9
    638a:	af 92       	push	r10
    638c:	bf 92       	push	r11
    638e:	cf 92       	push	r12
    6390:	df 92       	push	r13
    6392:	ef 92       	push	r14
    6394:	ff 92       	push	r15
    6396:	0f 93       	push	r16
    6398:	1f 93       	push	r17
    639a:	cf 93       	push	r28
    639c:	df 93       	push	r29
    639e:	cd b7       	in	r28, 0x3d	; 61
    63a0:	de b7       	in	r29, 0x3e	; 62
    63a2:	2d 97       	sbiw	r28, 0x0d	; 13
    63a4:	cd bf       	out	0x3d, r28	; 61
    63a6:	de bf       	out	0x3e, r29	; 62
    63a8:	3c 01       	movw	r6, r24
    63aa:	6c 87       	std	Y+12, r22	; 0x0c
    63ac:	7d 87       	std	Y+13, r23	; 0x0d
    63ae:	5a 01       	movw	r10, r20
    63b0:	fc 01       	movw	r30, r24
    63b2:	16 82       	std	Z+6, r1	; 0x06
    63b4:	17 82       	std	Z+7, r1	; 0x07
    63b6:	83 81       	ldd	r24, Z+3	; 0x03
    63b8:	81 ff       	sbrs	r24, 1
    63ba:	c8 c1       	rjmp	.+912    	; 0x674c <vfprintf+0x3d2>
    63bc:	2e 01       	movw	r4, r28
    63be:	08 94       	sec
    63c0:	41 1c       	adc	r4, r1
    63c2:	51 1c       	adc	r5, r1
    63c4:	f3 01       	movw	r30, r6
    63c6:	93 81       	ldd	r25, Z+3	; 0x03
    63c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    63ca:	fd 85       	ldd	r31, Y+13	; 0x0d
    63cc:	93 fd       	sbrc	r25, 3
    63ce:	85 91       	lpm	r24, Z+
    63d0:	93 ff       	sbrs	r25, 3
    63d2:	81 91       	ld	r24, Z+
    63d4:	ec 87       	std	Y+12, r30	; 0x0c
    63d6:	fd 87       	std	Y+13, r31	; 0x0d
    63d8:	88 23       	and	r24, r24
    63da:	09 f4       	brne	.+2      	; 0x63de <vfprintf+0x64>
    63dc:	b3 c1       	rjmp	.+870    	; 0x6744 <vfprintf+0x3ca>
    63de:	85 32       	cpi	r24, 0x25	; 37
    63e0:	41 f4       	brne	.+16     	; 0x63f2 <vfprintf+0x78>
    63e2:	93 fd       	sbrc	r25, 3
    63e4:	85 91       	lpm	r24, Z+
    63e6:	93 ff       	sbrs	r25, 3
    63e8:	81 91       	ld	r24, Z+
    63ea:	ec 87       	std	Y+12, r30	; 0x0c
    63ec:	fd 87       	std	Y+13, r31	; 0x0d
    63ee:	85 32       	cpi	r24, 0x25	; 37
    63f0:	29 f4       	brne	.+10     	; 0x63fc <vfprintf+0x82>
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	b3 01       	movw	r22, r6
    63f6:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    63fa:	e4 cf       	rjmp	.-56     	; 0x63c4 <vfprintf+0x4a>
    63fc:	ff 24       	eor	r15, r15
    63fe:	ee 24       	eor	r14, r14
    6400:	10 e0       	ldi	r17, 0x00	; 0
    6402:	10 32       	cpi	r17, 0x20	; 32
    6404:	b0 f4       	brcc	.+44     	; 0x6432 <vfprintf+0xb8>
    6406:	8b 32       	cpi	r24, 0x2B	; 43
    6408:	69 f0       	breq	.+26     	; 0x6424 <vfprintf+0xaa>
    640a:	8c 32       	cpi	r24, 0x2C	; 44
    640c:	28 f4       	brcc	.+10     	; 0x6418 <vfprintf+0x9e>
    640e:	80 32       	cpi	r24, 0x20	; 32
    6410:	51 f0       	breq	.+20     	; 0x6426 <vfprintf+0xac>
    6412:	83 32       	cpi	r24, 0x23	; 35
    6414:	71 f4       	brne	.+28     	; 0x6432 <vfprintf+0xb8>
    6416:	0b c0       	rjmp	.+22     	; 0x642e <vfprintf+0xb4>
    6418:	8d 32       	cpi	r24, 0x2D	; 45
    641a:	39 f0       	breq	.+14     	; 0x642a <vfprintf+0xb0>
    641c:	80 33       	cpi	r24, 0x30	; 48
    641e:	49 f4       	brne	.+18     	; 0x6432 <vfprintf+0xb8>
    6420:	11 60       	ori	r17, 0x01	; 1
    6422:	2c c0       	rjmp	.+88     	; 0x647c <vfprintf+0x102>
    6424:	12 60       	ori	r17, 0x02	; 2
    6426:	14 60       	ori	r17, 0x04	; 4
    6428:	29 c0       	rjmp	.+82     	; 0x647c <vfprintf+0x102>
    642a:	18 60       	ori	r17, 0x08	; 8
    642c:	27 c0       	rjmp	.+78     	; 0x647c <vfprintf+0x102>
    642e:	10 61       	ori	r17, 0x10	; 16
    6430:	25 c0       	rjmp	.+74     	; 0x647c <vfprintf+0x102>
    6432:	17 fd       	sbrc	r17, 7
    6434:	2e c0       	rjmp	.+92     	; 0x6492 <vfprintf+0x118>
    6436:	28 2f       	mov	r18, r24
    6438:	20 53       	subi	r18, 0x30	; 48
    643a:	2a 30       	cpi	r18, 0x0A	; 10
    643c:	98 f4       	brcc	.+38     	; 0x6464 <vfprintf+0xea>
    643e:	16 ff       	sbrs	r17, 6
    6440:	08 c0       	rjmp	.+16     	; 0x6452 <vfprintf+0xd8>
    6442:	8f 2d       	mov	r24, r15
    6444:	88 0f       	add	r24, r24
    6446:	f8 2e       	mov	r15, r24
    6448:	ff 0c       	add	r15, r15
    644a:	ff 0c       	add	r15, r15
    644c:	f8 0e       	add	r15, r24
    644e:	f2 0e       	add	r15, r18
    6450:	15 c0       	rjmp	.+42     	; 0x647c <vfprintf+0x102>
    6452:	8e 2d       	mov	r24, r14
    6454:	88 0f       	add	r24, r24
    6456:	e8 2e       	mov	r14, r24
    6458:	ee 0c       	add	r14, r14
    645a:	ee 0c       	add	r14, r14
    645c:	e8 0e       	add	r14, r24
    645e:	e2 0e       	add	r14, r18
    6460:	10 62       	ori	r17, 0x20	; 32
    6462:	0c c0       	rjmp	.+24     	; 0x647c <vfprintf+0x102>
    6464:	8e 32       	cpi	r24, 0x2E	; 46
    6466:	21 f4       	brne	.+8      	; 0x6470 <vfprintf+0xf6>
    6468:	16 fd       	sbrc	r17, 6
    646a:	6c c1       	rjmp	.+728    	; 0x6744 <vfprintf+0x3ca>
    646c:	10 64       	ori	r17, 0x40	; 64
    646e:	06 c0       	rjmp	.+12     	; 0x647c <vfprintf+0x102>
    6470:	8c 36       	cpi	r24, 0x6C	; 108
    6472:	11 f4       	brne	.+4      	; 0x6478 <vfprintf+0xfe>
    6474:	10 68       	ori	r17, 0x80	; 128
    6476:	02 c0       	rjmp	.+4      	; 0x647c <vfprintf+0x102>
    6478:	88 36       	cpi	r24, 0x68	; 104
    647a:	59 f4       	brne	.+22     	; 0x6492 <vfprintf+0x118>
    647c:	ec 85       	ldd	r30, Y+12	; 0x0c
    647e:	fd 85       	ldd	r31, Y+13	; 0x0d
    6480:	93 fd       	sbrc	r25, 3
    6482:	85 91       	lpm	r24, Z+
    6484:	93 ff       	sbrs	r25, 3
    6486:	81 91       	ld	r24, Z+
    6488:	ec 87       	std	Y+12, r30	; 0x0c
    648a:	fd 87       	std	Y+13, r31	; 0x0d
    648c:	88 23       	and	r24, r24
    648e:	09 f0       	breq	.+2      	; 0x6492 <vfprintf+0x118>
    6490:	b8 cf       	rjmp	.-144    	; 0x6402 <vfprintf+0x88>
    6492:	98 2f       	mov	r25, r24
    6494:	95 54       	subi	r25, 0x45	; 69
    6496:	93 30       	cpi	r25, 0x03	; 3
    6498:	18 f0       	brcs	.+6      	; 0x64a0 <vfprintf+0x126>
    649a:	90 52       	subi	r25, 0x20	; 32
    649c:	93 30       	cpi	r25, 0x03	; 3
    649e:	38 f4       	brcc	.+14     	; 0x64ae <vfprintf+0x134>
    64a0:	24 e0       	ldi	r18, 0x04	; 4
    64a2:	30 e0       	ldi	r19, 0x00	; 0
    64a4:	a2 0e       	add	r10, r18
    64a6:	b3 1e       	adc	r11, r19
    64a8:	3f e3       	ldi	r19, 0x3F	; 63
    64aa:	39 83       	std	Y+1, r19	; 0x01
    64ac:	0f c0       	rjmp	.+30     	; 0x64cc <vfprintf+0x152>
    64ae:	83 36       	cpi	r24, 0x63	; 99
    64b0:	31 f0       	breq	.+12     	; 0x64be <vfprintf+0x144>
    64b2:	83 37       	cpi	r24, 0x73	; 115
    64b4:	81 f0       	breq	.+32     	; 0x64d6 <vfprintf+0x15c>
    64b6:	83 35       	cpi	r24, 0x53	; 83
    64b8:	09 f0       	breq	.+2      	; 0x64bc <vfprintf+0x142>
    64ba:	5a c0       	rjmp	.+180    	; 0x6570 <vfprintf+0x1f6>
    64bc:	22 c0       	rjmp	.+68     	; 0x6502 <vfprintf+0x188>
    64be:	f5 01       	movw	r30, r10
    64c0:	80 81       	ld	r24, Z
    64c2:	89 83       	std	Y+1, r24	; 0x01
    64c4:	22 e0       	ldi	r18, 0x02	; 2
    64c6:	30 e0       	ldi	r19, 0x00	; 0
    64c8:	a2 0e       	add	r10, r18
    64ca:	b3 1e       	adc	r11, r19
    64cc:	21 e0       	ldi	r18, 0x01	; 1
    64ce:	c2 2e       	mov	r12, r18
    64d0:	d1 2c       	mov	r13, r1
    64d2:	42 01       	movw	r8, r4
    64d4:	14 c0       	rjmp	.+40     	; 0x64fe <vfprintf+0x184>
    64d6:	92 e0       	ldi	r25, 0x02	; 2
    64d8:	29 2e       	mov	r2, r25
    64da:	31 2c       	mov	r3, r1
    64dc:	2a 0c       	add	r2, r10
    64de:	3b 1c       	adc	r3, r11
    64e0:	f5 01       	movw	r30, r10
    64e2:	80 80       	ld	r8, Z
    64e4:	91 80       	ldd	r9, Z+1	; 0x01
    64e6:	16 ff       	sbrs	r17, 6
    64e8:	03 c0       	rjmp	.+6      	; 0x64f0 <vfprintf+0x176>
    64ea:	6f 2d       	mov	r22, r15
    64ec:	70 e0       	ldi	r23, 0x00	; 0
    64ee:	02 c0       	rjmp	.+4      	; 0x64f4 <vfprintf+0x17a>
    64f0:	6f ef       	ldi	r22, 0xFF	; 255
    64f2:	7f ef       	ldi	r23, 0xFF	; 255
    64f4:	c4 01       	movw	r24, r8
    64f6:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <strnlen>
    64fa:	6c 01       	movw	r12, r24
    64fc:	51 01       	movw	r10, r2
    64fe:	1f 77       	andi	r17, 0x7F	; 127
    6500:	15 c0       	rjmp	.+42     	; 0x652c <vfprintf+0x1b2>
    6502:	82 e0       	ldi	r24, 0x02	; 2
    6504:	28 2e       	mov	r2, r24
    6506:	31 2c       	mov	r3, r1
    6508:	2a 0c       	add	r2, r10
    650a:	3b 1c       	adc	r3, r11
    650c:	f5 01       	movw	r30, r10
    650e:	80 80       	ld	r8, Z
    6510:	91 80       	ldd	r9, Z+1	; 0x01
    6512:	16 ff       	sbrs	r17, 6
    6514:	03 c0       	rjmp	.+6      	; 0x651c <vfprintf+0x1a2>
    6516:	6f 2d       	mov	r22, r15
    6518:	70 e0       	ldi	r23, 0x00	; 0
    651a:	02 c0       	rjmp	.+4      	; 0x6520 <vfprintf+0x1a6>
    651c:	6f ef       	ldi	r22, 0xFF	; 255
    651e:	7f ef       	ldi	r23, 0xFF	; 255
    6520:	c4 01       	movw	r24, r8
    6522:	0e 94 be 33 	call	0x677c	; 0x677c <strnlen_P>
    6526:	6c 01       	movw	r12, r24
    6528:	10 68       	ori	r17, 0x80	; 128
    652a:	51 01       	movw	r10, r2
    652c:	13 fd       	sbrc	r17, 3
    652e:	1c c0       	rjmp	.+56     	; 0x6568 <vfprintf+0x1ee>
    6530:	06 c0       	rjmp	.+12     	; 0x653e <vfprintf+0x1c4>
    6532:	80 e2       	ldi	r24, 0x20	; 32
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	b3 01       	movw	r22, r6
    6538:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    653c:	ea 94       	dec	r14
    653e:	8e 2d       	mov	r24, r14
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	c8 16       	cp	r12, r24
    6544:	d9 06       	cpc	r13, r25
    6546:	a8 f3       	brcs	.-22     	; 0x6532 <vfprintf+0x1b8>
    6548:	0f c0       	rjmp	.+30     	; 0x6568 <vfprintf+0x1ee>
    654a:	f4 01       	movw	r30, r8
    654c:	17 fd       	sbrc	r17, 7
    654e:	85 91       	lpm	r24, Z+
    6550:	17 ff       	sbrs	r17, 7
    6552:	81 91       	ld	r24, Z+
    6554:	4f 01       	movw	r8, r30
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	b3 01       	movw	r22, r6
    655a:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    655e:	e1 10       	cpse	r14, r1
    6560:	ea 94       	dec	r14
    6562:	08 94       	sec
    6564:	c1 08       	sbc	r12, r1
    6566:	d1 08       	sbc	r13, r1
    6568:	c1 14       	cp	r12, r1
    656a:	d1 04       	cpc	r13, r1
    656c:	71 f7       	brne	.-36     	; 0x654a <vfprintf+0x1d0>
    656e:	e7 c0       	rjmp	.+462    	; 0x673e <vfprintf+0x3c4>
    6570:	84 36       	cpi	r24, 0x64	; 100
    6572:	11 f0       	breq	.+4      	; 0x6578 <vfprintf+0x1fe>
    6574:	89 36       	cpi	r24, 0x69	; 105
    6576:	51 f5       	brne	.+84     	; 0x65cc <vfprintf+0x252>
    6578:	f5 01       	movw	r30, r10
    657a:	17 ff       	sbrs	r17, 7
    657c:	07 c0       	rjmp	.+14     	; 0x658c <vfprintf+0x212>
    657e:	80 81       	ld	r24, Z
    6580:	91 81       	ldd	r25, Z+1	; 0x01
    6582:	a2 81       	ldd	r26, Z+2	; 0x02
    6584:	b3 81       	ldd	r27, Z+3	; 0x03
    6586:	24 e0       	ldi	r18, 0x04	; 4
    6588:	30 e0       	ldi	r19, 0x00	; 0
    658a:	08 c0       	rjmp	.+16     	; 0x659c <vfprintf+0x222>
    658c:	80 81       	ld	r24, Z
    658e:	91 81       	ldd	r25, Z+1	; 0x01
    6590:	aa 27       	eor	r26, r26
    6592:	97 fd       	sbrc	r25, 7
    6594:	a0 95       	com	r26
    6596:	ba 2f       	mov	r27, r26
    6598:	22 e0       	ldi	r18, 0x02	; 2
    659a:	30 e0       	ldi	r19, 0x00	; 0
    659c:	a2 0e       	add	r10, r18
    659e:	b3 1e       	adc	r11, r19
    65a0:	01 2f       	mov	r16, r17
    65a2:	0f 76       	andi	r16, 0x6F	; 111
    65a4:	b7 ff       	sbrs	r27, 7
    65a6:	08 c0       	rjmp	.+16     	; 0x65b8 <vfprintf+0x23e>
    65a8:	b0 95       	com	r27
    65aa:	a0 95       	com	r26
    65ac:	90 95       	com	r25
    65ae:	81 95       	neg	r24
    65b0:	9f 4f       	sbci	r25, 0xFF	; 255
    65b2:	af 4f       	sbci	r26, 0xFF	; 255
    65b4:	bf 4f       	sbci	r27, 0xFF	; 255
    65b6:	00 68       	ori	r16, 0x80	; 128
    65b8:	bc 01       	movw	r22, r24
    65ba:	cd 01       	movw	r24, r26
    65bc:	a2 01       	movw	r20, r4
    65be:	2a e0       	ldi	r18, 0x0A	; 10
    65c0:	30 e0       	ldi	r19, 0x00	; 0
    65c2:	0e 94 09 34 	call	0x6812	; 0x6812 <__ultoa_invert>
    65c6:	d8 2e       	mov	r13, r24
    65c8:	d4 18       	sub	r13, r4
    65ca:	3f c0       	rjmp	.+126    	; 0x664a <vfprintf+0x2d0>
    65cc:	85 37       	cpi	r24, 0x75	; 117
    65ce:	21 f4       	brne	.+8      	; 0x65d8 <vfprintf+0x25e>
    65d0:	1f 7e       	andi	r17, 0xEF	; 239
    65d2:	2a e0       	ldi	r18, 0x0A	; 10
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	20 c0       	rjmp	.+64     	; 0x6618 <vfprintf+0x29e>
    65d8:	19 7f       	andi	r17, 0xF9	; 249
    65da:	8f 36       	cpi	r24, 0x6F	; 111
    65dc:	a9 f0       	breq	.+42     	; 0x6608 <vfprintf+0x28e>
    65de:	80 37       	cpi	r24, 0x70	; 112
    65e0:	20 f4       	brcc	.+8      	; 0x65ea <vfprintf+0x270>
    65e2:	88 35       	cpi	r24, 0x58	; 88
    65e4:	09 f0       	breq	.+2      	; 0x65e8 <vfprintf+0x26e>
    65e6:	ae c0       	rjmp	.+348    	; 0x6744 <vfprintf+0x3ca>
    65e8:	0b c0       	rjmp	.+22     	; 0x6600 <vfprintf+0x286>
    65ea:	80 37       	cpi	r24, 0x70	; 112
    65ec:	21 f0       	breq	.+8      	; 0x65f6 <vfprintf+0x27c>
    65ee:	88 37       	cpi	r24, 0x78	; 120
    65f0:	09 f0       	breq	.+2      	; 0x65f4 <vfprintf+0x27a>
    65f2:	a8 c0       	rjmp	.+336    	; 0x6744 <vfprintf+0x3ca>
    65f4:	01 c0       	rjmp	.+2      	; 0x65f8 <vfprintf+0x27e>
    65f6:	10 61       	ori	r17, 0x10	; 16
    65f8:	14 ff       	sbrs	r17, 4
    65fa:	09 c0       	rjmp	.+18     	; 0x660e <vfprintf+0x294>
    65fc:	14 60       	ori	r17, 0x04	; 4
    65fe:	07 c0       	rjmp	.+14     	; 0x660e <vfprintf+0x294>
    6600:	14 ff       	sbrs	r17, 4
    6602:	08 c0       	rjmp	.+16     	; 0x6614 <vfprintf+0x29a>
    6604:	16 60       	ori	r17, 0x06	; 6
    6606:	06 c0       	rjmp	.+12     	; 0x6614 <vfprintf+0x29a>
    6608:	28 e0       	ldi	r18, 0x08	; 8
    660a:	30 e0       	ldi	r19, 0x00	; 0
    660c:	05 c0       	rjmp	.+10     	; 0x6618 <vfprintf+0x29e>
    660e:	20 e1       	ldi	r18, 0x10	; 16
    6610:	30 e0       	ldi	r19, 0x00	; 0
    6612:	02 c0       	rjmp	.+4      	; 0x6618 <vfprintf+0x29e>
    6614:	20 e1       	ldi	r18, 0x10	; 16
    6616:	32 e0       	ldi	r19, 0x02	; 2
    6618:	f5 01       	movw	r30, r10
    661a:	17 ff       	sbrs	r17, 7
    661c:	07 c0       	rjmp	.+14     	; 0x662c <vfprintf+0x2b2>
    661e:	60 81       	ld	r22, Z
    6620:	71 81       	ldd	r23, Z+1	; 0x01
    6622:	82 81       	ldd	r24, Z+2	; 0x02
    6624:	93 81       	ldd	r25, Z+3	; 0x03
    6626:	44 e0       	ldi	r20, 0x04	; 4
    6628:	50 e0       	ldi	r21, 0x00	; 0
    662a:	06 c0       	rjmp	.+12     	; 0x6638 <vfprintf+0x2be>
    662c:	60 81       	ld	r22, Z
    662e:	71 81       	ldd	r23, Z+1	; 0x01
    6630:	80 e0       	ldi	r24, 0x00	; 0
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	42 e0       	ldi	r20, 0x02	; 2
    6636:	50 e0       	ldi	r21, 0x00	; 0
    6638:	a4 0e       	add	r10, r20
    663a:	b5 1e       	adc	r11, r21
    663c:	a2 01       	movw	r20, r4
    663e:	0e 94 09 34 	call	0x6812	; 0x6812 <__ultoa_invert>
    6642:	d8 2e       	mov	r13, r24
    6644:	d4 18       	sub	r13, r4
    6646:	01 2f       	mov	r16, r17
    6648:	0f 77       	andi	r16, 0x7F	; 127
    664a:	06 ff       	sbrs	r16, 6
    664c:	09 c0       	rjmp	.+18     	; 0x6660 <vfprintf+0x2e6>
    664e:	0e 7f       	andi	r16, 0xFE	; 254
    6650:	df 14       	cp	r13, r15
    6652:	30 f4       	brcc	.+12     	; 0x6660 <vfprintf+0x2e6>
    6654:	04 ff       	sbrs	r16, 4
    6656:	06 c0       	rjmp	.+12     	; 0x6664 <vfprintf+0x2ea>
    6658:	02 fd       	sbrc	r16, 2
    665a:	04 c0       	rjmp	.+8      	; 0x6664 <vfprintf+0x2ea>
    665c:	0f 7e       	andi	r16, 0xEF	; 239
    665e:	02 c0       	rjmp	.+4      	; 0x6664 <vfprintf+0x2ea>
    6660:	1d 2d       	mov	r17, r13
    6662:	01 c0       	rjmp	.+2      	; 0x6666 <vfprintf+0x2ec>
    6664:	1f 2d       	mov	r17, r15
    6666:	80 2f       	mov	r24, r16
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	04 ff       	sbrs	r16, 4
    666c:	0c c0       	rjmp	.+24     	; 0x6686 <vfprintf+0x30c>
    666e:	fe 01       	movw	r30, r28
    6670:	ed 0d       	add	r30, r13
    6672:	f1 1d       	adc	r31, r1
    6674:	20 81       	ld	r18, Z
    6676:	20 33       	cpi	r18, 0x30	; 48
    6678:	11 f4       	brne	.+4      	; 0x667e <vfprintf+0x304>
    667a:	09 7e       	andi	r16, 0xE9	; 233
    667c:	09 c0       	rjmp	.+18     	; 0x6690 <vfprintf+0x316>
    667e:	02 ff       	sbrs	r16, 2
    6680:	06 c0       	rjmp	.+12     	; 0x668e <vfprintf+0x314>
    6682:	1e 5f       	subi	r17, 0xFE	; 254
    6684:	05 c0       	rjmp	.+10     	; 0x6690 <vfprintf+0x316>
    6686:	86 78       	andi	r24, 0x86	; 134
    6688:	90 70       	andi	r25, 0x00	; 0
    668a:	00 97       	sbiw	r24, 0x00	; 0
    668c:	09 f0       	breq	.+2      	; 0x6690 <vfprintf+0x316>
    668e:	1f 5f       	subi	r17, 0xFF	; 255
    6690:	80 2e       	mov	r8, r16
    6692:	99 24       	eor	r9, r9
    6694:	03 fd       	sbrc	r16, 3
    6696:	12 c0       	rjmp	.+36     	; 0x66bc <vfprintf+0x342>
    6698:	00 ff       	sbrs	r16, 0
    669a:	0d c0       	rjmp	.+26     	; 0x66b6 <vfprintf+0x33c>
    669c:	fd 2c       	mov	r15, r13
    669e:	1e 15       	cp	r17, r14
    66a0:	50 f4       	brcc	.+20     	; 0x66b6 <vfprintf+0x33c>
    66a2:	fe 0c       	add	r15, r14
    66a4:	f1 1a       	sub	r15, r17
    66a6:	1e 2d       	mov	r17, r14
    66a8:	06 c0       	rjmp	.+12     	; 0x66b6 <vfprintf+0x33c>
    66aa:	80 e2       	ldi	r24, 0x20	; 32
    66ac:	90 e0       	ldi	r25, 0x00	; 0
    66ae:	b3 01       	movw	r22, r6
    66b0:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    66b4:	1f 5f       	subi	r17, 0xFF	; 255
    66b6:	1e 15       	cp	r17, r14
    66b8:	c0 f3       	brcs	.-16     	; 0x66aa <vfprintf+0x330>
    66ba:	04 c0       	rjmp	.+8      	; 0x66c4 <vfprintf+0x34a>
    66bc:	1e 15       	cp	r17, r14
    66be:	10 f4       	brcc	.+4      	; 0x66c4 <vfprintf+0x34a>
    66c0:	e1 1a       	sub	r14, r17
    66c2:	01 c0       	rjmp	.+2      	; 0x66c6 <vfprintf+0x34c>
    66c4:	ee 24       	eor	r14, r14
    66c6:	84 fe       	sbrs	r8, 4
    66c8:	0f c0       	rjmp	.+30     	; 0x66e8 <vfprintf+0x36e>
    66ca:	80 e3       	ldi	r24, 0x30	; 48
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	b3 01       	movw	r22, r6
    66d0:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    66d4:	82 fe       	sbrs	r8, 2
    66d6:	1f c0       	rjmp	.+62     	; 0x6716 <vfprintf+0x39c>
    66d8:	81 fe       	sbrs	r8, 1
    66da:	03 c0       	rjmp	.+6      	; 0x66e2 <vfprintf+0x368>
    66dc:	88 e5       	ldi	r24, 0x58	; 88
    66de:	90 e0       	ldi	r25, 0x00	; 0
    66e0:	10 c0       	rjmp	.+32     	; 0x6702 <vfprintf+0x388>
    66e2:	88 e7       	ldi	r24, 0x78	; 120
    66e4:	90 e0       	ldi	r25, 0x00	; 0
    66e6:	0d c0       	rjmp	.+26     	; 0x6702 <vfprintf+0x388>
    66e8:	c4 01       	movw	r24, r8
    66ea:	86 78       	andi	r24, 0x86	; 134
    66ec:	90 70       	andi	r25, 0x00	; 0
    66ee:	00 97       	sbiw	r24, 0x00	; 0
    66f0:	91 f0       	breq	.+36     	; 0x6716 <vfprintf+0x39c>
    66f2:	81 fc       	sbrc	r8, 1
    66f4:	02 c0       	rjmp	.+4      	; 0x66fa <vfprintf+0x380>
    66f6:	80 e2       	ldi	r24, 0x20	; 32
    66f8:	01 c0       	rjmp	.+2      	; 0x66fc <vfprintf+0x382>
    66fa:	8b e2       	ldi	r24, 0x2B	; 43
    66fc:	07 fd       	sbrc	r16, 7
    66fe:	8d e2       	ldi	r24, 0x2D	; 45
    6700:	90 e0       	ldi	r25, 0x00	; 0
    6702:	b3 01       	movw	r22, r6
    6704:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    6708:	06 c0       	rjmp	.+12     	; 0x6716 <vfprintf+0x39c>
    670a:	80 e3       	ldi	r24, 0x30	; 48
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	b3 01       	movw	r22, r6
    6710:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    6714:	fa 94       	dec	r15
    6716:	df 14       	cp	r13, r15
    6718:	c0 f3       	brcs	.-16     	; 0x670a <vfprintf+0x390>
    671a:	da 94       	dec	r13
    671c:	f2 01       	movw	r30, r4
    671e:	ed 0d       	add	r30, r13
    6720:	f1 1d       	adc	r31, r1
    6722:	80 81       	ld	r24, Z
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	b3 01       	movw	r22, r6
    6728:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    672c:	dd 20       	and	r13, r13
    672e:	a9 f7       	brne	.-22     	; 0x671a <vfprintf+0x3a0>
    6730:	06 c0       	rjmp	.+12     	; 0x673e <vfprintf+0x3c4>
    6732:	80 e2       	ldi	r24, 0x20	; 32
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	b3 01       	movw	r22, r6
    6738:	0e 94 dd 33 	call	0x67ba	; 0x67ba <fputc>
    673c:	ea 94       	dec	r14
    673e:	ee 20       	and	r14, r14
    6740:	c1 f7       	brne	.-16     	; 0x6732 <vfprintf+0x3b8>
    6742:	40 ce       	rjmp	.-896    	; 0x63c4 <vfprintf+0x4a>
    6744:	f3 01       	movw	r30, r6
    6746:	86 81       	ldd	r24, Z+6	; 0x06
    6748:	97 81       	ldd	r25, Z+7	; 0x07
    674a:	02 c0       	rjmp	.+4      	; 0x6750 <vfprintf+0x3d6>
    674c:	8f ef       	ldi	r24, 0xFF	; 255
    674e:	9f ef       	ldi	r25, 0xFF	; 255
    6750:	2d 96       	adiw	r28, 0x0d	; 13
    6752:	cd bf       	out	0x3d, r28	; 61
    6754:	de bf       	out	0x3e, r29	; 62
    6756:	df 91       	pop	r29
    6758:	cf 91       	pop	r28
    675a:	1f 91       	pop	r17
    675c:	0f 91       	pop	r16
    675e:	ff 90       	pop	r15
    6760:	ef 90       	pop	r14
    6762:	df 90       	pop	r13
    6764:	cf 90       	pop	r12
    6766:	bf 90       	pop	r11
    6768:	af 90       	pop	r10
    676a:	9f 90       	pop	r9
    676c:	8f 90       	pop	r8
    676e:	7f 90       	pop	r7
    6770:	6f 90       	pop	r6
    6772:	5f 90       	pop	r5
    6774:	4f 90       	pop	r4
    6776:	3f 90       	pop	r3
    6778:	2f 90       	pop	r2
    677a:	08 95       	ret

0000677c <strnlen_P>:
    677c:	fc 01       	movw	r30, r24
    677e:	05 90       	lpm	r0, Z+
    6780:	61 50       	subi	r22, 0x01	; 1
    6782:	70 40       	sbci	r23, 0x00	; 0
    6784:	01 10       	cpse	r0, r1
    6786:	d8 f7       	brcc	.-10     	; 0x677e <strnlen_P+0x2>
    6788:	80 95       	com	r24
    678a:	90 95       	com	r25
    678c:	8e 0f       	add	r24, r30
    678e:	9f 1f       	adc	r25, r31
    6790:	08 95       	ret

00006792 <memcpy>:
    6792:	fb 01       	movw	r30, r22
    6794:	dc 01       	movw	r26, r24
    6796:	02 c0       	rjmp	.+4      	; 0x679c <memcpy+0xa>
    6798:	01 90       	ld	r0, Z+
    679a:	0d 92       	st	X+, r0
    679c:	41 50       	subi	r20, 0x01	; 1
    679e:	50 40       	sbci	r21, 0x00	; 0
    67a0:	d8 f7       	brcc	.-10     	; 0x6798 <memcpy+0x6>
    67a2:	08 95       	ret

000067a4 <strnlen>:
    67a4:	fc 01       	movw	r30, r24
    67a6:	61 50       	subi	r22, 0x01	; 1
    67a8:	70 40       	sbci	r23, 0x00	; 0
    67aa:	01 90       	ld	r0, Z+
    67ac:	01 10       	cpse	r0, r1
    67ae:	d8 f7       	brcc	.-10     	; 0x67a6 <strnlen+0x2>
    67b0:	80 95       	com	r24
    67b2:	90 95       	com	r25
    67b4:	8e 0f       	add	r24, r30
    67b6:	9f 1f       	adc	r25, r31
    67b8:	08 95       	ret

000067ba <fputc>:
    67ba:	0f 93       	push	r16
    67bc:	1f 93       	push	r17
    67be:	cf 93       	push	r28
    67c0:	df 93       	push	r29
    67c2:	8c 01       	movw	r16, r24
    67c4:	eb 01       	movw	r28, r22
    67c6:	8b 81       	ldd	r24, Y+3	; 0x03
    67c8:	81 ff       	sbrs	r24, 1
    67ca:	1b c0       	rjmp	.+54     	; 0x6802 <fputc+0x48>
    67cc:	82 ff       	sbrs	r24, 2
    67ce:	0d c0       	rjmp	.+26     	; 0x67ea <fputc+0x30>
    67d0:	2e 81       	ldd	r18, Y+6	; 0x06
    67d2:	3f 81       	ldd	r19, Y+7	; 0x07
    67d4:	8c 81       	ldd	r24, Y+4	; 0x04
    67d6:	9d 81       	ldd	r25, Y+5	; 0x05
    67d8:	28 17       	cp	r18, r24
    67da:	39 07       	cpc	r19, r25
    67dc:	64 f4       	brge	.+24     	; 0x67f6 <fputc+0x3c>
    67de:	e8 81       	ld	r30, Y
    67e0:	f9 81       	ldd	r31, Y+1	; 0x01
    67e2:	01 93       	st	Z+, r16
    67e4:	e8 83       	st	Y, r30
    67e6:	f9 83       	std	Y+1, r31	; 0x01
    67e8:	06 c0       	rjmp	.+12     	; 0x67f6 <fputc+0x3c>
    67ea:	e8 85       	ldd	r30, Y+8	; 0x08
    67ec:	f9 85       	ldd	r31, Y+9	; 0x09
    67ee:	80 2f       	mov	r24, r16
    67f0:	19 95       	eicall
    67f2:	00 97       	sbiw	r24, 0x00	; 0
    67f4:	31 f4       	brne	.+12     	; 0x6802 <fputc+0x48>
    67f6:	8e 81       	ldd	r24, Y+6	; 0x06
    67f8:	9f 81       	ldd	r25, Y+7	; 0x07
    67fa:	01 96       	adiw	r24, 0x01	; 1
    67fc:	8e 83       	std	Y+6, r24	; 0x06
    67fe:	9f 83       	std	Y+7, r25	; 0x07
    6800:	02 c0       	rjmp	.+4      	; 0x6806 <fputc+0x4c>
    6802:	0f ef       	ldi	r16, 0xFF	; 255
    6804:	1f ef       	ldi	r17, 0xFF	; 255
    6806:	c8 01       	movw	r24, r16
    6808:	df 91       	pop	r29
    680a:	cf 91       	pop	r28
    680c:	1f 91       	pop	r17
    680e:	0f 91       	pop	r16
    6810:	08 95       	ret

00006812 <__ultoa_invert>:
    6812:	fa 01       	movw	r30, r20
    6814:	aa 27       	eor	r26, r26
    6816:	28 30       	cpi	r18, 0x08	; 8
    6818:	51 f1       	breq	.+84     	; 0x686e <__ultoa_invert+0x5c>
    681a:	20 31       	cpi	r18, 0x10	; 16
    681c:	81 f1       	breq	.+96     	; 0x687e <__ultoa_invert+0x6c>
    681e:	e8 94       	clt
    6820:	6f 93       	push	r22
    6822:	6e 7f       	andi	r22, 0xFE	; 254
    6824:	6e 5f       	subi	r22, 0xFE	; 254
    6826:	7f 4f       	sbci	r23, 0xFF	; 255
    6828:	8f 4f       	sbci	r24, 0xFF	; 255
    682a:	9f 4f       	sbci	r25, 0xFF	; 255
    682c:	af 4f       	sbci	r26, 0xFF	; 255
    682e:	b1 e0       	ldi	r27, 0x01	; 1
    6830:	3e d0       	rcall	.+124    	; 0x68ae <__ultoa_invert+0x9c>
    6832:	b4 e0       	ldi	r27, 0x04	; 4
    6834:	3c d0       	rcall	.+120    	; 0x68ae <__ultoa_invert+0x9c>
    6836:	67 0f       	add	r22, r23
    6838:	78 1f       	adc	r23, r24
    683a:	89 1f       	adc	r24, r25
    683c:	9a 1f       	adc	r25, r26
    683e:	a1 1d       	adc	r26, r1
    6840:	68 0f       	add	r22, r24
    6842:	79 1f       	adc	r23, r25
    6844:	8a 1f       	adc	r24, r26
    6846:	91 1d       	adc	r25, r1
    6848:	a1 1d       	adc	r26, r1
    684a:	6a 0f       	add	r22, r26
    684c:	71 1d       	adc	r23, r1
    684e:	81 1d       	adc	r24, r1
    6850:	91 1d       	adc	r25, r1
    6852:	a1 1d       	adc	r26, r1
    6854:	20 d0       	rcall	.+64     	; 0x6896 <__ultoa_invert+0x84>
    6856:	09 f4       	brne	.+2      	; 0x685a <__ultoa_invert+0x48>
    6858:	68 94       	set
    685a:	3f 91       	pop	r19
    685c:	2a e0       	ldi	r18, 0x0A	; 10
    685e:	26 9f       	mul	r18, r22
    6860:	11 24       	eor	r1, r1
    6862:	30 19       	sub	r19, r0
    6864:	30 5d       	subi	r19, 0xD0	; 208
    6866:	31 93       	st	Z+, r19
    6868:	de f6       	brtc	.-74     	; 0x6820 <__ultoa_invert+0xe>
    686a:	cf 01       	movw	r24, r30
    686c:	08 95       	ret
    686e:	46 2f       	mov	r20, r22
    6870:	47 70       	andi	r20, 0x07	; 7
    6872:	40 5d       	subi	r20, 0xD0	; 208
    6874:	41 93       	st	Z+, r20
    6876:	b3 e0       	ldi	r27, 0x03	; 3
    6878:	0f d0       	rcall	.+30     	; 0x6898 <__ultoa_invert+0x86>
    687a:	c9 f7       	brne	.-14     	; 0x686e <__ultoa_invert+0x5c>
    687c:	f6 cf       	rjmp	.-20     	; 0x686a <__ultoa_invert+0x58>
    687e:	46 2f       	mov	r20, r22
    6880:	4f 70       	andi	r20, 0x0F	; 15
    6882:	40 5d       	subi	r20, 0xD0	; 208
    6884:	4a 33       	cpi	r20, 0x3A	; 58
    6886:	18 f0       	brcs	.+6      	; 0x688e <__ultoa_invert+0x7c>
    6888:	49 5d       	subi	r20, 0xD9	; 217
    688a:	31 fd       	sbrc	r19, 1
    688c:	40 52       	subi	r20, 0x20	; 32
    688e:	41 93       	st	Z+, r20
    6890:	02 d0       	rcall	.+4      	; 0x6896 <__ultoa_invert+0x84>
    6892:	a9 f7       	brne	.-22     	; 0x687e <__ultoa_invert+0x6c>
    6894:	ea cf       	rjmp	.-44     	; 0x686a <__ultoa_invert+0x58>
    6896:	b4 e0       	ldi	r27, 0x04	; 4
    6898:	a6 95       	lsr	r26
    689a:	97 95       	ror	r25
    689c:	87 95       	ror	r24
    689e:	77 95       	ror	r23
    68a0:	67 95       	ror	r22
    68a2:	ba 95       	dec	r27
    68a4:	c9 f7       	brne	.-14     	; 0x6898 <__ultoa_invert+0x86>
    68a6:	00 97       	sbiw	r24, 0x00	; 0
    68a8:	61 05       	cpc	r22, r1
    68aa:	71 05       	cpc	r23, r1
    68ac:	08 95       	ret
    68ae:	9b 01       	movw	r18, r22
    68b0:	ac 01       	movw	r20, r24
    68b2:	0a 2e       	mov	r0, r26
    68b4:	06 94       	lsr	r0
    68b6:	57 95       	ror	r21
    68b8:	47 95       	ror	r20
    68ba:	37 95       	ror	r19
    68bc:	27 95       	ror	r18
    68be:	ba 95       	dec	r27
    68c0:	c9 f7       	brne	.-14     	; 0x68b4 <__ultoa_invert+0xa2>
    68c2:	62 0f       	add	r22, r18
    68c4:	73 1f       	adc	r23, r19
    68c6:	84 1f       	adc	r24, r20
    68c8:	95 1f       	adc	r25, r21
    68ca:	a0 1d       	adc	r26, r0
    68cc:	08 95       	ret

000068ce <_exit>:
    68ce:	f8 94       	cli

000068d0 <__stop_program>:
    68d0:	ff cf       	rjmp	.-2      	; 0x68d0 <__stop_program>
